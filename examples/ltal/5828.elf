%% Twelf %word32 preamble generated automatically by word32header.sh
word32 : type.
+ : word32 -> word32 -> word32 -> type.
* : word32 -> word32 -> word32 -> type.
/ : word32 -> word32 -> word32 -> type.
prove+ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} type.
proof+ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} prove+ X Y Z P.
prove* : {X:word32} {Y:word32} {Z:word32} {P:* X Y Z} type.
proof* : {X:word32} {Y:word32} {Z:word32} {P:* X Y Z} prove* X Y Z P.
prove/ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} type.
proof/ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} prove/ X Y Z P.

%% Numbers and arithmetic
0 : word32.
00 : word32.
01 : word32.
1 : word32.
02 : word32.
2 : word32.
3 : word32.
04 : word32.
4 : word32.
05 : word32.
5 : word32.
06 : word32.
6 : word32.
07 : word32.
7 : word32.
8 : word32.
09 : word32.
9 : word32.
10 : word32.
11 : word32.
12 : word32.
13 : word32.
14 : word32.
15 : word32.
16 : word32.
17 : word32.
18 : word32.
19 : word32.
20 : word32.
21 : word32.
22 : word32.
23 : word32.
24 : word32.
25 : word32.
26 : word32.
27 : word32.
28 : word32.
29 : word32.
30 : word32.
31 : word32.
32 : word32.
33 : word32.
34 : word32.
35 : word32.
36 : word32.
37 : word32.
38 : word32.
39 : word32.
40 : word32.
41 : word32.
42 : word32.
43 : word32.
44 : word32.
45 : word32.
46 : word32.
47 : word32.
48 : word32.
49 : word32.
50 : word32.
51 : word32.
52 : word32.
53 : word32.
54 : word32.
55 : word32.
56 : word32.
57 : word32.
58 : word32.
59 : word32.
60 : word32.
61 : word32.
62 : word32.
63 : word32.
64 : word32.
65 : word32.
66 : word32.
67 : word32.
69 : word32.
70 : word32.
71 : word32.
73 : word32.
74 : word32.
75 : word32.
77 : word32.
78 : word32.
79 : word32.
81 : word32.
82 : word32.
83 : word32.
85 : word32.
86 : word32.
87 : word32.
93 : word32.
97 : word32.
105 : word32.
110 : word32.
112 : word32.
116 : word32.
120 : word32.
125 : word32.
128 : word32.
159 : word32.
160 : word32.
191 : word32.
196 : word32.
198 : word32.
199 : word32.
200 : word32.
201 : word32.
203 : word32.
204 : word32.
205 : word32.
206 : word32.
209 : word32.
210 : word32.
211 : word32.
252 : word32.
255 : word32.
256 : word32.
286 : word32.
334 : word32.
400 : word32.
401 : word32.
501 : word32.
512 : word32.
995 : word32.
1000 : word32.
1002 : word32.
1024 : word32.
1027 : word32.
1030 : word32.
1045 : word32.
1049 : word32.
1058 : word32.
2004 : word32.
2005 : word32.
2048 : word32.
3980 : word32.
4092 : word32.
4096 : word32.
4232 : word32.
8192 : word32.
16384 : word32.
29387 : word32.
32768 : word32.
65535 : word32.
65536 : word32.
65537 : word32.
81329 : word32.
129872 : word32.
131072 : word32.
262144 : word32.
293765 : word32.
524288 : word32.
938275 : word32.
1048576 : word32.
2097152 : word32.
4194304 : word32.
8388608 : word32.
16777216 : word32.
33554432 : word32.
67108864 : word32.
92387895 : word32.
134217728 : word32.
268435456 : word32.
536870912 : word32.
1073741824 : word32.
2147483647 : word32.
2147483648 : word32.
4294967295 : word32.
0+0 : + 0 0 0 .
0+1 : + 0 1 1 .
0+10 : + 0 10 10 .
0+116 : + 0 116 116 .
0+13 : + 0 13 13 .
0+2 : + 0 2 2 .
0+22 : + 0 22 22 .
0+30 : + 0 30 30 .
0+32 : + 0 32 32 .
0+5 : + 0 5 5 .
0+7 : + 0 7 7 .
0+8 : + 0 8 8 .
0+9 : + 0 9 9 .
0/1 : / 0 1 0 .
0/10 : / 0 10 0 .
0/1000 : / 0 1000 0 .
0/11 : / 0 11 0 .
0/116 : / 0 116 0 .
0/12 : / 0 12 0 .
0/128 : / 0 128 0 .
0/13 : / 0 13 0 .
0/14 : / 0 14 0 .
0/15 : / 0 15 0 .
0/16 : / 0 16 0 .
0/17 : / 0 17 0 .
0/18 : / 0 18 0 .
0/19 : / 0 19 0 .
0/2 : / 0 2 0 .
0/20 : / 0 20 0 .
0/200 : / 0 200 0 .
0/21 : / 0 21 0 .
0/22 : / 0 22 0 .
0/23 : / 0 23 0 .
0/24 : / 0 24 0 .
0/25 : / 0 25 0 .
0/26 : / 0 26 0 .
0/27 : / 0 27 0 .
0/28 : / 0 28 0 .
0/29 : / 0 29 0 .
0/3 : / 0 3 0 .
0/30 : / 0 30 0 .
0/31 : / 0 31 0 .
0/32 : / 0 32 0 .
0/33 : / 0 33 0 .
0/34 : / 0 34 0 .
0/37 : / 0 37 0 .
0/38 : / 0 38 0 .
0/4 : / 0 4 0 .
0/41 : / 0 41 0 .
0/5 : / 0 5 0 .
0/6 : / 0 6 0 .
0/7 : / 0 7 0 .
0/8 : / 0 8 0 .
0/8192 : / 0 8192 0 .
0/9 : / 0 9 0 .
0/995 : / 0 995 0 .
1+1 : + 1 1 2 .
1+12 : + 1 12 13 .
1+3 : + 1 3 4 .
1/13 : / 1 13 0 .
1/2 : / 1 2 0 .
1/3 : / 1 3 0 .
1/32 : / 1 32 0 .
1/4 : / 1 4 0 .
10+1 : + 10 1 11 .
10+2 : + 10 2 12 .
10/32 : / 10 32 0 .
1024*4 : * 1024 4 4096 .
1024+1024 : + 1024 1024 2048 .
1027+3 : + 1027 3 1030 .
1030+15 : + 1030 15 1045 .
1045+13 : + 1045 13 1058 .
1048576+1048576 : + 1048576 1048576 2097152 .
1073741824+1073741824 : + 1073741824 1073741824 2147483648 .
11+1 : + 11 1 12 .
11/32 : / 11 32 0 .
116+3980 : + 116 3980 4096 .
12+1 : + 12 1 13 .
12/32 : / 12 32 0 .
125+3 : + 125 3 128 .
128+128 : + 128 128 256 .
128+31 : + 128 31 159 .
128/159 : / 128 159 0 .
13+0 : + 13 0 13 .
13+1 : + 13 1 14 .
13+1045 : + 13 1045 1058 .
13+14 : + 13 14 27 .
13+15 : + 13 15 28 .
13+2 : + 13 2 15 .
13/14 : / 13 14 0 .
13/200 : / 13 200 0 .
13/30 : / 13 30 0 .
13/31 : / 13 31 0 .
13/32 : / 13 32 0 .
13/33 : / 13 33 0 .
13/37 : / 13 37 0 .
13/38 : / 13 38 0 .
13/41 : / 13 41 0 .
131072+131072 : + 131072 131072 262144 .
134217728+134217728 : + 134217728 134217728 268435456 .
14+1 : + 14 1 15 .
14+15 : + 14 15 29 .
14+5 : + 14 5 19 .
14/1000 : / 14 1000 0 .
14/128 : / 14 128 0 .
14/15 : / 14 15 0 .
14/200 : / 14 200 0 .
14/30 : / 14 30 0 .
14/31 : / 14 31 0 .
14/32 : / 14 32 0 .
14/33 : / 14 33 0 .
14/34 : / 14 34 0 .
14/37 : / 14 37 0 .
14/38 : / 14 38 0 .
14/41 : / 14 41 0 .
15+1 : + 15 1 16 .
15+1030 : + 15 1030 1045 .
15+14 : + 15 14 29 .
15/16 : / 15 16 0 .
15/19 : / 15 19 0 .
15/29 : / 15 29 0 .
15/32 : / 15 32 0 .
159+1 : + 159 1 160 .
159/200 : / 159 200 0 .
16+1 : + 16 1 17 .
16+16 : + 16 16 32 .
16+8 : + 16 8 24 .
16/32 : / 16 32 0 .
16/4294967295 : / 16 4294967295 0 .
160/1000 : / 160 1000 0 .
16384*65536 : * 16384 65536 1073741824 .
16384+16384 : + 16384 16384 32768 .
16777216+16777216 : + 16777216 16777216 33554432 .
17+1 : + 17 1 18 .
17/32 : / 17 32 0 .
18+1 : + 18 1 19 .
18/32 : / 18 32 0 .
19+1 : + 19 1 20 .
19+15 : + 19 15 34 .
19+6 : + 19 6 25 .
19/32 : / 19 32 0 .
2*1 : * 2 1 2 .
2*1024 : * 2 1024 2048 .
2*1048576 : * 2 1048576 2097152 .
2*128 : * 2 128 256 .
2*131072 : * 2 131072 262144 .
2*134217728 : * 2 134217728 268435456 .
2*16 : * 2 16 32 .
2*16384 : * 2 16384 32768 .
2*16777216 : * 2 16777216 33554432 .
2*2 : * 2 2 4 .
2*2048 : * 2 2048 4096 .
2*2097152 : * 2 2097152 4194304 .
2*256 : * 2 256 512 .
2*262144 : * 2 262144 524288 .
2*268435456 : * 2 268435456 536870912 .
2*32 : * 2 32 64 .
2*32768 : * 2 32768 65536 .
2*33554432 : * 2 33554432 67108864 .
2*4 : * 2 4 8 .
2*4096 : * 2 4096 8192 .
2*4194304 : * 2 4194304 8388608 .
2*512 : * 2 512 1024 .
2*524288 : * 2 524288 1048576 .
2*536870912 : * 2 536870912 1073741824 .
2*64 : * 2 64 128 .
2*65536 : * 2 65536 131072 .
2*67108864 : * 2 67108864 134217728 .
2*8 : * 2 8 16 .
2*8192 : * 2 8192 16384 .
2*8388608 : * 2 8388608 16777216 .
2+1 : + 2 1 3 .
2+13 : + 2 13 15 .
2+34 : + 2 34 36 .
2/3 : / 2 3 0 .
2/32 : / 2 32 0 .
2/4 : / 2 4 0 .
20+1 : + 20 1 21 .
20/32 : / 20 32 0 .
2004/04 : / 2004 04 501 .
2004/05 : / 2004 05 400 .
2004/06 : / 2004 06 334 .
2004/07 : / 2004 07 286 .
2004/10 : / 2004 10 200 .
2005/02 : / 2005 02 1002 .
2005/05 : / 2005 05 401 .
2048+2048 : + 2048 2048 4096 .
2097152+2097152 : + 2097152 2097152 4194304 .
21+1 : + 21 1 22 .
21/32 : / 21 32 0 .
2147483647+1 : + 2147483647 1 2147483648 .
2147483647+2147483648 : + 2147483647 2147483648 4294967295 .
2147483647/4294967295 : / 2147483647 4294967295 0 .
2147483648/4294967295 : / 2147483648 4294967295 0 .
22+1 : + 22 1 23 .
22+3 : + 22 3 25 .
22/32 : / 22 32 0 .
23+1 : + 23 1 24 .
23/32 : / 23 32 0 .
24+1 : + 24 1 25 .
24+8 : + 24 8 32 .
24/32 : / 24 32 0 .
25+1 : + 25 1 26 .
25+4 : + 25 4 29 .
25+5 : + 25 5 30 .
25/32 : / 25 32 0 .
256*256 : * 256 256 65536 .
256+256 : + 256 256 512 .
26+1 : + 26 1 27 .
26/32 : / 26 32 0 .
262144+262144 : + 262144 262144 524288 .
268435456+268435456 : + 268435456 268435456 536870912 .
27+1 : + 27 1 28 .
27+2 : + 27 2 29 .
27/32 : / 27 32 0 .
28+0 : + 28 0 28 .
28+1 : + 28 1 29 .
28+2 : + 28 2 30 .
28+3 : + 28 3 31 .
28+6 : + 28 6 34 .
28/32 : / 28 32 0 .
29*4 : * 29 4 116 .
29+1 : + 29 1 30 .
29/200 : / 29 200 0 .
29/30 : / 29 30 0 .
29/31 : / 29 31 0 .
29/32 : / 29 32 0 .
29/33 : / 29 33 0 .
29/37 : / 29 37 0 .
29/38 : / 29 38 0 .
29/41 : / 29 41 0 .
3+1 : + 3 1 4 .
3+1027 : + 3 1027 1030 .
3/32 : / 3 32 0 .
30+1 : + 30 1 31 .
30+2 : + 30 2 32 .
30+6 : + 30 6 36 .
30/1000 : / 30 1000 0 .
30/128 : / 30 128 0 .
30/200 : / 30 200 0 .
30/31 : / 30 31 0 .
30/32 : / 30 32 0 .
30/33 : / 30 33 0 .
30/34 : / 30 34 0 .
30/37 : / 30 37 0 .
30/38 : / 30 38 0 .
30/41 : / 30 41 0 .
31+1 : + 31 1 32 .
31+128 : + 31 128 159 .
31+97 : + 31 97 128 .
31/128 : / 31 128 0 .
31/200 : / 31 200 0 .
31/32 : / 31 32 0 .
31/33 : / 31 33 0 .
31/34 : / 31 34 0 .
31/37 : / 31 37 0 .
31/38 : / 31 38 0 .
31/41 : / 31 41 0 .
32+0 : + 32 0 32 .
32+1 : + 32 1 33 .
32+3 : + 32 3 35 .
32+5 : + 32 5 37 .
32+6 : + 32 6 38 .
32+9 : + 32 9 41 .
32+995 : + 32 995 1027 .
32/1000 : / 32 1000 0 .
32/128 : / 32 128 0 .
32/200 : / 32 200 0 .
32/33 : / 32 33 0 .
32/34 : / 32 34 0 .
32/37 : / 32 37 0 .
32/38 : / 32 38 0 .
32/41 : / 32 41 0 .
32768+32768 : + 32768 32768 65536 .
33+1 : + 33 1 34 .
33/1000 : / 33 1000 0 .
33/128 : / 33 128 0 .
33/200 : / 33 200 0 .
33/34 : / 33 34 0 .
33/37 : / 33 37 0 .
33/38 : / 33 38 0 .
33/41 : / 33 41 0 .
33554432+33554432 : + 33554432 33554432 67108864 .
34+1 : + 34 1 35 .
34+2 : + 34 2 36 .
34/125 : / 34 125 0 .
34/200 : / 34 200 0 .
34/36 : / 34 36 0 .
34/37 : / 34 37 0 .
34/38 : / 34 38 0 .
34/41 : / 34 41 0 .
35+1 : + 35 1 36 .
35+15 : + 35 15 50 .
36+1 : + 36 1 37 .
36/200 : / 36 200 0 .
36/37 : / 36 37 0 .
36/38 : / 36 38 0 .
36/41 : / 36 41 0 .
37+1 : + 37 1 38 .
37/1000 : / 37 1000 0 .
37/128 : / 37 128 0 .
37/200 : / 37 200 0 .
37/38 : / 37 38 0 .
37/41 : / 37 41 0 .
38+1 : + 38 1 39 .
38/1000 : / 38 1000 0 .
38/128 : / 38 128 0 .
38/200 : / 38 200 0 .
38/41 : / 38 41 0 .
39+1 : + 39 1 40 .
3980+116 : + 3980 116 4096 .
3980+252 : + 3980 252 4232 .
4*0 : * 4 0 0 .
4*1058 : * 4 1058 4232 .
4*16384 : * 4 16384 65536 .
4*2 : * 4 2 8 .
4*63 : * 4 63 252 .
4*8 : * 4 8 32 .
4*995 : * 4 995 3980 .
4+1 : + 4 1 5 .
4+3 : + 4 3 7 .
4+4 : + 4 4 8 .
4/32 : / 4 32 0 .
4/4294967295 : / 4 4294967295 0 .
40+1 : + 40 1 41 .
4096+4096 : + 4096 4096 8192 .
4096/4294967295 : / 4096 4294967295 0 .
4096/8192 : / 4096 8192 0 .
41+1 : + 41 1 42 .
41/1000 : / 41 1000 0 .
41/128 : / 41 128 0 .
41/200 : / 41 200 0 .
4194304+4194304 : + 4194304 4194304 8388608 .
42+1 : + 42 1 43 .
43+1 : + 43 1 44 .
44+1 : + 44 1 45 .
45+1 : + 45 1 46 .
46+1 : + 46 1 47 .
47+1 : + 47 1 48 .
48+1 : + 48 1 49 .
49+1 : + 49 1 50 .
5+1 : + 5 1 6 .
5+8 : + 5 8 13 .
5+9 : + 5 9 14 .
5/32 : / 5 32 0 .
50+1 : + 50 1 51 .
50+13 : + 50 13 63 .
51+1 : + 51 1 52 .
512+512 : + 512 512 1024 .
52+1 : + 52 1 53 .
524288+524288 : + 524288 524288 1048576 .
53+1 : + 53 1 54 .
536870912+536870912 : + 536870912 536870912 1073741824 .
54+1 : + 54 1 55 .
55+1 : + 55 1 56 .
56+1 : + 56 1 57 .
57+1 : + 57 1 58 .
58+1 : + 58 1 59 .
58+58 : + 58 58 116 .
59+1 : + 59 1 60 .
6+1 : + 6 1 7 .
6/32 : / 6 32 0 .
60+1 : + 60 1 61 .
61+1 : + 61 1 62 .
62+1 : + 62 1 63 .
62+97 : + 62 97 159 .
63+1 : + 63 1 64 .
63+995 : + 63 995 1058 .
64+64 : + 64 64 128 .
65535+1 : + 65535 1 65536 .
65536+1 : + 65536 1 65537 .
65536+65536 : + 65536 65536 131072 .
65537*65535 : * 65537 65535 4294967295 .
67108864+67108864 : + 67108864 67108864 134217728 .
7+1 : + 7 1 8 .
7+5 : + 7 5 12 .
7/32 : / 7 32 0 .
8+1 : + 8 1 9 .
8+4 : + 8 4 12 .
8+7 : + 8 7 15 .
8+8 : + 8 8 16 .
8/32 : / 8 32 0 .
8/4294967295 : / 8 4294967295 0 .
8192+8192 : + 8192 8192 16384 .
8388608+8388608 : + 8388608 8388608 16777216 .
9+1 : + 9 1 10 .
9+1049 : + 9 1049 1058 .
9+3 : + 9 3 12 .
9/32 : / 9 32 0 .
995+32 : + 995 32 1027 .
995+63 : + 995 63 1058 .
% Copyright (c) 2004 Princeton University
%	$Id: logic.elf,v 1.17 2005/02/10 15:21:23 richards Exp $

tp     : type.
tm     : tp -> type.
form   : tp.
tform  : type = tm form. 
arrow  : tp -> tp -> tp.  %infix right 14 arrow.
pf     : tform -> type.

_lam    : {T1 : tp} {T2 : tp} (tm T1 -> tm T2) -> tm (T1 arrow T2).
_@      : {T1 : tp} {T2 : tp} tm (T1 arrow T2) -> tm T1 -> tm T2.
_forall : {T : tp} (tm T -> tform) -> tform.
imp     : tform -> tform -> tform.   %infix right 10 imp.

_beta_e  : {T1 : tp} {T2 : tp} {F : tm T1 -> tm T2} {X : tm T1}
  {P : tm T2 -> tform} pf (P (_@ T1 T2 (_lam T1 T2 F) X)) ->  pf (P (F X)).

_imp_i   : {A : tform} {B : tform} (pf A -> pf B) -> pf (A imp B).
_imp_e   : {A : tform} {B : tform} pf (A imp B) -> pf A -> pf B.

_forall_i:{T: tp} {A : tm T -> tform}({X : tm T} pf (A X)) -> pf (_forall T A).
_forall_e:{T: tp} {A : tm T -> tform} pf (_forall T A) -> {X : tm T} pf (A X).

pair     : tp -> tp -> tp.
_mkpair  : {T1 : tp} {T2 : tp} tm (T1 arrow T2 arrow pair T1 T2).
_fst     : {T1 : tp} {T2 : tp} tm (pair T1 T2 arrow T1).
_snd     : {T1 : tp} {T2 : tp} tm (pair T1 T2 arrow T2).

_fstpair : {T1 : tp} {T2 : tp} {X : tm T1} {Y : tm T2}
 pf (_forall (T1 arrow form) [f : tm (T1 arrow form)]
    (_@ T1 form f X) imp (_@ T1 form f (_@ (pair T1 T2) T1 (_fst T1 T2)
     (_@ T2 (pair T1 T2) (_@ T1 (T2 arrow pair T1 T2) (_mkpair T1 T2) X) Y)))).

_sndpair : {T1 : tp} {T2 : tp} {X : tm T1} {Y : tm T2}
 pf (_forall (T2 arrow form) [f : tm (T2 arrow form)]
    (_@ T2 form f Y) imp (_@ T2 form f (_@ (pair T1 T2) T2 (_snd T1 T2)
     (_@ T2 (pair T1 T2) (_@ T1 (T2 arrow pair T1 T2) (_mkpair T1 T2) X) Y)))).
% Copyright (c) 2004 Princeton University
%	$Id: coredefs.elf,v 1.49 2004/07/29 00:30:38 rsimmons Exp $

_frl_frm : (tform -> tform) -> tform = _forall form.

_@_f : {T : tp} tm (T arrow form) -> tm T -> tform = [T : tp] _@ T form.

_eq : {T : tp} tm T -> tm T -> tform =
 [T : tp][A : tm T][B : tm T]
  _forall (T arrow form) [P : tm (T arrow form)] _@_f T P B imp _@_f T P A.

and : tform -> tform -> tform =
 [A : tform][B : tform] _frl_frm [C : tform] (A imp B imp C) imp C.
%infix right 12 and.

or : tform -> tform -> tform =
 [A : tform][B : tform] _frl_frm [C : tform] (A imp C) imp (B imp C) imp C.
%infix right 11 or.

false : tform = _frl_frm [A : tform] A.

not : tform -> tform = [A : tform] A imp false.

equiv : tform -> tform -> tform =
 [A : tform][B : tform] (A imp B) and (B imp A).    %infix right 10 equiv.

_lam2  = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3]
  _lam T1 (T2 arrow T3) [x : tm T1] _lam T2 T3 (f x).

_lam3 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp]
        [f : tm T1 -> tm T2 -> tm T3 -> tm T4]
  _lam T1 (T2 arrow T3 arrow T4) [x : tm T1] _lam2 T2 T3 T4 (f x).

_lam4 = [T1 : tp] [T2 : tp] [T3 : tp] [T4 : tp] [T5 : tp]
        [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5]
  _lam T1 (T2 arrow T3 arrow T4 arrow T5) [x : tm T1] _lam3 T2 T3 T4 T5 (f x).

_@2 = [T1 : tp][T2 : tp][T3 : tp][f : tm (T1 arrow T2 arrow T3)]
 [x1 : tm T1] _@ T2 T3 (_@ T1 (T2 arrow T3) f x1).

_@3 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp]
 [f : tm (T1 arrow T2 arrow T3 arrow T4)][x1 : tm T1]
  _@2 T2 T3 T4 (_@ T1 (T2 arrow T3 arrow T4) f x1).

_@4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp]
 [f : tm (T1 arrow T2 arrow T3 arrow T4 arrow T5)][x1 : tm T1]
  _@3 T2 T3 T4 T5 (_@ T1 (T2 arrow T3 arrow T4 arrow T5) f x1).

_forall2 = [T1 : tp][T2 : tp][f : tm T1 -> tm T2 -> tform]
  _forall T1 [x : tm T1] _forall T2 (f x).

_forall3 = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3 -> tform]
  _forall T1 [x : tm T1] _forall2 T2 T3 (f x).

_forall4 = [T1 : tp][T2 : tp][T3 : tp][T4: tp]
           [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tform]
  _forall T1 [x : tm T1] _forall3 T2 T3 T4 (f x).

_forall5 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp]
	   [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tform]
  _forall T1 [x : tm T1] _forall4 T2 T3 T4 T5 (f x).

_forall6 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp][T6 : tp]
	   [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tm T6 -> tform]
  _forall T1 [x : tm T1] _forall5 T2 T3 T4 T5 T6 (f x).

_exists : {T : tp} (tm T -> tform) -> tform =
 [T : tp][F : tm T -> tform]
  _frl_frm [B : tform] (_forall T [X : tm T] F X imp B) imp B.

_exists2 = [T1 : tp][T2 : tp][f : tm T1 -> tm T2 -> tform]
  _exists T1 [x : tm T1] _exists T2 (f x).

_exists3 = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3 -> tform]
  _exists T1 [x : tm T1] _exists2 T2 T3 (f x).

app1 = [T1 : tp][T2 : tp][f : tm T1 -> tm T2][x1 : tm T1]
 _@ T1 T2 (_lam T1 T2 f) x1.

app2 = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3]
  _@2 T1 T2 T3 (_lam2 T1 T2 T3 f).

app3 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp]
  [f : tm T1 -> tm T2 -> tm T3 -> tm T4]
  _@3 T1 T2 T3 T4 (_lam3 T1 T2 T3 T4 f).

app4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp]
  [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5]
   _@4 T1 T2 T3 T4 T5 (_lam4 T1 T2 T3 T4 T5 f).

app5 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5: tp][T6 : tp]
 [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tm T6][x1 : tm T1]
  _@4 T2 T3 T4 T5 T6
    ((app1 T1 (T2 arrow T3 arrow T4 arrow T5 arrow T6)
     [x : tm T1] _lam4 T2 T3 T4 T5 T6 (f x)) x1).

app6 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5: tp][T6 : tp][T7 : tp]
 [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tm T6 -> tm T7]
 [x1 : tm T1][x2 : tm T2]
  _@4 T3 T4 T5 T6 T7
    ((app2 T1 T2 (T3 arrow T4 arrow T5 arrow T6 arrow T7)
     [x : tm T1][y : tm T2] _lam4 T3 T4 T5 T6 T7 (f x y)) x1 x2).

if : tform -> tform -> tform -> tform =
 [E : tform][A : tform][B : tform] (E imp A) and (not E imp B).

true : tform = not false.

xor : tform -> tform -> tform =
 [A : tform][B : tform] (A and (not B)) or ((not A) and B).
%infix right 11 xor.

_kleene_star : {T : tp} (tm T -> tm T -> tform) -> tm T -> tm T -> tform =
  [T : tp][R : tm T -> tm T -> tform][V : tm T][W : tm T] 
   _forall  (T arrow T arrow form) [S : tm (T arrow T arrow form)]
   (_forall T [Z : tm T] _@2 T T form S Z Z) imp
   (_forall3 T T T [X : tm T][Y : tm T][Z : tm T]
    (app2 T T form R X Y) imp (_@2 T T form S Y Z)
      imp (_@2 T T form S X Z)) imp
   (_@2 T T form S V W).

% Pairs out of pairs.
% Object vs Meta logic.
tuple2 : tp -> tp -> tp = pair.
_mktuple2 : {T1 : tp}{T2 : tp} tm T1 -> tm T2 -> tm (tuple2 T1 T2) =
 [T1 : tp][T2 : tp][x1 : tm T1][x2 : tm T2]
  _@2 T1 T2 (pair T1 T2) (_mkpair T1 T2) x1 x2.
_get1of2 = [T1 : tp][T2 : tp][p : tm (tuple2 T1 T2)]
 _@ (pair T1 T2) T1 (_fst T1 T2) p.
_get2of2 = [T1 : tp][T2 : tp][p : tm (tuple2 T1 T2)]
 _@ (pair T1 T2) T2 (_snd T1 T2) p.

% Quadruples out of pairs.
tuple4 : tp -> tp -> tp -> tp -> tp =
 [T1 : tp][T2 : tp][T3 : tp ][T4 : tp] pair (pair T1 T2) (pair T3 T4).
_mktuple4 : {T1 : tp}{T2 : tp}{T3 : tp}{T4 : tp}
           tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm (tuple4 T1 T2 T3 T4) =
 [T1 : tp][T2 : tp][T3 : tp][T4 : tp][x1 : tm T1][x2 : tm T2][x3 : tm T3]
 [x4 : tm T4] _@2 (pair T1 T2) (pair T3 T4) (tuple4 T1 T2 T3 T4)
                  (_mkpair (pair T1 T2) (pair T3 T4))
                  (_@2 T1 T2 (pair T1 T2) (_mkpair T1 T2) x1 x2)
                  (_@2 T3 T4 (pair T3 T4) (_mkpair T3 T4) x3 x4).

_get1of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T1 T2) T1 (_fst T1 T2)
    (_@ (tuple4 T1 T2 T3 T4) (pair T1 T2) (_fst (pair T1 T2) (pair T3 T4)) p).

_get2of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T1 T2) T2 (_snd T1 T2)
    (_@ (tuple4 T1 T2 T3 T4) (pair T1 T2) (_fst (pair T1 T2) (pair T3 T4)) p).

_get3of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T3 T4) T3 (_fst T3 T4)
    (_@ (tuple4 T1 T2 T3 T4) (pair T3 T4) (_snd (pair T1 T2) (pair T3 T4)) p).

_get4of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T3 T4) T4 (_snd T3 T4)
    (_@ (tuple4 T1 T2 T3 T4) (pair T3 T4) (_snd (pair T1 T2) (pair T3 T4)) p).
% Copyright (c) 2004 Princeton University
%	$Id: arith-fix-checker.elf,v 1.7 2004/04/22 10:47:38 appel Exp $

%use word32.

rep_type = word32.
rep_plus = +.
rep_times = *.
rep_div = /.
% Copyright (c) 2004 Princeton University
%	$Id: arith.elf,v 1.16 2004/04/22 10:47:38 appel Exp $

% Author : Neophytos Michael
%

num : tp.
tnum = tm num.

const : rep_type -> tnum.

isInt : tnum -> tform.

zero = const 0.
one  = const 1.

p_one  : pf (isInt one).

neg : tnum -> tnum.
eqn : tnum -> tnum -> tform = _eq num.

%
% The existece of negatives is an axiom.
%
_neg_exists : {N : tnum} pf (isInt N) -> pf (isInt (neg N)).

%
% The integers with addition (Z, +) form an abelian group.
%
plus : tnum -> tnum -> tnum.

_closure_add :
 {N : tnum}{M : tnum}pf (isInt N) -> pf (isInt M) -> pf (isInt (plus N M)).

_assoc_add : {A : tnum}{B : tnum}{C : tnum}
             pf (eqn (plus (plus A B) C) (plus A (plus B C))).

_comm_add : {A : tnum}{B : tnum} pf (eqn (plus A B) (plus B A)).

_zero_add : {A : tnum} pf (eqn (plus A zero) A).

_inv_add : {A : tnum} pf (eqn (plus A (neg A)) zero).

%
% The integers with multiplication (Z, *) form a monoid.
%
times : tnum -> tnum -> tnum.

_closure_mult : {N : tnum}{M : tnum}
                pf (isInt N) -> pf (isInt M) -> pf (isInt (times N M)).

_assoc_mult : {A : tnum}{B : tnum}{C : tnum}
              pf (eqn (times (times A B) C) (times A (times B C))).

_zero_mult : {A : tnum} pf (eqn (times A one) A).

_comm_mult : {A : tnum}{B : tnum} pf (eqn (times A B) (times B A)).

% The 1 != 0 rule. This rules out the trivial structure of the single
% element Ring.
one_neq_zero : pf ((eqn one zero) imp false).

%
% The distributive law of multiplication over addition.
%
_distrib : {A : tnum}{B : tnum}{C : tnum}
           pf (eqn (times A (plus B C)) (plus (times A B) (times A C))).

%
% The order relation on integers.
%
geq : tnum -> tnum -> tform.

_ord_reflexivity : {A : tnum} pf (geq A A).

_ord_transitivity : {A : tnum}{B : tnum}{C : tnum}
                    pf (geq A B) -> pf (geq B C) -> pf (geq A C).

_ord_dichotomy : {A : tnum}{B : tnum} pf ((geq A B) or (geq B A)).

_ord_add_closure : {A : tnum}{B : tnum}{C : tnum}
                   pf (geq A C) -> pf (geq (plus A B) (plus C B)).

_ord_mult_closure : {A : tnum}{B : tnum} pf (geq A zero) -> pf (geq B zero)
                     -> pf (geq (times A B) zero).

_ord_antisymmetry : {A : tnum}{B : tnum}
                    pf (geq A B) -> pf (geq B A) -> pf (eqn A B).

_ord_excluded_middle : {A : tnum}{B : tnum} pf ((geq A B) or not (geq A B)).

%
% The cancelation Axiom
%
_cancelation : {A : tnum}{B : tnum}
               pf (eqn (times A B) zero) -> pf ((eqn A zero) or (eqn B zero)).

%
% Finally the induction principle on the integers.
%
isNat = [n : tnum] (isInt n) and (geq n zero).

induction : {A : tnum -> tform}
            pf (A zero) ->
            ({n : tnum}pf (isNat n) -> pf (A n) -> pf (A (plus n one))) ->
            pf (_forall num [n : tnum] (isNat n) imp A n).

sign  : tnum -> tnum.
_sign0 : {N : tnum} pf (geq N zero) -> pf (eqn (sign N) zero).
_sign1 : {N : tnum} pf (geq N zero imp false) -> pf (eqn (sign N) one).

_eval_plus : {A : rep_type}{B : rep_type}{C : rep_type}
             rep_plus A B C -> pf (eqn (plus (const A) (const B)) (const C)).

_eval_times : {A : rep_type}{B : rep_type}{C : rep_type}
             rep_times A B C -> pf (eqn (times (const A) (const B)) (const C)).

_eval_div : {M : rep_type}{N : rep_type}{Q : rep_type} rep_div M N Q
           -> pf (geq (const M) (times (const N) (const Q)) and
                 (not (geq (const M) (times (const N) (plus one (const Q)))))).
% Copyright (c) 2004 Princeton University
%	$Id: arithdefs.elf,v 1.43 2004/10/07 22:39:18 gtan Exp $


_frl_n  : (tnum -> tform) -> tform = _forall num.
_exs_n  : (tnum -> tform) -> tform = _exists num.
_exs_n2 : (tnum -> tnum -> tform) -> tform = _exists2 num num.
_exs_n3 : (tnum -> tnum -> tnum -> tform) -> tform = _exists3 num num num.

minus : tnum -> tnum -> tnum = [x : tnum][y : tnum] plus x (neg y).

lt : tnum -> tnum -> tform = [x : tnum][y : tnum] not (geq x y).

gt : tnum -> tnum -> tform = [x : tnum][y : tnum] lt y x.

leq : tnum -> tnum -> tform = [x : tnum][y : tnum] geq y x.

if1: tnum -> tnum -> tnum -> tnum = 
 [A : tnum][B : tnum][C : tnum] plus (times A B) (times (minus one A) C).

ifgtz : tnum -> tnum -> tnum -> tnum = [x : tnum] if1 (sign (neg x)).

ifeq : tnum -> tnum -> tnum -> tnum -> tnum =
 [I : tnum][J : tnum][A : tnum][B : tnum]
  ifgtz (minus I J) B (ifgtz (minus J I) B A).

% Some symbolic constants.
two     : tnum = const 2.
three   : tnum = const 3.
four    : tnum = const 4.
seven   : tnum = const 7.
eight   : tnum = const 8.
ten     : tnum = const 10.
fifteen : tnum = const 15.
sixteen : tnum = const 16.

pred1 : tp -> type = [t1:tp] tm t1 -> tform.
pred2 : tp -> tp -> type = [t1:tp][t2:tp] tm t1 -> pred1 t2.
pred4 : tp -> tp -> tp -> tp -> type
  = [t1:tp][t2:tp][t3:tp][t4:tp] tm t1 -> tm t2 -> pred2 t3 t4.
pred5 : tp -> tp -> tp -> tp -> tp -> type
  = [t1:tp][t2:tp][t3:tp][t4:tp][t5:tp] tm t1 -> pred4 t2 t3 t4 t5.

high0 : type = pred2 form form.
high1 : type = {t1:tp} pred1 t1 -> pred1 t1 -> pred1 t1.
high2 : type = {t1:tp}{t2:tp} pred2 t1 t2 -> pred2 t1 t2 -> pred2 t1 t2.
high4 : type = {t1:tp}{t2:tp}{t3:tp}{t4:tp}
  pred4 t1 t2 t3 t4 -> pred4 t1 t2 t3 t4 -> pred4 t1 t2 t3 t4.
high5 : type = {t1:tp}{t2:tp}{t3:tp}{t4:tp}{t5:tp}
  pred5 t1 t2 t3 t4 t5 -> pred5 t1 t2 t3 t4 t5 -> pred5 t1 t2 t3 t4 t5.

%abbrev mkhigh1 : high0 -> high1 =
 [op:high0][t1:tp][h1:pred1 t1][h2:pred1 t1][x1:tm t1]
 op (app1 t1 form h1 x1) (app1 t1 form h2 x1).

%abbrev mkhigh2 : high0 -> high2 =
 [op:high0][t1:tp][t2:tp][h1:pred2 t1 t2][h2:pred2 t1 t2][x1:tm t1][x2:tm t2]
 op (app2 t1 t2 form h1 x1 x2) (app2 t1 t2 form h2 x1 x2).

%abbrev mkhigh4 : high0 -> high4 =
 [op:high0][t1:tp][t2:tp][t3:tp][t4:tp]
 [h1:pred4 t1 t2 t3 t4][h2:pred4 t1 t2 t3 t4]
 [x1:tm t1][x2:tm t2][x3:tm t3][x4:tm t4]
 op (app4 t1 t2 t3 t4 form h1 x1 x2 x3 x4)
    (app4 t1 t2 t3 t4 form h2 x1 x2 x3 x4).

%abbrev mkhigh5 : high0 -> high5 =
 [op:high0][t1:tp][t2:tp][t3:tp][t4:tp][t5:tp]
 [h1:pred5 t1 t2 t3 t4 t5][h2:pred5 t1 t2 t3 t4 t5]
 [x1:tm t1][x2:tm t2][x3:tm t3][x4:tm t4][x5:tm t5]
 op (app5 t1 t2 t3 t4 t5 form h1 x1 x2 x3 x4 x5)
    (app5 t1 t2 t3 t4 t5 form h2 x1 x2 x3 x4 x5).

%abbrev __and : pred2 form form = [a : tform][b : tform] a and b.
%abbrev __or  : pred2 form form = [a : tform][b : tform] a or b.

_&&  : high1 = mkhigh1 __and.
_&&2 : high2 = mkhigh2 __and.
_&&4 : high4 = mkhigh4 __and.
_||  : high1 = mkhigh1 __or.
_||2 : high2 = mkhigh2 __or.
_||4 : high4 = mkhigh4 __or.
_||5 : high5 = mkhigh5 __or.

% A high level not operator
_!! : {T : tp} (tm T -> tform) -> tm T -> tform =
 [T : tp][p : tm T -> tform][w : tm T] not (_@ T form (_lam T form p) w).

% These are used a lot in the trusted code so they've been moved here.
succ : tnum -> tnum = [n : tnum] plus n one.
pred : tnum -> tnum = [n : tnum] minus n one.

% The definitions of ncomp and sequences
% See core/sequence.elf

sequence : tp -> tp = [T : tp] num arrow T arrow form.

_ncomp : {T : tp} tm (T arrow T) -> tm num -> tm T -> tm T -> tform =
 [T : tp][F : tm (T arrow T)][N : tnum][X : tm T][Y : tm T]
   _forall ((T arrow T) arrow num arrow T arrow T arrow form)
    [NC : tm ((T arrow T) arrow num arrow T arrow T arrow form)]
      (_forall T [Z : tm T]
        _@4 (T arrow T) num T T form NC F zero Z Z) imp
      (_forall3 num T T [N' : tm num][Z1 : tm T][Z2 : tm T] 
             (isNat N') imp (gt N' zero) imp
             (_@4 (T arrow T) num T T form NC F (pred N') Z1 Z2) imp
             (_@4 (T arrow T) num T T form NC F N' Z1 (_@ T T F Z2))) imp
      (_@4 (T arrow T) num T T form NC F N X Y).

double : tm (num arrow num) = _lam num num [x : tnum] times two x.

_power2 : tnum ->  tnum -> tform =
 [a : tnum][b : tnum] (isNat a) and (_ncomp num double a one b).

bignum_base : rep_type = 256.
bignum      : tnum = zero.
dig         : tnum -> rep_type -> tnum =
 [x : tnum][d : rep_type] plus (times x (const bignum_base)) (const d).
%infix left 1000 dig.

pow2_8  : tnum = bignum dig 1 dig 0.
pow2_16 : tnum = bignum dig 1 dig 0 dig 0.
pow2_24 : tnum = bignum dig 1 dig 0 dig 0 dig 0.
pow2_32 : tnum = bignum dig 1 dig 0 dig 0 dig 0 dig 0.
pow2_64 : tnum = bignum dig 1 dig 0 dig 0 dig 0 dig 0 dig 0 dig 0 dig 0 dig 0.
pow2_31     = const 2147483648.

_abs : tnum -> tnum -> tform =
 [a : tnum][abs_a : tnum] if (geq a zero) (eqn abs_a a) (eqn abs_a (neg a)).

% Arithmetic modulo an integer
_divide_mod : tnum -> tnum -> tnum -> tnum -> tform =
 [m : tnum][n : tnum][q : tnum][r : tnum]
  (gt n zero) and
  (eqn m (plus (times q n) r)) and
  (isInt q) and geq r zero and lt r n.

_divide : tnum -> tnum -> tnum -> tform =
 [n : tnum][m : tnum][q : tnum] _exs_n [r : tnum] _divide_mod n m q r.

_modulo : tnum -> tnum -> tnum -> tform =
 [n: tnum][m : tnum][r : tnum] _exs_n [q : tnum] _divide_mod n m q r.

_modulo32 : tnum -> tnum -> tform =
 [n : tnum][res : tnum] _modulo n pow2_32 res.

_plus_mod16 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (plus a b) pow2_16 c.

_plus_mod32 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (plus a b) pow2_32 c.

_minus_mod32 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (minus a b) pow2_32 c.

_times_mod32 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (times a b) pow2_32 c.

% Bitwise operations
_bits : tnum -> tnum -> tnum -> tnum -> tform =
 [r : tnum][l : tnum][v : tnum][word : tnum]
  _exs_n3 [pr : tnum][plr : tnum][shifted : tnum]
  (_power2 r pr) and
  (_power2 (succ (minus l r)) plr) and
  (_divide word pr shifted) and
  (_modulo shifted plr v).

_inrange2 : tnum -> tnum -> tnum -> tform =
  [lo:tnum][hi:tnum][x:tnum]
  isInt x and leq lo x and lt x hi.

_set_disjoint : {t: tp} (tm t -> tform) -> (tm t -> tform) -> tform =
  [t: tp] [s1: tm t -> tform] [s2: tm t -> tform]
  not (_exists t [x:tm t] s1 x and s2 x).

_rbits : rep_type -> rep_type -> tnum -> tnum -> tform =
 [r : rep_type][l : rep_type] _bits (const r) (const l).

% Number is even
even? : tnum -> tform = [m: tnum] _modulo m two zero.

% Number is a multiple of four
mult4? : tnum -> tform = [m: tnum] _modulo m four zero.
% Copyright (c) 2004 Princeton University
%	$Id: arith-fix-axioms.elf,v 1.4 2004/04/22 10:47:38 appel Exp $

% All rations are word32 (unsigned ints) for this theory.

_warning_not_portable_to_arith_rat : {C : rep_type} pf (isNat (const C)).
% Copyright (c) 2004 Princeton University
%	$Id: classic.elf,v 1.4 2004/04/22 10:47:39 appel Exp $

_not_not_e : {B : tform}
 pf ((B imp (_frl_frm [A : tform] A)) imp (_frl_frm [A : tform] A)) -> pf B.
% Copyright (c) 2004 Princeton University
%	$Id: ops.elf,v 1.87 2004/04/22 10:49:18 appel Exp $

registers : tp = num arrow num.
memory    : tp = num arrow num.

tregs : type = tm registers.
tmem  : type = tm memory.

program : tp = num arrow num arrow form.
__program__ : type = tm program.

_exs_r : (tregs -> tform) -> tform = _exists registers.

_readable   : tregs -> tmem -> tnum -> tform.
_writable   : tregs -> tmem -> tnum -> tform.
_executable : tregs -> tmem -> tnum -> tform.

instr : tp = registers arrow memory arrow registers arrow memory arrow form.
app_instr = _@4 registers memory registers memory form.

% no api steps for now
api_step : tm instr = 
  _lam4 registers memory registers memory form
   [r: tregs][m: tmem][r': tregs][m': tmem] false.

tnfn : tp -> tp -> type = [T1 : tp][T2 : tp] tm (T1 arrow T2).

upd_typ = [T1 : tp][T2 : tp] tnfn T1 T2 -> tnfn T1 T2 -> tm T1 -> tform.

_k0 = [T1 : tp][T2 : tp][f : tnfn T1 T2][f' : tnfn T1 T2][z : tm T1]
  _eq T2 (_@ T1 T2 f' z) (_@ T1 T2 f z).

_upd/cc = [T1 : tp][T2 : tp][d : tm T1][x : tm T2]
 [k : upd_typ T1 T2][f : tnfn T1 T2][f' : tnfn T1 T2][z : tm T1]
  if (_eq T1 z d) (_eq T2 (_@ T1 T2 f' d) x)
                  (_@3 (T1 arrow T2) (T1 arrow T2) T1 form
                      (_lam3 (T1 arrow T2) (T1 arrow T2) T1 form k) f f' z).

_upd : {T1 : tp}{T2 : tp} tnfn T1 T2 -> tm T1 -> tm T2 -> tnfn T1 T2 -> tform =
 [T1 : tp][T2 : tp][f : tnfn T1 T2][d : tm T1][x : tm T2][f' : tnfn T1 T2]
  _forall T1 [z : tm T1] _upd/cc T1 T2 d x (_k0 T1 T2) f f' z.

_upd2 = [T1 : tp][T2 : tp][f : tnfn T1 T2][d1 : tm T1][x1 : tm T2]
       [d2 : tm T1][x2 : tm T2][f' : tnfn T1 T2] _forall T1 [z : tm T1]
    _upd/cc T1 T2 d1 x1 (_upd/cc T1 T2 d2 x2 (_k0 T1 T2)) f f' z.

_upd3 = [T1 : tp][T2 : tp][f : tnfn T1 T2][d1 : tm T1][x1 : tm T2][d2 : tm T1]
  [x2 : tm T2][d3 : tm T1][x3 : tm T2][f' : tnfn T1 T2]
  _forall T1 [z : tm T1] _upd/cc T1 T2 d1 x1 (_upd/cc T1 T2 d2 x2
    (_upd/cc T1 T2 d3 x3 (_k0 T1 T2))) f f' z.

_upd4 = [T1 : tp][T2 : tp][f : tnfn T1 T2][d1 : tm T1][x1 : tm T2][d2 : tm T1]
  [x2 : tm T2][d3 : tm T1][x3 : tm T2][d4 : tm T1][x4 : tm T2][f' : tnfn T1 T2]
  _forall T1 [z : tm T1] _upd/cc T1 T2 d1 x1 (_upd/cc T1 T2 d2 x2
    (_upd/cc T1 T2 d3 x3 (_upd/cc T1 T2 d4 x4 (_k0 T1 T2)))) f f' z.

app1_pred = app1 num form.
app_get_t = app2 registers num.
app_get   = app_get_t num.
app_upd   = app4 registers num num registers form.
app_upd2  = app6 registers num num num num registers form.

updn_typ = tnfn num num -> tm num -> tm num -> tnfn num num -> tform.
updn2_typ = tnfn num num -> tm num -> tm num -> tm num -> tm num
             -> tnfn num num -> tform.
updn3_typ = tnfn num num -> tm num -> tm num -> tm num -> tm num
             -> tm num -> tm num -> tnfn num num -> tform.

updn  : updn_typ  = _upd num num.
updn2 : updn2_typ = _upd2 num num.
updn3 : updn3_typ = _upd3 num num.

strictify_num = [f : tform][c : tnum] app1_pred ([_ : tnum] f) c.

true_fn = strictify_num true.

get_mem = [m : tmem][a : tnum] _@ num num m a.
get_reg = [r : tregs][a : tnum] _@ num num r a.

_eq_mem : tmem -> tmem -> tform =
 [m : tmem][m' : tmem] _frl_n [i : tnum] eqn (get_mem m i) (get_mem m' i).

_eq_regs : tregs -> tregs -> tform =
 [r : tregs][r' : tregs]_frl_n [i : tnum] eqn (get_reg r i) (get_reg r' i).

_eq_hidden_regs: tregs -> tregs -> tform =
 [r : tregs][r' : tregs] _frl_n [i : tnum] 
    geq i (const 1000) imp eqn (get_reg r i) (get_reg r' i).

_is_word : tnum -> tform = [x : tnum] isNat x and lt x pow2_32.

_regmempred_extensional : (tregs -> tmem -> tnum -> tform) -> tform =
 [f : tregs -> tmem -> tnum -> tform] 
  _forall5 registers registers memory memory num
    [r : tregs][r' : tregs][m : tmem][m' : tmem][n : tnum] _eq_hidden_regs r r'
      imp (_frl_n [x : tm num]
	    not (_writable r m x) imp eqn (get_mem m x) (get_mem m' x))
      imp f r m n equiv f r' m' n.

_readable_extensional : pf (_regmempred_extensional _readable).
_writable_extensional : pf (_regmempred_extensional _writable).
_executable_extensional : pf (_regmempred_extensional _executable).
_executable_isword : {R:tregs} {M:tmem} {X:tnum}
                     pf (_executable R M X) -> pf (_is_word X).

instr_lam : (tregs -> tmem -> tregs -> tmem -> tform) -> tm instr =
 _lam4 registers memory registers memory form.

% This definition converts the byte input argument to the number of bits
% that are contained in the given number of bytes.
byte2bit = [bytes : tnum] times bytes eight.

% This definition makes sure that the bit pattern between "left" and "right"
% is identical in words "v1" and "v2".
eq_between = [right : tnum][left : tnum][v1 : tnum][v2 : tnum]
  _exs_n [t : tnum] _bits right left t v1 and _bits right left t v2.

% Sign extend an integer.  "msb" is the most significant bit of the
% number we are sign extending, "v" is the number itself and "vres" is
% the result of the sign extension. "v" must always be a positive
% integer.
sign_ext = [msb : tnum][v : tnum][vres : tnum]
  _exs_n [s : tnum]
   _bits msb msb s v and
   (if (eqn s zero) (eqn vres v)
                (_exs_n [p : tnum] (_power2 (succ msb) p) and
                                   (eqn vres (plus v (minus pow2_32 p))))).

% This definition forms the "address" and the "offset" arguments when
% given an unaligned argument.  It also ensures that the address is
% well aligned given the size of the value we are trying to fetch.
form_address = [u_address : tnum][alignment_bit : tnum][address : tnum]
               [offset : tnum][size : tnum]
  _bits zero alignment_bit offset u_address and
  _minus_mod32 u_address offset address and
  _modulo offset size zero.

% This definition is used to cast the value of a word to the appropriate
% size.  It is used by the load instructions to chop the value fetched
% from memory to the appopriate size.
chop_value = [m : tmem][address : tnum][offset : tnum][size : tnum][v : tnum]
  _exs_n2 [right : tnum][left : tnum]
    eqn left (minus (const 31) (byte2bit offset)) and
    eqn right (minus (succ left) (byte2bit size)) and
    _bits right left v (get_mem m address).

% This definition is used (in conjuction with the above) by the load
% instructions.  The function sign extends a value from the
% appropriate bit depending on the size.  After the value is choped
% then if we are dealing with a sign extending load the value fetched
% from memory must be sign-extended.
sign_extend_from_size = [v : tnum][signed : tform][size : tnum][vres : tnum]
  if signed (((eqn size one) and (sign_ext seven v vres)) or
             ((eqn size two) and (sign_ext fifteen v vres)) or
             ((eqn size four) and (eqn v vres)))
            (eqn v vres).

% This definition is used to fetch the value stored in a memory
% location due to a load instruction.  It performs sign extention and
% casting to the appropriate machine type.
fetch_value = [m : tmem][address : tnum][offset : tnum][signed : tform]
              [size : tnum][val : tnum]
 _exs_n [v : tnum] chop_value m address offset size v and
                   sign_extend_from_size v signed size val.

mk_stored_value_word = [reg_val : tnum][new_val : tnum] eqn new_val reg_val.

mk_stored_value_half =
 [mem_val : tnum][reg_val : tnum][offset : tnum][new_val : tnum]
  _exs_n2 [mp_right : tnum][mp_left : tnum] _exs_n2 [p1 : tnum][p2 : tnum]
   _power2 (byte2bit (minus four offset)) p2 and
   _power2 (byte2bit (minus (minus four offset) two)) p1 and
   _modulo mem_val p1 mp_right and
   _divide mem_val p2 mp_left and
   eqn new_val (plus (plus (times mp_left p2) (times reg_val p1)) mp_right).

mk_stored_value_byte =
 [mem_val : tnum][reg_val : tnum][offset : tnum][new_val : tnum]
  _exs_n2 [mp_left : tnum][mp_right : tnum] _exs_n2 [p1 : tnum][p2 : tnum]
   (_power2 (byte2bit (minus four offset)) p2) and
   (_power2 (byte2bit (pred (minus four offset))) p1) and
   _modulo mem_val p1 mp_right and
   _divide mem_val p2 mp_left and
   eqn new_val (plus (plus (times mp_left p2) (times reg_val p1)) mp_right).

% This definition is used for manufucturing the value to be stored
% into a memory location by the store kind of instructions.
make_stored_value : tmem -> tnum -> tnum -> tnum -> tnum -> tnum -> tform =
 [m : tmem][address : tnum][offset : tnum]
 [size : tnum][reg_val : tnum][new_val : tnum]
  _exs_n2 [mem_val : tnum][rval : tnum]
   (eqn mem_val (get_mem m address)) and
   (_bits zero (pred (byte2bit size)) rval reg_val) and
   ((eqn size four and mk_stored_value_word rval new_val) or
    (eqn size two  and mk_stored_value_half mem_val rval offset new_val) or
    (eqn size one  and mk_stored_value_byte mem_val rval offset new_val)).

% Operators for logical/Arithmetic operations.
alu_fun = tnum -> tnum -> tnum -> tform.

app_alu = app3 num num num form.
app_alu2 = app2 num num form.

% Logical
bitwise : (tform -> tform -> tform)-> alu_fun =
 [f : tform -> tform -> tform][x : tnum][y : tnum][z : tnum]
   _is_word z and
   _frl_n [i : tnum] (_bits i i one z)
        equiv ( _inrange2 zero (const 32) i and
                _@2 form form form (_lam2 form form form f)
                                 (_bits i i one x) (_bits i i one y)).

and_oper  : alu_fun = bitwise [x : tform][y : tform] x and y.
andn_oper : alu_fun = bitwise [x : tform][y : tform] x and not y.
or_oper   : alu_fun = bitwise [x : tform][y : tform] x or y.
orn_oper  : alu_fun = bitwise [x : tform][y : tform] x or not y.
xor_oper  : alu_fun = bitwise [x : tform][y : tform] x equiv not y.
xnor_oper : alu_fun = bitwise [x : tform][y : tform] x equiv y.

bits_0_31 : tnum -> tnum -> tform = _rbits 0 31.
get_lsb5  : tnum -> tnum -> tform = _rbits 0 4.

% Shift Left logical
shift_ll_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
 _exs_n2 [lsb5 : tnum][s : tnum]
  (get_lsb5 lsb5 y) and (_power2 lsb5 s) and (bits_0_31 z (times x s)).

% Shift right logical
shift_rl_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
 _exs_n [lsb5 : tnum] (get_lsb5 lsb5 y) and (_bits lsb5 (const 31) z x).

% Shift right arithmetic
shift_ra_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
 _exs_n2 [r : tnum][lsb5 : tnum]
  (shift_rl_oper x y r) and (get_lsb5 lsb5 y) and
  (sign_ext (minus (const 31) lsb5) r z).

% Negate in two's complement
neg_2s_comp = [c : tnum][x : tnum][y : tnum]
  if (eqn x zero) (eqn y zero) (eqn y (minus c x)).

neg_2s_comp_16 : tnum -> tnum -> tform = neg_2s_comp pow2_16.
neg_2s_comp_32 : tnum -> tnum -> tform = neg_2s_comp pow2_32.
neg_2s_comp_64 : tnum -> tnum -> tform = neg_2s_comp pow2_64.

% Arith plus
% commented out since it overlaps with _plus_mod32
% plus_mod32_oper = [x : tnum][y : tnum][z : tnum] bits_0_31 z (plus x y).

% Arith minus
% commented out since it overlaps with _minus_mod32
% minus_mod32_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
%  _exs_n [negy : tnum] neg_2s_comp_32 y negy and bits_0_31 z (plus x negy).

% Floating point types
o_flt32 : tp = num.
o_flt64 : tp = pair o_flt32 o_flt32.
o_flt128 : tp = pair o_flt64 o_flt64.

flt32  : type = tm o_flt32.
flt64  : type = tm o_flt64.
flt128 : type = tm o_flt128.

mk_float64  = _mktuple2 num num.
mk_float128 = _mktuple4 num num num num.

% Convert ints to floats
int32->float32  : tnum -> flt32  -> tform.
int32->float64  : tnum -> flt64  -> tform.
int32->float128 : tnum -> flt128 -> tform.

% Convert floats to ints
float32->int32  : flt32 -> tnum -> tform.
float64->int32  : flt64 -> tnum -> tform.
float128->int32 : flt128 -> tnum -> tform.

% Convert floats to floats
float32->float64  : flt32 -> flt64 -> tform.
float32->float128 : flt32 -> flt128 -> tform.
float64->float32  : flt64 -> flt32 -> tform.
float64->float128 : flt64 -> flt128 -> tform.
float128->float32 : flt128 -> flt32 -> tform.
float128->float64 : flt128 -> flt64 -> tform.

% Floating point negate
float32_neg : flt32 -> flt32 -> tform.
float64_neg : flt64 -> flt64 -> tform.

% Floating point absolute value
float32_abs : flt32 -> flt32 -> tform.
float64_abs : flt64 -> flt64 -> tform.

% Floating point square root
float32_sqrt  : flt32 -> flt32 -> tform.
float64_sqrt  : flt64 -> flt64 -> tform.
float128_sqrt : flt128 -> flt128 -> tform.

% Floating point bin operators
float32_oper_type  : type = flt32 -> flt32 -> flt32 -> tform.
float64_oper_type  : type = flt64 -> flt64 -> flt64 -> tform.
float128_oper_type : type = flt128 -> flt128 -> flt128 -> tform.

% Floating point add, and subtract
float32_add  : float32_oper_type.
float64_add  : float64_oper_type.
float128_add : float128_oper_type.

float32_sub  : float32_oper_type.
float64_sub  : float64_oper_type.
float128_sub : float128_oper_type.

% Floating point multiply, and divide
float32_mul  : float32_oper_type.
float64_mul  : float64_oper_type.
float128_mul : float128_oper_type.

float32->64_mul  : flt32 -> flt32 -> flt64 -> tform.
float64->128_mul : flt64 -> flt64 -> flt128 -> tform.

float32_div  : float32_oper_type.
float64_div  : float64_oper_type.
float128_div : float128_oper_type.

% Ordering relations
float32_eq : flt32 -> flt32 -> tform.
float32_gt : flt32 -> flt32 -> tform.
float32_lt : flt32 -> flt32 -> tform.
float32_uo : flt32 -> flt32 -> tform.

float64_eq : flt64 -> flt64 -> tform.
float64_gt : flt64 -> flt64 -> tform.
float64_lt : flt64 -> flt64 -> tform.
float64_uo : flt64 -> flt64 -> tform.

float128_eq : flt128 -> flt128 -> tform.
float128_gt : flt128 -> flt128 -> tform.
float128_lt : flt128 -> flt128 -> tform.
float128_uo : flt128 -> flt128 -> tform.

app_upd_t = [T : tp] app6 registers num T registers memory memory form.

% Perform a unary floating point operation
float_unary_op =
 [T1 : tp][fs2c : tnum -> tform][getf : tregs -> tnum -> tm T1]
 [T2 : tp][upd  : tregs -> tnum -> tm T2 -> tregs -> tmem -> tmem -> tform]
 [f  : tm T1 -> tm T2 -> tform][fs2 : tnum][fd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  (app1_pred fs2c fs2) and
  (_exists T2 [v : tm T2] (app2 T1 T2 form f (app_get_t T1 getf r fs2) v) and
                          (app_upd_t T2 upd r fd v r' m m')).

% Perform a binary floating point operation
float_binary_op =
 [T1 : tp][fsc : tnum -> tform][getf : tregs -> tnum -> tm T1]
 [T2 : tp][upd : tregs -> tnum -> tm T2 -> tregs -> tmem -> tmem -> tform]
 [f : tm T1 -> tm T1 -> tm T2 -> tform][fs1 : tnum][fs2 : tnum][fd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (app1_pred fsc fs1) and (fsc fs2) and
   (_exists T2 [v : tm T2]
    (app3 T1 T1 T2 form f (app_get_t T1 getf r fs1)
                          (app_get_t T1 getf r fs2) v) and
   (app_upd_t T2 upd r fd v r' m m')).


pi_typ = tnum -> tform.
f_typ = [T : tp] tm T -> tnum -> tform.

&&n : pi_typ -> pi_typ -> pi_typ = _&& num. %infix right 5 &&n.

fld0 = [T : tp][p_pi : pi_typ][icons : tm T][ins : tm T][word : tnum]
 app1_pred p_pi word and _eq T ins icons.

fld1 = [T : tp][T1 : tp][f0 : f_typ T1][p_pi : pi_typ]
          [icons : tm T1 -> tm T][ins : tm T][word : tnum]
    _exists T1 [g : tm T1] (f0 g &&n fld0 T p_pi (icons g) ins) word.

fld2 = [T : tp][T1 : tp][T2 : tp]
  [f0 : f_typ T1][f1 : f_typ T2][p_pi : pi_typ]
  [icons : tm T1 -> tm T2 -> tm T][ins : tm T][word : tnum]
   _exists T1 [g : tm T1] (f0 g &&n fld1 T T2 f1 p_pi (icons g) ins) word.

fld3 = [T : tp][T1 : tp][T2 : tp][T3 : tp]
  [f0 : f_typ T1][f1 : f_typ T2][f2 : f_typ T3][p_pi : pi_typ]
  [icons : tm T1 -> tm T2 -> tm T3 -> tm T][ins : tm T][word : tnum]
    _exists T1  [g : tm T1] 
     (f0 g &&n fld2 T T2 T3 f1 f2 p_pi (icons g) ins) word.

fld4 = [T : tp][T1 : tp][T2 : tp][T3 : tp][T4 : tp]
  [f0 : f_typ T1][f1 : f_typ T2][f2 : f_typ T3][f3 : f_typ T4][p_pi : pi_typ]
  [icons : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T][ins : tm T][word : tnum]
    _exists T1  [g : tm T1] 
     (f0 g &&n fld3 T T2 T3 T4 f1 f2 f3 p_pi (icons g) ins) word.

fld0i = fld0 instr.
fld1i = fld1 instr.
fld2i = fld2 instr.
fld3i = fld3 instr.
fld4i = fld4 instr.

field_typ = tnum -> tnum -> tform.
pat_typ = tnum -> tform.
%abbrev fldapp = [f : field_typ][v : rep_type] f (const v).

||2n = _||2 instr num. %infix right 4 ||2n.
% Copyright (c) 2004 Princeton University
%	$Id: float_axioms.elf,v 1.4 2004/04/22 10:49:17 appel Exp $


% The floating point axioms for the sparc V8 machine.

float32_range : flt32 -> tform =
 [v : flt32] (geq v zero and leq v (const 4294967295)).

float64_range : flt64 -> tform =
 [vp : flt64] float32_range (_get1of2 o_flt32 o_flt32 vp) and
              float32_range (_get2of2 o_flt32 o_flt32 vp).

float128_range : flt128 -> tform =
 [vpp : flt128] float64_range (_get1of2 o_flt64 o_flt64 vpp) and
                float64_range (_get2of2 o_flt64 o_flt64 vpp).

float_unary_prop : {T1 : tp}{T2 : tp} (tm T2 -> tform)
                    -> (tm T1 -> tm T2 -> tform) -> tform =
 [T1 : tp][T2 : tp][range : tm T2 -> tform][f : tm T1 -> tm T2 -> tform]
 _forall T1 [x : tm T1]
  (_exists T2 [y : tm T2] f x y) and
  (_forall2 T2 T2 [y : tm T2][y' : tm T2] f x y and f x y' imp _eq T2 y y') and
  (_forall T2 [y : tm T2] f x y imp range y).

float_unary_prop_32 : {T : tp} (tm T -> flt32 -> tform) -> tform =
 [T : tp] float_unary_prop T o_flt32  float32_range.
float_unary_prop_64 : {T : tp} (tm T -> flt64 -> tform) -> tform =
 [T : tp] float_unary_prop T o_flt64  float64_range.
float_unary_prop_128 : {T : tp} (tm T -> flt128 -> tform) -> tform =
 [T : tp] float_unary_prop T o_flt128 float128_range.

% Convert ints to floats axioms
int32->float32_axiom  : pf (float_unary_prop_32  num int32->float32).
int32->float64_axiom  : pf (float_unary_prop_64  num int32->float64).
int32->float128_axiom : pf (float_unary_prop_128 num int32->float128).

% Convert floats to ints
float32->int32_axiom  : pf (float_unary_prop_32 o_flt32  float32->int32).
float64->int32_axiom  : pf (float_unary_prop_32 o_flt64  float64->int32).
float128->int32_axiom : pf (float_unary_prop_32 o_flt128 float128->int32).

% Convert floats to floats
float32->float64_axiom  : pf (float_unary_prop_64  o_flt32  float32->float64).
float32->float128_axiom : pf (float_unary_prop_128 o_flt32  float32->float128).
float64->float32_axiom  : pf (float_unary_prop_32  o_flt64  float64->float32).
float64->float128_axiom : pf (float_unary_prop_128 o_flt64  float64->float128).
float128->float32_axiom : pf (float_unary_prop_32  o_flt128 float128->float32).
float128->float64_axiom : pf (float_unary_prop_64  o_flt128 float128->float64).

% Negate axiom
float32_neg_axiom : pf (float_unary_prop_32 o_flt32 float32_neg).
float64_neg_axiom : pf (float_unary_prop_64 o_flt64 float64_neg).

% Absolute value axiom
float32_abs_axiom : pf (float_unary_prop_32 o_flt32 float32_abs).
float64_abs_axiom : pf (float_unary_prop_64 o_flt64 float64_abs).

% Floating point square root
float32_sqrt_axiom  : pf (float_unary_prop_32  o_flt32  float32_sqrt).
float64_sqrt_axiom  : pf (float_unary_prop_64  o_flt64  float64_sqrt).
float128_sqrt_axiom : pf (float_unary_prop_128 o_flt128 float128_sqrt).

% Floating point bin operators

float_binary_prop : {T1 : tp} {T2 : tp}{T3 : tp}
         (tm T3 -> tform) -> (tm T1 -> tm T2 -> tm T3 -> tform) -> tform =
 [T1 : tp][T2 : tp][T3 : tp]
 [range : tm T3 -> tform][f : tm T1 -> tm T2 -> tm T3 -> tform]
  _forall2 T1 T2 [x1 : tm T1][x2 : tm T2]
   (_exists T3 [y : tm T3] f x1 x2 y) and
   (_forall2 T3 T3 [y : tm T3][y' : tm T3] (f x1 x2 y) and (f x1 x2 y')
                                           imp _eq T3 y y') and
   (_forall T3 [y : tm T3] (f x1 x2 y) imp (range y)).

float_binary_prop_32 :
 {T1:tp} {T2:tp} (tm T1 -> tm T2 -> tm o_flt32 -> tform) -> tform =
 [T1 : tp][T2 : tp] float_binary_prop T1 T2 o_flt32 float32_range.

float_binary_prop_64 :
 {T1:tp} {T2:tp} (tm T1 -> tm T2 -> tm o_flt64 -> tform) -> tform =
 [T1 : tp][T2 : tp] float_binary_prop T1 T2 o_flt64 float64_range.

float_binary_prop_128 :
 {T1:tp} {T2:tp}(tm T1 -> tm T2 -> tm o_flt128 -> tform) -> tform =
 [T1 : tp][T2 : tp] float_binary_prop T1 T2 o_flt128 float128_range.

% Floating point add and subtract axioms
float32_add_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_add).
float64_add_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_add).
float128_add_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_add).

float32_sub_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_sub).
float64_sub_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_sub).
float128_sub_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_sub).

% Floating point multiply, and divide axioms
float32_mul_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_mul).
float64_mul_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_mul).
float128_mul_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_mul).

float32->64_axiom  : pf (float_binary_prop_64 o_flt32 o_flt32 float32->64_mul).
float64->128_axiom: pf(float_binary_prop_128 o_flt64 o_flt64 float64->128_mul).

float32_div_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_div).
float64_div_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_div).
float128_div_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_div).

% Ordering axiom
cmptyp : tp -> type = [T : tp] tm T -> tm T -> tform.

float*_order : {T : tp} cmptyp T -> cmptyp T -> cmptyp T -> cmptyp T -> tform =
 [T : tp][eq : cmptyp T][gt : cmptyp T][lt : cmptyp T][uo : cmptyp T]
  _forall2 T T [x : tm T][y : tm T]
   (eq x y) xor (gt x y) xor (lt x y) xor (uo x y).

float32_order_axiom : pf (float*_order o_flt32
                            float32_eq float32_gt float32_lt float32_uo).

float64_order_axiom : pf (float*_order o_flt64
                            float64_eq float64_gt float64_lt float64_uo).

float128_order_axiom : pf (float*_order o_flt128
                             float128_eq float128_gt float128_lt float128_uo).
% Copyright (c) 2004 Princeton University
%	$Id: oper_types.elf,v 1.4 2004/04/22 10:49:20 appel Exp $


regaddr : tp = registers arrow num arrow form.

address_ : tp = registers arrow num arrow form.

reg_or_imm : tp = registers arrow num arrow form.

% Copyright (c) 2004 Princeton University
%	$Id: oper_injectors.elf,v 1.4 2004/04/22 10:49:20 appel Exp $


app_constr : tm reg_or_imm -> tregs -> tnum -> tform = _@2 registers num form.

inj_imode : tnum -> tm reg_or_imm = 
 [n : tnum] _lam2 registers num form
             [r : tregs][x : tnum] sign_ext (const 12) n x.

inj_rmode : tnum -> tm reg_or_imm =
 [i : tnum] _lam2 registers num form
             [r : tregs][x : tnum] eqn (get_reg r i) x.

inj_generalA : tnum -> tm reg_or_imm -> tm address_ =
  [rs1 : tnum][reg_imm : tm reg_or_imm]
    _lam2 registers num form [r : tregs][x : tnum]
     _exs_n [y : tnum] app_constr reg_imm r y and
                       _plus_mod32 (get_reg r rs1) y x.

inj_indexR : tnum -> tnum -> tm regaddr =
 [rs1 : tnum][rs2 : tnum]
  _lam2 registers num form [r : tregs][x : tnum]
    _plus_mod32 (get_reg r rs1) (get_reg r rs2) x.
% Copyright (c) 2004 Princeton University
%	$Id: instr_sem.elf,v 1.70 2004/06/01 21:38:09 gtan Exp $

% Instruction Semantics for the sparc V8 machine.

% We use numbers >= 32 to hold non-numbered machine registers.
pc    : tnum = const 32.     % The program counter
npc   : tnum = const 33.     % The next program counter
icc   : tnum = const 34.     % The 4 bit condition code register
fcc   : tnum = const 35.     % The 2 bit condition code register (floating)
y_reg : tnum = const 36.     % The Y register used for integer multiplication
icnt  : tnum = const 37.     % The number of instructions executed
                                 % this includes the current instruction
last_cbr    : tnum = const 38.   % The last time a cbr instr was executed
last_cmpfcc : tnum = const 39.   % The last time a cmpfcc instr was executed
last_wry    : tnum = const 40.   % The last time a wry instr was executed
opc         : tnum = const 41.   % The old pc i.e. the pc of the instr we are
                                 % currently executing
flt_offset : tnum = const 128. % Offset at which floating-point registers begin

% Compute the offset into the reg bank of floating point register "reg"
flt_num : tnum -> tnum = [reg : tnum] plus flt_offset reg.

% Get integer register.
get_ireg : tregs -> tnum -> tnum = get_reg.

% Get floating point register.
get_freg = [r : tregs][fd : tnum] get_reg r (flt_num fd).

set_from_icnt : tnum -> tregs -> tregs -> tform =
 [reg : tnum][r : tregs][r' : tregs] updn r reg (get_ireg r icnt) r'.

set_cbr    : tregs -> tregs -> tform = set_from_icnt last_cbr.
set_cmpfcc : tregs -> tregs -> tform = set_from_icnt last_cmpfcc.
set_wry    : tregs -> tregs -> tform = set_from_icnt last_wry.

cbr_in_progress? : tregs -> tform =
 [r : tregs] eqn (get_ireg r icnt) (succ (get_ireg r last_cbr)).
cmpfcc_in_progress? : tregs -> tform =
 [r : tregs] eqn (get_ireg r icnt) (succ (get_ireg r last_cmpfcc)).
wry_in_progress? : tregs -> tform =
 [r : tregs] lt (get_ireg r icnt) (plus (get_ireg r last_wry) four).

word_size   : tnum = four.    % The word size of the machine
word_bits   : tnum = pow2_32. % The word size in bits.
double_size : tnum = eight.   % The alignment of a double word
instr_size  : tnum = four.    % The instruction size

% The bit to look at to establish if the number is negative
sign_bit : rep_type = 31.
sign_bit? : tnum -> tnum -> tform = _rbits sign_bit sign_bit.

% The predicates that decides negativity, positiveness and nulity
negative? : tnum -> tform = sign_bit? one.
positive? : tnum -> tform = sign_bit? zero.
zero?     : tnum -> tform = [x : tnum] eqn x zero.

% Bit locations of the icc fields in the cc word
icc_n_bit : tnum = three.
icc_z_bit : tnum = two.
icc_v_bit : tnum = one.
icc_c_bit : tnum = zero.

% The bits below indicate the status of the 32-bit ALU result
% of the last instruction that modified the icc field
icc_n? : tnum -> tnum -> tform = _bits icc_n_bit icc_n_bit.
icc_z? : tnum -> tnum -> tform = _bits icc_z_bit icc_z_bit.
icc_v? : tnum -> tnum -> tform = _bits icc_v_bit icc_v_bit.
icc_c? : tnum -> tnum -> tform = _bits icc_c_bit icc_c_bit.

% Result was negative (1 = negative, 0 = non negative)
icc_n : tnum -> tform = icc_n? one.

% Result was zero (1 = zero, 0 = nonzero)
icc_z : tnum -> tform = icc_z? one.

% Result was out of range (overflow) (1 = overflow, 0 = no overflow)
icc_v : tnum -> tform = icc_v? one.

% This bit indicates whether a carry out or borrow occurred.  Carry is
% set on addition if there is a carry out of bit 31.  Carry is set on
% subtraction if there is a borrow into bit 31. (1 = carry, 0 = no carry)
icc_c : tnum -> tform = icc_c? one.

% Floating point condition codes (field of the fcc register)
fcc? : tnum -> tnum -> tform = _eq num.

% Equal (freg_rs1 = freg_rs2)
fcc_e : tnum -> tform = fcc? zero.

% Greater (freg_rs1 > freg_rs2)
fcc_g : tnum -> tform = fcc? two.

% Less (freg_rs1 < freg_rs2)
fcc_l : tnum -> tform = fcc? one.

% Unordered (freg_rs1 ? freg_rs2)
fcc_u : tnum -> tform = fcc? three.

% Update the icc register
upd_icc : tregs -> tnum -> tregs -> tform =
 [r : tregs][v : tnum][r' : tregs] updn r icc v r'.

% Set the fcc register
upd_fcc : tregs -> tnum -> tregs -> tform =
 [r : tregs][v : tnum][r' : tregs] updn r fcc v r'.

% Update a sparc machine integer reg (when target is zero do nothing).
upd_ireg = [r : tregs][rd : tnum][v : tnum][r' : tregs]
  updn2 r zero (get_reg r zero) rd v r'.

% Same as above for two registers.
upd_ireg2 = [r: tregs][rd1: tnum][v1: tnum][rd2: tnum][v2: tnum][r': tregs]
  updn3 r zero (get_reg r zero) rd1 v1 rd2 v2 r'.

% Update one sparc machine floating point register.
upd_freg = [r : tregs][fd : tnum][v : tnum][r' : tregs]
 updn r (flt_num fd) v r'.

% Update two sparc machine floating point registers.
upd_freg2 = [r: tregs][fd1: tnum][v1: tnum][fd2: tnum][v2: tnum][r': tregs]
 updn2 r (flt_num fd1) v1 (flt_num fd2) v2 r'.

% Update four sparc machine floating point registers.
upd_freg4 = [r : tregs][fd1 : tnum][v1 : tnum][fd2 : tnum][v2 : tnum]
            [fd3 : tnum][v3 : tnum][fd4 : tnum][v4 : tnum][r' : tregs]
 _exs_r [r'' : tregs] (updn2 r (flt_num fd1) v1 (flt_num fd2) v2 r'') and
                      (updn2 r'' (flt_num fd3) v3 (flt_num fd4) v4 r').

% This definition is true if the input argument "v" is indeed the value
% that is represented by "reg_imm" in the given register set.
load_reg_imm : tregs -> tm reg_or_imm -> tnum -> tform =
 [r : tregs][reg_imm : tm reg_or_imm][v : tnum] app_constr reg_imm r v.

% This definition is true if the input value "v" is indeed the result
% of the load generalA operation (see the syntax definition for sparc).
load_generalA : tregs -> tnum -> tm reg_or_imm -> tnum -> tform =
 [r : tregs][rs1 : tnum][reg_imm : tm reg_or_imm][v : tnum]
  _exs_n [v_reg_imm : tnum] load_reg_imm r reg_imm v_reg_imm and
                            _plus_mod32 (get_ireg r rs1) v_reg_imm v.

% This definition is true if the "address_" given is equal to the num
% supplied in the input variable "v".  It uses the definition of
% "generalA" defined above.  It also makes sure that the address is
% appropriately aligned.
load_address_align : tregs -> tm address_ -> tnum -> tnum -> tnum -> tform =
 [r : tregs][addr : tm address_][address : tnum][offset : tnum][size : tnum]
  _exs_n [v' : tnum] app_constr addr r v' and
                     form_address v' one address offset size.

load_address_align_aux =
 [read/write-able : tregs -> tmem -> tnum -> tform]
 [r : tregs][m : tmem][addr : tm address_]
 [address : tnum][offset : tnum][size : tnum]
  load_address_align r addr address offset size and
  _@3 registers memory num form 
    (_lam3 registers memory num form read/write-able) r m address.

% This definition computes the address we are trying to load from,
% makes sure that this address is readable and that it is
% appropriately aligned.
load_address_read_align = load_address_align_aux _readable.

% This definition computes the address we are trying to write to
% makes sure that this address is writable and that it is
% appropriately aligned.
load_address_write_align = load_address_align_aux _writable.

% Loadg
loadg_typ = tm address_ -> tnum -> tm instr.

% The load instruction family.
i_loadg : tform -> tnum -> updn_typ -> loadg_typ =
 [signed : tform][size : tnum][upd : updn_typ] [addr : tm address_][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [address : tnum][offset : tnum][value : tnum]
     (load_address_read_align r m addr address offset size) and
     (fetch_value m address offset signed size value) and
     (app_upd upd r rd value r')) and
    (_eq_mem m m').
                                        % Load Signed Byte
i_LDSB : tm address_ -> tnum -> tm instr = i_loadg true  (const 1) upd_ireg.
                                        % Load Signed Halfword
i_LDSH : tm address_ -> tnum -> tm instr = i_loadg true  (const 2) upd_ireg.
                                        % Load Unsigned Byte
i_LDUB : tm address_ -> tnum -> tm instr = i_loadg false (const 1) upd_ireg.
                                        % Load Unsigned Halfword
i_LDUH : tm address_ -> tnum -> tm instr = i_loadg false (const 2) upd_ireg.
                                        % Load Word
i_LD   : tm address_ -> tnum -> tm instr = i_loadg false (const 4) upd_ireg.

i_LDSTUB : tm address_ -> tnum -> tm instr =  % Atomic Load-Store Unsigned Byte
 [addr : tm address_][rd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exs_n3 [address : tnum][offset : tnum][value : tnum]
    _exs_n [value' : tnum]
    (load_address_read_align r m addr address offset one) and
    (fetch_value m address offset false one value) and
    (_writable r m address) and
    (make_stored_value m address offset one (const 255) value') and
    (upd_ireg r rd value r') and (updn m address value' m')).

i_SWAP_DOT : tm address_ -> tnum -> tm instr =  % Swap r Register with Memory
 [addr : tm address_][rd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exs_n3 [address : tnum][offset : tnum][value : tnum]
    (load_address_read_align r m addr address offset word_size) and
    (fetch_value m address offset false word_size value) and
    (_writable r m address) and
    (upd_ireg r rd value r') and (updn m address (get_ireg r rd) m')).

ldd_aux : updn2_typ -> tm address_ -> tnum -> tm instr =
 [upd : updn2_typ][addr : tm address_][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (even? rd) and
    (_exs_n3 [address : tnum][address' : tnum][offset : tnum]
     _exs_n3 [offset' : tnum][v1 : tnum][v2 : tnum]
     (load_address_read_align r m addr address offset double_size) and
     (fetch_value m address offset false word_size v1) and
     (_plus_mod32 address word_size address') and
     (_readable r m address') and
     (fetch_value m address' offset' false word_size v2) and
     (app_upd2 upd r rd v1 (plus rd one) v2 r')) and
    (_eq_mem m m').
                                               % Load Doubleword
i_LDD : tm address_ -> tnum -> tm instr = ldd_aux upd_ireg2.
                                               % Load Floating-point
i_LDF : tm address_ -> tnum -> tm instr = i_loadg false four upd_freg.
                                               % Load Double Floating-point
i_LDDF : tm address_ -> tnum -> tm instr = ldd_aux upd_freg2.

i_LDC  : tm address_ -> tnum -> tm instr.      % Load Coprocessor
i_LDDC : tm address_ -> tnum -> tm instr.      % Load Double Coprocessor

% Storeg
storeg_typ = tnum -> tm address_ -> tm instr.

% The store instruction family.
i_storeg =
 [size : tnum][get : tregs -> tnum -> tnum][rd : tnum][addr : tm address_]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [address : tnum][offset : tnum][value : tnum]
     (load_address_write_align r m addr address offset size) and
     (make_stored_value m address offset size (app_get get r rd) value) and
     (updn m address value m')) and
    (_eq_regs r r').
                                              % Store Byte
i_STB : tnum -> tm address_ -> tm instr = i_storeg one  get_ireg.
                                              % Store Halfword
i_STH : tnum -> tm address_ -> tm instr = i_storeg two  get_ireg.
                                              % Store Word
i_ST  : tnum -> tm address_ -> tm instr = i_storeg four get_ireg.

std_aux =
 [get : tregs -> tnum -> tnum][rd : tnum][addr : tm address_]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (even? rd) and
    (_exs_n3 [address : tnum][address' : tnum][offset : tnum]
     (load_address_write_align r m addr address offset double_size) and
     (eqn address'(plus address word_size)) and
     (_writable r m address') and
     (updn2 m address  (app_get get r rd)
              address' (app_get get r (plus rd one)) m')) and
    (_eq_regs r r').

i_STD : storeg_typ = std_aux get_ireg.          % Store Doubleword
                                                % Store Floating-point
i_STF : tnum -> tm address_ -> tm instr = i_storeg four get_freg.
                                                % Store Double Floating-point
i_STDF : tnum -> tm address_ -> tm instr = std_aux get_freg.

i_STC : tnum -> tm address_ -> tm instr.        % Store Coprocessor
i_STDC : tnum -> tm address_ -> tm instr.       % Store Double Coprocessor

loada_typ = tm regaddr -> tnum -> tnum -> tm instr.

i_loada : tnum -> tform -> loada_typ.

% Here FAS = From Alternative Space.
i_LDSBA : loada_typ = i_loada one true.         % Load Signed Byte FAS
i_LDSHA : loada_typ = i_loada two true.         % Load Signed Halfword FAS
i_LDUBA : loada_typ = i_loada one false.        % Load Unsigned Byte FAS
i_LDUHA : loada_typ = i_loada two false.        % Load Unsigned Halfword FAS
i_LDA   : loada_typ = i_loada word_size false.  % Load Word FAS
i_LDSTUBA : loada_typ.                 % Atomic Load-Store Unsigned Byte FAS

i_SWAPA : loada_typ.                   % Swap r Register with Memory FAS

i_LDDA : loada_typ.                    % Load Double Word FAS

storea_typ = tnum -> tm regaddr -> tnum -> tm instr.

i_storea : tnum -> storea_typ.

% Here IAS = Into Alternative Space.
i_STBA : storea_typ = i_storea (const 1).          % Store Byte IAS
i_STHA : storea_typ = i_storea (const 2).          % Store Halfword IAS
i_STA  : storea_typ = i_storea word_size.          % Store Word IAS

i_STDA : storea_typ.                               % Store Doubleword IAS

i_LDFSR : loadg_typ.         % Load Floating-point State Register
i_LDCSR : loadg_typ.         % Load Coprocessor State Register
i_STFSR : storeg_typ.        % Store Floating-point State Register
i_STCSR : storeg_typ.        % Store Coprocessor State Register
i_STDFQ : storeg_typ.        % Store Double Floating-point
                                    % deferred-trap Queue (**)
i_STDCQ : storeg_typ.        % Store Double Coprocessor
                                    % deferred-trap Queue (**)
i_RDY =                      % Read Y Register
  [rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (not (wry_in_progress? r)) and
    (upd_ireg r rd (get_ireg r y_reg) r') and (_eq_mem m m').

rd_instr_typ = tnum -> tm instr.

i_RDPSR : rd_instr_typ.         % Read Processor State Register (**)
i_RDWIM : rd_instr_typ.         % Read Window Invalid Mask Register (**)
i_RDTBR : rd_instr_typ.         % Read Trap Base Register (**)

i_WRY : tnum -> tm reg_or_imm -> tm instr =          % Write Y Register
 [rs1 : tnum][reg_imm : tm reg_or_imm]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exists3 num num registers [v : tnum][xor_v : tnum][r'' : tregs]
    (load_reg_imm r reg_imm v) and (xor_oper (get_ireg r rs1) v xor_v) and
    (upd_ireg r y_reg xor_v r'') and (set_wry r'' r')) and
   (_eq_mem m m').

rs1_reg_imm_typ : type = tnum -> tm reg_or_imm -> tm instr.

i_WRPSR : rs1_reg_imm_typ.      % Write PSR (**)
i_WRWIM : rs1_reg_imm_typ.      % Write Window Invalid Mask Reg (**)
i_WRTBR : rs1_reg_imm_typ.      % Write Trap Base Register (**)
i_RDASR : tnum -> tnum -> tm instr. % Read Ancillary State Register (***)

i_WRASR : tnum -> tm reg_or_imm -> tnum -> tm instr. % Write ASR (***)
i_STBAR : tm instr.                % Store Barrier

alu_typ = tnum -> tm reg_or_imm -> tnum -> tm instr.

% This definition computes the result of an alu operation based on
% whether or not a carry forward was specified.
compute_with_carry =
 [x : tform][func : alu_fun][r : tregs][rs1 : tnum][v : tnum][v' : tnum]
  if x (_exs_n2 [d : tnum][ires : tnum]
        (icc_c? d (get_ireg r icc)) and
        (app_alu func (get_ireg r rs1) v ires) and (app_alu func ires d v'))
       (func (get_ireg r rs1) v v').

% A condition-code function takes two operands and the result, and
% decides whether the corresponding cc should be set or not.
cc_fun = tnum -> tnum -> tnum -> tform.

% the cc_fun to set the cc to zero
%abbrev
cc_zero : cc_fun = [_ : tnum][_ : tnum][_ : tnum] false.

% The following predicates compute V and C condition codes for add instruction.
add_overflow : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  _exs_n3 [b1 : tnum][b2 : tnum][b3 : tnum]
   sign_bit? b1 w1 and sign_bit? b2 w2 and sign_bit? b3 res and
   eqn b1 b2 and not (eqn b1 b3).

add_carry : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  negative? w1 and negative? w2 or
  positive? res and (negative? w1 or negative? w2).

% The following predicates compute V and C condition codes for sub instruction.
sub_overflow : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  _exs_n3 [b1 : tnum][b2 : tnum][b3 : tnum]
   sign_bit? b1 w1 and sign_bit? b2 w2 and sign_bit? b3 res and
   not (eqn b1 b2) and not (eqn b1 b3).

sub_carry : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  positive? w1 and negative? w2 or
  negative? res and (positive? w1 or negative? w2).

% Here the processor state register is updated after an alu instruction.
compute_new_icc : tnum -> tnum -> tnum -> cc_fun -> cc_fun -> tnum -> tform =
[w1 : tnum][w2 : tnum][res : tnum][v_fun : cc_fun][c_fun : cc_fun][vcc' : tnum]
 _exs_n3 [n : tnum][z : tnum][v : tnum] _exs_n [c : tnum]
  (if (negative? res)           (eqn n eight) (eqn n zero)) and
  (if (zero? res)               (eqn z four)  (eqn z zero)) and
  (if (app_alu v_fun w1 w2 res) (eqn v two)   (eqn v zero)) and
  (if (app_alu c_fun w1 w2 res) (eqn c one)   (eqn c zero)) and
  (eqn vcc' (plus n (plus z (plus v c)))).

% This definition implements the semantics of any alu operation (where
% any is as defined in "sparc/instr_sem.elf").  It relates the machine
% state (r, m) before the instruction occured to the state (r', m') at
% the end of the instruction.
i_aluxcc_aux : cc_fun -> cc_fun -> tform -> tform -> alu_fun -> alu_typ =
 [v_fun : cc_fun][c_fun : cc_fun][x : tform][cc : tform][func : alu_fun]
  [rs1 : tnum][reg_imm : tm reg_or_imm][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [v : tnum][v' : tnum][vcc' : tnum] _exs_r [r'' : tregs]
      (load_reg_imm r reg_imm v) and
      (compute_with_carry x func r rs1 v v') and
      (if cc (compute_new_icc (get_ireg r rs1) v v' v_fun c_fun vcc' and
              upd_icc r vcc' r'')
	     (_eq_regs r r'')) and
      (upd_ireg r'' rd v' r')) and
    (_eq_mem m m').

i_aluxcc : tform -> tform -> alu_fun -> alu_typ = i_aluxcc_aux cc_zero cc_zero.
i_aluxcc_x : tform -> alu_fun -> alu_typ = i_aluxcc true.
i_aluxcc_no_x : tform -> alu_fun -> alu_typ = i_aluxcc false.

mul_unsigned32->64 : tnum -> tnum -> tnum -> tform =
 [v1 : tnum][v2 : tnum][w : tnum] eqn w (times v1 v2).

mul_signed32->64 : tnum -> tnum -> tnum -> tform =
 [v1 : tnum][v2 : tnum][w : tnum]
  (_exs_n3 [s1 : tnum][s2 : tnum][v1' : tnum] _exs_n2 [v2' : tnum][res : tnum]
   (sign_bit? s1 v1) and (sign_bit? s2 v2) and
   (if (eqn s1 one) (neg_2s_comp_32 v1 v1') (eqn v1' v1)) and
   (if (eqn s2 one) (neg_2s_comp_32 v2 v2') (eqn v2' v2)) and
   (mul_unsigned32->64 v1' v2' res) and
   (if (not (eqn s1 s2)) (neg_2s_comp_32 res w) (eqn w res))).

i_multiply : tform -> alu_fun -> alu_typ =
 [cc : tform][fun : alu_fun][rs1 : tnum][reg_imm : tm reg_or_imm][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [v1 : tnum][v2 : tnum][res : tnum]
     _exs_n2 [res1 : tnum][res2 : tnum] _exs_r [r'' : tregs]
     (eqn v1 (get_ireg r rs1)) and (load_reg_imm r reg_imm v2) and
     (app_alu fun v1 v2 res) and
     (_rbits 0 31 res1 res) and (_rbits 32 63 res2 res) and
     (if cc (_exs_n2 [n : tnum][z : tnum]
             (if (negative? res1) (eqn n eight) (eqn n zero)) and
             (if (zero? res1) (eqn z four) (eqn z zero)) and
             (upd_icc r (plus n z) r''))
            (_eq_regs r r'')) and
     (upd_ireg2 r'' rd res1 y_reg res2 r')) and
   (_eq_mem m m').

i_multiply_cc : alu_fun -> alu_typ = i_multiply true.
i_multiply_no_cc : alu_fun -> alu_typ = i_multiply false.

div_neg_res_overflow_method : tm form.

div_alu_typ = tnum -> tnum -> tnum -> tnum -> tform.

div_unsigned64->32 : div_alu_typ =
 [x1 : tnum][x2 : tnum][w : tnum][v : tnum]
  (_exs_n2 [quo : tnum][rem : tnum]
   (_divide_mod x1 x2 quo rem) and
   (if ((geq quo pow2_32) and (eqn rem (pred x2)))
       ((eqn v two) and (eqn w (pred pow2_32)))
       (eqn v zero) and (bits_0_31 w quo))).

div_signed64->32 : div_alu_typ =
 [x1 : tnum][x2 : tnum][w : tnum][v : tnum]
  (_exs_n2 [s1 : tnum][s2 : tnum] _exs_n2 [x1' : tnum][x2' : tnum]
   (_exs_n3 [quo : tnum][rem : tnum][quo_pos : tnum]
    _exs_n2 [rem_pos : tnum][quo_2s : tnum]
   (_rbits 63 63 s1 x1) and (sign_bit? s2 x2) and
   (if (eqn s1 one) (neg_2s_comp_64 x1 x1') (eqn x1' x1)) and
   (if (eqn s2 one) (neg_2s_comp_32 x2 x2') (eqn x2' x2)) and
   (_divide_mod x1' x2' quo_pos rem_pos) and
   (if (eqn s1 s2) ((eqn quo quo_pos) and (eqn quo_2s quo_pos))
                  ((eqn quo (neg quo_pos)) and
                   (neg_2s_comp_64 quo quo_2s))) and
   (if (eqn s1 zero) (eqn rem rem_pos)
                    (eqn rem (neg rem_pos))) and
   (if ((geq quo pow2_31) and (eqn rem (pred x2')))
      ((eqn v two) and (eqn w (pred pow2_31)))
      (if (leq quo (neg pow2_31))
        (if ((div_neg_res_overflow_method and (eqn rem (neg (pred x2')))) or
               (not div_neg_res_overflow_method and (eqn rem zero)))
           ((eqn v two) and (eqn w (neg pow2_31)))
           ((eqn v zero) and (bits_0_31 w quo_2s)))
         ((eqn v zero) and (bits_0_31 w quo_2s)))))).

i_divide : tform -> div_alu_typ -> tnum -> tm reg_or_imm -> tnum -> tm instr =
[cc : tform][fun : div_alu_typ][rs1 : tnum][reg_imm : tm reg_or_imm][rd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exs_n3 [v1 : tnum][v2 : tnum][v3 : tnum]
    _exists2 num registers [res : tnum][r'' : tregs]
    _exs_n3 [n : tnum][z : tnum][v : tnum]
    _exs_n  [y: tnum]
     (if (wry_in_progress? r) (_is_word y) (eqn y (get_ireg r y_reg))) and
     (eqn v1 (get_ireg r rs1)) and (load_reg_imm r reg_imm v2) and
     (eqn v3 (plus v1 (times pow2_32 y))) and
     (fun v3 v2 res v) and
     (if cc ((if (negative? res) (eqn n eight) (eqn n zero)) and
             (if (zero? res) (eqn z four) (eqn z zero)) and
             (upd_icc r (plus n (plus z v)) r''))
            (_eq_regs r r'')) and
     (upd_ireg r'' rd res r')) and
   (_eq_mem m m').

i_divide_cc = i_divide true.
i_divide_no_cc = i_divide false.

% Logical
i_AND    = i_aluxcc_no_x false and_oper.  % And
i_ANDcc  = i_aluxcc_no_x true  and_oper.  % And and modify icc
i_ANDN   = i_aluxcc_no_x false andn_oper. % And not
i_ANDNcc = i_aluxcc_no_x true  andn_oper. % And not and modify icc
i_OR     = i_aluxcc_no_x false or_oper.   % Inclusive-Or
i_ORcc   = i_aluxcc_no_x true  or_oper.   % Inclusive-Or and modify icc
i_ORN    = i_aluxcc_no_x false orn_oper.  % Inclusive-Or not
i_ORNcc  = i_aluxcc_no_x true  orn_oper.  % Inclusive-Or not and modify icc
i_XOR    = i_aluxcc_no_x false xor_oper.  % Exclusive-Or
i_XORcc  = i_aluxcc_no_x true  xor_oper.  % Exclusive-Or and modify icc
i_XNOR   = i_aluxcc_no_x false xnor_oper. % Exclusive-NOr
i_XNORcc = i_aluxcc_no_x true  xnor_oper. % Exclusive-NOr and modify icc

% Shift
i_SLL = i_aluxcc_no_x false shift_ll_oper.     % Shift Left Logical
i_SRL = i_aluxcc_no_x false shift_rl_oper.     % Shift Right Logical
i_SRA = i_aluxcc_no_x false shift_ra_oper.     % Shift Right Arithmetic

% Arith
i_ADD     = i_aluxcc_no_x false _plus_mod32.  % Add
                                                  % Add and modify icc
i_ADDcc   = i_aluxcc_aux add_overflow add_carry false true _plus_mod32.
i_ADDX    = i_aluxcc_x false _plus_mod32.     % Add with Carry
                                               % Add with Carry and modify icc
i_ADDXcc  = i_aluxcc_aux add_overflow add_carry true  true _plus_mod32.

i_TADDcc   : alu_typ.            % Tagged Add and modify icc
i_TADDccTV : alu_typ.            % Tagged Add, modify icc and trap on overflow

i_SUB    = i_aluxcc_no_x false _minus_mod32.  % Subtract
                                                  % Subtract and modify icc
i_SUBcc  = i_aluxcc_aux sub_overflow sub_carry false true _minus_mod32.

i_SUBX   = i_aluxcc_x false _minus_mod32.   % Subtract with Carry
                                           % Subtract with Carry and modify icc
i_SUBXcc = i_aluxcc_aux sub_overflow sub_carry true true _minus_mod32.

i_TSUBcc   : alu_typ.           % Tagged Subtract and mod icc
i_TSUBccTV : alu_typ.           % Tagged Subtract, mod icc and trap on overflow

i_MULScc : alu_typ.             % Multiply step and modify icc

i_UMUL    = i_multiply_no_cc mul_unsigned32->64.  % U Int Mult
i_SMUL    = i_multiply_no_cc mul_signed32->64.    % S Int mult
i_UMULcc  = i_multiply_cc    mul_unsigned32->64.  % U Int Mult and w/ icc
i_SMULcc  = i_multiply_cc    mul_signed32->64.    % S Int mult w/ icc
i_UDIV    = i_divide_no_cc   div_unsigned64->32.  % U Int Div
i_SDIV    = i_divide_no_cc   div_signed64->32.    % S Int Div
i_UDIVcc  = i_divide_cc      div_unsigned64->32.  % U Int Div w/ icc
i_SDIVcc  = i_divide_cc      div_signed64->32.    % S Int Div w/ icc

i_SAVE    : alu_typ.                              % Save caller's window
i_RESTORE : alu_typ.                              % Restore caller's window

branch_typ = tnum -> tnum -> tm instr.

comp_btarget : tnum -> tnum -> tnum -> tform =
 [loc : tnum][disp : tnum][target : tnum]
  _exs_n2 [d1 : tnum][d2 : tnum] (sign_ext (const 21) disp d1) and
                                 (_times_mod32 four d1 d2) and
                                 (_plus_mod32 loc d2 target).

annul_instr : tregs -> tregs -> tform =
 [r : tregs][r' : tregs]
 _exists num [new_npc: tm num]
    _plus_mod32 (get_reg r npc) instr_size new_npc and
    updn2 r pc (get_ireg r npc) npc new_npc r'.

annul? : tnum -> tform = [x : tnum] (eqn x one).

branch_aux =
 [init_cond : tregs -> tform][get_cc : tregs -> tnum]
 [ba : tform][comp : tnum -> tform][a : tnum][disp : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (init_cond r) and
    (_exs_r [r''' : tregs]
     (if (app1_pred comp (get_cc r))
         (_exists2 num registers [target : tnum][r'' : tregs]
           (comp_btarget (get_ireg r opc) disp target) and
           (updn r npc target r'') and
           (if (ba and annul? a) (annul_instr r'' r''')
                                   (_eq_regs r'' r''')))
         (if (annul? a) (annul_instr r r''')
                          (_eq_regs r r'''))) and
     (if ba (_eq_regs r''' r')
            (set_cbr r''' r'))) and
    (_eq_mem m m').

i_init_cond = [r : tregs] not (cbr_in_progress? r).
f_init_cond = [r : tregs] not (cbr_in_progress? r) and
                          not (cmpfcc_in_progress? r).

i_ibranch : tform -> (tnum -> tform) -> branch_typ =
 branch_aux i_init_cond [r : tregs] (get_ireg r icc).

i_fbranch : tform -> (tnum -> tform) -> branch_typ =
 branch_aux f_init_cond [r : tregs] (get_ireg r fcc).

i_cbranch  : (tnum -> tform) -> branch_typ.

cnd_bn   = strictify_num false.
cnd_be   = [vcc : tnum] (icc_z vcc).
cnd_ble  = [vcc : tnum] (icc_z vcc) or ((icc_n vcc) xor (icc_v vcc)).
cnd_bl   = [vcc : tnum] (icc_n vcc) xor (icc_v vcc).
cnd_bleu = [vcc : tnum] (icc_c vcc) or (icc_z vcc).
cnd_bcs  = [vcc : tnum] (icc_c vcc).
cnd_bneg = [vcc : tnum] (icc_n vcc).
cnd_bvs  = [vcc : tnum] (icc_v vcc).
cnd_ba   = strictify_num true.
cnd_bne  = [vcc : tnum] not (icc_z vcc).
cnd_bg   = [vcc : tnum] not ((icc_z vcc) or ((icc_n vcc) xor (icc_v vcc))).
cnd_bge  = [vcc : tnum] not ((icc_n vcc) xor (icc_v vcc)).
cnd_bgu  = [vcc : tnum] not ((icc_c vcc) or (icc_z vcc)).
cnd_bcc  = [vcc : tnum] not (icc_c vcc).
cnd_bpos = [vcc : tnum] not (icc_n vcc).
cnd_bvc  = [vcc : tnum] not (icc_v vcc).

nrBranch = i_ibranch false.  % Normal branch i.e. not a ba
baBranch = i_ibranch true.   % A ba branch - annul behavior differs

i_BN   = nrBranch cnd_bn.    % Branch Never
i_BE   = nrBranch cnd_be.    % Branch on Equal
i_BLE  = nrBranch cnd_ble.   % Branch on Less or Equal
i_BL   = nrBranch cnd_bl.    % Branch on Less
i_BLEU = nrBranch cnd_bleu.  % Branch on Less or Equal Unsigned
i_BCS  = nrBranch cnd_bcs.   % Branch on Carry Set (Less than, Unsigned)
i_BNEG = nrBranch cnd_bneg.  % Branch on Negative
i_BVS  = nrBranch cnd_bvs.   % Branch on Overflow Set
i_BA   = baBranch cnd_ba.    % Branch Always - the annul behavior
                             % is different for this instruction
i_BNE  = nrBranch cnd_bne.   % Branch on Not Equal
i_BG   = nrBranch cnd_bg.    % Branch on Greater
i_BGE  = nrBranch cnd_bge.   % Branch on Greater or Equal
i_BGU  = nrBranch cnd_bgu.   % Branch on Greater Unsigned
i_BCC  = nrBranch cnd_bcc.   % Branch on Carry Clear (Greater or eq Unsigned)
i_BPOS = nrBranch cnd_bpos.  % Branch on Positive
i_BVC  = nrBranch cnd_bvc.   % Branch on Overflow Set

% Floating point
cnd_fbn   = strictify_num false.
cnd_fbne  = [fsr : tnum] (fcc_l fsr) or (fcc_g fsr) or (fcc_u fsr).
cnd_fblg  = [fsr : tnum] (fcc_l fsr) or (fcc_g fsr).
cnd_fbul  = [fsr : tnum] (fcc_l fsr) or (fcc_u fsr).
cnd_fbl   = [fsr : tnum] (fcc_l fsr).
cnd_fbug  = [fsr : tnum] (fcc_g fsr) or (fcc_u fsr).
cnd_fbg   = [fsr : tnum] (fcc_g fsr).
cnd_fbu   = [fsr : tnum] (fcc_u fsr).
cnd_fba   = strictify_num true.
cnd_fbe   = [fsr : tnum] (fcc_e fsr).
cnd_fbue  = [fsr : tnum] (fcc_u fsr) or (fcc_e fsr).
cnd_fbge  = [fsr : tnum] (fcc_e fsr) or (fcc_g fsr).
cnd_fbuge = [fsr : tnum] (fcc_e fsr) or (fcc_g fsr) or (fcc_u fsr).
cnd_fble  = [fsr : tnum] (fcc_l fsr) or (fcc_e fsr).
cnd_fbule = [fsr : tnum] (fcc_e fsr) or (fcc_l fsr) or (fcc_u fsr).
cnd_fbo   = [fsr : tnum] (fcc_e fsr) or (fcc_l fsr) or (fcc_g fsr).

f_nrBranch = i_fbranch false.    % Normal branch i.e. not a ba
f_baBranch = i_fbranch true.     % A ba branch - annul behavior differs

i_FBN   = f_nrBranch cnd_fbn.    % Branch Never
i_FBNE  = f_nrBranch cnd_fbne.   % Branch on Not Equal
i_FBLG  = f_nrBranch cnd_fblg.   % Branch on Less or Greater
i_FBUL  = f_nrBranch cnd_fbul.   % Branch on Unordered or Less
i_FBL   = f_nrBranch cnd_fbl.    % Branch on Less
i_FBUG  = f_nrBranch cnd_fbug.   % Branch on Unordered or Greater
i_FBG   = f_nrBranch cnd_fbg.    % Branch on Greater
i_FBU   = f_nrBranch cnd_fbu.    % Branch on Unordered
i_FBA   = f_baBranch cnd_fba.    % Branch Always -- the annul behavior
                                 % is different for this instruction
i_FBE   = f_nrBranch cnd_fbe.    % Branch on Equal
i_FBUE  = f_nrBranch cnd_fbue.   % Branch on Unordered or Equal
i_FBGE  = f_nrBranch cnd_fbge.   % Branch on Greater or Equal
i_FBUGE = f_nrBranch cnd_fbuge.  % Branch on Unordered or Greater or Equal
i_FBLE  = f_nrBranch cnd_fble.   % Branch on Less or Equal
i_FBULE = f_nrBranch cnd_fbule.  % Branch on Unordered or Less or Equal
i_FBO   = f_nrBranch cnd_fbo.    % Branch on Unordered

always_false = strictify_num false.

i_CBN    = i_cbranch always_false.
i_CB123  = i_cbranch always_false.
i_CB12   = i_cbranch always_false.
i_CB13   = i_cbranch always_false.
i_CB1    = i_cbranch always_false.
i_CB23   = i_cbranch always_false.
i_CB2    = i_cbranch always_false.
i_CB3    = i_cbranch always_false.
i_CBA    = i_cbranch always_false.
i_CB0    = i_cbranch always_false.
i_CB03   = i_cbranch always_false.
i_CB02   = i_cbranch always_false.
i_CB023  = i_cbranch always_false.
i_CB01   = i_cbranch always_false.
i_CB013  = i_cbranch always_false.
i_CB012  = i_cbranch always_false.

i_CALL = [disp : tnum]                            % Call and Link
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (not (cbr_in_progress? r)) and
   (updn2 r fifteen (get_ireg r opc) npc (times four disp) r') and
   (_eq_mem m m').

% Get a floating point value from the register bank
get_float32 = get_freg.
get_float64 = [r : tregs][fs2 : tnum]
 mk_float64 (get_freg r fs2) (get_freg r (succ fs2)).

get_float128 = [r : tregs][fs2 : tnum]
 mk_float128 (get_freg r fs2) (get_freg r (succ fs2))
             (get_freg r (plus fs2 two)) (get_freg r (plus fs2 three)).

% Update the floating point register, and declare
% that there was no memory change
upd_freg32_no_mem_change =
 [r : tregs][fd : tnum][v : flt32][r' : tregs][m : tmem][m' : tmem]
  (upd_freg r fd v r') and (_eq_mem m m').

% Update a 64 bit floating point registers, and declare
% that there was no memory change
upd_freg64_no_mem_change =
 [r : tregs][fd : tnum][v : flt64][r' : tregs][m : tmem][m' : tmem]
  (even? fd) and
  (_exs_n2 [v1 : tnum][v2 : tnum]
   (_eq o_flt64 v (mk_float64 v1 v2)) and
   (upd_freg2 r fd v1 (succ fd) v2 r')) and
  (_eq_mem m m').

% Update a 128 bit floating point registers, and declare
% that there was no memory change
upd_freg128_no_mem_change =
 [r : tregs][fd : tnum][v : flt128][r' : tregs][m : tmem][m' : tmem]
  (mult4? fd) and
  (_exs_n2 [v1 : tnum][v2 : tnum] _exs_n2 [v3 : tnum][v4 : tnum]
   (_eq o_flt128 v (mk_float128 v1 v2 v3 v4)) and
   (upd_freg4 r fd v1 (succ fd) v2 (plus fd two) v3 (plus fd three) v4 r')) and
  (_eq_mem m m').

% Unary floating point operations
float_unary_op_32 = float_unary_op o_flt32 true_fn get_float32.

float_unary_op_32->32  = float_unary_op_32 o_flt32  upd_freg32_no_mem_change.
float_unary_op_32->64  = float_unary_op_32 o_flt64  upd_freg64_no_mem_change.
float_unary_op_32->128 = float_unary_op_32 o_flt128 upd_freg128_no_mem_change.

float_unary_op_64 = float_unary_op o_flt64 even? get_float64.

float_unary_op_64->32  = float_unary_op_64 o_flt32 upd_freg32_no_mem_change.
float_unary_op_64->64  = float_unary_op_64 o_flt64 upd_freg64_no_mem_change.
float_unary_op_64->128 = float_unary_op_64 o_flt128 upd_freg128_no_mem_change.

float_unary_op_128 = float_unary_op o_flt128 mult4? get_float128.

float_unary_op_128->32 = float_unary_op_128 o_flt32 upd_freg32_no_mem_change.
float_unary_op_128->64 = float_unary_op_128 o_flt64 upd_freg64_no_mem_change.
float_unary_op_128->128 =
 float_unary_op_128 o_flt128 upd_freg128_no_mem_change.

i_FMOVs  = float_unary_op_32->32 (_eq o_flt32).     % Move
i_FNEGs  = float_unary_op_32->32 float32_neg.       % Negate
i_FABSs  = float_unary_op_32->32 float32_abs.       % Absolute Value
i_FSQRTs = float_unary_op_32->32 float32_sqrt.      % Square Root Single

i_FSQRTd = float_unary_op_64->64 float64_sqrt.      % Square Root Double
i_FSQRTq = float_unary_op_128->128 float128_sqrt.   % Square Root Quad

i_FiTOs = float_unary_op_32->32 int32->float32.     % Convert Integer to Single
i_FsTOi = float_unary_op_32->32 float32->int32.     % Convert Single to Integer

i_FiTOd = float_unary_op_32->64 int32->float64.     % Convert Integer to Double

i_FsTOd = float_unary_op_32->64 float32->float64.   % Convert Single to Double

i_FiTOq = float_unary_op_32->128 int32->float128.   % Convert Integer to Quad
i_FsTOq = float_unary_op_32->128 float32->float128. % Convert Single to Quad

i_FdTOi = float_unary_op_64->32 float64->int32.     % Convert Double to Integer
i_FdTOs = float_unary_op_64->32 float64->float32.   % Convert Double to Single

i_FqTOs = float_unary_op_128->32 float128->float32. % Convert Quad to Single
i_FqTOi = float_unary_op_128->32 float128->int32.   % Convert Quad to Integer

i_FqTOd = float_unary_op_128->64 float128->float64. % Convert Quad to Double
i_FdTOq = float_unary_op_64->128 float64->float128. % Convert Double to Quad

% Binary floating point operations
float_bin_op_32 = float_binary_op o_flt32 true_fn get_float32.

float_bin_op_32->32 = float_bin_op_32 o_flt32 upd_freg32_no_mem_change.
float_bin_op_32->64 = float_bin_op_32 o_flt64 upd_freg64_no_mem_change.

float_bin_op_64 = float_binary_op o_flt64 even? get_float64.

float_bin_op_64->64  = float_bin_op_64 o_flt64 upd_freg64_no_mem_change.
float_bin_op_64->128 = float_bin_op_64 o_flt128 upd_freg128_no_mem_change.

float_bin_op_128 = float_binary_op o_flt128 mult4? get_float128.
float_bin_op_128->128 = float_bin_op_128 o_flt128 upd_freg128_no_mem_change.

i_FADDs = float_bin_op_32->32 float32_add.     % Add Single
i_FSUBs = float_bin_op_32->32 float32_sub.     % Subtract Single
i_FMULs = float_bin_op_32->32 float32_mul.     % Multiply Single
i_FDIVs = float_bin_op_32->32 float32_div.     % Divide Single

i_FADDd = float_bin_op_64->64 float64_add.     % Add Double
i_FSUBd = float_bin_op_64->64 float64_sub.     % Subtract Double
i_FMULd = float_bin_op_64->64 float64_mul.     % Multiply Double
i_FDIVd = float_bin_op_64->64 float64_div.     % Divide Double

i_FADDq = float_bin_op_128->128 float128_add.  % Add Quad
i_FSUBq = float_bin_op_128->128 float128_sub.  % Subtract Quad
i_FMULq = float_bin_op_128->128 float128_mul.  % Multiply Quad
i_FDIVq = float_bin_op_128->128 float128_div.  % Divide Quad

i_FsMULd = float_bin_op_32->64  float32->64_mul.  % Multiply Single to Double
i_FdMULq = float_bin_op_64->128 float64->128_mul. % Multiply Double to Quad

% The Compare instructions.
f_compare =
 [T : tp]
 [getf : tregs -> tnum -> tm T][ceq : tm T -> tm T -> tform]
 [clt : tm T -> tm T -> tform][cgt : tm T -> tm T -> tform]
 [ex  : tform][fs1 : tnum][fs2 : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exists3 T T num [v1 : tm T][v2 : tm T][fccv : tnum] _exs_r [r'' : tregs]
     (_eq T v1 (app_get_t T getf r fs1)) and
     (_eq T v2 (app_get_t T getf r fs2)) and 
     (if (ceq v1 v2) (eqn fccv zero)
        (if (clt v1 v2) (eqn fccv one)
           (if (cgt v1 v2) (eqn fccv two)
              (eqn fccv three)))) and
     (not (ex and (eqn fccv three))) and
     (upd_fcc r fccv r'') and (set_cmpfcc r'' r')) and
    (_eq_mem m m').

f_compare32  = f_compare o_flt32 get_float32 float32_eq float32_lt float32_gt.
f_compare64  = f_compare o_flt64 get_float64 float64_eq float64_lt float64_gt.
f_compare128 = f_compare o_flt128 get_float128 float128_eq float128_lt
                                               float128_gt.

i_FCMPs  = f_compare32  false. % Compare Single
i_FCMPEs = f_compare32  true.  % Compare Single and Exception if Unordered
i_FCMPd  = f_compare64  false. % Compare Double
i_FCMPEd = f_compare64  true.  % Compare Double and Exception if Unordered
i_FCMPq  = f_compare128 false. % Compare Quad
i_FCMPEq = f_compare128 true.  % Compare Quad and Exception if Unordered

i_FLUSH : tm address_ -> tm instr.  % Flush Instruction Memory

i_JMPL = [addr : tm address_][rd : tnum]      % Jump and Link
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (not (cbr_in_progress? r)) and
   (_exs_n2 [target : tnum][offset : tnum]
    (load_address_align r addr target offset word_size) and
    (upd_ireg2 r rd (get_ireg r opc) npc target r')) and
   (_eq_mem m m').

i_RETT : tm address_ -> tm instr.  % Return from Trap

trap_oper = tnum.
tn   : trap_oper = const 0.
te   : trap_oper = const 1.
tle  : trap_oper = const 2.
tl   : trap_oper = const 3.
tleu : trap_oper = const 4.
tcs  : trap_oper = const 5.
tneg : trap_oper = const 6.
tvs  : trap_oper = const 7.
ta   : trap_oper = const 8.
tne  : trap_oper = const 9.
tg   : trap_oper = const 10.
tge  : trap_oper = const 11.
tgu  : trap_oper = const 12.
tcc  : trap_oper = const 13.
tpos : trap_oper = const 14.
tvc  : trap_oper = const 15.

trap : trap_oper -> tm address_ -> tm instr.

i_TN   = trap tn.    % Trap Never
i_TE   = trap te.    % Trap on Equal
i_TLE  = trap tle.   % Trap on Less or Equal
i_TL   = trap tl.    % Trap on Less
i_TLEU = trap tleu.  % Trap on Less or Equal Unsigned
i_TCS  = trap tcs.   % Trap on Carry Set (Less Than, Unsigned)
i_TNEG = trap tneg.  % Trap on Negative
i_TVS  = trap tvs.   % Trap on Overflow Set
i_TA   = trap ta.    % Trap Always
i_TNE  = trap tne.   % Trap on Not Equal
i_TG   = trap tg.    % Trap on Greater
i_TGE  = trap tge.   % Trap on Greater or Equal
i_TGU  = trap tgu.   % Trap on Greater Unsigned
i_TCC  = trap tcc.   % Trap on Carry Clear (Greater then or Equal, Unsigned)
i_TPOS = trap tpos.  % Trap on Positive
i_TVC  = trap tvc.   % Trap on Overflow Clear
                             % The unimplemented instruction
                             % used when returning a structure in a C program
i_UNIMP : tnum -> tm instr =   
 [imm : tnum] instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  app1_pred ([_ : tnum] false) imm.

i_SETHI =                          % Set High 22 bits of r Register
 [rd : tnum][val : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (upd_ireg r rd (times (const 1024) val) r') and (_eq_mem m m').

i_NOP = i_SETHI zero zero.
% Copyright (c) 2004 Princeton University
%	$Id: fields.elf,v 1.8 2004/04/22 10:49:20 appel Exp $

% 
% The encoding of the instruction fields.
% This is a machine generated file.  Do not edit!
% 
f_inst    : field_typ = _rbits 0 31.
f_op      : field_typ = _rbits 30 31.
f_disp30  : field_typ = _rbits 0 29.
f_rd      : field_typ = _rbits 25 29.
f_op2     : field_typ = _rbits 22 24.
f_imm22   : field_typ = _rbits 0 21.
f_a       : field_typ = _rbits 29 29.
f_cond    : field_typ = _rbits 25 28.
f_disp22  : field_typ = _rbits 0 21.
f_op3     : field_typ = _rbits 19 24.
f_rs1     : field_typ = _rbits 14 18.
f_i       : field_typ = _rbits 13 13.
f_asi     : field_typ = _rbits 5 12.
f_rs2     : field_typ = _rbits 0 4.
f_simm13  : field_typ = _rbits 0 12.
f_opf     : field_typ = _rbits 5 13.
f_fd      : field_typ = _rbits 25 29.
f_cd      : field_typ = _rbits 25 29.
f_fs1     : field_typ = _rbits 14 18.
f_fs2     : field_typ = _rbits 0 4.
f_rs1i    : field_typ = _rbits 14 18.
f_rdi     : field_typ = _rbits 25 29.
% Copyright (c) 2004 Princeton University
%	$Id: patterns.elf,v 1.9 2004/04/22 10:49:21 appel Exp $

% 
% The encoding of the instruction patterns.
% This is a machine generated file.  Do not edit!
% 

!!n : pat_typ -> pat_typ = _!! num.

p_TABLE_F2  : pat_typ = f_op (const 0).
p_CALL      : pat_typ = f_op (const 1).
p_TABLE_F3  : pat_typ = f_op (const 2).
p_TABLE_F4  : pat_typ = f_op (const 3).
p_UNIMP     : pat_typ = p_TABLE_F2 &&n f_op2 (const 0).
p_Bicc      : pat_typ = p_TABLE_F2 &&n f_op2 (const 2).
p_SETHI     : pat_typ = p_TABLE_F2 &&n f_op2 (const 4).
p_FBfcc     : pat_typ = p_TABLE_F2 &&n f_op2 (const 6).
p_CBccc     : pat_typ = p_TABLE_F2 &&n f_op2 (const 7).
p_ADD       : pat_typ = p_TABLE_F3 &&n f_op3 (const 0).
p_ADDcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 16).
p_TADDcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 32).
p_WRxxx     : pat_typ = p_TABLE_F3 &&n f_op3 (const 48).
p_AND       : pat_typ = p_TABLE_F3 &&n f_op3 (const 1).
p_ANDcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 17).
p_TSUBcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 33).
p_WRPSR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 49).
p_OR        : pat_typ = p_TABLE_F3 &&n f_op3 (const 2).
p_ORcc      : pat_typ = p_TABLE_F3 &&n f_op3 (const 18).
p_TADDccTV  : pat_typ = p_TABLE_F3 &&n f_op3 (const 34).
p_WRWIM     : pat_typ = p_TABLE_F3 &&n f_op3 (const 50).
p_XOR       : pat_typ = p_TABLE_F3 &&n f_op3 (const 3).
p_XORcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 19).
p_TSUBccTV  : pat_typ = p_TABLE_F3 &&n f_op3 (const 35).
p_WRTBR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 51).
p_SUB       : pat_typ = p_TABLE_F3 &&n f_op3 (const 4).
p_SUBcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 20).
p_MULScc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 36).
p_FPop1     : pat_typ = p_TABLE_F3 &&n f_op3 (const 52).
p_ANDN      : pat_typ = p_TABLE_F3 &&n f_op3 (const 5).
p_ANDNcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 21).
p_SLL       : pat_typ = p_TABLE_F3 &&n f_op3 (const 37).
p_FPop2     : pat_typ = p_TABLE_F3 &&n f_op3 (const 53).
p_ORN       : pat_typ = p_TABLE_F3 &&n f_op3 (const 6).
p_ORNcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 22).
p_SRL       : pat_typ = p_TABLE_F3 &&n f_op3 (const 38).
p_CPop1     : pat_typ = p_TABLE_F3 &&n f_op3 (const 54).
p_XNOR      : pat_typ = p_TABLE_F3 &&n f_op3 (const 7).
p_XNORcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 23).
p_SRA       : pat_typ = p_TABLE_F3 &&n f_op3 (const 39).
p_CPop2     : pat_typ = p_TABLE_F3 &&n f_op3 (const 55).
p_ADDX      : pat_typ = p_TABLE_F3 &&n f_op3 (const 8).
p_ADDXcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 24).
p_RDxxx     : pat_typ = p_TABLE_F3 &&n f_op3 (const 40).
p_JMPL      : pat_typ = p_TABLE_F3 &&n f_op3 (const 56).
p_RDPSR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 41).
p_RETT      : pat_typ = p_TABLE_F3 &&n f_op3 (const 57).
p_UMUL      : pat_typ = p_TABLE_F3 &&n f_op3 (const 10).
p_UMULcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 26).
p_RDWIM     : pat_typ = p_TABLE_F3 &&n f_op3 (const 42).
p_Ticc      : pat_typ = p_TABLE_F3 &&n f_op3 (const 58).
p_SMUL      : pat_typ = p_TABLE_F3 &&n f_op3 (const 11).
p_SMULcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 27).
p_RDTBR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 43).
p_FLUSH     : pat_typ = p_TABLE_F3 &&n f_op3 (const 59).
p_SUBX      : pat_typ = p_TABLE_F3 &&n f_op3 (const 12).
p_SUBXcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 28).
p_SAVE      : pat_typ = p_TABLE_F3 &&n f_op3 (const 60).
p_RESTORE   : pat_typ = p_TABLE_F3 &&n f_op3 (const 61).
p_UDIV      : pat_typ = p_TABLE_F3 &&n f_op3 (const 14).
p_UDIVcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 30).
p_SDIV      : pat_typ = p_TABLE_F3 &&n f_op3 (const 15).
p_SDIVcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 31).
p_WRASR     : pat_typ = p_WRxxx &&n !!n (f_rd (const 0)).
p_WRY       : pat_typ = p_WRxxx &&n f_rd (const 0).
p_RDASR     : pat_typ = p_RDxxx &&n !!n (f_rs1 (const 0)) &&n !!n (f_rd (const 0)).
p_RDY       : pat_typ = p_RDxxx &&n f_rs1 (const 0).
p_STBAR     : pat_typ = p_RDxxx &&n f_rs1 (const 15) &&n f_rd (const 0).
p_LD        : pat_typ = p_TABLE_F4 &&n f_op3 (const 0).
p_LDA       : pat_typ = p_TABLE_F4 &&n f_op3 (const 16).
p_LDF       : pat_typ = p_TABLE_F4 &&n f_op3 (const 32).
p_LDC       : pat_typ = p_TABLE_F4 &&n f_op3 (const 48).
p_LDUB      : pat_typ = p_TABLE_F4 &&n f_op3 (const 1).
p_LDUBA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 17).
p_LDFSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 33).
p_LDCSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 49).
p_LDUH      : pat_typ = p_TABLE_F4 &&n f_op3 (const 2).
p_LDUHA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 18).
p_LDD       : pat_typ = p_TABLE_F4 &&n f_op3 (const 3).
p_LDDA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 19).
p_LDDF      : pat_typ = p_TABLE_F4 &&n f_op3 (const 35).
p_LDDC      : pat_typ = p_TABLE_F4 &&n f_op3 (const 51).
p_ST        : pat_typ = p_TABLE_F4 &&n f_op3 (const 4).
p_STA       : pat_typ = p_TABLE_F4 &&n f_op3 (const 20).
p_STF       : pat_typ = p_TABLE_F4 &&n f_op3 (const 36).
p_STC       : pat_typ = p_TABLE_F4 &&n f_op3 (const 52).
p_STB       : pat_typ = p_TABLE_F4 &&n f_op3 (const 5).
p_STBA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 21).
p_STFSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 37).
p_STCSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 53).
p_STH       : pat_typ = p_TABLE_F4 &&n f_op3 (const 6).
p_STHA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 22).
p_STDFQ     : pat_typ = p_TABLE_F4 &&n f_op3 (const 38).
p_STDCQ     : pat_typ = p_TABLE_F4 &&n f_op3 (const 54).
p_STD       : pat_typ = p_TABLE_F4 &&n f_op3 (const 7).
p_STDA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 23).
p_STDF      : pat_typ = p_TABLE_F4 &&n f_op3 (const 39).
p_STDC      : pat_typ = p_TABLE_F4 &&n f_op3 (const 55).
p_LDSB      : pat_typ = p_TABLE_F4 &&n f_op3 (const 9).
p_LDSBA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 25).
p_LDSH      : pat_typ = p_TABLE_F4 &&n f_op3 (const 10).
p_LDSHA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 26).
p_LDSTUB    : pat_typ = p_TABLE_F4 &&n f_op3 (const 13).
p_LDSTUBA   : pat_typ = p_TABLE_F4 &&n f_op3 (const 29).
p_SWAP_DOT  : pat_typ = p_TABLE_F4 &&n f_op3 (const 15).
p_SWAPA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 31).
p_FMOVs     : pat_typ = p_FPop1 &&n f_opf (const 1).
p_FNEGs     : pat_typ = p_FPop1 &&n f_opf (const 5).
p_FABSs     : pat_typ = p_FPop1 &&n f_opf (const 9).
p_FSQRTs    : pat_typ = p_FPop1 &&n f_opf (const 41).
p_FSQRTd    : pat_typ = p_FPop1 &&n f_opf (const 42).
p_FSQRTq    : pat_typ = p_FPop1 &&n f_opf (const 43).
p_FiTOs     : pat_typ = p_FPop1 &&n f_opf (const 196).
p_FdTOs     : pat_typ = p_FPop1 &&n f_opf (const 198).
p_FqTOs     : pat_typ = p_FPop1 &&n f_opf (const 199).
p_FiTOd     : pat_typ = p_FPop1 &&n f_opf (const 200).
p_FsTOd     : pat_typ = p_FPop1 &&n f_opf (const 201).
p_FqTOd     : pat_typ = p_FPop1 &&n f_opf (const 203).
p_FiTOq     : pat_typ = p_FPop1 &&n f_opf (const 204).
p_FsTOq     : pat_typ = p_FPop1 &&n f_opf (const 205).
p_FdTOq     : pat_typ = p_FPop1 &&n f_opf (const 206).
p_FsTOi     : pat_typ = p_FPop1 &&n f_opf (const 209).
p_FdTOi     : pat_typ = p_FPop1 &&n f_opf (const 210).
p_FqTOi     : pat_typ = p_FPop1 &&n f_opf (const 211).
p_FADDs     : pat_typ = p_FPop1 &&n f_opf (const 65).
p_FADDd     : pat_typ = p_FPop1 &&n f_opf (const 66).
p_FADDq     : pat_typ = p_FPop1 &&n f_opf (const 67).
p_FSUBs     : pat_typ = p_FPop1 &&n f_opf (const 69).
p_FSUBd     : pat_typ = p_FPop1 &&n f_opf (const 70).
p_FSUBq     : pat_typ = p_FPop1 &&n f_opf (const 71).
p_FMULs     : pat_typ = p_FPop1 &&n f_opf (const 73).
p_FMULd     : pat_typ = p_FPop1 &&n f_opf (const 74).
p_FMULq     : pat_typ = p_FPop1 &&n f_opf (const 75).
p_FDIVs     : pat_typ = p_FPop1 &&n f_opf (const 77).
p_FDIVd     : pat_typ = p_FPop1 &&n f_opf (const 78).
p_FDIVq     : pat_typ = p_FPop1 &&n f_opf (const 79).
p_FsMULd    : pat_typ = p_FPop1 &&n f_opf (const 105).
p_FdMULq    : pat_typ = p_FPop1 &&n f_opf (const 110).
p_FCMPs     : pat_typ = p_FPop2 &&n f_opf (const 81).
p_FCMPEs    : pat_typ = p_FPop2 &&n f_opf (const 85).
p_FCMPd     : pat_typ = p_FPop2 &&n f_opf (const 82).
p_FCMPEd    : pat_typ = p_FPop2 &&n f_opf (const 86).
p_FCMPq     : pat_typ = p_FPop2 &&n f_opf (const 83).
p_FCMPEq    : pat_typ = p_FPop2 &&n f_opf (const 87).
p_BN        : pat_typ = p_Bicc &&n f_cond (const 0).
p_BE        : pat_typ = p_Bicc &&n f_cond (const 1).
p_BLE       : pat_typ = p_Bicc &&n f_cond (const 2).
p_BL        : pat_typ = p_Bicc &&n f_cond (const 3).
p_BLEU      : pat_typ = p_Bicc &&n f_cond (const 4).
p_BCS       : pat_typ = p_Bicc &&n f_cond (const 5).
p_BNEG      : pat_typ = p_Bicc &&n f_cond (const 6).
p_BVS       : pat_typ = p_Bicc &&n f_cond (const 7).
p_BA        : pat_typ = p_Bicc &&n f_cond (const 8).
p_BNE       : pat_typ = p_Bicc &&n f_cond (const 9).
p_BG        : pat_typ = p_Bicc &&n f_cond (const 10).
p_BGE       : pat_typ = p_Bicc &&n f_cond (const 11).
p_BGU       : pat_typ = p_Bicc &&n f_cond (const 12).
p_BCC       : pat_typ = p_Bicc &&n f_cond (const 13).
p_BPOS      : pat_typ = p_Bicc &&n f_cond (const 14).
p_BVC       : pat_typ = p_Bicc &&n f_cond (const 15).
p_FBN       : pat_typ = p_FBfcc &&n f_cond (const 0).
p_FBNE      : pat_typ = p_FBfcc &&n f_cond (const 1).
p_FBLG      : pat_typ = p_FBfcc &&n f_cond (const 2).
p_FBUL      : pat_typ = p_FBfcc &&n f_cond (const 3).
p_FBL       : pat_typ = p_FBfcc &&n f_cond (const 4).
p_FBUG      : pat_typ = p_FBfcc &&n f_cond (const 5).
p_FBG       : pat_typ = p_FBfcc &&n f_cond (const 6).
p_FBU       : pat_typ = p_FBfcc &&n f_cond (const 7).
p_FBA       : pat_typ = p_FBfcc &&n f_cond (const 8).
p_FBE       : pat_typ = p_FBfcc &&n f_cond (const 9).
p_FBUE      : pat_typ = p_FBfcc &&n f_cond (const 10).
p_FBGE      : pat_typ = p_FBfcc &&n f_cond (const 11).
p_FBUGE     : pat_typ = p_FBfcc &&n f_cond (const 12).
p_FBLE      : pat_typ = p_FBfcc &&n f_cond (const 13).
p_FBULE     : pat_typ = p_FBfcc &&n f_cond (const 14).
p_FBO       : pat_typ = p_FBfcc &&n f_cond (const 15).
p_CBN       : pat_typ = p_CBccc &&n f_cond (const 0).
p_CB123     : pat_typ = p_CBccc &&n f_cond (const 1).
p_CB12      : pat_typ = p_CBccc &&n f_cond (const 2).
p_CB13      : pat_typ = p_CBccc &&n f_cond (const 3).
p_CB1       : pat_typ = p_CBccc &&n f_cond (const 4).
p_CB23      : pat_typ = p_CBccc &&n f_cond (const 5).
p_CB2       : pat_typ = p_CBccc &&n f_cond (const 6).
p_CB3       : pat_typ = p_CBccc &&n f_cond (const 7).
p_CBA       : pat_typ = p_CBccc &&n f_cond (const 8).
p_CB0       : pat_typ = p_CBccc &&n f_cond (const 9).
p_CB03      : pat_typ = p_CBccc &&n f_cond (const 10).
p_CB02      : pat_typ = p_CBccc &&n f_cond (const 11).
p_CB023     : pat_typ = p_CBccc &&n f_cond (const 12).
p_CB01      : pat_typ = p_CBccc &&n f_cond (const 13).
p_CB013     : pat_typ = p_CBccc &&n f_cond (const 14).
p_CB012     : pat_typ = p_CBccc &&n f_cond (const 15).
p_TN        : pat_typ = p_Ticc &&n f_cond (const 0).
p_TE        : pat_typ = p_Ticc &&n f_cond (const 1).
p_TLE       : pat_typ = p_Ticc &&n f_cond (const 2).
p_TL        : pat_typ = p_Ticc &&n f_cond (const 3).
p_TLEU      : pat_typ = p_Ticc &&n f_cond (const 4).
p_TCS       : pat_typ = p_Ticc &&n f_cond (const 5).
p_TNEG      : pat_typ = p_Ticc &&n f_cond (const 6).
p_TVS       : pat_typ = p_Ticc &&n f_cond (const 7).
p_TA        : pat_typ = p_Ticc &&n f_cond (const 8).
p_TNE       : pat_typ = p_Ticc &&n f_cond (const 9).
p_TG        : pat_typ = p_Ticc &&n f_cond (const 10).
p_TGE       : pat_typ = p_Ticc &&n f_cond (const 11).
p_TGU       : pat_typ = p_Ticc &&n f_cond (const 12).
p_TCC       : pat_typ = p_Ticc &&n f_cond (const 13).
p_TPOS      : pat_typ = p_Ticc &&n f_cond (const 14).
p_TVC       : pat_typ = p_Ticc &&n f_cond (const 15).
% Copyright (c) 2004 Princeton University
%	$Id: oper_selectors.elf,v 1.7 2004/04/22 10:49:20 appel Exp $

% 
% The encoding of the instruction operator selectors.
% This is a machine generated file.  Do not edit!
% 
||2_r :
 (tm reg_or_imm -> tm num -> tform) -> (tm reg_or_imm -> tm num -> tform)
  -> tm reg_or_imm -> tm num -> tform = _||2 reg_or_imm num.

sel_imode : tm reg_or_imm -> tnum -> tform =
    fld1 reg_or_imm num f_simm13 (f_i (const 1)) inj_imode.

% sel_imode : tm reg_or_imm -> tnum -> tform =
%   [obj : tm reg_or_imm][word : tnum]
%     f_i (const 1) word and
%     _exs_n [g1200 : tnum] f_simm13 g1200 word and
%                           _eq reg_or_imm obj (inj_imode g1200).

sel_rmode : tm reg_or_imm -> tnum -> tform =
   fld1 reg_or_imm num f_rs2 (f_i (const 0)) inj_rmode.

% sel_rmode : tm reg_or_imm -> tnum -> tform =
%   [obj : tm reg_or_imm][word : tnum]
%    f_i (const 0) word and
%    _exs_n [g1201 : tnum] f_rs2 g1201 word and
%                          _eq reg_or_imm obj (inj_rmode g1201).

oper_reg_or_imm : tm reg_or_imm -> tnum -> tform =
  ||2_r sel_imode sel_rmode.

sel_generalA : tm address_ -> tnum -> tform =
   fld2 address_ num reg_or_imm f_rs1 oper_reg_or_imm true_fn inj_generalA.

% sel_generalA : tm address_ -> tnum -> tform =
%   [obj : tm address_][word : tnum]
%     _exists2 num reg_or_imm [g1202 : tnum][g1203 : tm reg_or_imm]
%      (f_rs1 g1202 &&n oper_reg_or_imm g1203) word and
%      _eq address_ obj (inj_generalA g1202 g1203).

oper_address_ : tm address_ -> tnum -> tform =
 [obj : tm address_][word : tnum] sel_generalA obj word.

sel_indexR : tm regaddr -> tnum -> tform =
   fld2 regaddr num num f_rs1 f_rs2 (f_i (const 0)) inj_indexR.

%  [obj : tm regaddr][word : tnum]
%    f_i (const 0) word and
%    _exs_n2 [g1204 : tnum][g1205 : tnum]
%     (f_rs1 g1204 &&n f_rs2 g1205) word and
%     _eq regaddr obj (inj_indexR g1204 g1205).

oper_regaddr : tm regaddr -> tnum -> tform =
 [obj : tm regaddr][word : tnum] sel_indexR obj word.

% Copyright (c) 2004 Princeton University
%	$Id: instructions.elf,v 1.15 2004/04/22 10:49:20 appel Exp $

% 
% The encoding of the instructions.
% This is a machine generated file.  Do not edit!
% 
aux_loadg = fld2 instr address_ num oper_address_ f_rd.

ins_loadg =
  aux_loadg p_LDSB i_LDSB ||2n aux_loadg p_LDSH i_LDSH ||2n
  aux_loadg p_LDUB i_LDUB ||2n aux_loadg p_LDUH i_LDUH ||2n
  aux_loadg p_LD i_LD ||2n aux_loadg p_LDSTUB i_LDSTUB ||2n
  aux_loadg p_SWAP_DOT i_SWAP_DOT ||2n
  aux_loadg p_LDFSR i_LDFSR ||2n aux_loadg p_LDCSR i_LDCSR.

ins_LDD = fld2 instr address_ num oper_address_ f_rd p_LDD i_LDD.

ins_LDF = fld2 instr address_ num oper_address_ f_fd p_LDF i_LDF.

ins_LDDF = fld2 instr address_ num oper_address_ f_fd p_LDDF i_LDDF.

ins_LDC = fld2 instr address_ num oper_address_ f_cd p_LDC i_LDC.

ins_LDDC = fld2 instr address_ num oper_address_ f_cd p_LDDC i_LDDC.

aux_storeg = fld2 instr num address_ f_rd oper_address_.

ins_storeg =
  aux_storeg p_STB i_STB ||2n aux_storeg p_STH i_STH ||2n
  aux_storeg p_ST i_ST ||2n aux_storeg p_STFSR i_STFSR ||2n
  aux_storeg p_STCSR i_STCSR ||2n aux_storeg p_STDFQ i_STDFQ ||2n
  aux_storeg p_STDCQ i_STDCQ.

ins_STD = fld2 instr num address_ f_rd oper_address_ p_STD i_STD.

ins_STF = fld2 instr num address_ f_fd oper_address_ p_STF i_STF.

ins_STDF = fld2 instr num address_ f_fd oper_address_ p_STDF i_STDF.

ins_STC = fld2 instr num address_ f_cd oper_address_ p_STC i_STC.

ins_STDC = fld2 instr num address_ f_cd oper_address_ p_STDC i_STDC.

aux_loada = fld3 instr address_ num num oper_regaddr f_asi f_rd.

ins_loada =
  aux_loada p_LDSBA i_LDSBA ||2n aux_loada p_LDSHA i_LDSHA ||2n
  aux_loada p_LDUBA i_LDUBA ||2n aux_loada p_LDUHA i_LDUHA ||2n
  aux_loada p_LDA i_LDA ||2n aux_loada p_LDSTUBA i_LDSTUBA ||2n
  aux_loada p_SWAPA i_SWAPA.

ins_LDDA = fld3 instr address_ num num oper_regaddr f_asi f_rd p_LDDA i_LDDA.

aux_storea = fld3 instr num address_ num f_rd oper_regaddr f_asi.

ins_storea =
  aux_storea p_STBA i_STBA ||2n aux_storea p_STHA i_STHA ||2n
  aux_storea p_STA i_STA.

ins_STDA = fld3 instr num address_ num f_rd oper_regaddr f_asi p_STDA i_STDA.

ins_LDFSR = aux_loadg p_LDFSR i_LDFSR.

ins_LDCSR = aux_loadg p_LDCSR i_LDCSR.

ins_STFSR = aux_storeg p_STFSR i_STFSR.

ins_STCSR = aux_storeg p_STCSR i_STCSR.

ins_STDFQ = aux_storeg p_STDFQ i_STDFQ.

ins_STDCQ = aux_storeg p_STDCQ i_STDCQ.

ins_RDY = fld1 instr num f_rd p_RDY i_RDY.

ins_RDPSR = fld1 instr num f_rd p_RDPSR i_RDPSR.

ins_RDWIM = fld1 instr num f_rd p_RDWIM i_RDWIM.

ins_RDTBR = fld1 instr num f_rd p_RDTBR i_RDTBR.

ins_WRY = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRY i_WRY.

ins_WRPSR = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRPSR i_WRPSR.

ins_WRWIM = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRWIM i_WRWIM.

ins_WRTBR = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRTBR i_WRTBR.

ins_RDASR = fld2 instr num num f_rs1 f_rd p_RDASR i_RDASR.

ins_WRASR = fld3 instr num reg_or_imm num f_rs1 oper_reg_or_imm f_rd p_WRASR i_WRASR.

ins_STBAR = fld0 instr p_STBAR i_STBAR.

aux_alu = fld3 instr num reg_or_imm num f_rs1 oper_reg_or_imm f_rd.

ins_alu =
  aux_alu p_AND i_AND ||2n aux_alu p_ANDcc i_ANDcc ||2n
  aux_alu p_ANDN i_ANDN ||2n aux_alu p_ANDNcc i_ANDNcc ||2n
  aux_alu p_OR i_OR ||2n aux_alu p_ORcc i_ORcc ||2n
  aux_alu p_ORN i_ORN ||2n aux_alu p_ORNcc i_ORNcc ||2n
  aux_alu p_XOR i_XOR ||2n aux_alu p_XORcc i_XORcc ||2n
  aux_alu p_XNOR i_XNOR ||2n aux_alu p_XNORcc i_XNORcc ||2n
  aux_alu p_SLL i_SLL ||2n aux_alu p_SRL i_SRL ||2n
  aux_alu p_SRA i_SRA ||2n aux_alu p_ADD i_ADD ||2n
  aux_alu p_ADDcc i_ADDcc ||2n aux_alu p_ADDX i_ADDX ||2n
  aux_alu p_ADDXcc i_ADDXcc ||2n aux_alu p_TADDcc i_TADDcc ||2n
  aux_alu p_TADDccTV i_TADDccTV ||2n aux_alu p_SUB i_SUB ||2n
  aux_alu p_SUBcc i_SUBcc ||2n aux_alu p_SUBX i_SUBX ||2n
  aux_alu p_SUBXcc i_SUBXcc ||2n aux_alu p_TSUBcc i_TSUBcc ||2n
  aux_alu p_TSUBccTV i_TSUBccTV ||2n aux_alu p_MULScc i_MULScc ||2n
  aux_alu p_UMUL i_UMUL ||2n aux_alu p_SMUL i_SMUL ||2n
  aux_alu p_UMULcc i_UMULcc ||2n aux_alu p_SMULcc i_SMULcc ||2n
  aux_alu p_UDIV i_UDIV ||2n aux_alu p_SDIV i_SDIV ||2n
  aux_alu p_UDIVcc i_UDIVcc ||2n aux_alu p_SDIVcc i_SDIVcc ||2n
  aux_alu p_SAVE i_SAVE ||2n aux_alu p_RESTORE i_RESTORE.

aux_branch = fld2 instr num num f_a f_disp22.

ins_branch =
  aux_branch p_BN i_BN ||2n aux_branch p_BE i_BE ||2n
  aux_branch p_BLE i_BLE ||2n aux_branch p_BL i_BL ||2n
  aux_branch p_BLEU i_BLEU ||2n aux_branch p_BCS i_BCS ||2n
  aux_branch p_BNEG i_BNEG ||2n aux_branch p_BVS i_BVS ||2n
  aux_branch p_BA i_BA ||2n aux_branch p_BNE i_BNE ||2n
  aux_branch p_BG i_BG ||2n aux_branch p_BGE i_BGE ||2n
  aux_branch p_BGU i_BGU ||2n aux_branch p_BCC i_BCC ||2n
  aux_branch p_BPOS i_BPOS ||2n aux_branch p_BVC i_BVC ||2n
  aux_branch p_FBN i_FBN ||2n aux_branch p_FBNE i_FBNE ||2n
  aux_branch p_FBLG i_FBLG ||2n aux_branch p_FBUL i_FBUL ||2n
  aux_branch p_FBL i_FBL ||2n aux_branch p_FBUG i_FBUG ||2n
  aux_branch p_FBG i_FBG ||2n aux_branch p_FBU i_FBU ||2n
  aux_branch p_FBA i_FBA ||2n aux_branch p_FBE i_FBE ||2n
  aux_branch p_FBUE i_FBUE ||2n aux_branch p_FBGE i_FBGE ||2n
  aux_branch p_FBUGE i_FBUGE ||2n aux_branch p_FBLE i_FBLE ||2n
  aux_branch p_FBULE i_FBULE ||2n aux_branch p_FBO i_FBO ||2n
  aux_branch p_CBN i_CBN ||2n aux_branch p_CB123 i_CB123 ||2n
  aux_branch p_CB12 i_CB12 ||2n aux_branch p_CB13 i_CB13 ||2n
  aux_branch p_CB1 i_CB1 ||2n aux_branch p_CB23 i_CB23 ||2n
  aux_branch p_CB2 i_CB2 ||2n aux_branch p_CB3 i_CB3 ||2n
  aux_branch p_CBA i_CBA ||2n aux_branch p_CB0 i_CB0 ||2n
  aux_branch p_CB03 i_CB03 ||2n aux_branch p_CB02 i_CB02 ||2n
  aux_branch p_CB023 i_CB023 ||2n aux_branch p_CB01 i_CB01 ||2n
  aux_branch p_CB013 i_CB013 ||2n aux_branch p_CB012 i_CB012.

ins_CALL = fld1 instr num f_disp30 p_CALL i_CALL.

aux_float2s = fld2 instr num num f_fs2 f_fd.

ins_float2s =
  aux_float2s p_FMOVs i_FMOVs ||2n aux_float2s p_FNEGs i_FNEGs ||2n
  aux_float2s p_FABSs i_FABSs ||2n aux_float2s p_FSQRTs i_FSQRTs.

ins_FSQRTd = fld2 instr num num f_fs2 f_fd p_FSQRTd i_FSQRTd.

ins_FSQRTq = fld2 instr num num f_fs2 f_fd p_FSQRTq i_FSQRTq.

aux_FTOs = fld2 instr num num f_fs2 f_fd.

ins_FTOs = aux_FTOs p_FiTOs i_FiTOs ||2n aux_FTOs p_FsTOi i_FsTOi.

aux_FTOd = fld2 instr num num f_fs2 f_fd.

ins_FTOd = aux_FTOd p_FiTOd i_FiTOd ||2n aux_FTOd p_FsTOd i_FsTOd.

aux_FTOq = fld2 instr num num f_fs2 f_fd.

ins_FTOq = aux_FTOq p_FiTOq i_FiTOq ||2n aux_FTOq p_FsTOq i_FsTOq.

aux_FdTO = fld2 instr num num f_fs2 f_fd.

ins_FdTO = aux_FdTO p_FdTOi i_FdTOi ||2n aux_FdTO p_FdTOs i_FdTOs.

aux_FqTO = fld2 instr num num f_fs2 f_fd.

ins_FqTO = aux_FqTO p_FqTOs i_FqTOs ||2n aux_FqTO p_FqTOi i_FqTOi.

ins_FqTOd = fld2 instr num num f_fs2 f_fd p_FqTOd i_FqTOd.

ins_FdTOq = fld2 instr num num f_fs2 f_fd p_FdTOq i_FdTOq.

aux_float3s = fld3 instr num num num f_fs1 f_fs2 f_fd.

ins_float3s =
  aux_float3s p_FADDs i_FADDs ||2n aux_float3s p_FSUBs i_FSUBs ||2n
  aux_float3s p_FMULs i_FMULs ||2n aux_float3s p_FDIVs i_FDIVs.

aux_float3d = fld3 instr num num num f_fs1 f_fs2 f_fd.

ins_float3d =
  aux_float3d p_FADDd i_FADDd ||2n aux_float3d p_FSUBd i_FSUBd ||2n
  aux_float3d p_FMULd i_FMULd ||2n aux_float3d p_FDIVd i_FDIVd.

aux_float3q = fld3 instr num num num f_fs1 f_fs2 f_fd.

ins_float3q =
  aux_float3q p_FADDq i_FADDq ||2n aux_float3q p_FSUBq i_FSUBq ||2n
  aux_float3q p_FMULq i_FMULq ||2n aux_float3q p_FDIVq i_FDIVq.

ins_FsMULd = fld3 instr num num num f_fs1 f_fs2 f_fd p_FsMULd i_FsMULd.

ins_FdMULq = fld3 instr num num num f_fs1 f_fs2 f_fd p_FdMULq i_FdMULq.

aux_fcompares = fld2 instr num num f_fs1 f_fs2.

ins_fcompares =
  aux_fcompares p_FCMPs i_FCMPs ||2n aux_fcompares p_FCMPEs i_FCMPEs.

aux_fcompared = fld2 instr num num f_fs1 f_fs2.

ins_fcompared =
  aux_fcompared p_FCMPd i_FCMPd ||2n aux_fcompared p_FCMPEd i_FCMPEd.

aux_fcompareq = fld2 instr num num f_fs1 f_fs2.

ins_fcompareq =
  aux_fcompareq p_FCMPq i_FCMPq ||2n aux_fcompareq p_FCMPEq i_FCMPEq.

ins_FLUSH = fld1 instr address_ oper_address_ p_FLUSH i_FLUSH.

ins_JMPL = fld2 instr address_ num oper_address_ f_rd p_JMPL i_JMPL.

ins_RETT = fld1 instr address_ oper_address_ p_RETT i_RETT.

aux_trap = fld1 instr address_ oper_address_.

ins_trap =
  aux_trap p_TN i_TN ||2n aux_trap p_TE i_TE ||2n
  aux_trap p_TLE i_TLE ||2n aux_trap p_TL i_TL ||2n
  aux_trap p_TLEU i_TLEU ||2n aux_trap p_TCS i_TCS ||2n
  aux_trap p_TNEG i_TNEG ||2n aux_trap p_TVS i_TVS ||2n
  aux_trap p_TA i_TA ||2n aux_trap p_TNE i_TNE ||2n
  aux_trap p_TG i_TG ||2n aux_trap p_TGE i_TGE ||2n
  aux_trap p_TGU i_TGU ||2n aux_trap p_TCC i_TCC ||2n
  aux_trap p_TPOS i_TPOS ||2n aux_trap p_TVC i_TVC.

ins_UNIMP = fld1 instr num f_imm22 p_UNIMP i_UNIMP.

ins_SETHI = fld2 instr num num f_rd f_imm22 p_SETHI i_SETHI.

instruction =
 ins_loadg ||2n ins_LDD ||2n ins_LDF ||2n ins_LDDF ||2n ins_LDC ||2n
 ins_LDDC ||2n ins_storeg ||2n ins_STD ||2n ins_STF ||2n ins_STDF ||2n
 ins_STC ||2n ins_STDC ||2n ins_loada ||2n ins_LDDA ||2n ins_storea ||2n
 ins_STDA ||2n ins_RDY ||2n ins_RDPSR ||2n ins_RDWIM ||2n
 ins_RDTBR ||2n ins_WRY ||2n ins_WRPSR ||2n ins_WRWIM ||2n ins_WRTBR ||2n
% ins_RDASR ||2n ins_WRASR ||2n
 ins_STBAR ||2n ins_alu ||2n ins_branch ||2n
 ins_CALL ||2n ins_float2s ||2n ins_FSQRTd ||2n ins_FSQRTq ||2n ins_FTOs ||2n
 ins_FTOd ||2n ins_FTOq ||2n ins_FdTO ||2n ins_FqTO ||2n ins_FqTOd ||2n
 ins_FdTOq ||2n ins_float3s ||2n ins_float3d ||2n ins_float3q ||2n
 ins_FsMULd ||2n ins_FdMULq ||2n ins_fcompares ||2n ins_fcompared ||2n
 ins_fcompareq ||2n
 ins_FLUSH ||2n ins_JMPL ||2n ins_RETT ||2n
 ins_trap ||2n ins_UNIMP ||2n ins_SETHI.
% Copyright (c) 2004 Princeton University
%	$Id: step.elf,v 1.25 2004/04/22 10:49:21 appel Exp $

% Instruction Semantics for the sparc V8 machine.

genpc = tuple4 num num num num.                 % opc, pc, npc, icnt

_mk_gen_pc = _mktuple4 num num num num.
_get_opc   : tm genpc -> tnum = _get1of4 num num num num.
_get_pc    : tm genpc -> tnum = _get2of4 num num num num.
_get_npc   : tm genpc -> tnum = _get3of4 num num num num.
_get_icnt  : tm genpc -> tnum = _get4of4 num num num num.

% Change the genpc as if a nonjump instruction of size "num" executes
_nextpc : tnum -> tm genpc -> tm genpc =
 [n : tnum][g : tm genpc] _mk_gen_pc (_get_pc g) (_get_npc g)
                           (plus (_get_npc g) n) (succ (_get_icnt g)).

% Change the program counter as if a jump to "n" instruction executes
_nextpc_jmp = [n: tnum][g: tm genpc]
  _mk_gen_pc (_get_opc g) (_get_pc g) n (_get_icnt g).

% Some genpc's will continue
% execution in a straight line as long as no branch occurs.
% These relate to some location via the "normalpc" relation.
% Other genpc's have a latent branch about to occur; these
% relate to no single location.
_normalpc = [g : tm genpc][n : tnum]
  _exists num  [n+4:tm num]
    _is_word n and _modulo n word_size zero
    and _plus_mod32 n word_size n+4
    and eqn (_get_pc g) n and eqn (_get_npc g) n+4.

% The next location to fetch an instruction.
_nextinstr : tm genpc -> tnum = _get_pc.

% A generalized version of control_at.
_gen_control_at : tm genpc -> tregs -> tform =
 [g : tm genpc][r : tregs]
 eqn (get_reg r opc) (_get_opc g) and eqn (get_reg r pc) (_get_pc g) and
 eqn (get_reg r npc) (_get_npc g) and eqn (get_reg r icnt) (_get_icnt g).

% Modify the state r,m by setting the program counter to genpc
_setpc : tm genpc -> tm instr =
 [g : tm genpc] instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  _upd4 num num r opc (_get_opc g) pc (_get_pc g) npc (_get_npc g)
                  icnt (_get_icnt g) r' and _eq_mem m m'.

% Modify the state r,m by setting program counter to genpc
% and also update the count of the number of instructions executed
_updatepc : tm (registers arrow registers arrow form) =
 _lam2 registers registers form [r : tregs][r' : tregs]
   _exists num [new_npc: tm num]
      _plus_mod32 (get_reg r npc) four new_npc and
      _upd4 num num r opc (get_reg r pc) pc (get_reg r npc)
                      npc new_npc icnt (succ (get_reg r icnt)) r'.

% The decode relation specifying machine instruction syntax
_decode : tmem -> tnum -> tm instr -> tnum -> tform =
 [m : tmem][w : tnum][instr : tm instr][size : tnum]
  eqn size four and instruction instr (get_mem m w).
% Copyright (c) 2004 Princeton University
%	$Id: policy.elf,v 1.15 2005/05/31 15:22:30 gtan Exp $


% This file contains the machine-dependent parts of the conventions
% about register usage for proof-carrying code.
% It is loosely based on Standard ML of New Jersey 110.34.
% See, for example, src/runtime/mach-dep/SPARC.prim.asm  in
% the  SML/NJ 110.34 source distribution.

% 
% R#  REG   Convention
% 
%  0  %g0   always 0
%  1  %g1   
% ...
%  7  %g7   
%  8  %o0   standard link
%  9  %o1   alloc pointer  (boundary between allocated and available heap)
% 10  %o2   limit pointer  (end of available heap, minus 4096)
% 11  %o3   standard arg
% 12  %o4
% 13  %o5
% 14  %sp   stack pointer
% 15  %o7   return address (set by call instruction)
% 16  %l0
%  ...
% 23  %l7
% 24  %i0   
% ...
% 29  %i5   
% 30  %fp   frame pointer (don't touch)
% 31  %i7   saved pc (don't touch)
% 32  %pc   program counter
% 33  %npc  next program counter
% 34   icc   integer condition codes
% 35   fcc   floating-point condition codes
% 36  %y   high-order result of multiply instruction
% 37   icnt   number of instructions executed, including current instr
% 128 %f0  floating-point register 0
% 191 %f63 floating-point register 63
% 
% In our logical specifications, the register bank is a single array
% of integers.  The actual SPARC has several different register banks.
% The numbers in the R# column indicate where in our specification's
% register bank we put the corresponding SPARC register.  This is
% documented in logic/pccTCB/machines/sparc/instr_sem.elf.
% 
% The stack pointer points to a block of memory like this:
%  *	%fp = %sp+4096
%  *                    +-------------------+
%  *                    |                   |	
%  *                    .                   .
%  *			|                   |
%  *	%sp+116:	|  spill area       |
%  *			+-------------------+
%  *	%sp+112:	|        	    |
%  *			|   various uses    |
%  *	%sp:		|                   |
%  *			+-------------------+
% 
% Thus, the memory-resident temps are m[%sp+116],m[%sp+120],...,m[%sp+4092]
% 
% 

reg_stdarg    = const 8.
reg_stdlink   = const 9.
reg_allocptr  = const 10.
reg_limitptr  = const 11.
reg_storeptr  = const 5.
reg_sp        = const 14.
reg_stdcont   = const 15.
reg_fp        = const 30.
reg_savedpc   = const 31. 
ml_framesize  = const 4096.
ml_spillarea  = const 116.

% A heap-limit check consists of a comparison (limitptr minus allocptr)
% and a conditional branch.  When a standard SML/NJ function is called, 
% the comparison is done before the call, so as to make good use
% of the delay slot, and the conditional branch is done afterwards, inside
% the called function.  Thus, the carry flag is zero if and only if
% there is at least 4k of heap space left.  This relation between
% the condition codes, the limitptr, and the allocptr, is "limit_test".
%abbrev
_initial_machine_state =
[r : tregs][m : tmem]
   eqn (get_reg r zero) zero and eqn (get_reg r icnt) zero and
   mult4? (get_reg r reg_allocptr) and mult4? (get_reg r reg_limitptr).

_limit_test: tregs -> tform =
  [r : tregs] (not (icc_c (get_reg r icc)))
       equiv  (geq (get_reg r reg_limitptr) (get_reg r reg_allocptr)).

_return_address: tnum -> tregs -> tform =
  [x : tnum][r : tregs] eqn (plus (get_reg r reg_stdcont) (const 8)) x.

_reserved_regs : tnum -> tform =
  [x : tnum] eqn x reg_sp or eqn x reg_fp or eqn x reg_savedpc.
% Copyright (c) 2004 Princeton University
%	$Id: safety.elf,v 1.24 2004/06/19 20:30:07 gtan Exp $

_control_at = [x : tnum][r : tregs]
  _exists genpc [g : tm genpc]
     _gen_control_at g r and _normalpc g x
     and (gt (get_reg r icnt) (get_reg r last_cbr)).

_eq_reserved_regs : tregs -> tregs -> tform =
  [r : tregs][r0 : tregs]
   _frl_n [x : tnum] _reserved_regs x imp eqn (get_reg r x) (get_reg r0 x).

specified_step : tm instr =
 instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  _exists3 instr num num [i : tm instr][l : tnum][size : tnum]
  _exists2 genpc registers [g : tm genpc][r'' : tregs]
   _gen_control_at g r  and
   eqn (_nextinstr g) l  and
   _executable r m l and
   _decode m l i size and
   _eq_reserved_regs r r' and
   _@2 registers registers form _updatepc r r'' and
   app_instr i r'' m r' m'.

step : tm instr = instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  app_instr specified_step r m r' m'   or  app_instr api_step r m r' m'.

state = pair registers memory.
_mkstate = _mktuple2 registers memory.
fst_st = _get1of2 registers memory.
snd_st = _get2of2 registers memory.

_stepx: tm state -> tm state -> tform = [x : tm state][y : tm state]
   app_instr step (fst_st x) (snd_st x) (fst_st y) (snd_st y).

_step* : tm instr =
 instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  _kleene_star state _stepx (_mkstate r m) (_mkstate r' m').

_safe : tregs -> tmem -> tform =
 [r : tregs][m : tmem]
  _forall2 registers memory [r' : tregs][m' : tmem]
    app_instr _step* r m r' m' imp
    _exists2 registers memory [r'' : tregs][m'' : tmem]
      app_instr step r' m' r'' m''.

prog_lam = _lam2 num num form.
prog_app = _@2 num num form.

_next_word : tm num -> tm program -> tm program =
 [n : tm num][f : tm program] prog_lam [i : tnum][j : tnum]
  (eqn i zero imp eqn j n) and
  (not (eqn i zero) imp prog_app f (pred i) j).

%infix right 15 _next_word.

next_word : rep_type -> tm program -> tm program =
 [w : rep_type][ws : tm program]
 (const w) _next_word ws.

%infix right 15 next_word.

no_more_words : tm program = prog_lam [_ : tnum][_ : tnum] false.

_prog_loaded_at : tm program -> tnum -> tregs -> tmem -> tform =
 [prog : tm program][start : tnum][r :tregs][m : tmem]
   _forall3 num num num [l : tnum][w : tnum][start+4l : tnum]
    prog_app prog l w imp
    _plus_mod32 start (times four l) start+4l imp
      eqn (get_mem m start+4l) w
      and _readable r m start+4l and _executable r m start+4l.
% Copyright (c) 2004 Princeton University
%	$Id: initial.elf,v 1.27 2004/05/26 12:06:54 appel Exp $

% Things that are supposed to be true, 
% not by hardware but by convention, about the 
% registers and memory at the beginning of execution.

% When the SML/NJ compiler generates code for a function, it uses
% one of several kinds of calling conventions:
% 
% ESCAPING FUNCTION:  A function that can be called from another module.
%   Any two escaping functions with the same (ML) type must have the
%   same calling convention.  The convention is,
% 
% reg_stdlink         the address of the function
% reg_limitptr         end of heap, minus 4096
% reg_storeptr         (used by generational g.c.)
% reg_allocptr         beginning of unallocated (available) heap
% reg_exncont      
% reg_sp              (access memory-resident temps through this)
% reg_stdarg          (number of arguments is determined by function's type)
% reg_stdcont         "return address"
% reg_stdclos         (access free variables through this)
% reg_varptr          (leave this alone)
% reg_fp               (leave this alone)
% program counter     (address of function being called)
% limit_test          (machine-dependent predicate)
% other registers are used to pass arguments as determined by
% the function's (ML) type.

% ESCAPING CONTINUATION:
% reg_limitptr         end of heap, minus 4096
% reg_storeptr         (used by generational g.c.)
% reg_allocptr         beginning of unallocated (available) heap
% reg_exncont     
% reg_sp              (access memory-resident temps through this)
% reg_stdarg          (number of arguments is determined by function's type)
% reg_stdcont         address of the function
% reg_varptr          (leave this alone)
% reg_fp              (leave this alone)
% program counter     (address of function being called)
% limit_test          (machine-dependent predicate)
% other registers are used to pass arguments as determined by
% the function's (ML) type.
% 
% KNOWN FUNCTION:  
%  The convention here is up to the compiler, but usually includes:
% reg_limitptr         end of heap, minus 4096
% reg_storeptr         (used by generational g.c.)
% reg_allocptr         beginning of unallocated (available) heap
% reg_exncont      
% reg_sp               (access memory-resident temps through this)
% base pointer	       (address of beginning of compilation unit + 4096)
% reg_fp               (leave this alone)
% program counter      (address of function being called)
% other registers are used to pass arguments as the compiler wishes.

% For our proof-carrying code prototype, let us assume that
% the initial entry point, address 0 of the compilation unit,
% is a function that takes one integer argument and returns one integer
% result.  Then we have, 


_block : (tnum -> tform) -> tnum -> tnum -> tform =
 [f : tnum -> tform][start : tnum][end : tnum] 
   _frl_n [x : tnum] leq start x imp lt x end imp f x.

_spill_area_rw : tregs -> tmem -> tform =
 [r : tregs][m : tmem] _block (_readable r m &&n _writable r m) 
                              (plus (get_reg r reg_sp) ml_spillarea)
                              (plus (get_reg r reg_sp) ml_framesize).

_heap_area_rw : tregs -> tmem -> tform =
 [r : tregs][m : tmem] _block (_readable r m &&n _writable r m) 
         (get_reg r reg_allocptr) (plus (get_reg r reg_limitptr) (const 4096)).

_spill_area : tregs -> tnum -> tform =
  [r : tregs]
    _inrange2 (plus (get_reg r reg_sp) ml_spillarea)
       (plus (get_reg r reg_sp) ml_framesize).

_heap_area : tregs -> tnum -> tform =
  [r : tregs]
    _inrange2 (get_reg r reg_allocptr)
       (plus (get_reg r reg_limitptr) (const 4096)).

_prog_area:  tm program -> tnum -> tnum -> tform =
  [prog: tm program][start: tnum][i: tnum]
    _exists2 num num [l: tnum][w: tnum]
    prog_app prog l w and _plus_mod32 start (times four l) i.

_all_fixnums : tregs -> tmem -> tform =
  [r : tregs][m : tmem]
    _frl_n [x : tnum] _is_word (get_mem m x) and _is_word (get_reg r x).

_return_type : tnum -> tregs -> tform =
  [x : tnum][r0 : tregs]
   _modulo x four zero and _is_word x and
   _forall2 registers memory [r : tregs][m : tmem]
     _eq_reserved_regs r r0 imp
     _control_at x r imp 
     _safe r m.

_initial_state : tm program -> tnum -> tregs -> tmem -> tform =
  [prog: tm program][start: tnum][r : tregs][m : tmem]
  _initial_machine_state r m  and
  _all_fixnums r m  and
  _spill_area_rw r m  and
  _heap_area_rw r m  and
  _set_disjoint num (_spill_area r) (_heap_area r)  and
  _set_disjoint num (_heap_area r) (_prog_area prog start)  and
  _set_disjoint num (_prog_area prog start) (_spill_area r)  and
  eqn (get_reg r reg_stdlink) start and
  _is_word (plus (get_reg r reg_limitptr) (const 4096)) and
  _return_type (plus (get_reg r reg_stdcont) (const 8)) r   and
  geq (plus (get_reg r reg_limitptr) (const 4096)) (get_reg r reg_allocptr) and
  _prog_loaded_at prog start r m   and
  _control_at start r.

_exists_initial_state:
  pf (_exists2 program num [prog: tm program][start: tnum]
      _exists2 registers memory [r: tregs][m: tmem]
      _initial_state prog start r m).% Copyright (c) 2004 Princeton University
%	$Id: policy.elf,v 1.14 2004/04/30 20:59:52 appel Exp $

safe_program: tm program -> tform =
 [prog : tm program]
  _forall3 num registers memory [start : tnum][r : tregs][m : tmem] 
   _initial_state prog start r m imp
   _safe r m.

%
% Example of a safety theorem:
%
% my_prog_is_safe: pf (safe_program (
% 81329 next_word
% 293765 next_word
% 93 next_word
% 29387 next_word
% 92387895 next_word
% 129872 next_word
% 938275 next_word
% no_more_words)).
% 

__safe__ : __program__ -> type = [prog: __program__] pf (safe_program prog).
% Copyright (c) 2004 Princeton University

hole: {A: tm form} pf A.
_termhole: {T: tp} tm T.
tphole: rep_type -> tp.
_predhole: {T1: tp}{T2: tp}{T: tp} (tm T1 -> tm T2 -> tm form) -> tm T =  
   [T1: tp][T2: tp][T: tp]
   [f: tm T1 -> tm T2 -> tm form]
   _@ (T1 arrow T2 arrow form) T
   (_termhole ((T1 arrow T2 arrow form) arrow T))
   (_lam2 T1 T2 form f).
bighole : {A:tform} pf A = [A:tform] hole A.
1ary : tp -> tp = [t:tp] t arrow t.
2ary : tp -> tp = [t:tp] t arrow 1ary t.
shadowed_0 : tp -> tp = [t:tp] t arrow form.
rel : tp -> tp -> tp = [t1:tp] [t2:tp] t1 arrow shadowed_0 t2.
rel3 : tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] t1 arrow rel t2 t3.
rel4 : tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] t1 arrow rel3 t2 t3 t4.
rel5 : tp -> tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] [t5:tp] t1 arrow rel4 t2 t3 t4 t5.
rel6 : tp -> tp -> tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] [t5:tp] [t6:tp] t1 arrow rel5 t2 t3 t4 t5 t6.
rel7 : tp -> tp -> tp -> tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] [t5:tp] [t6:tp] [t7:tp] t1 arrow rel6 t2 t3 t4 t5 t6 t7.
eqrel : tp -> tp = [t:tp] rel t t.
eq_form : tm (eqrel form) = _lam2 form form form ([x3:tm form] [y:tm form] x3 equiv y).
_eq_x : {t:tp} tm (eqrel t) = [t:tp] _lam2 t t form ([x3:tm t] [x4:tm t] _eq t x3 x4).
eq_arith : tm (eqrel num) = _eq_x num.
compos_set : tp -> tp = [t:tp] 2ary (shadowed_0 t).
_emptyset : {t:tp} tm (shadowed_0 t) = [t:tp] _lam t form ([x3:tm t] false).
_singleton : {t:tp} tm (t arrow shadowed_0 t) = [t:tp] _lam2 t t form ([x3:tm t] [y:tm t] _eq t y x3).
_subset : {t:tp} tm (rel (shadowed_0 t) (shadowed_0 t)) = [t:tp] _lam2 (shadowed_0 t) (shadowed_0 t) form ([s1:tm (shadowed_0 t)] [s2:tm (shadowed_0 t)] _forall t ([x3:tm t] _@ t form s1 x3 imp _@ t form s2 x3)).
_set_equiv : {t:tp} tm (eqrel (shadowed_0 t)) = [t:tp] _lam2 (shadowed_0 t) (shadowed_0 t) form ([s1:tm (shadowed_0 t)] [s2:tm (shadowed_0 t)] _@2 (shadowed_0 t) (shadowed_0 t) form (_subset t) s1 s2 and _@2 (shadowed_0 t) (shadowed_0 t) form (_subset t) s2 s1).
_set_union : {t:tp} tm (compos_set t) = [t:tp] _lam3 (shadowed_0 t) (shadowed_0 t) t form ([s1:tm (shadowed_0 t)] [s2:tm (shadowed_0 t)] [x3:tm t] _@ t form s1 x3 or _@ t form s2 x3).
_set_intersection : {t:tp} tm (compos_set t) = [t:tp] _lam3 (shadowed_0 t) (shadowed_0 t) t form ([s1:tm (shadowed_0 t)] [s2:tm (shadowed_0 t)] [x3:tm t] _@ t form s1 x3 and _@ t form s2 x3).
_set_diff : {t:tp} tm (compos_set t) = [t:tp] _lam3 (shadowed_0 t) (shadowed_0 t) t form ([s1:tm (shadowed_0 t)] [s2:tm (shadowed_0 t)] [x3:tm t] _@ t form s1 x3 and not (_@ t form s2 x3)).
_set_compl : {t:tp} tm (1ary (shadowed_0 t)) = [t:tp] _lam2 (shadowed_0 t) t form ([s:tm (shadowed_0 t)] [x3:tm t] not (_@ t form s x3)).
_is_singleton : {t:tp} tm (rel (eqrel t) (shadowed_0 t)) = [t:tp] _lam2 (eqrel t) (shadowed_0 t) form ([eqt:tm (eqrel t)] [s:tm (shadowed_0 t)] _forall2 t t ([x3:tm t] [x4:tm t] _@ t form s x3 imp _@ t form s x4 imp _@2 t t form eqt x3 x4)).
inrange : tm (rel num num) = _lam2 num num form ([n:tm num] [i1:tm num] isInt i1 and geq i1 zero and lt i1 n).
inrange2 : tm (rel3 num num num) = _lam3 num num num form ([lo:tm num] [hi:tm num] [i1:tm num] isInt i1 and leq lo i1 and lt i1 hi).
_agree_over_set : {t1:tp} {t2:tp} tm (rel3 (shadowed_0 t1) (t1 arrow t2) (t1 arrow t2)) = [t1:tp] [t2:tp] _lam3 (t1 arrow form) (t1 arrow t2) (t1 arrow t2) form ([s:tm (t1 arrow form)] [m:tm (t1 arrow t2)] [m':tm (t1 arrow t2)] _forall t1 ([x3:tm t1] _@ t1 form s x3 imp _eq t2 (_@ t1 t2 m x3) (_@ t1 t2 m' x3))).
_agree_outside_set : {t1:tp} {t2:tp} tm (rel3 (shadowed_0 t1) (t1 arrow t2) (t1 arrow t2)) = [t1:tp] [t2:tp] _lam3 (t1 arrow form) (t1 arrow t2) (t1 arrow t2) form ([s:tm (t1 arrow form)] [m:tm (t1 arrow t2)] [m':tm (t1 arrow t2)] _forall t1 ([x3:tm t1] not (_@ t1 form s x3) imp _eq t2 (_@ t1 t2 m x3) (_@ t1 t2 m' x3))).
list : tp -> tp = [t:tp] rel num t.
_list_cons : {t:tp} tm (eqrel t arrow t arrow 1ary (list t)) = [t:tp] _lam3 (eqrel t) t (list t) (list t) ([eq_rel1:tm (eqrel t)] [hd:tm t] [lst:tm (list t)] _lam2 num t form ([i1:tm num] [x3:tm t] if (_eq num i1 zero) (_@2 t t form eq_rel1 x3 hd) (_@2 num t form lst (pred i1) x3))).
_list_nil : {t:tp} tm (list t) = [t:tp] _lam2 num t form ([i1:tm num] [x3:tm t] false).
_forall7 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} (tm a -> tm b -> tm c1 -> tm d -> tm e -> tm f -> tm g -> tform) -> tform = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [X:tm a -> tm b -> tm c2 -> tm d -> tm e -> tm f -> tm g -> tform] _forall a ([xa:tm a] _forall6 b c2 d e f g ([xb:tm b] [xc:tm c2] [xd:tm d] [xe:tm e] [xf:tm f] [xg:tm g] X xa xb xc xd xe xf xg)).
_forall8 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} {h:tp} (tm a -> tm b -> tm c1 -> tm d -> tm e -> tm f -> tm g -> tm h -> tform) -> tform = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [h:tp] [X:tm a -> tm b -> tm c2 -> tm d -> tm e -> tm f -> tm g -> tm h -> tform] _forall a ([xa:tm a] _forall7 b c2 d e f g h ([xb:tm b] [xc:tm c2] [xd:tm d] [xe:tm e] [xf:tm f] [xg:tm g] [xh:tm h] X xa xb xc xd xe xf xg xh)).
_forall9 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} {h:tp} {i1:tp} (tm a -> tm b -> tm c1 -> tm d -> tm e -> tm f -> tm g -> tm h -> tm i1 -> tform) -> tform = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [h:tp] [i2:tp] [X:tm a -> tm b -> tm c2 -> tm d -> tm e -> tm f -> tm g -> tm h -> tm i2 -> tform] _forall a ([xa:tm a] _forall8 b c2 d e f g h i2 ([xb:tm b] [xc:tm c2] [xd:tm d] [xe:tm e] [xf:tm f] [xg:tm g] [xh:tm h] [xi:tm i2] X xa xb xc xd xe xf xg xh xi)).
_forall10 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} {h:tp} {i1:tp} {j:tp} (tm a -> tm b -> tm c1 -> tm d -> tm e -> tm f -> tm g -> tm h -> tm i1 -> tm j -> tform) -> tform = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [h:tp] [i2:tp] [j:tp] [X:tm a -> tm b -> tm c2 -> tm d -> tm e -> tm f -> tm g -> tm h -> tm i2 -> tm j -> tform] _forall a ([xa:tm a] _forall9 b c2 d e f g h i2 j ([xb:tm b] [xc:tm c2] [xd:tm d] [xe:tm e] [xf:tm f] [xg:tm g] [xh:tm h] [xi:tm i2] [xj:tm j] X xa xb xc xd xe xf xg xh xi xj)).
forall : {T:tp} (tm T -> tform) -> tform = [T:tp] [x3:tm T -> tform] _forall T ([x4:tm T] x3 x4).
forall2 : {T1:tp} {T2:tp} (tm T1 -> tm T2 -> tform) -> tform = [T1:tp] [T2:tp] [x3:tm T1 -> tm T2 -> tform] _forall2 T1 T2 ([x4:tm T1] [x5:tm T2] x3 x4 x5).
forall3 : {T1:tp} {T2:tp} {T3:tp} (tm T1 -> tm T2 -> tm T3 -> tform) -> tform = [T1:tp] [T2:tp] [T3:tp] [x3:tm T1 -> tm T2 -> tm T3 -> tform] _forall3 T1 T2 T3 ([x4:tm T1] [x5:tm T2] [x6:tm T3] x3 x4 x5 x6).
forall4 : {A:tp} {B:tp} {C:tp} {D:tp} (tm A -> tm B -> tm C -> tm D -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [f:tm A -> tm B -> tm C -> tm D -> tform] _forall4 A B C D ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] f x3 x4 x5 x6).
forall5 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [f:tm A -> tm B -> tm C -> tm D -> tm E -> tform] _forall5 A B C D E ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] f x3 x4 x5 x6 x7).
forall6 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [f:tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tform] _forall6 A B C D E F ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] [x8:tm F] f x3 x4 x5 x6 x7 x8).
forall7 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [X:tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tform] _forall7 A B C D E F G ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] [x8:tm F] [x9:tm G] X x3 x4 x5 x6 x7 x8 x9).
forall8 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} {H:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [H:tp] [X:tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tform] _forall8 A B C D E F G H ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] [x8:tm F] [x9:tm G] [x10:tm H] X x3 x4 x5 x6 x7 x8 x9 x10).
forall9 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} {H:tp} {I:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tm I -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [H:tp] [I:tp] [X:tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tm I -> tform] _forall9 A B C D E F G H I ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] [x8:tm F] [x9:tm G] [x10:tm H] [x11:tm I] X x3 x4 x5 x6 x7 x8 x9 x10 x11).
forall10 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} {H:tp} {I:tp} {J:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tm I -> tm J -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [H:tp] [I:tp] [J:tp] [X:tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tm I -> tm J -> tform] _forall10 A B C D E F G H I J ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] [x8:tm F] [x9:tm G] [x10:tm H] [x11:tm I] [x12:tm J] X x3 x4 x5 x6 x7 x8 x9 x10 x11 x12).
exists : {T:tp} (tm T -> tm form) -> tm form = [T:tp] [x3:tm T -> tm form] _exists T ([x4:tm T] x3 x4).
exists2 : {T1:tp} {T2:tp} (tm T1 -> tm T2 -> tform) -> tform = [T1:tp] [T2:tp] [f:tm T1 -> tm T2 -> tform] _exists2 T1 T2 ([x3:tm T1] [x4:tm T2] f x3 x4).
exists3 : {T1:tp} {T2:tp} {T3:tp} (tm T1 -> tm T2 -> tm T3 -> tform) -> tform = [T1:tp] [T2:tp] [T3:tp] [f:tm T1 -> tm T2 -> tm T3 -> tform] _exists3 T1 T2 T3 ([x3:tm T1] [x4:tm T2] [x5:tm T3] f x3 x4 x5).
exists4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform) -> tm form = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] exists X1 ([x3:tm X1] exists3 X2 X3 X4 ([x4:tm X2] [x5:tm X3] [x6:tm X4] f x3 x4 x5 x6)).
exists5 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform) -> tm form = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] exists X1 ([x3:tm X1] exists4 X2 X3 X4 X5 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] f x3 x4 x5 x6 x7)).
exists6 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform) -> tm form = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] exists X1 ([x3:tm X1] exists5 X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] f x3 x4 x5 x6 x7 x8)).
eq : {T:tp} tm T -> tm T -> tform = [T:tp] [x3:tm T] [x4:tm T] _eq T x3 x4.
neq : {X1:tp} tm X1 -> tm X1 -> tform = [X1:tp] [a:tm X1] [b:tm X1] not (eq X1 a b).
== : {T:tp} tm T -> tm T -> tm form = [T:tp] [x3:tm T] [x4:tm T] _eq T x3 x4.
!= : {T:tp} tm T -> tm T -> tm form = [T:tp] [a:tm T] [b:tm T] not (eq T a b).
@ : {T1:tp} {T2:tp} tm (T1 arrow T2) -> tm T1 -> tm T2 = [T1:tp] [T2:tp] [x3:tm (T1 arrow T2)] [x4:tm T1] _@ T1 T2 x3 x4.
@1 : {X1:tp} {X2:tp} tm (X1 arrow X2) -> tm X1 -> tm X2 = [X1:tp] [X2:tp] [f:tm (X1 arrow X2)] [x3:tm X1] @ X1 X2 f x3.
@2 : {X1:tp} {X2:tp} {X3:tp} tm (X1 arrow X2 arrow X3) -> tm X1 -> tm X2 -> tm X3 = [X1:tp] [X2:tp] [X3:tp] [f:tm (X1 arrow X2 arrow X3)] [x3:tm X1] [x4:tm X2] @1 X2 X3 (@1 X1 (X2 arrow X3) f x3) x4.
@3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} tm (X1 arrow X2 arrow X3 arrow X4) -> tm X1 -> tm X2 -> tm X3 -> tm X4 = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [f:tm (X1 arrow X2 arrow X3 arrow X4)] [x3:tm X1] [x4:tm X2] [x5:tm X3] @2 X2 X3 X4 (@1 X1 (X2 arrow X3 arrow X4) f x3) x4 x5.
lam : {T1:tp} {T2:tp} (tm T1 -> tm T2) -> tm (T1 arrow T2) = [T1:tp] [T2:tp] [x3:tm T1 -> tm T2] _lam T1 T2 ([x4:tm T1] x3 x4).
lam2 : {T1:tp} {T2:tp} {T3:tp} (tm T1 -> tm T2 -> tm T3) -> tm (T1 arrow T2 arrow T3) = [T1:tp] [T2:tp] [T3:tp] [f:tm T1 -> tm T2 -> tm T3] _lam2 T1 T2 T3 ([x3:tm T1] [x4:tm T2] f x3 x4).
lam3 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} (tm T1 -> tm T2 -> tm T3 -> tm T4) -> tm (T1 arrow T2 arrow T3 arrow T4) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] [f:tm T1 -> tm T2 -> tm T3 -> tm T4] _lam3 T1 T2 T3 T4 ([x3:tm T1] [x4:tm T2] [x5:tm T3] f x3 x4 x5).
lam4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} {T5:tp} (tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5) -> tm (T1 arrow T2 arrow T3 arrow T4 arrow T5) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] [T5:tp] [f:tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5] _lam4 T1 T2 T3 T4 T5 ([x3:tm T1] [x4:tm T2] [x5:tm T3] [x6:tm T4] f x3 x4 x5 x6).
lam5 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6) ([x3:tm X1] lam4 X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] f x3 x4 x5 x6 x7)).
lam6 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7) ([x3:tm X1] lam5 X2 X3 X4 X5 X6 X7 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] f x3 x4 x5 x6 x7 x8)).
lam7 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8) ([x3:tm X1] lam6 X2 X3 X4 X5 X6 X7 X8 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] f x3 x4 x5 x6 x7 x8 x9)).
lam8 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9) ([x3:tm X1] lam7 X2 X3 X4 X5 X6 X7 X8 X9 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] f x3 x4 x5 x6 x7 x8 x9 x10)).
lam9 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10) ([x3:tm X1] lam8 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] f x3 x4 x5 x6 x7 x8 x9 x10 x11)).
lam10 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11) ([x3:tm X1] lam9 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)).
lam11 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12) ([x3:tm X1] lam10 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] [x13:tm X11] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)).
lam12 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13) ([x3:tm X1] lam11 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] [x13:tm X11] [x14:tm X12] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14)).
lam13 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14) ([x3:tm X1] lam12 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] [x13:tm X11] [x14:tm X12] [x15:tm X13] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15)).
lam14 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {X15:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14 -> tm X15) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow X15) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [X15:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14 -> tm X15] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow X15) ([x3:tm X1] lam13 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 X15 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] [x13:tm X11] [x14:tm X12] [x15:tm X13] [x16:tm X14] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)).
forall_i : {T:tp} {F:tm T -> tform} ({a:tm T} pf (F a)) -> pf (forall T ([x3:tm T] F x3)) = [T:tp] [F:tm T -> tform] [x3:{a:tm T} pf (F a)] _forall_i T ([x4:tm T] F x4) ([a:tm T] x3 a).
forall2_i : {X1:tp} {X2:tp} {F:tm X1 -> tm X2 -> tform} ({a:tm X1} {b:tm X2} pf (F a b)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] F x3 x4)) = [X1:tp] [X2:tp] [F:tm X1 -> tm X2 -> tform] [p1:{a:tm X1} {b:tm X2} pf (F a b)] forall_i X1 ([x3:tm X1] forall X2 ([x4:tm X2] F x3 x4)) ([x3:tm X1] forall_i X2 ([x4:tm X2] F x3 x4) ([a:tm X2] p1 x3 a)).
forall3_i : {X1:tp} {X2:tp} {X3:tp} {F:tm X1 -> tm X2 -> tm X3 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} pf (F a b c1)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] F x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [F:tm X1 -> tm X2 -> tm X3 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} pf (F a b c2)] forall_i X1 ([x3:tm X1] forall2 X2 X3 ([x4:tm X2] [x5:tm X3] F x3 x4 x5)) ([x3:tm X1] forall2_i X2 X3 ([x4:tm X2] [x5:tm X3] F x3 x4 x5) ([a:tm X2] [b:tm X3] p1 x3 a b)).
forall4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} pf (F a b c1 d)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] F x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} pf (F a b c2 d)] forall_i X1 ([x3:tm X1] forall3 X2 X3 X4 ([x4:tm X2] [x5:tm X3] [x6:tm X4] F x3 x4 x5 x6)) ([x3:tm X1] forall3_i X2 X3 X4 ([x4:tm X2] [x5:tm X3] [x6:tm X4] F x3 x4 x5 x6) ([a:tm X2] [b:tm X3] [c3:tm X4] p1 x3 a b c3)).
forall5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} pf (F a b c1 d e)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} pf (F a b c2 d e)] forall_i X1 ([x3:tm X1] forall4 X2 X3 X4 X5 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F x3 x4 x5 x6 x7)) ([x3:tm X1] forall4_i X2 X3 X4 X5 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F x3 x4 x5 x6 x7) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] p1 x3 a b c3 d)).
forall6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (F a b c1 d e f)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] F x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (F a b c2 d e f)] forall_i X1 ([x3:tm X1] forall5 X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] F x3 x4 x5 x6 x7 x8)) ([x3:tm X1] forall5_i X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] F x3 x4 x5 x6 x7 x8) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] [e:tm X6] p1 x3 a b c3 d e)).
forall7_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} pf (F a b c1 d e f g)) -> pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] F x3 x4 x5 x6 x7 x8 x9)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} pf (F a b c2 d e f g)] forall_i X1 ([x3:tm X1] forall6 X2 X3 X4 X5 X6 X7 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] F x3 x4 x5 x6 x7 x8 x9)) ([x3:tm X1] forall6_i X2 X3 X4 X5 X6 X7 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] F x3 x4 x5 x6 x7 x8 x9) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] [e:tm X6] [f:tm X7] p1 x3 a b c3 d e f)).
forall8_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} pf (F a b c1 d e f g h)) -> pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} pf (F a b c2 d e f g h)] forall_i X1 ([x3:tm X1] forall7 X2 X3 X4 X5 X6 X7 X8 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10)) ([x3:tm X1] forall7_i X2 X3 X4 X5 X6 X7 X8 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] [e:tm X6] [f:tm X7] [g:tm X8] p1 x3 a b c3 d e f g)).
forall9_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i1:tm X9} pf (F a b c1 d e f g h i1)) -> pf (forall9 X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i2:tm X9} pf (F a b c2 d e f g h i2)] forall_i X1 ([x3:tm X1] forall8 X2 X3 X4 X5 X6 X7 X8 X9 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) ([x3:tm X1] forall8_i X2 X3 X4 X5 X6 X7 X8 X9 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] [e:tm X6] [f:tm X7] [g:tm X8] [h:tm X9] p1 x3 a b c3 d e f g h)).
forall10_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i1:tm X9} {j:tm X10} pf (F a b c1 d e f g h i1 j)) -> pf (forall10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i2:tm X9} {j:tm X10} pf (F a b c2 d e f g h i2 j)] forall_i X1 ([x3:tm X1] forall9 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) ([x3:tm X1] forall9_i X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] [e:tm X6] [f:tm X7] [g:tm X8] [h:tm X9] [i3:tm X10] p1 x3 a b c3 d e f g h i3)).
forall_e : {T:tp} {F:tm T -> tform} pf (forall T ([x3:tm T] F x3)) -> ({a:tm T} pf (F a)) = [T:tp] [F:tm T -> tform] [x3:pf (forall T ([x3:tm T] F x3))] [a:tm T] _forall_e T ([x4:tm T] F x4) x3 a.
forall2_e : {X1:tp} {X2:tp} {F:tm X1 -> tm X2 -> tform} pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] F x3 x4)) -> ({a:tm X1} {b:tm X2} pf (F a b)) = [X1:tp] [X2:tp] [F:tm X1 -> tm X2 -> tform] [p1:pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] F x3 x4))] [a:tm X1] [b:tm X2] forall_e X2 ([x3:tm X2] F a x3) (forall_e X1 ([x3:tm X1] _forall X2 ([x4:tm X2] F x3 x4)) p1 a) b.
forall3_e : {X1:tp} {X2:tp} {X3:tp} {F:tm X1 -> tm X2 -> tm X3 -> tform} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] F x3 x4 x5)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} pf (F a b c1)) = [X1:tp] [X2:tp] [X3:tp] [F:tm X1 -> tm X2 -> tm X3 -> tform] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] F x3 x4 x5))] [a:tm X1] [b:tm X2] [c2:tm X3] forall_e X3 ([x3:tm X3] F a b x3) (forall2_e X1 X2 ([x3:tm X1] [x4:tm X2] _forall X3 ([x5:tm X3] F x3 x4 x5)) p1 a b) c2.
forall4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] F x3 x4 x5 x6)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} pf (F a b c1 d)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] F x3 x4 x5 x6))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] forall_e X4 ([x3:tm X4] F a b c2 x3) (forall3_e X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] _forall X4 ([x6:tm X4] F x3 x4 x5 x6)) p1 a b c2) d.
forall5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform} pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F x3 x4 x5 x6 x7)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} pf (F a b c1 d e)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] [p1:pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F x3 x4 x5 x6 x7))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] forall_e X5 ([x3:tm X5] F a b c2 d x3) (forall4_e X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] _forall X5 ([x7:tm X5] F x3 x4 x5 x6 x7)) p1 a b c2 d) e.
forall6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform} pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] F x3 x4 x5 x6 x7 x8)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (F a b c1 d e f)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] [p1:pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] F x3 x4 x5 x6 x7 x8))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] forall_e X6 ([x3:tm X6] F a b c2 d e x3) (forall5_e X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] _forall X6 ([x8:tm X6] F x3 x4 x5 x6 x7 x8)) p1 a b c2 d e) f.
forall7_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform} pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] F x3 x4 x5 x6 x7 x8 x9)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} pf (F a b c1 d e f g)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform] [p1:pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] F x3 x4 x5 x6 x7 x8 x9))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [g:tm X7] forall_e X7 ([x3:tm X7] F a b c2 d e f x3) (forall6_e X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] _forall X7 ([x9:tm X7] F x3 x4 x5 x6 x7 x8 x9)) p1 a b c2 d e f) g.
forall8_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform} pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} pf (F a b c1 d e f g h)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform] [p1:pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [g:tm X7] [h:tm X8] forall_e X8 ([x3:tm X8] F a b c2 d e f g x3) (forall7_e X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] _forall X8 ([x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10)) p1 a b c2 d e f g) h.
forall9_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tform} pf (forall9 X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i1:tm X9} pf (F a b c1 d e f g h i1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tform] [p1:pf (forall9 X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [g:tm X7] [h:tm X8] [i2:tm X9] forall_e X9 ([x3:tm X9] F a b c2 d e f g h x3) (forall8_e X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] _forall X9 ([x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) p1 a b c2 d e f g h) i2.
forall10_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform} pf (forall10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i1:tm X9} {j:tm X10} pf (F a b c1 d e f g h i1 j)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform] [p1:pf (forall10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [g:tm X7] [h:tm X8] [i2:tm X9] [j:tm X10] forall_e X10 ([x3:tm X10] F a b c2 d e f g h i2 x3) (forall9_e X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] _forall X10 ([x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) p1 a b c2 d e f g h i2) j.
exists_i : {T:tp} {A:tm T -> tform} {x3:tm T} pf (A x3) -> pf (exists T ([x4:tm T] A x4)) = [T:tp] [A:tm T -> tform] [x4:tm T] [p1:pf (A x4)] forall_i form ([x3:tm form] forall T ([x5:tm T] A x5 imp x3) imp x3) ([b:tform] _imp_i (forall T ([x6:tm T] A x6 imp b)) b ([p2:pf (forall T ([x7:tm T] A x7 imp b))] _imp_e (A x4) b (forall_e T ([x3:tm T] A x3 imp b) p2 x4) p1)).
exists2_i : {X1:tp} {X2:tp} {A:tm X1 -> tm X2 -> tform} {a:tm X1} {b:tm X2} pf (A a b) -> pf (exists2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4)) = [X1:tp] [X2:tp] [A:tm X1 -> tm X2 -> tform] [a:tm X1] [b:tm X2] [Q:pf (A a b)] exists_i X1 ([x3:tm X1] _exists X2 ([x4:tm X2] A x3 x4)) a (exists_i X2 ([x3:tm X2] A a x3) b Q).
exists3_i : {X1:tp} {X2:tp} {X3:tp} {A:tm X1 -> tm X2 -> tm X3 -> tform} {a:tm X1} {b:tm X2} {c1:tm X3} pf (A a b c1) -> pf (exists3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] A x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [A:tm X1 -> tm X2 -> tm X3 -> tform] [a:tm X1] [b:tm X2] [c2:tm X3] [Q:pf (A a b c2)] exists_i X1 ([x3:tm X1] _exists2 X2 X3 ([x4:tm X2] [x5:tm X3] A x3 x4 x5)) a (exists_i X2 ([x3:tm X2] _exists X3 ([x4:tm X3] A a x3 x4)) b (exists_i X3 ([x3:tm X3] A a b x3) c2 Q)).
exists4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform} {a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} pf (A a b c1 d) -> pf (exists4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] A x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [Q:pf (A a b c2 d)] exists_i X1 ([x3:tm X1] exists3 X2 X3 X4 ([x4:tm X2] [x5:tm X3] [x6:tm X4] A x3 x4 x5 x6)) a (exists_i X2 ([x3:tm X2] _exists2 X3 X4 ([x4:tm X3] [x5:tm X4] A a x3 x4 x5)) b (exists_i X3 ([x3:tm X3] _exists X4 ([x4:tm X4] A a b x3 x4)) c2 (exists_i X4 ([x3:tm X4] A a b c2 x3) d Q))).
exists5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform} {a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} pf (A a b c1 d e) -> pf (exists5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] A x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [Q:pf (A a b c2 d e)] exists_i X1 ([x3:tm X1] exists4 X2 X3 X4 X5 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] A x3 x4 x5 x6 x7)) a (exists_i X2 ([x3:tm X2] exists3 X3 X4 X5 ([x4:tm X3] [x5:tm X4] [x6:tm X5] A a x3 x4 x5 x6)) b (exists_i X3 ([x3:tm X3] _exists2 X4 X5 ([x4:tm X4] [x5:tm X5] A a b x3 x4 x5)) c2 (exists_i X4 ([x3:tm X4] _exists X5 ([x4:tm X5] A a b c2 x3 x4)) d (exists_i X5 ([x3:tm X5] A a b c2 d x3) e Q)))).
exists6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform} {a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (A a b c1 d e f) -> pf (exists6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] A x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [Q:pf (A a b c2 d e f)] exists_i X1 ([x3:tm X1] exists5 X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] A x3 x4 x5 x6 x7 x8)) a (exists_i X2 ([x3:tm X2] exists4 X3 X4 X5 X6 ([x4:tm X3] [x5:tm X4] [x6:tm X5] [x7:tm X6] A a x3 x4 x5 x6 x7)) b (exists_i X3 ([x3:tm X3] exists3 X4 X5 X6 ([x4:tm X4] [x5:tm X5] [x6:tm X6] A a b x3 x4 x5 x6)) c2 (exists_i X4 ([x3:tm X4] _exists2 X5 X6 ([x4:tm X5] [x5:tm X6] A a b c2 x3 x4 x5)) d (exists_i X5 ([x3:tm X5] _exists X6 ([x4:tm X6] A a b c2 d x3 x4)) e (exists_i X6 ([x3:tm X6] A a b c2 d e x3) f Q))))).
exists_e : {T:tp} {A:tm T -> tm form} {B:tform} pf (exists T ([x3:tm T] A x3)) -> ({x3:tm T} pf (A x3) -> pf B) -> pf B = [T:tp] [A:tm T -> tm form] [B:tform] [p1:pf (forall form ([b:tm form] forall T ([x4:tm T] A x4 imp b) imp b))] [p2:{x5:tm T} pf (A x5) -> pf B] _imp_e (forall T ([x6:tm T] A x6 imp B)) B (forall_e form ([x3:tm form] forall T ([x7:tm T] A x7 imp x3) imp x3) p1 B) (forall_i T ([x3:tm T] A x3 imp B) ([x8:tm T] _imp_i (A x8) B ([p3:pf (A x8)] p2 x8 p3))).
exists2_e : {X1:tp} {X2:tp} {A:tm X1 -> tm X2 -> tform} {B:tform} pf (exists2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4)) -> ({a:tm X1} {b:tm X2} pf (A a b) -> pf B) -> pf B = [X1:tp] [X2:tp] [A:tm X1 -> tm X2 -> tform] [B:tform] [p1:pf (exists2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4))] [p2:{a:tm X1} {b:tm X2} pf (A a b) -> pf B] exists_e X1 ([x3:tm X1] _exists X2 ([x4:tm X2] A x3 x4)) B p1 ([a:tm X1] [p3:pf (exists X2 ([b:tm X2] A a b))] exists_e X2 ([x3:tm X2] A a x3) B p3 ([b:tm X2] [p4:pf (A a b)] p2 a b p4)).
exists3_e : {X1:tp} {X2:tp} {X3:tp} {A:tm X1 -> tm X2 -> tm X3 -> tform} {B:tform} pf (exists3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] A x3 x4 x5)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} pf (A a b c1) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [A:tm X1 -> tm X2 -> tm X3 -> tform] [B:tform] [p1:pf (exists3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] A x3 x4 x5))] [p2:{a:tm X1} {b:tm X2} {c2:tm X3} pf (A a b c2) -> pf B] exists_e X1 ([x3:tm X1] _exists2 X2 X3 ([x4:tm X2] [x5:tm X3] A x3 x4 x5)) B p1 ([a:tm X1] [p3:pf (exists2 X2 X3 ([x3:tm X2] [x4:tm X3] A a x3 x4))] exists2_e X2 X3 ([x3:tm X2] [x4:tm X3] A a x3 x4) B p3 ([b:tm X2] [c3:tm X3] [p4:pf (A a b c3)] p2 a b c3 p4)).
exists4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform} {B:tform} pf (exists4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] A x3 x4 x5 x6)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} pf (A a b c1 d) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] [B:tform] [p1:pf (exists4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] A x3 x4 x5 x6))] [p2:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} pf (A a b c2 d) -> pf B] exists_e X1 ([x3:tm X1] exists3 X2 X3 X4 ([x4:tm X2] [x5:tm X3] [x6:tm X4] A x3 x4 x5 x6)) B p1 ([a:tm X1] [p3:pf (exists3 X2 X3 X4 ([x3:tm X2] [x4:tm X3] [x5:tm X4] A a x3 x4 x5))] exists3_e X2 X3 X4 ([x3:tm X2] [x4:tm X3] [x5:tm X4] A a x3 x4 x5) B p3 ([b:tm X2] [c3:tm X3] [d:tm X4] [p4:pf (A a b c3 d)] p2 a b c3 d p4)).
exists5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform} {B:tform} pf (exists5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] A x3 x4 x5 x6 x7)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} pf (A a b c1 d e) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] [B:tform] [p1:pf (exists5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] A x3 x4 x5 x6 x7))] [p2:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} pf (A a b c2 d e) -> pf B] exists_e X1 ([x3:tm X1] exists4 X2 X3 X4 X5 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] A x3 x4 x5 x6 x7)) B p1 ([a:tm X1] [p3:pf (exists4 X2 X3 X4 X5 ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X5] A a x3 x4 x5 x6))] exists4_e X2 X3 X4 X5 ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X5] A a x3 x4 x5 x6) B p3 ([b:tm X2] [c3:tm X3] [d:tm X4] [e:tm X5] [p4:pf (A a b c3 d e)] p2 a b c3 d e p4)).
exists6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform} {B:tform} pf (exists6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] A x3 x4 x5 x6 x7 x8)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (A a b c1 d e f) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] [B:tform] [p1:pf (exists6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] A x3 x4 x5 x6 x7 x8))] [p2:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (A a b c2 d e f) -> pf B] exists_e X1 ([x3:tm X1] exists5 X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] A x3 x4 x5 x6 x7 x8)) B p1 ([a:tm X1] [p3:pf (exists5 X2 X3 X4 X5 X6 ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X5] [x7:tm X6] A a x3 x4 x5 x6 x7))] exists5_e X2 X3 X4 X5 X6 ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X5] [x7:tm X6] A a x3 x4 x5 x6 x7) B p3 ([b:tm X2] [c3:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [p4:pf (A a b c3 d e f)] p2 a b c3 d e f p4)).
exists_ei : {X1:tp} {A:tm X1 -> tm form} {B:tm X1 -> tform} pf (exists X1 ([x3:tm X1] A x3)) -> ({x3:tm X1} pf (A x3) -> pf (B x3)) -> pf (exists X1 ([x3:tm X1] B x3)) = [X1:tp] [A:tm X1 -> tm form] [B:tm X1 -> tform] [p1:pf (exists X1 ([x3:tm X1] A x3))] [l8:{x4:tm X1} pf (A x4) -> pf (B x4)] exists_e X1 ([x3:tm X1] A x3) (exists X1 ([x3:tm X1] B x3)) p1 ([x5:tm X1] [p2:pf (A x5)] exists_i X1 ([x3:tm X1] B x3) x5 (l8 x5 p2)).
beta_e : {T2:tp} {T1:tp} {F:tm T1 -> tm T2} {A:tm T1} {h:tm T2 -> tm form} pf (h (@ T1 T2 (_lam T1 T2 ([x3:tm T1] F x3)) A)) -> pf (h (F A)) = [T2:tp] [T1:tp] [F:tm T1 -> tm T2] [A:tm T1] [h:tm T2 -> tm form] [x3:pf (h (@ T1 T2 (_lam T1 T2 ([x3:tm T1] F x3)) A))] _beta_e T1 T2 ([x4:tm T1] F x4) A ([x4:tm T2] h x4) x3.
beta_i : {T2:tp} {T1:tp} {F:tm T1 -> tm T2} {A:tm T1} {h:tm T2 -> tm form} pf (h (F A)) -> pf (h (@ T1 T2 (lam T1 T2 ([x3:tm T1] F x3)) A)) = [T2:tp] [T1:tp] [F:tm T1 -> tm T2] [A:tm T1] [h:tm T2 -> tm form] [p1:pf (h (F A))] _imp_e (h (F A)) (h (@ T1 T2 (lam T1 T2 ([x3:tm T1] F x3)) A)) (beta_e T2 T1 ([x3:tm T1] F x3) A ([x3:tm T2] h x3 imp h (@ T1 T2 (lam T1 T2 ([x4:tm T1] F x4)) A)) (_imp_i (h (@ T1 T2 (_lam T1 T2 ([x3:tm T1] F x3)) A)) (h (@ T1 T2 (_lam T1 T2 ([x3:tm T1] F x3)) A)) ([p2:pf (h (@ T1 T2 (_lam T1 T2 ([x3:tm T1] F x3)) A))] p2))) p1.
cut : {A:tform} {B:tform} pf A -> (pf A -> pf B) -> pf B = [A:tform] [B:tform] [p1:pf A] [p2:pf A -> pf B] _imp_e A B (_imp_i A B ([x3:pf A] p2 x3)) p1.
refl : {X1:tp} {X:tm X1} pf (== X1 X X) = [X1:tp] [X:tm X1] forall_i (X1 arrow form) ([x3:tm (X1 arrow form)] _@_f X1 x3 X imp _@_f X1 x3 X) ([A:tm (X1 arrow form)] _imp_i (_@_f X1 A X) (_@_f X1 A X) ([P:pf (_@_f X1 A X)] P)).
congr : {T:tp} {A:tm T} {B:tm T} {h:tm T -> tform} pf (== T A B) -> pf (h B) -> pf (h A) = [T:tp] [A:tm T] [B:tm T] [h:tm T -> tform] [p1:pf (== T A B)] [p2:pf (h B)] beta_e form T ([x3:tm T] h x3) A ([i1:tm form] i1) (_imp_e (@ T form (lam T form ([x3:tm T] h x3)) B) (@ T form (lam T form ([x3:tm T] h x3)) A) (_forall_e (T arrow form) ([g:tm (T arrow form)] @ T form g B imp @ T form g A) p1 (lam T form ([x3:tm T] h x3))) (beta_i form T ([x3:tm T] h x3) B ([i2:tm form] i2) p2)).
congr2 : {TA:tp} {TB:tp} {A1:tm TA} {A2:tm TA} {B1:tm TB} {B2:tm TB} {h:tm TA -> tm TB -> tm form} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (h A2 B2) -> pf (h A1 B1) = [TA:tp] [TB:tp] [A1:tm TA] [A2:tm TA] [B1:tm TB] [B2:tm TB] [h:tm TA -> tm TB -> tm form] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [p1:pf (h A2 B2)] cut (forall2 TA TB ([x3:tm TA] [x4:tm TB] == form (h x3 x4) (h x3 x4))) (h A1 B1) (forall2_i TA TB ([x3:tm TA] [x4:tm TB] == form (h x3 x4) (h x3 x4)) ([a:tm TA] [b:tm TB] refl form (h a b))) ([p2:pf (forall2 TA TB ([a:tm TA] [b:tm TB] == form (h a b) (h a b)))] congr TB B1 B2 ([b:tm TB] h A1 b) eB (congr TA A1 A2 ([a:tm TA] h a B2) eA p1)).
congr3 : {TA:tp} {TB:tp} {TC:tp} {A1:tm TA} {A2:tm TA} {B1:tm TB} {B2:tm TB} {C1:tm TC} {C2:tm TC} {h:tm TA -> tm TB -> tm TC -> tm form} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (== TC C1 C2) -> pf (h A2 B2 C2) -> pf (h A1 B1 C1) = [TA:tp] [TB:tp] [TC:tp] [A1:tm TA] [A2:tm TA] [B1:tm TB] [B2:tm TB] [C1:tm TC] [C2:tm TC] [h:tm TA -> tm TB -> tm TC -> tm form] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [eC:pf (== TC C1 C2)] [p1:pf (h A2 B2 C2)] cut (forall3 TA TB TC ([x3:tm TA] [x4:tm TB] [x5:tm TC] == form (h x3 x4 x5) (h x3 x4 x5))) (h A1 B1 C1) (forall3_i TA TB TC ([x3:tm TA] [x4:tm TB] [x5:tm TC] == form (h x3 x4 x5) (h x3 x4 x5)) ([a:tm TA] [b:tm TB] [c1:tm TC] refl form (h a b c1))) ([p2:pf (forall3 TA TB TC ([a:tm TA] [b:tm TB] [c2:tm TC] == form (h a b c2) (h a b c2)))] congr TC C1 C2 ([c3:tm TC] h A1 B1 c3) eC (congr2 TA TB A1 A2 B1 B2 ([a:tm TA] [b:tm TB] h a b C2) eA eB p1)).
congr4 : {TA:tp} {TB:tp} {TC:tp} {TD:tp} {A1:tm TA} {A2:tm TA} {B1:tm TB} {B2:tm TB} {C1:tm TC} {C2:tm TC} {D1:tm TD} {D2:tm TD} {h:tm TA -> tm TB -> tm TC -> tm TD -> tm form} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (== TC C1 C2) -> pf (== TD D1 D2) -> pf (h A2 B2 C2 D2) -> pf (h A1 B1 C1 D1) = [TA:tp] [TB:tp] [TC:tp] [TD:tp] [A1:tm TA] [A2:tm TA] [B1:tm TB] [B2:tm TB] [C1:tm TC] [C2:tm TC] [D1:tm TD] [D2:tm TD] [h:tm TA -> tm TB -> tm TC -> tm TD -> tm form] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [eC:pf (== TC C1 C2)] [eD:pf (== TD D1 D2)] [p1:pf (h A2 B2 C2 D2)] cut (forall4 TA TB TC TD ([x3:tm TA] [x4:tm TB] [x5:tm TC] [x6:tm TD] == form (h x3 x4 x5 x6) (h x3 x4 x5 x6))) (h A1 B1 C1 D1) (forall4_i TA TB TC TD ([x3:tm TA] [x4:tm TB] [x5:tm TC] [x6:tm TD] == form (h x3 x4 x5 x6) (h x3 x4 x5 x6)) ([a:tm TA] [b:tm TB] [c1:tm TC] [d:tm TD] refl form (h a b c1 d))) ([p2:pf (forall4 TA TB TC TD ([a:tm TA] [b:tm TB] [c2:tm TC] [d:tm TD] == form (h a b c2 d) (h a b c2 d)))] congr2 TC TD C1 C2 D1 D2 ([c3:tm TC] [d:tm TD] h A1 B1 c3 d) eC eD (congr2 TA TB A1 A2 B1 B2 ([a:tm TA] [b:tm TB] h a b C2 D2) eA eB p1)).
congr5 : {TA:tp} {TB:tp} {TC:tp} {TD:tp} {TE:tp} {A1:tm TA} {A2:tm TA} {B1:tm TB} {B2:tm TB} {C1:tm TC} {C2:tm TC} {D1:tm TD} {D2:tm TD} {E1:tm TE} {E2:tm TE} {h:tm TA -> tm TB -> tm TC -> tm TD -> tm TE -> tm form} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (== TC C1 C2) -> pf (== TD D1 D2) -> pf (== TE E1 E2) -> pf (h A2 B2 C2 D2 E2) -> pf (h A1 B1 C1 D1 E1) = [TA:tp] [TB:tp] [TC:tp] [TD:tp] [TE:tp] [A1:tm TA] [A2:tm TA] [B1:tm TB] [B2:tm TB] [C1:tm TC] [C2:tm TC] [D1:tm TD] [D2:tm TD] [E1:tm TE] [E2:tm TE] [h:tm TA -> tm TB -> tm TC -> tm TD -> tm TE -> tm form] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [eC:pf (== TC C1 C2)] [eD:pf (== TD D1 D2)] [eE:pf (== TE E1 E2)] [p1:pf (h A2 B2 C2 D2 E2)] cut (forall5 TA TB TC TD TE ([x3:tm TA] [x4:tm TB] [x5:tm TC] [x6:tm TD] [x7:tm TE] == form (h x3 x4 x5 x6 x7) (h x3 x4 x5 x6 x7))) (h A1 B1 C1 D1 E1) (forall5_i TA TB TC TD TE ([x3:tm TA] [x4:tm TB] [x5:tm TC] [x6:tm TD] [x7:tm TE] == form (h x3 x4 x5 x6 x7) (h x3 x4 x5 x6 x7)) ([a:tm TA] [b:tm TB] [c1:tm TC] [d:tm TD] [e:tm TE] refl form (h a b c1 d e))) ([p2:pf (forall5 TA TB TC TD TE ([a:tm TA] [b:tm TB] [c2:tm TC] [d:tm TD] [e:tm TE] == form (h a b c2 d e) (h a b c2 d e)))] congr TE E1 E2 ([e:tm TE] h A1 B1 C1 D1 e) eE (congr4 TA TB TC TD A1 A2 B1 B2 C1 C2 D1 D2 ([a:tm TA] [b:tm TB] [c3:tm TC] [d:tm TD] h a b c3 d E2) eA eB eC eD p1)).
symm : {X1:tp} {A:tm X1} {B:tm X1} pf (== X1 A B) -> pf (== X1 B A) = [X1:tp] [A:tm X1] [B:tm X1] [p1:pf (== X1 A B)] congr X1 A B ([i1:tm X1] == X1 B i1) p1 (refl X1 B).
trans : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 A C) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] congr X1 C B ([i1:tm X1] eq X1 A i1) (symm X1 B C p2) p1.
trans2 : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 A C) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [x3:pf (== X1 A B)] [x4:pf (== X1 B C)] trans X1 A B C x3 x4.
trans3 : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} {D:tm X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 C D) -> pf (== X1 A D) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [D:tm X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] [p3:pf (== X1 C D)] trans X1 A C D (trans2 X1 A B C p1 p2) p3.
trans4 : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} {D:tm X1} {E:tm X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 C D) -> pf (== X1 D E) -> pf (== X1 A E) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [D:tm X1] [E:tm X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] [p3:pf (== X1 C D)] [p4:pf (== X1 D E)] trans X1 A D E (trans3 X1 A B C D p1 p2 p3) p4.
trans5 : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} {D:tm X1} {E:tm X1} {F:tm X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 C D) -> pf (== X1 D E) -> pf (== X1 E F) -> pf (== X1 A F) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [D:tm X1] [E:tm X1] [F:tm X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] [p3:pf (== X1 C D)] [p4:pf (== X1 D E)] [p5:pf (== X1 E F)] trans X1 A E F (trans4 X1 A B C D E p1 p2 p3 p4) p5.
cut2 : {A:tform} {B:tform} {C:tform} pf A -> pf B -> (pf A -> pf B -> pf C) -> pf C = [A:tform] [B:tform] [C:tform] [p1:pf A] [p2:pf B] [p3:pf A -> pf B -> pf C] cut A C p1 ([z1:pf A] cut B C p2 ([z2:pf B] p3 z1 z2)).
cut3 : {A:tform} {B:tform} {C:tform} {Res:tform} pf A -> pf B -> pf C -> (pf A -> pf B -> pf C -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf A -> pf B -> pf C -> pf Res] cut2 A B Res p1 p2 ([z1:pf A] [z2:pf B] cut C Res p3 ([z3:pf C] p4 z1 z2 z3)).
cut4 : {A:tform} {B:tform} {C:tform} {D:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> (pf A -> pf B -> pf C -> pf D -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf A -> pf B -> pf C -> pf D -> pf Res] cut3 A B C Res p1 p2 p3 ([z1:pf A] [z2:pf B] [z3:pf C] cut D Res p4 ([z4:pf D] p5 z1 z2 z3 z4)).
cut5 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf A -> pf B -> pf C -> pf D -> pf E -> pf Res] cut4 A B C D Res p1 p2 p3 p4 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] cut E Res p5 ([z5:pf E] p6 z1 z2 z3 z4 z5)).
cut6 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Res] cut5 A B C D E Res p1 p2 p3 p4 p5 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] cut F Res p6 ([z6:pf F] p7 z1 z2 z3 z4 z5 z6)).
cut7 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Res] cut6 A B C D E F Res p1 p2 p3 p4 p5 p6 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] cut G Res p7 ([z7:pf G] p8 z1 z2 z3 z4 z5 z6 z7)).
cut8 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Res] cut7 A B C D E F G Res p1 p2 p3 p4 p5 p6 p7 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] cut H Res p8 ([z8:pf H] p9 z1 z2 z3 z4 z5 z6 z7 z8)).
cut9 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Res] cut8 A B C D E F G H Res p1 p2 p3 p4 p5 p6 p7 p8 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] cut I Res p9 ([z9:pf I] p10 z1 z2 z3 z4 z5 z6 z7 z8 z9)).
cut10 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut J Res p10 ([z10:pf J] p11 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10)).
cut12 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut3 J K L Res p10 p11 p12 ([z10:pf J] [z11:pf K] [z12:pf L] p13 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12)).
cut14 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} {O:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [O:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] [p14:pf O] [p15:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut5 J K L M O Res p10 p11 p12 p13 p14 ([z10:pf J] [z11:pf K] [z12:pf L] [z13:pf M] [z14:pf O] p15 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12 z13 z14)).
cut16 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} {O:tform} {P:tform} {Q:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf P -> pf Q -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf P -> pf Q -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [O:tform] [P:tform] [Q:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] [p14:pf O] [p15:pf P] [p16:pf Q] [p17:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf P -> pf Q -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut7 J K L M O P Q Res p10 p11 p12 p13 p14 p15 p16 ([z10:pf J] [z11:pf K] [z12:pf L] [z13:pf M] [z14:pf O] [z15:pf P] [z16:pf Q] p17 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12 z13 z14 z15 z16)).
strictify : {X1:tp} {A:tform} tm X1 -> pf A -> pf A = [X1:tp] [A:tform] [x3:tm X1] [p1:pf A] cut (== X1 x3 x3) A (refl X1 x3) ([p2:pf (== X1 x3 x3)] p1).
strictify3 : {T1:tp} {T2:tp} {T3:tp} {A:tform} (tm T1 -> tm T2 -> tm T3) -> pf A -> pf A = [T1:tp] [T2:tp] [T3:tp] [A:tform] [f:tm T1 -> tm T2 -> tm T3] [p1:pf A] cut (forall2 T1 T2 ([x3:tm T1] [x4:tm T2] == T3 (f x3 x4) (f x3 x4))) A (forall2_i T1 T2 ([x3:tm T1] [x4:tm T2] == T3 (f x3 x4) (f x3 x4)) ([a:tm T1] [b:tm T2] refl T3 (f a b))) ([p2:pf (forall2 T1 T2 ([x3:tm T1] [y:tm T2] == T3 (f x3 y) (f x3 y)))] p1).
beta : {X1:tp} {X2:tp} {F:tm X2 -> tm X1} {A:tm X2} pf (== X1 (@ X2 X1 (lam X2 X1 ([x3:tm X2] F x3)) A) (F A)) = [X1:tp] [X2:tp] [F:tm X2 -> tm X1] [A:tm X2] forall_i (X1 arrow form) ([x3:tm (X1 arrow form)] @ X1 form x3 (F A) imp @ X1 form x3 (@ X2 X1 (lam X2 X1 ([x4:tm X2] F x4)) A)) ([g:tm (X1 arrow form)] _imp_i (@ X1 form g (F A)) (@ X1 form g (@ X2 X1 (lam X2 X1 ([x3:tm X2] F x3)) A)) ([p1:pf (@ X1 form g (F A))] beta_i X1 X2 ([x3:tm X2] F x3) A ([c1:tm X1] @ X1 form g c1) p1)).
beta1 : {X1:tp} {X2:tp} {X3:tm X2 -> tm X1} {X4:tm X2} pf (== X1 (@ X2 X1 (lam X2 X1 ([x3:tm X2] X3 x3)) X4) (X3 X4)) = [X1:tp] [X2:tp] [X3:tm X2 -> tm X1] [X4:tm X2] beta X1 X2 ([x3:tm X2] X3 x3) X4.
beta2 : {X1:tp} {X2:tp} {X3:tp} {F:tm X3 -> tm X2 -> tm X1} {A:tm X3} {B:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (lam2 X3 X2 X1 ([x3:tm X3] [x4:tm X2] F x3 x4)) A) B) (F A B)) = [X1:tp] [X2:tp] [X3:tp] [F:tm X3 -> tm X2 -> tm X1] [A:tm X3] [B:tm X2] congr (X2 arrow X1) (@ X3 (X2 arrow X1) (lam X3 (X2 arrow X1) ([x3:tm X3] _lam X2 X1 ([x4:tm X2] F x3 x4))) A) (_lam X2 X1 ([x3:tm X2] F A x3)) ([i1:tm (X2 arrow X1)] == X1 (@ X2 X1 i1 B) (F A B)) (beta (X2 arrow X1) X3 ([x3:tm X3] _lam X2 X1 ([x4:tm X2] F x3 x4)) A) (beta X1 X2 ([x3:tm X2] F A x3) B).
beta3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F:tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X4} {B:tm X3} {C:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (lam3 X4 X3 X2 X1 ([x3:tm X4] [x4:tm X3] [x5:tm X2] F x3 x4 x5)) A) B) C) (F A B C)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F:tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X4] [B:tm X3] [C:tm X2] congr (X2 arrow X1) (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (lam2 X4 X3 (X2 arrow X1) ([x3:tm X4] [x4:tm X3] _lam X2 X1 ([x5:tm X2] F x3 x4 x5))) A) B) (_lam X2 X1 ([x3:tm X2] F A B x3)) ([i1:tm (X2 arrow X1)] == X1 (@ X2 X1 i1 C) (F A B C)) (beta2 (X2 arrow X1) X3 X4 ([x3:tm X4] [x4:tm X3] _lam X2 X1 ([x5:tm X2] F x3 x4 x5)) A B) (beta X1 X2 ([x3:tm X2] F A B x3) C).
beta4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X5} {B:tm X4} {C:tm X3} {D:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (lam4 X5 X4 X3 X2 X1 ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] F x3 x4 x5 x6)) A) B) C) D) (F A B C D)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X5] [B:tm X4] [C:tm X3] [D:tm X2] congr (X3 arrow X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (lam2 X5 X4 (X3 arrow X2 arrow X1) ([x3:tm X5] [x4:tm X4] _lam2 X3 X2 X1 ([x5:tm X3] [x6:tm X2] F x3 x4 x5 x6))) A) B) (_lam2 X3 X2 X1 ([x3:tm X3] [x4:tm X2] F A B x3 x4)) ([i1:tm (X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) i1 C) D) (F A B C D)) (beta2 (X3 arrow X2 arrow X1) X4 X5 ([x3:tm X5] [x4:tm X4] _lam2 X3 X2 X1 ([x5:tm X3] [x6:tm X2] F x3 x4 x5 x6)) A B) (beta2 X1 X2 X3 ([x3:tm X3] [x4:tm X2] F A B x3 x4) C D).
beta5 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {F:tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X6} {B:tm X5} {C:tm X4} {D:tm X3} {E:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam5 X6 X5 X4 X3 X2 X1 ([x3:tm X6] [x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] F x3 x4 x5 x6 x7)) A) B) C) D) E) (F A B C D E)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [F:tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X6] [B:tm X5] [C:tm X4] [D:tm X3] [E:tm X2] congr (X2 arrow X1) (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X6 X5 X4 X3 (X2 arrow X1) ([x3:tm X6] [x4:tm X5] [x5:tm X4] [x6:tm X3] _lam X2 X1 ([x7:tm X2] F x3 x4 x5 x6 x7))) A) B) C) D) (_lam X2 X1 ([x3:tm X2] F A B C D x3)) ([i1:tm (X2 arrow X1)] == X1 (@ X2 X1 i1 E) (F A B C D E)) (beta4 (X2 arrow X1) X3 X4 X5 X6 ([x3:tm X6] [x4:tm X5] [x5:tm X4] [x6:tm X3] _lam X2 X1 ([x7:tm X2] F x3 x4 x5 x6 x7)) A B C D) (beta X1 X2 ([x3:tm X2] F A B C D x3) E).
beta6 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {Fun:tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X7} {B:tm X6} {C:tm X5} {D:tm X4} {E:tm X3} {F:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam6 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F) (Fun A B C D E F)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [Fun:tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X7] [B:tm X6] [C:tm X5] [D:tm X4] [E:tm X3] [F:tm X2] congr (X3 arrow X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X7 X6 X5 X4 (X3 arrow X2 arrow X1) ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] _lam2 X3 X2 X1 ([x7:tm X3] [x8:tm X2] Fun x3 x4 x5 x6 x7 x8))) A) B) C) D) (_lam2 X3 X2 X1 ([x3:tm X3] [x4:tm X2] Fun A B C D x3 x4)) ([i1:tm (X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) i1 E) F) (Fun A B C D E F)) (beta4 (X3 arrow X2 arrow X1) X4 X5 X6 X7 ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] _lam2 X3 X2 X1 ([x7:tm X3] [x8:tm X2] Fun x3 x4 x5 x6 x7 x8)) A B C D) (beta2 X1 X2 X3 ([x3:tm X3] [x4:tm X2] Fun A B C D x3 x4) E F).
beta7 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X8} {B:tm X7} {C:tm X6} {D:tm X5} {E:tm X4} {F:tm X3} {G:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam7 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G) (Fun A B C D E F G)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X8] [B:tm X7] [C:tm X6] [D:tm X5] [E:tm X4] [F:tm X3] [G:tm X2] congr (X4 arrow X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X8 X7 X6 X5 (X4 arrow X3 arrow X2 arrow X1) ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] _lam3 X4 X3 X2 X1 ([x7:tm X4] [x8:tm X3] [x9:tm X2] Fun x3 x4 x5 x6 x7 x8 x9))) A) B) C) D) (_lam3 X4 X3 X2 X1 ([x3:tm X4] [x4:tm X3] [x5:tm X2] Fun A B C D x3 x4 x5)) ([i1:tm (X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) i1 E) F) G) (Fun A B C D E F G)) (beta4 (X4 arrow X3 arrow X2 arrow X1) X5 X6 X7 X8 ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] _lam3 X4 X3 X2 X1 ([x7:tm X4] [x8:tm X3] [x9:tm X2] Fun x3 x4 x5 x6 x7 x8 x9)) A B C D) (beta3 X1 X2 X3 X4 ([x3:tm X4] [x4:tm X3] [x5:tm X2] Fun A B C D x3 x4 x5) E F G).
beta8 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {Fun:tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X9} {B:tm X8} {C:tm X7} {D:tm X6} {E:tm X5} {F:tm X4} {G:tm X3} {H:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X9] [x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [Fun:tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X9] [B:tm X8] [C:tm X7] [D:tm X6] [E:tm X5] [F:tm X4] [G:tm X3] [H:tm X2] congr (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X9 X8 X7 X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) ([x3:tm X9] [x4:tm X8] [x5:tm X7] [x6:tm X6] lam4 X5 X4 X3 X2 X1 ([x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10))) A) B) C) D) (lam4 X5 X4 X3 X2 X1 ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] Fun A B C D x3 x4 x5 x6)) ([i1:tm (X5 arrow X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) i1 E) F) G) H) (Fun A B C D E F G H)) (beta4 (X5 arrow X4 arrow X3 arrow X2 arrow X1) X6 X7 X8 X9 ([x3:tm X9] [x4:tm X8] [x5:tm X7] [x6:tm X6] lam4 X5 X4 X3 X2 X1 ([x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A B C D) (beta4 X1 X2 X3 X4 X5 ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] Fun A B C D x3 x4 x5 x6) E F G H).
beta10 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {Fun:tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X11} {B:tm X10} {C:tm X9} {D:tm X8} {E:tm X7} {F:tm X6} {G:tm X5} {H:tm X4} {I:tm X3} {J:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam10 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X11] [x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] [x11:tm X3] [x12:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J) (Fun A B C D E F G H I J)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [Fun:tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X11] [B:tm X10] [C:tm X9] [D:tm X8] [E:tm X7] [F:tm X6] [G:tm X5] [H:tm X4] [I:tm X3] [J:tm X2] congr (X3 arrow X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X11 X10 X9 X8 X7 X6 X5 X4 (X3 arrow X2 arrow X1) ([x3:tm X11] [x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] _lam2 X3 X2 X1 ([x11:tm X3] [x12:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12))) A) B) C) D) E) F) G) H) (_lam2 X3 X2 X1 ([x3:tm X3] [x4:tm X2] Fun A B C D E F G H x3 x4)) ([i1:tm (X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) i1 I) J) (Fun A B C D E F G H I J)) (beta8 (X3 arrow X2 arrow X1) X4 X5 X6 X7 X8 X9 X10 X11 ([x3:tm X11] [x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] _lam2 X3 X2 X1 ([x11:tm X3] [x12:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A B C D E F G H) (beta2 X1 X2 X3 ([x3:tm X3] [x4:tm X2] Fun A B C D E F G H x3 x4) I J).
beta11 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {Fun:tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X12} {B:tm X11} {C:tm X10} {D:tm X9} {E:tm X8} {F:tm X7} {G:tm X6} {H:tm X5} {I:tm X4} {J:tm X3} {K:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam11 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X12] [x4:tm X11] [x5:tm X10] [x6:tm X9] [x7:tm X8] [x8:tm X7] [x9:tm X6] [x10:tm X5] [x11:tm X4] [x12:tm X3] [x13:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) K) (Fun A B C D E F G H I J K)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [Fun:tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X12] [B:tm X11] [C:tm X10] [D:tm X9] [E:tm X8] [F:tm X7] [G:tm X6] [H:tm X5] [I:tm X4] [J:tm X3] [K:tm X2] congr (X4 arrow X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X12 X11 X10 X9 X8 X7 X6 X5 (X4 arrow X3 arrow X2 arrow X1) ([x3:tm X12] [x4:tm X11] [x5:tm X10] [x6:tm X9] [x7:tm X8] [x8:tm X7] [x9:tm X6] [x10:tm X5] _lam3 X4 X3 X2 X1 ([x11:tm X4] [x12:tm X3] [x13:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13))) A) B) C) D) E) F) G) H) (_lam3 X4 X3 X2 X1 ([x3:tm X4] [x4:tm X3] [x5:tm X2] Fun A B C D E F G H x3 x4 x5)) ([i1:tm (X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) i1 I) J) K) (Fun A B C D E F G H I J K)) (beta8 (X4 arrow X3 arrow X2 arrow X1) X5 X6 X7 X8 X9 X10 X11 X12 ([x3:tm X12] [x4:tm X11] [x5:tm X10] [x6:tm X9] [x7:tm X8] [x8:tm X7] [x9:tm X6] [x10:tm X5] _lam3 X4 X3 X2 X1 ([x11:tm X4] [x12:tm X3] [x13:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A B C D E F G H) (beta3 X1 X2 X3 X4 ([x3:tm X4] [x4:tm X3] [x5:tm X2] Fun A B C D E F G H x3 x4 x5) I J K).
beta14 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {X15:tp} {Fun:tm X15 -> tm X14 -> tm X13 -> tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X15} {B:tm X14} {C:tm X13} {D:tm X12} {E:tm X11} {F:tm X10} {G:tm X9} {H:tm X8} {I:tm X7} {J:tm X6} {K:tm X5} {L:tm X4} {M:tm X3} {N:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X15 (X14 arrow X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam14 X15 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X15] [x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] [x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [X15:tp] [Fun:tm X15 -> tm X14 -> tm X13 -> tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X15] [B:tm X14] [C:tm X13] [D:tm X12] [E:tm X11] [F:tm X10] [G:tm X9] [H:tm X8] [I:tm X7] [J:tm X6] [K:tm X5] [L:tm X4] [M:tm X3] [N:tm X2] congr (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X15 (X14 arrow X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X15 X14 X13 X12 X11 X10 X9 X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) ([x3:tm X15] [x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] lam6 X7 X6 X5 X4 X3 X2 X1 ([x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16))) A) B) C) D) E) F) G) H) (lam6 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] Fun A B C D E F G H x3 x4 x5 x6 x7 x8)) ([i1:tm (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) i1 I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N)) (beta8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) X8 X9 X10 X11 X12 X13 X14 X15 ([x3:tm X15] [x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] lam6 X7 X6 X5 X4 X3 X2 X1 ([x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A B C D E F G H) (beta6 X1 X2 X3 X4 X5 X6 X7 ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] Fun A B C D E F G H x3 x4 x5 x6 x7 x8) I J K L M N).
congr_app : {X1:tp} {X2:tp} {X3:tm (X1 arrow X2)} {X4:tm (X1 arrow X2)} {Y1:tm X1} {Y2:tm X1} pf (== (X1 arrow X2) X3 X4) -> pf (== X1 Y1 Y2) -> pf (== X2 (@ X1 X2 X3 Y1) (@ X1 X2 X4 Y2)) = [X1:tp] [X2:tp] [X3:tm (X1 arrow X2)] [X4:tm (X1 arrow X2)] [Y1:tm X1] [Y2:tm X1] [p1:pf (== (X1 arrow X2) X3 X4)] [p2:pf (== X1 Y1 Y2)] congr (X1 arrow X2) X3 X4 ([W:tm (X1 arrow X2)] == X2 (@ X1 X2 W Y1) (@ X1 X2 X4 Y2)) p1 (congr X1 Y1 Y2 ([W:tm X1] == X2 (@ X1 X2 X4 W) (@ X1 X2 X4 Y2)) p2 (refl X2 (@ X1 X2 X4 Y2))).
congr_app_1 : {X1:tp} {X2:tp} {X3:tm (X1 arrow X2)} {X4:tm (X1 arrow X2)} {Y:tm X1} pf (== (X1 arrow X2) X3 X4) -> pf (== X2 (@ X1 X2 X3 Y) (@ X1 X2 X4 Y)) = [X1:tp] [X2:tp] [X3:tm (X1 arrow X2)] [X4:tm (X1 arrow X2)] [Y:tm X1] [p1:pf (== (X1 arrow X2) X3 X4)] congr_app X1 X2 X3 X4 Y Y p1 (refl X1 Y).
congr_app_2 : {X1:tp} {Y1:tm X1} {Y2:tm X1} {X2:tp} {X:tm (X1 arrow X2)} pf (== X1 Y1 Y2) -> pf (== X2 (@ X1 X2 X Y1) (@ X1 X2 X Y2)) = [X1:tp] [Y1:tm X1] [Y2:tm X1] [X2:tp] [X:tm (X1 arrow X2)] [p1:pf (== X1 Y1 Y2)] congr_app X1 X2 X X Y1 Y2 (refl (X1 arrow X2) X) p1.
congr_app2 : {X1:tp} {X2:tp} {X3:tp} {X4:tm (X1 arrow X2 arrow X3)} {X5:tm (X1 arrow X2 arrow X3)} {Y1:tm X1} {Y2:tm X1} {Z1:tm X2} {Z2:tm X2} pf (== (X1 arrow X2 arrow X3) X4 X5) -> pf (== X1 Y1 Y2) -> pf (== X2 Z1 Z2) -> pf (== X3 (@ X2 X3 (@ X1 (X2 arrow X3) X4 Y1) Z1) (@ X2 X3 (@ X1 (X2 arrow X3) X5 Y2) Z2)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm (X1 arrow X2 arrow X3)] [X5:tm (X1 arrow X2 arrow X3)] [Y1:tm X1] [Y2:tm X1] [Z1:tm X2] [Z2:tm X2] [p1:pf (== (X1 arrow X2 arrow X3) X4 X5)] [p2:pf (== X1 Y1 Y2)] [p3:pf (== X2 Z1 Z2)] congr3 (X1 arrow X2 arrow X3) X1 X2 X4 X5 Y1 Y2 Z1 Z2 ([u:tm (X1 arrow X2 arrow X3)] [v1:tm X1] [w:tm X2] == X3 (@ X2 X3 (@ X1 (X2 arrow X3) u v1) w) (@ X2 X3 (@ X1 (X2 arrow X3) X5 Y2) Z2)) p1 p2 p3 (refl X3 (@ X2 X3 (@ X1 (X2 arrow X3) X5 Y2) Z2)).
congr_app2_2 : {X1:tp} {Y1:tm X1} {Y2:tm X1} {X2:tp} {X3:tp} {X:tm (X1 arrow X3 arrow X2)} {Z:tm X3} pf (eq X1 Y1 Y2) -> pf (eq X2 (@ X3 X2 (@ X1 (X3 arrow X2) X Y1) Z) (@ X3 X2 (@ X1 (X3 arrow X2) X Y2) Z)) = [X1:tp] [Y1:tm X1] [Y2:tm X1] [X2:tp] [X3:tp] [X:tm (X1 arrow X3 arrow X2)] [Z:tm X3] [p1:pf (eq X1 Y1 Y2)] congr_app2 X1 X3 X2 X X Y1 Y2 Z Z (refl (X1 arrow X3 arrow X2) X) p1 (refl X3 Z).
congr_app3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {W1:tm (X1 arrow X2 arrow X3 arrow X4)} {W2:tm (X1 arrow X2 arrow X3 arrow X4)} {X5:tm X1} {X6:tm X1} {Y1:tm X2} {Y2:tm X2} {Z1:tm X3} {Z2:tm X3} pf (eq (X1 arrow X2 arrow X3 arrow X4) W1 W2) -> pf (eq X1 X5 X6) -> pf (eq X2 Y1 Y2) -> pf (eq X3 Z1 Z2) -> pf (eq X4 (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W1 X5) Y1) Z1) (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W2 X6) Y2) Z2)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [W1:tm (X1 arrow X2 arrow X3 arrow X4)] [W2:tm (X1 arrow X2 arrow X3 arrow X4)] [X5:tm X1] [X6:tm X1] [Y1:tm X2] [Y2:tm X2] [Z1:tm X3] [Z2:tm X3] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4) W1 W2)] [p2:pf (eq X1 X5 X6)] [p3:pf (eq X2 Y1 Y2)] [p4:pf (eq X3 Z1 Z2)] congr4 (X1 arrow X2 arrow X3 arrow X4) X1 X2 X3 W1 W2 X5 X6 Y1 Y2 Z1 Z2 ([u:tm (X1 arrow X2 arrow X3 arrow X4)] [v1:tm X1] [w:tm X2] [x3:tm X3] eq X4 (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) u v1) w) x3) (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W2 X6) Y2) Z2)) p1 p2 p3 p4 (refl X4 (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W2 X6) Y2) Z2)).
def1_i : {X1:tp} {B:tm X1 -> tform} {X:tm X1} pf (B X) -> pf (@ X1 form (lam X1 form ([x3:tm X1] B x3)) X) = [X1:tp] [B:tm X1 -> tform] [X:tm X1] [x3:pf (B X)] congr form (@ X1 form (lam X1 form ([x4:tm X1] B x4)) X) (B X) ([i1:tm form] i1) (beta form X1 ([x4:tm X1] B x4) X) x3.
def1_e : {X1:tp} {B:tm X1 -> tm form} {X:tm X1} pf (@ X1 form (lam X1 form ([x3:tm X1] B x3)) X) -> pf (B X) = [X1:tp] [B:tm X1 -> tm form] [X:tm X1] [x3:pf (@ X1 form (lam X1 form ([x3:tm X1] B x3)) X)] congr form (B X) (@ X1 form (lam X1 form ([x4:tm X1] B x4)) X) ([i1:tm form] i1) (symm form (@ X1 form (lam X1 form ([x4:tm X1] B x4)) X) (B X) (beta form X1 ([x4:tm X1] B x4) X)) x3.
def2_i : {X1:tp} {X2:tp} {Fun:tm X1 -> tm X2 -> tform} {A:tm X1} {B:tm X2} pf (Fun A B) -> pf (@ X2 form (@ X1 (X2 arrow form) (lam2 X1 X2 form ([x3:tm X1] [x4:tm X2] Fun x3 x4)) A) B) = [X1:tp] [X2:tp] [Fun:tm X1 -> tm X2 -> tform] [A:tm X1] [B:tm X2] [x3:pf (Fun A B)] congr form (@ X2 form (@ X1 (X2 arrow form) (lam2 X1 X2 form ([x4:tm X1] [x5:tm X2] Fun x4 x5)) A) B) (Fun A B) ([i1:tm form] i1) (beta2 form X2 X1 ([x4:tm X1] [x5:tm X2] Fun x4 x5) A B) x3.
def2_e : {X1:tp} {X2:tp} {Fun:tm X2 -> tm X1 -> tm form} {A:tm X2} {B:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (lam2 X2 X1 form ([x3:tm X2] [x4:tm X1] Fun x3 x4)) A) B) -> pf (Fun A B) = [X1:tp] [X2:tp] [Fun:tm X2 -> tm X1 -> tm form] [A:tm X2] [B:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (lam2 X2 X1 form ([x3:tm X2] [x4:tm X1] Fun x3 x4)) A) B)] congr form (Fun A B) (@ X1 form (@ X2 (X1 arrow form) (lam2 X2 X1 form ([x4:tm X2] [x5:tm X1] Fun x4 x5)) A) B) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (lam2 X2 X1 form ([x4:tm X2] [x5:tm X1] Fun x4 x5)) A) B) (Fun A B) (beta2 form X1 X2 ([x4:tm X2] [x5:tm X1] Fun x4 x5) A B)) x3.
def3_i : {X1:tp} {X2:tp} {X3:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} pf (Fun A B C) -> pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (lam3 X1 X2 X3 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] Fun x3 x4 x5)) A) B) C) = [X1:tp] [X2:tp] [X3:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [x3:pf (Fun A B C)] congr form (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (lam3 X1 X2 X3 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] Fun x4 x5 x6)) A) B) C) (Fun A B C) ([i1:tm form] i1) (beta3 form X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] Fun x4 x5 x6) A B C) x3.
def3_e : {X1:tp} {X2:tp} {X3:tp} {Fun:tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X3} {B:tm X2} {C:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (lam3 X3 X2 X1 form ([x3:tm X3] [x4:tm X2] [x5:tm X1] Fun x3 x4 x5)) A) B) C) -> pf (Fun A B C) = [X1:tp] [X2:tp] [X3:tp] [Fun:tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X3] [B:tm X2] [C:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (lam3 X3 X2 X1 form ([x3:tm X3] [x4:tm X2] [x5:tm X1] Fun x3 x4 x5)) A) B) C)] congr form (Fun A B C) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (lam3 X3 X2 X1 form ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6)) A) B) C) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (lam3 X3 X2 X1 form ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6)) A) B) C) (Fun A B C) (beta3 form X1 X2 X3 ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6) A B C)) x3.
def4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} pf (Fun A B C D) -> pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) (lam4 X1 X2 X3 X4 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] Fun x3 x4 x5 x6)) A) B) C) D) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [x3:pf (Fun A B C D)] congr form (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) (lam4 X1 X2 X3 X4 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) ([i1:tm form] i1) (beta4 form X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] Fun x4 x5 x6 x7) A B C D) x3.
def4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X4} {B:tm X3} {C:tm X2} {D:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (lam4 X4 X3 X2 X1 form ([x3:tm X4] [x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x3 x4 x5 x6)) A) B) C) D) -> pf (Fun A B C D) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X4] [B:tm X3] [C:tm X2] [D:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (lam4 X4 X3 X2 X1 form ([x3:tm X4] [x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x3 x4 x5 x6)) A) B) C) D)] congr form (Fun A B C D) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (lam4 X4 X3 X2 X1 form ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7)) A) B) C) D) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (lam4 X4 X3 X2 X1 form ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) (beta4 form X1 X2 X3 X4 ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7) A B C D)) x3.
def5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} pf (Fun A B C D E) -> pf (@ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) (lam5 X1 X2 X3 X4 X5 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] Fun x3 x4 x5 x6 x7)) A) B) C) D) E) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [x3:pf (Fun A B C D E)] congr form (@ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) (lam5 X1 X2 X3 X4 X5 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) ([i1:tm form] i1) (beta5 form X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] Fun x4 x5 x6 x7 x8) A B C D E) x3.
def5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X5} {B:tm X4} {C:tm X3} {D:tm X2} {E:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (lam5 X5 X4 X3 X2 X1 form ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E) -> pf (Fun A B C D E) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X5] [B:tm X4] [C:tm X3] [D:tm X2] [E:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (lam5 X5 X4 X3 X2 X1 form ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E)] congr form (Fun A B C D E) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (lam5 X5 X4 X3 X2 X1 form ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (lam5 X5 X4 X3 X2 X1 form ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) (beta5 form X1 X2 X3 X4 X5 ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8) A B C D E)) x3.
def6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} pf (Fun A B C D E F) -> pf (@ X6 form (@ X5 (X6 arrow form) (@ X4 (X5 arrow X6 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow form) (lam6 X1 X2 X3 X4 X5 X6 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [x3:pf (Fun A B C D E F)] congr form (@ X6 form (@ X5 (X6 arrow form) (@ X4 (X5 arrow X6 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow form) (lam6 X1 X2 X3 X4 X5 X6 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] Fun x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) (Fun A B C D E F) ([i1:tm form] i1) (beta6 form X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] Fun x4 x5 x6 x7 x8 x9) A B C D E F) x3.
def6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {Fun:tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X6} {B:tm X5} {C:tm X4} {D:tm X3} {E:tm X2} {F:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam6 X6 X5 X4 X3 X2 X1 form ([x3:tm X6] [x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F) -> pf (Fun A B C D E F) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [Fun:tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X6] [B:tm X5] [C:tm X4] [D:tm X3] [E:tm X2] [F:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam6 X6 X5 X4 X3 X2 X1 form ([x3:tm X6] [x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F)] congr form (Fun A B C D E F) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam6 X6 X5 X4 X3 X2 X1 form ([x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] [x9:tm X1] Fun x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam6 X6 X5 X4 X3 X2 X1 form ([x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] [x9:tm X1] Fun x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) (Fun A B C D E F) (beta6 form X1 X2 X3 X4 X5 X6 ([x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] [x9:tm X1] Fun x4 x5 x6 x7 x8 x9) A B C D E F)) x3.
def7_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} {G:tm X7} pf (Fun A B C D E F G) -> pf (@ X7 form (@ X6 (X7 arrow form) (@ X5 (X6 arrow X7 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow form) (lam7 X1 X2 X3 X4 X5 X6 X7 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [G:tm X7] [x3:pf (Fun A B C D E F G)] congr form (@ X7 form (@ X6 (X7 arrow form) (@ X5 (X6 arrow X7 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow form) (lam7 X1 X2 X3 X4 X5 X6 X7 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] Fun x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) (Fun A B C D E F G) ([i1:tm form] i1) (beta7 form X7 X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] Fun x4 x5 x6 x7 x8 x9 x10) A B C D E F G) x3.
def7_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {Fun:tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X7} {B:tm X6} {C:tm X5} {D:tm X4} {E:tm X3} {F:tm X2} {G:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam7 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] [x9:tm X1] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G) -> pf (Fun A B C D E F G) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [Fun:tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X7] [B:tm X6] [C:tm X5] [D:tm X4] [E:tm X3] [F:tm X2] [G:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam7 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] [x9:tm X1] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G)] congr form (Fun A B C D E F G) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam7 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam7 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) (Fun A B C D E F G) (beta7 form X1 X2 X3 X4 X5 X6 X7 ([x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x4 x5 x6 x7 x8 x9 x10) A B C D E F G)) x3.
def8_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} {G:tm X7} {H:tm X8} pf (Fun A B C D E F G H) -> pf (@ X8 form (@ X7 (X8 arrow form) (@ X6 (X7 arrow X8 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [G:tm X7] [H:tm X8] [x3:pf (Fun A B C D E F G H)] congr form (@ X8 form (@ X7 (X8 arrow form) (@ X6 (X7 arrow X8 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) ([i1:tm form] i1) (beta8 form X8 X7 X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H) x3.
def8_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X8} {B:tm X7} {C:tm X6} {D:tm X5} {E:tm X4} {F:tm X3} {G:tm X2} {H:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H) -> pf (Fun A B C D E F G H) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X8] [B:tm X7] [C:tm X6] [D:tm X5] [E:tm X4] [F:tm X3] [G:tm X2] [H:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H)] congr form (Fun A B C D E F G H) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) (beta8 form X1 X2 X3 X4 X5 X6 X7 X8 ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H)) x3.
def10_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} {G:tm X7} {H:tm X8} {I:tm X9} {J:tm X10} pf (Fun A B C D E F G H I J) -> pf (@ X10 form (@ X9 (X10 arrow form) (@ X8 (X9 arrow X10 arrow form) (@ X7 (X8 arrow X9 arrow X10 arrow form) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (lam10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [G:tm X7] [H:tm X8] [I:tm X9] [J:tm X10] [x3:pf (Fun A B C D E F G H I J)] congr form (@ X10 form (@ X9 (X10 arrow form) (@ X8 (X9 arrow X10 arrow form) (@ X7 (X8 arrow X9 arrow X10 arrow form) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (lam10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] [x12:tm X9] [x13:tm X10] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) (Fun A B C D E F G H I J) ([i1:tm form] i1) (beta10 form X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] [x12:tm X9] [x13:tm X10] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) A B C D E F G H I J) x3.
def10_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {Fun:tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X10} {B:tm X9} {C:tm X8} {D:tm X7} {E:tm X6} {F:tm X5} {G:tm X4} {H:tm X3} {I:tm X2} {J:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X10] [x4:tm X9] [x5:tm X8] [x6:tm X7] [x7:tm X6] [x8:tm X5] [x9:tm X4] [x10:tm X3] [x11:tm X2] [x12:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J) -> pf (Fun A B C D E F G H I J) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [Fun:tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X10] [B:tm X9] [C:tm X8] [D:tm X7] [E:tm X6] [F:tm X5] [G:tm X4] [H:tm X3] [I:tm X2] [J:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X10] [x4:tm X9] [x5:tm X8] [x6:tm X7] [x7:tm X6] [x8:tm X5] [x9:tm X4] [x10:tm X3] [x11:tm X2] [x12:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J)] congr form (Fun A B C D E F G H I J) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] [x11:tm X3] [x12:tm X2] [x13:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] [x11:tm X3] [x12:tm X2] [x13:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) (Fun A B C D E F G H I J) (beta10 form X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] [x11:tm X3] [x12:tm X2] [x13:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) A B C D E F G H I J)) x3.
def14_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} {G:tm X7} {H:tm X8} {I:tm X9} {J:tm X10} {K:tm X11} {L:tm X12} {M:tm X13} {N:tm X14} pf (Fun A B C D E F G H I J K L M N) -> pf (@ X14 form (@ X13 (X14 arrow form) (@ X12 (X13 arrow X14 arrow form) (@ X11 (X12 arrow X13 arrow X14 arrow form) (@ X10 (X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X9 (X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X8 (X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X7 (X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (lam14 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] [x13:tm X11] [x14:tm X12] [x15:tm X13] [x16:tm X14] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [G:tm X7] [H:tm X8] [I:tm X9] [J:tm X10] [K:tm X11] [L:tm X12] [M:tm X13] [N:tm X14] [x3:pf (Fun A B C D E F G H I J K L M N)] congr form (@ X14 form (@ X13 (X14 arrow form) (@ X12 (X13 arrow X14 arrow form) (@ X11 (X12 arrow X13 arrow X14 arrow form) (@ X10 (X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X9 (X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X8 (X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X7 (X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (lam14 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] [x12:tm X9] [x13:tm X10] [x14:tm X11] [x15:tm X12] [x16:tm X13] [x17:tm X14] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N) ([i1:tm form] i1) (beta14 form X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] [x12:tm X9] [x13:tm X10] [x14:tm X11] [x15:tm X12] [x16:tm X13] [x17:tm X14] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17) A B C D E F G H I J K L M N) x3.
def14_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {Fun:tm X14 -> tm X13 -> tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X14} {B:tm X13} {C:tm X12} {D:tm X11} {E:tm X10} {F:tm X9} {G:tm X8} {H:tm X7} {I:tm X6} {J:tm X5} {K:tm X4} {L:tm X3} {M:tm X2} {N:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X14] [x4:tm X13] [x5:tm X12] [x6:tm X11] [x7:tm X10] [x8:tm X9] [x9:tm X8] [x10:tm X7] [x11:tm X6] [x12:tm X5] [x13:tm X4] [x14:tm X3] [x15:tm X2] [x16:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) -> pf (Fun A B C D E F G H I J K L M N) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [Fun:tm X14 -> tm X13 -> tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X14] [B:tm X13] [C:tm X12] [D:tm X11] [E:tm X10] [F:tm X9] [G:tm X8] [H:tm X7] [I:tm X6] [J:tm X5] [K:tm X4] [L:tm X3] [M:tm X2] [N:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X14] [x4:tm X13] [x5:tm X12] [x6:tm X11] [x7:tm X10] [x8:tm X9] [x9:tm X8] [x10:tm X7] [x11:tm X6] [x12:tm X5] [x13:tm X4] [x14:tm X3] [x15:tm X2] [x16:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N)] congr form (Fun A B C D E F G H I J K L M N) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] [x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] [x17:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] [x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] [x17:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N) (beta14 form X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 ([x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] [x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] [x17:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17) A B C D E F G H I J K L M N)) x3.
gdef1_i : {T:tp} {X1:tp} {Fun:tm X1 -> tm T} {A:tm X1} {h:tm T -> tm form} pf (h (Fun A)) -> pf (h (@ X1 T (lam X1 T ([x3:tm X1] Fun x3)) A)) = [T:tp] [X1:tp] [Fun:tm X1 -> tm T] [A:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (Fun A))] congr T (@ X1 T (lam X1 T ([x4:tm X1] Fun x4)) A) (Fun A) ([x4:tm T] p1 x4) (beta T X1 ([x4:tm X1] Fun x4) A) x3.
gdef1_i2 : {T:tp} {U:tp} {X1:tp} {F1:tm X1 -> tm T} {A:tm X1} {X2:tp} {F2:tm X2 -> tm U} {B:tm X2} {h:tm T -> tm U -> tm form} pf (h (F1 A) (F2 B)) -> pf (h (@ X1 T (lam X1 T ([x3:tm X1] F1 x3)) A) (@ X2 U (lam X2 U ([x3:tm X2] F2 x3)) B)) = [T:tp] [U:tp] [X1:tp] [F1:tm X1 -> tm T] [A:tm X1] [X2:tp] [F2:tm X2 -> tm U] [B:tm X2] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (F1 A) (F2 B))] congr2 T U (@ X1 T (lam X1 T ([x4:tm X1] F1 x4)) A) (F1 A) (@ X2 U (lam X2 U ([x4:tm X2] F2 x4)) B) (F2 B) ([x4:tm T] [x5:tm U] p1 x4 x5) (beta T X1 ([x4:tm X1] F1 x4) A) (beta U X2 ([x4:tm X2] F2 x4) B) x3.
gdef1_e : {T:tp} {X1:tp} {Fun:tm X1 -> tm T} {A:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (lam X1 T ([x3:tm X1] Fun x3)) A)) -> pf (h (Fun A)) = [T:tp] [X1:tp] [Fun:tm X1 -> tm T] [A:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (lam X1 T ([x3:tm X1] Fun x3)) A))] congr T (Fun A) (@ X1 T (lam X1 T ([x4:tm X1] Fun x4)) A) ([x4:tm T] p1 x4) (symm T (@ X1 T (lam X1 T ([x4:tm X1] Fun x4)) A) (Fun A) (beta T X1 ([x4:tm X1] Fun x4) A)) x3.
gdef1_e2 : {T:tp} {U:tp} {X1:tp} {F1:tm X1 -> tm T} {A:tm X1} {X2:tp} {F2:tm X2 -> tm U} {B:tm X2} {h:tm T -> tm U -> tm form} pf (h (@ X1 T (lam X1 T ([x3:tm X1] F1 x3)) A) (@ X2 U (lam X2 U ([x3:tm X2] F2 x3)) B)) -> pf (h (F1 A) (F2 B)) = [T:tp] [U:tp] [X1:tp] [F1:tm X1 -> tm T] [A:tm X1] [X2:tp] [F2:tm X2 -> tm U] [B:tm X2] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (@ X1 T (lam X1 T ([x3:tm X1] F1 x3)) A) (@ X2 U (lam X2 U ([x3:tm X2] F2 x3)) B))] congr2 T U (F1 A) (@ X1 T (lam X1 T ([x4:tm X1] F1 x4)) A) (F2 B) (@ X2 U (lam X2 U ([x4:tm X2] F2 x4)) B) ([x4:tm T] [x5:tm U] p1 x4 x5) (symm T (@ X1 T (lam X1 T ([x4:tm X1] F1 x4)) A) (F1 A) (beta T X1 ([x4:tm X1] F1 x4) A)) (symm U (@ X2 U (lam X2 U ([x4:tm X2] F2 x4)) B) (F2 B) (beta U X2 ([x4:tm X2] F2 x4) B)) x3.
gdef2_i : {T:tp} {X1:tp} {X2:tp} {Fun:tm X1 -> tm X2 -> tm T} {A:tm X1} {B:tm X2} {h:tm T -> tm form} pf (h (Fun A B)) -> pf (h (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x3:tm X1] [x4:tm X2] Fun x3 x4)) A) B)) = [T:tp] [X1:tp] [X2:tp] [Fun:tm X1 -> tm X2 -> tm T] [A:tm X1] [B:tm X2] [p1:tm T -> tm form] [x3:pf (p1 (Fun A B))] congr T (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x4:tm X1] [x5:tm X2] Fun x4 x5)) A) B) (Fun A B) ([x4:tm T] p1 x4) (beta2 T X2 X1 ([x4:tm X1] [x5:tm X2] Fun x4 x5) A B) x3.
gdef2_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {F1:tm X1 -> tm X2 -> tm T} {A1:tm X1} {A2:tm X2} {X3:tp} {X4:tp} {F2:tm X3 -> tm X4 -> tm U} {B1:tm X3} {B2:tm X4} {h:tm T -> tm U -> tm form} pf (h (F1 A1 A2) (F2 B1 B2)) -> pf (h (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x3:tm X1] [x4:tm X2] F1 x3 x4)) A1) A2) (@ X4 U (@ X3 (X4 arrow U) (lam2 X3 X4 U ([x3:tm X3] [x4:tm X4] F2 x3 x4)) B1) B2)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [F1:tm X1 -> tm X2 -> tm T] [A1:tm X1] [A2:tm X2] [X3:tp] [X4:tp] [F2:tm X3 -> tm X4 -> tm U] [B1:tm X3] [B2:tm X4] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (F1 A1 A2) (F2 B1 B2))] congr2 T U (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x4:tm X1] [x5:tm X2] F1 x4 x5)) A1) A2) (F1 A1 A2) (@ X4 U (@ X3 (X4 arrow U) (lam2 X3 X4 U ([x4:tm X3] [x5:tm X4] F2 x4 x5)) B1) B2) (F2 B1 B2) ([x4:tm T] [x5:tm U] p1 x4 x5) (beta2 T X2 X1 ([x4:tm X1] [x5:tm X2] F1 x4 x5) A1 A2) (beta2 U X4 X3 ([x4:tm X3] [x5:tm X4] F2 x4 x5) B1 B2) x3.
gdef2_e : {T:tp} {X1:tp} {X2:tp} {Fun:tm X2 -> tm X1 -> tm T} {A:tm X2} {B:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x3:tm X2] [x4:tm X1] Fun x3 x4)) A) B)) -> pf (h (Fun A B)) = [T:tp] [X1:tp] [X2:tp] [Fun:tm X2 -> tm X1 -> tm T] [A:tm X2] [B:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x3:tm X2] [x4:tm X1] Fun x3 x4)) A) B))] congr T (Fun A B) (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x4:tm X2] [x5:tm X1] Fun x4 x5)) A) B) ([x4:tm T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x4:tm X2] [x5:tm X1] Fun x4 x5)) A) B) (Fun A B) (beta2 T X1 X2 ([x4:tm X2] [x5:tm X1] Fun x4 x5) A B)) x3.
gdef3_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm T} {A:tm X1} {B:tm X2} {C:tm X3} {h:tm T -> tm form} pf (h (Fun A B C)) -> pf (h (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] Fun x3 x4 x5)) A) B) C)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm T] [A:tm X1] [B:tm X2] [C:tm X3] [p1:tm T -> tm form] [x3:pf (p1 (Fun A B C))] congr T (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] Fun x4 x5 x6)) A) B) C) (Fun A B C) ([x4:tm T] p1 x4) (beta3 T X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] Fun x4 x5 x6) A B C) x3.
gdef3_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {X3:tp} {F1:tm X1 -> tm X2 -> tm X3 -> tm T} {A1:tm X1} {A2:tm X2} {A3:tm X3} {X4:tp} {X5:tp} {X6:tp} {F2:tm X4 -> tm X5 -> tm X6 -> tm U} {B1:tm X4} {B2:tm X5} {B3:tm X6} {h:tm T -> tm U -> tm form} pf (h (F1 A1 A2 A3) (F2 B1 B2 B3)) -> pf (h (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] F1 x3 x4 x5)) A1) A2) A3) (@ X6 U (@ X5 (X6 arrow U) (@ X4 (X5 arrow X6 arrow U) (lam3 X4 X5 X6 U ([x3:tm X4] [x4:tm X5] [x5:tm X6] F2 x3 x4 x5)) B1) B2) B3)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [X3:tp] [F1:tm X1 -> tm X2 -> tm X3 -> tm T] [A1:tm X1] [A2:tm X2] [A3:tm X3] [X4:tp] [X5:tp] [X6:tp] [F2:tm X4 -> tm X5 -> tm X6 -> tm U] [B1:tm X4] [B2:tm X5] [B3:tm X6] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (F1 A1 A2 A3) (F2 B1 B2 B3))] congr2 T U (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] F1 x4 x5 x6)) A1) A2) A3) (F1 A1 A2 A3) (@ X6 U (@ X5 (X6 arrow U) (@ X4 (X5 arrow X6 arrow U) (lam3 X4 X5 X6 U ([x4:tm X4] [x5:tm X5] [x6:tm X6] F2 x4 x5 x6)) B1) B2) B3) (F2 B1 B2 B3) ([x4:tm T] [x5:tm U] p1 x4 x5) (beta3 T X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] F1 x4 x5 x6) A1 A2 A3) (beta3 U X6 X5 X4 ([x4:tm X4] [x5:tm X5] [x6:tm X6] F2 x4 x5 x6) B1 B2 B3) x3.
gdef3_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {Fun:tm X3 -> tm X2 -> tm X1 -> tm T} {A:tm X3} {B:tm X2} {C:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x3:tm X3] [x4:tm X2] [x5:tm X1] Fun x3 x4 x5)) A) B) C)) -> pf (h (Fun A B C)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [Fun:tm X3 -> tm X2 -> tm X1 -> tm T] [A:tm X3] [B:tm X2] [C:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x3:tm X3] [x4:tm X2] [x5:tm X1] Fun x3 x4 x5)) A) B) C))] congr T (Fun A B C) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6)) A) B) C) ([x4:tm T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6)) A) B) C) (Fun A B C) (beta3 T X1 X2 X3 ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6) A B C)) x3.
gdef4_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm T} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {h:tm T -> tm form} pf (h (Fun A B C D)) -> pf (h (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] Fun x3 x4 x5 x6)) A) B) C) D)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm T] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [p1:tm T -> tm form] [x3:pf (p1 (Fun A B C D))] congr T (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) ([x4:tm T] p1 x4) (beta4 T X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] Fun x4 x5 x6 x7) A B C D) x3.
gdef4_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F1:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm T} {A1:tm X1} {A2:tm X2} {A3:tm X3} {A4:tm X4} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {F2:tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm U} {B1:tm X5} {B2:tm X6} {B3:tm X7} {B4:tm X8} {h:tm T -> tm U -> tm form} pf (h (F1 A1 A2 A3 A4) (F2 B1 B2 B3 B4)) -> pf (h (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] F1 x3 x4 x5 x6)) A1) A2) A3) A4) (@ X8 U (@ X7 (X8 arrow U) (@ X6 (X7 arrow X8 arrow U) (@ X5 (X6 arrow X7 arrow X8 arrow U) (lam4 X5 X6 X7 X8 U ([x3:tm X5] [x4:tm X6] [x5:tm X7] [x6:tm X8] F2 x3 x4 x5 x6)) B1) B2) B3) B4)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F1:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm T] [A1:tm X1] [A2:tm X2] [A3:tm X3] [A4:tm X4] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [F2:tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm U] [B1:tm X5] [B2:tm X6] [B3:tm X7] [B4:tm X8] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (F1 A1 A2 A3 A4) (F2 B1 B2 B3 B4))] congr2 T U (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] F1 x4 x5 x6 x7)) A1) A2) A3) A4) (F1 A1 A2 A3 A4) (@ X8 U (@ X7 (X8 arrow U) (@ X6 (X7 arrow X8 arrow U) (@ X5 (X6 arrow X7 arrow X8 arrow U) (lam4 X5 X6 X7 X8 U ([x4:tm X5] [x5:tm X6] [x6:tm X7] [x7:tm X8] F2 x4 x5 x6 x7)) B1) B2) B3) B4) (F2 B1 B2 B3 B4) ([x4:tm T] [x5:tm U] p1 x4 x5) (beta4 T X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] F1 x4 x5 x6 x7) A1 A2 A3 A4) (beta4 U X8 X7 X6 X5 ([x4:tm X5] [x5:tm X6] [x6:tm X7] [x7:tm X8] F2 x4 x5 x6 x7) B1 B2 B3 B4) x3.
gdef4_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T} {A:tm X4} {B:tm X3} {C:tm X2} {D:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x3:tm X4] [x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x3 x4 x5 x6)) A) B) C) D)) -> pf (h (Fun A B C D)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T] [A:tm X4] [B:tm X3] [C:tm X2] [D:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x3:tm X4] [x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x3 x4 x5 x6)) A) B) C) D))] congr T (Fun A B C D) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7)) A) B) C) D) ([x4:tm T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) (beta4 T X1 X2 X3 X4 ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7) A B C D)) x3.
gdef5_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm T} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {h:tm T -> tm form} pf (h (Fun A B C D E)) -> pf (h (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] Fun x3 x4 x5 x6 x7)) A) B) C) D) E)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm T] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [p1:tm T -> tm form] [x3:pf (p1 (Fun A B C D E))] congr T (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) ([x4:tm T] p1 x4) (beta5 T X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] Fun x4 x5 x6 x7 x8) A B C D E) x3.
gdef5_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F1:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm T} {A1:tm X1} {A2:tm X2} {A3:tm X3} {A4:tm X4} {A5:tm X5} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {F2:tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm U} {B1:tm X6} {B2:tm X7} {B3:tm X8} {B4:tm X9} {B5:tm X10} {h:tm T -> tm U -> tm form} pf (h (F1 A1 A2 A3 A4 A5) (F2 B1 B2 B3 B4 B5)) -> pf (h (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F1 x3 x4 x5 x6 x7)) A1) A2) A3) A4) A5) (@ X10 U (@ X9 (X10 arrow U) (@ X8 (X9 arrow X10 arrow U) (@ X7 (X8 arrow X9 arrow X10 arrow U) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow U) (lam5 X6 X7 X8 X9 X10 U ([x3:tm X6] [x4:tm X7] [x5:tm X8] [x6:tm X9] [x7:tm X10] F2 x3 x4 x5 x6 x7)) B1) B2) B3) B4) B5)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F1:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm T] [A1:tm X1] [A2:tm X2] [A3:tm X3] [A4:tm X4] [A5:tm X5] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [F2:tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm U] [B1:tm X6] [B2:tm X7] [B3:tm X8] [B4:tm X9] [B5:tm X10] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (F1 A1 A2 A3 A4 A5) (F2 B1 B2 B3 B4 B5))] congr2 T U (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] F1 x4 x5 x6 x7 x8)) A1) A2) A3) A4) A5) (F1 A1 A2 A3 A4 A5) (@ X10 U (@ X9 (X10 arrow U) (@ X8 (X9 arrow X10 arrow U) (@ X7 (X8 arrow X9 arrow X10 arrow U) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow U) (lam5 X6 X7 X8 X9 X10 U ([x4:tm X6] [x5:tm X7] [x6:tm X8] [x7:tm X9] [x8:tm X10] F2 x4 x5 x6 x7 x8)) B1) B2) B3) B4) B5) (F2 B1 B2 B3 B4 B5) ([x4:tm T] [x5:tm U] p1 x4 x5) (beta5 T X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] F1 x4 x5 x6 x7 x8) A1 A2 A3 A4 A5) (beta5 U X10 X9 X8 X7 X6 ([x4:tm X6] [x5:tm X7] [x6:tm X8] [x7:tm X9] [x8:tm X10] F2 x4 x5 x6 x7 x8) B1 B2 B3 B4 B5) x3.
gdef5_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T} {A:tm X5} {B:tm X4} {C:tm X3} {D:tm X2} {E:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E)) -> pf (h (Fun A B C D E)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T] [A:tm X5] [B:tm X4] [C:tm X3] [D:tm X2] [E:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E))] congr T (Fun A B C D E) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) ([x4:tm T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) (beta5 T X1 X2 X3 X4 X5 ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8) A B C D E)) x3.
gdef8_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm T} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} {G:tm X7} {H:tm X8} {h:tm T -> tm form} pf (h (Fun A B C D E F G H)) -> pf (h (@ X8 T (@ X7 (X8 arrow T) (@ X6 (X7 arrow X8 arrow T) (@ X5 (X6 arrow X7 arrow X8 arrow T) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm T] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [G:tm X7] [H:tm X8] [p1:tm T -> tm form] [x3:pf (p1 (Fun A B C D E F G H))] congr T (@ X8 T (@ X7 (X8 arrow T) (@ X6 (X7 arrow X8 arrow T) (@ X5 (X6 arrow X7 arrow X8 arrow T) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) ([x4:tm T] p1 x4) (beta8 T X8 X7 X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H) x3.
gdef8_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T} {A:tm X8} {B:tm X7} {C:tm X6} {D:tm X5} {E:tm X4} {F:tm X3} {G:tm X2} {H:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H)) -> pf (h (Fun A B C D E F G H)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T] [A:tm X8] [B:tm X7] [C:tm X6] [D:tm X5] [E:tm X4] [F:tm X3] [G:tm X2] [H:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H))] congr T (Fun A B C D E F G H) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) ([x4:tm T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) (beta8 T X1 X2 X3 X4 X5 X6 X7 X8 ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H)) x3.
def1_congr : {X1:tp} {A0:tm (X1 arrow form)} {A1:tm (X1 arrow form)} {B0:tm X1} {B1:tm X1} pf (eq (X1 arrow form) A0 A1) -> pf (eq X1 B0 B1) -> pf (@ X1 form A1 B1) -> pf (@ X1 form A0 B0) = [X1:tp] [A0:tm (X1 arrow form)] [A1:tm (X1 arrow form)] [B0:tm X1] [B1:tm X1] [p1:pf (eq (X1 arrow form) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (@ X1 form A1 B1)] congr2 (X1 arrow form) X1 A0 A1 B0 B1 ([a:tm (X1 arrow form)] [b:tm X1] @ X1 form a b) p1 p2 p3.
def1_congr2 : {X1:tp} {A:tm X1} {B:tm X1} {X:tm (X1 arrow form)} pf (eq X1 A B) -> pf (@ X1 form X B) -> pf (@ X1 form X A) = [X1:tp] [A:tm X1] [B:tm X1] [X:tm (X1 arrow form)] [p1:pf (eq X1 A B)] [p2:pf (@ X1 form X B)] def1_congr X1 X X A B (refl (X1 arrow form) X) p1 p2.
def2_congr : {X1:tp} {X2:tp} {A0:tm (X1 arrow X2 arrow form)} {A1:tm (X1 arrow X2 arrow form)} {B0:tm X1} {B1:tm X1} {C0:tm X2} {C1:tm X2} pf (eq (X1 arrow X2 arrow form) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (@ X2 form (@ X1 (X2 arrow form) A1 B1) C1) -> pf (@ X2 form (@ X1 (X2 arrow form) A0 B0) C0) = [X1:tp] [X2:tp] [A0:tm (X1 arrow X2 arrow form)] [A1:tm (X1 arrow X2 arrow form)] [B0:tm X1] [B1:tm X1] [C0:tm X2] [C1:tm X2] [p1:pf (eq (X1 arrow X2 arrow form) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (@ X2 form (@ X1 (X2 arrow form) A1 B1) C1)] congr3 (X1 arrow X2 arrow form) X1 X2 A0 A1 B0 B1 C0 C1 ([a:tm (X1 arrow X2 arrow form)] [b:tm X1] [c1:tm X2] @ X2 form (@ X1 (X2 arrow form) a b) c1) p1 p2 p3 p4.
def2_congr1 : {X1:tp} {X2:tp} {A:tm (X1 arrow X2 arrow form)} {B:tm (X1 arrow X2 arrow form)} {X:tm X1} {Y:tm X2} pf (eq (X1 arrow X2 arrow form) A B) -> pf (@ X2 form (@ X1 (X2 arrow form) B X) Y) -> pf (@ X2 form (@ X1 (X2 arrow form) A X) Y) = [X1:tp] [X2:tp] [A:tm (X1 arrow X2 arrow form)] [B:tm (X1 arrow X2 arrow form)] [X:tm X1] [Y:tm X2] [p1:pf (eq (X1 arrow X2 arrow form) A B)] [p2:pf (@ X2 form (@ X1 (X2 arrow form) B X) Y)] def2_congr X1 X2 A B X X Y Y p1 (refl X1 X) (refl X2 Y) p2.
def2_congr2 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X:tm (X1 arrow X2 arrow form)} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X1 (X2 arrow form) X B) Y) -> pf (@ X2 form (@ X1 (X2 arrow form) X A) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X:tm (X1 arrow X2 arrow form)] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X1 (X2 arrow form) X B) Y)] def2_congr X1 X2 X X A B Y Y (refl (X1 arrow X2 arrow form) X) p1 (refl X2 Y) p2.
def2_congr3 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X:tm (X2 arrow X1 arrow form)} {Y:tm X2} pf (eq X1 A B) -> pf (@ X1 form (@ X2 (X1 arrow form) X Y) B) -> pf (@ X1 form (@ X2 (X1 arrow form) X Y) A) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X:tm (X2 arrow X1 arrow form)] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X1 form (@ X2 (X1 arrow form) X Y) B)] def2_congr X2 X1 X X Y Y A B (refl (X2 arrow X1 arrow form) X) (refl X2 Y) p1 p2.
def3_congr : {X1:tp} {X2:tp} {X3:tp} {A0:tm (X1 arrow X2 arrow X3 arrow form)} {A1:tm (X1 arrow X2 arrow X3 arrow form)} {B0:tm X1} {B1:tm X1} {C0:tm X2} {C1:tm X2} {D0:tm X3} {D1:tm X3} pf (eq (X1 arrow X2 arrow X3 arrow form) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (eq X3 D0 D1) -> pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) A1 B1) C1) D1) -> pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) A0 B0) C0) D0) = [X1:tp] [X2:tp] [X3:tp] [A0:tm (X1 arrow X2 arrow X3 arrow form)] [A1:tm (X1 arrow X2 arrow X3 arrow form)] [B0:tm X1] [B1:tm X1] [C0:tm X2] [C1:tm X2] [D0:tm X3] [D1:tm X3] [p1:pf (eq (X1 arrow X2 arrow X3 arrow form) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (eq X3 D0 D1)] [p5:pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) A1 B1) C1) D1)] congr4 (X1 arrow X2 arrow X3 arrow form) X1 X2 X3 A0 A1 B0 B1 C0 C1 D0 D1 ([a:tm (X1 arrow X2 arrow X3 arrow form)] [b:tm X1] [c1:tm X2] [d:tm X3] @ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) a b) c1) d) p1 p2 p3 p4 p5.
def3_congr1 : {X1:tp} {X2:tp} {X3:tp} {A:tm (X1 arrow X2 arrow X3 arrow form)} {B:tm (X1 arrow X2 arrow X3 arrow form)} {W:tm X1} {X:tm X2} {Y:tm X3} pf (eq (X1 arrow X2 arrow X3 arrow form) A B) -> pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) B W) X) Y) -> pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) A W) X) Y) = [X1:tp] [X2:tp] [X3:tp] [A:tm (X1 arrow X2 arrow X3 arrow form)] [B:tm (X1 arrow X2 arrow X3 arrow form)] [W:tm X1] [X:tm X2] [Y:tm X3] [p1:pf (eq (X1 arrow X2 arrow X3 arrow form) A B)] [p2:pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) B W) X) Y)] def3_congr X1 X2 X3 A B W W X X Y Y p1 (refl X1 W) (refl X2 X) (refl X3 Y) p2.
def3_congr2 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {W:tm (X1 arrow X3 arrow X2 arrow form)} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) W B) X) Y) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) W A) X) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [W:tm (X1 arrow X3 arrow X2 arrow form)] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) W B) X) Y)] def3_congr X1 X3 X2 W W A B X X Y Y (refl (X1 arrow X3 arrow X2 arrow form) W) p1 (refl X3 X) (refl X2 Y) p2.
def3_congr3 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {W:tm (X3 arrow X1 arrow X2 arrow form)} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) W X) B) Y) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) W X) A) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [W:tm (X3 arrow X1 arrow X2 arrow form)] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) W X) B) Y)] def3_congr X3 X1 X2 W W X X A B Y Y (refl (X3 arrow X1 arrow X2 arrow form) W) (refl X3 X) p1 (refl X2 Y) p2.
def3_congr4 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {W:tm (X3 arrow X2 arrow X1 arrow form)} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) W X) Y) B) -> pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) W X) Y) A) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [W:tm (X3 arrow X2 arrow X1 arrow form)] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) W X) Y) B)] def3_congr X3 X2 X1 W W X X Y Y A B (refl (X3 arrow X2 arrow X1 arrow form) W) (refl X3 X) (refl X2 Y) p1 p2.
def4_congr : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A0:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)} {A1:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)} {B0:tm X1} {B1:tm X1} {C0:tm X2} {C1:tm X2} {D0:tm X3} {D1:tm X3} {E0:tm X4} {E1:tm X4} pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow form) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (eq X3 D0 D1) -> pf (eq X4 E0 E1) -> pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) A1 B1) C1) D1) E1) -> pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) A0 B0) C0) D0) E0) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A0:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)] [A1:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)] [B0:tm X1] [B1:tm X1] [C0:tm X2] [C1:tm X2] [D0:tm X3] [D1:tm X3] [E0:tm X4] [E1:tm X4] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow form) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (eq X3 D0 D1)] [p5:pf (eq X4 E0 E1)] [p6:pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) A1 B1) C1) D1) E1)] congr5 (X1 arrow X2 arrow X3 arrow X4 arrow form) X1 X2 X3 X4 A0 A1 B0 B1 C0 C1 D0 D1 E0 E1 ([a:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)] [b:tm X1] [c1:tm X2] [d:tm X3] [e:tm X4] @ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) a b) c1) d) e) p1 p2 p3 p4 p5 p6.
def4_congr1 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)} {B:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)} {V:tm X1} {W:tm X2} {X:tm X3} {Y:tm X4} pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow form) A B) -> pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) B V) W) X) Y) -> pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) A V) W) X) Y) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)] [B:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)] [V:tm X1] [W:tm X2] [X:tm X3] [Y:tm X4] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow form) A B)] [p2:pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) B V) W) X) Y)] def4_congr X1 X2 X3 X4 A B V V W W X X Y Y p1 (refl X1 V) (refl X2 W) (refl X3 X) (refl X4 Y) p2.
def4_congr2 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {X4:tp} {V:tm (X1 arrow X4 arrow X3 arrow X2 arrow form)} {W:tm X4} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) V B) W) X) Y) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) V A) W) X) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [X4:tp] [V:tm (X1 arrow X4 arrow X3 arrow X2 arrow form)] [W:tm X4] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) V B) W) X) Y)] def4_congr X1 X4 X3 X2 V V A B W W X X Y Y (refl (X1 arrow X4 arrow X3 arrow X2 arrow form) V) p1 (refl X4 W) (refl X3 X) (refl X2 Y) p2.
def4_congr3 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {X4:tp} {V:tm (X4 arrow X1 arrow X3 arrow X2 arrow form)} {W:tm X4} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) (@ X4 (X1 arrow X3 arrow X2 arrow form) V W) B) X) Y) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) (@ X4 (X1 arrow X3 arrow X2 arrow form) V W) A) X) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [X4:tp] [V:tm (X4 arrow X1 arrow X3 arrow X2 arrow form)] [W:tm X4] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) (@ X4 (X1 arrow X3 arrow X2 arrow form) V W) B) X) Y)] def4_congr X4 X1 X3 X2 V V W W A B X X Y Y (refl (X4 arrow X1 arrow X3 arrow X2 arrow form) V) (refl X4 W) p1 (refl X3 X) (refl X2 Y) p2.
def4_congr4 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {X4:tp} {V:tm (X4 arrow X3 arrow X1 arrow X2 arrow form)} {W:tm X4} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) V W) X) B) Y) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) V W) X) A) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [X4:tp] [V:tm (X4 arrow X3 arrow X1 arrow X2 arrow form)] [W:tm X4] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) V W) X) B) Y)] def4_congr X4 X3 X1 X2 V V W W X X A B Y Y (refl (X4 arrow X3 arrow X1 arrow X2 arrow form) V) (refl X4 W) (refl X3 X) p1 (refl X2 Y) p2.
def4_congr5 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {X4:tp} {V:tm (X4 arrow X3 arrow X2 arrow X1 arrow form)} {W:tm X4} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) V W) X) Y) B) -> pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) V W) X) Y) A) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [X4:tp] [V:tm (X4 arrow X3 arrow X2 arrow X1 arrow form)] [W:tm X4] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) V W) X) Y) B)] def4_congr X4 X3 X2 X1 V V W W X X Y Y A B (refl (X4 arrow X3 arrow X2 arrow X1 arrow form) V) (refl X4 W) (refl X3 X) (refl X2 Y) p1 p2.
def5_congr : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A0:tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form)} {A1:tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form)} {B0:tm X1} {B1:tm X1} {C0:tm X2} {C1:tm X2} {D0:tm X3} {D1:tm X3} {E0:tm X4} {E1:tm X4} {F0:tm X5} {F1:tm X5} pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (eq X3 D0 D1) -> pf (eq X4 E0 E1) -> pf (eq X5 F0 F1) -> pf (@ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) A1 B1) C1) D1) E1) F1) -> pf (@ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) A0 B0) C0) D0) E0) F0) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A0:tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form)] [A1:tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form)] [B0:tm X1] [B1:tm X1] [C0:tm X2] [C1:tm X2] [D0:tm X3] [D1:tm X3] [E0:tm X4] [E1:tm X4] [F0:tm X5] [F1:tm X5] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (eq X3 D0 D1)] [p5:pf (eq X4 E0 E1)] [p6:pf (eq X5 F0 F1)] [p7:pf (@ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) A1 B1) C1) D1) E1) F1)] congr5 (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form) X1 X2 X3 X4 A0 A1 B0 B1 C0 C1 D0 D1 E0 E1 ([a:tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form)] [b:tm X1] [c1:tm X2] [d:tm X3] [e:tm X4] @ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) a b) c1) d) e) F0) p1 p2 p3 p4 p5 (congr X5 F0 F1 ([f:tm X5] @ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) A1 B1) C1) D1) E1) f) p6 p7).
def5_congr2 : {X1:tp} {B0:tm X1} {B1:tm X1} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:tm (X1 arrow X5 arrow X4 arrow X3 arrow X2 arrow form)} {C:tm X5} {D:tm X4} {E:tm X3} {F:tm X2} pf (== X1 B0 B1) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow form) (@ X1 (X5 arrow X4 arrow X3 arrow X2 arrow form) A B1) C) D) E) F) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow form) (@ X1 (X5 arrow X4 arrow X3 arrow X2 arrow form) A B0) C) D) E) F) = [X1:tp] [B0:tm X1] [B1:tm X1] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:tm (X1 arrow X5 arrow X4 arrow X3 arrow X2 arrow form)] [C:tm X5] [D:tm X4] [E:tm X3] [F:tm X2] [p1:pf (== X1 B0 B1)] [p2:pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow form) (@ X1 (X5 arrow X4 arrow X3 arrow X2 arrow form) A B1) C) D) E) F)] def5_congr X1 X5 X4 X3 X2 A A B0 B1 C C D D E E F F (refl (X1 arrow X5 arrow X4 arrow X3 arrow X2 arrow form) A) p1 (refl X5 C) (refl X4 D) (refl X3 E) (refl X2 F) p2.
def5_congr3 : {X1:tp} {C0:tm X1} {C1:tm X1} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:tm (X5 arrow X1 arrow X4 arrow X3 arrow X2 arrow form)} {B:tm X5} {D:tm X4} {E:tm X3} {F:tm X2} pf (== X1 C0 C1) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) (@ X5 (X1 arrow X4 arrow X3 arrow X2 arrow form) A B) C1) D) E) F) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) (@ X5 (X1 arrow X4 arrow X3 arrow X2 arrow form) A B) C0) D) E) F) = [X1:tp] [C0:tm X1] [C1:tm X1] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:tm (X5 arrow X1 arrow X4 arrow X3 arrow X2 arrow form)] [B:tm X5] [D:tm X4] [E:tm X3] [F:tm X2] [p1:pf (== X1 C0 C1)] [p2:pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) (@ X5 (X1 arrow X4 arrow X3 arrow X2 arrow form) A B) C1) D) E) F)] def5_congr X5 X1 X4 X3 X2 A A B B C0 C1 D D E E F F (refl (X5 arrow X1 arrow X4 arrow X3 arrow X2 arrow form) A) (refl X5 B) p1 (refl X4 D) (refl X3 E) (refl X2 F) p2.
def5_congr5 : {X1:tp} {E0:tm X1} {E1:tm X1} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:tm (X5 arrow X4 arrow X3 arrow X1 arrow X2 arrow form)} {B:tm X5} {C:tm X4} {D:tm X3} {F:tm X2} pf (== X1 E0 E1) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X1 arrow X2 arrow form) A B) C) D) E1) F) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X1 arrow X2 arrow form) A B) C) D) E0) F) = [X1:tp] [E0:tm X1] [E1:tm X1] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:tm (X5 arrow X4 arrow X3 arrow X1 arrow X2 arrow form)] [B:tm X5] [C:tm X4] [D:tm X3] [F:tm X2] [p1:pf (== X1 E0 E1)] [p2:pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X1 arrow X2 arrow form) A B) C) D) E1) F)] def5_congr X5 X4 X3 X1 X2 A A B B C C D D E0 E1 F F (refl (X5 arrow X4 arrow X3 arrow X1 arrow X2 arrow form) A) (refl X5 B) (refl X4 C) (refl X3 D) p1 (refl X2 F) p2.
imp_i : {A:tform} {B:tform} (pf A -> pf B) -> pf (A imp B) = [A:tform] [B:tform] [x3:pf A -> pf B] _imp_i A B ([x4:pf A] x3 x4).
imp2_i : {A:tform} {B:tform} {C:tform} (pf A -> pf B -> pf C) -> pf (A imp B imp C) = [A:tform] [B:tform] [C:tform] [p1:pf A -> pf B -> pf C] imp_i A (B imp C) ([p2:pf A] imp_i B C ([x3:pf B] p1 p2 x3)).
imp3_i : {A:tform} {B:tform} {C:tform} {D:tform} (pf A -> pf B -> pf C -> pf D) -> pf (A imp B imp C imp D) = [A:tform] [B:tform] [C:tform] [D:tform] [p1:pf A -> pf B -> pf C -> pf D] imp_i A (B imp C imp D) ([p2:pf A] imp2_i B C D ([x3:pf B] [x4:pf C] p1 p2 x3 x4)).
imp4_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} (pf A -> pf B -> pf C -> pf D -> pf E) -> pf (A imp B imp C imp D imp E) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E] imp_i A (B imp C imp D imp E) ([p2:pf A] imp3_i B C D E ([x3:pf B] [x4:pf C] [x5:pf D] p1 p2 x3 x4 x5)).
imp5_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F) -> pf (A imp B imp C imp D imp E imp F) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F] imp_i A (B imp C imp D imp E imp F) ([p2:pf A] imp4_i B C D E F ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] p1 p2 x3 x4 x5 x6)).
imp6_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G) -> pf (A imp B imp C imp D imp E imp F imp G) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G] imp_i A (B imp C imp D imp E imp F imp G) ([p2:pf A] imp5_i B C D E F G ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] p1 p2 x3 x4 x5 x6 x7)).
imp7_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H) -> pf (A imp B imp C imp D imp E imp F imp G imp H) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H] imp_i A (B imp C imp D imp E imp F imp G imp H) ([p2:pf A] imp6_i B C D E F G H ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] p1 p2 x3 x4 x5 x6 x7 x8)).
imp8_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I) -> pf (A imp B imp C imp D imp E imp F imp G imp H imp I) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I] imp_i A (B imp C imp D imp E imp F imp G imp H imp I) ([p2:pf A] imp7_i B C D E F G H I ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] p1 p2 x3 x4 x5 x6 x7 x8 x9)).
imp9_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J) -> pf (A imp B imp C imp D imp E imp F imp G imp H imp I imp J) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J] imp_i A (B imp C imp D imp E imp F imp G imp H imp I imp J) ([p2:pf A] imp8_i B C D E F G H I J ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] p1 p2 x3 x4 x5 x6 x7 x8 x9 x10)).
imp_e : {A:tform} {B:tform} pf (A imp B) -> pf A -> pf B = [A:tform] [B:tform] [x3:pf (A imp B)] [x4:pf A] _imp_e A B x3 x4.
imp2_e : {A:tform} {B:tform} {C:tform} pf (A imp B imp C) -> pf A -> pf B -> pf C = [A:tform] [B:tform] [C:tform] [p1:pf (A imp B imp C)] [pA:pf A] [pX:pf B] imp_e B C (imp_e A (B imp C) p1 pA) pX.
imp3_e : {A:tform} {B:tform} {C:tform} {D:tform} pf (A imp B imp C imp D) -> pf A -> pf B -> pf C -> pf D = [A:tform] [B:tform] [C:tform] [D:tform] [p1:pf (A imp B imp C imp D)] [pA:pf A] [pX:pf B] [x3:pf C] imp2_e B C D (imp_e A (B imp C imp D) p1 pA) pX x3.
imp4_e : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} pf (A imp B imp C imp D imp E) -> pf A -> pf B -> pf C -> pf D -> pf E = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [p1:pf (A imp B imp C imp D imp E)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] imp3_e B C D E (imp_e A (B imp C imp D imp E) p1 pA) pX x3 x4.
imp5_e : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} pf (A imp B imp C imp D imp E imp F) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [p1:pf (A imp B imp C imp D imp E imp F)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] imp4_e B C D E F (imp_e A (B imp C imp D imp E imp F) p1 pA) pX x3 x4 x5.
imp6_e : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} pf (A imp B imp C imp D imp E imp F imp G) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [p1:pf (A imp B imp C imp D imp E imp F imp G)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] [x6:pf F] imp5_e B C D E F G (imp_e A (B imp C imp D imp E imp F imp G) p1 pA) pX x3 x4 x5 x6.
imp7_e : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} pf (A imp B imp C imp D imp E imp F imp G imp H) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [p1:pf (A imp B imp C imp D imp E imp F imp G imp H)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] [x6:pf F] [x7:pf G] imp6_e B C D E F G H (imp_e A (B imp C imp D imp E imp F imp G imp H) p1 pA) pX x3 x4 x5 x6 x7.
imp8_e : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} pf (A imp B imp C imp D imp E imp F imp G imp H imp I) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [p1:pf (A imp B imp C imp D imp E imp F imp G imp H imp I)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] [x6:pf F] [x7:pf G] [x8:pf H] imp7_e B C D E F G H I (imp_e A (B imp C imp D imp E imp F imp G imp H imp I) p1 pA) pX x3 x4 x5 x6 x7 x8.
imp_true : {B:tform} {A:tform} pf B -> pf (A imp B) = [B:tform] [A:tform] [p1:pf B] imp_i A B ([p2:pf A] p1).
true_i : pf true = imp_i false false ([x3:pf false] x3).
false_e : {A:tform} pf false -> pf A = [A:tform] [p1:pf false] forall_e form ([x3:tm form] x3) p1 A.
and_i : {A:tform} {B:tform} pf A -> pf B -> pf (A and B) = [A:tform] [B:tform] [p1:pf A] [p2:pf B] forall_i form ([x3:tm form] (A imp B imp x3) imp x3) ([x3:tm form] imp_i (A imp B imp x3) x3 ([p3:pf (A imp B imp x3)] imp_e B x3 (imp_e A (B imp x3) p3 p1) p2)).
and2_i : {X1:tm form} {X2:tm form} pf X1 -> pf X2 -> pf (X1 and X2) = [X1:tm form] [X2:tm form] [x3:pf X1] [x4:pf X2] and_i X1 X2 x3 x4.
and3_i : {A:tform} {B:tform} {C:tform} pf A -> pf B -> pf C -> pf (A and B and C) = [A:tform] [B:tform] [C:tform] [p1:pf A] [p2:pf B] [p3:pf C] and_i A (B and C) p1 (and_i B C p2 p3).
and4_i : {A:tform} {B:tform} {C:tform} {D:tform} pf A -> pf B -> pf C -> pf D -> pf (A and B and C and D) = [A:tform] [B:tform] [C:tform] [D:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] and_i A (B and C and D) p1 (and3_i B C D p2 p3 p4).
and5_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf (A and B and C and D and E) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] and_i A (B and C and D and E) p1 (and4_i B C D E p2 p3 p4 p5).
and6_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf (A and B and C and D and E and F) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] and_i A (B and C and D and E and F) p1 (and5_i B C D E F p2 p3 p4 p5 p6).
and7_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf (A and B and C and D and E and F and G) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] and_i A (B and C and D and E and F and G) p1 (and6_i B C D E F G p2 p3 p4 p5 p6 p7).
and8_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf (A and B and C and D and E and F and G and H) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] and_i A (B and C and D and E and F and G and H) p1 (and7_i B C D E F G H p2 p3 p4 p5 p6 p7 p8).
and9_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf (A and B and C and D and E and F and G and H and I) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] and_i A (B and C and D and E and F and G and H and I) p1 (and8_i B C D E F G H I p2 p3 p4 p5 p6 p7 p8 p9).
and10_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf (A and B and C and D and E and F and G and H and I and J) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] and_i A (B and C and D and E and F and G and H and I and J) p1 (and9_i B C D E F G H I J p2 p3 p4 p5 p6 p7 p8 p9 p10).
and11_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf (A and B and C and D and E and F and G and H and I and J and K) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] and_i A (B and C and D and E and F and G and H and I and J and K) p1 (and10_i B C D E F G H I J K p2 p3 p4 p5 p6 p7 p8 p9 p10 p11).
and12_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf (A and B and C and D and E and F and G and H and I and J and K and L) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] and_i A (B and C and D and E and F and G and H and I and J and K and L) p1 (and11_i B C D E F G H I J K L p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12).
and13_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf (A and B and C and D and E and F and G and H and I and J and K and L and M) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] and_i A (B and C and D and E and F and G and H and I and J and K and L and M) p1 (and12_i B C D E F G H I J K L M p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13).
and14_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} {N:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf N -> pf (A and B and C and D and E and F and G and H and I and J and K and L and M and N) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [N:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] [p14:pf N] and_i A (B and C and D and E and F and G and H and I and J and K and L and M and N) p1 (and13_i B C D E F G H I J K L M N p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14).
and_e1 : {A:tform} {B:tform} pf (A and B) -> pf A = [A:tform] [B:tform] [p1:pf (A and B)] imp_e (A imp B imp A) A (forall_e form ([x3:tm form] (A imp B imp x3) imp x3) p1 A) (imp_i A (B imp A) ([p2:pf A] imp_i B A ([p3:pf B] p2))).
and_e2 : {A:tform} {B:tform} pf (A and B) -> pf B = [A:tform] [B:tform] [p1:pf (A and B)] imp_e (A imp B imp B) B (forall_e form ([x3:tm form] (A imp B imp x3) imp x3) p1 B) (imp_i A (B imp B) ([p2:pf A] imp_i B B ([p3:pf B] p3))).
and3_e1 : {A:tform} {B:tform} {C:tform} pf (A and B and C) -> pf A = [A:tform] [B:tform] [C:tform] [x3:pf (A and B and C)] and_e1 A (B and C) x3.
and3_e2 : {A:tform} {B:tform} {C:tform} pf (A and B and C) -> pf B = [A:tform] [B:tform] [C:tform] [p1:pf (A and B and C)] and_e1 B C (and_e2 A (B and C) p1).
and3_e3 : {A:tform} {B:tform} {C:tform} pf (A and B and C) -> pf C = [A:tform] [B:tform] [C:tform] [p1:pf (A and B and C)] and_e2 B C (and_e2 A (B and C) p1).
and4_e4 : {A:tform} {B:tform} {C:tform} {D:tform} pf (A and B and C and D) -> pf D = [A:tform] [B:tform] [C:tform] [D:tform] [p1:pf (A and B and C and D)] and_e2 C D (and_e2 B (C and D) (and_e2 A (B and C and D) p1)).
and_l : {A:tform} {B:tform} {C:tform} pf (A and B) -> (pf A -> pf B -> pf C) -> pf C = [A:tform] [B:tform] [C:tform] [p1:pf (A and B)] [p2:pf A -> pf B -> pf C] imp_e B C (imp_e A (B imp C) (imp_i A (B imp C) ([p3:pf A] imp_i B C ([x3:pf B] p2 p3 x3))) (and_e1 A B p1)) (and_e2 A B p1).
and3_l : {A:tform} {B:tform} {C:tform} {D:tform} pf (A and B and C) -> (pf A -> pf B -> pf C -> pf D) -> pf D = [A:tform] [B:tform] [C:tform] [D:tform] [p1:pf (A and B and C)] [p2:pf A -> pf B -> pf C -> pf D] and_l A (B and C) D p1 ([p3:pf A] [p4:pf (B and C)] and_l B C D p4 ([p5:pf B] [p6:pf C] p2 p3 p5 p6)).
and4_l : {A:tform} {B:tform} {C:tform} {D:tform} {Z:tform} pf (A and B and C and D) -> (pf A -> pf B -> pf C -> pf D -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [Z:tform] [p1:pf (A and B and C and D)] [p2:pf A -> pf B -> pf C -> pf D -> pf Z] and_l A (B and C and D) Z p1 ([p3:pf A] [p4:pf (B and C and D)] and3_l B C D Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] p2 p3 x3 x4 x5)).
and5_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {Z:tform} pf (A and B and C and D and E) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [Z:tform] [p1:pf (A and B and C and D and E)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf Z] and_l A (B and C and D and E) Z p1 ([p3:pf A] [p4:pf (B and C and D and E)] and4_l B C D E Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] p2 p3 x3 x4 x5 x6)).
and6_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {Z:tform} pf (A and B and C and D and E and F) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [Z:tform] [p1:pf (A and B and C and D and E and F)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Z] and_l A (B and C and D and E and F) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F)] and5_l B C D E F Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] p2 p3 x3 x4 x5 x6 x7)).
and7_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {Z:tform} pf (A and B and C and D and E and F and G) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Z] and_l A (B and C and D and E and F and G) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G)] and6_l B C D E F G Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] p2 p3 x3 x4 x5 x6 x7 x8)).
and8_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {Z:tform} pf (A and B and C and D and E and F and G and H) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Z] and_l A (B and C and D and E and F and G and H) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H)] and7_l B C D E F G H Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] p2 p3 x3 x4 x5 x6 x7 x8 x9)).
and9_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Z] and_l A (B and C and D and E and F and G and H and I) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I)] and8_l B C D E F G H I Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10)).
and10_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I and J) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I and J)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Z] and_l A (B and C and D and E and F and G and H and I and J) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J)] and9_l B C D E F G H I J Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11)).
and11_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I and J and K) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I and J and K)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K)] and10_l B C D E F G H I J K Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)).
and12_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I and J and K and L) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I and J and K and L)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K and L) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K and L)] and11_l B C D E F G H I J K L Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] [x13:pf L] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)).
and13_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I and J and K and L and M) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I and J and K and L and M)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K and L and M) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K and L and M)] and12_l B C D E F G H I J K L M Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] [x13:pf L] [x14:pf M] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14)).
and14_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} {N:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I and J and K and L and M and N) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf N -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [N:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I and J and K and L and M and N)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf N -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K and L and M and N) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K and L and M and N)] and13_l B C D E F G H I J K L M N Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] [x13:pf L] [x14:pf M] [x15:pf N] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15)).
or_e : {A:tform} {B:tform} {C:tform} pf (A or B) -> (pf A -> pf C) -> (pf B -> pf C) -> pf C = [A:tform] [B:tform] [C:tform] [p1:pf (A or B)] [p2:pf A -> pf C] [p3:pf B -> pf C] imp_e (B imp C) C (imp_e (A imp C) ((B imp C) imp C) (forall_e form ([x3:tm form] (A imp x3) imp (B imp x3) imp x3) p1 C) (imp_i A C ([x3:pf A] p2 x3))) (imp_i B C ([x3:pf B] p3 x3)).
or_i1 : {A:tform} {B:tform} pf A -> pf (A or B) = [A:tform] [B:tform] [p1:pf A] forall_i form ([x3:tm form] (A imp x3) imp (B imp x3) imp x3) ([C:tm form] imp_i (A imp C) ((B imp C) imp C) ([p2:pf (A imp C)] imp_i (B imp C) C ([p3:pf (B imp C)] imp_e A C p2 p1))).
or_i2 : {B:tform} {A:tform} pf B -> pf (A or B) = [B:tform] [A:tform] [p1:pf B] forall_i form ([x3:tm form] (A imp x3) imp (B imp x3) imp x3) ([C:tm form] imp_i (A imp C) ((B imp C) imp C) ([p2:pf (A imp C)] imp_i (B imp C) C ([p3:pf (B imp C)] imp_e B C p3 p1))).
or3_e : {A1:tform} {A2:tform} {A3:tform} {C:tform} pf (A1 or A2 or A3) -> (pf A1 -> pf C) -> (pf A2 -> pf C) -> (pf A3 -> pf C) -> pf C = [A1:tform] [A2:tform] [A3:tform] [C:tform] [p1:pf (A1 or A2 or A3)] [q1:pf A1 -> pf C] [q2:pf A2 -> pf C] [q3:pf A3 -> pf C] or_e A1 (A2 or A3) C p1 ([x3:pf A1] q1 x3) ([p2:pf (A2 or A3)] or_e A2 A3 C p2 ([x3:pf A2] q2 x3) ([x3:pf A3] q3 x3)).
or3_i1 : {A:tform} {B:tform} {C:tform} pf A -> pf (A or B or C) = [A:tform] [B:tform] [C:tform] [q:pf A] or_i1 A (B or C) q.
or3_i2 : {B:tform} {A:tform} {C:tform} pf B -> pf (A or B or C) = [B:tform] [A:tform] [C:tform] [q:pf B] or_i2 (B or C) A (or_i1 B C q).
or3_i3 : {C:tform} {A:tform} {B:tform} pf C -> pf (A or B or C) = [C:tform] [A:tform] [B:tform] [q:pf C] or_i2 (B or C) A (or_i2 C B q).
or4_e : {A1:tform} {A2:tform} {A3:tform} {A4:tform} {C:tform} pf (A1 or A2 or A3 or A4) -> (pf A1 -> pf C) -> (pf A2 -> pf C) -> (pf A3 -> pf C) -> (pf A4 -> pf C) -> pf C = [A1:tform] [A2:tform] [A3:tform] [A4:tform] [C:tform] [p1:pf (A1 or A2 or A3 or A4)] [q1:pf A1 -> pf C] [q2:pf A2 -> pf C] [q3:pf A3 -> pf C] [q4:pf A4 -> pf C] or3_e A1 A2 (A3 or A4) C p1 ([x3:pf A1] q1 x3) ([x3:pf A2] q2 x3) ([p2:pf (A3 or A4)] or_e A3 A4 C p2 ([x3:pf A3] q3 x3) ([x3:pf A4] q4 x3)).
or4_i2 : {B:tform} {A:tform} {C:tform} {D:tform} pf B -> pf (A or B or C or D) = [B:tform] [A:tform] [C:tform] [D:tform] [q:pf B] or_i2 (B or C or D) A (or3_i1 B C D q).
or4_i3 : {C:tform} {A:tform} {B:tform} {D:tform} pf C -> pf (A or B or C or D) = [C:tform] [A:tform] [B:tform] [D:tform] [q:pf C] or_i2 (B or C or D) A (or3_i2 C B D q).
or_e1 : {A:tform} {B:tform} pf (A or B) -> pf (not B) -> pf A = [A:tform] [B:tform] [p1:pf (A or B)] [p2:pf (not B)] or_e A B A p1 ([p3:pf A] p3) ([p4:pf B] false_e A (imp_e B false p2 p4)).
or_e2 : {A:tform} {B:tform} pf (A or B) -> pf (not A) -> pf B = [A:tform] [B:tform] [p1:pf (A or B)] [p2:pf (not A)] or_e A B B p1 ([p3:pf A] false_e B (imp_e A false p2 p3)) ([p4:pf B] p4).
or_symm : {A:tform} {B:tform} pf (A or B) -> pf (B or A) = [A:tform] [B:tform] [p1:pf (A or B)] or_e A B (B or A) p1 ([p2:pf A] or_i2 A B p2) ([p2:pf B] or_i1 B A p2).
not_i : {A:tform} (pf A -> pf false) -> pf (not A) = [A:tform] [p1:pf A -> pf false] imp_i A false ([x3:pf A] p1 x3).
not_e : {A:tform} pf (not A) -> pf A -> pf false = [A:tform] [x3:pf (not A)] [x4:pf A] imp_e A false x3 x4.
not_e' : {A:tform} {B:tform} pf (not A) -> pf A -> pf B = [A:tform] [B:tform] [p1:pf (not A)] [p2:pf A] false_e B (not_e A p1 p2).
not_ei : {B:tform} {A:tform} pf (not B) -> (pf A -> pf B) -> pf (not A) = [B:tform] [A:tform] [p1:pf (not B)] [l8:pf A -> pf B] imp_i A false ([p2:pf A] imp_e B false p1 (l8 p2)).
not_not_i : {B:tform} pf B -> pf (not (not B)) = [B:tform] [p1:pf B] not_i (not B) ([p2:pf (not B)] not_e B p2 p1).
not_false : pf (not false) = not_i false ([p1:pf false] p1).
equiv_i : {A:tform} {B:tform} pf (A imp B) -> pf (B imp A) -> pf (A equiv B) = [A:tform] [B:tform] [x3:pf (A imp B)] [x4:pf (B imp A)] and_i (A imp B) (B imp A) x3 x4.
equiv_i2 : {A:tform} {B:tform} (pf A -> pf B) -> (pf B -> pf A) -> pf (A equiv B) = [A:tform] [B:tform] [q1:pf A -> pf B] [q2:pf B -> pf A] equiv_i A B (imp_i A B ([p3:pf A] q1 p3)) (imp_i B A ([p4:pf B] q2 p4)).
equiv_e1 : {A:tform} {B:tform} pf (A equiv B) -> pf A -> pf B = [A:tform] [B:tform] [q1:pf (A equiv B)] [q2:pf A] imp_e A B (and_e1 (A imp B) (B imp A) q1) q2.
equiv_e2 : {A:tform} {B:tform} pf (A equiv B) -> pf B -> pf A = [A:tform] [B:tform] [q1:pf (A equiv B)] [q2:pf B] imp_e B A (and_e2 (A imp B) (B imp A) q1) q2.
equiv_symm : {A:tform} {B:tform} pf (A equiv B) -> pf (B equiv A) = [A:tform] [B:tform] [q:pf (A equiv B)] and_i (B imp A) (A imp B) (and_e2 (A imp B) (B imp A) q) (and_e1 (A imp B) (B imp A) q).
equiv_refl : {A:tform} pf (A equiv A) = [A:tform] equiv_i2 A A ([q:pf A] q) ([q:pf A] q).
equiv_trans : {A:tform} {B:tform} {C:tform} pf (A equiv B) -> pf (B equiv C) -> pf (A equiv C) = [A:tform] [B:tform] [C:tform] [p1:pf (A equiv B)] [p2:pf (B equiv C)] equiv_i2 A C ([q:pf A] equiv_e1 B C p2 (equiv_e1 A B p1 q)) ([q:pf C] equiv_e2 A B p1 (equiv_e2 B C p2 q)).
equiv_true : {A:tform} {B:tform} pf A -> pf B -> pf (A equiv B) = [A:tform] [B:tform] [p1:pf A] [p2:pf B] equiv_i A B (imp_i A B ([p3:pf A] p2)) (imp_i B A ([p4:pf B] p1)).
equiv_false : {A:tform} {B:tform} pf (not A) -> pf (not B) -> pf (A equiv B) = [A:tform] [B:tform] [p1:pf (not A)] [p2:pf (not B)] equiv_i2 A B ([p3:pf A] not_e' A B p1 p3) ([p3:pf B] not_e' B A p2 p3).
equiv_not : {A:tform} {B:tform} pf (A equiv B) -> pf (not A equiv not B) = [A:tform] [B:tform] [p1:pf (A equiv B)] equiv_i2 (not A) (not B) ([p2:pf (not A)] not_i B ([p3:pf B] not_e A p2 (equiv_e2 A B p1 p3))) ([p2:pf (not B)] not_i A ([p3:pf A] not_e B p2 (equiv_e1 A B p1 p3))).
equiv_or_false : {B:tform} {A:tform} pf (not B) -> pf (A or B equiv A) = [B:tform] [A:tform] [p1:pf (not B)] equiv_i2 (A or B) A ([p2:pf (A or B)] or_e A B A p2 ([p3:pf A] p3) ([p4:pf B] false_e A (not_e B p1 p4))) ([x3:pf A] or_i1 A B x3).
equiv_or_false1 : {A:tform} {B:tform} pf (not A) -> pf (A or B equiv B) = [A:tform] [B:tform] [p1:pf (not A)] equiv_i2 (A or B) B ([p2:pf (A or B)] or_e A B B p2 ([p4:pf A] false_e B (not_e A p1 p4)) ([p5:pf B] p5)) ([x3:pf B] or_i2 B A x3).
equiv_or : {A:tform} {A':tform} {B:tform} {B':tform} pf (A equiv A') -> pf (B equiv B') -> pf (A or B equiv A' or B') = [A:tform] [A':tform] [B:tform] [B':tform] [p1:pf (A equiv A')] [p2:pf (B equiv B')] equiv_i (A or B) (A' or B') (imp_i (A or B) (A' or B') ([p3:pf (A or B)] or_e A B (A' or B') p3 ([p4:pf A] or_i1 A' B' (equiv_e1 A A' p1 p4)) ([p5:pf B] or_i2 B' A' (equiv_e1 B B' p2 p5)))) (imp_i (A' or B') (A or B) ([p4:pf (A' or B')] or_e A' B' (A or B) p4 ([p6:pf A'] or_i1 A B (equiv_e2 A A' p1 p6)) ([p7:pf B'] or_i2 B A (equiv_e2 B B' p2 p7)))).
equiv_and_true : {B:tform} {A:tform} pf B -> pf (A and B equiv A) = [B:tform] [A:tform] [p1:pf B] equiv_i2 (A and B) A ([x3:pf (A and B)] and_e1 A B x3) ([p3:pf A] and_i A B p3 p1).
equiv_and_true1 : {A:tform} {B:tform} pf A -> pf (A and B equiv B) = [A:tform] [B:tform] [p1:pf A] equiv_i2 (A and B) B ([x3:pf (A and B)] and_e2 A B x3) ([p3:pf B] and_i A B p1 p3).
equiv_and : {A:tform} {A':tform} {B:tform} {B':tform} pf (A equiv A') -> (pf A -> pf (B equiv B')) -> pf (A and B equiv A' and B') = [A:tform] [A':tform] [B:tform] [B':tform] [q1:pf (A equiv A')] [Fq:pf A -> pf (B equiv B')] equiv_i (A and B) (A' and B') (imp_i (A and B) (A' and B') ([Z:pf (A and B)] and_i A' B' (equiv_e1 A A' q1 (and_e1 A B Z)) (equiv_e1 B B' (imp_e A (B equiv B') (imp_i A (B equiv B') ([x3:pf A] Fq x3)) (and_e1 A B Z)) (and_e2 A B Z)))) (imp_i (A' and B') (A and B) ([Z:pf (A' and B')] and_i A B (equiv_e2 A A' q1 (and_e1 A' B' Z)) (equiv_e2 B B' (imp_e A (B equiv B') (imp_i A (B equiv B') ([x3:pf A] Fq x3)) (equiv_e2 A A' q1 (and_e1 A' B' Z))) (and_e2 A' B' Z)))).
equiv_and' : {A:tform} {A':tform} {B:tform} {B':tform} pf (A equiv A') -> pf (B equiv B') -> pf (A and B equiv A' and B') = [A:tform] [A':tform] [B:tform] [B':tform] [q1:pf (A equiv A')] [Fq:pf (B equiv B')] equiv_i2 (A and B) (A' and B') ([p1:pf (A and B)] and_i A' B' (equiv_e1 A A' q1 (and_e1 A B p1)) (equiv_e1 B B' Fq (and_e2 A B p1))) ([p1:pf (A' and B')] and_i A B (equiv_e2 A A' q1 (and_e1 A' B' p1)) (equiv_e2 B B' Fq (and_e2 A' B' p1))).
equiv_and_elim : {A:tform} {B:tform} {B':tform} pf A -> pf (A and B equiv A and B') -> pf (B equiv B') = [A:tform] [B:tform] [B':tform] [p1:pf A] [p2:pf (A and B equiv A and B')] equiv_i2 B B' ([p3:pf B] and_e2 A B' (equiv_e1 (A and B) (A and B') p2 (and_i A B p1 p3))) ([p4:pf B'] and_e2 A B (equiv_e2 (A and B) (A and B') p2 (and_i A B' p1 p4))).
equiv_forall : {X1:tp} {A:tm X1 -> tform} {B:tm X1 -> tform} ({x3:tm X1} pf (A x3 equiv B x3)) -> pf (forall X1 ([x3:tm X1] A x3) equiv forall X1 ([x3:tm X1] B x3)) = [X1:tp] [A:tm X1 -> tform] [B:tm X1 -> tform] [p1:{x4:tm X1} pf (A x4 equiv B x4)] equiv_i2 (forall X1 ([x3:tm X1] A x3)) (forall X1 ([x3:tm X1] B x3)) ([p2:pf (forall X1 ([x3:tm X1] A x3))] forall_i X1 ([x3:tm X1] B x3) ([x5:tm X1] equiv_e1 (A x5) (B x5) (p1 x5) (forall_e X1 ([x3:tm X1] A x3) p2 x5))) ([p3:pf (forall X1 ([x3:tm X1] B x3))] forall_i X1 ([x3:tm X1] A x3) ([x6:tm X1] equiv_e2 (A x6) (B x6) (p1 x6) (forall_e X1 ([x3:tm X1] B x3) p3 x6))).
equiv_exists : {X1:tp} {A:tm X1 -> tform} {B:tm X1 -> tform} ({x3:tm X1} pf (A x3 equiv B x3)) -> pf (exists X1 ([x3:tm X1] A x3) equiv exists X1 ([x3:tm X1] B x3)) = [X1:tp] [A:tm X1 -> tform] [B:tm X1 -> tform] [p1:{x4:tm X1} pf (A x4 equiv B x4)] equiv_i2 (exists X1 ([x3:tm X1] A x3)) (exists X1 ([x3:tm X1] B x3)) ([p2:pf (exists X1 ([x3:tm X1] A x3))] exists_e X1 ([x3:tm X1] A x3) (exists X1 ([x3:tm X1] B x3)) p2 ([x5:tm X1] [p3:pf (A x5)] exists_i X1 ([x3:tm X1] B x3) x5 (equiv_e1 (A x5) (B x5) (p1 x5) p3))) ([p4:pf (exists X1 ([x3:tm X1] B x3))] exists_e X1 ([x3:tm X1] B x3) (exists X1 ([x3:tm X1] A x3)) p4 ([x6:tm X1] [p5:pf (B x6)] exists_i X1 ([x3:tm X1] A x3) x6 (equiv_e2 (A x6) (B x6) (p1 x6) p5))).
equiv_imp : {A:tform} {A':tform} {B:tform} {B':tform} pf (A equiv A') -> pf (B equiv B') -> pf ((A imp B) equiv A' imp B') = [A:tform] [A':tform] [B:tform] [B':tform] [p1:pf (A equiv A')] [p2:pf (B equiv B')] equiv_i2 (A imp B) (A' imp B') ([p3:pf (A imp B)] imp_i A' B' ([p4:pf A'] equiv_e1 B B' p2 (imp_e A B p3 (equiv_e2 A A' p1 p4)))) ([p3:pf (A' imp B')] imp_i A B ([p4:pf A] equiv_e2 B B' p2 (imp_e A' B' p3 (equiv_e1 A A' p1 p4)))).
equiv_imp' : {A:tform} {A':tform} {B:tform} {B':tform} pf (A equiv A') -> (pf A -> pf (B equiv B')) -> pf ((A imp B) equiv A' imp B') = [A:tform] [A':tform] [B:tform] [B':tform] [p1:pf (A equiv A')] [p2:pf A -> pf (B equiv B')] equiv_i2 (A imp B) (A' imp B') ([p3:pf (A imp B)] imp_i A' B' ([p4:pf A'] equiv_e1 B B' (p2 (equiv_e2 A A' p1 p4)) (imp_e A B p3 (equiv_e2 A A' p1 p4)))) ([p3:pf (A' imp B')] imp_i A B ([p4:pf A] equiv_e2 B B' (p2 p4) (imp_e A' B' p3 (equiv_e1 A A' p1 p4)))).
if_i : {E:tform} {A:tform} {B:tform} (pf E -> pf A) -> (pf (not E) -> pf B) -> pf (if E A B) = [E:tform] [A:tform] [B:tform] [FQ1:pf E -> pf A] [FQ2:pf (not E) -> pf B] and_i (E imp A) (not E imp B) (imp_i E A ([x3:pf E] FQ1 x3)) (imp_i (not E) B ([x3:pf (not E)] FQ2 x3)).
if_i1 : {E:tform} {A:tform} {B:tform} pf E -> pf A -> pf (if E A B) = [E:tform] [A:tform] [B:tform] [Q1:pf E] [Q2:pf A] and_i (E imp A) ((E imp false) imp B) (imp_true A E Q2) (imp_i (E imp false) B ([Q':pf (E imp false)] false_e B (imp_e E false Q' Q1))).
if_i2 : {E:tform} {B:tform} {A:tform} pf (not E) -> pf B -> pf (if E A B) = [E:tform] [B:tform] [A:tform] [Q1:pf (not E)] [Q2:pf B] and_i (E imp A) (not E imp B) (imp_i E A ([Q':pf E] false_e A (imp_e E false Q1 Q'))) (imp_true B (not E) Q2).
if_e1 : {E:tform} {A:tform} {B:tform} pf (if E A B) -> pf E -> pf A = [E:tform] [A:tform] [B:tform] [Q1:pf (if E A B)] [Q2:pf E] imp_e E A (and_e1 (E imp A) (not E imp B) Q1) Q2.
if_e2 : {E:tform} {A:tform} {B:tform} pf (if E A B) -> pf (not E) -> pf B = [E:tform] [A:tform] [B:tform] [Q1:pf (if E A B)] [Q2:pf (not E)] imp_e (not E) B (and_e2 (E imp A) (not E imp B) Q1) Q2.
if_equiv1 : {A:tform} {B:tform} {C:tform} pf A -> pf (if A B C equiv B) = [A:tform] [B:tform] [C:tform] [p1:pf A] equiv_i2 (if A B C) B ([p2:pf (if A B C)] if_e1 A B C p2 p1) ([p2:pf B] if_i1 A B C p1 p2).
if_equiv2 : {A:tform} {B:tform} {C:tform} pf (not A) -> pf (if A B C equiv C) = [A:tform] [B:tform] [C:tform] [p1:pf (not A)] equiv_i2 (if A B C) C ([p2:pf (if A B C)] if_e2 A B C p2 p1) ([p2:pf C] if_i2 A C B p1 p2).
equiv_if : {E:tform} {E':tform} {A:tform} {A':tform} {B:tform} {B':tform} pf (E equiv E') -> (pf E -> pf (A equiv A')) -> (pf (not E) -> pf (B equiv B')) -> pf (if E A B equiv if E' A' B') = [E:tform] [E':tform] [A:tform] [A':tform] [B:tform] [B':tform] [p1:pf (E equiv E')] [p2:pf E -> pf (A equiv A')] [p3:pf (not E) -> pf (B equiv B')] equiv_i2 (if E A B) (if E' A' B') ([p5:pf (if E A B)] if_i E' A' B' ([p6:pf E'] equiv_e1 A A' (p2 (equiv_e2 E E' p1 p6)) (if_e1 E A B p5 (equiv_e2 E E' p1 p6))) ([p7:pf (not E')] equiv_e1 B B' (p3 (equiv_e2 (not E) (not E') (equiv_not E E' p1) p7)) (if_e2 E A B p5 (equiv_e2 (not E) (not E') (equiv_not E E' p1) p7)))) ([p15:pf (if E' A' B')] if_i E A B ([p6:pf E] equiv_e2 A A' (p2 p6) (if_e1 E' A' B' p15 (equiv_e1 E E' p1 p6))) ([p7:pf (not E)] equiv_e2 B B' (p3 p7) (if_e2 E' A' B' p15 (equiv_e1 (not E) (not E') (equiv_not E E' p1) p7)))).
a_or_b_and_not_a : {A:tform} {B:tform} pf (A or B) -> pf (not A) -> pf B = [A:tform] [B:tform] [Q1:pf (A or B)] [Q2:pf (not A)] or_e A B B Q1 ([Q:pf A] false_e B (imp_e A false Q2 Q)) ([Q:pf B] Q).
not_or_not_not_and : {A:tform} {B:tform} pf (not A or not B) -> pf (not (A and B)) = [A:tform] [B:tform] [p1:pf (not A or not B)] or_e (not A) (not B) (not (A and B)) p1 ([q1:pf (not A)] not_i (A and B) ([q2:pf (A and B)] not_e A q1 (and_e1 A B q2))) ([q1:pf (not B)] not_i (A and B) ([q2:pf (A and B)] not_e B q1 (and_e2 A B q2))).
forall_imp_i : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} ({x3:tm X1} pf (X2 x3) -> pf (X3 x3)) -> pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [l:{x3:tm X1} pf (X2 x3) -> pf (X3 x3)] forall_i X1 ([x3:tm X1] X2 x3 imp X3 x3) ([x3:tm X1] imp_i (X2 x3) (X3 x3) ([p1:pf (X2 x3)] l x3 p1)).
forall_imp_e : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3)) -> ({a:tm X1} pf (X2 a) -> pf (X3 a)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [p1:pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3))] [a:tm X1] [x3:pf (X2 a)] imp_e (X2 a) (X3 a) (forall_e X1 ([x4:tm X1] X2 x4 imp X3 x4) p1 a) x3.
forall_imp2_i : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} ({x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3)) -> pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [l:{x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3)] forall_i X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3) ([x3:tm X1] imp2_i (X2 x3) (X3 x3) (X4 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] l x3 p1 x4)).
forall_imp2_e : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3)) -> ({a:tm X1} pf (X2 a) -> pf (X3 a) -> pf (X4 a)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [p1:pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3))] [a:tm X1] [x3:pf (X2 a)] [x4:pf (X3 a)] imp2_e (X2 a) (X3 a) (X4 a) (forall_e X1 ([x5:tm X1] X2 x5 imp X3 x5 imp X4 x5) p1 a) x3 x4.
forall_imp3_i : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} {X5:tm X1 -> tm form} ({x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3)) -> pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [X5:tm X1 -> tm form] [l:{x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3)] forall_i X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3) ([x3:tm X1] imp3_i (X2 x3) (X3 x3) (X4 x3) (X5 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] [x5:pf (X4 x3)] l x3 p1 x4 x5)).
forall_imp3_e : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} {X5:tm X1 -> tm form} pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3)) -> ({a:tm X1} pf (X2 a) -> pf (X3 a) -> pf (X4 a) -> pf (X5 a)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [X5:tm X1 -> tm form] [p1:pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3))] [a:tm X1] [x3:pf (X2 a)] [x4:pf (X3 a)] [x5:pf (X4 a)] imp3_e (X2 a) (X3 a) (X4 a) (X5 a) (forall_e X1 ([x6:tm X1] X2 x6 imp X3 x6 imp X4 x6 imp X5 x6) p1 a) x3 x4 x5.
forall_imp4_i : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} {X5:tm X1 -> tm form} {X6:tm X1 -> tm form} ({x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3)) -> pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [X5:tm X1 -> tm form] [X6:tm X1 -> tm form] [l:{x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3)] forall_i X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3) ([x3:tm X1] imp4_i (X2 x3) (X3 x3) (X4 x3) (X5 x3) (X6 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] [x5:pf (X4 x3)] [x6:pf (X5 x3)] l x3 p1 x4 x5 x6)).
forall_imp5_i : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} {X5:tm X1 -> tm form} {X6:tm X1 -> tm form} {X7:tm X1 -> tm form} ({x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3) -> pf (X7 x3)) -> pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3 imp X7 x3)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [X5:tm X1 -> tm form] [X6:tm X1 -> tm form] [X7:tm X1 -> tm form] [l:{x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3) -> pf (X7 x3)] forall_i X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3 imp X7 x3) ([x3:tm X1] imp5_i (X2 x3) (X3 x3) (X4 x3) (X5 x3) (X6 x3) (X7 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] [x5:pf (X4 x3)] [x6:pf (X5 x3)] [x7:pf (X6 x3)] l x3 p1 x4 x5 x6 x7)).
forall2_imp_i : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} ({x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [p1:{x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4)] forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4) ([x3:tm X1] [y:tm X2] imp_i (X3 x3 y) (X4 x3 y) ([x4:pf (X3 x3 y)] p1 x3 y x4)).
forall2_imp2_i : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} ({x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [p1:{x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4)] forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4) ([x3:tm X1] [y:tm X2] imp2_i (X3 x3 y) (X4 x3 y) (X5 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] p1 x3 y x4 x5)).
forall2_imp3_i : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} {X6:tm X1 -> tm X2 -> tm form} ({x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [X6:tm X1 -> tm X2 -> tm form] [p1:{x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4)] forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4) ([x3:tm X1] [y:tm X2] imp3_i (X3 x3 y) (X4 x3 y) (X5 x3 y) (X6 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] [x6:pf (X5 x3 y)] p1 x3 y x4 x5 x6)).
forall2_imp4_i : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} {X6:tm X1 -> tm X2 -> tm form} {X7:tm X1 -> tm X2 -> tm form} ({x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [X6:tm X1 -> tm X2 -> tm form] [X7:tm X1 -> tm X2 -> tm form] [p1:{x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4)] forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4) ([x3:tm X1] [y:tm X2] imp4_i (X3 x3 y) (X4 x3 y) (X5 x3 y) (X6 x3 y) (X7 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] [x6:pf (X5 x3 y)] [x7:pf (X6 x3 y)] p1 x3 y x4 x5 x6 x7)).
forall2_imp5_i : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} {X6:tm X1 -> tm X2 -> tm form} {X7:tm X1 -> tm X2 -> tm form} {X8:tm X1 -> tm X2 -> tm form} ({x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4) -> pf (X8 x3 x4)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4 imp X8 x3 x4)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [X6:tm X1 -> tm X2 -> tm form] [X7:tm X1 -> tm X2 -> tm form] [X8:tm X1 -> tm X2 -> tm form] [p1:{x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4) -> pf (X8 x3 x4)] forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4 imp X8 x3 x4) ([x3:tm X1] [y:tm X2] imp5_i (X3 x3 y) (X4 x3 y) (X5 x3 y) (X6 x3 y) (X7 x3 y) (X8 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] [x6:pf (X5 x3 y)] [x7:pf (X6 x3 y)] [x8:pf (X7 x3 y)] p1 x3 y x4 x5 x6 x7 x8)).
forall2_imp_e : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4)) -> ({x3:tm X1} {y:tm X2} pf (X3 x3 y) -> pf (X4 x3 y)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [p1:pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4))] [x4:tm X1] [y:tm X2] [x3:pf (X3 x4 y)] imp_e (X3 x4 y) (X4 x4 y) (forall2_e X1 X2 ([x5:tm X1] [x6:tm X2] X3 x5 x6 imp X4 x5 x6) p1 x4 y) x3.
forall2_imp2_e : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4)) -> ({x3:tm X1} {y:tm X2} pf (X3 x3 y) -> pf (X4 x3 y) -> pf (X5 x3 y)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [p1:pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4))] [x4:tm X1] [y:tm X2] [x3:pf (X3 x4 y)] [x5:pf (X4 x4 y)] imp2_e (X3 x4 y) (X4 x4 y) (X5 x4 y) (forall2_e X1 X2 ([x6:tm X1] [x7:tm X2] X3 x6 x7 imp X4 x6 x7 imp X5 x6 x7) p1 x4 y) x3 x5.
forall2_imp3_e : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} {X6:tm X1 -> tm X2 -> tm form} pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4)) -> ({x3:tm X1} {y:tm X2} pf (X3 x3 y) -> pf (X4 x3 y) -> pf (X5 x3 y) -> pf (X6 x3 y)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [X6:tm X1 -> tm X2 -> tm form] [p1:pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4))] [x4:tm X1] [y:tm X2] [x3:pf (X3 x4 y)] [x5:pf (X4 x4 y)] [x6:pf (X5 x4 y)] imp3_e (X3 x4 y) (X4 x4 y) (X5 x4 y) (X6 x4 y) (forall2_e X1 X2 ([x7:tm X1] [x8:tm X2] X3 x7 x8 imp X4 x7 x8 imp X5 x7 x8 imp X6 x7 x8) p1 x4 y) x3 x5 x6.
forall2_imp4_e : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} {X6:tm X1 -> tm X2 -> tm form} {X7:tm X1 -> tm X2 -> tm form} pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4)) -> ({x3:tm X1} {y:tm X2} pf (X3 x3 y) -> pf (X4 x3 y) -> pf (X5 x3 y) -> pf (X6 x3 y) -> pf (X7 x3 y)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [X6:tm X1 -> tm X2 -> tm form] [X7:tm X1 -> tm X2 -> tm form] [p1:pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4))] [x4:tm X1] [y:tm X2] [x3:pf (X3 x4 y)] [x5:pf (X4 x4 y)] [x6:pf (X5 x4 y)] [x7:pf (X6 x4 y)] imp4_e (X3 x4 y) (X4 x4 y) (X5 x4 y) (X6 x4 y) (X7 x4 y) (forall2_e X1 X2 ([x8:tm X1] [x9:tm X2] X3 x8 x9 imp X4 x8 x9 imp X5 x8 x9 imp X6 x8 x9 imp X7 x8 x9) p1 x4 y) x3 x5 x6 x7.
forall3_imp_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp_i (X4 x3 y z1) (X5 x3 y z1) ([x4:pf (X4 x3 y z1)] p1 x3 y z1 x4)).
forall3_imp2_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp2_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] p1 x3 y z1 x4 x5)).
forall3_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp3_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] p1 x3 y z1 x4 x5 x6)).
forall3_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp4_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) (X8 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] [x7:pf (X7 x3 y z1)] p1 x3 y z1 x4 x5 x6 x7)).
forall3_imp5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp5_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) (X8 x3 y z1) (X9 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] [x7:pf (X7 x3 y z1)] [x8:pf (X8 x3 y z1)] p1 x3 y z1 x4 x5 x6 x7 x8)).
forall3_imp6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5) -> pf (X10 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5 imp X10 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5) -> pf (X10 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5 imp X10 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp6_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) (X8 x3 y z1) (X9 x3 y z1) (X10 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] [x7:pf (X7 x3 y z1)] [x8:pf (X8 x3 y z1)] [x9:pf (X9 x3 y z1)] p1 x3 y z1 x4 x5 x6 x7 x8 x9)).
forall3_imp_e : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5))] [x4:tm X1] [y:tm X2] [z2:tm X3] [x3:pf (X4 x4 y z2)] imp_e (X4 x4 y z2) (X5 x4 y z2) (forall3_e X1 X2 X3 ([x5:tm X1] [x6:tm X2] [x7:tm X3] X4 x5 x6 x7 imp X5 x5 x6 x7) p1 x4 y z2) x3.
forall3_imp2_e : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5))] [x4:tm X1] [y:tm X2] [z2:tm X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] imp2_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (forall3_e X1 X2 X3 ([x6:tm X1] [x7:tm X2] [x8:tm X3] X4 x6 x7 x8 imp X5 x6 x7 x8 imp X6 x6 x7 x8) p1 x4 y z2) x3 x5.
forall3_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1) -> pf (X7 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5))] [x4:tm X1] [y:tm X2] [z2:tm X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] [x6:pf (X6 x4 y z2)] imp3_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (X7 x4 y z2) (forall3_e X1 X2 X3 ([x7:tm X1] [x8:tm X2] [x9:tm X3] X4 x7 x8 x9 imp X5 x7 x8 x9 imp X6 x7 x8 x9 imp X7 x7 x8 x9) p1 x4 y z2) x3 x5 x6.
forall3_imp4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm form} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1) -> pf (X7 x3 y z1) -> pf (X8 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5))] [x4:tm X1] [y:tm X2] [z2:tm X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] [x6:pf (X6 x4 y z2)] [x7:pf (X7 x4 y z2)] imp4_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (X7 x4 y z2) (X8 x4 y z2) (forall3_e X1 X2 X3 ([x8:tm X1] [x9:tm X2] [x10:tm X3] X4 x8 x9 x10 imp X5 x8 x9 x10 imp X6 x8 x9 x10 imp X7 x8 x9 x10 imp X8 x8 x9 x10) p1 x4 y z2) x3 x5 x6 x7.
forall3_imp5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm form} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1) -> pf (X7 x3 y z1) -> pf (X8 x3 y z1) -> pf (X9 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5))] [x4:tm X1] [y:tm X2] [z2:tm X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] [x6:pf (X6 x4 y z2)] [x7:pf (X7 x4 y z2)] [x8:pf (X8 x4 y z2)] imp5_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (X7 x4 y z2) (X8 x4 y z2) (X9 x4 y z2) (forall3_e X1 X2 X3 ([x9:tm X1] [x10:tm X2] [x11:tm X3] X4 x9 x10 x11 imp X5 x9 x10 x11 imp X6 x9 x10 x11 imp X7 x9 x10 x11 imp X8 x9 x10 x11 imp X9 x9 x10 x11) p1 x4 y z2) x3 x5 x6 x7 x8.
forall4_imp_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] imp_i (X5 x3 y z1 u) (X6 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] p1 x3 y z1 u x4)).
forall4_imp2_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] imp2_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] p1 x3 y z1 u x4 x5)).
forall4_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] imp3_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) (X8 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] [x6:pf (X7 x3 y z1 u)] p1 x3 y z1 u x4 x5 x6)).
forall4_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] imp4_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) (X8 x3 y z1 u) (X9 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] [x6:pf (X7 x3 y z1 u)] [x7:pf (X8 x3 y z1 u)] p1 x3 y z1 u x4 x5 x6 x7)).
forall4_imp5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6) -> pf (X10 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6) -> pf (X10 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] imp5_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) (X8 x3 y z1 u) (X9 x3 y z1 u) (X10 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] [x6:pf (X7 x3 y z1 u)] [x7:pf (X8 x3 y z1 u)] [x8:pf (X9 x3 y z1 u)] p1 x3 y z1 u x4 x5 x6 x7 x8)).
forall4_imp2_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] imp2_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x6:tm X1] [x7:tm X2] [x8:tm X3] [x9:tm X4] X5 x6 x7 x8 x9 imp X6 x6 x7 x8 x9 imp X7 x6 x7 x8 x9) p1 x4 y z2 u) x3 x5.
forall4_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] imp3_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x7:tm X1] [x8:tm X2] [x9:tm X3] [x10:tm X4] X5 x7 x8 x9 x10 imp X6 x7 x8 x9 x10 imp X7 x7 x8 x9 x10 imp X8 x7 x8 x9 x10) p1 x4 y z2 u) x3 x5 x6.
forall4_imp4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u) -> pf (X9 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] [x7:pf (X8 x4 y z2 u)] imp4_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (X9 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x8:tm X1] [x9:tm X2] [x10:tm X3] [x11:tm X4] X5 x8 x9 x10 x11 imp X6 x8 x9 x10 x11 imp X7 x8 x9 x10 x11 imp X8 x8 x9 x10 x11 imp X9 x8 x9 x10 x11) p1 x4 y z2 u) x3 x5 x6 x7.
forall4_imp5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u) -> pf (X9 x3 y z1 u) -> pf (X10 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] [x7:pf (X8 x4 y z2 u)] [x8:pf (X9 x4 y z2 u)] imp5_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (X9 x4 y z2 u) (X10 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x9:tm X1] [x10:tm X2] [x11:tm X3] [x12:tm X4] X5 x9 x10 x11 x12 imp X6 x9 x10 x11 x12 imp X7 x9 x10 x11 x12 imp X8 x9 x10 x11 x12 imp X9 x9 x10 x11 x12 imp X10 x9 x10 x11 x12) p1 x4 y z2 u) x3 x5 x6 x7 x8.
forall4_imp6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6 imp X11 x3 x4 x5 x6)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u) -> pf (X9 x3 y z1 u) -> pf (X10 x3 y z1 u) -> pf (X11 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6 imp X11 x3 x4 x5 x6))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] [x7:pf (X8 x4 y z2 u)] [x8:pf (X9 x4 y z2 u)] [x9:pf (X10 x4 y z2 u)] imp6_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (X9 x4 y z2 u) (X10 x4 y z2 u) (X11 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x10:tm X1] [x11:tm X2] [x12:tm X3] [x13:tm X4] X5 x10 x11 x12 x13 imp X6 x10 x11 x12 x13 imp X7 x10 x11 x12 x13 imp X8 x10 x11 x12 x13 imp X9 x10 x11 x12 x13 imp X10 x10 x11 x12 x13 imp X11 x10 x11 x12 x13) p1 x4 y z2 u) x3 x5 x6 x7 x8 x9.
forall5_imp_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7)] forall5_i X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] imp_i (X6 x3 y z1 u v1) (X7 x3 y z1 u v1) ([x4:pf (X6 x3 y z1 u v1)] p1 x3 y z1 u v1 x4)).
forall5_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7)] forall5_i X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] imp3_i (X6 x3 y z1 u v1) (X7 x3 y z1 u v1) (X8 x3 y z1 u v1) (X9 x3 y z1 u v1) ([x4:pf (X6 x3 y z1 u v1)] [x5:pf (X7 x3 y z1 u v1)] [x6:pf (X8 x3 y z1 u v1)] p1 x3 y z1 u v1 x4 x5 x6)).
forall5_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7) -> pf (X10 x3 x4 x5 x6 x7)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7 imp X10 x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7) -> pf (X10 x3 x4 x5 x6 x7)] forall5_i X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7 imp X10 x3 x4 x5 x6 x7) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] imp4_i (X6 x3 y z1 u v1) (X7 x3 y z1 u v1) (X8 x3 y z1 u v1) (X9 x3 y z1 u v1) (X10 x3 y z1 u v1) ([x4:pf (X6 x3 y z1 u v1)] [x5:pf (X7 x3 y z1 u v1)] [x6:pf (X8 x3 y z1 u v1)] [x7:pf (X9 x3 y z1 u v1)] p1 x3 y z1 u v1 x4 x5 x6 x7)).
forall5_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} {v1:tm X5} pf (X6 x3 y z1 u v1) -> pf (X7 x3 y z1 u v1) -> pf (X8 x3 y z1 u v1) -> pf (X9 x3 y z1 u v1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [p1:pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [v2:tm X5] [x3:pf (X6 x4 y z2 u v2)] [x5:pf (X7 x4 y z2 u v2)] [x6:pf (X8 x4 y z2 u v2)] imp3_e (X6 x4 y z2 u v2) (X7 x4 y z2 u v2) (X8 x4 y z2 u v2) (X9 x4 y z2 u v2) (forall5_e X1 X2 X3 X4 X5 ([x7:tm X1] [x8:tm X2] [x9:tm X3] [x10:tm X4] [x11:tm X5] X6 x7 x8 x9 x10 x11 imp X7 x7 x8 x9 x10 x11 imp X8 x7 x8 x9 x10 x11 imp X9 x7 x8 x9 x10 x11) p1 x4 y z2 u v2) x3 x5 x6.
forall6_imp2_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8)] forall6_i X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] imp2_i (X7 x3 y z1 u v1 w) (X8 x3 y z1 u v1 w) (X9 x3 y z1 u v1 w) ([x4:pf (X7 x3 y z1 u v1 w)] [x5:pf (X8 x3 y z1 u v1 w)] p1 x3 y z1 u v1 w x4 x5)).
forall6_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8)] forall6_i X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] imp3_i (X7 x3 y z1 u v1 w) (X8 x3 y z1 u v1 w) (X9 x3 y z1 u v1 w) (X10 x3 y z1 u v1 w) ([x4:pf (X7 x3 y z1 u v1 w)] [x5:pf (X8 x3 y z1 u v1 w)] [x6:pf (X9 x3 y z1 u v1 w)] p1 x3 y z1 u v1 w x4 x5 x6)).
forall6_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8) -> pf (X11 x3 x4 x5 x6 x7 x8)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8) -> pf (X11 x3 x4 x5 x6 x7 x8)] forall6_i X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] imp4_i (X7 x3 y z1 u v1 w) (X8 x3 y z1 u v1 w) (X9 x3 y z1 u v1 w) (X10 x3 y z1 u v1 w) (X11 x3 y z1 u v1 w) ([x4:pf (X7 x3 y z1 u v1 w)] [x5:pf (X8 x3 y z1 u v1 w)] [x6:pf (X9 x3 y z1 u v1 w)] [x7:pf (X10 x3 y z1 u v1 w)] p1 x3 y z1 u v1 w x4 x5 x6 x7)).
forall6_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} {v1:tm X5} {w:tm X6} pf (X7 x3 y z1 u v1 w) -> pf (X8 x3 y z1 u v1 w) -> pf (X9 x3 y z1 u v1 w) -> pf (X10 x3 y z1 u v1 w)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [p1:pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [v2:tm X5] [w:tm X6] [x3:pf (X7 x4 y z2 u v2 w)] [x5:pf (X8 x4 y z2 u v2 w)] [x6:pf (X9 x4 y z2 u v2 w)] imp3_e (X7 x4 y z2 u v2 w) (X8 x4 y z2 u v2 w) (X9 x4 y z2 u v2 w) (X10 x4 y z2 u v2 w) (forall6_e X1 X2 X3 X4 X5 X6 ([x7:tm X1] [x8:tm X2] [x9:tm X3] [x10:tm X4] [x11:tm X5] [x12:tm X6] X7 x7 x8 x9 x10 x11 x12 imp X8 x7 x8 x9 x10 x11 x12 imp X9 x7 x8 x9 x10 x11 x12 imp X10 x7 x8 x9 x10 x11 x12) p1 x4 y z2 u v2 w) x3 x5 x6.
forall6_imp4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} {v1:tm X5} {w:tm X6} pf (X7 x3 y z1 u v1 w) -> pf (X8 x3 y z1 u v1 w) -> pf (X9 x3 y z1 u v1 w) -> pf (X10 x3 y z1 u v1 w) -> pf (X11 x3 y z1 u v1 w)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [p1:pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [v2:tm X5] [w:tm X6] [x3:pf (X7 x4 y z2 u v2 w)] [x5:pf (X8 x4 y z2 u v2 w)] [x6:pf (X9 x4 y z2 u v2 w)] [x7:pf (X10 x4 y z2 u v2 w)] imp4_e (X7 x4 y z2 u v2 w) (X8 x4 y z2 u v2 w) (X9 x4 y z2 u v2 w) (X10 x4 y z2 u v2 w) (X11 x4 y z2 u v2 w) (forall6_e X1 X2 X3 X4 X5 X6 ([x8:tm X1] [x9:tm X2] [x10:tm X3] [x11:tm X4] [x12:tm X5] [x13:tm X6] X7 x8 x9 x10 x11 x12 x13 imp X8 x8 x9 x10 x11 x12 x13 imp X9 x8 x9 x10 x11 x12 x13 imp X10 x8 x9 x10 x11 x12 x13 imp X11 x8 x9 x10 x11 x12 x13) p1 x4 y z2 u v2 w) x3 x5 x6 x7.
forall7_imp9_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X14:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X15:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X16:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X17:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} pf (X8 x3 x4 x5 x6 x7 x8 x9) -> pf (X9 x3 x4 x5 x6 x7 x8 x9) -> pf (X10 x3 x4 x5 x6 x7 x8 x9) -> pf (X11 x3 x4 x5 x6 x7 x8 x9) -> pf (X12 x3 x4 x5 x6 x7 x8 x9) -> pf (X13 x3 x4 x5 x6 x7 x8 x9) -> pf (X14 x3 x4 x5 x6 x7 x8 x9) -> pf (X15 x3 x4 x5 x6 x7 x8 x9) -> pf (X16 x3 x4 x5 x6 x7 x8 x9) -> pf (X17 x3 x4 x5 x6 x7 x8 x9)) -> pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] X8 x3 x4 x5 x6 x7 x8 x9 imp X9 x3 x4 x5 x6 x7 x8 x9 imp X10 x3 x4 x5 x6 x7 x8 x9 imp X11 x3 x4 x5 x6 x7 x8 x9 imp X12 x3 x4 x5 x6 x7 x8 x9 imp X13 x3 x4 x5 x6 x7 x8 x9 imp X14 x3 x4 x5 x6 x7 x8 x9 imp X15 x3 x4 x5 x6 x7 x8 x9 imp X16 x3 x4 x5 x6 x7 x8 x9 imp X17 x3 x4 x5 x6 x7 x8 x9)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X14:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X15:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X16:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X17:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} pf (X8 x3 x4 x5 x6 x7 x8 x9) -> pf (X9 x3 x4 x5 x6 x7 x8 x9) -> pf (X10 x3 x4 x5 x6 x7 x8 x9) -> pf (X11 x3 x4 x5 x6 x7 x8 x9) -> pf (X12 x3 x4 x5 x6 x7 x8 x9) -> pf (X13 x3 x4 x5 x6 x7 x8 x9) -> pf (X14 x3 x4 x5 x6 x7 x8 x9) -> pf (X15 x3 x4 x5 x6 x7 x8 x9) -> pf (X16 x3 x4 x5 x6 x7 x8 x9) -> pf (X17 x3 x4 x5 x6 x7 x8 x9)] forall7_i X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] X8 x3 x4 x5 x6 x7 x8 x9 imp X9 x3 x4 x5 x6 x7 x8 x9 imp X10 x3 x4 x5 x6 x7 x8 x9 imp X11 x3 x4 x5 x6 x7 x8 x9 imp X12 x3 x4 x5 x6 x7 x8 x9 imp X13 x3 x4 x5 x6 x7 x8 x9 imp X14 x3 x4 x5 x6 x7 x8 x9 imp X15 x3 x4 x5 x6 x7 x8 x9 imp X16 x3 x4 x5 x6 x7 x8 x9 imp X17 x3 x4 x5 x6 x7 x8 x9) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] [r:tm X7] imp9_i (X8 x3 y z1 u v1 w r) (X9 x3 y z1 u v1 w r) (X10 x3 y z1 u v1 w r) (X11 x3 y z1 u v1 w r) (X12 x3 y z1 u v1 w r) (X13 x3 y z1 u v1 w r) (X14 x3 y z1 u v1 w r) (X15 x3 y z1 u v1 w r) (X16 x3 y z1 u v1 w r) (X17 x3 y z1 u v1 w r) ([x4:pf (X8 x3 y z1 u v1 w r)] [x5:pf (X9 x3 y z1 u v1 w r)] [x6:pf (X10 x3 y z1 u v1 w r)] [x7:pf (X11 x3 y z1 u v1 w r)] [x8:pf (X12 x3 y z1 u v1 w r)] [x9:pf (X13 x3 y z1 u v1 w r)] [x10:pf (X14 x3 y z1 u v1 w r)] [x11:pf (X15 x3 y z1 u v1 w r)] [x12:pf (X16 x3 y z1 u v1 w r)] p1 x3 y z1 u v1 w r x4 x5 x6 x7 x8 x9 x10 x11 x12)).
forall8_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} {x10:tm X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10)) -> pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} {x10:tm X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10)] forall8_i X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] [r:tm X7] [s:tm X8] imp4_i (X9 x3 y z1 u v1 w r s) (X10 x3 y z1 u v1 w r s) (X11 x3 y z1 u v1 w r s) (X12 x3 y z1 u v1 w r s) (X13 x3 y z1 u v1 w r s) ([x4:pf (X9 x3 y z1 u v1 w r s)] [x5:pf (X10 x3 y z1 u v1 w r s)] [x6:pf (X11 x3 y z1 u v1 w r s)] [x7:pf (X12 x3 y z1 u v1 w r s)] p1 x3 y z1 u v1 w r s x4 x5 x6 x7)).
forall8_imp6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X14:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X15:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} {x10:tm X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X14 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X15 x3 x4 x5 x6 x7 x8 x9 x10)) -> pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10 imp X14 x3 x4 x5 x6 x7 x8 x9 x10 imp X15 x3 x4 x5 x6 x7 x8 x9 x10)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X14:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X15:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} {x10:tm X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X14 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X15 x3 x4 x5 x6 x7 x8 x9 x10)] forall8_i X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10 imp X14 x3 x4 x5 x6 x7 x8 x9 x10 imp X15 x3 x4 x5 x6 x7 x8 x9 x10) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] [r:tm X7] [s:tm X8] imp6_i (X9 x3 y z1 u v1 w r s) (X10 x3 y z1 u v1 w r s) (X11 x3 y z1 u v1 w r s) (X12 x3 y z1 u v1 w r s) (X13 x3 y z1 u v1 w r s) (X14 x3 y z1 u v1 w r s) (X15 x3 y z1 u v1 w r s) ([x4:pf (X9 x3 y z1 u v1 w r s)] [x5:pf (X10 x3 y z1 u v1 w r s)] [x6:pf (X11 x3 y z1 u v1 w r s)] [x7:pf (X12 x3 y z1 u v1 w r s)] [x8:pf (X13 x3 y z1 u v1 w r s)] [x9:pf (X14 x3 y z1 u v1 w r s)] p1 x3 y z1 u v1 w r s x4 x5 x6 x7 x8 x9)).
exists_and_i : {T:tp} {A:tm T -> tform} {B:tm T -> tform} {x3:tm T} pf (A x3) -> pf (B x3) -> pf (exists T ([x4:tm T] A x4 and B x4)) = [T:tp] [A:tm T -> tform] [B:tm T -> tform] [x5:tm T] [pA:pf (A x5)] [pB:pf (B x5)] exists_i T ([x3:tm T] A x3 and B x3) x5 (and_i (A x5) (B x5) pA pB).
exists_and_e : {X1:tp} {A:tm X1 -> tform} {B:tm X1 -> tform} {C:tform} pf (exists X1 ([x3:tm X1] A x3 and B x3)) -> ({x4:tm X1} pf (A x4) -> pf (B x4) -> pf C) -> pf C = [X1:tp] [A:tm X1 -> tform] [B:tm X1 -> tform] [C:tform] [p1:pf (exists X1 ([x5:tm X1] A x5 and B x5))] [p2:{x6:tm X1} pf (A x6) -> pf (B x6) -> pf C] cut (forall X1 ([x3:tm X1] A x3 imp B x3 imp C)) C (forall_imp2_i X1 ([x7:tm X1] A x7) ([x3:tm X1] B x3) ([x3:tm X1] C) ([x3:tm X1] [x4:pf (A x3)] [x5:pf (B x3)] p2 x3 x4 x5)) ([x3:pf (forall X1 ([x3:tm X1] A x3 imp B x3 imp C))] exists_e X1 ([x4:tm X1] A x4 and B x4) C p1 ([x8:tm X1] [p3:pf (A x8 and B x8)] p2 x8 (and_e1 (A x8) (B x8) p3) (and_e2 (A x8) (B x8) p3))).
exists3_and6_i : {X1:tp} {X2:tp} {X3:tp} {A:tm X1 -> tm X2 -> tm X3 -> tform} {B:tm X1 -> tm X2 -> tm X3 -> tform} {C:tm X1 -> tm X2 -> tm X3 -> tform} {D:tm X1 -> tm X2 -> tm X3 -> tform} {E:tm X1 -> tm X2 -> tm X3 -> tform} {F:tm X1 -> tm X2 -> tm X3 -> tform} {x3:tm X1} {y:tm X2} {z1:tm X3} pf (A x3 y z1) -> pf (B x3 y z1) -> pf (C x3 y z1) -> pf (D x3 y z1) -> pf (E x3 y z1) -> pf (F x3 y z1) -> pf (exists3 X1 X2 X3 ([x4:tm X1] [y1:tm X2] [z2:tm X3] A x4 y1 z2 and B x4 y1 z2 and C x4 y1 z2 and D x4 y1 z2 and E x4 y1 z2 and F x4 y1 z2)) = [X1:tp] [X2:tp] [X3:tp] [A:tm X1 -> tm X2 -> tm X3 -> tform] [B:tm X1 -> tm X2 -> tm X3 -> tform] [C:tm X1 -> tm X2 -> tm X3 -> tform] [D:tm X1 -> tm X2 -> tm X3 -> tform] [E:tm X1 -> tm X2 -> tm X3 -> tform] [F:tm X1 -> tm X2 -> tm X3 -> tform] [x5:tm X1] [y:tm X2] [z3:tm X3] [pA:pf (A x5 y z3)] [pB:pf (B x5 y z3)] [pC:pf (C x5 y z3)] [pD:pf (D x5 y z3)] [pE:pf (E x5 y z3)] [pF:pf (F x5 y z3)] exists3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x6:tm X3] A x3 x4 x6 and B x3 x4 x6 and C x3 x4 x6 and D x3 x4 x6 and E x3 x4 x6 and F x3 x4 x6) x5 y z3 (and6_i (A x5 y z3) (B x5 y z3) (C x5 y z3) (D x5 y z3) (E x5 y z3) (F x5 y z3) pA pB pC pD pE pF).
not_not_e : {B:tform} pf ((B imp _frl_frm ([A:tform] A)) imp _frl_frm ([A:tform] A)) -> pf B = [B:tform] [x3:pf ((B imp _frl_frm ([A:tform] A)) imp _frl_frm ([A:tform] A))] _not_not_e B x3.
excluded_middle_x : {A:tform} pf (not A) -> pf (not (not A)) -> pf false = [A:tform] [P1:pf (A imp false)] [P2:pf (not A imp false)] imp_e (not A) false P2 P1.
excluded_middle : {A:tform} pf (A or not A) = [A:tform] forall_i form ([x3:tm form] (A imp x3) imp ((A imp false) imp x3) imp x3) ([C:tm form] imp_i (A imp C) (((A imp false) imp C) imp C) ([P1:pf (A imp C)] imp_i ((A imp false) imp C) C ([P2:pf ((A imp false) imp C)] not_not_e C (imp_i (C imp false) false ([P3:pf (C imp false)] excluded_middle_x A (imp_i A false ([P4:pf A] imp_e C false P3 (imp_e A C P1 P4))) (imp_i (not A) false ([P5:pf (not A)] imp_e C false P3 (imp_e (A imp false) C P2 P5)))))))).
suppose_not : {A:tform} (pf (not A) -> pf false) -> pf A = [A:tform] [P1:pf (not A) -> pf false] or_e A (not A) A (excluded_middle A) ([P2:pf A] P2) ([P3:pf (not A)] false_e A (P1 P3)).
or_imp_i : {A:tform} {B:tform} pf (A imp B) -> pf (not A or B) = [A:tform] [B:tform] [Q:pf (A imp B)] or_e A (not A) (not A or B) (excluded_middle A) ([Q':pf A] or_i2 B (not A) (imp_e A B Q Q')) ([Q':pf (not A)] or_i1 (not A) B Q').
equiv_not_not : {A:tform} pf (A equiv not (not A)) = [A:tform] equiv_i A (not (not A)) (imp_i A (not (not A)) ([x3:pf A] not_not_i A x3)) (imp_i ((A imp _frl_frm ([A1:tform] A1)) imp _frl_frm ([A2:tform] A2)) A ([x3:pf ((A imp _frl_frm ([A3:tform] A3)) imp _frl_frm ([A4:tform] A4))] not_not_e A x3)).
not_AE_not : {X1:tp} {A:tm X1 -> tform} pf (not (forall X1 ([x3:tm X1] A x3))) -> pf (exists X1 ([X:tm X1] not (A X))) = [X1:tp] [A:tm X1 -> tform] [P1:pf (not (forall X1 ([x3:tm X1] A x3)))] suppose_not (exists X1 ([X:tm X1] not (A X))) ([P3:pf (not (exists X1 ([X:tm X1] not (A X))))] not_e (forall X1 ([x3:tm X1] A x3)) P1 (forall_i X1 ([x3:tm X1] A x3) ([X:tm X1] suppose_not (A X) ([P4:pf (not (A X))] not_e (exists X1 ([X2:tm X1] not (A X2))) P3 (exists_i X1 ([x3:tm X1] not (A x3)) X P4))))).
not_AE_not2 : {X1:tp} {X2:tp} {A:tm X1 -> tm X2 -> tform} pf (not (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4))) -> pf (exists2 X1 X2 ([X:tm X1] [Y:tm X2] not (A X Y))) = [X1:tp] [X2:tp] [A:tm X1 -> tm X2 -> tform] [P1:pf (not (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4)))] suppose_not (exists2 X1 X2 ([X:tm X1] [Y:tm X2] not (A X Y))) ([P3:pf (not (exists2 X1 X2 ([X:tm X1] [Y:tm X2] not (A X Y))))] not_e (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4)) P1 (forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4) ([X:tm X1] [Y:tm X2] suppose_not (A X Y) ([P4:pf (not (A X Y))] not_e (exists2 X1 X2 ([X3:tm X1] [Y1:tm X2] not (A X3 Y1))) P3 (exists2_i X1 X2 ([x3:tm X1] [x4:tm X2] not (A x3 x4)) X Y P4))))).
not_EA_not : {X1:tp} {A:tm X1 -> tm form} pf (not (exists X1 ([x3:tm X1] A x3))) -> pf (forall X1 ([X:tm X1] not (A X))) = [X1:tp] [A:tm X1 -> tm form] [P1:pf (not (exists X1 ([x3:tm X1] A x3)))] not_not_e (forall X1 ([X:tm X1] not (A X))) (not_ei (exists X1 ([x3:tm X1] A x3)) (not (forall X1 ([X:tm X1] not (A X)))) P1 ([P2:pf (not (forall X1 ([X:tm X1] not (A X))))] exists_ei X1 ([x3:tm X1] not (not (A x3))) ([x3:tm X1] A x3) (not_AE_not X1 ([x3:tm X1] not (A x3)) P2) ([X:tm X1] [x3:pf ((A X imp _frl_frm ([A1:tform] A1)) imp _frl_frm ([A2:tform] A2))] not_not_e (A X) x3))).
demorgan_or_not : {A:tform} {B:tform} pf (not (A and B)) -> pf (not A or not B) = [A:tform] [B:tform] [Q:pf (not (A and B))] or_e A (not A) (not A or not B) (excluded_middle A) ([PA:pf A] or_e B (not B) (not A or not B) (excluded_middle B) ([PB:pf B] false_e (not A or not B) (imp_e (A and B) false Q (and_i A B PA PB))) ([NotPB:pf (not B)] or_i2 (not B) (not A) NotPB)) ([NotPA:pf (not A)] or_e B (not B) (not A or not B) (excluded_middle B) ([PB:pf B] or_i1 (not A) (not B) NotPA) ([NotPB:pf (not B)] or_i1 (not A) (not B) NotPA)).
demorgan_not_and : {A:tform} {B:tform} pf (not (A or B)) -> pf (not A and not B) = [A:tform] [B:tform] [p1:pf (not (A or B))] and_i (not A) (not B) (or_e A (not A) (not A) (excluded_middle A) ([pa:pf A] cut false (not A) (imp_e (A or B) false p1 (or_i1 A B pa)) ([x3:pf false] false_e (not A) x3)) ([pna:pf (not A)] pna)) (or_e B (not B) (not B) (excluded_middle B) ([pb:pf B] cut false (not B) (imp_e (A or B) false p1 (or_i2 B A pb)) ([x3:pf false] false_e (not B) x3)) ([pnb:pf (not B)] pnb)).
contrapositive1 : {A:tform} {B:tform} pf (A imp B) -> pf (not B imp not A) = [A:tform] [B:tform] [Q:pf (A imp B)] or_e (not A) B ((B imp false) imp not A) (or_imp_i A B Q) ([Q':pf (not A)] imp_i (B imp false) (not A) ([P_NOT_B:pf (B imp false)] Q')) ([Q':pf B] imp_i (B imp false) (not A) ([P_NOT_B:pf (B imp false)] false_e (not A) (imp_e B false P_NOT_B Q'))).
contrapositive2 : {B:tform} {A:tform} pf (not B imp not A) -> pf (A imp B) = [B:tform] [A:tform] [Q:pf (not B imp not A)] or_e (not (not B)) (not A) (A imp B) (or_imp_i (not B) (not A) Q) ([Q':pf (not (not B))] imp_i A B ([PA:pf A] not_not_e B Q')) ([Q':pf (not A)] imp_i A B ([PA:pf A] false_e B (imp_e A false Q' PA))).
equiv_not_i : {A:tform} {B:tform} pf (A equiv B) -> pf (not A equiv not B) = [A:tform] [B:tform] [P1:pf (A equiv B)] equiv_i (not A) (not B) (contrapositive1 B A (imp_i B A ([x3:pf B] equiv_e2 A B P1 x3))) (contrapositive1 A B (imp_i A B ([x3:pf A] equiv_e1 A B P1 x3))).
equiv_not_e : {A:tform} {B:tform} pf (not A equiv not B) -> pf (A equiv B) = [A:tform] [B:tform] [p1:pf (not A equiv not B)] equiv_i A B (contrapositive2 B A (imp_i (not B) (not A) ([x3:pf (not B)] equiv_e2 (not A) (not B) p1 x3))) (contrapositive2 A B (imp_i (not A) (not B) ([x3:pf (not A)] equiv_e1 (not A) (not B) p1 x3))).
if_e : {E:tform} {A:tform} {B:tform} {C:tform} pf (if E A B) -> (pf E -> pf A -> pf C) -> (pf (not E) -> pf B -> pf C) -> pf C = [E:tform] [A:tform] [B:tform] [C:tform] [p1:pf (if E A B)] [p2:pf E -> pf A -> pf C] [p3:pf (not E) -> pf B -> pf C] cut (if E A B) C p1 ([x3:pf (if E A B)] cut (E imp A imp C) C (imp2_i E A C ([x4:pf E] [x5:pf A] p2 x4 x5)) ([x4:pf (E imp A imp C)] cut (not E imp B imp C) C (imp2_i (not E) B C ([x5:pf (not E)] [x6:pf B] p3 x5 x6)) ([x5:pf (not E imp B imp C)] or_e E (not E) C (excluded_middle E) ([p4:pf E] p2 p4 (if_e1 E A B p1 p4)) ([p4:pf (not E)] p3 p4 (if_e2 E A B p1 p4))))).
+ : tm num -> tm num -> tm num = [x3:tm num] [x4:tm num] plus x3 x4.
- : tm num -> tm num -> tm num = [x3:tm num] [x4:tm num] minus x3 x4.
* : tm num -> tm num -> tm num = [x3:tm num] [x4:tm num] times x3 x4.
>= : tm num -> tm num -> tm form = [x3:tm num] [x4:tm num] geq x3 x4.
> : tm num -> tm num -> tm form = [x3:tm num] [x4:tm num] gt x3 x4.
<= : tm num -> tm num -> tm form = [x3:tm num] [x4:tm num] leq x3 x4.
< : tm num -> tm num -> tm form = [x3:tm num] [x4:tm num] lt x3 x4.
plus_assoc : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ (+ A B) C) (+ A (+ B C))) = [A:tm num] [B:tm num] [C:tm num] _assoc_add A B C.
assoc_plus : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ A (+ B C)) (+ (+ A B) C)) = [A:tm num] [B:tm num] [C:tm num] symm num (+ (+ A B) C) (+ A (+ B C)) (plus_assoc A B C).
plus_zero : {A:tm num} pf (== num (+ A zero) A) = [A:tm num] _zero_add A.
zero_plus : {A:tm num} pf (== num (+ zero A) A) = [A:tm num] trans num (plus zero A) (plus A zero) A (_comm_add zero A) (plus_zero A).
plus_inv : {A:tm num} pf (== num (- A A) zero) = [A:tm num] _inv_add A.
inv_plus : {A:tnum} pf (== num (+ (neg A) A) zero) = [A:tnum] trans num (plus (neg A) A) (plus A (neg A)) zero (_comm_add (neg A) A) (plus_inv A).
comm_plus : {A:tm num} {B:tm num} pf (== num (+ A B) (+ B A)) = [A:tm num] [B:tm num] _comm_add A B.
plus_comm : {X1:tm num} {X2:tm num} pf (== num (+ X1 X2) (+ X2 X1)) = [X1:tm num] [X2:tm num] comm_plus X1 X2.
times_assoc : {A:tm num} {B:tm num} {C:tm num} pf (== num (* (* A B) C) (* A (* B C))) = [A:tm num] [B:tm num] [C:tm num] _assoc_mult A B C.
assoc_times : {A:tm num} {B:tm num} {C:tm num} pf (== num (* A (* B C)) (* (* A B) C)) = [A:tm num] [B:tm num] [C:tm num] symm num (* (* A B) C) (* A (* B C)) (times_assoc A B C).
times_one : {A:tm num} pf (== num (* A one) A) = [A:tm num] _zero_mult A.
one_times : {A:tm num} pf (== num (* one A) A) = [A:tm num] trans num (times one A) (times A one) A (_comm_mult one A) (times_one A).
comm_times : {A:tm num} {B:tm num} pf (== num (* A B) (* B A)) = [A:tm num] [B:tm num] _comm_mult A B.
distrib : {A:tm num} {B:tm num} {C:tm num} pf (== num (* A (+ B C)) (+ (* A B) (* A C))) = [A:tm num] [B:tm num] [C:tm num] _distrib A B C.
distrib_right : {A:tm num} {B:tm num} {C:tm num} pf (== num (* (+ A B) C) (+ (* A C) (* B C))) = [A:tm num] [B:tm num] [C:tm num] cut (== num (+ (* C A) (* C B)) (+ (* A C) (* B C))) (== num (* (+ A B) C) (+ (* A C) (* B C))) (congr2 num num (* A C) (* C A) (* B C) (* C B) ([i1:tm num] [j:tm num] == num (+ (* C A) (* C B)) (+ i1 j)) (comm_times A C) (comm_times B C) (refl num (+ (* C A) (* C B)))) ([p1:pf (== num (+ (* C A) (* C B)) (+ (* A C) (* B C)))] trans3 num (* (+ A B) C) (* C (+ A B)) (+ (* C A) (* C B)) (+ (* A C) (* B C)) (comm_times (+ A B) C) (distrib C A B) p1).
neg_neg_e : {A:tnum} pf (== num (neg (neg A)) A) = [A:tnum] cut (== num (- (- A A) (neg A)) (- zero (neg A))) (== num (neg (neg A)) A) (congr num (- A A) zero ([z1:tm num] == num (- z1 (neg A)) (- zero (neg A))) (plus_inv A) (refl num (- zero (neg A)))) ([p1:pf (== num (- (+ A (neg A)) (neg A)) (+ zero (neg (neg A))))] cut (== num (+ A zero) (+ zero (neg (neg A)))) (== num (neg (neg A)) A) (congr num zero (- (neg A) (neg A)) ([z2:tm num] == num (+ A z2) (+ zero (neg (neg A)))) (symm num (- (neg A) (neg A)) zero (plus_inv (neg A))) (trans num (+ A (+ (neg A) (neg (neg A)))) (+ (+ A (neg A)) (neg (neg A))) (+ zero (neg (neg A))) (assoc_plus A (neg A) (neg (neg A))) p1)) ([p2:pf (== num (+ A zero) (+ zero (neg (neg A))))] trans4 num (neg (neg A)) (+ (neg (neg A)) zero) (+ zero (neg (neg A))) (+ A zero) A (symm num (+ (neg (neg A)) zero) (neg (neg A)) (plus_zero (neg (neg A)))) (comm_plus (neg (neg A)) zero) (symm num (+ A zero) (+ zero (neg (neg A))) p2) (plus_zero A))).
neg_zero : pf (== num (neg zero) zero) = trans num (neg zero) (+ zero (neg zero)) zero (symm num (+ zero (neg zero)) (neg zero) (zero_plus (neg zero))) (plus_inv zero).
plus_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (== num C D) -> pf (== num (+ A C) (+ B D)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (== num C D)] congr2 num num A B C D ([i1:tm num] [j:tm num] == num (+ i1 j) (+ B D)) p1 p2 (refl num (+ B D)).
plus_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (== num (+ C A) (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] plus_cong C C A B (refl num C) p1.
plus_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (== num (+ A C) (+ B C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] plus_cong A B C C p1 (refl num C).
plus_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ A B) (+ C B)) -> pf (== num A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num (+ A B) (+ C B))] trans3 num A (+ (+ A B) (neg B)) (+ (+ C B) (neg B)) C (trans3 num A (+ A zero) (+ A (- B B)) (+ (+ A B) (neg B)) (symm num (+ A zero) A (plus_zero A)) (plus_cong2 zero (- B B) A (symm num (- B B) zero (plus_inv B))) (assoc_plus A B (neg B))) (plus_cong1 (+ A B) (+ C B) (neg B) p1) (trans3 num (+ (+ C B) (neg B)) (+ C (+ B (neg B))) (+ C zero) C (plus_assoc C B (neg B)) (plus_cong2 (- B B) zero C (plus_inv B)) (plus_zero C)).
plus_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ A B) (+ A C)) -> pf (== num B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num (+ A B) (+ A C))] plus_elim2 B A C (trans3 num (+ B A) (+ A B) (+ A C) (+ C A) (comm_plus B A) p1 (comm_plus A C)).
times_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (== num C D) -> pf (== num (* A C) (* B D)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (== num C D)] congr2 num num A B C D ([i1:tm num] [j:tm num] == num (* i1 j) (* B D)) p1 p2 (refl num (* B D)).
times_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (== num (* C A) (* C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] times_cong C C A B (refl num C) p1.
times_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (== num (* A C) (* B C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] times_cong A B C C p1 (refl num C).
neg_cong : {A:tm num} {B:tm num} pf (== num A B) -> pf (== num (neg A) (neg B)) = [A:tm num] [B:tm num] [p1:pf (== num A B)] congr num A B ([i1:tm num] == num (neg i1) (neg B)) p1 (refl num (neg B)).
cancel_a+b-b : {A:tm num} {B:tm num} pf (== num (- (+ A B) B) A) = [A:tm num] [B:tm num] symm num A (+ (+ A B) (neg B)) (trans3 num A (+ A zero) (+ A (- B B)) (+ (+ A B) (neg B)) (symm num (+ A zero) A (plus_zero A)) (plus_cong2 zero (- B B) A (symm num (- B B) zero (plus_inv B))) (assoc_plus A B (neg B))).
cancel_a-b+b : {A:tm num} {B:tm num} pf (== num (+ (- A B) B) A) = [A:tm num] [B:tm num] symm num A (+ (+ A (neg B)) B) (trans4 num A (- (+ A B) B) (+ A (+ B (neg B))) (+ A (+ (neg B) B)) (+ (+ A (neg B)) B) (symm num (- (+ A B) B) A (cancel_a+b-b A B)) (plus_assoc A B (neg B)) (plus_cong2 (+ B (neg B)) (+ (neg B) B) A (comm_plus B (neg B))) (assoc_plus A (neg B) B)).
cancel_a+b-a : {A:tm num} {B:tm num} pf (== num (- (+ A B) A) B) = [A:tm num] [B:tm num] symm num B (+ (+ A B) (neg A)) (trans3 num B (+ (- B A) A) (+ A (- B A)) (+ (+ A B) (neg A)) (symm num (+ (- B A) A) B (cancel_a-b+b B A)) (comm_plus (- B A) A) (assoc_plus A B (neg A))).
cancel_a+b-a' : {A:tm num} {B:tm num} pf (== num (+ A (- B A)) B) = [A:tm num] [B:tm num] trans num (+ A (+ B (neg A))) (+ (+ A B) (neg A)) B (assoc_plus A B (neg A)) (cancel_a+b-a A B).
cancel_a-a+b : {A:tm num} {B:tm num} pf (== num (+ (- A A) B) B) = [A:tm num] [B:tm num] trans3 num (+ (+ A (neg A)) B) (+ B (+ A (neg A))) (+ (+ B A) (neg A)) B (comm_plus (+ A (neg A)) B) (assoc_plus B A (neg A)) (cancel_a+b-b B A).
cancel_a-a+b' : {A:tm num} {B:tm num} pf (== num (+ A (+ (neg A) B)) B) = [A:tm num] [B:tm num] trans num (+ A (+ (neg A) B)) (+ (+ A (neg A)) B) B (assoc_plus A (neg A) B) (cancel_a-a+b A B).
cancel_-a+a+b : {A:tnum} {B:tm num} pf (== num (+ (+ (neg A) A) B) B) = [A:tnum] [B:tm num] trans2 num (+ (+ (neg A) A) B) (+ (+ A (neg A)) B) B (plus_cong1 (+ (neg A) A) (+ A (neg A)) B (comm_plus (neg A) A)) (cancel_a-a+b A B).
cancel_-a+a+b' : {A:tnum} {B:tm num} pf (== num (+ (neg A) (+ A B)) B) = [A:tnum] [B:tm num] trans num (+ (neg A) (+ A B)) (+ (+ (neg A) A) B) B (assoc_plus (neg A) A B) (cancel_-a+a+b A B).
times_zero : {A:tm num} pf (== num (* A zero) zero) = [A:tm num] cut (== num (+ (* zero A) (* zero A)) (* zero A)) (== num (* A zero) zero) (trans2 num (+ (* zero A) (* zero A)) (* (+ zero zero) A) (* zero A) (symm num (* (+ zero zero) A) (+ (* zero A) (* zero A)) (distrib_right zero zero A)) (times_cong1 (+ zero zero) zero A (plus_zero zero))) ([p1:pf (== num (+ (* zero A) (* zero A)) (* zero A))] cut (== num (+ (+ (* zero A) (* zero A)) (neg (* zero A))) (+ (* zero A) (neg (* zero A)))) (== num (* A zero) zero) (plus_cong1 (+ (* zero A) (* zero A)) (* zero A) (neg (* zero A)) p1) ([p2:pf (== num (- (+ (* zero A) (* zero A)) (* zero A)) (- (* zero A) (* zero A)))] trans4 num (* A zero) (* zero A) (- (+ (* zero A) (* zero A)) (* zero A)) (- (* zero A) (* zero A)) zero (comm_times A zero) (symm num (- (+ (* zero A) (* zero A)) (* zero A)) (* zero A) (cancel_a+b-b (* zero A) (* zero A))) p2 (plus_inv (* zero A)))).
zero_times : {A:tm num} pf (== num (* zero A) zero) = [A:tm num] trans num (* zero A) (* A zero) zero (comm_times zero A) (times_zero A).
neg_times1 : {A:tnum} {B:tm num} pf (== num (* (neg A) B) (neg (* A B))) = [A:tnum] [B:tm num] cut (== num zero (+ (* A B) (* (neg A) B))) (== num (* (neg A) B) (neg (* A B))) (trans3 num zero (* zero B) (* (- A A) B) (+ (* A B) (* (neg A) B)) (symm num (* zero B) zero (zero_times B)) (times_cong1 zero (- A A) B (symm num (- A A) zero (plus_inv A))) (distrib_right A (neg A) B)) ([p1:pf (== num zero (+ (* A B) (* (neg A) B)))] symm num (neg (* A B)) (* (neg A) B) (trans3 num (neg (* A B)) (+ zero (neg (* A B))) (+ (+ (* A B) (* (neg A) B)) (neg (* A B))) (* (neg A) B) (symm num (+ zero (neg (* A B))) (neg (* A B)) (zero_plus (neg (* A B)))) (plus_cong1 zero (+ (* A B) (* (neg A) B)) (neg (* A B)) p1) (cancel_a+b-a (* A B) (* (neg A) B)))).
neg_times2 : {A:tm num} {B:tnum} pf (== num (* A (neg B)) (neg (* A B))) = [A:tm num] [B:tnum] trans3 num (* A (neg B)) (* (neg B) A) (neg (* B A)) (neg (* A B)) (comm_times A (neg B)) (neg_times1 B A) (neg_cong (* B A) (* A B) (comm_times B A)).
neg_times : {A:tnum} {B:tnum} pf (== num (* (neg A) (neg B)) (* A B)) = [A:tnum] [B:tnum] trans3 num (* (neg A) (neg B)) (neg (* (neg A) B)) (neg (neg (* A B))) (* A B) (neg_times2 (neg A) B) (neg_cong (* (neg A) B) (neg (* A B)) (neg_times1 A B)) (neg_neg_e (* A B)).
distrib_minus : {A:tm num} {B:tm num} {C:tm num} pf (== num (* A (- B C)) (- (* A B) (* A C))) = [A:tm num] [B:tm num] [C:tm num] trans num (* A (+ B (neg C))) (+ (* A B) (* A (neg C))) (+ (* A B) (neg (* A C))) (distrib A B (neg C)) (plus_cong2 (* A (neg C)) (neg (* A C)) (* A B) (neg_times2 A C)).
distrib_minus_right : {A:tm num} {B:tm num} {C:tm num} pf (== num (* (- A B) C) (- (* A C) (* B C))) = [A:tm num] [B:tm num] [C:tm num] trans num (* (+ A (neg B)) C) (+ (* A C) (* (neg B) C)) (+ (* A C) (neg (* B C))) (distrib_right A (neg B) C) (plus_cong2 (* (neg B) C) (neg (* B C)) (* A C) (neg_times1 B C)).
neg_plus : {A:tnum} {B:tnum} pf (== num (+ (neg A) (neg B)) (neg (+ A B))) = [A:tnum] [B:tnum] cut (== num (+ zero (+ (neg A) (neg B))) (+ (- (+ A B) (+ A B)) (+ (neg A) (neg B)))) (== num (+ (neg A) (neg B)) (neg (+ A B))) (plus_cong1 zero (- (+ A B) (+ A B)) (+ (neg A) (neg B)) (symm num (- (+ A B) (+ A B)) zero (plus_inv (+ A B)))) ([p1:pf (== num (+ zero (+ (neg A) (neg B))) (+ (- (+ A B) (+ A B)) (+ (neg A) (neg B))))] cut (== num (+ (neg A) (neg B)) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B))))) (== num (+ (neg A) (neg B)) (neg (+ A B))) (trans5 num (+ (neg A) (neg B)) (+ (+ (neg A) (neg B)) zero) (+ zero (+ (neg A) (neg B))) (+ (- (+ A B) (+ A B)) (+ (neg A) (neg B))) (+ (+ (neg (+ A B)) (+ A B)) (+ (neg A) (neg B))) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B)))) (symm num (+ (+ (neg A) (neg B)) zero) (+ (neg A) (neg B)) (plus_zero (+ (neg A) (neg B)))) (comm_plus (+ (neg A) (neg B)) zero) p1 (plus_cong1 (+ (+ A B) (neg (+ A B))) (+ (neg (+ A B)) (+ A B)) (+ (neg A) (neg B)) (comm_plus (+ A B) (neg (+ A B)))) (plus_assoc (neg (+ A B)) (+ A B) (+ (neg A) (neg B)))) ([p2:pf (== num (+ (neg A) (neg B)) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B)))))] cut (== num (+ (+ A B) (+ (neg A) (neg B))) zero) (== num (+ (neg A) (neg B)) (neg (+ A B))) (trans3 num (+ (+ A B) (+ (neg A) (neg B))) (+ (+ (+ A B) (neg A)) (neg B)) (+ B (neg B)) zero (assoc_plus (+ A B) (neg A) (neg B)) (plus_cong1 (- (+ A B) A) B (neg B) (cancel_a+b-a A B)) (plus_inv B)) ([p3:pf (== num (+ (+ A B) (+ (neg A) (neg B))) zero)] trans3 num (+ (neg A) (neg B)) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B)))) (+ (neg (+ A B)) zero) (neg (+ A B)) p2 (plus_cong2 (+ (+ A B) (+ (neg A) (neg B))) zero (neg (+ A B)) p3) (plus_zero (neg (+ A B)))))).
times_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (!= num A zero) -> pf (== num (* A B) (* A C)) -> pf (== num B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (!= num A zero)] [p2:pf (== num (* A B) (* A C))] cut (== num (* A (- B C)) zero) (== num B C) (trans3 num (* A (- B C)) (- (* A B) (* A C)) (+ (* A C) (neg (* A C))) zero (distrib_minus A B C) (plus_cong1 (* A B) (* A C) (neg (* A C)) p2) (plus_inv (* A C))) ([p3:pf (== num (* A (- B C)) zero)] or_e (eqn A zero) (eqn (- B C) zero) (== num B C) (_cancelation A (- B C) p3) ([pA:pf (== num A zero)] false_e (== num B C) (not_e (eq num A zero) p1 pA)) ([pB:pf (== num (- B C) zero)] trans3 num B (+ (- B C) C) (+ zero C) C (symm num (+ (- B C) C) B (cancel_a-b+b B C)) (plus_cong1 (- B C) zero C pB) (zero_plus C))).
neqlem : {X:tform} {X1:tp} {A:tm X1} {B:tm X1} (pf X -> pf (== X1 A B)) -> pf (!= X1 A B) -> pf (not X) = [X:tform] [X1:tp] [A:tm X1] [B:tm X1] [l8:pf X -> pf (== X1 A B)] [p1:pf (!= X1 A B)] not_ei (eq X1 A B) X p1 ([x3:pf X] l8 x3).
neq_symm : {X1:tp} {X2:tm X1} {X3:tm X1} pf (!= X1 X2 X3) -> pf (not (== X1 X3 X2)) = [X1:tp] [X2:tm X1] [X3:tm X1] [x3:pf (!= X1 X2 X3)] neqlem (== X1 X3 X2) X1 X2 X3 ([x4:pf (== X1 X3 X2)] symm X1 X3 X2 x4) x3.
gtlem : {X:tform} {A:tm num} {B:tm num} (pf X -> pf (>= A B)) -> pf (< A B) -> pf (not X) = [X:tform] [A:tm num] [B:tm num] [l8:pf X -> pf (>= A B)] [p1:pf (< A B)] not_ei (geq A B) X p1 ([x3:pf X] l8 x3).
yes : {X1:tm form} pf X1 -> pf X1 = [X1:tm form] [p1:pf X1] cut X1 X1 p1 ([x3:pf X1] p1).
gt->geq->false : {A:tm num} {B:tm num} {X:tform} pf (> A B) -> pf (>= B A) -> pf X = [A:tm num] [B:tm num] [X:tform] [p1:pf (> A B)] [p2:pf (>= B A)] false_e X (not_e (geq B A) p1 p2).
geq->gt->false : {A:tm num} {B:tm num} {X:tform} pf (>= A B) -> pf (> B A) -> pf X = [A:tm num] [B:tm num] [X:tform] [p1:pf (>= A B)] [p2:pf (> B A)] gt->geq->false B A X p2 p1.
gt->eq->false : {A:tm num} {B:tm num} {X:tform} pf (> A B) -> pf (== num A B) -> pf X = [A:tm num] [B:tm num] [X:tform] [p1:pf (> A B)] [p2:pf (== num A B)] gt->geq->false A B X p1 (congr num A B ([i1:tm num] >= B i1) p2 (_ord_reflexivity B)).
eq->neq->false : {X1:tp} {A:tm X1} {B:tm X1} {X:tform} pf (== X1 A B) -> pf (!= X1 A B) -> pf X = [X1:tp] [A:tm X1] [B:tm X1] [X:tform] [p1:pf (== X1 A B)] [p2:pf (!= X1 A B)] false_e X (not_e (eq X1 A B) p2 p1).
geq->or_gt_eq : {A:tm num} {B:tm num} pf (>= A B) -> pf (> A B or == num A B) = [A:tm num] [B:tm num] [p1:pf (>= A B)] or_e (geq B A) (not (geq B A)) (not (geq B A) or eqn A B) (_ord_excluded_middle B A) ([pA:pf (geq B A)] or_i2 (eqn A B) (not (geq B A)) (_ord_antisymmetry A B p1 pA)) ([pB:pf (not (geq B A))] or_i1 (not (geq B A)) (eqn A B) pB).
geq->or_eq_gt : {A:tm num} {B:tm num} pf (>= A B) -> pf (== num A B or > A B) = [A:tm num] [B:tm num] [p1:pf (>= A B)] or_symm (> A B) (== num A B) (geq->or_gt_eq A B p1).
leq->or_lt_eq : {A:tm num} {B:tm num} pf (<= A B) -> pf (< A B or == num A B) = [A:tm num] [B:tm num] [p1:pf (<= A B)] or_e (> B A) (== num B A) (> B A or == num A B) (geq->or_gt_eq B A p1) ([pA:pf (> B A)] or_i1 (> B A) (== num A B) pA) ([pB:pf (== num B A)] or_i2 (== num A B) (> B A) (symm num B A pB)).
leq->or_eq_lt : {X1:tm num} {X2:tm num} pf (<= X1 X2) -> pf (== num X1 X2 or < X1 X2) = [X1:tm num] [X2:tm num] [p1:pf (<= X1 X2)] or_symm (< X1 X2) (== num X1 X2) (leq->or_lt_eq X1 X2 p1).
neq->or_gt_lt : {A:tm num} {B:tm num} pf (!= num A B) -> pf (> A B or < A B) = [A:tm num] [B:tm num] [p1:pf (!= num A B)] or_e (geq A B) (not (geq A B)) (> A B or not (geq A B)) (_ord_excluded_middle A B) ([pA:pf (geq A B)] or_e (> A B) (== num A B) (> A B or not (geq A B)) (geq->or_gt_eq A B pA) ([pa:pf (> A B)] or_i1 (> A B) (not (geq A B)) pa) ([pb:pf (== num A B)] false_e (> A B or not (geq A B)) (not_e (eq num A B) p1 pb))) ([pB:pf (not (geq A B))] or_i2 (not (geq A B)) (> A B) pB).
or_geq_gt : {A:tm num} {B:tm num} pf (>= A B or > B A) = [A:tm num] [B:tm num] _ord_excluded_middle A B.
or_geq_lt : {A:tm num} {B:tm num} pf (>= A B or < A B) = [A:tm num] [B:tm num] or_geq_gt A B.
or_leq_gt : {A:tm num} {B:tm num} pf (<= A B or > A B) = [A:tm num] [B:tm num] or_geq_gt B A.
or_gt_geq : {A:tm num} {B:tm num} pf (> A B or >= B A) = [A:tm num] [B:tm num] or_symm (>= B A) (> A B) (or_geq_gt B A).
or_gt_leq : {A:tm num} {B:tm num} pf (> A B or <= A B) = [A:tm num] [B:tm num] or_gt_geq A B.
or_gt_eq_lt : {A:tm num} {B:tm num} pf (> A B or == num A B or < A B) = [A:tm num] [B:tm num] or_e (> A B) (>= B A) (> A B or == num A B or > B A) (or_gt_geq A B) ([pA:pf (> A B)] or3_i1 (> A B) (== num A B) (> B A) pA) ([pB:pf (>= B A)] or_e (> B A) (== num B A) (> A B or == num A B or > B A) (geq->or_gt_eq B A pB) ([pa:pf (> B A)] or3_i3 (> B A) (> A B) (== num A B) pa) ([pb:pf (== num B A)] or3_i2 (== num A B) (> A B) (> B A) (symm num B A pb))).
eq->geq : {A:tm num} {B:tm num} pf (== num A B) -> pf (>= A B) = [A:tm num] [B:tm num] [p1:pf (== num A B)] congr num A B ([i1:tm num] >= i1 B) p1 (_ord_reflexivity B).
eq->leq : {A:tm num} {B:tm num} pf (== num A B) -> pf (<= A B) = [A:tm num] [B:tm num] [p1:pf (== num A B)] eq->geq B A (symm num A B p1).
eq->not_gt : {A:tm num} {B:tm num} pf (== num A B) -> pf (not (> A B)) = [A:tm num] [B:tm num] [p1:pf (== num A B)] not_not_i (<= A B) (eq->leq A B p1).
gt->geq : {A:tm num} {B:tm num} pf (> A B) -> pf (>= A B) = [A:tm num] [B:tm num] [p1:pf (> A B)] or_e (geq A B) (geq B A) (geq A B) (_ord_dichotomy A B) ([pA:pf (geq A B)] pA) ([pB:pf (geq B A)] gt->geq->false A B (geq A B) p1 pB).
lt->leq : {A:tm num} {B:tm num} pf (< A B) -> pf (<= A B) = [A:tm num] [B:tm num] [x3:pf (< A B)] gt->geq B A x3.
gt->neq : {A:tm num} {B:tm num} pf (> A B) -> pf (!= num A B) = [A:tm num] [B:tm num] [p1:pf (>= B A imp false)] imp_i (eq num A B) false ([p2:pf (eq num A B)] imp_e (>= B A) false p1 (eq->geq B A (symm num A B p2))).
lt->neq : {A:tm num} {B:tm num} pf (< A B) -> pf (!= num A B) = [A:tm num] [B:tm num] [p1:pf (< A B)] neqlem (== num A B) num B A ([x3:pf (== num A B)] symm num A B x3) (gt->neq B A p1).
neq->geq->gt : {A:tm num} {B:tm num} pf (!= num A B) -> pf (>= A B) -> pf (> A B) = [A:tm num] [B:tm num] [p1:pf (!= num A B)] [p2:pf (>= A B)] or_e (> A B) (== num A B) (> A B) (geq->or_gt_eq A B p2) ([pA:pf (> A B)] pA) ([pB:pf (== num A B)] eq->neq->false num A B (> A B) pB p1).
neq->leq->lt : {A:tm num} {B:tm num} pf (!= num A B) -> pf (<= A B) -> pf (< A B) = [A:tm num] [B:tm num] [p1:pf (!= num A B)] [p2:pf (<= A B)] neq->geq->gt B A (neqlem (== num B A) num A B ([x3:pf (== num B A)] symm num B A x3) p1) p2.
geq->leq->eq : {A:tm num} {B:tm num} pf (>= A B) -> pf (<= A B) -> pf (== num A B) = [A:tm num] [B:tm num] [x3:pf (>= A B)] [x4:pf (<= A B)] _ord_antisymmetry A B x3 x4.
gt->not_leq : {A:tm num} {B:tm num} pf (> A B) -> pf (not (<= A B)) = [A:tm num] [B:tm num] [x3:pf (> A B)] yes (> A B) x3.
not_geq->lt : {A:tm num} {B:tm num} pf (not (>= A B)) -> pf (< A B) = [A:tm num] [B:tm num] [x3:pf (not (>= A B))] yes (not (>= A B)) x3.
geq->not_lt : {A:tm num} {B:tm num} pf (>= A B) -> pf (not (< A B)) = [A:tm num] [B:tm num] [x3:pf (>= A B)] not_not_i (>= A B) x3.
trans_geq : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (>= B C) -> pf (>= A C) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= A B)] [x4:pf (>= B C)] _ord_transitivity A B C x3 x4.
trans_leq : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (<= B C) -> pf (<= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (<= A B)] [p2:pf (<= B C)] trans_geq C B A p2 p1.
trans_gt : {A:tm num} {B:tm num} {C:tm num} pf (> A B) -> pf (> B C) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= B A imp false)] [p2:pf (> B C)] imp_i (>= C A) false ([p3:pf (>= C A)] imp_e (>= B A) false p1 (trans_geq B C A (gt->geq B C p2) p3)).
trans_lt : {A:tm num} {B:tm num} {C:tm num} pf (< A B) -> pf (< B C) -> pf (< A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (< A B)] [p2:pf (< B C)] trans_gt C B A p2 p1.
trans_gt_geq : {A:tm num} {B:tm num} {C:tm num} pf (> A B) -> pf (>= B C) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A B)] [p2:pf (>= B C)] or_e (> A C) (>= C A) (> A C) (or_gt_geq A C) ([pA:pf (> A C)] pA) ([pB:pf (>= C A)] gt->geq->false A B (> A C) p1 (trans_geq B C A p2 pB)).
trans_geq_gt : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (> B C) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] [p2:pf (> B C)] or_e (> A C) (>= C A) (> A C) (or_gt_geq A C) ([pA:pf (> A C)] pA) ([pB:pf (>= C A)] gt->geq->false B C (> A C) p2 (trans_geq C A B pB p1)).
trans_lt_leq : {A:tm num} {B:tm num} {C:tm num} pf (< A B) -> pf (<= B C) -> pf (< A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (< A B)] [p2:pf (<= B C)] trans_geq_gt C B A p2 p1.
trans_leq_lt : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (< B C) -> pf (< A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (<= A B)] [p2:pf (< B C)] trans_gt_geq C B A p2 p1.
trans_eq_neq : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} pf (== X1 A B) -> pf (!= X1 B C) -> pf (!= X1 A C) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [p1:pf (== X1 A B)] [p2:pf (!= X1 B C)] congr X1 A B ([i1:tm X1] != X1 i1 C) p1 p2.
trans_neq_eq : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} pf (!= X1 A B) -> pf (== X1 B C) -> pf (!= X1 A C) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [p1:pf (!= X1 A B)] [p2:pf (== X1 B C)] congr X1 C B ([i1:tm X1] != X1 A i1) (symm X1 B C p2) p1.
trans_eq_geq : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (>= B C) -> pf (>= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] [p2:pf (>= B C)] congr num A B ([i1:tm num] >= i1 C) p1 p2.
trans_geq_eq : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (== num B C) -> pf (>= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] [p2:pf (== num B C)] congr num C B ([i1:tm num] >= A i1) (symm num B C p2) p1.
trans_eq_leq : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (<= B C) -> pf (<= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] [p2:pf (<= B C)] congr num A B ([i1:tm num] <= i1 C) p1 p2.
trans_leq_eq : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (== num B C) -> pf (<= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (<= A B)] [p2:pf (== num B C)] congr num C B ([i1:tm num] <= A i1) (symm num B C p2) p1.
trans_eq_gt : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (> B C) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] [p2:pf (> B C)] congr num A B ([i1:tm num] > i1 C) p1 p2.
trans_gt_eq : {A:tm num} {B:tm num} {C:tm num} pf (> A B) -> pf (== num B C) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A B)] [p2:pf (== num B C)] congr num C B ([i1:tm num] > A i1) (symm num B C p2) p1.
trans_eq_lt : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (< B C) -> pf (< A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] [p2:pf (< B C)] congr num A B ([i1:tm num] < i1 C) p1 p2.
trans_lt_eq : {A:tm num} {B:tm num} {C:tm num} pf (< A B) -> pf (== num B C) -> pf (< A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (< A B)] [p2:pf (== num B C)] congr num C B ([i1:tm num] < A i1) (symm num B C p2) p1.
trans_eq_geq_eq : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (>= B C) -> pf (== num C D) -> pf (>= A D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (>= B C)] [p3:pf (== num C D)] trans_eq_geq A B D p1 (trans_geq_eq B C D p2 p3).
trans_eq_gt_eq : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (> B C) -> pf (== num C D) -> pf (> A D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (> B C)] [p3:pf (== num C D)] trans_eq_gt A B D p1 (trans_gt_eq B C D p2 p3).
neq_times_closure : {A:tm num} {B:tm num} pf (!= num A zero) -> pf (!= num B zero) -> pf (!= num (* A B) zero) = [A:tm num] [B:tm num] [p1:pf (!= num A zero)] [p2:pf (!= num B zero)] not_i (eq num (times A B) zero) ([p3:pf (eq num (times A B) zero)] or_e (eqn A zero) (eqn B zero) false (_cancelation A B p3) ([x3:pf (eqn A zero)] not_e (eq num A zero) p1 x3) ([x3:pf (eqn B zero)] not_e (eq num B zero) p2 x3)).
geq_times_closure : {A:tm num} {B:tm num} pf (>= A zero) -> pf (>= B zero) -> pf (>= (* A B) zero) = [A:tm num] [B:tm num] [x3:pf (>= A zero)] [x4:pf (>= B zero)] _ord_mult_closure A B x3 x4.
gt_times_closure : {A:tm num} {B:tm num} pf (> A zero) -> pf (> B zero) -> pf (> (* A B) zero) = [A:tm num] [B:tm num] [p1:pf (> A zero)] [p2:pf (> B zero)] not_i (<= (* A B) zero) ([p3:pf (<= (* A B) zero)] cut (> (* A B) zero or == num (* A B) zero) false (geq->or_gt_eq (* A B) zero (geq_times_closure A B (gt->geq A zero p1) (gt->geq B zero p2))) ([p4:pf (> (* A B) zero or == num (* A B) zero)] or_e (> (* A B) zero) (== num (* A B) zero) false p4 ([pA:pf (> (* A B) zero)] gt->geq->false (* A B) zero false pA p3) ([pB:pf (== num (* A B) zero)] or_e (eqn A zero) (eqn B zero) false (_cancelation A B pB) ([pB1:pf (== num A zero)] not_e (eq num A zero) (gt->neq A zero p1) pB1) ([pB2:pf (== num B zero)] not_e (eq num B zero) (gt->neq B zero p2) pB2)))).
geq_plus_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (>= (+ A C) (+ B C)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= A B)] _ord_add_closure A C B x3.
geq_plus_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (>= (+ C A) (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] trans_eq_geq (+ C A) (+ A C) (+ C B) (comm_plus C A) (trans_geq_eq (+ A C) (+ B C) (+ C B) (geq_plus_cong1 A B C p1) (comm_plus B C)).
geq_plus_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (>= A B) -> pf (>= C D) -> pf (>= (+ A C) (+ B D)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (>= A B)] [p2:pf (>= C D)] trans_geq (+ A C) (+ B C) (+ B D) (geq_plus_cong1 A B C p1) (geq_plus_cong2 C D B p2).
geq_plus_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (>= (+ A B) (+ A C)) -> pf (>= B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= (+ A B) (+ A C))] cut (>= (+ (+ (neg A) A) B) (+ (+ (neg A) A) C)) (>= B C) (trans_eq_geq (+ (+ (neg A) A) B) (+ (neg A) (+ A B)) (+ (+ (neg A) A) C) (plus_assoc (neg A) A B) (trans_geq_eq (+ (neg A) (+ A B)) (+ (neg A) (+ A C)) (+ (+ (neg A) A) C) (geq_plus_cong2 (+ A B) (+ A C) (neg A) p1) (assoc_plus (neg A) A C))) ([p2:pf (>= (+ (+ (neg A) A) B) (+ (+ (neg A) A) C))] trans_eq_geq B (+ (+ (neg A) A) B) C (symm num (+ (+ (neg A) A) B) B (cancel_-a+a+b A B)) (trans_geq_eq (+ (+ (neg A) A) B) (+ (+ (neg A) A) C) C p2 (cancel_-a+a+b A C))).
geq_plus_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (>= (+ A B) (+ C B)) -> pf (>= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= (+ A B) (+ C B))] geq_plus_elim1 B A C (trans_eq_geq (+ B A) (+ A B) (+ B C) (comm_plus B A) (trans_geq_eq (+ A B) (+ C B) (+ B C) p1 (comm_plus C B))).
geq_neg_cong : {A:tm num} {B:tm num} pf (>= A B) -> pf (<= (neg A) (neg B)) = [A:tm num] [B:tm num] [p1:pf (>= A B)] cut (>= (neg B) (+ B (+ (neg A) (neg B)))) (>= (neg B) (neg A)) (trans_eq_geq (neg B) (+ A (+ (neg A) (neg B))) (+ B (+ (neg A) (neg B))) (symm num (+ A (+ (neg A) (neg B))) (neg B) (cancel_a-a+b' A (neg B))) (geq_plus_cong1 A B (+ (neg A) (neg B)) p1)) ([p2:pf (>= (neg B) (+ B (- (neg A) B)))] trans_geq_eq (neg B) (+ B (- (neg A) B)) (neg A) p2 (cancel_a+b-a' B (neg A))).
geq_neg_elim : {A:tnum} {B:tnum} pf (>= (neg A) (neg B)) -> pf (<= A B) = [A:tnum] [B:tnum] [p1:pf (>= (neg A) (neg B))] cut (<= A (neg (neg B))) (<= A B) (trans_eq_leq A (neg (neg A)) (neg (neg B)) (symm num (neg (neg A)) A (neg_neg_e A)) (geq_neg_cong (neg A) (neg B) p1)) ([p2:pf (<= A (neg (neg B)))] trans_leq_eq A (neg (neg B)) B p2 (neg_neg_e B)).
geq_times_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (>= B C) -> pf (>= (* B A) (* C A)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (>= B C)] cut (>= (+ B (neg C)) zero) (>= (* B A) (* C A)) (trans_geq_eq (+ B (neg C)) (+ C (neg C)) zero (geq_plus_cong1 B C (neg C) p2) (plus_inv C)) ([p3:pf (>= (- B C) zero)] cut (>= (- (* B A) (* C A)) zero) (>= (* B A) (* C A)) (trans_eq_geq (- (* B A) (* C A)) (* (- B C) A) zero (symm num (* (- B C) A) (- (* B A) (* C A)) (distrib_minus_right B C A)) (_ord_mult_closure (- B C) A p3 p1)) ([p4:pf (>= (- (* B A) (* C A)) zero)] cut (>= (* B A) (* C A)) (>= (* B A) (* C A)) (trans_eq_geq (* B A) (+ (- (* B A) (* C A)) (* C A)) (* C A) (symm num (+ (- (* B A) (* C A)) (* C A)) (* B A) (cancel_a-b+b (* B A) (* C A))) (trans_geq_eq (+ (- (* B A) (* C A)) (* C A)) (+ zero (* C A)) (* C A) (geq_plus_cong1 (- (* B A) (* C A)) zero (* C A) p4) (zero_plus (* C A)))) ([p5:pf (>= (* B A) (* C A))] p5))).
geq_times_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (>= B C) -> pf (>= (* A B) (* A C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (>= B C)] trans_eq_geq (* A B) (* B A) (* A C) (comm_times A B) (trans_geq_eq (* B A) (* C A) (* A C) (geq_times_cong1 A B C p1 p2) (comm_times C A)).
geq_times_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (> A zero) -> pf (>= (* A B) (* A C)) -> pf (>= B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A zero)] [p2:pf (>= (* A B) (* A C))] cut (>= (* A (- B C)) zero) (>= B C) (trans_eq_geq (* A (- B C)) (- (* A B) (* A C)) zero (distrib_minus A B C) (trans_geq_eq (+ (* A B) (neg (* A C))) (+ (* A C) (neg (* A C))) zero (geq_plus_cong1 (* A B) (* A C) (neg (* A C)) p2) (plus_inv (* A C)))) ([p3:pf (>= (* A (- B C)) zero)] or_e (>= B C) (> C B) (>= B C) (or_geq_gt B C) ([pA:pf (>= B C)] pA) ([pB:pf (> C B)] cut (> (+ C (neg B)) zero) (>= B C) (trans_gt_eq (+ C (neg B)) (+ B (neg B)) zero (gtlem (>= (+ B (neg B)) (+ C (neg B))) B C ([x3:pf (>= (+ B (neg B)) (+ C (neg B)))] geq_plus_elim2 B (neg B) C x3) pB) (plus_inv B)) ([p4:pf (> (- C B) zero)] cut (> (- (* A C) (* A B)) zero) (>= B C) (trans_eq_gt (- (* A C) (* A B)) (* A (- C B)) zero (symm num (* A (- C B)) (- (* A C) (* A B)) (distrib_minus A C B)) (gt_times_closure A (- C B) p1 p4)) ([p5:pf (> (- (* A C) (* A B)) zero)] cut (> (* A C) (* A B)) (>= B C) (trans_eq_gt (* A C) (+ (- (* A C) (* A B)) (* A B)) (* A B) (symm num (+ (- (* A C) (* A B)) (* A B)) (* A C) (cancel_a-b+b (* A C) (* A B))) (trans_gt_eq (+ (- (* A C) (* A B)) (* A B)) (+ zero (* A B)) (* A B) (gtlem (>= (+ zero (* A B)) (+ (- (* A C) (* A B)) (* A B))) zero (- (* A C) (* A B)) ([x3:pf (>= (+ zero (* A B)) (+ (- (* A C) (* A B)) (* A B)))] geq_plus_elim2 zero (* A B) (- (* A C) (* A B)) x3) p5) (zero_plus (* A B)))) ([p6:pf (< (* A B) (* A C))] gt->geq->false (* A C) (* A B) (>= B C) p6 p2))))).
geq_times_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (> A zero) -> pf (>= (* B A) (* C A)) -> pf (>= B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A zero)] [p2:pf (>= (* B A) (* C A))] geq_times_elim1 A B C p1 (trans_eq_geq (* A B) (* B A) (* A C) (comm_times A B) (trans_geq_eq (* B A) (* C A) (* A C) p2 (comm_times C A))).
leq_plus_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (<= (+ A C) (+ B C)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (<= A B)] geq_plus_cong1 B A C x3.
leq_plus_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (<= (+ C A) (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (<= A B)] geq_plus_cong2 B A C x3.
leq_plus_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (<= (+ A B) (+ C B)) -> pf (<= A C) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (<= (+ A B) (+ C B))] geq_plus_elim2 C B A x3.
leq_times_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (<= B C) -> pf (<= (* A B) (* A C)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= A zero)] [x4:pf (<= B C)] geq_times_cong2 A C B x3 x4.
leq_neg_cong : {A:tm num} {B:tm num} pf (<= A B) -> pf (>= (neg A) (neg B)) = [A:tm num] [B:tm num] [x3:pf (<= A B)] geq_neg_cong B A x3.
gt_plus_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (> A B) -> pf (> (+ A C) (+ B C)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> A B)] gtlem (>= (+ B C) (+ A C)) B A ([x4:pf (>= (+ B C) (+ A C))] geq_plus_elim2 B C A x4) x3.
gt_plus_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (> A B) -> pf (> (+ C A) (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> A B)] gtlem (>= (+ C B) (+ C A)) B A ([x4:pf (>= (+ C B) (+ C A))] geq_plus_elim1 C B A x4) x3.
gt_plus_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (>= A B) -> pf (> C D) -> pf (> (+ A C) (+ B D)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (>= A B)] [p2:pf (> C D)] trans_geq_gt (+ A C) (+ B C) (+ B D) (geq_plus_cong1 A B C p1) (gt_plus_cong2 C D B p2).
gt_plus_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (> (+ A B) (+ A C)) -> pf (> B C) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> (+ A B) (+ A C))] gtlem (>= C B) (+ A C) (+ A B) ([x4:pf (>= C B)] geq_plus_cong2 C B A x4) x3.
gt_plus_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (> (+ A B) (+ C B)) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> (+ A B) (+ C B))] gtlem (>= C A) (+ C B) (+ A B) ([x4:pf (>= C A)] geq_plus_cong1 C A B x4) x3.
gt_times_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (> A zero) -> pf (> B C) -> pf (> (* A B) (* A C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A zero)] [x3:pf (< C B)] gtlem (>= (* A C) (* A B)) C B ([x4:pf (>= (* A C) (* A B))] geq_times_elim1 A C B p1 x4) x3.
gt_times_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (> (* A B) (* A C)) -> pf (> B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [x3:pf (< (* A C) (* A B))] gtlem (>= C B) (* A C) (* A B) ([x4:pf (>= C B)] geq_times_cong2 A C B p1 x4) x3.
gt_times_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (> (* B A) (* C A)) -> pf (> B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [x3:pf (< (* C A) (* B A))] gtlem (>= C B) (* C A) (* B A) ([x4:pf (>= C B)] geq_times_cong1 A C B p1 x4) x3.
gt_neg_cong : {A:tm num} {B:tm num} pf (> A B) -> pf (< (neg A) (neg B)) = [A:tm num] [B:tm num] [x3:pf (> A B)] gtlem (>= (neg A) (neg B)) B A ([x4:pf (>= (neg A) (neg B))] geq_neg_elim A B x4) x3.
lt_plus_cong1 : {X1:tm num} {X2:tm num} {X3:tm num} pf (> X1 X2) -> pf (> (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> X1 X2)] gt_plus_cong1 X1 X2 X3 x3.
lt_plus_cong2 : {X1:tm num} {X2:tm num} {X3:tm num} pf (> X1 X2) -> pf (> (+ X3 X1) (+ X3 X2)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> X1 X2)] gt_plus_cong2 X1 X2 X3 x3.
lt_plus_elim1 : {X1:tm num} {X2:tm num} {X3:tm num} pf (> (+ X1 X2) (+ X1 X3)) -> pf (> X2 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> (+ X1 X2) (+ X1 X3))] gt_plus_elim1 X1 X2 X3 x3.
lt_times_cong2 : {X1:tm num} {X2:tm num} {X3:tm num} pf (> X1 zero) -> pf (> X2 X3) -> pf (> (* X1 X2) (* X1 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> X1 zero)] [x4:pf (> X2 X3)] gt_times_cong2 X1 X2 X3 x3 x4.
lt_neg_cong : {X1:tm num} {X2:tm num} pf (> X1 X2) -> pf (< (neg X1) (neg X2)) = [X1:tm num] [X2:tm num] [x3:pf (> X1 X2)] gt_neg_cong X1 X2 x3.
neq_plus_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (!= num A B) -> pf (!= num (+ A C) (+ B C)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (!= num A B)] neqlem (== num (+ A C) (+ B C)) num A B ([x4:pf (== num (+ A C) (+ B C))] plus_elim2 A C B x4) x3.
eval_gt : {B:word32} {A:word32} rep_div B A 0 -> pf (gt (const A) (const B)) = [B:word32] [A:word32] [p1:rep_div B A 0] cut (geq (const B) (times (const A) (const 0)) and not (geq (const B) (times (const A) (plus one (const 0))))) (> (const A) (const B)) (_eval_div B A 0 p1) ([p3:pf (>= (const B) (* (const A) (const 0)) and < (const B) (* (const A) (+ one zero)))] trans_eq_gt (const A) (* (const A) (+ one zero)) (const B) (trans num (const A) (* (const A) one) (* (const A) (+ one zero)) (symm num (* (const A) one) (const A) (times_one (const A))) (times_cong2 one (+ one zero) (const A) (symm num (+ one zero) one (plus_zero one)))) (and_e2 (>= (const B) (* (const A) (const 0))) (< (const B) (* (const A) (+ one zero))) p3)).
1>0 : rep_div 0 1 0 = 0/1.
one>zero : pf (> one zero) = eval_gt 0 1 1>0.
or_eq_neq : {A:tm num} {B:tm num} pf (== num A B or != num A B) = [A:tm num] [B:tm num] or_e (> B A) (>= A B) (== num A B or != num A B) (or_gt_geq B A) ([pA:pf (> B A)] or_i2 (!= num A B) (== num A B) (lt->neq A B pA)) ([pB:pf (>= A B)] or_e (== num A B) (> A B) (== num A B or != num A B) (geq->or_eq_gt A B pB) ([pa:pf (== num A B)] or_i1 (== num A B) (!= num A B) pa) ([pb:pf (> A B)] or_i2 (!= num A B) (== num A B) (gt->neq A B pb))).
nomatch : tnum = zero.
match : tnum = one.
listify : tnum -> tnum -> tnum -> type = [a:tnum] [pos:tnum] [neg1:tnum] pf (== num a (- pos neg1)).
plusify : tm num -> tm num -> tm num -> type = [a:tm num] [x3:tm num] [y:tm num] pf (== num a (- x3 y)).
timesify : tnum -> tnum -> tnum -> tnum -> type = [b:tnum] [x3:tnum] [y:tnum] [sign2:tnum] pf (== num (* b sign2) (* x3 y)).
catchtimes : tnum -> tnum -> tnum -> tnum -> tnum -> tm num -> tm num -> type = [a:tnum] [b:tnum] [x3:tnum] [y:tnum] [sign2:tnum] [pos:tm num] [neg1:tm num] pf (== num (* b sign2) (* x3 y) imp == num (+ a b) (- pos neg1)).
trim : tnum -> tnum -> tnum -> tnum -> type = [a:tnum] [b:tnum] [c1:tnum] [d:tnum] pf (== num (- a b) (- c1 d)).
findarr_mult : tnum -> tnum -> tnum -> tnum -> type = [a:tnum] [b:tnum] [c1:tnum] [m:tnum] pf (== num a (* b c1) and == num m m).
rearrange : tnum -> tnum -> tnum -> tnum -> type = [a:tnum] [b:tnum] [c1:tnum] [d:tnum] pf (== num (- a b) (- c1 d)).
algebra_solver : tm form -> type = [a:tm form] pf a.
listify_imp : {A:tm num} {Pos:tm num} {Neg:tm num} plusify (+ zero A) Pos Neg -> listify A Pos Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [p1:pf (== num (+ zero A) (- Pos Neg))] trans3 num A (+ A zero) (+ zero A) (- Pos Neg) (symm num (+ A zero) A (plus_zero A)) (comm_plus A zero) p1.
timesify_neg : {B:tm num} {C:tm num} {X:tnum} {Y:tnum} {Sign:tnum} timesify (* B C) X Y Sign -> timesify (* B (neg C)) X Y (neg Sign) = [B:tm num] [C:tm num] [X:tnum] [Y:tnum] [Sign:tnum] [p1:pf (== num (* (* B C) Sign) (* X Y))] trans4 num (* (* B (neg C)) (neg Sign)) (* B (* (neg C) (neg Sign))) (* B (* C Sign)) (* (* B C) Sign) (* X Y) (times_assoc B (neg C) (neg Sign)) (times_cong2 (* (neg C) (neg Sign)) (* C Sign) B (neg_times C Sign)) (symm num (* (* B C) Sign) (* B (* C Sign)) (times_assoc B C Sign)) p1.
timesify_swap : {B:tm num} {C:tm num} {D:tm num} {X:tnum} {Y:tnum} {Sign:tnum} timesify (* (* B C) D) X Y Sign -> timesify (* B (* C D)) X Y Sign = [B:tm num] [C:tm num] [D:tm num] [X:tnum] [Y:tnum] [Sign:tnum] [p1:timesify (* (* B C) D) X Y Sign] trans num (* (* B (* C D)) Sign) (* (* (* B C) D) Sign) (* X Y) (times_cong1 (* B (* C D)) (* (* B C) D) Sign (symm num (* (* B C) D) (* B (* C D)) (times_assoc B C D))) p1.
timesify_zero : {B:tm num} timesify (* B zero) one zero one = [B:tm num] trans3 num (* (* B zero) one) (* B zero) zero (* one zero) (times_one (* B zero)) (times_zero B) (symm num (* one zero) zero (times_zero one)).
timesify_remove : {B:tnum} {X:tnum} {Y:tnum} {Sign:tnum} timesify B X Y Sign -> timesify (* B one) X Y Sign = [B:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [p1:pf (== num (* B Sign) (* X Y))] cut (== num (* (* B one) Sign) (* (* B Sign) one)) (== num (* (* B one) Sign) (* X Y)) (trans3 num (* (* B one) Sign) (* B (* one Sign)) (* B (* Sign one)) (* (* B Sign) one) (times_assoc B one Sign) (times_cong2 (* one Sign) (* Sign one) B (comm_times one Sign)) (assoc_times B Sign one)) ([p2:pf (== num (* (* B one) Sign) (* (* B Sign) one))] trans3 num (* (* B one) Sign) (* (* B Sign) one) (* B Sign) (* X Y) p2 (times_one (* B Sign)) p1).
timesify_end_plus : {B:tm num} {P:tm num} {Q:tm num} timesify (* B (+ P Q)) B (+ P Q) one = [B:tm num] [P:tm num] [Q:tm num] times_one (* B (+ P Q)).
timesify_step : {B:tnum} {X:tnum} {Y:tnum} {Sign:tnum} {C:tm num} timesify B X Y Sign -> timesify (* B C) (* X C) Y Sign = [B:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [C:tm num] [p1:pf (== num (* B Sign) (* X Y))] trans3 num (* (* B C) Sign) (* (* B Sign) C) (* (* X Y) C) (* (* X C) Y) (trans3 num (* (* B C) Sign) (* B (* C Sign)) (* B (* Sign C)) (* (* B Sign) C) (times_assoc B C Sign) (times_cong2 (* C Sign) (* Sign C) B (comm_times C Sign)) (assoc_times B Sign C)) (times_cong1 (* B Sign) (* X Y) C p1) (trans3 num (* (* X Y) C) (* X (* Y C)) (* X (* C Y)) (* (* X C) Y) (times_assoc X Y C) (times_cong2 (* Y C) (* C Y) X (comm_times Y C)) (assoc_times X C Y)).
timesify_end_one : timesify one one one one = refl num (* one one).
catch_neg2 : {A:tnum} {B:tnum} {X:tnum} {Y:tnum} {Sign:tnum} {Pos:tm num} {Neg:tm num} catchtimes A B (neg X) Y Sign Pos Neg -> catchtimes A B X Y (neg Sign) Pos Neg = [A:tnum] [B:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [Pos:tm num] [Neg:tm num] [p1:pf (== num (* B Sign) (* (neg X) Y) imp == num (+ A B) (- Pos Neg))] imp_i (== num (* B (neg Sign)) (* X Y)) (== num (+ A B) (- Pos Neg)) ([p2:pf (== num (* B (neg Sign)) (* X Y))] cut (== num (* B Sign) (* (neg X) Y)) (== num (+ A B) (- Pos Neg)) (trans3 num (* B Sign) (neg (neg (* B Sign))) (neg (* X Y)) (* (neg X) Y) (symm num (neg (neg (* B Sign))) (* B Sign) (neg_neg_e (* B Sign))) (neg_cong (neg (* B Sign)) (* X Y) (trans num (neg (* B Sign)) (* B (neg Sign)) (* X Y) (symm num (* B (neg Sign)) (neg (* B Sign)) (neg_times2 B Sign)) p2)) (symm num (* (neg X) Y) (neg (* X Y)) (neg_times1 X Y))) ([p3:pf (== num (* B Sign) (* (neg X) Y))] imp_e (== num (* B Sign) (* (neg X) Y)) (== num (+ A B) (- Pos Neg)) p1 p3)).
catch_zero : {A:tm num} {Pos:tm num} {Neg:tm num} {B:tnum} {X:tnum} plusify A Pos Neg -> catchtimes A B X zero one Pos Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [B:tnum] [X:tnum] [p1:pf (== num A (- Pos Neg))] imp_i (== num (* B one) (* X zero)) (== num (+ A B) (- Pos Neg)) ([p2:pf (== num (* B one) (* X zero))] cut (== num B zero) (== num (+ A B) (- Pos Neg)) (trans3 num B (* B one) (* X zero) zero (symm num (* B one) B (times_one B)) p2 (times_zero X)) ([p3:pf (== num B zero)] trans3 num (+ A B) (+ A zero) A (- Pos Neg) (plus_cong2 B zero A p3) (plus_zero A) p1)).
catch_neg_one : {A:tm num} {Pos:tm num} {Neg:tm num} {B:tnum} {X:tnum} plusify A Pos Neg -> catchtimes A B (neg X) one one Pos (+ Neg X) = [A:tm num] [Pos:tm num] [Neg:tm num] [B:tnum] [X:tnum] [p1:pf (== num A (- Pos Neg))] imp_i (== num (* B one) (* (neg X) one)) (== num (+ A B) (+ Pos (neg (+ Neg X)))) ([p2:pf (== num (* B one) (* (neg X) one))] cut (== num B (neg X)) (== num (+ A B) (+ Pos (neg (+ Neg X)))) (trans3 num B (* B one) (* (neg X) one) (neg X) (symm num (* B one) B (times_one B)) p2 (times_one (neg X))) ([p3:pf (== num B (neg X))] cut (== num (+ A B) (+ Pos (+ (neg Neg) (neg X)))) (== num (+ A B) (+ Pos (neg (+ Neg X)))) (trans2 num (+ A B) (+ (- Pos Neg) (neg X)) (+ Pos (+ (neg Neg) (neg X))) (plus_cong A (- Pos Neg) B (neg X) p1 p3) (plus_assoc Pos (neg Neg) (neg X))) ([p4:pf (== num (+ A B) (+ Pos (- (neg Neg) X)))] trans2 num (+ A B) (+ Pos (- (neg Neg) X)) (+ Pos (neg (+ Neg X))) p4 (plus_cong2 (+ (neg Neg) (neg X)) (neg (+ Neg X)) Pos (neg_plus Neg X))))).
catch_one : {A:tm num} {Pos:tm num} {Neg:tm num} {B:tnum} {X:tnum} plusify A Pos Neg -> catchtimes A B X one one (+ Pos X) Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [B:tnum] [X:tnum] [p1:pf (== num A (- Pos Neg))] imp_i (== num (* B one) (* X one)) (== num (+ A B) (+ (+ Pos X) (neg Neg))) ([p2:pf (== num (* B one) (* X one))] cut (== num B X) (== num (+ A B) (+ (+ Pos X) (neg Neg))) (trans3 num B (* B one) (* X one) X (symm num (* B one) B (times_one B)) p2 (times_one X)) ([p3:pf (== num B X)] trans4 num (+ A B) (+ (- Pos Neg) X) (+ Pos (+ (neg Neg) X)) (+ Pos (+ X (neg Neg))) (+ (+ Pos X) (neg Neg)) (plus_cong A (- Pos Neg) B X p1 p3) (plus_assoc Pos (neg Neg) X) (plus_cong2 (+ (neg Neg) X) (+ X (neg Neg)) Pos (comm_plus (neg Neg) X)) (assoc_plus Pos X (neg Neg)))).
catch_break : {A:tm num} {X:tm num} {P:tm num} {Q:tm num} {Pos:tm num} {Neg:tm num} {B:tnum} plusify (+ (+ A (* X P)) (* X Q)) Pos Neg -> catchtimes A B X (+ P Q) one Pos Neg = [A:tm num] [X:tm num] [P:tm num] [Q:tm num] [Pos:tm num] [Neg:tm num] [B:tnum] [p1:pf (== num (+ (+ A (* X P)) (* X Q)) (- Pos Neg))] imp_i (== num (* B one) (* X (+ P Q))) (== num (+ A B) (- Pos Neg)) ([p2:pf (== num (* B one) (* X (+ P Q)))] cut (== num B (+ (* X P) (* X Q))) (== num (+ A B) (- Pos Neg)) (trans3 num B (* B one) (* X (+ P Q)) (+ (* X P) (* X Q)) (symm num (* B one) B (times_one B)) p2 (distrib X P Q)) ([p3:pf (== num B (+ (* X P) (* X Q)))] trans3 num (+ A B) (+ A (+ (* X P) (* X Q))) (+ (+ A (* X P)) (* X Q)) (- Pos Neg) (plus_cong2 B (+ (* X P) (* X Q)) A p3) (assoc_plus A (* X P) (* X Q)) p1)).
plusify_minus : {A:tm num} {B:tm num} {C:tm num} {Pos:tm num} {Neg:tm num} plusify (- (- A B) C) Pos Neg -> plusify (- A (+ B C)) Pos Neg = [A:tm num] [B:tm num] [C:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify (- (- A B) C) Pos Neg] trans3 num (+ A (neg (+ B C))) (+ A (+ (neg B) (neg C))) (+ (+ A (neg B)) (neg C)) (- Pos Neg) (plus_cong2 (neg (+ B C)) (+ (neg B) (neg C)) A (symm num (+ (neg B) (neg C)) (neg (+ B C)) (neg_plus B C))) (assoc_plus A (neg B) (neg C)) p1.
plusify_swap : {A:tm num} {B:tm num} {C:tm num} {Pos:tm num} {Neg:tm num} plusify (+ (+ A B) C) Pos Neg -> plusify (+ A (+ B C)) Pos Neg = [A:tm num] [B:tm num] [C:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify (+ (+ A B) C) Pos Neg] trans num (+ A (+ B C)) (+ (+ A B) C) (- Pos Neg) (assoc_plus A B C) p1.
plusify_neg_one : {A:tm num} {B:tm num} {Pos:tm num} {Neg:tm num} plusify (- A B) Pos Neg -> plusify (+ A (* (neg one) B)) Pos Neg = [A:tm num] [B:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify (- A B) Pos Neg] trans num (+ A (* (neg one) B)) (+ A (neg B)) (- Pos Neg) (plus_cong2 (* (neg one) B) (neg B) A (trans num (* (neg one) B) (neg (* one B)) (neg B) (neg_times1 one B) (neg_cong (* one B) B (one_times B)))) p1.
plusify_neg_one' : {A:tm num} {B:tm num} {Pos:tm num} {Neg:tm num} plusify (- A B) Pos Neg -> plusify (+ A (* B (neg one))) Pos Neg = [A:tm num] [B:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify (- A B) Pos Neg] trans num (+ A (* B (neg one))) (+ A (* (neg one) B)) (- Pos Neg) (plus_cong2 (* B (neg one)) (* (neg one) B) A (comm_times B (neg one))) (plusify_neg_one A B Pos Neg p1).
plusify_neg : {A:tm num} {B:tm num} {Pos:tm num} {Neg:tm num} plusify (+ A B) Pos Neg -> plusify (- A (neg B)) Pos Neg = [A:tm num] [B:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify (+ A B) Pos Neg] trans num (+ A (neg (neg B))) (+ A B) (- Pos Neg) (plus_cong2 (neg (neg B)) B A (neg_neg_e B)) p1.
plusify_remove : {A:tm num} {Pos:tm num} {Neg:tm num} plusify A Pos Neg -> plusify (+ A zero) Pos Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify A Pos Neg] trans num (+ A zero) A (- Pos Neg) (plus_zero A) p1.
plusify_step_mult_neg : {A:tnum} {B:tm num} {C:tnum} {X:tnum} {Y:tnum} {Sign:tnum} {Pos:tm num} {Neg:tm num} catchtimes A (* B (neg C)) X Y Sign Pos Neg -> timesify (* (* one B) (neg C)) X Y Sign -> plusify (- A (* B C)) Pos Neg = [A:tnum] [B:tm num] [C:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [Pos:tm num] [Neg:tm num] [p1:pf (== num (* (* B (neg C)) Sign) (* X Y) imp == num (+ A (* B (neg C))) (- Pos Neg))] [p2:pf (== num (* (* (* one B) (neg C)) Sign) (* X Y))] cut (== num (* (* B (neg C)) Sign) (* X Y)) (== num (+ A (neg (* B C))) (- Pos Neg)) (trans5 num (* (* B (neg C)) Sign) (* B (* (neg C) Sign)) (* one (* B (* (neg C) Sign))) (* (* one B) (* (neg C) Sign)) (* (* (* one B) (neg C)) Sign) (* X Y) (times_assoc B (neg C) Sign) (symm num (* one (* B (* (neg C) Sign))) (* B (* (neg C) Sign)) (one_times (* B (* (neg C) Sign)))) (assoc_times one B (* (neg C) Sign)) (assoc_times (* one B) (neg C) Sign) p2) ([p3:pf (== num (* (* B (neg C)) Sign) (* X Y))] cut (== num (+ A (* B (neg C))) (- Pos Neg)) (== num (+ A (neg (* B C))) (- Pos Neg)) (imp_e (== num (* (* B (neg C)) Sign) (* X Y)) (== num (+ A (* B (neg C))) (- Pos Neg)) p1 p3) ([p4:pf (== num (+ A (* B (neg C))) (- Pos Neg))] trans num (+ A (neg (* B C))) (+ A (* B (neg C))) (- Pos Neg) (plus_cong2 (neg (* B C)) (* B (neg C)) A (symm num (* B (neg C)) (neg (* B C)) (neg_times2 B C))) p4)).
plusify_step_mult : {A:tnum} {B:tm num} {C:tm num} {X:tnum} {Y:tnum} {Sign:tnum} {Pos:tm num} {Neg:tm num} catchtimes A (* B C) X Y Sign Pos Neg -> timesify (* (* one B) C) X Y Sign -> plusify (+ A (* B C)) Pos Neg = [A:tnum] [B:tm num] [C:tm num] [X:tnum] [Y:tnum] [Sign:tnum] [Pos:tm num] [Neg:tm num] [p1:pf (== num (* (* B C) Sign) (* X Y) imp == num (+ A (* B C)) (- Pos Neg))] [p2:pf (== num (* (* (* one B) C) Sign) (* X Y))] cut (== num (* (* B C) Sign) (* X Y)) (== num (+ A (* B C)) (- Pos Neg)) (trans5 num (* (* B C) Sign) (* B (* C Sign)) (* one (* B (* C Sign))) (* (* one B) (* C Sign)) (* (* (* one B) C) Sign) (* X Y) (times_assoc B C Sign) (symm num (* one (* B (* C Sign))) (* B (* C Sign)) (one_times (* B (* C Sign)))) (assoc_times one B (* C Sign)) (assoc_times (* one B) C Sign) p2) ([p3:pf (== num (* (* B C) Sign) (* X Y))] imp_e (== num (* (* B C) Sign) (* X Y)) (== num (+ A (* B C)) (- Pos Neg)) p1 p3).
plusify_step_neg_one : {A:tm num} {Pos:tm num} {Neg:tm num} plusify A Pos Neg -> plusify (- A one) Pos (+ Neg one) = [A:tm num] [Pos:tm num] [Neg:tm num] [p1:pf (== num A (- Pos Neg))] trans3 num (+ A (neg one)) (+ (- Pos Neg) (neg one)) (+ Pos (+ (neg Neg) (neg one))) (+ Pos (neg (+ Neg one))) (plus_cong1 A (- Pos Neg) (neg one) p1) (plus_assoc Pos (neg Neg) (neg one)) (plus_cong2 (+ (neg Neg) (neg one)) (neg (+ Neg one)) Pos (neg_plus Neg one)).
plusify_step_one : {A:tm num} {Pos:tm num} {Neg:tm num} plusify A Pos Neg -> plusify (+ A one) (+ Pos one) Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [p1:pf (== num A (- Pos Neg))] trans4 num (+ A one) (+ (- Pos Neg) one) (+ Pos (+ (neg Neg) one)) (+ Pos (+ one (neg Neg))) (+ (+ Pos one) (neg Neg)) (plus_cong1 A (- Pos Neg) one p1) (plus_assoc Pos (neg Neg) one) (plus_cong2 (+ (neg Neg) one) (+ one (neg Neg)) Pos (comm_plus (neg Neg) one)) (assoc_plus Pos one (neg Neg)).
plusify_step_neg : {A:tm num} {Pos:tm num} {Neg:tm num} {B:tm num} plusify A Pos Neg -> plusify (- A B) Pos (+ Neg (* one B)) = [A:tm num] [Pos:tm num] [Neg:tm num] [B:tm num] [p1:pf (== num A (- Pos Neg))] trans3 num (+ A (neg B)) (+ (- Pos Neg) (neg (* one B))) (+ Pos (+ (neg Neg) (neg (* one B)))) (+ Pos (neg (+ Neg (* one B)))) (plus_cong A (- Pos Neg) (neg B) (neg (* one B)) p1 (neg_cong B (* one B) (symm num (* one B) B (one_times B)))) (plus_assoc Pos (neg Neg) (neg (* one B))) (plus_cong2 (+ (neg Neg) (neg (* one B))) (neg (+ Neg (* one B))) Pos (neg_plus Neg (* one B))).
plusify_step : {A:tm num} {Pos:tm num} {Neg:tm num} {B:tm num} plusify A Pos Neg -> plusify (+ A B) (+ Pos (* one B)) Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [B:tm num] [p1:pf (== num A (- Pos Neg))] trans num (+ A B) (+ (- Pos Neg) (* one B)) (+ (+ Pos (* one B)) (neg Neg)) (plus_cong A (- Pos Neg) B (* one B) p1 (symm num (* one B) B (one_times B))) (trans3 num (+ (+ Pos (neg Neg)) (* one B)) (+ Pos (+ (neg Neg) (* one B))) (+ Pos (+ (* one B) (neg Neg))) (+ (+ Pos (* one B)) (neg Neg)) (plus_assoc Pos (neg Neg) (* one B)) (plus_cong2 (+ (neg Neg) (* one B)) (+ (* one B) (neg Neg)) Pos (comm_plus (neg Neg) (* one B))) (assoc_plus Pos (* one B) (neg Neg))).
plusify_zero : plusify zero zero zero = symm num (- zero zero) zero (plus_inv zero).
trim_get : {A:tm num} {C:tm num} {B:tm num} trim (+ A C) (+ B C) A B = [A:tm num] [C:tm num] [B:tm num] cut (== num (+ (+ A C) (neg (+ B C))) (+ A (+ C (+ (neg B) (neg C))))) (== num (- (+ A C) (+ B C)) (- A B)) (trans num (+ (+ A C) (neg (+ B C))) (+ A (+ C (neg (+ B C)))) (+ A (+ C (+ (neg B) (neg C)))) (plus_assoc A C (neg (+ B C))) (plus_cong2 (+ C (neg (+ B C))) (+ C (+ (neg B) (neg C))) A (plus_cong2 (neg (+ B C)) (+ (neg B) (neg C)) C (symm num (+ (neg B) (neg C)) (neg (+ B C)) (neg_plus B C))))) ([p2:pf (== num (- (+ A C) (+ B C)) (+ A (+ C (- (neg B) C))))] cut (== num (+ A (+ C (+ (neg B) (neg C)))) (+ A (neg B))) (== num (- (+ A C) (+ B C)) (- A B)) (trans num (+ A (+ C (+ (neg B) (neg C)))) (+ A (+ (+ C (neg B)) (neg C))) (+ A (neg B)) (plus_cong2 (+ C (+ (neg B) (neg C))) (+ (+ C (neg B)) (neg C)) A (assoc_plus C (neg B) (neg C))) (plus_cong2 (- (+ C (neg B)) C) (neg B) A (cancel_a+b-a C (neg B)))) ([p3:pf (== num (+ A (+ C (- (neg B) C))) (- A B))] trans num (- (+ A C) (+ B C)) (+ A (+ C (- (neg B) C))) (- A B) p2 p3)).
trim_getmult : {C:tnum} {D:tnum} {A:tm num} {B:tm num} findarr_mult C D one nomatch -> trim (+ A C) (+ B D) A B = [C:tnum] [D:tnum] [A:tm num] [B:tm num] [p2:pf (== num C (* D one) and == num zero zero)] cut (== num C D) (== num (+ (+ A C) (neg (+ B D))) (+ A (neg B))) (trans num C (* D one) D (and_e1 (== num C (* D one)) (== num zero zero) p2) (times_one D)) ([p3:pf (== num C D)] cut (== num (- (- C B) D) (neg B)) (== num (+ (+ A C) (neg (+ B D))) (+ A (neg B))) (congr num D C ([i1:tm num] == num (- (- C B) i1) (neg B)) (symm num C D p3) (cancel_a+b-a C (neg B))) ([p4:pf (== num (- (- C B) D) (neg B))] cut (== num (+ C (neg (+ B D))) (neg B)) (== num (+ (+ A C) (neg (+ B D))) (+ A (neg B))) (trans3 num (+ C (neg (+ B D))) (+ C (+ (neg B) (neg D))) (+ (+ C (neg B)) (neg D)) (neg B) (plus_cong2 (neg (+ B D)) (+ (neg B) (neg D)) C (symm num (+ (neg B) (neg D)) (neg (+ B D)) (neg_plus B D))) (assoc_plus C (neg B) (neg D)) p4) ([p5:pf (== num (- C (+ B D)) (neg B))] trans num (+ (+ A C) (neg (+ B D))) (+ A (+ C (neg (+ B D)))) (+ A (neg B)) (plus_assoc A C (neg (+ B D))) (plus_cong2 (- C (+ B D)) (neg B) A p5)))).
trim_step1 : {A:tnum} {B:tnum} {X:tnum} {Y:tnum} {C:tm num} trim A B X Y -> trim (+ A C) B (+ X C) Y = [A:tnum] [B:tnum] [X:tnum] [Y:tnum] [C:tm num] [p1:pf (== num (- A B) (- X Y))] cut (== num (+ (+ A C) (neg B)) (+ (+ X C) (neg Y))) (== num (- (+ A C) B) (- (+ X C) Y)) (trans3 num (+ (+ A C) (neg B)) (+ (+ A (neg B)) C) (+ (- X Y) C) (+ (+ X C) (neg Y)) (trans3 num (+ (+ A C) (neg B)) (+ A (+ C (neg B))) (+ A (+ (neg B) C)) (+ (+ A (neg B)) C) (plus_assoc A C (neg B)) (plus_cong2 (+ C (neg B)) (+ (neg B) C) A (comm_plus C (neg B))) (assoc_plus A (neg B) C)) (plus_cong1 (- A B) (- X Y) C p1) (trans3 num (+ (+ X (neg Y)) C) (+ X (+ (neg Y) C)) (+ X (+ C (neg Y))) (+ (+ X C) (neg Y)) (plus_assoc X (neg Y) C) (plus_cong2 (+ (neg Y) C) (+ C (neg Y)) X (comm_plus (neg Y) C)) (assoc_plus X C (neg Y)))) ([p2:pf (== num (- (+ A C) B) (- (+ X C) Y))] p2).
trim_step2 : {A:tnum} {B:tnum} {X:tnum} {Y:tnum} {C:tm num} trim A B X Y -> trim A (+ B C) X (+ Y C) = [A:tnum] [B:tnum] [X:tnum] [Y:tnum] [C:tm num] [p1:pf (== num (- A B) (- X Y))] trans3 num (+ A (neg (+ B C))) (+ A (+ (neg B) (neg C))) (+ X (+ (neg Y) (neg C))) (+ X (neg (+ Y C))) (plus_cong2 (neg (+ B C)) (+ (neg B) (neg C)) A (symm num (+ (neg B) (neg C)) (neg (+ B C)) (neg_plus B C))) (trans3 num (+ A (+ (neg B) (neg C))) (+ (+ A (neg B)) (neg C)) (+ (- X Y) (neg C)) (+ X (+ (neg Y) (neg C))) (assoc_plus A (neg B) (neg C)) (plus_cong1 (- A B) (- X Y) (neg C) p1) (plus_assoc X (neg Y) (neg C))) (plus_cong2 (+ (neg Y) (neg C)) (neg (+ Y C)) X (neg_plus Y C)).
fam_step : {X:tnum} {Y:tnum} {Z:tnum} {B:tm num} {M:tnum} findarr_mult X Y Z match -> findarr_mult (* X B) (* Y B) Z M = [X:tnum] [Y:tnum] [Z:tnum] [B:tm num] [M:tnum] [p1:pf (== num X (* Y Z) and == num match match)] cut (== num (* X B) (* (* Y B) Z)) (== num (* X B) (* (* Y B) Z) and == num M M) (trans num (* X B) (* (* Y Z) B) (* (* Y B) Z) (times_cong1 X (* Y Z) B (and_e1 (== num X (* Y Z)) (== num match match) p1)) (trans3 num (* (* Y Z) B) (* Y (* Z B)) (* Y (* B Z)) (* (* Y B) Z) (times_assoc Y Z B) (times_cong2 (* Z B) (* B Z) Y (comm_times Z B)) (assoc_times Y B Z))) ([p2:pf (== num (* X B) (* (* Y B) Z))] and_i (== num (* X B) (* (* Y B) Z)) (== num M M) p2 (refl num M)).
fam_swap : {X:tnum} {Y:tnum} {Z:tm num} {B:tm num} {M:tnum} findarr_mult X Y (* Z B) M -> findarr_mult X (* Y B) Z M = [X:tnum] [Y:tnum] [Z:tm num] [B:tm num] [M:tnum] [p1:pf (== num X (* Y (* Z B)) and == num M M)] cut (== num X (* Y (* Z B)) and == num M M) (== num X (* (* Y B) Z) and == num M M) p1 ([x3:pf (== num X (* Y (* Z B)) and == num M M)] and_i (== num X (* (* Y B) Z)) (== num M M) (trans3 num X (* Y (* Z B)) (* Y (* B Z)) (* (* Y B) Z) (and_e1 (== num X (* Y (* Z B))) (== num M M) p1) (times_cong2 (* Z B) (* B Z) Y (comm_times Z B)) (symm num (* (* Y B) Z) (* Y (* B Z)) (times_assoc Y B Z))) (refl num M)).
fam_finish : {M:tnum} findarr_mult one one one M = [M:tnum] and_i (== num one (* one one)) (== num M M) (symm num (* one one) one (times_one one)) (refl num M).
fam_one : {X:tnum} {Y:tnum} findarr_mult X Y one nomatch -> findarr_mult X one Y match = [X:tnum] [Y:tnum] [p1:pf (== num X (* Y one) and == num nomatch nomatch)] and_i (== num X (* one Y)) (== num match match) (trans num X (* Y one) (* one Y) (and_e1 (== num X (* Y one)) (== num nomatch nomatch) p1) (comm_times Y one)) (refl num match).
rearr_finish : rearrange zero zero zero zero = refl num (- zero zero).
rearr_end : {X:tnum} {Y:tnum} {A:tnum} {B:tnum} rearrange X Y zero zero -> trim A B X Y -> rearrange A B zero zero = [X:tnum] [Y:tnum] [A:tnum] [B:tnum] [p1:pf (== num (- X Y) (- zero zero))] [p2:pf (== num (- A B) (- X Y))] trans num (- A B) (- X Y) (- zero zero) p2 p1.
rearr_pos : {X:tnum} {Y:tnum} {A:tnum} {C:tnum} rearrange X Y zero zero -> trim A C X Y -> rearrange A zero C zero = [X:tnum] [Y:tnum] [A:tnum] [C:tnum] [p1:pf (== num (- X Y) (- zero zero))] [p2:pf (== num (- A C) (- X Y))] cut (== num (- A C) zero) (== num (+ A (neg zero)) (+ C (neg zero))) (trans3 num (- A C) (- X Y) (- zero zero) zero p2 p1 (plus_inv zero)) ([p3:pf (== num (- A C) zero)] cut (== num A C) (== num (+ A (neg zero)) (+ C (neg zero))) (trans3 num A (+ (- A C) C) (+ zero C) C (symm num (+ (- A C) C) A (cancel_a-b+b A C)) (plus_cong1 (- A C) zero C p3) (zero_plus C)) ([p4:pf (== num A C)] plus_cong1 A C (neg zero) p4)).
rearr_neg : {X:tnum} {Y:tnum} {B:tnum} {D:tnum} rearrange X Y zero zero -> trim B D X Y -> rearrange zero B zero D = [X:tnum] [Y:tnum] [B:tnum] [D:tnum] [p1:pf (== num (- X Y) (- zero zero))] [p2:pf (== num (- B D) (- X Y))] cut (== num (- B D) zero) (== num (+ zero (neg B)) (+ zero (neg D))) (trans3 num (- B D) (- X Y) (- zero zero) zero p2 p1 (plus_inv zero)) ([p3:pf (== num (- B D) zero)] cut (== num B D) (== num (+ zero (neg B)) (+ zero (neg D))) (trans3 num B (+ (- B D) D) (+ zero D) D (symm num (+ (- B D) D) B (cancel_a-b+b B D)) (plus_cong1 (- B D) zero D p3) (zero_plus D)) ([p4:pf (== num B D)] plus_cong2 (neg B) (neg D) zero (neg_cong B D p4))).
plus_swap : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num (- A B) (- C D)) -> pf (== num (- A C) (- B D)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num (- A B) (- C D))] cut (== num A (+ B (- C D))) (== num (- A C) (- B D)) (trans3 num A (+ (- A B) B) (+ (- C D) B) (+ B (- C D)) (symm num (+ (- A B) B) A (cancel_a-b+b A B)) (plus_cong1 (- A B) (- C D) B p1) (comm_plus (- C D) B)) ([p2:pf (== num A (+ B (- C D)))] cut (== num (+ A (neg C)) (+ B (neg D))) (== num (- A C) (- B D)) (trans3 num (+ A (neg C)) (+ (+ B (- C D)) (neg C)) (+ B (+ (- C D) (neg C))) (+ B (neg D)) (plus_cong1 A (+ B (- C D)) (neg C) p2) (plus_assoc B (- C D) (neg C)) (plus_cong2 (- (+ C (neg D)) C) (neg D) B (cancel_a+b-a C (neg D)))) ([p3:pf (== num (- A C) (- B D))] p3)).
plus_swap2 : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num (+ A B) (+ C D)) -> pf (== num (- A D) (- C B)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num (+ A B) (+ C D))] cut (== num A (+ (+ C (neg B)) D)) (== num (+ A (neg D)) (- C B)) (trans5 num A (- (+ A B) B) (+ (+ C D) (neg B)) (+ C (+ D (neg B))) (+ C (+ (neg B) D)) (+ (+ C (neg B)) D) (symm num (- (+ A B) B) A (cancel_a+b-b A B)) (plus_cong1 (+ A B) (+ C D) (neg B) p1) (plus_assoc C D (neg B)) (plus_cong2 (+ D (neg B)) (+ (neg B) D) C (comm_plus D (neg B))) (assoc_plus C (neg B) D)) ([p2:pf (== num A (+ (- C B) D))] trans num (+ A (neg D)) (+ (+ (- C B) D) (neg D)) (- C B) (plus_cong1 A (+ (- C B) D) (neg D) p2) (cancel_a+b-b (- C B) D)).
rearr_one : {Z:tnum} {W:tnum} {Y:tnum} {X:tnum} {B:tnum} {A:tnum} {C:tnum} rearrange Z W Y zero -> trim X B Z W -> trim A C X Y -> rearrange A B C zero = [Z:tnum] [W:tnum] [Y:tnum] [X:tnum] [B:tnum] [A:tnum] [C:tnum] [p1:pf (== num (- Z W) (- Y zero))] [p2:pf (== num (- X B) (- Z W))] [p3:pf (== num (- A C) (- X Y))] cut (== num (- X Y) (- B zero)) (== num (- A B) (- C zero)) (plus_swap X B Y zero (trans num (- X B) (- Z W) (- Y zero) p2 p1)) ([p4:pf (== num (- X Y) (- B zero))] plus_swap A C B zero (trans num (- A C) (- X Y) (- B zero) p3 p4)).
rearr_two : {Z:tnum} {W:tnum} {Y:tnum} {A:tnum} {X:tnum} {B:tnum} {D:tnum} rearrange Z W zero Y -> trim A X Z W -> trim B D X Y -> rearrange A B zero D = [Z:tnum] [W:tnum] [Y:tnum] [A:tnum] [X:tnum] [B:tnum] [D:tnum] [p1:pf (== num (- Z W) (- zero Y))] [p2:pf (== num (- A X) (- Z W))] [p3:pf (== num (- B D) (- X Y))] cut (== num (- A zero) (- X Y)) (== num (- A B) (- zero D)) (plus_swap A X zero Y (trans num (- A X) (- Z W) (- zero Y) p2 p1)) ([p4:pf (== num (- A zero) (- X Y))] plus_swap A zero B D (trans num (- A zero) (- X Y) (- B D) p4 (symm num (- B D) (- X Y) p3))).
rearr_three : {Z:tnum} {W:tnum} {Y:tnum} {X:tnum} {B:tnum} {A:tnum} {C:tnum} rearrange Z W Y zero -> trim X B Z W -> trim A C X Y -> rearrange C zero A B = [Z:tnum] [W:tnum] [Y:tnum] [X:tnum] [B:tnum] [A:tnum] [C:tnum] [p1:rearrange Z W Y zero] [p2:trim X B Z W] [p3:trim A C X Y] symm num (- A B) (- C zero) (rearr_one Z W Y X B A C p1 p2 p3).
rearr_four : {Z:tnum} {W:tnum} {Y:tnum} {A:tnum} {X:tnum} {B:tnum} {D:tnum} rearrange Z W zero Y -> trim A X Z W -> trim B D X Y -> rearrange zero D A B = [Z:tnum] [W:tnum] [Y:tnum] [A:tnum] [X:tnum] [B:tnum] [D:tnum] [p1:rearrange Z W zero Y] [p2:trim A X Z W] [p3:trim B D X Y] symm num (- A B) (- zero D) (rearr_two Z W Y A X B D p1 p2 p3).
rearr_any1 : {X:tnum} {C:tnum} {Y:tnum} {D:tnum} {A:tnum} {B:tnum} rearrange X C Y D -> trim A B X Y -> rearrange A B C D = [X:tnum] [C:tnum] [Y:tnum] [D:tnum] [A:tnum] [B:tnum] [p1:pf (== num (- X C) (- Y D))] [p2:pf (== num (- A B) (- X Y))] trans num (- A B) (- X Y) (- C D) p2 (plus_swap X C Y D p1).
rearr_any2 : {X:tnum} {B:tnum} {Y:tnum} {D:tnum} {A:tnum} {C:tnum} rearrange X B Y D -> trim A C X Y -> rearrange A B C D = [X:tnum] [B:tnum] [Y:tnum] [D:tnum] [A:tnum] [C:tnum] [p1:pf (== num (- X B) (- Y D))] [p2:pf (== num (- A C) (- X Y))] plus_swap A C B D (trans num (- A C) (- X Y) (- B D) p2 (plus_swap X B Y D p1)).
solver_rearrange : {Pos:tnum} {Neg:tnum} {Pos':tnum} {Neg':tnum} {B:tnum} {A:tnum} rearrange Pos Neg Pos' Neg' -> listify B Pos' Neg' -> listify A Pos Neg -> algebra_solver (== num A B) = [Pos:tnum] [Neg:tnum] [Pos':tnum] [Neg':tnum] [B:tnum] [A:tnum] [p1:rearrange Pos Neg Pos' Neg'] [p2:listify B Pos' Neg'] [p3:listify A Pos Neg] trans3 num A (- Pos Neg) (- Pos' Neg') B p3 p1 (symm num B (- Pos' Neg') p2).
eq_arrange : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num (- A B) (- C D)) -> pf (== num A B) -> pf (== num C D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num (- A B) (- C D))] [p2:pf (== num A B)] cut (== num (- C D) zero) (== num C D) (trans3 num (- C D) (- A B) (+ B (neg B)) zero (symm num (- A B) (- C D) p1) (plus_cong1 A B (neg B) p2) (plus_inv B)) ([p3:pf (== num (- C D) zero)] trans3 num C (+ (- C D) D) (+ zero D) D (symm num (+ (- C D) D) C (cancel_a-b+b C D)) (plus_cong1 (- C D) zero D p3) (zero_plus D)).
solver_eq : {A:tm num} {D:tm num} {C:tm num} {B:tm num} algebra_solver (== num (+ A D) (+ C B)) -> algebra_solver (== num A B imp == num C D) = [A:tm num] [D:tm num] [C:tm num] [B:tm num] [p1:algebra_solver (== num (+ A D) (+ C B))] imp_i (== num A B) (== num C D) ([p2:pf (== num A B)] eq_arrange A B C D (plus_swap2 A D C B p1) p2).
solver_eq_neg : {D:tm num} {B:tm num} {C:tm num} {A:tm num} algebra_solver (== num (+ D B) (+ C A)) -> algebra_solver (== num A B imp == num C D) = [D:tm num] [B:tm num] [C:tm num] [A:tm num] [p1:algebra_solver (== num (+ D B) (+ C A))] imp_i (== num A B) (== num C D) ([p2:pf (== num A B)] eq_arrange (neg A) (neg B) C D (plus_swap2 (neg A) D C (neg B) (trans num (+ (neg A) D) (+ D (neg A)) (- C B) (comm_plus (neg A) D) (plus_swap2 D B C A p1))) (neg_cong A B p2)).
geq_arrange : {A:tm num} {D:tm num} {C:tm num} {B:tm num} pf (== num (+ A D) (+ C B)) -> pf (>= A B) -> pf (>= C D) = [A:tm num] [D:tm num] [C:tm num] [B:tm num] [p0:pf (== num (+ A D) (+ C B))] [p1:pf (>= A B)] cut (== num (- A B) (- C D)) (>= C D) (plus_swap2 A D C B p0) ([p2:pf (== num (- A B) (- C D))] cut (>= (+ A (neg B)) zero) (>= C D) (trans_geq_eq (+ A (neg B)) (+ B (neg B)) zero (geq_plus_cong1 A B (neg B) p1) (plus_inv B)) ([p3:pf (>= (- A B) zero)] cut (>= (- C D) zero) (>= C D) (trans_eq_geq (- C D) (- A B) zero (symm num (- A B) (- C D) p2) p3) ([p4:pf (>= (- C D) zero)] cut (>= C (+ zero D)) (>= C D) (trans_eq_geq C (+ (- C D) D) (+ zero D) (symm num (+ (- C D) D) C (cancel_a-b+b C D)) (geq_plus_cong1 (- C D) zero D p4)) ([p5:pf (>= C (+ zero D))] trans_geq_eq C (+ zero D) D p5 (zero_plus D))))).
solver_geq : {A:tm num} {D:tm num} {C:tm num} {B:tm num} algebra_solver (== num (+ A D) (+ C B)) -> algebra_solver (>= A B imp >= C D) = [A:tm num] [D:tm num] [C:tm num] [B:tm num] [p1:algebra_solver (== num (+ A D) (+ C B))] imp_i (>= A B) (>= C D) ([p2:pf (>= A B)] geq_arrange A D C B p1 p2).
solver_gt : {C:tm num} {D:tm num} {A:tm num} {B:tm num} algebra_solver (>= C D imp >= A B) -> algebra_solver (< A B imp < C D) = [C:tm num] [D:tm num] [A:tm num] [B:tm num] [p1:algebra_solver (>= C D imp >= A B)] imp_i (not (>= A B)) (not (>= C D)) ([p2:pf (not (>= A B))] not_ei (>= A B) (>= C D) p2 ([x3:pf (>= C D)] imp_e (>= C D) (>= A B) p1 x3)).
__P : {a:tm num} {b:tm num} algebra_solver (== num a b imp == num (- a b) zero) = [a:tm num] [b:tm num] solver_eq a zero (- a b) b (solver_rearrange (+ zero (* one a)) zero (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (- a b) b) (+ a zero) (rearr_three zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero))))).
eq_shift : {A:tm num} {B:tm num} pf (== num A B) -> pf (== num (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (== num A B)] imp_e (== num A B) (== num (- A B) zero) (__P A B) x3.
__P : {a:tm num} {b:tm num} algebra_solver (== num (- a b) zero imp == num a b) = [a:tm num] [b:tm num] solver_eq (- a b) b a zero (solver_rearrange (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ zero (* one a)) zero (+ a zero) (+ (- a b) b) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))).
eq_unshift : {A:tm num} {B:tm num} pf (== num (- A B) zero) -> pf (== num A B) = [A:tm num] [B:tm num] [x3:pf (== num (- A B) zero)] imp_e (== num (- A B) zero) (== num A B) (__P A B) x3.
neq_shift : {A:tm num} {B:tm num} pf (!= num A B) -> pf (!= num (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (!= num A B)] neqlem (== num (- A B) zero) num A B ([x4:pf (== num (- A B) zero)] eq_unshift A B x4) x3.
__P : {a:tm num} {b:tm num} algebra_solver (>= a b imp >= (- a b) zero) = [a:tm num] [b:tm num] solver_geq a zero (- a b) b (solver_rearrange (+ zero (* one a)) zero (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (- a b) b) (+ a zero) (rearr_three zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero))))).
geq_shift : {A:tm num} {B:tm num} pf (>= A B) -> pf (>= (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (>= A B)] imp_e (>= A B) (>= (- A B) zero) (__P A B) x3.
__P : {a:tm num} {b:tm num} algebra_solver (>= (- a b) zero imp >= a b) = [a:tm num] [b:tm num] solver_geq (- a b) b a zero (solver_rearrange (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ zero (* one a)) zero (+ a zero) (+ (- a b) b) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))).
geq_unshift : {A:tm num} {B:tm num} pf (>= (- A B) zero) -> pf (>= A B) = [A:tm num] [B:tm num] [x3:pf (>= (- A B) zero)] imp_e (>= (- A B) zero) (>= A B) (__P A B) x3.
__P : {a:tm num} {b:tm num} algebra_solver (<= a b imp <= (- a b) zero) = [a:tm num] [b:tm num] solver_geq b (- a b) zero a (solver_rearrange (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (+ zero (* one a)) zero (+ zero a) (+ b (- a b)) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_get (+ zero (* one b)) (* one a) zero)) (listify_imp (+ zero a) (+ zero (* one a)) zero (plusify_swap zero zero a (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))) (listify_imp (+ b (- a b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap zero b (- a b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap (+ zero b) a (neg b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero b) a) (+ (+ zero (* one b)) (* one a)) zero b (plusify_step (+ zero b) (+ zero (* one b)) zero a (plusify_step zero zero zero b plusify_zero))))))).
leq_shift : {A:tm num} {B:tm num} pf (<= A B) -> pf (<= (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (<= A B)] imp_e (<= A B) (<= (- A B) zero) (__P A B) x3.
__P : {a:tm num} {b:tm num} algebra_solver (<= (- a b) zero imp <= a b) = [a:tm num] [b:tm num] solver_geq zero a b (- a b) (solver_rearrange (+ zero (* one a)) zero (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (+ b (- a b)) (+ zero a) (rearr_three zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_get (+ zero (* one b)) (* one a) zero)) (listify_imp (+ b (- a b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap zero b (- a b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap (+ zero b) a (neg b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero b) a) (+ (+ zero (* one b)) (* one a)) zero b (plusify_step (+ zero b) (+ zero (* one b)) zero a (plusify_step zero zero zero b plusify_zero)))))) (listify_imp (+ zero a) (+ zero (* one a)) zero (plusify_swap zero zero a (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero))))).
leq_unshift : {A:tm num} {B:tm num} pf (<= (- A B) zero) -> pf (<= A B) = [A:tm num] [B:tm num] [x3:pf (<= (- A B) zero)] imp_e (<= (- A B) zero) (<= A B) (__P A B) x3.
gt_shift : {A:tm num} {B:tm num} pf (> A B) -> pf (> (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (> A B)] gtlem (<= (- A B) zero) B A ([x4:pf (<= (- A B) zero)] leq_unshift A B x4) x3.
lt_shift : {A:tm num} {B:tm num} pf (< A B) -> pf (< (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (< A B)] gtlem (>= (- A B) zero) A B ([x4:pf (>= (- A B) zero)] geq_unshift A B x4) x3.
_swap1 : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (== num (+ a b) c1 imp == num a (- c1 b)) = [a:tm num] [b:tm num] [c2:tm num] solver_eq (+ a b) (- c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (+ a b) (- c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_get (+ (+ zero (* one a)) (* one b)) (* one c2) (+ zero (* one a)))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (+ a b) (- c2 b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap zero (+ a b) (- c2 b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap (+ zero (+ a b)) c2 (neg b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero (+ a b)) c2) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) zero b (plusify_step (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero c2 (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
_swap2 : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (== num (- a b) c1 imp == num a (+ c1 b)) = [a:tm num] [b:tm num] [c2:tm num] solver_eq (- a b) (+ c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (- a b) (+ c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_step1 (+ (+ zero (* one a)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one a)) (+ zero (* one a)) (* one b) (trim_get (+ zero (* one a)) (* one c2) (+ zero (* one a))))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) (+ c2 b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) (+ c2 b) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap (+ zero (- a b)) c2 b (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_step (+ (+ zero (- a b)) c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) b (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
eq_swap_a+b_c : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ A B) C) -> pf (== num A (- C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (== num (+ A B) C)] imp_e (== num (+ A B) C) (== num A (- C B)) (_swap1 A B C) x3.
eq_swap_a_b+c : {A:tm num} {B:tm num} {C:tm num} pf (== num A (+ B C)) -> pf (== num (- A C) B) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A (+ B C))] symm num B (- A C) (eq_swap_a+b_c B C A (symm num A (+ B C) p1)).
eq_swap_a-b_c : {A:tm num} {B:tm num} {C:tm num} pf (== num (- A B) C) -> pf (== num A (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (== num (- A B) C)] imp_e (== num (- A B) C) (== num A (+ C B)) (_swap2 A B C) x3.
_swap3 : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (>= (+ a b) c1 imp >= a (- c1 b)) = [a:tm num] [b:tm num] [c2:tm num] solver_geq (+ a b) (- c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (+ a b) (- c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_get (+ (+ zero (* one a)) (* one b)) (* one c2) (+ zero (* one a)))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (+ a b) (- c2 b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap zero (+ a b) (- c2 b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap (+ zero (+ a b)) c2 (neg b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero (+ a b)) c2) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) zero b (plusify_step (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero c2 (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
_swap4 : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (>= a (+ b c1) imp >= (- a c1) b) = [a:tm num] [b:tm num] [c2:tm num] solver_geq a b (- a c2) (+ b c2) (solver_rearrange (+ (+ zero (* one a)) (* one b)) zero (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (+ (- a c2) (+ b c2)) (+ a b) (rearr_three (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one c2)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ (+ zero (* one a)) (* one b)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one c2) zero) (trim_step1 (+ (+ zero (* one a)) (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) (+ zero (* one a)) (* one c2) (trim_get (+ zero (* one a)) (* one b) (+ zero (* one a))))) (listify_imp (+ (- a c2) (+ b c2)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (plusify_swap zero (- a c2) (+ b c2) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (plusify_swap (+ zero (- a c2)) b c2 (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (plusify_step (+ (+ zero (- a c2)) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one c2)) c2 (plusify_step (+ zero (- a c2)) (+ zero (* one a)) (+ zero (* one c2)) b (plusify_swap zero a (neg c2) (+ zero (* one a)) (+ zero (* one c2)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))))))) (listify_imp (+ a b) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))).
_swap5 : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (>= (- a b) c1 imp >= a (+ c1 b)) = [a:tm num] [b:tm num] [c2:tm num] solver_geq (- a b) (+ c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (- a b) (+ c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_step1 (+ (+ zero (* one a)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one a)) (+ zero (* one a)) (* one b) (trim_get (+ zero (* one a)) (* one c2) (+ zero (* one a))))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) (+ c2 b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) (+ c2 b) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap (+ zero (- a b)) c2 b (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_step (+ (+ zero (- a b)) c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) b (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
geq_swap_a+b_c : {A:tm num} {B:tm num} {C:tm num} pf (>= (+ A B) C) -> pf (>= A (- C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= (+ A B) C)] imp_e (>= (+ A B) C) (>= A (- C B)) (_swap3 A B C) x3.
geq_swap_a_b+c : {A:tm num} {B:tm num} {C:tm num} pf (>= A (+ B C)) -> pf (>= (- A C) B) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= A (+ B C))] imp_e (>= A (+ B C)) (>= (- A C) B) (_swap4 A B C) x3.
geq_swap_a-b_c : {A:tm num} {B:tm num} {C:tm num} pf (>= (- A B) C) -> pf (>= A (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= (- A B) C)] imp_e (>= (- A B) C) (>= A (+ C B)) (_swap5 A B C) x3.
leq_swap_a_b+c : {A:tm num} {B:tm num} {C:tm num} pf (<= A (+ B C)) -> pf (<= (- A C) B) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (<= A (+ B C))] geq_swap_a+b_c B C A x3.
gt_swap_a+b_c : {A:tm num} {B:tm num} {C:tm num} pf (> (+ A B) C) -> pf (> A (- C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> (+ A B) C)] gtlem (>= (- C B) A) C (+ A B) ([x4:pf (>= (- C B) A)] geq_swap_a-b_c C B A x4) x3.
gt_swap_a_b-c : {A:tm num} {B:tm num} {C:tm num} pf (> A (- B C)) -> pf (> (+ A C) B) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> A (- B C))] gtlem (>= B (+ A C)) (- B C) A ([x4:pf (>= B (+ A C))] geq_swap_a_b+c B A C x4) x3.
lt_swap_a_b+c : {A:tm num} {B:tm num} {C:tm num} pf (< A (+ B C)) -> pf (< (- A C) B) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (< A (+ B C))] gt_swap_a+b_c B C A x3.
lt_swap_a-b_c : {A:tm num} {B:tm num} {C:tm num} pf (< (- A B) C) -> pf (< A (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (< (- A B) C)] gt_swap_a_b-c C A B x3.
sign0 : {A:tm num} pf (>= A zero) -> pf (== num (sign A) zero) = [A:tm num] [x3:pf (>= A zero)] _sign0 A x3.
sign1 : {A:tm num} pf (< A zero) -> pf (== num (sign A) one) = [A:tm num] [x3:pf (< A zero)] _sign1 A x3.
__P : {a:tnum} {b:tnum} algebra_solver (== num (if1 one a b) a) = [a:tnum] [b:tnum] solver_rearrange (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ zero (* one a)) zero a (if1 one a b) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp a (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)) (listify_imp (if1 one a b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (times one a) (times (minus one one) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step_mult (+ zero (times one a)) (minus one one) b (* one b) (+ one (neg one)) one (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (catch_break (+ zero (times one a)) (* one b) one (neg one) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (* (minus one one) b) (plusify_neg_one' (+ (+ zero (times one a)) (* (* one b) one)) (* one b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step_mult_neg (+ (+ zero (times one a)) (* (* one b) one)) one b (* one b) one (neg one) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (catch_neg2 (+ (+ zero (times one a)) (* (* one b) one)) (* one (neg b)) (* one b) one one (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (catch_neg_one (+ (+ zero (times one a)) (* (* one b) one)) (+ (+ zero (* one a)) (* one b)) zero (* one (neg b)) (* one b) (plusify_step_mult (+ zero (times one a)) (* one b) one (* one b) one one (+ (+ zero (* one a)) (* one b)) zero (catch_one (+ zero (times one a)) (+ zero (* one a)) zero (* (* one b) one) (* one b) (plusify_step_mult zero one a (* one a) one one (+ zero (* one a)) zero (catch_one zero zero zero (* one a) (* one a) plusify_zero) (timesify_step (* one one) one one one a (timesify_remove one one one one timesify_end_one)))) (timesify_remove (* one (* one b)) (* one b) one one (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one))))))) (timesify_neg (* one one) b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one)))))) (timesify_step (* one (minus one one)) one (+ one (neg one)) one b (timesify_end_plus one one (neg one)))))).
if1_1 : {A:tm num} {B:tnum} {C:tnum} pf (== num A one) -> pf (== num (if1 A B C) B) = [A:tm num] [B:tnum] [C:tnum] [p1:pf (== num A one)] congr num A one ([i1:tm num] == num (if1 i1 B C) B) p1 (__P B C).
ifgtz1 : {A:tm num} {B:tnum} {C:tnum} pf (> A zero) -> pf (== num (ifgtz A B C) B) = [A:tm num] [B:tnum] [C:tnum] [p1:pf (> A zero)] if1_1 (sign (neg A)) B C (sign1 (neg A) (trans_lt_eq (neg A) (neg zero) zero (gt_neg_cong A zero p1) neg_zero)).
__P : {a:tnum} {b:tnum} algebra_solver (== num (if1 zero a b) b) = [a:tnum] [b:tnum] solver_rearrange (+ zero (* one b)) zero (+ zero (* one b)) zero b (if1 zero a b) (rearr_pos zero zero (+ zero (* one b)) (+ zero (* one b)) rearr_finish (trim_get zero (* one b) zero)) (listify_imp b (+ zero (* one b)) zero (plusify_step zero zero zero b plusify_zero)) (listify_imp (if1 zero a b) (+ zero (* one b)) zero (plusify_swap zero (times zero a) (times (minus one zero) b) (+ zero (* one b)) zero (plusify_step_mult (+ zero (times zero a)) (minus one zero) b (* one b) (+ one (neg zero)) one (+ zero (* one b)) zero (catch_break (+ zero (times zero a)) (* one b) one (neg zero) (+ zero (* one b)) zero (* (minus one zero) b) (plusify_step_mult (+ (+ zero (times zero a)) (* (* one b) one)) (* one b) (neg zero) one zero (neg one) (+ zero (* one b)) zero (catch_neg2 (+ (+ zero (times zero a)) (* (* one b) one)) (* (* one b) (neg zero)) one zero one (+ zero (* one b)) zero (catch_zero (+ (+ zero (times zero a)) (* (* one b) one)) (+ zero (* one b)) zero (* (* one b) (neg zero)) (neg one) (plusify_step_mult (+ zero (times zero a)) (* one b) one (* one b) one one (+ zero (* one b)) zero (catch_one (+ zero (times zero a)) zero zero (* (* one b) one) (* one b) (plusify_step_mult zero zero a (* one a) zero one zero zero (catch_zero zero zero zero (* zero a) (* one a) plusify_zero) (timesify_step (* one zero) one zero one a (timesify_zero one)))) (timesify_remove (* one (* one b)) (* one b) one one (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one))))))) (timesify_neg (* one (* one b)) zero one zero one (timesify_zero (* one (* one b)))))) (timesify_step (* one (minus one zero)) one (+ one (neg zero)) one b (timesify_end_plus one one (neg zero)))))).
if1_0 : {A:tm num} {B:tnum} {C:tnum} pf (== num A zero) -> pf (== num (if1 A B C) C) = [A:tm num] [B:tnum] [C:tnum] [p1:pf (== num A zero)] congr num A zero ([i1:tm num] == num (if1 i1 B C) C) p1 (__P B C).
ifgtz2 : {A:tm num} {B:tnum} {C:tnum} pf (<= A zero) -> pf (== num (ifgtz A B C) C) = [A:tm num] [B:tnum] [C:tnum] [p1:pf (<= A zero)] if1_0 (sign (neg A)) B C (sign0 (neg A) (trans_geq_eq (neg A) (neg zero) zero (leq_neg_cong A zero p1) neg_zero)).
ifeq_e1 : {A:tm num} {B:tm num} {C:tnum} {D:tnum} pf (== num A B) -> pf (== num (ifeq A B C D) C) = [A:tm num] [B:tm num] [C:tnum] [D:tnum] [p1:pf (== num A B)] cut (== num (ifgtz (- B A) D C) C) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) C) (ifgtz2 (- B A) D C (eq->geq zero (- B A) (symm num (- B A) zero (eq_shift B A (symm num A B p1))))) ([p2:pf (== num (ifgtz (- B A) D C) C)] cut (== num (ifgtz (- A B) D C) C) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) C) (ifgtz2 (- A B) D C (eq->geq zero (- A B) (symm num (- A B) zero (eq_shift A B p1)))) ([p3:pf (== num (ifgtz (minus A B) D C) C)] congr num (ifgtz (- B A) D C) C ([i1:tm num] == num (ifgtz (minus A B) D i1) C) p2 p3)).
ifeq_e2 : {A:tm num} {B:tm num} {C:tnum} {D:tnum} pf (!= num A B) -> pf (== num (ifeq A B C D) D) = [A:tm num] [B:tm num] [C:tnum] [D:tnum] [p1:pf (!= num A B)] or_e (> A B) (< A B) (== num (ifgtz (- A B) D (ifgtz (- B A) D C)) D) (neq->or_gt_lt A B p1) ([pA:pf (> A B)] ifgtz1 (- A B) D (ifgtz (- B A) D C) (gt_shift A B pA)) ([pB:pf (< A B)] cut (== num (ifgtz (- A B) D D) D) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) D) (ifgtz2 (- A B) D D (lt->leq (- A B) zero (lt_shift A B pB))) ([pB1:pf (== num (ifgtz (- A B) D D) D)] cut (== num (ifgtz (- B A) D C) D) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) D) (ifgtz1 (- B A) D C (gt_shift B A pB)) ([pB2:pf (== num (ifgtz (- B A) D C) D)] congr num (ifgtz (- B A) D C) D ([i1:tm num] == num (ifgtz (minus A B) D i1) D) pB2 pB1))).
times_geq_geq : {A:tm num} {B:tm num} pf (>= A zero) -> pf (>= B zero) -> pf (>= (* A B) zero) = [A:tm num] [B:tm num] [x3:pf (>= A zero)] [x4:pf (>= B zero)] geq_times_closure A B x3 x4.
times_geq_leq : {A:tm num} {B:tm num} pf (>= A zero) -> pf (<= B zero) -> pf (<= (* A B) zero) = [A:tm num] [B:tm num] [p1:pf (>= A zero)] [p2:pf (<= B zero)] cut (>= (neg B) zero) (<= (* A B) zero) (trans_geq_eq (neg B) (neg zero) zero (leq_neg_cong B zero p2) neg_zero) ([p3:pf (>= (neg B) zero)] cut (>= (neg (* A B)) zero) (<= (* A B) zero) (trans_eq_geq (neg (* A B)) (* A (neg B)) zero (symm num (* A (neg B)) (neg (* A B)) (neg_times2 A B)) (times_geq_geq A (neg B) p1 p3)) ([p4:pf (>= (neg (* A B)) zero)] geq_neg_elim (* A B) zero (trans_geq_eq (neg (* A B)) zero (neg zero) p4 (symm num (neg zero) zero neg_zero)))).
times_leq_geq : {A:tm num} {B:tm num} pf (<= A zero) -> pf (>= B zero) -> pf (<= (* A B) zero) = [A:tm num] [B:tm num] [p1:pf (<= A zero)] [p2:pf (>= B zero)] trans_eq_leq (* A B) (* B A) zero (comm_times A B) (times_geq_leq B A p2 p1).
times_gt_gt : {A:tm num} {B:tm num} pf (> A zero) -> pf (> B zero) -> pf (> (* A B) zero) = [A:tm num] [B:tm num] [x3:pf (> A zero)] [x4:pf (> B zero)] gt_times_closure A B x3 x4.
plus_geq_geq : {A:tm num} {B:tm num} pf (>= A zero) -> pf (>= B zero) -> pf (>= (+ A B) zero) = [A:tm num] [B:tm num] [p1:pf (>= A zero)] [p2:pf (>= B zero)] trans_geq_eq (+ A B) (+ zero zero) zero (geq_plus_cong A zero B zero p1 p2) (plus_zero zero).
incr_gt : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (> B C) -> pf (> (+ B A) C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (> B C)] trans_eq_gt_eq (+ B A) (+ A B) (+ zero C) C (comm_plus B A) (gt_plus_cong A zero B C p1 p2) (zero_plus C).
incr_lt : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (< B C) -> pf (< B (+ C A)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= A zero)] [x4:pf (< B C)] incr_gt A C B x3 x4.
incr_geq : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (>= B C) -> pf (>= (+ B A) C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (>= B C)] trans_eq_geq_eq (+ B A) (+ A B) (+ zero C) C (comm_plus B A) (geq_plus_cong A zero B C p1 p2) (zero_plus C).
decr_lt : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (< B C) -> pf (< (- B A) C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (< B C)] lt_swap_a_b+c B C A (incr_lt A B C p1 p2).
succpred : {A:tnum} pf (== num (succ (pred A)) A) = [A:tnum] cancel_a-b+b A one.
predsucc : {A:tnum} pf (== num (pred (succ A)) A) = [A:tnum] cancel_a+b-b A one.
_succ_gt : {a:tnum} algebra_solver (> one zero imp > (succ a) a) = [a:tnum] solver_gt a (succ a) zero one (solver_geq a one zero (succ a) (solver_rearrange (+ (+ zero (* one a)) one) zero (+ (+ zero (* one a)) one) zero (+ zero (succ a)) (+ a one) (rearr_pos (+ zero (* one a)) (+ zero (* one a)) (+ (+ zero (* one a)) one) (+ (+ zero (* one a)) one) (rearr_end zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) one (+ zero (* one a)))) (listify_imp (+ zero (succ a)) (+ (+ zero (* one a)) one) zero (plusify_swap zero zero (succ a) (+ (+ zero (* one a)) one) zero (plusify_swap (+ zero zero) a one (+ (+ zero (* one a)) one) zero (plusify_step_one (+ (+ zero zero) a) (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))))) (listify_imp (+ a one) (+ (+ zero (* one a)) one) zero (plusify_swap zero a one (+ (+ zero (* one a)) one) zero (plusify_step_one (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))))).
succ_gt : {A:tnum} pf (> (succ A) A) = [A:tnum] imp_e (> one zero) (> (succ A) A) (_succ_gt A) (eval_gt 0 1 1>0).
succ_lt : {A:tm num} pf (< A (succ A)) = [A:tm num] succ_gt A.
_pred_lt : {a:tnum} algebra_solver (> one zero imp < (pred a) a) = [a:tnum] solver_gt (pred a) a zero one (solver_geq (pred a) one zero a (solver_rearrange (+ (+ zero (* one a)) one) (+ zero one) (+ zero (* one a)) zero (+ zero a) (+ (pred a) one) (rearr_one zero zero zero (+ zero one) (+ zero one) (+ (+ zero (* one a)) one) (+ zero (* one a)) rearr_finish (trim_get zero one zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero one (trim_get zero (* one a) zero))) (listify_imp (+ zero a) (+ zero (* one a)) zero (plusify_swap zero zero a (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))) (listify_imp (+ (pred a) one) (+ (+ zero (* one a)) one) (+ zero one) (plusify_swap zero (pred a) one (+ (+ zero (* one a)) one) (+ zero one) (plusify_step_one (+ zero (pred a)) (+ zero (* one a)) (+ zero one) (plusify_swap zero a (neg one) (+ zero (* one a)) (+ zero one) (plusify_step_neg_one (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))))))).
pred_lt : {A:tnum} pf (< (pred A) A) = [A:tnum] imp_e (> one zero) (< (pred A) A) (_pred_lt A) (eval_gt 0 1 1>0).
pred_gt : {A:tm num} pf (> A (pred A)) = [A:tm num] pred_lt A.
_succa_preda : {a:tnum} algebra_solver (== num (* (succ a) (pred a)) (- (* a a) one)) = [a:tnum] solver_rearrange (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (+ zero (* (* one a) a)) (+ zero one) (- (* a a) one) (* (succ a) (pred a)) (rearr_any1 (+ zero (* (* one a) a)) (+ zero (* (* one a) a)) (+ zero one) (+ zero one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (rearr_any1 zero (+ zero one) zero (+ zero one) (+ zero (* (* one a) a)) (+ zero (* (* one a) a)) (rearr_neg zero zero (+ zero one) (+ zero one) rearr_finish (trim_get zero one zero)) (trim_get zero (* (* one a) a) zero)) (trim_step2 (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (+ zero (* (* one a) a)) zero one (trim_get (+ zero (* (* one a) a)) (* one a) zero))) (listify_imp (- (* a a) one) (+ zero (* (* one a) a)) (+ zero one) (plusify_swap zero (* a a) (neg one) (+ zero (* (* one a) a)) (+ zero one) (plusify_step_neg_one (+ zero (* a a)) (+ zero (* (* one a) a)) zero (plusify_step_mult zero a a (* (* one a) a) one one (+ zero (* (* one a) a)) zero (catch_one zero zero zero (* a a) (* (* one a) a) plusify_zero) (timesify_step (* one a) (* one a) one one a (timesify_step one one one one a timesify_end_one)))))) (listify_imp (* (succ a) (pred a)) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (plusify_step_mult zero (succ a) (pred a) (* one (succ a)) (+ a (neg one)) one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_break zero (* one (succ a)) a (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (* (succ a) (pred a)) (plusify_neg_one' (+ zero (* (* one (succ a)) a)) (* one (succ a)) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (plusify_step_mult_neg (+ zero (* (* one (succ a)) a)) one (succ a) (* one one) (+ a one) (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_neg2 (+ zero (* (* one (succ a)) a)) (* one (neg (succ a))) (* one one) (+ a one) one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_break (+ zero (* (* one (succ a)) a)) (neg (* one one)) a one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (* one (neg (succ a))) (plusify_step_mult (+ (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a)) (neg (* one one)) one one one (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_neg2 (+ (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a)) (* (neg (* one one)) one) one one one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_neg_one (+ (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a)) (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (* (neg (* one one)) one) one (plusify_step_mult (+ zero (* (* one (succ a)) a)) (neg (* one one)) a (* one a) one (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (catch_neg2 (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a) (* one a) one one (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (catch_neg_one (+ zero (* (* one (succ a)) a)) (+ (+ zero (* (* one a) a)) (* one a)) zero (* (neg (* one one)) a) (* one a) (plusify_step_mult zero (* one (succ a)) a (* (* one one) a) (+ a one) one (+ (+ zero (* (* one a) a)) (* one a)) zero (catch_break zero (* (* one one) a) a one (+ (+ zero (* (* one a) a)) (* one a)) zero (* (* one (succ a)) a) (plusify_step_mult (+ zero (* (* (* one one) a) a)) (* (* one one) a) one (* one a) one one (+ (+ zero (* (* one a) a)) (* one a)) zero (catch_one (+ zero (* (* (* one one) a) a)) (+ zero (* (* one a) a)) zero (* (* (* one one) a) one) (* one a) (plusify_step_mult zero (* (* one one) a) a (* (* one a) a) one one (+ zero (* (* one a) a)) zero (catch_one zero zero zero (* (* (* one one) a) a) (* (* one a) a) plusify_zero) (timesify_step (* one (* (* one one) a)) (* one a) one one a (timesify_swap one (* one one) a (* one a) one one (timesify_step (* one (* one one)) one one one a (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_remove (* one (* (* one one) a)) (* one a) one one (timesify_swap one (* one one) a (* one a) one one (timesify_step (* one (* one one)) one one one a (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_step (* one (* one (succ a))) (* one one) (+ a one) one a (timesify_swap one one (succ a) (* one one) (+ a one) one (timesify_end_plus (* one one) a one)))))) (timesify_step (* one (neg (* one one))) one one (neg one) a (timesify_neg one (* one one) one one one (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_remove (* one (neg (* one one))) one one (neg one) (timesify_neg one (* one one) one one one (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_neg (* one one) (succ a) (* one one) (+ a one) one (timesify_end_plus (* one one) a one))))) (timesify_end_plus (* one (succ a)) a (neg one)))).
succa_preda : {A:tnum} pf (== num (* (succ A) (pred A)) (- (* A A) one)) = [A:tnum] _succa_preda A.
pf_add_inv_cancel : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ A B) C) -> pf (== num B (+ (neg A) C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num (+ A B) C)] trans num B (- C A) (+ (neg A) C) (eq_swap_a+b_c B A C (trans num (+ B A) (+ A B) C (comm_plus B A) p1)) (comm_plus C (neg A)).
__P : {a:tm num} {b:tm num} algebra_solver (> b zero imp > (+ a b) a) = [a:tm num] [b:tm num] solver_gt a (+ a b) zero b (solver_geq a b zero (+ a b) (solver_rearrange (+ (+ zero (* one a)) (* one b)) zero (+ (+ zero (* one a)) (* one b)) zero (+ zero (+ a b)) (+ a b) (rearr_pos (+ zero (* one a)) (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ (+ zero (* one a)) (* one b)) (rearr_end zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) (+ zero (* one a)))) (listify_imp (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero zero (+ a b) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap (+ zero zero) a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ (+ zero zero) a) (+ zero (* one a)) zero b (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))))) (listify_imp (+ a b) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))).
greater_plus_pos : {A:tm num} {B:tm num} pf (> A zero) -> pf (> (+ B A) B) = [A:tm num] [B:tm num] [x3:pf (> A zero)] imp_e (> A zero) (> (+ B A) B) (__P B A) x3.
__P : {a:tm num} {b:tm num} algebra_solver (>= b zero imp >= (+ a b) a) = [a:tm num] [b:tm num] solver_geq b a (+ a b) zero (solver_rearrange (+ (+ zero (* one b)) (* one a)) zero (+ (+ zero (* one a)) (* one b)) zero (+ (+ a b) zero) (+ b a) (rearr_pos (+ zero (* one a)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one a)) (+ (+ zero (* one a)) (* one b)) (rearr_end zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_step1 (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) zero (+ zero (* one a)) (* one a) (trim_get zero (* one b) (+ zero (* one a))))) (listify_imp (+ (+ a b) zero) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero (+ a b) zero (+ (+ zero (* one a)) (* one b)) zero (plusify_remove (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (+ b a) (+ (+ zero (* one b)) (* one a)) zero (plusify_swap zero b a (+ (+ zero (* one b)) (* one a)) zero (plusify_step (+ zero b) (+ zero (* one b)) zero a (plusify_step zero zero zero b plusify_zero))))).
greatereq_plus_pos : {A:tm num} {B:tm num} pf (>= A zero) -> pf (>= (+ B A) B) = [A:tm num] [B:tm num] [x3:pf (>= A zero)] imp_e (>= A zero) (>= (+ B A) B) (__P B A) x3.
__P : {a:tm num} {b:tm num} algebra_solver (== num (+ (* a b) b) (* (+ a one) b)) = [a:tm num] [b:tm num] solver_rearrange (+ (+ zero (* (* one a) b)) (* one b)) zero (+ (+ zero (* (* one b) a)) (* one b)) zero (* (+ a one) b) (+ (* a b) b) (rearr_pos (+ zero (* (* one a) b)) (+ zero (* (* one b) a)) (+ (+ zero (* (* one a) b)) (* one b)) (+ (+ zero (* (* one b) a)) (* one b)) (rearr_end zero zero (+ zero (* (* one a) b)) (+ zero (* (* one b) a)) rearr_finish (trim_getmult (* (* one a) b) (* (* one b) a) zero zero (fam_swap (* (* one a) b) (* one b) one a nomatch (fam_step (* one a) one (* one a) b nomatch (fam_one (* one a) (* one a) (fam_step one one one a nomatch (fam_finish match))))))) (trim_get (+ zero (* (* one a) b)) (* one b) (+ zero (* (* one b) a)))) (listify_imp (* (+ a one) b) (+ (+ zero (* (* one b) a)) (* one b)) zero (plusify_step_mult zero (+ a one) b (* one b) (+ a one) one (+ (+ zero (* (* one b) a)) (* one b)) zero (catch_break zero (* one b) a one (+ (+ zero (* (* one b) a)) (* one b)) zero (* (+ a one) b) (plusify_step_mult (+ zero (* (* one b) a)) (* one b) one (* one b) one one (+ (+ zero (* (* one b) a)) (* one b)) zero (catch_one (+ zero (* (* one b) a)) (+ zero (* (* one b) a)) zero (* (* one b) one) (* one b) (plusify_step_mult zero (* one b) a (* (* one b) a) one one (+ zero (* (* one b) a)) zero (catch_one zero zero zero (* (* one b) a) (* (* one b) a) plusify_zero) (timesify_step (* one (* one b)) (* one b) one one a (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one)))))) (timesify_remove (* one (* one b)) (* one b) one one (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one)))))) (timesify_step (* one (+ a one)) one (+ a one) one b (timesify_end_plus one a one)))) (listify_imp (+ (* a b) b) (+ (+ zero (* (* one a) b)) (* one b)) zero (plusify_swap zero (* a b) b (+ (+ zero (* (* one a) b)) (* one b)) zero (plusify_step (+ zero (* a b)) (+ zero (* (* one a) b)) zero b (plusify_step_mult zero a b (* (* one a) b) one one (+ zero (* (* one a) b)) zero (catch_one zero zero zero (* a b) (* (* one a) b) plusify_zero) (timesify_step (* one a) (* one a) one one b (timesify_step one one one one a timesify_end_one)))))).
factor_right : {A:tm num} {B:tm num} pf (== num (+ (* A B) B) (* (+ A one) B)) = [A:tm num] [B:tm num] __P A B.
__P : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (== num (- a (- b c1)) (+ (- a b) c1)) = [a:tm num] [b:tm num] [c2:tm num] solver_rearrange (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (+ (- a b) c2) (- a (- b c2)) (rearr_any2 (+ zero (* one a)) (+ zero (* one b)) (+ zero (* one a)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (rearr_any2 zero (+ zero (* one b)) zero (+ zero (* one b)) (+ zero (* one a)) (+ zero (* one a)) (rearr_neg zero zero (+ zero (* one b)) (+ zero (* one b)) rearr_finish (trim_get zero (* one b) zero)) (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one c2) (+ zero (* one a)))) (listify_imp (+ (- a b) c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_swap zero (- a b) c2 (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (- a (- b c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_swap zero a (neg (- b c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_minus (+ zero a) b (neg c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_neg (- (+ zero a) b) c2 (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_step (- (+ zero a) b) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))).
minus_assoc : {A:tm num} {B:tm num} {C:tm num} pf (== num (- A (- B C)) (+ (- A B) C)) = [A:tm num] [B:tm num] [C:tm num] __P A B C.
__P : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (== num (- (- a b) c1) (- a (+ b c1))) = [a:tm num] [b:tm num] [c2:tm num] solver_rearrange (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (- a (+ b c2)) (- (- a b) c2) (rearr_any2 zero (+ (+ zero (* one b)) (* one c2)) zero (+ (+ zero (* one b)) (* one c2)) (+ zero (* one a)) (+ zero (* one a)) (rearr_neg (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one b)) (* one c2)) (+ (+ zero (* one b)) (* one c2)) (rearr_end zero zero (+ zero (* one b)) (+ zero (* one b)) rearr_finish (trim_get zero (* one b) zero)) (trim_get (+ zero (* one b)) (* one c2) (+ zero (* one b)))) (trim_get zero (* one a) zero)) (listify_imp (- a (+ b c2)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_swap zero a (neg (+ b c2)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_minus (+ zero a) b c2 (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_step_neg (- (+ zero a) b) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (- (- a b) c2) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_swap zero (- a b) (neg c2) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_step_neg (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))).
minus_assoc3 : {A:tm num} {B:tm num} {C:tm num} pf (== num (- (- A B) C) (- A (+ B C))) = [A:tm num] [B:tm num] [C:tm num] __P A B C.
plus_eq : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num X1 X2) -> pf (== num (+ X3 X1) (+ X3 X2)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num X1 X2)] plus_cong2 X1 X2 X3 x3.
eq_plus : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num X1 X2) -> pf (== num (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num X1 X2)] plus_cong1 X1 X2 X3 x3.
plus_eq1 : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num (+ X1 X2) (+ X3 X2)) -> pf (== num X1 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num (+ X1 X2) (+ X3 X2))] plus_elim2 X1 X2 X3 x3.
plus_eq2 : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num (+ X1 X2) (+ X1 X3)) -> pf (== num X2 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num (+ X1 X2) (+ X1 X3))] plus_elim1 X1 X2 X3 x3.
minus_assoc2 : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num (+ X1 (+ X2 X3)) (+ (+ X1 X2) X3)) = [X1:tm num] [X2:tm num] [X3:tm num] assoc_plus X1 X2 X3.
pf_assoc_add1 : {X1:tm num} {X2:tm num} {X3:tm num} {X4:tm num} pf (== num (+ (+ X1 X2) X3) X4) -> pf (== num (+ X1 (+ X2 X3)) X4) = [X1:tm num] [X2:tm num] [X3:tm num] [X4:tm num] [x3:pf (== num (+ (+ X1 X2) X3) X4)] trans num (+ X1 (+ X2 X3)) (+ (+ X1 X2) X3) X4 (assoc_plus X1 X2 X3) x3.
inv_add1 : {X1:tm num} pf (== num zero (+ (neg X1) X1)) = [X1:tm num] symm num (+ (neg X1) X1) zero (inv_plus X1).
inv_add2 : {X1:tm num} pf (== num zero (- X1 X1)) = [X1:tm num] symm num (- X1 X1) zero (plus_inv X1).
neg_neg_a_eq_a : {X1:tm num} pf (== num (neg (neg X1)) X1) = [X1:tm num] neg_neg_e X1.
gt_plus_cong_e : {X1:tm num} {X2:tm num} {X3:tm num} pf (> (+ X1 X2) (+ X3 X2)) -> pf (> X1 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> (+ X1 X2) (+ X3 X2))] gt_plus_elim2 X1 X2 X3 x3.
neg_prop : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (<= (neg X1) (neg X2)) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] geq_neg_cong X1 X2 x3.
neg_prop' : {X1:tm num} {X2:tm num} pf (> X1 X2) -> pf (< (neg X1) (neg X2)) = [X1:tm num] [X2:tm num] [x3:pf (> X1 X2)] gt_neg_cong X1 X2 x3.
pf_greater_and_greatereq : {X1:tm num} {X2:tm num} {X3:tm form} pf (>= X1 X2) -> pf (> X2 X1) -> pf X3 = [X1:tm num] [X2:tm num] [X3:tm form] [x3:pf (>= X1 X2)] [x4:pf (> X2 X1)] geq->gt->false X1 X2 X3 x3 x4.
minus_cong : {X1:tm num} {X2:tm num} {A:tm num} {B:tm num} pf (== num X1 X2) -> pf (== num A B) -> pf (== num (+ X1 (neg A)) (+ X2 (neg B))) = [X1:tm num] [X2:tm num] [A:tm num] [B:tm num] [p1:pf (== num X1 X2)] [p2:pf (== num A B)] plus_cong X1 X2 (neg A) (neg B) p1 (neg_cong A B p2).
pf_neg_zero_zero : pf (== num (neg zero) zero) = neg_zero.
minus_zero : {X1:tm num} pf (== num (+ X1 (neg zero)) X1) = [X1:tm num] trans num (+ X1 (neg zero)) (+ X1 zero) X1 (plus_cong2 (neg zero) zero X1 neg_zero) (plus_zero X1).
pf_neg_sum_sum_negs : {X1:tm num} {X2:tm num} pf (== num (neg (+ X1 X2)) (+ (neg X1) (neg X2))) = [X1:tm num] [X2:tm num] symm num (+ (neg X1) (neg X2)) (neg (+ X1 X2)) (neg_plus X1 X2).
times_succ_distrib : {X1:tm num} {X2:tm num} pf (== num (* X1 (+ X2 one)) (+ (* X1 X2) X1)) = [X1:tm num] [X2:tm num] trans num (* X1 (+ X2 one)) (+ (* X1 X2) (* X1 one)) (+ (* X1 X2) X1) (distrib X1 X2 one) (plus_cong2 (* X1 one) X1 (* X1 X2) (times_one X1)).
gt_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (== num C D) -> pf (> A C) -> pf (> B D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (== num C D)] [p3:pf (> A C)] trans_eq_gt B A D (symm num A B p1) (trans_gt_eq A C D p3 p2).
lt_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (== num C D) -> pf (< A C) -> pf (< B D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (== num C D)] [p3:pf (< A C)] trans_eq_lt B A D (symm num A B p1) (trans_lt_eq A C D p3 p2).
neg_property1 : {X1:tm num} pf (>= X1 zero) -> pf (<= (neg X1) zero) = [X1:tm num] [p1:pf (>= X1 zero)] trans_leq_eq (neg X1) (neg zero) zero (geq_neg_cong X1 zero p1) neg_zero.
neg_property1b : {X1:tm num} pf (> X1 zero) -> pf (< (neg X1) zero) = [X1:tm num] [p1:pf (> X1 zero)] trans_lt_eq (neg X1) (neg zero) zero (gt_neg_cong X1 zero p1) neg_zero.
neg_property2b : {X1:tm num} pf (> zero X1) -> pf (> (neg X1) zero) = [X1:tm num] [p1:pf (> zero X1)] trans_gt_eq (neg X1) (neg zero) zero (lt_neg_cong zero X1 p1) neg_zero.
leq_times_geq_rule : {A:tm num} {B:tm num} pf (<= A zero) -> pf (>= B zero) -> pf (<= (* A B) zero) = [A:tm num] [B:tm num] [x3:pf (<= A zero)] [x4:pf (>= B zero)] times_leq_geq A B x3 x4.
pf_zero_plus_one_geq_one : {X1:tm num} pf (>= (+ zero X1) X1) = [X1:tm num] eq->geq (+ zero X1) X1 (zero_plus X1).
not_geq_zero : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (>= (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] geq_shift X1 X2 x3.
gt_eq_lt : {X1:tm num} {X2:tm num} pf (> X1 X2 or == num X1 X2 or < X1 X2) = [X1:tm num] [X2:tm num] or_gt_eq_lt X1 X2.
gt_not_lt_eq : {X1:tm num} {X2:tm num} pf (> X1 X2) -> pf (not (<= X1 X2)) = [X1:tm num] [X2:tm num] [x3:pf (> X1 X2)] gt->not_leq X1 X2 x3.
succ_greater : {X1:tm num} pf (> (succ X1) X1) = [X1:tm num] succ_gt X1.
greater1_0 : pf (gt (const 1) (const 0)) = eval_gt 0 1 1>0.
times_cong : {X1:tm num} {X2:tm num} {X3:tm num} {X4:tm num} pf (== num X1 X2) -> pf (== num X3 X4) -> pf (== num (* X1 X3) (* X2 X4)) = [X1:tm num] [X2:tm num] [X3:tm num] [X4:tm num] [x3:pf (== num X1 X2)] [x4:pf (== num X3 X4)] times_cong X1 X2 X3 X4 x3 x4.
not_greatereq_lt : {X1:tm num} {X2:tm num} pf (not (>= X1 X2)) -> pf (< X1 X2) = [X1:tm num] [X2:tm num] [x3:pf (not (>= X1 X2))] not_geq->lt X1 X2 x3.
greatereq_not_lt : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (not (< X1 X2)) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] geq->not_lt X1 X2 x3.
assoc_symm_add : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num (+ (+ X1 X2) X3) (+ (+ X1 X3) X2)) = [X1:tm num] [X2:tm num] [X3:tm num] trans3 num (+ (+ X1 X2) X3) (+ X1 (+ X2 X3)) (+ X1 (+ X3 X2)) (+ (+ X1 X3) X2) (plus_assoc X1 X2 X3) (plus_cong2 (+ X2 X3) (+ X3 X2) X1 (comm_plus X2 X3)) (assoc_plus X1 X3 X2).
greater_or_eq : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (== num X1 X2 or > X1 X2) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] geq->or_eq_gt X1 X2 x3.
leq_or_eq : {X1:tm num} {X2:tm num} pf (<= X1 X2) -> pf (== num X1 X2 or < X1 X2) = [X1:tm num] [X2:tm num] [p1:pf (<= X1 X2)] leq->or_eq_lt X1 X2 p1.
greatereq_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (== num C D) -> pf (>= A C) -> pf (>= B D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (== num C D)] [p3:pf (>= A C)] trans_eq_geq B A D (symm num A B p1) (trans_geq_eq A C D p3 p2).
greatereq_plus_cong : {X1:tm num} {X2:tm num} {X3:tm num} pf (>= X1 X2) -> pf (>= (+ X3 X1) (+ X3 X2)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (>= X1 X2)] geq_plus_cong2 X1 X2 X3 x3.
greatereq_plus_cong2 : {X1:tm num} {X2:tm num} {X3:tm num} pf (>= X1 X2) -> pf (>= (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (>= X1 X2)] geq_plus_cong1 X1 X2 X3 x3.
ord_add_closure_e : {X1:tm num} {X2:tm num} {X3:tm num} pf (>= (+ X1 X2) (+ X3 X2)) -> pf (>= X1 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (>= (+ X1 X2) (+ X3 X2))] geq_plus_elim2 X1 X2 X3 x3.
num_eq_excluded_middle : {X1:tm num} {X2:tm num} pf (== num X1 X2 or != num X1 X2) = [X1:tm num] [X2:tm num] or_eq_neq X1 X2.
not_eq_minus : {X1:tm num} {X2:tm num} pf (!= num X1 X2) -> pf (!= num (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (!= num X1 X2)] neq_shift X1 X2 x3.
not_eq->plus_not_eq : {X1:tm num} {X2:tm num} {X3:tm num} pf (!= num X1 X2) -> pf (!= num (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (!= num X1 X2)] neq_plus_cong1 X1 X2 X3 x3.
greater_add_closure : {X1:tm num} {X2:tm num} {X3:tm num} pf (> X1 X2) -> pf (> (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> X1 X2)] gt_plus_cong1 X1 X2 X3 x3.
lt_add_closure : {X1:tm num} {X2:tm num} {X3:tm num} pf (> X1 X2) -> pf (> (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> X1 X2)] lt_plus_cong1 X1 X2 X3 x3.
gtzero1 : {X1:tm num} {X2:tm num} pf (> X1 X2) -> pf (> (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (> X1 X2)] gt_shift X1 X2 x3.
gtzero2 : {X1:tm num} {X2:tm num} pf (< X1 X2) -> pf (< (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (< X1 X2)] lt_shift X1 X2 x3.
geqzero1 : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (>= (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] geq_shift X1 X2 x3.
geqzero1' : {X1:tm num} {X2:tm num} pf (>= (- X1 X2) zero) -> pf (>= X1 X2) = [X1:tm num] [X2:tm num] [x3:pf (>= (- X1 X2) zero)] geq_unshift X1 X2 x3.
geqzero2 : {X1:tm num} {X2:tm num} pf (<= X1 X2) -> pf (<= (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (<= X1 X2)] leq_shift X1 X2 x3.
geq_times_pos : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (> C zero) -> pf (>= (* A C) (* B C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] [p2:pf (> C zero)] geq_times_cong1 C A B (gt->geq C zero p2) p1.
geq_times_pos0 : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (>= C zero) -> pf (>= (* A C) (* B C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] [p2:pf (>= C zero)] geq_times_cong1 C A B p2 p1.
geq_times_pos' : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (> C zero) -> pf (>= (* C A) (* C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] [p2:pf (> C zero)] geq_times_cong2 C A B (gt->geq C zero p2) p1.
leq_times_pos' : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (> C zero) -> pf (<= (* C A) (* C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (<= A B)] [p2:pf (> C zero)] leq_times_cong2 C A B (gt->geq C zero p2) p1.
geq_geq_plus : {X1:tm num} {X2:tm num} {X3:tm num} {X4:tm num} pf (>= X1 X2) -> pf (>= X3 X4) -> pf (>= (+ X1 X3) (+ X2 X4)) = [X1:tm num] [X2:tm num] [X3:tm num] [X4:tm num] [x3:pf (>= X1 X2)] [x4:pf (>= X3 X4)] geq_plus_cong X1 X2 X3 X4 x3 x4.
geq_gt_plus : {X1:tm num} {X2:tm num} {X3:tm num} {X4:tm num} pf (>= X1 X2) -> pf (> X3 X4) -> pf (> (+ X1 X3) (+ X2 X4)) = [X1:tm num] [X2:tm num] [X3:tm num] [X4:tm num] [x3:pf (>= X1 X2)] [x4:pf (> X3 X4)] gt_plus_cong X1 X2 X3 X4 x3 x4.
minus1_less : {X1:tm num} pf (< (pred X1) X1) = [X1:tm num] pred_lt X1.
cancel : {X1:tm num} {X2:tm num} {X3:tm num} pf (!= num X1 zero) -> pf (== num (* X1 X2) (* X1 X3)) -> pf (== num X2 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (!= num X1 zero)] [x4:pf (== num (* X1 X2) (* X1 X3))] times_elim1 X1 X2 X3 x3 x4.
neq_mult_closure : {X1:tm num} {X2:tm num} pf (!= num X1 zero) -> pf (!= num X2 zero) -> pf (!= num (* X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (!= num X1 zero)] [x4:pf (!= num X2 zero)] neq_times_closure X1 X2 x3 x4.
lt_times_pos' : {A:tm num} {B:tm num} {C:tm num} pf (< A B) -> pf (> C zero) -> pf (< (* C A) (* C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (< A B)] [p2:pf (> C zero)] lt_times_cong2 C B A p2 p1.
gt_cancel : {A:tm num} {B:tm num} {C:tm num} pf (> A zero) -> pf (> (* A B) (* A C)) -> pf (> B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A zero)] [x3:pf (> (* A B) (* A C))] gt_times_elim1 A B C (gt->geq A zero p1) x3.
greater_plus1_i : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (> (succ X1) X2) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] trans_gt_geq (succ X1) X1 X2 (succ_gt X1) x3.
lt_pred_lt : {X1:tm num} {X2:tm num} {X3:tm num} pf (< (- X1 X2) X3) -> pf (< X1 (+ X3 X2)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (< (- X1 X2) X3)] lt_swap_a-b_c X1 X2 X3 x3.
less_inc : {X1:tm num} {X2:tm num} {C:tnum} pf (< X1 X2) -> pf (geq C zero) -> pf (< X1 (+ X2 C)) = [X1:tm num] [X2:tm num] [C:tnum] [p1:pf (< X1 X2)] [p2:pf (geq C zero)] incr_lt C X1 X2 p2 p1.
neq->succ_neq : {X1:tm num} {X2:tm num} {X3:tm num} pf (!= num X1 X2) -> pf (!= num (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (!= num X1 X2)] neq_plus_cong1 X1 X2 X3 x3.
eq->eq_succ : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num X1 X2) -> pf (== num (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num X1 X2)] plus_cong1 X1 X2 X3 x3.
eq->eq_pred : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num X1 X2) -> pf (== num (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num X1 X2)] plus_cong1 X1 X2 X3 x3.
eq_m_succn->eq_predm_n : {X1:tm num} {X2:tm num} {X3:tm num} {X4:tm num} {X5:tm num} {X6:tm num} pf ((== num X1 (+ X2 X3) imp == num (- X1 X3) X2) and (== num (- X4 X5) X6 imp == num X4 (+ X6 X5))) = [X1:tm num] [X2:tm num] [X3:tm num] [X4:tm num] [X5:tm num] [X6:tm num] and_i (== num X1 (+ X2 X3) imp == num (- X1 X3) X2) (== num (- X4 X5) X6 imp == num X4 (+ X6 X5)) (imp_i (== num X1 (+ X2 X3)) (== num (- X1 X3) X2) ([x3:pf (== num X1 (+ X2 X3))] eq_swap_a_b+c X1 X2 X3 x3)) (imp_i (== num (- X4 X5) X6) (== num X4 (+ X6 X5)) ([x3:pf (== num (- X4 X5) X6)] eq_swap_a-b_c X4 X5 X6 x3)).
less_plus1_i : {X1:tm num} {X2:tm num} pf (<= X1 X2) -> pf (< X1 (succ X2)) = [X1:tm num] [X2:tm num] [p1:pf (<= X1 X2)] trans_leq_lt X1 X2 (succ X2) p1 (succ_lt X2).
greatereq_plus1_e : {X1:tm num} {X2:tm num} pf (>= X1 (succ X2)) -> pf (> X1 X2) = [X1:tm num] [X2:tm num] [p1:pf (>= X1 (succ X2))] trans_geq_gt X1 (succ X2) X2 p1 (succ_gt X2).
greater_minus1_i : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (> X1 (pred X2)) = [X1:tm num] [X2:tm num] [p1:pf (>= X1 X2)] trans_geq_gt X1 X2 (pred X2) p1 (pred_gt X2).
lesseq_minus1_e : {X1:tm num} {X2:tm num} pf (<= X1 (pred X2)) -> pf (< X1 X2) = [X1:tm num] [X2:tm num] [p1:pf (<= X1 (pred X2))] trans_leq_lt X1 (pred X2) X2 p1 (pred_lt X2).
not_refl_gt : {X1:tm num} {X2:tm form} pf (> X1 X1 imp X2) = [X1:tm num] [X2:tm form] imp_i (> X1 X1) X2 ([p1:pf (> X1 X1)] gt->eq->false X1 X1 X2 p1 (refl num X1)).
greater_inc : {X1:tm num} {X2:tm num} {C:tm num} pf (> X1 X2) -> pf (> C zero) -> pf (> (+ X1 C) X2) = [X1:tm num] [X2:tm num] [C:tm num] [p1:pf (> X1 X2)] [p2:pf (> C zero)] incr_gt C X1 X2 (gt->geq C zero p2) p1.
less_dec : {A:tm num} {B:tm num} {C:tm num} pf (< A B) -> pf (>= C zero) -> pf (< (- A C) B) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (< A B)] [p2:pf (>= C zero)] decr_lt C A B p2 p1.
lt_succ_gt : {X1:tm num} {X2:tm num} {X3:tm num} pf (< X1 (+ X2 X3)) -> pf (< (- X1 X3) X2) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (< X1 (+ X2 X3))] lt_swap_a_b+c X1 X2 X3 x3.
leq_succ_leq_pred : {X1:tm num} {X2:tm num} {X3:tm num} pf (<= X1 (+ X2 X3)) -> pf (<= (- X1 X3) X2) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (<= X1 (+ X2 X3))] leq_swap_a_b+c X1 X2 X3 x3.
not_geq_pred_gt : {X1:tm num} {X2:tm num} pf (> zero (- X1 X2)) -> pf (> X2 X1) = [X1:tm num] [X2:tm num] [p1:pf (> zero (- X1 X2))] trans_eq_gt X2 (+ zero X2) X1 (symm num (+ zero X2) X2 (zero_plus X2)) (gt_swap_a_b-c zero X1 X2 p1).
pf_minus_cancel' : {A:tm num} {B:tm num} {C:tm num} pf (== num (- A B) C) -> pf (== num A (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (== num (- A B) C)] eq_swap_a-b_c A B C x3.
geq_zero_plus : {X1:tm num} {X2:tm num} pf (>= X1 zero) -> pf (>= X2 zero) -> pf (>= (+ X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 zero)] [x4:pf (>= X2 zero)] plus_geq_geq X1 X2 x3 x4.
greater_inc1 : {X1:tm num} {X2:tm num} {X3:tm num} pf (> (+ X1 X2) X3) -> pf (> X1 (- X3 X2)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> (+ X1 X2) X3)] gt_swap_a+b_c X1 X2 X3 x3.
notsymm : {X1:tp} {X2:tm X1} {X3:tm X1} pf (!= X1 X2 X3) -> pf (not (== X1 X3 X2)) = [X1:tp] [X2:tm X1] [X3:tm X1] [x3:pf (!= X1 X2 X3)] neqlem (== X1 X3 X2) X1 X2 X3 ([x4:pf (== X1 X3 X2)] symm X1 X3 X2 x4) x3.
neq_refl : {X1:tp} {A:tm X1} {X:tform} pf (!= X1 A A) -> pf X = [X1:tp] [A:tm X1] [X:tform] [p1:pf (!= X1 A A)] not_e' (eq X1 A A) X p1 (refl X1 A).
neg_exists : {N:tnum} pf (isInt N) -> pf (isInt (neg N)) = [N:tnum] [x3:pf (isInt N)] _neg_exists N x3.
closure_add : {N:tnum} {M:tnum} pf (isInt N) -> pf (isInt M) -> pf (isInt (plus N M)) = [N:tnum] [M:tnum] [x3:pf (isInt N)] [x4:pf (isInt M)] _closure_add N M x3 x4.
assoc_add : {A:tnum} {B:tnum} {C:tnum} pf (eqn (plus (plus A B) C) (plus A (plus B C))) = [A:tnum] [B:tnum] [C:tnum] _assoc_add A B C.
comm_add : {A:tnum} {B:tnum} pf (eqn (plus A B) (plus B A)) = [A:tnum] [B:tnum] _comm_add A B.
inv_add : {A:tnum} pf (eqn (plus A (neg A)) zero) = [A:tnum] _inv_add A.
closure_mult : {N:tnum} {M:tnum} pf (isInt N) -> pf (isInt M) -> pf (isInt (times N M)) = [N:tnum] [M:tnum] [x3:pf (isInt N)] [x4:pf (isInt M)] _closure_mult N M x3 x4.
assoc_mult : {A:tnum} {B:tnum} {C:tnum} pf (eqn (times (times A B) C) (times A (times B C))) = [A:tnum] [B:tnum] [C:tnum] _assoc_mult A B C.
zero_mult : {A:tnum} pf (eqn (times A one) A) = [A:tnum] _zero_mult A.
comm_mult : {A:tnum} {B:tnum} pf (eqn (times A B) (times B A)) = [A:tnum] [B:tnum] _comm_mult A B.
ord_reflexivity : {A:tnum} pf (geq A A) = [A:tnum] _ord_reflexivity A.
ord_add_closure : {A:tnum} {C:tnum} {B:tnum} pf (geq A C) -> pf (geq (plus A B) (plus C B)) = [A:tnum] [C:tnum] [B:tnum] [x3:pf (geq A C)] _ord_add_closure A B C x3.
ord_mult_closure : {A:tnum} {B:tnum} pf (geq A zero) -> pf (geq B zero) -> pf (geq (times A B) zero) = [A:tnum] [B:tnum] [x3:pf (geq A zero)] [x4:pf (geq B zero)] _ord_mult_closure A B x3 x4.
ord_antisymmetry : {A:tnum} {B:tnum} pf (geq A B) -> pf (geq B A) -> pf (eqn A B) = [A:tnum] [B:tnum] [x3:pf (geq A B)] [x4:pf (geq B A)] _ord_antisymmetry A B x3 x4.
ord_transitivity : {A:tnum} {B:tnum} {C:tnum} pf (geq A B) -> pf (geq B C) -> pf (geq A C) = [A:tnum] [B:tnum] [C:tnum] [x3:pf (geq A B)] [x4:pf (geq B C)] _ord_transitivity A B C x3 x4.
ord_excluded_middle : {A:tnum} {B:tnum} pf (geq A B or not (geq A B)) = [A:tnum] [B:tnum] _ord_excluded_middle A B.
times_geq : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (>= B C) -> pf (>= (* A B) (* A C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (>= B C)] geq_unshift (* A B) (* A C) (trans_eq_geq (- (* A B) (* A C)) (* A (- B C)) zero (symm num (* A (- B C)) (- (* A B) (* A C)) (distrib_minus A B C)) (times_geq_geq A (- B C) p1 (geq_shift B C p2))).
induction' : {N:tnum} {f:tm num -> tm form} pf (f zero) -> ({n:tm num} pf (isNat n) -> pf (f n) -> pf (f (succ n))) -> pf (isNat N) -> pf (f N) = [N:tnum] [f:tm num -> tm form] [p1:pf (f zero)] [q1:{n:tm num} pf (isNat n) -> pf (f n) -> pf (f (succ n))] [x3:pf (isNat N)] forall_imp_e num ([a:tm num] isNat a) ([a:tm num] f a) (induction ([x4:tnum] f x4) p1 ([n:tnum] [x4:pf (isNat n)] [x5:pf (f n)] q1 n x4 x5)) N x3.
isInt_congr : {A:tm num} {B:tm num} pf (== num A B) -> pf (isInt B) -> pf (isInt A) = [A:tm num] [B:tm num] [x3:pf (== num A B)] [x4:pf (isInt B)] congr num A B ([i1:tm num] isInt i1) x3 x4.
isInt_plus : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (isInt (+ A B)) = [A:tnum] [B:tnum] [x3:pf (isInt A)] [x4:pf (isInt B)] _closure_add A B x3 x4.
isInt_neg : {A:tnum} pf (isInt A) -> pf (isInt (neg A)) = [A:tnum] [x3:pf (isInt A)] _neg_exists A x3.
isInt_minus : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (isInt (- A B)) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] isInt_plus A (neg B) p1 (isInt_neg B p2).
isInt_times : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (isInt (* A B)) = [A:tnum] [B:tnum] [x3:pf (isInt A)] [x4:pf (isInt B)] _closure_mult A B x3 x4.
isInt_plus_e : {A:tm num} {B:tm num} pf (isInt (+ A B)) -> pf (isInt B) -> pf (isInt A) = [A:tm num] [B:tm num] [p1:pf (isInt (+ A B))] [p2:pf (isInt B)] isInt_congr A (- (+ A B) B) (symm num (- (+ A B) B) A (cancel_a+b-b A B)) (isInt_minus (+ A B) B p1 p2).
p_zero : pf (isInt zero) = congr num zero (- one one) ([z1:tm num] isInt z1) (symm num (- one one) zero (plus_inv one)) (isInt_plus one (neg one) p_one (isInt_neg one p_one)).
isInt_succ_i : {A:tnum} pf (isInt A) -> pf (isInt (succ A)) = [A:tnum] [p1:pf (isInt A)] isInt_plus A one p1 p_one.
isInt_succ_e : {A:tnum} pf (isInt (succ A)) -> pf (isInt A) = [A:tnum] [p1:pf (isInt (succ A))] isInt_plus_e A one p1 p_one.
isInt_pred_i : {A:tnum} pf (isInt A) -> pf (isInt (pred A)) = [A:tnum] [p1:pf (isInt A)] isInt_minus A one p1 p_one.
isInt_pred_e : {A:tnum} pf (isInt (pred A)) -> pf (isInt A) = [A:tnum] [p1:pf (isInt (pred A))] isInt_plus_e A (neg one) p1 (isInt_neg one p_one).
pred_n : tm num -> tm form = [n:tm num] geq n zero and not (eq num n zero) imp geq n one.
pred_fun : {N:tnum} pf (isNat N) -> pf (pred_n N) -> pf (pred_n (plus N one)) = [N:tm num] [Q1:pf (isNat N)] [Q2:pf (pred_n N)] cut (pred_n N) (geq (plus N one) zero and not (eq num (plus N one) zero) imp geq (plus N one) one) Q2 ([x3:pf (pred_n N)] imp_i (geq (plus N one) zero and not (eq num (plus N one) zero)) (geq (plus N one) one) ([x4:pf (geq (plus N one) zero and not (eq num (plus N one) zero))] cut (>= (+ N one) (+ zero one)) (geq (plus N one) one) (geq_plus_cong1 N zero one (and_e2 (isInt N) (geq N zero) Q1)) ([Q3:pf (geq (plus N one) (plus zero one))] congr num one (+ zero one) ([Z:tm num] geq (plus N one) Z) (symm num (+ zero one) one (trans num (+ zero one) (+ one zero) one (comm_plus zero one) (plus_zero one))) Q3))).
red_int_prop : {X:tnum} pf (isNat X) -> pf (not (eq num X zero)) -> pf (geq X one) = [X:tnum] [Q1:pf (isNat X)] [Q2:pf (not (eq num X zero))] cut (geq zero zero and (== num zero zero imp false) imp geq zero one) (geq X one) (imp_i (geq zero zero and (== num zero zero imp false)) (geq zero one) ([Q:pf (geq zero zero and (== num zero zero imp false))] false_e (geq zero one) (imp_e (== num zero zero) false (and_e2 (geq zero zero) (== num zero zero imp false) Q) (refl num zero)))) ([P0:pf (pred_n zero)] imp_e (geq X zero and not (eq num X zero)) (geq X one) (imp_e (isNat X) (pred_n X) (forall_e num ([x3:tm num] isNat x3 imp pred_n x3) (induction ([x3:tnum] pred_n x3) P0 ([n:tnum] [x3:pf (isNat n)] [x4:pf (pred_n n)] pred_fun n x3 x4)) X) Q1) (and_i (geq X zero) (not (eq num X zero)) (and_e2 (isInt X) (geq X zero) Q1) Q2)).
int_gt_succ_i : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (> A B) -> pf (>= A (succ B)) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [p3:pf (> A B)] cut (isInt (- A B)) (>= A (+ B one)) (isInt_minus A B p1 p2) ([p4:pf (isInt (- A B))] cut (>= (- A B) zero) (>= A (+ B one)) (gt->geq (- A B) zero (gt_shift A B p3)) ([p5:pf (>= (- A B) zero)] cut (geq (- A B) one) (>= A (+ B one)) (red_int_prop (- A B) (and_i (isInt (- A B)) (>= (- A B) zero) p4 p5) (gt->neq (- A B) zero (gt_shift A B p3))) ([p6:pf (>= (- A B) one)] trans_geq_eq A (+ one B) (+ B one) (geq_swap_a-b_c A B one p6) (comm_plus one B)))).
int_lt_succ_i : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (< A B) -> pf (<= (succ A) B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [x3:pf (> B A)] int_gt_succ_i B A p2 p1 x3.
int_gt_pred_i : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (> A B) -> pf (>= (pred A) B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [p3:pf (> A B)] geq_swap_a_b+c A B one (int_gt_succ_i A B p1 p2 p3).
int_lt_pred_i : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (< A B) -> pf (<= A (pred B)) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [x3:pf (> B A)] int_gt_pred_i B A p2 p1 x3.
int_gt_succ_e : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (> (succ A) B) -> pf (>= A B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [p3:pf (> (succ A) B)] trans_eq_geq A (- (+ A one) one) B (symm num (- (+ A one) one) A (cancel_a+b-b A one)) (int_gt_pred_i (succ A) B (isInt_succ_i A p1) p2 p3).
int_lt_succ_e : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (< A (succ B)) -> pf (<= A B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [x3:pf (> (succ B) A)] int_gt_succ_e B A p2 p1 x3.
int_gt_pred_e : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (> A (pred B)) -> pf (>= A B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [p3:pf (> A (pred B))] trans_geq_eq A (succ (pred B)) B (int_gt_succ_i A (pred B) p1 (isInt_pred_i B p2) p3) (cancel_a-b+b B one).
int_lt_pred_e : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (< (pred A) B) -> pf (<= A B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [x3:pf (> B (pred A))] int_gt_pred_e B A p2 p1 x3.
n_zero : pf (isNat zero) = and_i (isInt zero) (>= zero zero) p_zero (eq->geq zero zero (refl num zero)).
n_one : pf (isNat one) = and_i (isInt one) (>= one zero) p_one (gt->geq one zero (trans_eq_gt one (+ zero one) zero (symm num (+ zero one) one (zero_plus one)) (succ_gt zero))).
isNat_i : {A:tnum} pf (isInt A) -> pf (>= A zero) -> pf (isNat A) = [A:tnum] [x3:pf (isInt A)] [x4:pf (>= A zero)] and_i (isInt A) (>= A zero) x3 x4.
isNat->isInt : {A:tnum} pf (isNat A) -> pf (isInt A) = [A:tnum] [x3:pf (isNat A)] and_e1 (isInt A) (geq A zero) x3.
isNat->geq_zero : {A:tnum} pf (isNat A) -> pf (>= A zero) = [A:tnum] [x3:pf (isNat A)] and_e2 (isInt A) (geq A zero) x3.
isNat->succ_gt_zero : {A:tnum} pf (isNat A) -> pf (> (succ A) zero) = [A:tnum] [p1:pf (isNat A)] trans_gt_geq (succ A) A zero (succ_gt A) (isNat->geq_zero A p1).
isNat_pred->gt_zero : {A:tnum} pf (isNat (pred A)) -> pf (gt A zero) = [A:tnum] [p1:pf (isNat (pred A))] trans_eq_gt A (+ (- A one) one) zero (symm num (+ (- A one) one) A (cancel_a-b+b A one)) (isNat->succ_gt_zero (pred A) p1).
isNat_congr : {A:tm num} {B:tm num} pf (== num A B) -> pf (isNat B) -> pf (isNat A) = [A:tm num] [B:tm num] [x3:pf (== num A B)] [x4:pf (isNat B)] congr num A B ([i1:tm num] isNat i1) x3 x4.
isNat_plus : {A:tnum} {B:tnum} pf (isNat A) -> pf (isNat B) -> pf (isNat (+ A B)) = [A:tnum] [B:tnum] [p1:pf (isNat A)] [p2:pf (isNat B)] isNat_i (+ A B) (isInt_plus A B (isNat->isInt A p1) (isNat->isInt B p2)) (trans_geq_eq (+ A B) (+ zero zero) zero (geq_plus_cong A zero B zero (isNat->geq_zero A p1) (isNat->geq_zero B p2)) (plus_zero zero)).
isNat_minus : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (>= A B) -> pf (isNat (- A B)) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [p3:pf (>= A B)] isNat_i (- A B) (isInt_minus A B p1 p2) (geq_shift A B p3).
isNat_times : {A:tnum} {B:tnum} pf (isNat A) -> pf (isNat B) -> pf (isNat (* A B)) = [A:tnum] [B:tnum] [p1:pf (isNat A)] [p2:pf (isNat B)] isNat_i (* A B) (isInt_times A B (isNat->isInt A p1) (isNat->isInt B p2)) (trans_geq_eq (* A B) (* A zero) zero (geq_times_cong2 A B zero (isNat->geq_zero A p1) (isNat->geq_zero B p2)) (times_zero A)).
isNat_succ_i : {A:tnum} pf (isNat A) -> pf (isNat (succ A)) = [A:tnum] [p1:pf (isNat A)] isNat_plus A one p1 n_one.
isNat_pred_i : {A:tnum} pf (isNat A) -> pf (gt A zero) -> pf (isNat (pred A)) = [A:tnum] [p1:pf (isNat A)] [p2:pf (gt A zero)] isNat_i (pred A) (isInt_pred_i A (isNat->isInt A p1)) (int_gt_pred_i A zero (isNat->isInt A p1) p_zero p2).
isNat_pred_i' : {A:tnum} pf (isNat A) -> pf (neq num A zero) -> pf (isNat (pred A)) = [A:tnum] [p1:pf (isNat A)] [p2:pf (neq num A zero)] isNat_pred_i A p1 (neq->geq->gt A zero p2 (isNat->geq_zero A p1)).
isNat_pred_e : {A:tnum} pf (isNat (pred A)) -> pf (isNat A) = [A:tnum] [p1:pf (isNat (pred A))] isNat_congr A (+ (- A one) one) (symm num (+ (- A one) one) A (cancel_a-b+b A one)) (isNat_succ_i (pred A) p1).
isNat_pred->geq_one : {A:tnum} pf (isNat (pred A)) -> pf (geq A one) = [A:tnum] [p2:pf (isNat (pred A))] cut (gt A zero) (>= A one) (isNat_pred->gt_zero A p2) ([p4:pf (gt A zero)] cut (>= A (succ zero)) (>= A one) (int_gt_succ_i A zero (isNat->isInt A (isNat_pred_e A p2)) p_zero p4) ([p6:pf (geq A (succ zero))] trans_geq A (succ zero) one p6 (eq->geq (+ zero one) one (zero_plus one)))).
isNat_dichotomy : {N:tnum} {A:tform} pf (isNat N) -> (pf (eq num N zero) -> pf A) -> (pf (geq N one) -> pf A) -> pf A = [N:tnum] [A:tform] [p2:pf (isNat N)] [p4:pf (eq num N zero) -> pf A] [p6:pf (geq N one) -> pf A] cut3 (isNat N) (eq num N zero imp A) (geq N one imp A) A p2 (imp_i (eq num N zero) A ([x3:pf (eq num N zero)] p4 x3)) (imp_i (geq N one) A ([x3:pf (geq N one)] p6 x3)) ([x3:pf (isNat N)] [x4:pf (eq num N zero imp A)] [x5:pf (geq N one imp A)] or_e (== num N zero) (> N zero) A (geq->or_eq_gt N zero (and_e2 (isInt N) (geq N zero) p2)) ([p10:pf (eq num N zero)] p4 p10) ([p10:pf (gt N zero)] cut (>= N one) A (trans_geq N (succ zero) one (int_gt_succ_i N zero (isNat->isInt N p2) p_zero p10) (eq->geq (+ zero one) one (zero_plus one))) ([p12:pf (geq N one)] p6 p12))).
isNat_dichotomy' : {N:tnum} {A:tform} pf (isNat N) -> (pf (leq N zero) -> pf A) -> (pf (gt N zero) -> pf A) -> pf A = [N:tnum] [A:tform] [p1:pf (isNat N)] [q1:pf (leq N zero) -> pf A] [x3:pf (> N zero) -> pf A] or_e (== num N zero) (> N zero) A (geq->or_eq_gt N zero (isNat->geq_zero N p1)) ([p2:pf (eq num N zero)] cut (<= N zero) A (eq->leq N zero p2) ([x4:pf (<= N zero)] q1 x4)) ([x4:pf (> N zero)] x3 x4).
int_inbetween : {X:tnum} {N:tnum} pf (isInt X) -> pf (isInt N) -> pf (gt X (pred N)) -> pf (lt X (succ N)) -> pf (eq num X N) = [X:tnum] [N:tnum] [p2:pf (isInt X)] [p4:pf (isInt N)] [p6:pf (gt X (pred N))] [p8:pf (lt X (succ N))] cut4 (isInt X) (isInt N) (gt X (pred N)) (lt X (succ N)) (== num X N) p2 p4 p6 p8 ([x3:pf (isInt X)] [x4:pf (isInt N)] [x5:pf (gt X (pred N))] [x6:pf (lt X (succ N))] cut (>= X N) (== num X N) (trans_geq X (succ (pred N)) N (int_gt_succ_i X (pred N) p2 (isInt_pred_i N p4) p6) (eq->geq (succ (pred N)) N (succpred N))) ([p10:pf (geq X N)] cut (>= N X) (== num X N) (trans_geq N (pred (succ N)) X (eq->geq N (pred (succ N)) (symm num (pred (succ N)) N (predsucc N))) (int_lt_pred_i X (succ N) p2 (isInt_succ_i N p4) p8)) ([p12:pf (geq N X)] geq->leq->eq X N p10 p12))).
greatereq_plus1_i : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (> X1 X2) -> pf (>= X1 (succ X2)) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (> X1 X2)] int_gt_succ_i X1 X2 x3 x4 x5.
less_plus1_e : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (< X1 (succ X2)) -> pf (<= X1 X2) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (< X1 (succ X2))] int_lt_succ_e X1 X2 x3 x4 x5.
greater_minus1_e : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (> X1 (pred X2)) -> pf (>= X1 X2) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (> X1 (pred X2))] int_gt_pred_e X1 X2 x3 x4 x5.
greater_greater_eq_minus1 : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (> X1 X2) -> pf (>= (pred X1) X2) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (> X1 X2)] int_gt_pred_i X1 X2 x3 x4 x5.
lesseq_minus1_i : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (< X1 X2) -> pf (<= X1 (pred X2)) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (< X1 X2)] int_lt_pred_i X1 X2 x3 x4 x5.
lesseq_plus1_i : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (< X1 X2) -> pf (<= (succ X1) X2) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (< X1 X2)] int_lt_succ_i X1 X2 x3 x4 x5.
isNat_succ_gt_zero : {X1:tm num} pf (isNat X1) -> pf (> (succ X1) zero) = [X1:tm num] [x3:pf (isNat X1)] isNat->succ_gt_zero X1 x3.
isNat_succ_neq_zero : {X1:tm num} pf (isNat X1) -> pf (!= num (succ X1) zero) = [X1:tm num] [p1:pf (isNat X1)] gt->neq (succ X1) zero (isNat->succ_gt_zero X1 p1).
nat_diff : {I:tnum} {J:tnum} pf (isNat I) -> pf (isInt J) -> pf (>= I J) -> pf (isNat (- I J)) = [I:tnum] [J:tnum] [p1:pf (isNat I)] [p2:pf (isInt J)] [x3:pf (>= I J)] isNat_minus I J (isNat->isInt I p1) p2 x3.
closure_minus : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (isInt (- X1 X2)) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] isInt_minus X1 X2 x3 x4.
nat_sum : {X1:tm num} {X2:tm num} pf (isNat X1) -> pf (isNat X2) -> pf (isNat (+ X1 X2)) = [X1:tm num] [X2:tm num] [x3:pf (isNat X1)] [x4:pf (isNat X2)] isNat_plus X1 X2 x3 x4.
nat_prod : {X1:tm num} {X2:tm num} pf (isNat X1) -> pf (isNat X2) -> pf (isNat (* X1 X2)) = [X1:tm num] [X2:tm num] [x3:pf (isNat X1)] [x4:pf (isNat X2)] isNat_times X1 X2 x3 x4.
isNat_pred_>=1 : {X1:tm num} pf (isNat (pred X1)) -> pf (geq X1 one) = [X1:tm num] [x3:pf (isNat (pred X1))] isNat_pred->geq_one X1 x3.
isNat_pred_>0 : {X1:tm num} pf (isNat (pred X1)) -> pf (gt X1 zero) = [X1:tm num] [x3:pf (isNat (pred X1))] isNat_pred->gt_zero X1 x3.
shadowed_2 : word32 -> tnum = [x3:word32] const x3.
fourteen : tnum = shadowed_2 14.
pow2_30 : tnum = shadowed_2 1073741824.
rep_maxint32 : word32 = 4294967295.
maxint32 : tnum = shadowed_2 rep_maxint32.
1024*4 : rep_times 1024 4 4096 = 1024*4.
256*256 : rep_times 256 256 65536 = 256*256.
65536+1 : rep_plus 65536 1 65537 = 65536+1.
65535+1 : rep_plus 65535 1 65536 = 65535+1.
65537*65535 : rep_times 65537 65535 4294967295 = 65537*65535.
4*16384 : rep_times 4 16384 65536 = 4*16384.
16384*65536 : rep_times 16384 65536 1073741824 = 16384*65536.
1+1=2 : rep_plus 1 1 2 = 1+1.
eval_plus : {A:word32} {B:word32} {C:word32} rep_plus A B C -> pf (== num (+ (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C)) = [A:word32] [B:word32] [C:word32] [x3:rep_plus A B C] _eval_plus A B C x3.
eval_times : {A:word32} {B:word32} {C:word32} rep_times A B C -> pf (== num (* (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C)) = [A:word32] [B:word32] [C:word32] [x3:rep_times A B C] _eval_times A B C x3.
eval_div : {M:word32} {N:word32} {Q:word32} rep_div M N Q -> pf (>= (shadowed_2 M) (* (shadowed_2 N) (shadowed_2 Q)) and < (shadowed_2 M) (* (shadowed_2 N) (+ one (shadowed_2 Q)))) = [M:word32] [N:word32] [Q:word32] [x3:rep_div M N Q] _eval_div M N Q x3.
eval_geq : {A:word32} {B:word32} {C:word32} rep_plus A B C -> pf (>= (const B) zero) -> pf (>= (const C) (const A)) = [A:word32] [B:word32] [C:word32] [p1:rep_plus A B C] [p2:pf (>= (const B) zero)] cut (== num (+ (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C)) (>= (shadowed_2 C) (shadowed_2 A)) (eval_plus A B C p1) ([p3:pf (== num (+ (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C))] cut (>= (+ (shadowed_2 C) (const B)) (shadowed_2 C)) (>= (shadowed_2 C) (shadowed_2 A)) (trans_geq_eq (+ (shadowed_2 C) (const B)) (+ (shadowed_2 C) zero) (shadowed_2 C) (geq_plus_cong2 (const B) zero (shadowed_2 C) p2) (plus_zero (shadowed_2 C))) ([p4:pf (>= (+ (shadowed_2 C) (shadowed_2 B)) (shadowed_2 C))] cut (>= (+ (shadowed_2 C) (shadowed_2 B)) (+ (shadowed_2 A) (shadowed_2 B))) (>= (shadowed_2 C) (shadowed_2 A)) (trans_geq (+ (shadowed_2 C) (shadowed_2 B)) (shadowed_2 C) (+ (shadowed_2 A) (shadowed_2 B)) p4 (eq->geq (shadowed_2 C) (+ (shadowed_2 A) (shadowed_2 B)) (symm num (+ (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C) p3))) ([p5:pf (>= (+ (shadowed_2 C) (shadowed_2 B)) (+ (shadowed_2 A) (shadowed_2 B)))] geq_plus_elim2 (shadowed_2 C) (shadowed_2 B) (shadowed_2 A) p5))).
eval_gt : {B:word32} {A:word32} rep_div B A 0 -> pf (> (shadowed_2 A) (shadowed_2 B)) = [B:word32] [A:word32] [p1:rep_div B A 0] cut (>= (shadowed_2 B) (* (shadowed_2 A) (shadowed_2 0)) and < (shadowed_2 B) (* (shadowed_2 A) (+ one (shadowed_2 0)))) (> (shadowed_2 A) (shadowed_2 B)) (eval_div B A 0 p1) ([p3:pf (>= (shadowed_2 B) (* (shadowed_2 A) zero) and < (shadowed_2 B) (* (shadowed_2 A) (+ one zero)))] trans_eq_gt (shadowed_2 A) (* (shadowed_2 A) (+ one zero)) (shadowed_2 B) (trans num (shadowed_2 A) (* (shadowed_2 A) one) (* (shadowed_2 A) (+ one zero)) (symm num (* (shadowed_2 A) one) (shadowed_2 A) (times_one (shadowed_2 A))) (times_cong2 one (+ one zero) (shadowed_2 A) (symm num (+ one zero) one (plus_zero one)))) (and_e2 (>= (shadowed_2 B) (* (shadowed_2 A) zero)) (< (shadowed_2 B) (* (shadowed_2 A) (+ one zero))) p3)).
eval_minus : {B-A:word32} {A:word32} {B:word32} rep_plus B-A A B -> pf (== num (- (shadowed_2 B) (shadowed_2 A)) (shadowed_2 B-A)) = [B-A:word32] [A:word32] [B:word32] [p1:rep_plus B-A A B] trans num (+ (shadowed_2 B) (neg (shadowed_2 A))) (+ (+ (shadowed_2 B-A) (shadowed_2 A)) (neg (shadowed_2 A))) (shadowed_2 B-A) (symm num (+ (+ (shadowed_2 B-A) (shadowed_2 A)) (neg (shadowed_2 A))) (+ (shadowed_2 B) (neg (shadowed_2 A))) (plus_cong1 (+ (shadowed_2 B-A) (shadowed_2 A)) (shadowed_2 B) (neg (shadowed_2 A)) (eval_plus B-A A B p1))) (cancel_a+b-b (shadowed_2 B-A) (shadowed_2 A)).
eval_minus' : {A:word32} {B-A:word32} {B:word32} rep_plus A B-A B -> pf (== num (- (shadowed_2 B) (shadowed_2 A)) (shadowed_2 B-A)) = [A:word32] [B-A:word32] [B:word32] [p1:rep_plus A B-A B] trans num (+ (shadowed_2 B) (neg (shadowed_2 A))) (+ (+ (shadowed_2 A) (shadowed_2 B-A)) (neg (shadowed_2 A))) (shadowed_2 B-A) (symm num (+ (+ (shadowed_2 A) (shadowed_2 B-A)) (neg (shadowed_2 A))) (+ (shadowed_2 B) (neg (shadowed_2 A))) (plus_cong1 (+ (shadowed_2 A) (shadowed_2 B-A)) (shadowed_2 B) (neg (shadowed_2 A)) (eval_plus A B-A B p1))) (cancel_a+b-a (shadowed_2 A) (shadowed_2 B-A)).
two_times_eq_plus : {A:tnum} pf (eq num (times two A) (plus A A)) = [A:tnum] trans num (* (shadowed_2 2) A) (* (+ (shadowed_2 1) (shadowed_2 1)) A) (+ A A) (times_cong (shadowed_2 2) (+ (shadowed_2 1) (shadowed_2 1)) A A (symm num (+ (shadowed_2 1) (shadowed_2 1)) (shadowed_2 2) (eval_plus 1 1 2 1+1=2)) (refl num A)) (trans num (* (+ one one) A) (+ (* one A) (* one A)) (+ A A) (distrib_right one one A) (plus_cong (* one A) A (* one A) A (one_times A) (one_times A))).
dig0lem : {N:tnum} pf (== num (N dig 0) (* N (shadowed_2 bignum_base))) = [N:tnum] plus_zero (times N (const bignum_base)).
dig0lem1 : {A:tm num} {B:tm num} pf (== num A B) -> pf (== num (A dig 0) (* B (shadowed_2 bignum_base))) = [A:tm num] [B:tm num] [p1:pf (== num A B)] congr num B A ([z1:tm num] == num (A dig 0) (* z1 (shadowed_2 bignum_base))) (symm num A B p1) (dig0lem A).
pow2_32_eq_65536*65536 : pf (== num pow2_32 (* (shadowed_2 65536) (shadowed_2 65536))) = cut (eq num (plus (* zero (const bignum_base)) one) one) (eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) (shadowed_2 65536))) (congr num (* zero (const bignum_base)) zero ([z1:tm num] eq num (plus z1 one) one) (zero_times (const bignum_base)) (zero_plus one)) ([p1:pf (eq num (bignum dig 1) one)] cut (== num (bignum dig 1 dig 0) (shadowed_2 bignum_base)) (eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) (shadowed_2 65536))) (trans num (bignum dig 1 dig 0) (* one (shadowed_2 bignum_base)) (shadowed_2 bignum_base) (dig0lem1 (bignum dig 1) one p1) (one_times (shadowed_2 bignum_base))) ([p2:pf (eq num (bignum dig 1 dig 0) (const bignum_base))] cut (== num (bignum dig 1 dig 0 dig 0) (shadowed_2 65536)) (eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) (shadowed_2 65536))) (trans num (bignum dig 1 dig 0 dig 0) (* (const bignum_base) (shadowed_2 bignum_base)) (shadowed_2 65536) (dig0lem1 (bignum dig 1 dig 0) (const bignum_base) p2) (eval_times 256 256 65536 256*256)) ([p3:pf (eq num (bignum dig 1 dig 0 dig 0) (const 65536))] cut (== num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (* (const 65536) (* (shadowed_2 bignum_base) (shadowed_2 bignum_base)))) (eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) (shadowed_2 65536))) (trans num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (* (* (const 65536) (shadowed_2 bignum_base)) (shadowed_2 bignum_base)) (* (const 65536) (* (shadowed_2 bignum_base) (shadowed_2 bignum_base))) (dig0lem1 (bignum dig 1 dig 0 dig 0 dig 0) (* (const 65536) (shadowed_2 bignum_base)) (dig0lem1 (bignum dig 1 dig 0 dig 0) (const 65536) p3)) (times_assoc (const 65536) (shadowed_2 bignum_base) (shadowed_2 bignum_base))) ([p4:pf (eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) (times (const bignum_base) (const bignum_base))))] congr num (shadowed_2 65536) (* (shadowed_2 256) (shadowed_2 256)) ([z2:tm num] eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) z2)) (symm num (* (shadowed_2 256) (shadowed_2 256)) (shadowed_2 65536) (eval_times 256 256 65536 256*256)) p4)))).
pow2_32_eq_4*pow2_30 : pf (== num pow2_32 (* four pow2_30)) = trans num pow2_32 (* (shadowed_2 65536) (shadowed_2 65536)) (* (shadowed_2 4) (shadowed_2 1073741824)) pow2_32_eq_65536*65536 (trans num (* (shadowed_2 65536) (shadowed_2 65536)) (* (* (shadowed_2 4) (shadowed_2 16384)) (shadowed_2 65536)) (* (shadowed_2 4) (shadowed_2 1073741824)) (times_cong (shadowed_2 65536) (* (shadowed_2 4) (shadowed_2 16384)) (shadowed_2 65536) (shadowed_2 65536) (symm num (* (shadowed_2 4) (shadowed_2 16384)) (shadowed_2 65536) (eval_times 4 16384 65536 4*16384)) (refl num (shadowed_2 65536))) (trans num (* (* (shadowed_2 4) (shadowed_2 16384)) (shadowed_2 65536)) (* (shadowed_2 4) (* (shadowed_2 16384) (shadowed_2 65536))) (* (shadowed_2 4) (shadowed_2 1073741824)) (times_assoc (shadowed_2 4) (shadowed_2 16384) (shadowed_2 65536)) (times_cong (shadowed_2 4) (shadowed_2 4) (* (shadowed_2 16384) (shadowed_2 65536)) (shadowed_2 1073741824) (refl num (shadowed_2 4)) (eval_times 16384 65536 1073741824 16384*65536)))).
pow2_32eq : pf (== num pow2_32 (succ maxint32)) = cut (== num (* (shadowed_2 65537) (shadowed_2 65535)) (pred (* (shadowed_2 65536) (shadowed_2 65536)))) (== num pow2_32 (succ maxint32)) (congr2 num num (shadowed_2 65537) (+ (shadowed_2 65536) (shadowed_2 1)) (shadowed_2 65535) (- (shadowed_2 65536) (shadowed_2 1)) ([y:tm num] [z1:tm num] == num (* y z1) (pred (* (shadowed_2 65536) (shadowed_2 65536)))) (symm num (+ (shadowed_2 65536) (shadowed_2 1)) (shadowed_2 65537) (eval_plus 65536 1 65537 65536+1)) (symm num (- (shadowed_2 65536) (shadowed_2 1)) (shadowed_2 65535) (eval_minus 65535 1 65536 65535+1)) (succa_preda (shadowed_2 65536))) ([p11:pf (== num (* (shadowed_2 65537) (shadowed_2 65535)) (pred (* (shadowed_2 65536) (shadowed_2 65536))))] cut (== num (pred (* (shadowed_2 65536) (shadowed_2 65536))) (shadowed_2 4294967295)) (== num pow2_32 (succ maxint32)) (trans num (pred (* (shadowed_2 65536) (shadowed_2 65536))) (* (shadowed_2 65537) (shadowed_2 65535)) (shadowed_2 4294967295) (symm num (* (shadowed_2 65537) (shadowed_2 65535)) (pred (* (shadowed_2 65536) (shadowed_2 65536))) p11) (eval_times 65537 65535 4294967295 65537*65535)) ([p12:pf (== num (pred (* (shadowed_2 65536) (shadowed_2 65536))) maxint32)] cut (eq num (succ (pred (* (shadowed_2 65536) (shadowed_2 65536)))) (succ maxint32)) (== num pow2_32 (succ maxint32)) (congr num (pred (* (shadowed_2 65536) (shadowed_2 65536))) maxint32 ([z2:tm num] eq num (succ z2) (succ maxint32)) p12 (refl num (succ maxint32))) ([p13:pf (== num (+ (- (* (const 65536) (const 65536)) one) one) (succ maxint32))] cut (== num (* (const 65536) (const 65536)) (succ maxint32)) (== num pow2_32 (succ maxint32)) (trans num (* (const 65536) (const 65536)) (+ (- (* (const 65536) (const 65536)) one) one) (succ maxint32) (symm num (+ (- (* (const 65536) (const 65536)) one) one) (* (const 65536) (const 65536)) (cancel_a-b+b (* (const 65536) (const 65536)) one)) p13) ([p14:pf (== num (* (const 65536) (const 65536)) (succ maxint32))] trans num pow2_32 (* (shadowed_2 65536) (shadowed_2 65536)) (succ maxint32) pow2_32_eq_65536*65536 p14)))).
eval_plus_isInt : {A:word32} {B:word32} {C:word32} pf (isInt (plus (const A) (const B))) -> rep_plus A B C -> pf (isInt (const C)) = [A:word32] [B:word32] [C:word32] [p1:pf (isInt (plus (const A) (const B)))] [p2:rep_plus A B C] congr num (shadowed_2 C) (+ (shadowed_2 A) (shadowed_2 B)) ([x3:tm num] isInt x3) (symm num (+ (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C) (eval_plus A B C p2)) p1.
isIntNPlusOne : {N:word32} {N':word32} pf (isInt (const N)) -> rep_plus N 1 N' -> pf (isInt (const N')) = [N:word32] [N':word32] [p1:pf (isInt (const N))] [p2:rep_plus N 1 N'] eval_plus_isInt N 1 N' (closure_add (const N) one p1 p_one) p2.
isIntNPlusN : {N:word32} {N+N:word32} pf (isInt (const N)) -> rep_plus N N N+N -> pf (isInt (const N+N)) = [N:word32] [N+N:word32] [p1:pf (isInt (const N))] [p2:rep_plus N N N+N] eval_plus_isInt N N N+N (closure_add (const N) (const N) p1 p1) p2.
_proof : {i1:tm num} {n:tnum} algebra_solver (== num i1 (succ n) imp == num (pred i1) n) = [i2:tm num] [n:tnum] solver_eq i2 n (pred i2) (succ n) (solver_rearrange (+ (+ zero (* one i2)) (* one n)) zero (+ (+ (+ zero (* one i2)) (* one n)) one) (+ zero one) (+ (pred i2) (succ n)) (+ i2 n) (rearr_three (+ zero (* one i2)) zero (+ zero (* one i2)) (+ (+ zero (* one i2)) one) (+ zero one) (+ (+ (+ zero (* one i2)) (* one n)) one) (+ (+ zero (* one i2)) (* one n)) (rearr_pos zero zero (+ zero (* one i2)) (+ zero (* one i2)) rearr_finish (trim_get zero (* one i2) zero)) (trim_get (+ zero (* one i2)) one zero) (trim_step1 (+ (+ zero (* one i2)) (* one n)) (+ (+ zero (* one i2)) (* one n)) (+ zero (* one i2)) (+ zero (* one i2)) one (trim_get (+ zero (* one i2)) (* one n) (+ zero (* one i2))))) (listify_imp (+ (pred i2) (succ n)) (+ (+ (+ zero (* one i2)) (* one n)) one) (+ zero one) (plusify_swap zero (pred i2) (succ n) (+ (+ (+ zero (* one i2)) (* one n)) one) (+ zero one) (plusify_swap (+ zero (pred i2)) n one (+ (+ (+ zero (* one i2)) (* one n)) one) (+ zero one) (plusify_step_one (+ (+ zero (pred i2)) n) (+ (+ zero (* one i2)) (* one n)) (+ zero one) (plusify_step (+ zero (pred i2)) (+ zero (* one i2)) (+ zero one) n (plusify_swap zero i2 (neg one) (+ zero (* one i2)) (+ zero one) (plusify_step_neg_one (+ zero i2) (+ zero (* one i2)) zero (plusify_step zero zero zero i2 plusify_zero)))))))) (listify_imp (+ i2 n) (+ (+ zero (* one i2)) (* one n)) zero (plusify_swap zero i2 n (+ (+ zero (* one i2)) (* one n)) zero (plusify_step (+ zero i2) (+ zero (* one i2)) zero n (plusify_step zero zero zero i2 plusify_zero))))).
isIntPredNPlusN : {N:word32} {N-1:word32} {N+N-1:word32} pf (isInt (const N)) -> rep_plus N-1 1 N -> rep_plus N-1 N N+N-1 -> pf (isInt (const N+N-1)) = [N:word32] [N-1:word32] [N+N-1:word32] [p1:pf (isInt (const N))] [p2:rep_plus N-1 1 N] [p3:rep_plus N-1 N N+N-1] cut (== num (pred (const N)) (const N-1)) (isInt (const N+N-1)) (imp_e (== num (const N) (succ (const N-1))) (== num (pred (const N)) (const N-1)) (_proof (const N) (const N-1)) (symm num (+ (shadowed_2 N-1) (shadowed_2 1)) (shadowed_2 N) (eval_plus N-1 1 N p2))) ([p4:pf (eq num (pred (const N)) (const N-1))] cut (isInt (const N-1)) (isInt (const N+N-1)) (congr num (const N-1) (pred (const N)) ([x3:tm num] isInt x3) (symm num (pred (const N)) (const N-1) p4) (isInt_pred_i (const N) p1)) ([p5:pf (isInt (const N-1))] eval_plus_isInt N-1 N N+N-1 (closure_add (const N-1) (const N) p5 p1) p3)).
pfSucc0 : rep_plus 0 1 1 = 0+1.
pfSucc1 : rep_plus 1 1 2 = 1+1.
pfSucc2 : rep_plus 2 1 3 = 2+1.
pfSucc3 : rep_plus 3 1 4 = 3+1.
pfSucc4 : rep_plus 4 1 5 = 4+1.
pfSucc5 : rep_plus 5 1 6 = 5+1.
pfSucc6 : rep_plus 6 1 7 = 6+1.
pfSucc7 : rep_plus 7 1 8 = 7+1.
pfSucc8 : rep_plus 8 1 9 = 8+1.
pfSucc9 : rep_plus 9 1 10 = 9+1.
pfSucc10 : rep_plus 10 1 11 = 10+1.
pfSucc11 : rep_plus 11 1 12 = 11+1.
pfSucc12 : rep_plus 12 1 13 = 12+1.
pfSucc13 : rep_plus 13 1 14 = 13+1.
pfSucc14 : rep_plus 14 1 15 = 14+1.
pfSucc15 : rep_plus 15 1 16 = 15+1.
pfSucc16 : rep_plus 16 1 17 = 16+1.
pfSucc17 : rep_plus 17 1 18 = 17+1.
pfSucc18 : rep_plus 18 1 19 = 18+1.
pfSucc19 : rep_plus 19 1 20 = 19+1.
pfSucc20 : rep_plus 20 1 21 = 20+1.
pfSucc21 : rep_plus 21 1 22 = 21+1.
pfSucc22 : rep_plus 22 1 23 = 22+1.
pfSucc23 : rep_plus 23 1 24 = 23+1.
pfSucc24 : rep_plus 24 1 25 = 24+1.
pfSucc25 : rep_plus 25 1 26 = 25+1.
pfSucc26 : rep_plus 26 1 27 = 26+1.
pfSucc27 : rep_plus 27 1 28 = 27+1.
pfSucc28 : rep_plus 28 1 29 = 28+1.
pfSucc29 : rep_plus 29 1 30 = 29+1.
pfSucc30 : rep_plus 30 1 31 = 30+1.
pfSucc31 : rep_plus 31 1 32 = 31+1.
pfSucc32 : rep_plus 32 1 33 = 32+1.
pfSucc33 : rep_plus 33 1 34 = 33+1.
pfSucc34 : rep_plus 34 1 35 = 34+1.
pfSucc35 : rep_plus 35 1 36 = 35+1.
pfSucc36 : rep_plus 36 1 37 = 36+1.
pfSucc37 : rep_plus 37 1 38 = 37+1.
pfSucc38 : rep_plus 38 1 39 = 38+1.
pfSucc39 : rep_plus 39 1 40 = 39+1.
pfSucc40 : rep_plus 40 1 41 = 40+1.
pfSucc41 : rep_plus 41 1 42 = 41+1.
pfSucc42 : rep_plus 42 1 43 = 42+1.
pfSucc43 : rep_plus 43 1 44 = 43+1.
pfSucc44 : rep_plus 44 1 45 = 44+1.
pfSucc45 : rep_plus 45 1 46 = 45+1.
pfSucc46 : rep_plus 46 1 47 = 46+1.
pfSucc47 : rep_plus 47 1 48 = 47+1.
pfSucc48 : rep_plus 48 1 49 = 48+1.
pfSucc49 : rep_plus 49 1 50 = 49+1.
pfSucc50 : rep_plus 50 1 51 = 50+1.
pfSucc51 : rep_plus 51 1 52 = 51+1.
pfSucc52 : rep_plus 52 1 53 = 52+1.
pfSucc53 : rep_plus 53 1 54 = 53+1.
pfSucc54 : rep_plus 54 1 55 = 54+1.
pfSucc55 : rep_plus 55 1 56 = 55+1.
pfSucc56 : rep_plus 56 1 57 = 56+1.
pfSucc57 : rep_plus 57 1 58 = 57+1.
pfSucc58 : rep_plus 58 1 59 = 58+1.
pfSucc59 : rep_plus 59 1 60 = 59+1.
pfSucc60 : rep_plus 60 1 61 = 60+1.
pfSucc61 : rep_plus 61 1 62 = 61+1.
pfSucc62 : rep_plus 62 1 63 = 62+1.
pfSucc63 : rep_plus 63 1 64 = 63+1.
pfMultSucc0 : rep_times 2 1 2 = 2*1.
pfMultSucc1 : rep_times 2 2 4 = 2*2.
pfMultSucc2 : rep_times 2 4 8 = 2*4.
pfMultSucc3 : rep_times 2 8 16 = 2*8.
pfMultSucc4 : rep_times 2 16 32 = 2*16.
pfMultSucc5 : rep_times 2 32 64 = 2*32.
pfMultSucc6 : rep_times 2 64 128 = 2*64.
pfMultSucc7 : rep_times 2 128 256 = 2*128.
pfMultSucc8 : rep_times 2 256 512 = 2*256.
pfMultSucc9 : rep_times 2 512 1024 = 2*512.
pfMultSucc10 : rep_times 2 1024 2048 = 2*1024.
pfMultSucc11 : rep_times 2 2048 4096 = 2*2048.
pfMultSucc12 : rep_times 2 4096 8192 = 2*4096.
pfMultSucc13 : rep_times 2 8192 16384 = 2*8192.
pfMultSucc14 : rep_times 2 16384 32768 = 2*16384.
pfMultSucc15 : rep_times 2 32768 65536 = 2*32768.
pfMultSucc16 : rep_times 2 65536 131072 = 2*65536.
pfMultSucc17 : rep_times 2 131072 262144 = 2*131072.
pfMultSucc18 : rep_times 2 262144 524288 = 2*262144.
pfMultSucc19 : rep_times 2 524288 1048576 = 2*524288.
pfMultSucc20 : rep_times 2 1048576 2097152 = 2*1048576.
pfMultSucc21 : rep_times 2 2097152 4194304 = 2*2097152.
pfMultSucc22 : rep_times 2 4194304 8388608 = 2*4194304.
pfMultSucc23 : rep_times 2 8388608 16777216 = 2*8388608.
pfMultSucc24 : rep_times 2 16777216 33554432 = 2*16777216.
pfMultSucc25 : rep_times 2 33554432 67108864 = 2*33554432.
pfMultSucc26 : rep_times 2 67108864 134217728 = 2*67108864.
pfMultSucc27 : rep_times 2 134217728 268435456 = 2*134217728.
pfMultSucc28 : rep_times 2 268435456 536870912 = 2*268435456.
pfMultSucc29 : rep_times 2 536870912 1073741824 = 2*536870912.
pfInt0 : pf (isInt zero) = p_zero.
pfInt1 : pf (isInt (const 1)) = isIntNPlusOne 0 1 pfInt0 pfSucc0.
pfInt2 : pf (isInt (const 2)) = isIntNPlusOne 1 2 pfInt1 pfSucc1.
pfInt3 : pf (isInt (const 3)) = isIntNPlusOne 2 3 pfInt2 pfSucc2.
pfInt4 : pf (isInt (const 4)) = isIntNPlusOne 3 4 pfInt3 pfSucc3.
pfInt5 : pf (isInt (const 5)) = isIntNPlusOne 4 5 pfInt4 pfSucc4.
pfInt6 : pf (isInt (const 6)) = isIntNPlusOne 5 6 pfInt5 pfSucc5.
pfInt7 : pf (isInt (const 7)) = isIntNPlusOne 6 7 pfInt6 pfSucc6.
pfInt8 : pf (isInt (const 8)) = isIntNPlusOne 7 8 pfInt7 pfSucc7.
pfInt9 : pf (isInt (const 9)) = isIntNPlusOne 8 9 pfInt8 pfSucc8.
pfInt10 : pf (isInt (const 10)) = isIntNPlusOne 9 10 pfInt9 pfSucc9.
pfInt11 : pf (isInt (const 11)) = isIntNPlusOne 10 11 pfInt10 pfSucc10.
pfInt12 : pf (isInt (const 12)) = isIntNPlusOne 11 12 pfInt11 pfSucc11.
pfInt13 : pf (isInt (const 13)) = isIntNPlusOne 12 13 pfInt12 pfSucc12.
pfInt14 : pf (isInt (const 14)) = isIntNPlusOne 13 14 pfInt13 pfSucc13.
pfInt15 : pf (isInt (const 15)) = isIntNPlusOne 14 15 pfInt14 pfSucc14.
pfInt16 : pf (isInt (const 16)) = isIntNPlusOne 15 16 pfInt15 pfSucc15.
pfInt17 : pf (isInt (const 17)) = isIntNPlusOne 16 17 pfInt16 pfSucc16.
pfInt18 : pf (isInt (const 18)) = isIntNPlusOne 17 18 pfInt17 pfSucc17.
pfInt19 : pf (isInt (const 19)) = isIntNPlusOne 18 19 pfInt18 pfSucc18.
pfInt20 : pf (isInt (const 20)) = isIntNPlusOne 19 20 pfInt19 pfSucc19.
pfInt21 : pf (isInt (const 21)) = isIntNPlusOne 20 21 pfInt20 pfSucc20.
pfInt22 : pf (isInt (const 22)) = isIntNPlusOne 21 22 pfInt21 pfSucc21.
pfInt23 : pf (isInt (const 23)) = isIntNPlusOne 22 23 pfInt22 pfSucc22.
pfInt24 : pf (isInt (const 24)) = isIntNPlusOne 23 24 pfInt23 pfSucc23.
pfInt25 : pf (isInt (const 25)) = isIntNPlusOne 24 25 pfInt24 pfSucc24.
pfInt26 : pf (isInt (const 26)) = isIntNPlusOne 25 26 pfInt25 pfSucc25.
pfInt27 : pf (isInt (const 27)) = isIntNPlusOne 26 27 pfInt26 pfSucc26.
pfInt28 : pf (isInt (const 28)) = isIntNPlusOne 27 28 pfInt27 pfSucc27.
pfInt29 : pf (isInt (const 29)) = isIntNPlusOne 28 29 pfInt28 pfSucc28.
pfInt30 : pf (isInt (const 30)) = isIntNPlusOne 29 30 pfInt29 pfSucc29.
pfInt31 : pf (isInt (const 31)) = isIntNPlusOne 30 31 pfInt30 pfSucc30.
pfInt32 : pf (isInt (const 32)) = isIntNPlusOne 31 32 pfInt31 pfSucc31.
pfInt33 : pf (isInt (const 33)) = isIntNPlusOne 32 33 pfInt32 pfSucc32.
pfInt34 : pf (isInt (const 34)) = isIntNPlusOne 33 34 pfInt33 pfSucc33.
pfInt35 : pf (isInt (const 35)) = isIntNPlusOne 34 35 pfInt34 pfSucc34.
pfInt36 : pf (isInt (const 36)) = isIntNPlusOne 35 36 pfInt35 pfSucc35.
pfInt37 : pf (isInt (const 37)) = isIntNPlusOne 36 37 pfInt36 pfSucc36.
pfInt38 : pf (isInt (const 38)) = isIntNPlusOne 37 38 pfInt37 pfSucc37.
pfInt39 : pf (isInt (const 39)) = isIntNPlusOne 38 39 pfInt38 pfSucc38.
pfInt40 : pf (isInt (const 40)) = isIntNPlusOne 39 40 pfInt39 pfSucc39.
pfInt41 : pf (isInt (const 41)) = isIntNPlusOne 40 41 pfInt40 pfSucc40.
pfInt42 : pf (isInt (const 42)) = isIntNPlusOne 41 42 pfInt41 pfSucc41.
pfInt43 : pf (isInt (const 43)) = isIntNPlusOne 42 43 pfInt42 pfSucc42.
pfInt44 : pf (isInt (const 44)) = isIntNPlusOne 43 44 pfInt43 pfSucc43.
pfInt45 : pf (isInt (const 45)) = isIntNPlusOne 44 45 pfInt44 pfSucc44.
pfInt46 : pf (isInt (const 46)) = isIntNPlusOne 45 46 pfInt45 pfSucc45.
pfInt47 : pf (isInt (const 47)) = isIntNPlusOne 46 47 pfInt46 pfSucc46.
pfInt48 : pf (isInt (const 48)) = isIntNPlusOne 47 48 pfInt47 pfSucc47.
pfInt49 : pf (isInt (const 49)) = isIntNPlusOne 48 49 pfInt48 pfSucc48.
pfInt50 : pf (isInt (const 50)) = isIntNPlusOne 49 50 pfInt49 pfSucc49.
pfInt51 : pf (isInt (const 51)) = isIntNPlusOne 50 51 pfInt50 pfSucc50.
pfInt52 : pf (isInt (const 52)) = isIntNPlusOne 51 52 pfInt51 pfSucc51.
pfInt53 : pf (isInt (const 53)) = isIntNPlusOne 52 53 pfInt52 pfSucc52.
pfInt54 : pf (isInt (const 54)) = isIntNPlusOne 53 54 pfInt53 pfSucc53.
pfInt55 : pf (isInt (const 55)) = isIntNPlusOne 54 55 pfInt54 pfSucc54.
pfInt56 : pf (isInt (const 56)) = isIntNPlusOne 55 56 pfInt55 pfSucc55.
pfInt57 : pf (isInt (const 57)) = isIntNPlusOne 56 57 pfInt56 pfSucc56.
pfInt58 : pf (isInt (const 58)) = isIntNPlusOne 57 58 pfInt57 pfSucc57.
pfInt59 : pf (isInt (const 59)) = isIntNPlusOne 58 59 pfInt58 pfSucc58.
pfInt60 : pf (isInt (const 60)) = isIntNPlusOne 59 60 pfInt59 pfSucc59.
pfInt61 : pf (isInt (const 61)) = isIntNPlusOne 60 61 pfInt60 pfSucc60.
pfInt62 : pf (isInt (const 62)) = isIntNPlusOne 61 62 pfInt61 pfSucc61.
pfInt63 : pf (isInt (const 63)) = isIntNPlusOne 62 63 pfInt62 pfSucc62.
pfInt64 : pf (isInt (const 64)) = isIntNPlusOne 63 64 pfInt63 pfSucc63.
x : rep_plus 58 58 116 = 58+58.
pfInt116 : pf (isInt (const 116)) = isIntNPlusN 58 116 pfInt58 x.
x : rep_plus 64 64 128 = 64+64.
pfInt128 : pf (isInt (const 128)) = isIntNPlusN 64 128 pfInt64 x.
x : rep_plus 128 128 256 = 128+128.
pfInt256 : pf (isInt (const 256)) = isIntNPlusN 128 256 pfInt128 x.
x : rep_plus 256 256 512 = 256+256.
pfInt512 : pf (isInt (const 512)) = isIntNPlusN 256 512 pfInt256 x.
x : rep_plus 512 512 1024 = 512+512.
pfInt1024 : pf (isInt (const 1024)) = isIntNPlusN 512 1024 pfInt512 x.
x : rep_plus 1024 1024 2048 = 1024+1024.
pfInt2048 : pf (isInt (const 2048)) = isIntNPlusN 1024 2048 pfInt1024 x.
x : rep_plus 2048 2048 4096 = 2048+2048.
pfInt4096 : pf (isInt (const 4096)) = isIntNPlusN 2048 4096 pfInt2048 x.
4096+4096 : rep_plus 4096 4096 8192 = 4096+4096.
pfInt8192 : pf (isInt (const 8192)) = isIntNPlusN 4096 8192 pfInt4096 4096+4096.
x : rep_plus 8192 8192 16384 = 8192+8192.
pfInt16384 : pf (isInt (const 16384)) = isIntNPlusN 8192 16384 pfInt8192 x.
x : rep_plus 16384 16384 32768 = 16384+16384.
pfInt32768 : pf (isInt (const 32768)) = isIntNPlusN 16384 32768 pfInt16384 x.
x : rep_plus 32768 32768 65536 = 32768+32768.
pfInt65536 : pf (isInt (const 65536)) = isIntNPlusN 32768 65536 pfInt32768 x.
x : rep_plus 65536 65536 131072 = 65536+65536.
pfInt131072 : pf (isInt (const 131072)) = isIntNPlusN 65536 131072 pfInt65536 x.
x : rep_plus 131072 131072 262144 = 131072+131072.
pfInt262144 : pf (isInt (const 262144)) = isIntNPlusN 131072 262144 pfInt131072 x.
x : rep_plus 262144 262144 524288 = 262144+262144.
pfInt524288 : pf (isInt (const 524288)) = isIntNPlusN 262144 524288 pfInt262144 x.
x : rep_plus 524288 524288 1048576 = 524288+524288.
pfInt1048576 : pf (isInt (const 1048576)) = isIntNPlusN 524288 1048576 pfInt524288 x.
1048576+1048576 : rep_plus 1048576 1048576 2097152 = 1048576+1048576.
pfInt2097152 : pf (isInt (const 2097152)) = isIntNPlusN 1048576 2097152 pfInt1048576 1048576+1048576.
2097152+2097152 : rep_plus 2097152 2097152 4194304 = 2097152+2097152.
pfInt4194304 : pf (isInt (const 4194304)) = isIntNPlusN 2097152 4194304 pfInt2097152 2097152+2097152.
x : rep_plus 4194304 4194304 8388608 = 4194304+4194304.
pfInt8388608 : pf (isInt (const 8388608)) = isIntNPlusN 4194304 8388608 pfInt4194304 x.
x : rep_plus 8388608 8388608 16777216 = 8388608+8388608.
pfInt16777216 : pf (isInt (const 16777216)) = isIntNPlusN 8388608 16777216 pfInt8388608 x.
x : rep_plus 16777216 16777216 33554432 = 16777216+16777216.
pfInt33554432 : pf (isInt (const 33554432)) = isIntNPlusN 16777216 33554432 pfInt16777216 x.
x : rep_plus 33554432 33554432 67108864 = 33554432+33554432.
pfInt67108864 : pf (isInt (const 67108864)) = isIntNPlusN 33554432 67108864 pfInt33554432 x.
x : rep_plus 67108864 67108864 134217728 = 67108864+67108864.
pfInt134217728 : pf (isInt (const 134217728)) = isIntNPlusN 67108864 134217728 pfInt67108864 x.
x : rep_plus 134217728 134217728 268435456 = 134217728+134217728.
pfInt268435456 : pf (isInt (const 268435456)) = isIntNPlusN 134217728 268435456 pfInt134217728 x.
x : rep_plus 268435456 268435456 536870912 = 268435456+268435456.
pfInt536870912 : pf (isInt (const 536870912)) = isIntNPlusN 268435456 536870912 pfInt268435456 x.
x : rep_plus 536870912 536870912 1073741824 = 536870912+536870912.
pfInt1073741824 : pf (isInt (const 1073741824)) = isIntNPlusN 536870912 1073741824 pfInt536870912 x.
x : rep_plus 1073741824 1073741824 2147483648 = 1073741824+1073741824.
isInt_2^31 : pf (isInt (const 2147483648)) = isIntNPlusN 1073741824 2147483648 pfInt1073741824 x.
x1 : rep_plus 2147483647 1 2147483648 = 2147483647+1.
x2 : rep_plus 2147483647 2147483648 rep_maxint32 = 2147483647+2147483648.
isInt_maxint32 : pf (isInt maxint32) = isIntPredNPlusN 2147483648 2147483647 rep_maxint32 isInt_2^31 x1 x2.
pf1>0 : pf (gt (const 1) zero) = eval_gt 0 1 1>0.
z : rep_div 0 2 0 = 0/2.
pf2>0 : pf (gt (const 2) zero) = eval_gt 0 2 z.
z : rep_div 0 3 0 = 0/3.
pf3>0 : pf (gt (const 3) zero) = eval_gt 0 3 z.
z : rep_div 0 4 0 = 0/4.
pf4>0 : pf (gt (const 4) zero) = eval_gt 0 4 z.
z : rep_div 0 8 0 = 0/8.
pf8>0 : pf (gt (const 8) zero) = eval_gt 0 8 z.
z : rep_div 0 14 0 = 0/14.
pf14>0 : pf (gt (const 14) zero) = eval_gt 0 14 z.
z : rep_div 0 30 0 = 0/30.
pf30>0 : pf (gt (const 30) zero) = eval_gt 0 30 z.
z : rep_div 0 31 0 = 0/31.
pf31>0 : pf (gt (const 31) zero) = eval_gt 0 31 z.
z : rep_div 0 32 0 = 0/32.
pf32>0 : pf (gt (const 32) zero) = eval_gt 0 32 z.
z : rep_div 0 33 0 = 0/33.
pf33>0 : pf (gt (const 33) zero) = eval_gt 0 33 z.
z : rep_div 0 116 0 = 0/116.
pf116>0 : pf (gt (const 116) zero) = eval_gt 0 116 z.
z : rep_div 1 2 0 = 1/2.
pf1<2 : pf (lt (const 1) (const 2)) = eval_gt 1 2 z.
z : rep_div 1 4 0 = 1/4.
pf1<4 : pf (lt (const 1) (const 4)) = eval_gt 1 4 z.
z : rep_div 2 4 0 = 2/4.
pf2<4 : pf (lt (const 2) (const 4)) = eval_gt 2 4 z.
z : rep_div 15 16 0 = 15/16.
pf15<16 : pf (lt (const 15) (const 16)) = eval_gt 15 16 z.
z : rep_div 7 32 0 = 7/32.
pf7<32 : pf (lt (const 7) (const 32)) = eval_gt 7 32 z.
z : rep_div 15 32 0 = 15/32.
pf15<32 : pf (lt (const 15) (const 32)) = eval_gt 15 32 z.
z : rep_div 32 34 0 = 32/34.
pf32<34 : pf (lt (const 32) (const 34)) = eval_gt 32 34 z.
z : rep_div 16 rep_maxint32 0 = 16/4294967295.
pf16<maxint32 : pf (lt sixteen maxint32) = eval_gt 16 rep_maxint32 z.
z : rep_div 4096 8192 0 = 4096/8192.
pf4096<8192 : pf (lt (const 4096) (const 8192)) = eval_gt 4096 8192 z.
z : rep_div 4096 rep_maxint32 0 = 4096/4294967295.
pf4096<maxint32 : pf (lt (const 4096) maxint32) = eval_gt 4096 rep_maxint32 z.
z : rep_times 4 2 8 = 4*2.
pf4*2 : pf (eq num (times (const 4) (const 2)) (const 8)) = eval_times 4 2 8 z.
z : rep_times 4 995 3980 = 4*995.
pf4*995 : pf (eq num (times (const 4) (const 995)) (const 3980)) = eval_times 4 995 3980 z.
z : rep_times 29 4 116 = 29*4.
pf29*4 : pf (eq num (times (const 29) (const 4)) (const 116)) = eval_times 29 4 116 z.
z : rep_plus 4 4 8 = 4+4.
pf4+4 : pf (eq num (plus four four) eight) = eval_plus 4 4 8 z.
z : rep_plus 116 3980 4096 = 116+3980.
pf116+3980 : pf (eq num (plus (const 116) (const 3980)) (const 4096)) = eval_plus 116 3980 4096 z.
z : rep_plus 995 63 1058 = 995+63.
pf995+63 : pf (eq num (plus (const 995) (const 63)) (const 1058)) = eval_plus 995 63 1058 z.
pfpred1 : pf (eq num (pred one) zero) = eq_swap_a_b+c (shadowed_2 1) (shadowed_2 0) (shadowed_2 1) (symm num (+ (shadowed_2 0) (shadowed_2 1)) (shadowed_2 1) (eval_plus 0 1 1 0+1)).
pfpred2 : pf (eq num (pred two) one) = eq_swap_a_b+c (shadowed_2 2) (shadowed_2 1) (shadowed_2 1) (symm num (+ (shadowed_2 1) (shadowed_2 1)) (shadowed_2 2) (eval_plus 1 1 2 1+1=2)).
eq! : {T:tp} tm T -> tm T -> type = [T:tp] [n1:tm T] [n2:tm T] pf (eq T n1 n2).
plus_rule1 : {C1:word32} {C2:word32} {C:word32} {V2:tm num} {V1:tm num} rep_plus C1 C2 C -> eq! num V2 (const C2) -> eq! num V1 (const C1) -> eq! num (plus V1 V2) (const C) = [C1:word32] [C2:word32] [C:word32] [V2:tm num] [V1:tm num] [p2:rep_plus C1 C2 C] [p4:eq! num V2 (const C2)] [p6:eq! num V1 (const C1)] cut (== num (+ (shadowed_2 C1) (shadowed_2 C2)) (shadowed_2 C)) (== num (+ V1 V2) (const C)) (eval_plus C1 C2 C p2) ([p8:pf (eq num (plus (const C1) (const C2)) (const C))] trans num (+ V1 V2) (+ (const C1) (const C2)) (const C) (plus_cong V1 (const C1) V2 (const C2) p6 p4) p8).
plus_rule2 : {C:word32} eq! num (const C) (const C) = [C:word32] refl num (const C).
min : tm num -> tm num -> tm num = [x3:tm num] [y:tm num] ifgtz (minus x3 y) y x3.
max : tm num -> tm num -> tm num = [x3:tm num] [y:tm num] ifgtz (minus x3 y) x3 y.
min_gt : {X:tnum} {Y:tnum} pf (gt X Y) -> pf (eq num (min X Y) Y) = [X:tnum] [Y:tnum] [p1:pf (gt X Y)] ifgtz1 (- X Y) Y X (gt_shift X Y p1).
max_gt : {X:tnum} {Y:tnum} pf (gt X Y) -> pf (eq num (max X Y) X) = [X:tnum] [Y:tnum] [p1:pf (gt X Y)] ifgtz1 (- X Y) X Y (gt_shift X Y p1).
min_leq : {X:tnum} {Y:tnum} pf (leq X Y) -> pf (eq num (min X Y) X) = [X:tnum] [Y:tnum] [p1:pf (leq X Y)] ifgtz2 (- X Y) Y X (leq_shift X Y p1).
max_leq : {X:tnum} {Y:tnum} pf (leq X Y) -> pf (eq num (max X Y) Y) = [X:tnum] [Y:tnum] [p1:pf (leq X Y)] ifgtz2 (- X Y) X Y (leq_shift X Y p1).
max_eq : {X:tm num} pf (eq num (max X X) X) = [X:tm num] max_leq X X (eq->leq X X (refl num X)).
max_geq : {X:tnum} {Y:tnum} pf (geq X Y) -> pf (eq num (max X Y) X) = [X:tnum] [Y:tnum] [p1:pf (geq X Y)] or_e (>= Y X) (< Y X) (== num (max X Y) X) (or_geq_lt Y X) ([p2:pf (geq Y X)] cut (== num X Y) (== num (max X Y) X) (geq->leq->eq X Y p1 p2) ([p3:pf (eq num X Y)] trans num (max X Y) Y X (max_leq X Y p2) (symm num X Y p3))) ([p2:pf (gt X Y)] max_gt X Y p2).
max_comm : {X:tm num} {Y:tm num} pf (eq num (max X Y) (max Y X)) = [X:tm num] [Y:tm num] or_e (>= Y X) (< Y X) (== num (max X Y) (max Y X)) (or_geq_lt Y X) ([p1:pf (leq X Y)] trans num (max X Y) Y (max Y X) (max_leq X Y p1) (symm num (max Y X) Y (max_geq Y X p1))) ([p2:pf (gt X Y)] trans num (max X Y) X (max Y X) (max_gt X Y p2) (symm num (max Y X) X (max_leq Y X (lt->leq Y X p2)))).
max_geq1 : {A:tm num} {B:tm num} pf (geq (max A B) A) = [A:tm num] [B:tm num] or_e (> A B) (<= A B) (>= (max A B) A) (or_gt_leq A B) ([p1:pf (> A B)] eq->geq (max A B) A (max_geq A B (gt->geq A B p1))) ([p2:pf (<= A B)] congr num (max A B) B ([z1:tm num] geq z1 A) (max_leq A B p2) p2).
max_geq2 : {A:tm num} {B:tm num} pf (geq (max A B) B) = [A:tm num] [B:tm num] or_e (> A B) (<= A B) (>= (max A B) B) (or_gt_leq A B) ([p6:pf (> A B)] trans_geq (max A B) A B (max_geq1 A B) (gt->geq A B p6)) ([p1:pf (<= A B)] eq->geq (max A B) B (max_leq A B p1)).
max_prop : {A:tm num} {B:tm num} {f:tm num -> tform} pf (f A) -> pf (f B) -> pf (f (max A B)) = [A:tm num] [B:tm num] [f:tm num -> tform] [p1:pf (f A)] [p2:pf (f B)] or_e (<= A B) (> A B) (f (max A B)) (or_leq_gt A B) ([p3:pf (leq A B)] congr num (max A B) B ([x3:tm num] f x3) (max_leq A B p3) p2) ([p4:pf (gt A B)] congr num (max A B) A ([x3:tm num] f x3) (max_gt A B p4) p1).
min_leq1 : {A:tm num} {B:tm num} pf (leq (min A B) A) = [A:tm num] [B:tm num] or_e (>= B A) (< B A) (<= (min A B) A) (or_geq_lt B A) ([p1:pf (geq B A)] eq->leq (min A B) A (min_leq A B p1)) ([p2:pf (lt B A)] trans_leq (min A B) B A (eq->leq (min A B) B (min_gt A B p2)) (lt->leq B A p2)).
min_leq2 : {A:tm num} {B:tm num} pf (leq (min A B) B) = [A:tm num] [B:tm num] or_e (>= B A) (< B A) (<= (min A B) B) (or_geq_lt B A) ([p1:pf (geq B A)] trans_leq (min A B) A B (eq->leq (min A B) A (min_leq A B p1)) p1) ([p2:pf (lt B A)] eq->leq (min A B) B (min_gt A B p2)).
min_prop : {A:tm num} {B:tm num} {f:tm num -> tform} pf (f A) -> pf (f B) -> pf (f (min A B)) = [A:tm num] [B:tm num] [f:tm num -> tform] [p1:pf (f A)] [p2:pf (f B)] or_e (>= B A) (< B A) (f (min A B)) (or_geq_lt B A) ([p3:pf (leq A B)] congr num (min A B) A ([x3:tm num] f x3) (min_leq A B p3) p1) ([p4:pf (gt A B)] congr num (min A B) B ([x3:tm num] f x3) (min_gt A B p4) p2).
inrange2_i : {I:tnum} {Lo:tnum} {Hi:tnum} pf (isInt I) -> pf (geq I Lo) -> pf (lt I Hi) -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) = [I:tnum] [Lo:tnum] [Hi:tnum] [p1:pf (isInt I)] [p2:pf (geq I Lo)] [p3:pf (lt I Hi)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) Lo Hi I (and3_i (isInt I) (geq I Lo) (lt I Hi) p1 p2 p3).
inrange2_e : {Lo:tm num} {Hi:tm num} {I:tm num} {C:tform} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) -> (pf (isInt I) -> pf (geq I Lo) -> pf (lt I Hi) -> pf C) -> pf C = [Lo:tm num] [Hi:tm num] [I:tm num] [C:tform] [p1:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)] [q1:pf (isInt I) -> pf (geq I Lo) -> pf (lt I Hi) -> pf C] and3_l (isInt I) (leq Lo I) (lt I Hi) C (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) Lo Hi I p1) ([p2:pf (isInt I)] [p3:pf (geq I Lo)] [p4:pf (lt I Hi)] q1 p2 p3 p4).
inrange2_isInt : {Lo:tm num} {Hi:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) -> pf (isInt I) = [Lo:tm num] [Hi:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)] and3_l (isInt I) (leq Lo I) (lt I Hi) (isInt I) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) Lo Hi I p1) ([p2:pf (isInt I)] [x3:pf (leq Lo I)] [x4:pf (lt I Hi)] p2).
inrange2_e2 : {Lo:tm num} {Hi:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) -> pf (geq I Lo) = [Lo:tm num] [Hi:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)] and3_l (isInt I) (leq Lo I) (lt I Hi) (leq Lo I) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) Lo Hi I p1) ([x3:pf (isInt I)] [p2:pf (leq Lo I)] [x4:pf (lt I Hi)] p2).
inrange2_e3 : {Lo:tm num} {Hi:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) -> pf (lt I Hi) = [Lo:tm num] [Hi:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)] and3_l (isInt I) (leq Lo I) (lt I Hi) (lt I Hi) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) Lo Hi I p1) ([x3:pf (isInt I)] [x4:pf (leq Lo I)] [p2:pf (lt I Hi)] p2).
inrange2_zero_equiv_inrange : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 zero) N) I equiv @ num form (@ num (shadowed_0 num) inrange N) I) = [N:tm num] [I:tm num] congr2 form form (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4)) zero) N) I) (isInt I and leq zero I and lt I N) (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3)) N) I) (isInt I and geq I zero and lt I N) ([u:tm form] [v1:tm form] u equiv v1) (beta3 form num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) zero N I) (beta2 form num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I) (equiv_refl (isInt I and leq zero I and lt I N)).
not_inrange2 : {I:tnum} {Lo:tnum} {Hi:tnum} pf (lt I Lo or geq I Hi) -> pf (not (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)) = [I:tnum] [Lo:tnum] [Hi:tnum] [p1:pf (lt I Lo or geq I Hi)] not_i (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) ([p2:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)] inrange2_e Lo Hi I false p2 ([p3:pf (isInt I)] [p4:pf (geq I Lo)] [p5:pf (lt I Hi)] or_e (lt I Lo) (geq I Hi) false p1 ([p6:pf (lt I Lo)] pf_greater_and_greatereq I Lo false p4 p6) ([p7:pf (geq I Hi)] pf_greater_and_greatereq I Hi false p7 p5))).
inrange_i : {I:tnum} {N:tnum} pf (isInt I) -> pf (geq I zero) -> pf (lt I N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) = [I:tnum] [N:tnum] [p1:pf (isInt I)] [p2:pf (geq I zero)] [p3:pf (lt I N)] def2_i num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I (and3_i (isInt I) (geq I zero) (lt I N) p1 p2 p3).
inrange_i2 : {I:tnum} {N:tnum} pf (isNat I) -> pf (lt I N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) = [I:tnum] [N:tnum] [p1:pf (isNat I)] [p2:pf (lt I N)] inrange_i I N (isNat->isInt I p1) (isNat->geq_zero I p1) p2.
inrange_e : {N:tm num} {I:tm num} {C:tform} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> (pf (isInt I) -> pf (geq I zero) -> pf (lt I N) -> pf C) -> pf C = [N:tm num] [I:tm num] [C:tform] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] [q1:pf (isInt I) -> pf (geq I zero) -> pf (lt I N) -> pf C] and3_l (isInt I) (geq I zero) (lt I N) C (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I p1) ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I N)] q1 p2 p3 p4).
inrange_e1 : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (isInt I) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and3_l (isInt I) (geq I zero) (lt I N) (isInt I) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I p1) ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I N)] p2).
inrange_e2 : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (geq I zero) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and3_l (isInt I) (geq I zero) (lt I N) (geq I zero) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I p1) ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I N)] p3).
inrange_e3 : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (lt I N) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and3_l (isInt I) (geq I zero) (lt I N) (lt I N) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I p1) ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I N)] p4).
inrange_trans_succ : {K:tm num} {J:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange K) J) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ J)) I) -> pf (@ num form (@ num (shadowed_0 num) inrange K) I) = [K:tm num] [J:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange K) J)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange (succ J)) I)] inrange_e K J (@ num form (@ num (shadowed_0 num) inrange K) I) p1 ([p3:pf (isInt J)] [p4:pf (geq J zero)] [p5:pf (gt K J)] inrange_e (succ J) I (@ num form (@ num (shadowed_0 num) inrange K) I) p2 ([p6:pf (isInt I)] [p7:pf (geq I zero)] [p8:pf (gt (succ J) I)] cut (<= I J) (@ num form (@ num (shadowed_0 num) inrange K) I) (less_plus1_e I J p6 p3 p8) ([p9:pf (geq J I)] inrange_i I K p6 p7 (trans_gt_geq K J I p5 p9)))).
inrange_isNat : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (isNat I) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and_i (isInt I) (geq I zero) (inrange_e1 N I p1) (inrange_e2 N I p1).
inrange_isNat' : {N:tnum} {I:tm num} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (isNat (minus N I)) = [N:tnum] [I:tm num] [p1:pf (isNat N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and_i (isInt (plus N (neg I))) (>= (- N I) zero) (closure_add N (neg I) (isNat->isInt N p1) (neg_exists I (inrange_e1 N I p2))) (cut (>= N I) (>= (- N I) zero) (gt->geq N I (inrange_e3 N I p2)) ([q22:pf (geq N I)] not_geq_zero N I q22)).
inrange2->inrange : {X:tnum} {Lo:tm num} {Hi:tm num} pf (isNat X) -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) X) -> pf (@ num form (@ num (shadowed_0 num) inrange Hi) X) = [X:tnum] [Lo:tm num] [Hi:tm num] [p1:pf (isNat X)] [p2:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) X)] inrange_i X Hi (isNat->isInt X p1) (isNat->geq_zero X p1) (inrange2_e3 Lo Hi X p2).
inrange_succ_e : {N:tnum} {I:tm num} pf (isInt N) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (leq I N) = [N:tnum] [I:tm num] [p1:pf (isInt N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] less_plus1_e I N (inrange_e1 (succ N) I p2) p1 (inrange_e3 (succ N) I p2).
inrange_succ_e' : {N:tnum} {I:tm num} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (leq I N) = [N:tnum] [I:tm num] [p1:pf (isNat N)] [x3:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] inrange_succ_e N I (isNat->isInt N p1) x3.
inrange_succ_leq : {N:tnum} {I:tm num} pf (isInt N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (leq (succ I) N) = [N:tnum] [I:tm num] [p1:pf (isInt N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] greatereq_plus1_i N I p1 (inrange_e1 N I p2) (inrange_e3 N I p2).
inrange_succ_leq' : {N:tnum} {I:tm num} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (leq (succ I) N) = [N:tnum] [I:tm num] [p1:pf (isNat N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_succ_leq N I (isNat->isInt N p1) p2.
inrange_e3' : {N:tnum} {I:tm num} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (leq I (pred N)) = [N:tnum] [I:tm num] [p1:pf (isNat N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] lesseq_minus1_i I N (inrange_e1 N I p2) (isNat->isInt N p1) (inrange_e3 N I p2).
inrange_succ_trans : {K:tnum} {J:tm num} {I:tm num} pf (isInt K) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ K)) J) -> pf (@ num form (@ num (shadowed_0 num) inrange J) I) -> pf (@ num form (@ num (shadowed_0 num) inrange K) I) = [K:tnum] [J:tm num] [I:tm num] [p0:pf (isInt K)] [p1:pf (@ num form (@ num (shadowed_0 num) inrange (succ K)) J)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange J) I)] inrange_i2 I K (inrange_isNat J I p2) (trans_geq_gt K J I (inrange_succ_e K J p0 p1) (inrange_e3 J I p2)).
inrange_step : {N:tnum} {I:tm num} pf (isInt N) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (eq num I N or @ num form (@ num (shadowed_0 num) inrange N) I) = [N:tnum] [I:tm num] [p1:pf (isInt N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] inrange_e (succ N) I (== num I N or @ num form (@ num (shadowed_0 num) inrange N) I) p2 ([p3:pf (isInt I)] [p4:pf (geq I zero)] [p5:pf (lt I (succ N))] or_e (== num N I) (> N I) (== num I N or @ num form (@ num (shadowed_0 num) inrange N) I) (greater_or_eq N I (less_plus1_e I N p3 p1 p5)) ([p6:pf (eq num N I)] or_i1 (== num I N) (@ num form (@ num (shadowed_0 num) inrange N) I) (symm num N I p6)) ([p6:pf (lt I N)] or_i2 (@ num form (@ num (shadowed_0 num) inrange N) I) (== num I N) (inrange_i I N p3 p4 p6))).
inrange_gt_0 : {M:tm num} {N:tm num} pf (@ num form (@ num (shadowed_0 num) inrange M) N) -> pf (gt M zero) = [M:tm num] [N:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange M) N)] inrange_e M N (> M zero) p1 ([p2:pf (isInt N)] [p3:pf (geq N zero)] [p4:pf (lt N M)] trans_gt_geq M N zero p4 p3).
not_inrange_zero : {I:tm num} pf (not (@ num form (@ num (shadowed_0 num) inrange zero) I)) = [I:tm num] not_i (@ num form (@ num (shadowed_0 num) inrange zero) I) ([p1:pf (@ num form (@ num (shadowed_0 num) inrange zero) I)] inrange_e zero I false p1 ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I zero)] not_e (geq I zero) p4 p3)).
inrange_one : {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange one) I) -> pf (eq num I zero) = [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange one) I)] inrange_e one I (eqn I zero) p1 ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I one)] ord_antisymmetry I zero p3 (less_plus1_e I zero p2 p_zero (congr num (+ zero one) one ([z1:tm num] lt I z1) (zero_plus one) p4))).
inrange_succ_n : {N:tnum} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) N) = [N:tnum] [p1:pf (isNat N)] inrange_i N (succ N) (and_e1 (isInt N) (geq N zero) p1) (and_e2 (isInt N) (geq N zero) p1) (succ_greater N).
inrange_succ_i : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ I)) I) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_succ_n I (inrange_isNat N I p1).
inrange_pred_right : {I:tnum} {N:tm num} pf (gt I zero) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) = [I:tnum] [N:tm num] [p1:pf (gt I zero)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_e N I (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) p2 ([p3:pf (isInt I)] [x3:pf (geq I zero)] [p4:pf (lt I N)] inrange_i (pred I) N (isInt_pred_i I p3) (greater_greater_eq_minus1 I zero p3 p_zero p1) (trans_lt (pred I) I N (minus1_less I) p4)).
inrange_pred_n : {N:tnum} pf (isNat N) -> pf (gt N zero) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) = [N:tnum] [p1:pf (isNat N)] [p2:pf (gt N zero)] inrange_i (pred N) N (isInt_pred_i N (and_e1 (isInt N) (geq N zero) p1)) (greater_greater_eq_minus1 N zero (and_e1 (isInt N) (geq N zero) p1) p_zero p2) (lesseq_minus1_e (pred N) N (eq->leq (pred N) (pred N) (refl num (pred N)))).
inrange_pred_n' : {N:tnum} pf (isNat (pred N)) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) = [N:tnum] [p1:pf (isNat (pred N))] cut (isNat (pred N)) (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) p1 ([x3:pf (isNat (pred N))] cut (isNat N) (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) (isNat_pred_e N p1) ([p2:pf (isNat N)] and_l (isInt (pred N)) (geq (pred N) zero) (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) p1 ([p3:pf (isInt (pred N))] [p4:pf (geq (pred N) zero)] cut (> N zero) (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) (gt_cong (succ (pred N)) N zero zero (succpred N) (refl num zero) (greater_plus1_i (pred N) zero p4)) ([p6:pf (gt N zero)] inrange_pred_n N p2 p6)))).
inrange_expand : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_e N I (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) p1 ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I N)] inrange_i I (succ N) p2 p3 (trans_lt I N (succ N) p4 (succ_greater N))).
inrange_offset : {M:tnum} {I:tnum} {N:tm num} pf (isInt M) -> pf (geq (plus I M) zero) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (plus N M)) (plus I M)) = [M:tnum] [I:tnum] [N:tm num] [p1:pf (isInt M)] [p2:pf (geq (plus I M) zero)] [p3:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_e N I (@ num form (@ num (shadowed_0 num) inrange (+ N M)) (plus I M)) p3 ([p4:pf (isInt I)] [p5:pf (geq I zero)] [p6:pf (lt I N)] inrange_i (plus I M) (+ N M) (closure_add I M p4 p1) p2 (gt_plus_cong1 N I M p6)).
inrange_offset_pred : {I:tnum} {N:tm num} pf (gt I zero) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) (pred I)) = [I:tnum] [N:tm num] [p1:pf (gt I zero)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_offset (neg one) I N (neg_exists one p_one) (lesseq_minus1_i zero I p_zero (inrange_e1 N I p2) p1) p2.
inrange_expand' : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) (succ I)) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_offset one I N p_one (gt->geq (succ I) zero (less_plus1_i zero I (inrange_e2 N I p1))) p1.
inrange_expand'n : {N:tm num} {I:tm num} {M:tnum} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (isNat M) -> pf (@ num form (@ num (shadowed_0 num) inrange (plus N M)) (plus I M)) = [N:tm num] [I:tm num] [M:tnum] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] [p1b:pf (isNat M)] inrange_offset M I N (isNat->isInt M p1b) (geq_zero_plus I M (inrange_e2 N I p1) (isNat->geq_zero M p1b)) p1.
inrange_expand2 : {N:tm num} {I:tm num} {M:tnum} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (leq N M) -> pf (@ num form (@ num (shadowed_0 num) inrange M) I) = [N:tm num] [I:tm num] [M:tnum] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] [p4:pf (leq N M)] inrange_e N I (@ num form (@ num (shadowed_0 num) inrange M) I) p2 ([p5:pf (isInt I)] [p6:pf (geq I zero)] [p7:pf (lt I N)] inrange_i I M p5 p6 (trans_lt_leq I N M p7 p4)).
inrange_trans : {K:tm num} {J:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange K) J) -> pf (@ num form (@ num (shadowed_0 num) inrange J) I) -> pf (@ num form (@ num (shadowed_0 num) inrange K) I) = [K:tm num] [J:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange K) J)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange J) I)] inrange_trans_succ K J I p1 (inrange_expand J I p2).
inrange_succ_not_inrange_pred : {N:tnum} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) (pred I))) -> pf (eq num I zero) = [N:tnum] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] [p2:pf (not (@ num form (@ num (shadowed_0 num) inrange N) (pred I)))] and3_l (isInt I) (geq I zero) (lt I (succ N)) (eq num I zero) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) (succ N) I p1) ([p11:pf (isInt I)] [p12:pf (geq I zero)] [p13:pf (lt I (succ N))] or_e (not (isInt (pred I))) (not (geq (pred I) zero and lt (pred I) N)) (eq num I zero) (demorgan_or_not (isInt (pred I)) (geq (pred I) zero and lt (pred I) N) (gdef2_e form num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N (pred I) ([Z:tm form] not Z) p2)) ([p3:pf (not (isInt (pred I)))] cut (isInt (plus I (neg one))) (eq num I zero) (closure_add I (neg one) p11 (neg_exists one p_one)) ([p31:pf (isInt (pred I))] false_e (eq num I zero) (not_e (isInt (pred I)) p3 p31))) ([p4:pf (not (geq (pred I) zero and lt (pred I) N))] or_e (not (geq (pred I) zero)) (not (lt (pred I) N)) (eq num I zero) (demorgan_or_not (geq (pred I) zero) (lt (pred I) N) p4) ([p5:pf (not (geq (pred I) zero))] cut (> one I) (eq num I zero) (not_geq_pred_gt I one p5) ([p51:pf (gt one I)] or_e (== num I zero) (> I zero) (eq num I zero) (greater_or_eq I zero p12) ([p6:pf (eq num I zero)] p6) ([p7:pf (gt I zero)] cut (>= I (succ zero)) (eq num I zero) (greatereq_plus1_i I zero p11 p_zero p7) ([p71:pf (geq I (succ zero))] cut (geq I one) (eq num I zero) (congr num one (+ zero one) ([Z:tm num] geq I Z) (symm num (+ zero one) one (zero_plus one)) p71) ([p72:pf (geq I one)] false_e (eq num I zero) (pf_greater_and_greatereq I one false p72 p51)))))) ([p8:pf (not (lt (pred I) N))] false_e (eq num I zero) (excluded_middle_x (<= N (- I one)) (gt_not_lt_eq N (- I one) (lt_succ_gt I N one p13)) p8)))).
not_inrange_n : {I:tm num} {N:tm num} pf (eq num I N) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) = [I:tm num] [N:tm num] [p1:pf (eq num I N)] not_i (@ num form (@ num (shadowed_0 num) inrange N) I) ([p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] cut (!= num I N) false (lt->neq I N (inrange_e3 N I p2)) ([p3:pf (not (eq num I N))] not_e (eq num I N) p3 p1)).
inrange_expand_not : {N:tnum} {I:tm num} pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) = [N:tnum] [I:tm num] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))] not_i (@ num form (@ num (shadowed_0 num) inrange N) I) ([p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] not_e (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) p1 (inrange_expand N I p2)).
not_inrange_geq : {N:tm num} {I:tm num} pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) -> pf (isNat I) -> pf (geq I N) = [N:tm num] [I:tm num] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange N) I))] [p2:pf (isNat I)] cut (not (isInt I and geq I zero and lt I N)) (geq I N) (gdef2_e form num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I ([z1:tm form] not z1) p1) ([p3:pf (not (isInt I and geq I zero and lt I N))] cut (not (isInt I) or not (geq I zero and lt I N)) (geq I N) (demorgan_or_not (isInt I) (geq I zero and lt I N) p3) ([p4:pf (not (isInt I) or not (geq I zero and lt I N))] cut (not (not (isInt I))) (geq I N) (equiv_e1 (isInt I) (not (not (isInt I))) (equiv_not_not (isInt I)) (and_e1 (isInt I) (geq I zero) p2)) ([p41:pf (not (not (isInt I)))] cut (not (geq I zero and lt I N)) (geq I N) (or_e2 (not (isInt I)) (not (geq I zero and lt I N)) p4 p41) ([p5:pf (not (geq I zero and lt I N))] cut (not (geq I zero) or not (lt I N)) (geq I N) (demorgan_or_not (geq I zero) (lt I N) p5) ([p6:pf (not (geq I zero) or not (lt I N))] cut (not (not (geq I zero))) (geq I N) (equiv_e1 (geq I zero) (not (not (geq I zero))) (equiv_not_not (geq I zero)) (and_e2 (isInt I) (geq I zero) p2)) ([p61:pf (not (not (geq I zero)))] cut (not (lt I N)) (geq I N) (or_e2 (not (geq I zero)) (not (lt I N)) p6 p61) ([p7:pf (not (lt I N))] equiv_e2 (geq I N) (not (not (geq I N))) (equiv_not_not (geq I N)) p7))))))).
inrange_shift : {N:tnum} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (not (eq num I zero)) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) = [N:tnum] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] [p2:pf (not (eq num I zero))] cut (> I zero) (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) (neq->geq->gt I zero p2 (inrange_e2 (succ N) I p1)) ([p3:pf (gt I zero)] cut (> (+ (succ N) (neg one)) (+ I (neg one))) (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) (lt_add_closure (succ N) I (neg one) (inrange_e3 (succ N) I p1)) ([p4:pf (lt (pred I) (pred (succ N)))] inrange_i (pred I) N (isInt_pred_i I (inrange_e1 (succ N) I p1)) (greater_greater_eq_minus1 I zero (inrange_e1 (succ N) I p1) p_zero p3) (congr num N (pred (succ N)) ([z1:tm num] lt (pred I) z1) (symm num (pred (succ N)) N (predsucc N)) p4))).
inrange_shift2 : {N:tnum} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (succ I)) = [N:tnum] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) I)] and3_l (isInt I) (geq I zero) (lt I (pred N)) (@ num form (@ num (shadowed_0 num) inrange N) (succ I)) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) (pred N) I p1) ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I (pred N))] inrange_i (succ I) N (isInt_succ_i I p2) (gt->geq (succ I) zero (trans_gt_geq (succ I) I zero (succ_gt I) p3)) (congr num N (succ (pred N)) ([z1:tm num] lt (succ I) z1) (symm num (succ (pred N)) N (succpred N)) (lt_add_closure (pred N) I one p4))).
not_inrange_zero1 : {N:tnum} pf (geq zero N) -> pf (forall num ([i1:tm num] not (@ num form (@ num (shadowed_0 num) inrange N) i1))) = [N:tnum] [p1:pf (geq zero N)] or_e (== num zero N) (> zero N) (forall num ([x3:tm num] not (@ num form (@ num (shadowed_0 num) inrange N) x3))) (greater_or_eq zero N p1) ([p2:pf (eq num zero N)] forall_i num ([x3:tm num] not (@ num form (@ num (shadowed_0 num) inrange N) x3)) ([i2:tm num] congr num N zero ([z1:tm num] not (@ num form (@ num (shadowed_0 num) inrange z1) i2)) (symm num zero N p2) (not_inrange_zero i2))) ([p3:pf (gt zero N)] forall_i num ([x3:tm num] not (@ num form (@ num (shadowed_0 num) inrange N) x3)) ([i3:tm num] suppose_not (not (@ num form (@ num (shadowed_0 num) inrange N) i3)) ([p4:pf (not (not (@ num form (@ num (shadowed_0 num) inrange N) i3)))] cut (@ num form (@ num (shadowed_0 num) inrange N) i3) false (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) i3) (not (not (@ num form (@ num (shadowed_0 num) inrange N) i3))) (equiv_not_not (@ num form (@ num (shadowed_0 num) inrange N) i3)) p4) ([p5:pf (@ num form (@ num (shadowed_0 num) inrange N) i3)] cut (not (<= zero N)) false (gt_not_lt_eq zero N p3) ([p6:pf (lt N zero)] cut (< i3 zero) false (trans_lt i3 N zero (inrange_e3 N i3 p5) p6) ([p7:pf (lt i3 zero)] pf_greater_and_greatereq i3 zero false (inrange_e2 N i3 p5) p7)))))).
not_inrange_zero2 : {N:tnum} {I:tm num} pf (isNat N) -> pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) -> pf (not (eq num I zero)) = [N:tnum] [I:tm num] [p1:pf (isNat N)] [p2:pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))] suppose_not (not (eq num I zero)) ([p3:pf (not (not (eq num I zero)))] cut (eq num I zero) false (equiv_e2 (eq num I zero) (not (not (eq num I zero))) (equiv_not_not (eq num I zero)) p3) ([p4:pf (eq num I zero)] cut (> (succ N) zero) false (trans_gt_geq (succ N) N zero (succ_gt N) (isNat->geq_zero N p1)) ([p5:pf (gt (succ N) zero)] cut (@ num form (@ num (shadowed_0 num) inrange (succ N)) zero) false (inrange_i zero (succ N) p_zero (eq->geq zero zero (refl num zero)) (gt_not_lt_eq (succ N) zero p5)) ([p6:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) zero)] cut (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) false (congr num I zero ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) z1) p4 p6) ([p7:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] not_e (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) p2 p7))))).
inrange_zero : {N:tnum} pf (gt N zero) -> pf (@ num form (@ num (shadowed_0 num) inrange N) zero) = [N:tnum] [p1:pf (gt N zero)] inrange_i zero N p_zero (ord_reflexivity zero) (gt_not_lt_eq N zero p1).
inrange_expand'_not : {N:tm num} {I:tm num} pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) -> pf (not (eq num (succ I) zero)) -> pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) (succ I))) = [N:tm num] [I:tm num] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange N) I))] [p2:pf (not (eq num (succ I) zero))] not_ei (@ num form (@ num (shadowed_0 num) inrange N) I) (@ num form (@ num (shadowed_0 num) inrange (succ N)) (succ I)) p1 ([p3:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) (succ I))] cut (> (succ I) zero) (@ num form (@ num (shadowed_0 num) inrange N) I) (neq->geq->gt (succ I) zero p2 (inrange_e2 (succ N) (succ I) p3)) ([p4:pf (gt (succ I) zero)] cut (>= (pred (succ I)) zero) (@ num form (@ num (shadowed_0 num) inrange N) I) (greater_greater_eq_minus1 (succ I) zero (inrange_e1 (succ N) (succ I) p3) p_zero p4) ([p5:pf (geq (pred (succ I)) zero)] cut (> (+ (succ N) (neg one)) (+ (succ I) (neg one))) (@ num form (@ num (shadowed_0 num) inrange N) I) (lt_add_closure (succ N) (succ I) (neg one) (inrange_e3 (succ N) (succ I) p3)) ([p6:pf (lt (pred (succ I)) (pred (succ N)))] inrange_i I N (isInt_succ_e I (inrange_e1 (succ N) (succ I) p3)) (congr num I (pred (succ I)) ([z1:tm num] geq z1 zero) (symm num (pred (succ I)) I (predsucc I)) p5) (congr num N (pred (succ N)) ([z2:tm num] lt I z2) (symm num (pred (succ N)) N (predsucc N)) (congr num I (pred (succ I)) ([z3:tm num] lt z3 (pred (succ N))) (symm num (pred (succ I)) I (predsucc I)) p6)))))).
inrange_plus_not : {B:tnum} {A:tnum} {I:tm num} pf (geq B zero) -> pf (not (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I)) -> pf (not (@ num form (@ num (shadowed_0 num) inrange A) I)) = [B:tnum] [A:tnum] [I:tm num] [p0:pf (geq B zero)] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I))] not_ei (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I) (@ num form (@ num (shadowed_0 num) inrange A) I) p1 ([p2:pf (@ num form (@ num (shadowed_0 num) inrange A) I)] inrange_i I (+ A B) (inrange_e1 A I p2) (inrange_e2 A I p2) (less_inc I A B (inrange_e3 A I p2) p0)).
inrange_shift' : {A:tnum} {B:tm num} {I:tnum} pf (isNat A) -> pf (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) -> pf (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) = [A:tnum] [B:tm num] [I:tnum] [p1:pf (isNat A)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange B) (minus I A))] cut (isInt (plus (minus I A) A)) (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (closure_add (minus I A) A (inrange_e1 B (minus I A) p2) (isNat->isInt A p1)) ([p3:pf (isInt (plus (minus I A) A))] cut (geq (plus (minus I A) A) (plus zero A)) (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (ord_add_closure (minus I A) zero A (inrange_e2 B (minus I A) p2)) ([p4:pf (geq (plus (minus I A) A) (plus zero A))] cut (geq (plus (minus I A) A) zero) (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (ord_transitivity (plus (minus I A) A) (plus zero A) zero p4 (congr num (+ zero A) A ([z1:tm num] geq z1 zero) (zero_plus A) (isNat->geq_zero A p1))) ([p5:pf (geq (plus (minus I A) A) zero)] cut (> (+ B A) (+ (minus I A) A)) (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (lt_add_closure B (minus I A) A (inrange_e3 B (minus I A) p2)) ([p6:pf (lt (plus (minus I A) A) (plus B A))] cut (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I) (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (inrange_i I (plus A B) (congr num I (+ (- I A) A) ([z2:tm num] isInt z2) (symm num (+ (- I A) A) I (cancel_a-b+b I A)) p3) (congr num I (+ (- I A) A) ([z3:tm num] geq z3 zero) (symm num (+ (- I A) A) I (cancel_a-b+b I A)) p5) (congr2 num num I (+ (- I A) A) (plus A B) (plus B A) ([z1:tm num] [z2:tm num] lt z1 z2) (symm num (+ (- I A) A) I (cancel_a-b+b I A)) (comm_add A B) p6)) ([p7:pf (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I)] congr num (plus B A) (plus A B) ([z4:tm num] @ num form (@ num (shadowed_0 num) inrange z4) I) (comm_add B A) p7))))).
inrange_shift'_not : {A:tnum} {B:tnum} {I:tm num} pf (isNat A) -> pf (not (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I)) -> pf (not (@ num form (@ num (shadowed_0 num) inrange B) (minus I A))) = [A:tnum] [B:tnum] [I:tm num] [p1:pf (isNat A)] [p2:pf (not (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I))] not_ei (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) p2 ([p3:pf (@ num form (@ num (shadowed_0 num) inrange B) (minus I A))] inrange_shift' A B I p1 p3).
inrange_shrink_not : {N:tnum} {I:tm num} pf (isInt N) -> pf (not (eq num I (pred N))) -> pf (not (@ num form (@ num (shadowed_0 num) inrange (pred N)) I)) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) = [N:tnum] [I:tm num] [p0:pf (isInt N)] [p2:pf (not (eq num I (pred N)))] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange (pred N)) I))] not_ei (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) (@ num form (@ num (shadowed_0 num) inrange N) I) p1 ([p3:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] cut (<= I (pred N)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) (lesseq_minus1_i I N (inrange_e1 N I p3) p0 (inrange_e3 N I p3)) ([p4:pf (leq I (pred N))] inrange_i I (pred N) (inrange_e1 N I p3) (inrange_e2 N I p3) (neq->leq->lt I (pred N) p2 p4))).
inrange_shrink' : {A:tnum} {I:tnum} {B:tnum} pf (isNat A) -> pf (not (lt I A)) -> pf (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I) -> pf (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) = [A:tnum] [I:tnum] [B:tnum] [p1:pf (isNat A)] [p2:pf (not (lt I A))] [p3:pf (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I)] cut (isInt (plus I (neg A))) (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) (closure_add I (neg A) (inrange_e1 (plus A B) I p3) (neg_exists A (isNat->isInt A p1))) ([p4:pf (isInt (minus I A))] cut (geq I A) (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) (equiv_e2 (geq I A) (not (not (geq I A))) (equiv_not_not (geq I A)) p2) ([p21:pf (geq I A)] cut (geq (minus I A) zero) (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) (congr num zero (- A A) ([z1:tm num] geq (minus I A) z1) (inv_add2 A) (greatereq_plus_cong2 I A (neg A) p21)) ([p5:pf (geq (minus I A) zero)] cut (lt (minus I A) B) (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) (congr num B (- (+ A B) A) ([z2:tm num] lt (minus I A) z2) (symm num (- (+ A B) A) B (cancel_a+b-a A B)) (lt_add_closure (plus A B) I (neg A) (inrange_e3 (plus A B) I p3))) ([p6:pf (lt (minus I A) B)] inrange_i (minus I A) B p4 p5 p6)))).
inrange_shrink : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (isInt N) -> pf (not (eq num I (pred N))) -> pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] [p2:pf (isInt N)] [p3:pf (not (eq num I (pred N)))] and3_l (isInt I) (geq I zero) (lt I N) (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I p1) ([p4:pf (isInt I)] [p5:pf (geq I zero)] [p6:pf (lt I N)] cut (<= I (pred N)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) (lesseq_minus1_i I N p4 p2 p6) ([p61:pf (leq I (pred N))] cut (< I (pred N)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) (neq->leq->lt I (pred N) p3 p61) ([p62:pf (lt I (pred N))] inrange_i I (pred N) p4 p5 p62))).
inrange_step' : {N:tnum} {I:tm num} pf (isInt N) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) -> pf (eq num I N or not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) = [N:tnum] [I:tm num] [p1:pf (isInt N)] [p2:pf (not (@ num form (@ num (shadowed_0 num) inrange N) I))] suppose_not (eq num I N or not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) ([q1:pf (not (eq num I N or not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)))] cut (not (eq num I N) and not (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))) false (demorgan_not_and (eq num I N) (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) q1) ([q2:pf (not (eq num I N) and not (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)))] cut (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) false (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) (not (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))) (equiv_not_not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) (and_e2 (not (eq num I N)) (not (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))) q2)) ([q3:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] cut (@ num form (@ num (shadowed_0 num) inrange (pred (succ N))) I) false (inrange_shrink (succ N) I q3 (isInt_succ_i N p1) (congr num (pred (succ N)) N ([z1:tm num] not (eq num I z1)) (predsucc N) (and_e1 (not (eq num I N)) (not (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))) q2))) ([q4:pf (@ num form (@ num (shadowed_0 num) inrange (pred (succ N))) I)] cut (@ num form (@ num (shadowed_0 num) inrange N) I) false (congr num N (pred (succ N)) ([z2:tm num] @ num form (@ num (shadowed_0 num) inrange z2) I) (symm num (pred (succ N)) N (predsucc N)) q4) ([q5:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] not_e (@ num form (@ num (shadowed_0 num) inrange N) I) p2 q5))))).
inrange_expand'' : {N':tnum} {N:tnum} {I:tm num} pf (geq N' N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange N') I) = [N':tnum] [N:tnum] [I:tm num] [p1:pf (geq N' N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_i I N' (inrange_e1 N I p2) (inrange_e2 N I p2) (trans_geq_gt N' N I p1 (inrange_e3 N I p2)).
leastn_hyp : (tm num -> tform) -> tm num -> tform = [f:tm num -> tform] [n:tm num] exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k) imp exists num ([i1:tm num] isNat i1 and f i1 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp not (f j))).
leastn_zero : {F:tm num -> tform} pf (leastn_hyp ([x3:tm num] F x3) zero) = [F:tm num -> tform] imp_i (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange zero) k and F k)) (exists num ([i1:tm num] isNat i1 and F i1 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp not (F j)))) ([p1:pf (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange zero) k and F k))] exists_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange zero) x3 and F x3) (exists num ([i2:tm num] isNat i2 and F i2 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i2) j imp not (F j)))) p1 ([k:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) inrange zero) k and F k)] and_l (@ num form (@ num (shadowed_0 num) inrange zero) k) (F k) (exists num ([i3:tm num] isNat i3 and F i3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i3) j imp not (F j)))) p2 ([p3:pf (@ num form (@ num (shadowed_0 num) inrange zero) k)] [x3:pf (F k)] false_e (exists num ([i4:tm num] isNat i4 and F i4 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i4) j imp not (F j)))) (not_e (@ num form (@ num (shadowed_0 num) inrange zero) k) (not_inrange_zero k) p3)))).
leastn_step : {f:tm num -> tform} {n:tnum} pf (isNat n) -> pf (leastn_hyp ([x3:tm num] f x3) n) -> pf (leastn_hyp ([x3:tm num] f x3) (succ n)) = [f:tm num -> tform] [n:tnum] [p1:pf (isNat n)] [p2:pf (leastn_hyp ([x3:tm num] f x3) n)] imp_i (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) k and f k)) (exists num ([i1:tm num] isNat i1 and f i1 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp not (f j)))) ([p3:pf (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) k and f k))] or_e (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k)) (not (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k))) (exists num ([i2:tm num] isNat i2 and f i2 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i2) j imp not (f j)))) (excluded_middle (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k))) ([p11:pf (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k))] imp_e (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k)) (exists num ([i3:tm num] isNat i3 and f i3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i3) j imp not (f j)))) p2 p11) ([p31:pf (not (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k)))] exists_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) x3 and f x3) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) p3 ([k:tm num] [p32:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) k and f k)] and_l (@ num form (@ num (shadowed_0 num) inrange (succ n)) k) (f k) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) p32 ([p33:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) k)] [p34:pf (f k)] cut (not (@ num form (@ num (shadowed_0 num) inrange n) k)) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) (not_i (@ num form (@ num (shadowed_0 num) inrange n) k) ([p35:pf (@ num form (@ num (shadowed_0 num) inrange n) k)] not_e (exists num ([k1:tm num] @ num form (@ num (shadowed_0 num) inrange n) k1 and f k1)) p31 (exists_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 and f x3) k (and_i (@ num form (@ num (shadowed_0 num) inrange n) k) (f k) p35 p34)))) ([p36:pf (not (@ num form (@ num (shadowed_0 num) inrange n) k))] cut (eq num k n or not (@ num form (@ num (shadowed_0 num) inrange (succ n)) k)) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) (inrange_step' n k (isNat->isInt n p1) p36) ([p37:pf (eq num k n or not (@ num form (@ num (shadowed_0 num) inrange (succ n)) k))] cut (eq num k n) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) (or_e1 (eq num k n) (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) k)) p37 (not_not_i (@ num form (@ num (shadowed_0 num) inrange (succ n)) k) p33)) ([p38:pf (eq num k n)] cut (f n) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) (congr num n k ([x3:tm num] f x3) (symm num k n p38) p34) ([p41:pf (f n)] cut (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 imp not (f x3))) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 imp not (f x3)) ([j:tm num] imp_i (@ num form (@ num (shadowed_0 num) inrange n) j) (not (f j)) ([p42:pf (@ num form (@ num (shadowed_0 num) inrange n) j)] not_i (f j) ([p43:pf (f j)] not_e (exists num ([k2:tm num] @ num form (@ num (shadowed_0 num) inrange n) k2 and f k2)) p31 (exists_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 and f x3) j (and_i (@ num form (@ num (shadowed_0 num) inrange n) j) (f j) p42 p43)))))) ([p45:pf (forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange n) j imp not (f j)))] exists_i num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j))) n (and3_i (isNat n) (f n) (forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange n) j imp not (f j))) p1 p41 p45)))))))))).
leastn : {N:tnum} {f:tnum -> tform} pf (isNat N) -> pf (f N) -> pf (exists num ([i1:tm num] isNat i1 and f i1 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp not (f j)))) = [N:tnum] [f:tnum -> tform] [p1:pf (isNat N)] [p2:pf (f N)] cut (leastn_hyp ([x3:tm num] f x3) (succ N)) (exists num ([i2:tm num] isNat i2 and f i2 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i2) j imp not (f j)))) (forall_imp_e num ([a:tm num] isNat a) ([a:tm num] leastn_hyp ([x3:tm num] f x3) a) (induction ([x3:tnum] leastn_hyp ([x4:tm num] f x4) x3) (leastn_zero ([x3:tm num] f x3)) ([n:tnum] [x3:pf (isNat n)] [x4:pf (leastn_hyp ([x4:tm num] f x4) n)] leastn_step ([x5:tm num] f x5) n x3 x4)) (succ N) (isNat_succ_i N p1)) ([p3:pf (leastn_hyp ([x3:tm num] f x3) (succ N))] cut (exists num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) x3 and f x3)) (exists num ([i3:tm num] isNat i3 and f i3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i3) j imp not (f j)))) (exists_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) x3 and f x3) N (and_i (@ num form (@ num (shadowed_0 num) inrange (succ N)) N) (f N) (inrange_succ_n N p1) p2)) ([p4:pf (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) k and f k))] imp_e (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) k and f k)) (exists num ([i4:tm num] isNat i4 and f i4 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i4) j imp not (f j)))) p3 p4)).
subset : {T:tp} tm (rel (shadowed_0 T) (shadowed_0 T)) = [T:tp] _subset T.
set_equiv : {T:tp} tm (eqrel (shadowed_0 T)) = [T:tp] _set_equiv T.
subset_i : {T:tp} {S1:tm (T arrow form)} {S2:tm (T arrow form)} ({x3:tm T} pf (@ T form S1 x3) -> pf (@ T form S2 x3)) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) S2) = [T:tp] [S1:tm (T arrow form)] [S2:tm (T arrow form)] [q1:{x4:tm T} pf (@ T form S1 x4) -> pf (@ T form S2 x4)] def2_i (shadowed_0 T) (shadowed_0 T) ([x3:tm (shadowed_0 T)] [x4:tm (shadowed_0 T)] _forall T ([x5:tm T] _@ T form x3 x5 imp _@ T form x4 x5)) S1 S2 (forall_imp_i T ([x6:tm T] @ T form S1 x6) ([x3:tm T] @ T form S2 x3) ([x7:tm T] [p1:pf (@ T form S1 x7)] q1 x7 p1)).
subset_e : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {X:tm X1} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2) -> pf (@ X1 form S1 X) -> pf (@ X1 form S2 X) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [X:tm X1] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2)] [p2:pf (@ X1 form S1 X)] forall_imp_e X1 ([a:tm X1] _@ X1 form S1 a) ([a:tm X1] _@ X1 form S2 a) (def2_e (shadowed_0 X1) (shadowed_0 X1) ([x3:tm (shadowed_0 X1)] [x4:tm (shadowed_0 X1)] _forall X1 ([x5:tm X1] _@ X1 form x3 x5 imp _@ X1 form x4 x5)) S1 S2 p1) X p2.
set_equiv_i : {T:tp} {S1:tm (T arrow form)} {S2:tm (T arrow form)} pf (forall T ([x3:tm T] @ T form S1 x3 equiv @ T form S2 x3)) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S2) = [T:tp] [S1:tm (T arrow form)] [S2:tm (T arrow form)] [p1:pf (forall T ([x4:tm T] @ T form S1 x4 equiv @ T form S2 x4))] def2_i (shadowed_0 T) (shadowed_0 T) ([x3:tm (shadowed_0 T)] [x4:tm (shadowed_0 T)] _@2 (shadowed_0 T) (shadowed_0 T) form (_subset T) x3 x4 and _@2 (shadowed_0 T) (shadowed_0 T) form (_subset T) x4 x3) S1 S2 (and_i (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) S2) (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S2) S1) (subset_i T S1 S2 ([x5:tm T] [p2:pf (@ T form S1 x5)] equiv_e1 (@ T form S1 x5) (@ T form S2 x5) (forall_e T ([x3:tm T] @ T form S1 x3 equiv @ T form S2 x3) p1 x5) p2)) (subset_i T S2 S1 ([x6:tm T] [p2:pf (@ T form S2 x6)] equiv_e2 (@ T form S1 x6) (@ T form S2 x6) (forall_e T ([x3:tm T] @ T form S1 x3 equiv @ T form S2 x3) p1 x6) p2))).
set_equiv_i1 : {T:tp} {S1:tm (T arrow form)} {S2:tm (T arrow form)} ({x3:tm T} pf (@ T form S1 x3 equiv @ T form S2 x3)) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S2) = [T:tp] [S1:tm (T arrow form)] [S2:tm (T arrow form)] [p1:{x4:tm T} pf (@ T form S1 x4 equiv @ T form S2 x4)] set_equiv_i T S1 S2 (forall_i T ([x3:tm T] @ T form S1 x3 equiv @ T form S2 x3) ([a:tm T] p1 a)).
set_equiv_i2 : {T:tp} {S1:tm (T arrow form)} {S2:tm (T arrow form)} ({x3:tm T} pf (@ T form S1 x3) -> pf (@ T form S2 x3)) -> ({x4:tm T} pf (@ T form S2 x4) -> pf (@ T form S1 x4)) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S2) = [T:tp] [S1:tm (T arrow form)] [S2:tm (T arrow form)] [q1:{x5:tm T} pf (@ T form S1 x5) -> pf (@ T form S2 x5)] [q2:{x6:tm T} pf (@ T form S2 x6) -> pf (@ T form S1 x6)] set_equiv_i T S1 S2 (forall_i T ([x3:tm T] @ T form S1 x3 equiv @ T form S2 x3) ([x7:tm T] equiv_i (@ T form S1 x7) (@ T form S2 x7) (imp_i (@ T form S1 x7) (@ T form S2 x7) ([p1:pf (@ T form S1 x7)] imp_e (@ T form S1 x7) (@ T form S2 x7) (imp_i (@ T form S1 x7) (@ T form S2 x7) ([x3:pf (@ T form S1 x7)] q1 x7 x3)) p1)) (imp_i (@ T form S2 x7) (@ T form S1 x7) ([p1:pf (@ T form S2 x7)] imp_e (@ T form S2 x7) (@ T form S1 x7) (imp_i (@ T form S2 x7) (@ T form S1 x7) ([x3:pf (@ T form S2 x7)] q2 x7 x3)) p1)))).
set_equiv_i3 : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S1) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2)] [p4:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S1)] set_equiv_i2 X1 S1 S2 ([x3:tm X1] [p6:pf (@ X1 form S1 x3)] subset_e X1 S1 S2 x3 p2 p6) ([x4:tm X1] [p6:pf (@ X1 form S2 x4)] subset_e X1 S2 S1 x4 p4 p6).
set_equiv_e : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {X:tm X1} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) -> pf (@ X1 form S1 X equiv @ X1 form S2 X) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [X:tm X1] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2)] and_l (_@2 (shadowed_0 X1) (shadowed_0 X1) form (_subset X1) S1 S2) (_@2 (shadowed_0 X1) (shadowed_0 X1) form (_subset X1) S2 S1) (@ X1 form S1 X equiv @ X1 form S2 X) (def2_e (shadowed_0 X1) (shadowed_0 X1) ([x3:tm (shadowed_0 X1)] [x4:tm (shadowed_0 X1)] _@2 (shadowed_0 X1) (shadowed_0 X1) form (_subset X1) x3 x4 and _@2 (shadowed_0 X1) (shadowed_0 X1) form (_subset X1) x4 x3) S1 S2 p1) ([p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2)] [p3:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S1)] equiv_i (@ X1 form S1 X) (@ X1 form S2 X) (imp_i (@ X1 form S1 X) (@ X1 form S2 X) ([p4:pf (@ X1 form S1 X)] subset_e X1 S1 S2 X p2 p4)) (imp_i (@ X1 form S2 X) (@ X1 form S1 X) ([p4:pf (@ X1 form S2 X)] subset_e X1 S2 S1 X p3 p4))).
set_equiv_e1 : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {X:tm X1} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) -> pf (@ X1 form S1 X) -> pf (@ X1 form S2 X) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [X:tm X1] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2)] [p2:pf (@ X1 form S1 X)] equiv_e1 (@ X1 form S1 X) (@ X1 form S2 X) (set_equiv_e X1 S1 S2 X p1) p2.
set_equiv_e2 : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {X:tm X1} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) -> pf (@ X1 form S2 X) -> pf (@ X1 form S1 X) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [X:tm X1] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2)] [p2:pf (@ X1 form S2 X)] equiv_e2 (@ X1 form S1 X) (@ X1 form S2 X) (set_equiv_e X1 S1 S2 X p1) p2.
domain : {T1:tp} {T2:tp} tm (rel (rel T1 T2) T1) = [T1:tp] [T2:tp] lam2 (T1 arrow T2 arrow form) T1 form ([r:tm (T1 arrow T2 arrow form)] [x3:tm T1] exists T2 ([y:tm T2] @ T2 form (@ T1 (T2 arrow form) r x3) y)).
subrel : {T:tp} {U:tp} tm (rel (rel T U) (rel T U)) = [T:tp] [U:tp] lam2 (T arrow U arrow form) (T arrow U arrow form) form ([f:tm (T arrow U arrow form)] [g:tm (T arrow U arrow form)] forall2 T U ([s:tm T] [s':tm U] @ U form (@ T (U arrow form) f s) s' imp @ U form (@ T (U arrow form) g s) s')).
emptyrel : {T:tp} {U:tp} tm (rel T U) = [T:tp] [U:tp] lam2 T U form ([x3:tm T] [y:tm U] false).
rel_union : {T:tp} {U:tp} tm (2ary (rel T U)) = [T:tp] [U:tp] lam2 (T arrow U arrow form) (T arrow U arrow form) (T arrow U arrow form) ([f:tm (T arrow U arrow form)] [g:tm (T arrow U arrow form)] lam2 T U form ([x3:tm T] [y:tm U] @ U form (@ T (U arrow form) f x3) y or @ U form (@ T (U arrow form) g x3) y)).
rel_intersect : {T:tp} {U:tp} tm (2ary (rel T U)) = [T:tp] [U:tp] lam2 (T arrow U arrow form) (T arrow U arrow form) (T arrow U arrow form) ([f:tm (T arrow U arrow form)] [g:tm (T arrow U arrow form)] lam2 T U form ([x3:tm T] [y:tm U] @ U form (@ T (U arrow form) f x3) y and @ U form (@ T (U arrow form) g x3) y)).
reflexive : {T:tp} tm (shadowed_0 (rel T T)) = [T:tp] lam (T arrow T arrow form) form ([r:tm (T arrow T arrow form)] forall T ([x3:tm T] @ T form (@ T (T arrow form) r x3) x3)).
symmetric : {T:tp} tm (shadowed_0 (rel T T)) = [T:tp] lam (T arrow T arrow form) form ([r:tm (T arrow T arrow form)] forall2 T T ([x3:tm T] [y:tm T] @ T form (@ T (T arrow form) r x3) y imp @ T form (@ T (T arrow form) r y) x3)).
transitive : {T:tp} tm (shadowed_0 (rel T T)) = [T:tp] lam (T arrow T arrow form) form ([r:tm (T arrow T arrow form)] forall3 T T T ([x3:tm T] [y:tm T] [z1:tm T] @ T form (@ T (T arrow form) r x3) y imp @ T form (@ T (T arrow form) r y) z1 imp @ T form (@ T (T arrow form) r x3) z1)).
domain_i : {X1:tp} {X2:tp} {R:tm (X2 arrow X1 arrow form)} {X:tm X2} {Y:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) R X) Y) -> pf (@ X2 form (@ (rel X2 X1) (shadowed_0 X2) (domain X2 X1) R) X) = [X1:tp] [X2:tp] [R:tm (X2 arrow X1 arrow form)] [X:tm X2] [Y:tm X1] [p1:pf (@ X1 form (@ X2 (X1 arrow form) R X) Y)] def2_i (rel X2 X1) X2 ([x3:tm (rel X2 X1)] [x4:tm X2] exists X1 ([y:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x4) y)) R X (exists_i X1 ([x3:tm X1] @ X1 form (@ X2 (X1 arrow form) R X) x3) Y p1).
domain_e : {X1:tp} {X2:tp} {R:tm (rel X1 X2)} {X:tm X1} {A:tform} pf (@ X1 form (@ (rel X1 X2) (shadowed_0 X1) (domain X1 X2) R) X) -> ({y:tm X2} pf (@ X2 form (@ X1 (shadowed_0 X2) R X) y) -> pf A) -> pf A = [X1:tp] [X2:tp] [R:tm (rel X1 X2)] [X:tm X1] [A:tform] [p2:pf (@ X1 form (@ (rel X1 X2) (shadowed_0 X1) (domain X1 X2) R) X)] [p4:{y:tm X2} pf (@ X2 form (@ X1 (shadowed_0 X2) R X) y) -> pf A] exists_e X2 ([x3:tm X2] @ X2 form (@ X1 (X2 arrow form) R X) x3) A (def2_e X1 (rel X1 X2) ([x3:tm (rel X1 X2)] [x4:tm X1] exists X2 ([y:tm X2] @ X2 form (@ X1 (X2 arrow form) x3 x4) y)) R X p2) ([y:tm X2] [p6:pf (@ X2 form (@ X1 (X2 arrow form) R X) y)] p4 y p6).
reflexive_lemma : {T:tp} tm (rel T T) -> tm T -> type = [T:tp] [r:tm (rel T T)] [x3:tm T] pf (@ T form (@ T (shadowed_0 T) r x3) x3).
reflexive_i : {T:tp} {R:tm (rel T T)} ({x3:tm T} reflexive_lemma T R x3) -> pf (@ (rel T T) form (reflexive T) R) = [T:tp] [R:tm (rel T T)] [q1:{x4:tm T} reflexive_lemma T R x4] def1_i (rel T T) ([x3:tm (rel T T)] forall T ([x5:tm T] @ T form (@ T (T arrow form) x3 x5) x5)) R (forall_i T ([x3:tm T] @ T form (@ T (shadowed_0 T) R x3) x3) ([a:tm T] q1 a)).
reflexive_e : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} pf (@ (rel X1 X1) form (reflexive X1) R) -> reflexive_lemma X1 R X = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [p1:pf (@ (rel X1 X1) form (reflexive X1) R)] forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) R x3) x3) (def1_e (rel X1 X1) ([x3:tm (rel X1 X1)] forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x4) x4)) R p1) X.
symmetric_lemma : {T:tp} tm (rel T T) -> tm T -> tm T -> type = [T:tp] [r:tm (rel T T)] [x3:tm T] [x4:tm T] pf (@ T form (@ T (shadowed_0 T) r x3) x4) -> pf (@ T form (@ T (shadowed_0 T) r x4) x3).
symmetric_i : {T:tp} {R:tm (rel T T)} ({x3:tm T} {y:tm T} symmetric_lemma T R x3 y) -> pf (@ (rel T T) form (symmetric T) R) = [T:tp] [R:tm (rel T T)] [q1:{x4:tm T} {y:tm T} symmetric_lemma T R x4 y] def1_i (rel T T) ([x3:tm (rel T T)] forall2 T T ([x5:tm T] [y:tm T] @ T form (@ T (T arrow form) x3 x5) y imp @ T form (@ T (T arrow form) x3 y) x5)) R (forall2_imp_i T T ([x3:tm T] [x4:tm T] @ T form (@ T (shadowed_0 T) R x3) x4) ([x3:tm T] [x4:tm T] @ T form (@ T (shadowed_0 T) R x4) x3) ([x3:tm T] [x4:tm T] [x5:pf (@ T form (@ T (shadowed_0 T) R x3) x4)] q1 x3 x4 x5)).
symmetric_e : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (@ (rel X1 X1) form (symmetric X1) R) -> symmetric_lemma X1 R X Y = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (rel X1 X1) form (symmetric X1) R)] [x3:pf (@ X1 form (@ X1 (X1 arrow form) R X) Y)] forall2_imp_e X1 X1 ([x4:tm X1] [y:tm X1] @ X1 form (@ X1 (X1 arrow form) R x4) y) ([x5:tm X1] [y:tm X1] @ X1 form (@ X1 (X1 arrow form) R y) x5) (def1_e (rel X1 X1) ([x4:tm (rel X1 X1)] forall2 X1 X1 ([x6:tm X1] [y:tm X1] @ X1 form (@ X1 (X1 arrow form) x4 x6) y imp @ X1 form (@ X1 (X1 arrow form) x4 y) x6)) R p1) X Y x3.
transitive_lemma : {T:tp} tm (rel T T) -> tm T -> tm T -> tm T -> type = [T:tp] [r:tm (rel T T)] [x3:tm T] [x4:tm T] [x5:tm T] pf (@ T form (@ T (shadowed_0 T) r x3) x4) -> pf (@ T form (@ T (shadowed_0 T) r x4) x5) -> pf (@ T form (@ T (shadowed_0 T) r x3) x5).
transitive_i : {T:tp} {R:tm (rel T T)} ({x3:tm T} {y:tm T} {z1:tm T} transitive_lemma T R x3 y z1) -> pf (@ (rel T T) form (transitive T) R) = [T:tp] [R:tm (rel T T)] [q1:{x4:tm T} {y:tm T} {z2:tm T} transitive_lemma T R x4 y z2] def1_i (rel T T) ([x3:tm (rel T T)] forall3 T T T ([x5:tm T] [y:tm T] [z3:tm T] @ T form (@ T (T arrow form) x3 x5) y imp @ T form (@ T (T arrow form) x3 y) z3 imp @ T form (@ T (T arrow form) x3 x5) z3)) R (forall3_imp2_i T T T ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x3) x4) ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x4) x5) ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x3) x5) ([x3:tm T] [x4:tm T] [x5:tm T] [x6:pf (@ T form (@ T (shadowed_0 T) R x3) x4)] [x7:pf (@ T form (@ T (shadowed_0 T) R x4) x5)] q1 x3 x4 x5 x6 x7)).
transitive_e : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (@ (rel X1 X1) form (transitive X1) R) -> transitive_lemma X1 R X Y Z = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [p1:pf (@ (rel X1 X1) form (transitive X1) R)] [x3:pf (@ X1 form (@ X1 (X1 arrow form) R X) Y)] [x4:pf (@ X1 form (@ X1 (X1 arrow form) R Y) Z)] forall3_imp2_e X1 X1 X1 ([x5:tm X1] [y:tm X1] [z1:tm X1] @ X1 form (@ X1 (X1 arrow form) R x5) y) ([x6:tm X1] [y:tm X1] [z2:tm X1] @ X1 form (@ X1 (X1 arrow form) R y) z2) ([x7:tm X1] [y:tm X1] [z3:tm X1] @ X1 form (@ X1 (X1 arrow form) R x7) z3) (def1_e (rel X1 X1) ([x5:tm (rel X1 X1)] forall3 X1 X1 X1 ([x8:tm X1] [y:tm X1] [z4:tm X1] @ X1 form (@ X1 (X1 arrow form) x5 x8) y imp @ X1 form (@ X1 (X1 arrow form) x5 y) z4 imp @ X1 form (@ X1 (X1 arrow form) x5 x8) z4)) R p1) X Y Z x3 x4.
subrel_i : {X1:tp} {X2:tp} {F:tm (X1 arrow X2 arrow form)} {G:tm (X1 arrow X2 arrow form)} ({x3:tm X1} {y:tm X2} pf (@ X2 form (@ X1 (X2 arrow form) F x3) y) -> pf (@ X2 form (@ X1 (X2 arrow form) G x3) y)) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) G) = [X1:tp] [X2:tp] [F:tm (X1 arrow X2 arrow form)] [G:tm (X1 arrow X2 arrow form)] [p1:{x4:tm X1} {y:tm X2} pf (@ X2 form (@ X1 (X2 arrow form) F x4) y) -> pf (@ X2 form (@ X1 (X2 arrow form) G x4) y)] def2_i (rel X1 X2) (rel X1 X2) ([x3:tm (rel X1 X2)] [x4:tm (rel X1 X2)] forall2 X1 X2 ([s:tm X1] [s':tm X2] @ X2 form (@ X1 (X2 arrow form) x3 s) s' imp @ X2 form (@ X1 (X2 arrow form) x4 s) s')) F G (forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] @ X2 form (@ X1 (X2 arrow form) F x3) x4 imp @ X2 form (@ X1 (X2 arrow form) G x3) x4) ([x5:tm X1] [y:tm X2] imp_i (@ X2 form (@ X1 (X2 arrow form) F x5) y) (@ X2 form (@ X1 (X2 arrow form) G x5) y) ([p2:pf (@ X2 form (@ X1 (X2 arrow form) F x5) y)] p1 x5 y p2))).
subrel_e : {X1:tp} {X2:tp} {F:tm (rel X1 X2)} {G:tm (rel X1 X2)} {X:tm X1} {Y:tm X2} pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) G) -> pf (@ X2 form (@ X1 (shadowed_0 X2) F X) Y) -> pf (@ X2 form (@ X1 (shadowed_0 X2) G X) Y) = [X1:tp] [X2:tp] [F:tm (rel X1 X2)] [G:tm (rel X1 X2)] [X:tm X1] [Y:tm X2] [p1:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) G)] [p2:pf (@ X2 form (@ X1 (shadowed_0 X2) F X) Y)] imp_e (@ X2 form (@ X1 (X2 arrow form) F X) Y) (@ X2 form (@ X1 (X2 arrow form) G X) Y) (forall2_e X1 X2 ([x3:tm X1] [x4:tm X2] @ X2 form (@ X1 (X2 arrow form) F x3) x4 imp @ X2 form (@ X1 (X2 arrow form) G x3) x4) (def2_e (rel X1 X2) (rel X1 X2) ([x3:tm (rel X1 X2)] [x4:tm (rel X1 X2)] forall2 X1 X2 ([s:tm X1] [s':tm X2] @ X2 form (@ X1 (X2 arrow form) x3 s) s' imp @ X2 form (@ X1 (X2 arrow form) x4 s) s')) F G p1) X Y) p2.
subrel_refl : {X1:tp} {X2:tp} {F:tm (rel X1 X2)} pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) F) = [X1:tp] [X2:tp] [F:tm (rel X1 X2)] subrel_i X1 X2 F F ([x3:tm X1] [y:tm X2] [p1:pf (@ X2 form (@ X1 (X2 arrow form) F x3) y)] p1).
subrel_trans : {X1:tp} {X2:tp} {F:tm (rel X1 X2)} {G:tm (rel X1 X2)} {H:tm (rel X1 X2)} pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) G) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) G) H) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) H) = [X1:tp] [X2:tp] [F:tm (rel X1 X2)] [G:tm (rel X1 X2)] [H:tm (rel X1 X2)] [p1:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) G)] [p2:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) G) H)] subrel_i X1 X2 F H ([x3:tm X1] [y:tm X2] [p3:pf (@ X2 form (@ X1 (shadowed_0 X2) F x3) y)] subrel_e X1 X2 G H x3 y p2 (subrel_e X1 X2 F G x3 y p1 p3)).
rel_intersect_i : {X1:tp} {X2:tp} {F:tm (X2 arrow X1 arrow form)} {X:tm X2} {Y:tm X1} {G:tm (X2 arrow X1 arrow form)} pf (@ X1 form (@ X2 (X1 arrow form) F X) Y) -> pf (@ X1 form (@ X2 (X1 arrow form) G X) Y) -> pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_intersect X2 X1) F) G) X) Y) = [X1:tp] [X2:tp] [F:tm (X2 arrow X1 arrow form)] [X:tm X2] [Y:tm X1] [G:tm (X2 arrow X1 arrow form)] [p1:pf (@ X1 form (@ X2 (X1 arrow form) F X) Y)] [p2:pf (@ X1 form (@ X2 (X1 arrow form) G X) Y)] def4_i (rel X2 X1) (rel X2 X1) X2 X1 ([x3:tm (rel X2 X1)] [x4:tm (rel X2 X1)] [x5:tm X2] [x6:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x5) x6 and @ X1 form (@ X2 (X1 arrow form) x4 x5) x6) F G X Y (and_i (@ X1 form (@ X2 (X1 arrow form) F X) Y) (@ X1 form (@ X2 (X1 arrow form) G X) Y) p1 p2).
rel_intersect_e1 : {X1:tp} {X2:tp} {F:tm (rel X2 X1)} {G:tm (rel X2 X1)} {X:tm X2} {Y:tm X1} pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_intersect X2 X1) F) G) X) Y) -> pf (@ X1 form (@ X2 (shadowed_0 X1) F X) Y) = [X1:tp] [X2:tp] [F:tm (rel X2 X1)] [G:tm (rel X2 X1)] [X:tm X2] [Y:tm X1] [p1:pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_intersect X2 X1) F) G) X) Y)] and_e1 (@ X1 form (@ X2 (X1 arrow form) F X) Y) (@ X1 form (@ X2 (X1 arrow form) G X) Y) (def4_e X1 X2 (rel X2 X1) (rel X2 X1) ([x3:tm (rel X2 X1)] [x4:tm (rel X2 X1)] [x5:tm X2] [x6:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x5) x6 and @ X1 form (@ X2 (X1 arrow form) x4 x5) x6) F G X Y p1).
rel_intersect_e2 : {X1:tp} {X2:tp} {F:tm (rel X2 X1)} {G:tm (rel X2 X1)} {X:tm X2} {Y:tm X1} pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_intersect X2 X1) F) G) X) Y) -> pf (@ X1 form (@ X2 (shadowed_0 X1) G X) Y) = [X1:tp] [X2:tp] [F:tm (rel X2 X1)] [G:tm (rel X2 X1)] [X:tm X2] [Y:tm X1] [p1:pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_intersect X2 X1) F) G) X) Y)] and_e2 (@ X1 form (@ X2 (X1 arrow form) F X) Y) (@ X1 form (@ X2 (X1 arrow form) G X) Y) (def4_e X1 X2 (rel X2 X1) (rel X2 X1) ([x3:tm (rel X2 X1)] [x4:tm (rel X2 X1)] [x5:tm X2] [x6:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x5) x6 and @ X1 form (@ X2 (X1 arrow form) x4 x5) x6) F G X Y p1).
rel_union_i1 : {X1:tp} {X2:tp} {F:tm (X2 arrow X1 arrow form)} {X:tm X2} {Y:tm X1} {G:tm (rel X2 X1)} pf (@ X1 form (@ X2 (X1 arrow form) F X) Y) -> pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_union X2 X1) F) G) X) Y) = [X1:tp] [X2:tp] [F:tm (X2 arrow X1 arrow form)] [X:tm X2] [Y:tm X1] [G:tm (rel X2 X1)] [p1:pf (@ X1 form (@ X2 (X1 arrow form) F X) Y)] def4_i (rel X2 X1) (rel X2 X1) X2 X1 ([x3:tm (rel X2 X1)] [x4:tm (rel X2 X1)] [x5:tm X2] [x6:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x5) x6 or @ X1 form (@ X2 (X1 arrow form) x4 x5) x6) F G X Y (or_i1 (@ X1 form (@ X2 (X1 arrow form) F X) Y) (@ X1 form (@ X2 (X1 arrow form) G X) Y) p1).
rel_union_i2 : {X1:tp} {X2:tp} {G:tm (X2 arrow X1 arrow form)} {X:tm X2} {Y:tm X1} {F:tm (rel X2 X1)} pf (@ X1 form (@ X2 (X1 arrow form) G X) Y) -> pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_union X2 X1) F) G) X) Y) = [X1:tp] [X2:tp] [G:tm (X2 arrow X1 arrow form)] [X:tm X2] [Y:tm X1] [F:tm (rel X2 X1)] [p1:pf (@ X1 form (@ X2 (X1 arrow form) G X) Y)] def4_i (rel X2 X1) (rel X2 X1) X2 X1 ([x3:tm (rel X2 X1)] [x4:tm (rel X2 X1)] [x5:tm X2] [x6:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x5) x6 or @ X1 form (@ X2 (X1 arrow form) x4 x5) x6) F G X Y (or_i2 (@ X1 form (@ X2 (X1 arrow form) G X) Y) (@ X1 form (@ X2 (X1 arrow form) F X) Y) p1).
rel_union_e : {X1:tp} {X2:tp} {F:tm (rel X2 X1)} {G:tm (rel X2 X1)} {X:tm X2} {Y:tm X1} {A:tform} pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_union X2 X1) F) G) X) Y) -> (pf (@ X1 form (@ X2 (shadowed_0 X1) F X) Y) -> pf A) -> (pf (@ X1 form (@ X2 (shadowed_0 X1) G X) Y) -> pf A) -> pf A = [X1:tp] [X2:tp] [F:tm (rel X2 X1)] [G:tm (rel X2 X1)] [X:tm X2] [Y:tm X1] [A:tform] [p1:pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_union X2 X1) F) G) X) Y)] [x3:pf (@ X1 form (@ X2 (X1 arrow form) F X) Y) -> pf A] [x4:pf (@ X1 form (@ X2 (X1 arrow form) G X) Y) -> pf A] or_e (@ X1 form (@ X2 (X1 arrow form) F X) Y) (@ X1 form (@ X2 (X1 arrow form) G X) Y) A (def4_e X1 X2 (rel X2 X1) (rel X2 X1) ([x5:tm (rel X2 X1)] [x6:tm (rel X2 X1)] [x7:tm X2] [x8:tm X1] @ X1 form (@ X2 (X1 arrow form) x5 x7) x8 or @ X1 form (@ X2 (X1 arrow form) x6 x7) x8) F G X Y p1) ([x5:pf (@ X1 form (@ X2 (X1 arrow form) F X) Y)] x3 x5) ([x5:pf (@ X1 form (@ X2 (X1 arrow form) G X) Y)] x4 x5).
eq++ : {Ta:tp} {Tb:tp} tm (shadowed_0 Ta arrow eqrel Ta arrow eqrel Tb arrow eqrel (Ta arrow Tb)) = [Ta:tp] [Tb:tp] lam3 (Ta arrow form) (Ta arrow Ta arrow form) (Tb arrow Tb arrow form) ((Ta arrow Tb) arrow (Ta arrow Tb) arrow form) ([sa:tm (Ta arrow form)] [eq_a:tm (Ta arrow Ta arrow form)] [eq_b:tm (Tb arrow Tb arrow form)] lam2 (Ta arrow Tb) (Ta arrow Tb) form ([f:tm (Ta arrow Tb)] [g:tm (Ta arrow Tb)] forall2 Ta Ta ([x3:tm Ta] [y:tm Ta] @ Ta form sa x3 imp @ Ta form sa y imp @ Ta form (@ Ta (Ta arrow form) eq_a x3) y imp @ Tb form (@ Tb (Tb arrow form) eq_b (@ Ta Tb f x3)) (@ Ta Tb f y) imp @ Tb form (@ Tb (Tb arrow form) eq_b (@ Ta Tb g x3)) (@ Ta Tb g y) imp @ Tb form (@ Tb (Tb arrow form) eq_b (@ Ta Tb f x3)) (@ Ta Tb g y)))).
eq+ : {Ta:tp} {Tb:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel (Ta arrow Tb)) = [Ta:tp] [Tb:tp] @ (shadowed_0 Ta) (eqrel Ta arrow eqrel Tb arrow eqrel (Ta arrow Tb)) (eq++ Ta Tb) (lam Ta form ([x3:tm Ta] true)).
eq_x : {T:tp} tm (eqrel T) = [T:tp] lam2 T T form ([x3:tm T] [x4:tm T] eq T x3 x4).
eq_rel : {Ta:tp} {Tb:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel (rel Ta Tb)) = [Ta:tp] [Tb:tp] lam2 (eqrel Ta) (eqrel Tb) (eqrel (Ta arrow Tb arrow form)) ([H1:tm (eqrel Ta)] [H2:tm (eqrel Tb)] @ (eqrel (Tb arrow form)) (eqrel (Ta arrow Tb arrow form)) (@ (eqrel Ta) (eqrel (Tb arrow form) arrow eqrel (Ta arrow Tb arrow form)) (eq+ Ta (Tb arrow form)) H1) (@ (eqrel form) (eqrel (Tb arrow form)) (@ (eqrel Tb) (eqrel form arrow eqrel (Tb arrow form)) (eq+ Tb form) H2) eq_form)).
rel_refl : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} pf (@ (rel X1 X1) form (reflexive X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) X) = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [x3:pf (@ (rel X1 X1) form (reflexive X1) R)] reflexive_e X1 R X x3.
rel_symm : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (@ (rel X1 X1) form (symmetric X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) X) = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [x3:pf (@ (rel X1 X1) form (symmetric X1) R)] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] symmetric_e X1 R X Y x3 x4.
rel_trans : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (@ (rel X1 X1) form (transitive X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Z) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Z) = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [x3:pf (@ (rel X1 X1) form (transitive X1) R)] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] [x5:pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Z)] transitive_e X1 R X Y Z x3 x4 x5.
eq_form_i : {X:tform} {Y:tform} pf (X equiv Y) -> pf (@ form form (@ form (shadowed_0 form) eq_form X) Y) = [X:tform] [Y:tform] [x3:pf (X equiv Y)] def2_i form form ([x4:tm form] [x5:tm form] x4 equiv x5) X Y x3.
eq_form_i' : {X:tform} {Y:tform} (pf X -> pf Y) -> (pf Y -> pf X) -> pf (@ form form (@ form (shadowed_0 form) eq_form X) Y) = [X:tform] [Y:tform] [q1:pf X -> pf Y] [q2:pf Y -> pf X] def2_i form form ([x3:tm form] [x4:tm form] x3 equiv x4) X Y (equiv_i2 X Y ([x3:pf X] q1 x3) ([x3:pf Y] q2 x3)).
eq_form_e : {X:tm form} {Y:tm form} pf (@ form form (@ form (shadowed_0 form) eq_form X) Y) -> pf (X equiv Y) = [X:tm form] [Y:tm form] [x3:pf (@ form form (@ form (shadowed_0 form) eq_form X) Y)] def2_e form form ([x4:tm form] [x5:tm form] x4 equiv x5) X Y x3.
eq_form_e1 : {X:tm form} {Y:tm form} pf (@ form form (@ form (shadowed_0 form) eq_form X) Y) -> pf X -> pf Y = [X:tm form] [Y:tm form] [p1:pf (@ form form (@ form (shadowed_0 form) eq_form X) Y)] [x3:pf X] equiv_e1 X Y (eq_form_e X Y p1) x3.
eq_form_e2 : {X:tm form} {Y:tm form} pf (@ form form (@ form (shadowed_0 form) eq_form X) Y) -> pf Y -> pf X = [X:tm form] [Y:tm form] [p1:pf (@ form form (@ form (shadowed_0 form) eq_form X) Y)] [x3:pf Y] equiv_e2 X Y (eq_form_e X Y p1) x3.
eq_x_i : {X1:tp} {X:tm X1} {Y:tm X1} pf (eq X1 X Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (eq_x X1) X) Y) = [X1:tp] [X:tm X1] [Y:tm X1] [x3:pf (eq X1 X Y)] def2_i X1 X1 ([x4:tm X1] [x5:tm X1] eq X1 x4 x5) X Y x3.
eq_x_e : {X1:tp} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (shadowed_0 X1) (eq_x X1) X) Y) -> pf (eq X1 X Y) = [X1:tp] [X:tm X1] [Y:tm X1] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) (eq_x X1) X) Y)] def2_e X1 X1 ([x4:tm X1] [x5:tm X1] eq X1 x4 x5) X Y x3.
eq_arith_i : {X:tm num} {Y:tm num} pf (eq num X Y) -> pf (@ num form (@ num (shadowed_0 num) eq_arith X) Y) = [X:tm num] [Y:tm num] [x3:pf (eq num X Y)] def2_i num num ([x4:tm num] [x5:tm num] _eq num x4 x5) X Y x3.
eq_arith_e : {X:tm num} {Y:tm num} pf (@ num form (@ num (shadowed_0 num) eq_arith X) Y) -> pf (eq num X Y) = [X:tm num] [Y:tm num] [x3:pf (@ num form (@ num (shadowed_0 num) eq_arith X) Y)] def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) X Y x3.
valideqv : {T:tp} tm (eqrel T arrow form) = [T:tp] lam (rel T T) form ([R:tm (rel T T)] @ (rel T T) form (reflexive T) R and @ (rel T T) form (symmetric T) R and @ (rel T T) form (transitive T) R).
valideqv_i : {X1:tp} {R:tm (rel X1 X1)} pf (@ (rel X1 X1) form (reflexive X1) R) -> pf (@ (rel X1 X1) form (symmetric X1) R) -> pf (@ (rel X1 X1) form (transitive X1) R) -> pf (@ (eqrel X1) form (valideqv X1) R) = [X1:tp] [R:tm (rel X1 X1)] [p1:pf (@ (rel X1 X1) form (reflexive X1) R)] [p2:pf (@ (rel X1 X1) form (symmetric X1) R)] [p3:pf (@ (rel X1 X1) form (transitive X1) R)] def1_i (eqrel X1) ([x3:tm (eqrel X1)] @ (rel X1 X1) form (reflexive X1) x3 and @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R (and3_i (@ (rel X1 X1) form (reflexive X1) R) (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) p1 p2 p3).
valideqv_e1 : {X1:tp} {R:tm (eqrel X1)} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ (rel X1 X1) form (reflexive X1) R) = [X1:tp] [R:tm (eqrel X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) R)] and3_e1 (@ (rel X1 X1) form (reflexive X1) R) (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) (def1_e (eqrel X1) ([x3:tm (eqrel X1)] @ (rel X1 X1) form (reflexive X1) x3 and @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R p1).
valideqv_e2 : {X1:tp} {R:tm (eqrel X1)} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ (rel X1 X1) form (symmetric X1) R) = [X1:tp] [R:tm (eqrel X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) R)] and3_e2 (@ (rel X1 X1) form (reflexive X1) R) (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) (def1_e (eqrel X1) ([x3:tm (eqrel X1)] @ (rel X1 X1) form (reflexive X1) x3 and @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R p1).
valideqv_e3 : {X1:tp} {R:tm (eqrel X1)} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ (rel X1 X1) form (transitive X1) R) = [X1:tp] [R:tm (eqrel X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) R)] and3_e3 (@ (rel X1 X1) form (reflexive X1) R) (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) (def1_e (eqrel X1) ([x3:tm (eqrel X1)] @ (rel X1 X1) form (reflexive X1) x3 and @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R p1).
eqv_refl : {X1:tp} {R:tm (eqrel X1)} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) X) = [X1:tp] [R:tm (eqrel X1)] [X:tm X1] [P1:pf (@ (eqrel X1) form (valideqv X1) R)] reflexive_e X1 R X (valideqv_e1 X1 R P1).
eqv_symm : {X1:tp} {R:tm (eqrel X1)} {X:tm X1} {Y:tm X1} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) X) = [X1:tp] [R:tm (eqrel X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (eqrel X1) form (valideqv X1) R)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] symmetric_e X1 R X Y (valideqv_e2 X1 R p1) x3.
eqv_trans : {X1:tp} {R:tm (eqrel X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Z) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Z) = [X1:tp] [R:tm (eqrel X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [p1:pf (@ (eqrel X1) form (valideqv X1) R)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Z)] transitive_e X1 R X Y Z (valideqv_e3 X1 R p1) x3 x4.
eq++_i : {Ta:tp} {Sa:tm (Ta arrow form)} {Ha:tm (Ta arrow Ta arrow form)} {X1:tp} {Hb:tm (X1 arrow X1 arrow form)} {F:tm (Ta arrow X1)} {G:tm (Ta arrow X1)} ({x3:tm Ta} {y:tm Ta} pf (@ Ta form Sa x3) -> pf (@ Ta form Sa y) -> pf (@ Ta form (@ Ta (Ta arrow form) Ha x3) y) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x3)) (@ Ta X1 F y)) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 G x3)) (@ Ta X1 G y)) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x3)) (@ Ta X1 G y))) -> pf (@ (Ta arrow X1) form (@ (Ta arrow X1) (shadowed_0 (Ta arrow X1)) (@ (eqrel X1) (eqrel (Ta arrow X1)) (@ (eqrel Ta) (eqrel X1 arrow eqrel (Ta arrow X1)) (@ (shadowed_0 Ta) (eqrel Ta arrow eqrel X1 arrow eqrel (Ta arrow X1)) (eq++ Ta X1) Sa) Ha) Hb) F) G) = [Ta:tp] [Sa:tm (Ta arrow form)] [Ha:tm (Ta arrow Ta arrow form)] [X1:tp] [Hb:tm (X1 arrow X1 arrow form)] [F:tm (Ta arrow X1)] [G:tm (Ta arrow X1)] [q1:{x4:tm Ta} {y:tm Ta} pf (@ Ta form Sa x4) -> pf (@ Ta form Sa y) -> pf (@ Ta form (@ Ta (Ta arrow form) Ha x4) y) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x4)) (@ Ta X1 F y)) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 G x4)) (@ Ta X1 G y)) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x4)) (@ Ta X1 G y))] def5_i (shadowed_0 Ta) (eqrel Ta) (eqrel X1) (Ta arrow X1) (Ta arrow X1) ([x3:tm (shadowed_0 Ta)] [x4:tm (eqrel Ta)] [x5:tm (eqrel X1)] [x6:tm (Ta arrow X1)] [x7:tm (Ta arrow X1)] forall2 Ta Ta ([x8:tm Ta] [y:tm Ta] @ Ta form x3 x8 imp @ Ta form x3 y imp @ Ta form (@ Ta (Ta arrow form) x4 x8) y imp @ X1 form (@ X1 (X1 arrow form) x5 (@ Ta X1 x6 x8)) (@ Ta X1 x6 y) imp @ X1 form (@ X1 (X1 arrow form) x5 (@ Ta X1 x7 x8)) (@ Ta X1 x7 y) imp @ X1 form (@ X1 (X1 arrow form) x5 (@ Ta X1 x6 x8)) (@ Ta X1 x7 y))) Sa Ha Hb F G (forall2_i Ta Ta ([x3:tm Ta] [x4:tm Ta] @ Ta form Sa x3 imp @ Ta form Sa x4 imp @ Ta form (@ Ta (Ta arrow form) Ha x3) x4 imp @ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x3)) (@ Ta X1 F x4) imp @ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 G x3)) (@ Ta X1 G x4) imp @ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x3)) (@ Ta X1 G x4)) ([x9:tm Ta] [y:tm Ta] imp5_i (@ Ta form Sa x9) (@ Ta form Sa y) (@ Ta form (@ Ta (Ta arrow form) Ha x9) y) (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x9)) (@ Ta X1 F y)) (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 G x9)) (@ Ta X1 G y)) (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x9)) (@ Ta X1 G y)) ([x3:pf (@ Ta form Sa x9)] [x4:pf (@ Ta form Sa y)] [x5:pf (@ Ta form (@ Ta (Ta arrow form) Ha x9) y)] [x6:pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x9)) (@ Ta X1 F y))] [x7:pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 G x9)) (@ Ta X1 G y))] q1 x9 y x3 x4 x5 x6 x7))).
eq++_e : {X1:tp} {X2:tp} {Sa:tm (shadowed_0 X1)} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {F:tm (X1 arrow X2)} {G:tm (X1 arrow X2)} {X:tm X1} {Y:tm X1} pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb) F) G) -> pf (@ X1 form Sa X) -> pf (@ X1 form Sa Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Ha X) Y) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 F Y)) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 G X)) (@ X1 X2 G Y)) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 G Y)) = [X1:tp] [X2:tp] [Sa:tm (shadowed_0 X1)] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [F:tm (X1 arrow X2)] [G:tm (X1 arrow X2)] [X:tm X1] [Y:tm X1] [p1:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb) F) G)] [x3:pf (@ X1 form Sa X)] [x4:pf (@ X1 form Sa Y)] [x5:pf (@ X1 form (@ X1 (X1 arrow form) Ha X) Y)] [x6:pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 F X)) (@ X1 X2 F Y))] [x7:pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 G X)) (@ X1 X2 G Y))] imp5_e (@ X1 form Sa X) (@ X1 form Sa Y) (@ X1 form (@ X1 (X1 arrow form) Ha X) Y) (@ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 F X)) (@ X1 X2 F Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 G X)) (@ X1 X2 G Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 F X)) (@ X1 X2 G Y)) (forall2_e X1 X1 ([x8:tm X1] [x9:tm X1] @ X1 form Sa x8 imp @ X1 form Sa x9 imp @ X1 form (@ X1 (X1 arrow form) Ha x8) x9 imp @ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 F x8)) (@ X1 X2 F x9) imp @ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 G x8)) (@ X1 X2 G x9) imp @ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 F x8)) (@ X1 X2 G x9)) (def5_e (X1 arrow X2) (X1 arrow X2) (eqrel X2) (eqrel X1) (shadowed_0 X1) ([x8:tm (shadowed_0 X1)] [x9:tm (eqrel X1)] [x10:tm (eqrel X2)] [x11:tm (X1 arrow X2)] [x12:tm (X1 arrow X2)] forall2 X1 X1 ([x13:tm X1] [y:tm X1] @ X1 form x8 x13 imp @ X1 form x8 y imp @ X1 form (@ X1 (X1 arrow form) x9 x13) y imp @ X2 form (@ X2 (X2 arrow form) x10 (@ X1 X2 x11 x13)) (@ X1 X2 x11 y) imp @ X2 form (@ X2 (X2 arrow form) x10 (@ X1 X2 x12 x13)) (@ X1 X2 x12 y) imp @ X2 form (@ X2 (X2 arrow form) x10 (@ X1 X2 x11 x13)) (@ X1 X2 x12 y))) Sa Ha Hb F G p1) X Y) x3 x4 x5 x6 x7.
eq+_e : {X1:tp} {X2:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {F:tm (X1 arrow X2)} {G:tm (X1 arrow X2)} {X:tm X1} {Y:tm X1} pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Ha) Hb) F) G) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Ha X) Y) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 F Y)) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 G X)) (@ X1 X2 G Y)) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 G Y)) = [X1:tp] [X2:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [F:tm (X1 arrow X2)] [G:tm (X1 arrow X2)] [X:tm X1] [Y:tm X1] [p1:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Ha) Hb) F) G)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) Ha X) Y)] [x4:pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 F Y))] [x5:pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 G X)) (@ X1 X2 G Y))] eq++_e X1 X2 (lam X1 form ([x6:tm X1] true)) Ha Hb F G X Y p1 (def1_i X1 ([x6:tm X1] true) X true_i) (def1_i X1 ([x6:tm X1] true) Y true_i) x3 x4 x5.
eq_rel3 : {Ta:tp} {Tb:tp} {Tc:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel Tc arrow eqrel (rel3 Ta Tb Tc)) = [Ta:tp] [Tb:tp] [Tc:tp] lam3 (eqrel Ta) (eqrel Tb) (eqrel Tc) (eqrel (Ta arrow rel Tb Tc)) ([h1:tm (eqrel Ta)] [h2:tm (eqrel Tb)] [h3:tm (eqrel Tc)] @ (eqrel (rel Tb Tc)) (eqrel (Ta arrow rel Tb Tc)) (@ (eqrel Ta) (eqrel (rel Tb Tc) arrow eqrel (Ta arrow rel Tb Tc)) (eq+ Ta (rel Tb Tc)) h1) (@ (eqrel Tc) (eqrel (rel Tb Tc)) (@ (eqrel Tb) (eqrel Tc arrow eqrel (rel Tb Tc)) (eq_rel Tb Tc) h2) h3)).
eq_rel4 : {Ta:tp} {Tb:tp} {Tc:tp} {Td:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel Tc arrow eqrel Td arrow eqrel (rel4 Ta Tb Tc Td)) = [Ta:tp] [Tb:tp] [Tc:tp] [Td:tp] lam4 (eqrel Ta) (eqrel Tb) (eqrel Tc) (eqrel Td) (eqrel (Ta arrow rel3 Tb Tc Td)) ([h1:tm (eqrel Ta)] [h2:tm (eqrel Tb)] [h3:tm (eqrel Tc)] [h4:tm (eqrel Td)] @ (eqrel (rel3 Tb Tc Td)) (eqrel (Ta arrow rel3 Tb Tc Td)) (@ (eqrel Ta) (eqrel (rel3 Tb Tc Td) arrow eqrel (Ta arrow rel3 Tb Tc Td)) (eq+ Ta (rel3 Tb Tc Td)) h1) (@ (eqrel Td) (eqrel (rel3 Tb Tc Td)) (@ (eqrel Tc) (eqrel Td arrow eqrel (rel3 Tb Tc Td)) (@ (eqrel Tb) (eqrel Tc arrow eqrel Td arrow eqrel (rel3 Tb Tc Td)) (eq_rel3 Tb Tc Td) h2) h3) h4)).
eq_weaken : {X1:tp} {Eq:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (@ (rel X1 X1) form (reflexive X1) Eq) -> pf (eq X1 X Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) = [X1:tp] [Eq:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (rel X1 X1) form (reflexive X1) Eq)] [p2:pf (eq X1 X Y)] congr X1 Y X ([z1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) z1) (symm X1 X Y p2) (reflexive_e X1 Eq X p1).
eq++_i2 : {X1:tp} {Eq2:tm (eqrel X1)} {T1:tp} {Dom:tm (T1 arrow form)} {F:tm (T1 arrow X1)} {G:tm (T1 arrow X1)} {X2:tm (T1 arrow T1 arrow form)} pf (@ (eqrel X1) form (valideqv X1) Eq2) -> ({x3:tm T1} pf (@ T1 form Dom x3) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq2 (@ T1 X1 F x3)) (@ T1 X1 G x3))) -> pf (@ (T1 arrow X1) form (@ (T1 arrow X1) (shadowed_0 (T1 arrow X1)) (@ (eqrel X1) (eqrel (T1 arrow X1)) (@ (eqrel T1) (eqrel X1 arrow eqrel (T1 arrow X1)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel X1 arrow eqrel (T1 arrow X1)) (eq++ T1 X1) Dom) X2) Eq2) F) G) = [X1:tp] [Eq2:tm (eqrel X1)] [T1:tp] [Dom:tm (T1 arrow form)] [F:tm (T1 arrow X1)] [G:tm (T1 arrow X1)] [X2:tm (T1 arrow T1 arrow form)] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [q1:{x4:tm T1} pf (@ T1 form Dom x4) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq2 (@ T1 X1 F x4)) (@ T1 X1 G x4))] eq++_i T1 Dom X2 X1 Eq2 F G ([x5:tm T1] [x6:tm T1] [x3:pf (@ T1 form Dom x5)] [p2:pf (@ T1 form Dom x6)] [x4:pf (@ T1 form (@ T1 (T1 arrow form) X2 x5) x6)] [p3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq2 (@ T1 X1 F x5)) (@ T1 X1 F x6))] [x7:pf (@ X1 form (@ X1 (X1 arrow form) Eq2 (@ T1 X1 G x5)) (@ T1 X1 G x6))] eqv_trans X1 Eq2 (@ T1 X1 F x5) (@ T1 X1 F x6) (@ T1 X1 G x6) p1 p3 (q1 x6 p2)).
eq++_e2 : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {Dom:tm (shadowed_0 X1)} {F:tm (X1 arrow X2)} {G:tm (X1 arrow X2)} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Dom) Eq1) Eq2) F) G) -> pf (@ X1 form Dom X) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Eq2 (@ X1 X2 F X)) (@ X1 X2 G X)) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [Dom:tm (shadowed_0 X1)] [F:tm (X1 arrow X2)] [G:tm (X1 arrow X2)] [X:tm X1] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Dom) Eq1) Eq2) F) G)] [p8:pf (@ X1 form Dom X)] eq++_e X1 X2 Dom Eq1 Eq2 F G X X p6 p8 p8 (eqv_refl X1 Eq1 X p2) (eqv_refl X2 Eq2 (@ X1 X2 F X) p4) (eqv_refl X2 Eq2 (@ X1 X2 G X) p4).
eq++_congr : {X1:tp} {Sa:tm (X1 arrow form)} {X:tm X1} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {F:tm (X1 arrow X2)} {F':tm (X1 arrow X2)} pf (@ X1 form Sa X) -> pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb) F) F') -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 F' X)) = [X1:tp] [Sa:tm (X1 arrow form)] [X:tm X1] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [F:tm (X1 arrow X2)] [F':tm (X1 arrow X2)] [p1:pf (@ X1 form Sa X)] [p2:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p3:pf (@ (eqrel X2) form (valideqv X2) Hb)] [p4:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb) F) F')] eq++_e X1 X2 Sa Ha Hb F F' X X p4 p1 p1 (eqv_refl X1 Ha X p2) (eqv_refl X2 Hb (@ X1 X2 F X) p3) (eqv_refl X2 Hb (@ X1 X2 F' X) p3).
eq++_reflexive : {T1:tp} {T2:tp} {Dom:tm (shadowed_0 T1)} {Eq1:tm (eqrel T1)} {Eq2:tm (eqrel T2)} pf (@ (rel (T1 arrow T2) (T1 arrow T2)) form (reflexive (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2)) = [T1:tp] [T2:tp] [Dom:tm (shadowed_0 T1)] [Eq1:tm (eqrel T1)] [Eq2:tm (eqrel T2)] reflexive_i (T1 arrow T2) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) ([f:tm (T1 arrow T2)] eq++_i T1 Dom Eq1 T2 Eq2 f f ([x3:tm T1] [y:tm T1] [x4:pf (@ T1 form Dom x3)] [x5:pf (@ T1 form Dom y)] [x6:pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x3) y)] [x7:pf (@ T2 form (@ T2 (T2 arrow form) Eq2 (@ T1 T2 f x3)) (@ T1 T2 f y))] [p3:pf (@ T2 form (@ T2 (shadowed_0 T2) Eq2 (@ T1 T2 f x3)) (@ T1 T2 f y))] p3)).
eq++_symmetric : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} {Dom:tm (shadowed_0 T1)} pf (@ (rel T1 T1) form (symmetric T1) Eq1) -> pf (@ (rel T2 T2) form (symmetric T2) Eq2) -> pf (@ (rel (T1 arrow T2) (T1 arrow T2)) form (symmetric (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [Dom:tm (shadowed_0 T1)] [p1:pf (@ (rel T1 T1) form (symmetric T1) Eq1)] [p2:pf (@ (rel T2 T2) form (symmetric T2) Eq2)] symmetric_i (T1 arrow T2) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) ([f:tm (T1 arrow T2)] [g:tm (T1 arrow T2)] [p3:pf (@ (T1 arrow T2) form (@ (T1 arrow T2) (shadowed_0 (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) f) g)] eq++_i T1 Dom Eq1 T2 Eq2 g f ([x3:tm T1] [y:tm T1] [p4:pf (@ T1 form Dom x3)] [p5:pf (@ T1 form Dom y)] [p6:pf (@ T1 form (@ T1 (shadowed_0 T1) Eq1 x3) y)] [p7:pf (@ T2 form (@ T2 (shadowed_0 T2) Eq2 (@ T1 T2 g x3)) (@ T1 T2 g y))] [p8:pf (@ T2 form (@ T2 (shadowed_0 T2) Eq2 (@ T1 T2 f x3)) (@ T1 T2 f y))] symmetric_e T2 Eq2 (@ T1 T2 f y) (@ T1 T2 g x3) p2 (eq++_e T1 T2 Dom Eq1 Eq2 f g y x3 p3 p5 p4 (symmetric_e T1 Eq1 x3 y p1 p6) (symmetric_e T2 Eq2 (@ T1 T2 f x3) (@ T1 T2 f y) p2 p8) (symmetric_e T2 Eq2 (@ T1 T2 g x3) (@ T1 T2 g y) p2 p7)))).
eq++_transitive : {T1:tp} {Eq1:tm (eqrel T1)} {T2:tp} {Eq2:tm (eqrel T2)} {Dom:tm (shadowed_0 T1)} pf (@ (eqrel T1) form (valideqv T1) Eq1) -> pf (@ (eqrel T2) form (valideqv T2) Eq2) -> pf (@ (rel (T1 arrow T2) (T1 arrow T2)) form (transitive (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2)) = [T1:tp] [Eq1:tm (eqrel T1)] [T2:tp] [Eq2:tm (eqrel T2)] [Dom:tm (shadowed_0 T1)] [p1:pf (@ (eqrel T1) form (valideqv T1) Eq1)] [p2:pf (@ (eqrel T2) form (valideqv T2) Eq2)] transitive_i (T1 arrow T2) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) ([f:tm (T1 arrow T2)] [g:tm (T1 arrow T2)] [h:tm (T1 arrow T2)] [p3:pf (@ (T1 arrow T2) form (@ (T1 arrow T2) (shadowed_0 (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) f) g)] [p4:pf (@ (T1 arrow T2) form (@ (T1 arrow T2) (shadowed_0 (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) g) h)] eq++_i T1 Dom Eq1 T2 Eq2 f h ([x3:tm T1] [y:tm T1] [p5:pf (@ T1 form Dom x3)] [p6:pf (@ T1 form Dom y)] [p7:pf (@ T1 form (@ T1 (shadowed_0 T1) Eq1 x3) y)] [p8:pf (@ T2 form (@ T2 (shadowed_0 T2) Eq2 (@ T1 T2 f x3)) (@ T1 T2 f y))] [p9:pf (@ T2 form (@ T2 (shadowed_0 T2) Eq2 (@ T1 T2 h x3)) (@ T1 T2 h y))] eqv_trans T2 Eq2 (@ T1 T2 f x3) (@ T1 T2 g x3) (@ T1 T2 h y) p2 (eq++_congr T1 Dom x3 Eq1 T2 Eq2 f g p5 p1 p2 p3) (eqv_trans T2 Eq2 (@ T1 T2 g x3) (@ T1 T2 h x3) (@ T1 T2 h y) p2 (eq++_congr T1 Dom x3 Eq1 T2 Eq2 g h p5 p1 p2 p4) p9))).
valideqv_eq++ : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {Sa:tm (shadowed_0 X1)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel (X1 arrow X2)) form (valideqv (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [Sa:tm (shadowed_0 X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] valideqv_i (X1 arrow X2) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb) (eq++_reflexive X1 X2 Sa Ha Hb) (eq++_symmetric X1 Ha X2 Hb Sa (valideqv_e2 X1 Ha p1) (valideqv_e2 X2 Hb p2)) (eq++_transitive X1 Ha X2 Hb Sa p1 p2).
eq+_i2 : {X1:tp} {Eq2:tm (eqrel X1)} {T1:tp} {F:tm (T1 arrow X1)} {G:tm (T1 arrow X1)} {X2:tm (T1 arrow T1 arrow form)} pf (@ (eqrel X1) form (valideqv X1) Eq2) -> ({x3:tm T1} pf (@ X1 form (@ X1 (shadowed_0 X1) Eq2 (@ T1 X1 F x3)) (@ T1 X1 G x3))) -> pf (@ (T1 arrow X1) form (@ (T1 arrow X1) (shadowed_0 (T1 arrow X1)) (@ (eqrel X1) (eqrel (T1 arrow X1)) (@ (eqrel T1) (eqrel X1 arrow eqrel (T1 arrow X1)) (eq+ T1 X1) X2) Eq2) F) G) = [X1:tp] [Eq2:tm (eqrel X1)] [T1:tp] [F:tm (T1 arrow X1)] [G:tm (T1 arrow X1)] [X2:tm (T1 arrow T1 arrow form)] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [q1:{x4:tm T1} pf (@ X1 form (@ X1 (shadowed_0 X1) Eq2 (@ T1 X1 F x4)) (@ T1 X1 G x4))] eq++_i2 X1 Eq2 T1 (lam T1 form ([x5:tm T1] true)) F G X2 p1 ([x6:tm T1] [x3:pf (@ T1 form (lam T1 form ([x7:tm T1] true)) x6)] q1 x6).
eq+_e2 : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {F:tm (X1 arrow X2)} {G:tm (X1 arrow X2)} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Eq1) Eq2) F) G) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Eq2 (@ X1 X2 F X)) (@ X1 X2 G X)) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [F:tm (X1 arrow X2)] [G:tm (X1 arrow X2)] [X:tm X1] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Eq1) Eq2) F) G)] eq++_e2 X1 Eq1 X2 Eq2 (lam X1 form ([x3:tm X1] true)) F G X p2 p4 p6 (def1_i X1 ([x3:tm X1] true) X true_i).
eq+_congr : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {F:tm (X1 arrow X2)} {F':tm (X1 arrow X2)} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Ha) Hb) F) F') -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 F' X)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [F:tm (X1 arrow X2)] [F':tm (X1 arrow X2)] [X:tm X1] [x3:pf (@ (eqrel X1) form (valideqv X1) Ha)] [x4:pf (@ (eqrel X2) form (valideqv X2) Hb)] [x5:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Ha) Hb) F) F')] eq++_congr X1 (lam X1 form ([x6:tm X1] true)) X Ha X2 Hb F F' (def1_i X1 ([x6:tm X1] true) X true_i) x3 x4 x5.
valideqv_eq+ : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel (X1 arrow X2)) form (valideqv (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Ha) Hb)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [x3:pf (@ (eqrel X1) form (valideqv X1) Ha)] [x4:pf (@ (eqrel X2) form (valideqv X2) Hb)] valideqv_eq++ X1 Ha X2 Hb (lam X1 form ([x5:tm X1] true)) x3 x4.
eq_form_reflexive : pf (@ (rel form form) form (reflexive form) eq_form) = reflexive_i form eq_form ([x3:tm form] eq_form_i x3 x3 (equiv_refl x3)).
eq_form_symmetric : pf (@ (rel form form) form (symmetric form) eq_form) = symmetric_i form eq_form ([x3:tm form] [y:tm form] [p1:pf (@ form form (@ form (shadowed_0 form) eq_form x3) y)] eq_form_i y x3 (equiv_symm x3 y (eq_form_e x3 y p1))).
eq_form_transitive : pf (@ (rel form form) form (transitive form) eq_form) = transitive_i form eq_form ([x3:tm form] [y:tm form] [z1:tm form] [p1:pf (@ form form (@ form (shadowed_0 form) eq_form x3) y)] [p2:pf (@ form form (@ form (shadowed_0 form) eq_form y) z1)] eq_form_i x3 z1 (equiv_trans x3 y z1 (eq_form_e x3 y p1) (eq_form_e y z1 p2))).
valideqv_eq_form : pf (@ (eqrel form) form (valideqv form) eq_form) = valideqv_i form eq_form eq_form_reflexive eq_form_symmetric eq_form_transitive.
eq_x_refl : {X1:tp} {X:tm X1} pf (@ X1 form (@ X1 (shadowed_0 X1) (eq_x X1) X) X) = [X1:tp] [X:tm X1] eq_x_i X1 X X (refl X1 X).
eq_x_reflexive : {T:tp} pf (@ (rel T T) form (reflexive T) (eq_x T)) = [T:tp] reflexive_i T (eq_x T) ([x3:tm T] eq_x_i T x3 x3 (refl T x3)).
eq_x_symmetric : {T:tp} pf (@ (rel T T) form (symmetric T) (eq_x T)) = [T:tp] symmetric_i T (eq_x T) ([x3:tm T] [y:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (eq_x T) x3) y)] eq_x_i T y x3 (symm T x3 y (eq_x_e T x3 y p1))).
eq_x_transitive : {T:tp} pf (@ (rel T T) form (transitive T) (eq_x T)) = [T:tp] transitive_i T (eq_x T) ([x3:tm T] [y:tm T] [z1:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (eq_x T) x3) y)] [p2:pf (@ T form (@ T (shadowed_0 T) (eq_x T) y) z1)] eq_x_i T x3 z1 (trans T x3 y z1 (eq_x_e T x3 y p1) (eq_x_e T y z1 p2))).
valideqv_eq_x : {X1:tp} pf (@ (eqrel X1) form (valideqv X1) (eq_x X1)) = [X1:tp] valideqv_i X1 (eq_x X1) (eq_x_reflexive X1) (eq_x_symmetric X1) (eq_x_transitive X1).
eq_rel_i : {X1:tp} {Eq2:tm (eqrel X1)} {X2:tp} {R1:tm (X2 arrow X1 arrow form)} {R2:tm (X2 arrow X1 arrow form)} {Eq1:tm (eqrel X2)} pf (@ (eqrel X1) form (valideqv X1) Eq2) -> ({x3:tm X2} {x4:tm X1} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ X2 (X1 arrow form) R1 x3) x4)) (@ X1 form (@ X2 (X1 arrow form) R2 x3) x4))) -> pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (@ (eqrel X1) (eqrel (rel X2 X1)) (@ (eqrel X2) (eqrel X1 arrow eqrel (rel X2 X1)) (eq_rel X2 X1) Eq1) Eq2) R1) R2) = [X1:tp] [Eq2:tm (eqrel X1)] [X2:tp] [R1:tm (X2 arrow X1 arrow form)] [R2:tm (X2 arrow X1 arrow form)] [Eq1:tm (eqrel X2)] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [p4:{x5:tm X2} {x6:tm X1} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ X2 (X1 arrow form) R1 x5) x6)) (@ X1 form (@ X2 (X1 arrow form) R2 x5) x6))] cut2 (@ (eqrel X1) form (valideqv X1) Eq2) (forall2 X2 X1 ([x3:tm X2] [x4:tm X1] @ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ X2 (X1 arrow form) R1 x3) x4)) (@ X1 form (@ X2 (X1 arrow form) R2 x3) x4))) (@ (X2 arrow X1 arrow form) form (@ (X2 arrow X1 arrow form) ((X2 arrow X1 arrow form) arrow form) (@ (eqrel X1) ((X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) (@ (eqrel X2) (eqrel X1 arrow (X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) (lam2 (eqrel X2) (eqrel X1) ((X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) ([x3:tm (eqrel X2)] [x4:tm (eqrel X1)] @ (eqrel (X1 arrow form)) (eqrel (X2 arrow X1 arrow form)) (@ (eqrel X2) (eqrel (X1 arrow form) arrow eqrel (X2 arrow X1 arrow form)) (eq+ X2 (X1 arrow form)) x3) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) x4) eq_form))) Eq1) Eq2) R1) R2) p2 (forall2_i X2 X1 ([x3:tm X2] [x4:tm X1] @ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ X2 (X1 arrow form) R1 x3) x4)) (@ X1 form (@ X2 (X1 arrow form) R2 x3) x4)) ([a:tm X2] [b:tm X1] p4 a b)) ([x3:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [x4:pf (forall2 X2 X1 ([x4:tm X2] [x5:tm X1] @ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ X2 (X1 arrow form) R1 x4) x5)) (@ X1 form (@ X2 (X1 arrow form) R2 x4) x5)))] def2_congr1 (X2 arrow X1 arrow form) (X2 arrow X1 arrow form) (@ (eqrel X1) ((X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) (@ (eqrel X2) (eqrel X1 arrow (X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) (lam2 (eqrel X2) (eqrel X1) ((X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) ([x5:tm (eqrel X2)] [x6:tm (eqrel X1)] @ (eqrel (X1 arrow form)) (eqrel (X2 arrow X1 arrow form)) (@ (eqrel X2) (eqrel (X1 arrow form) arrow eqrel (X2 arrow X1 arrow form)) (eq+ X2 (X1 arrow form)) x5) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) x6) eq_form))) Eq1) Eq2) (@ (eqrel (X1 arrow form)) (eqrel (X2 arrow X1 arrow form)) (@ (eqrel X2) (eqrel (X1 arrow form) arrow eqrel (X2 arrow X1 arrow form)) (eq+ X2 (X1 arrow form)) Eq1) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq2) eq_form)) R1 R2 (beta2 ((X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) (eqrel X1) (eqrel X2) ([x5:tm (eqrel X2)] [x6:tm (eqrel X1)] @ (eqrel (X1 arrow form)) (eqrel (X2 arrow X1 arrow form)) (@ (eqrel X2) (eqrel (X1 arrow form) arrow eqrel (X2 arrow X1 arrow form)) (eq+ X2 (X1 arrow form)) x5) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) x6) eq_form)) Eq1 Eq2) (eq+_i2 (X1 arrow form) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq2) eq_form) X2 R1 R2 Eq1 (valideqv_eq+ X1 Eq2 form eq_form p2 valideqv_eq_form) ([x7:tm X2] eq+_i2 form eq_form X1 (@ X2 (X1 arrow form) R1 x7) (@ X2 (X1 arrow form) R2 x7) Eq2 valideqv_eq_form ([x8:tm X1] p4 x7 x8)))).
eq_rel_i2 : {X1:tp} {EqB:tm (eqrel X1)} {X2:tp} {R1:tm (rel X2 X1)} {R2:tm (rel X2 X1)} {EqA:tm (eqrel X2)} pf (@ (eqrel X1) form (valideqv X1) EqB) -> pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (subrel X2 X1) R1) R2) -> pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (subrel X2 X1) R2) R1) -> pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (@ (eqrel X1) (eqrel (rel X2 X1)) (@ (eqrel X2) (eqrel X1 arrow eqrel (rel X2 X1)) (eq_rel X2 X1) EqA) EqB) R1) R2) = [X1:tp] [EqB:tm (eqrel X1)] [X2:tp] [R1:tm (rel X2 X1)] [R2:tm (rel X2 X1)] [EqA:tm (eqrel X2)] [p3:pf (@ (eqrel X1) form (valideqv X1) EqB)] [p1:pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (subrel X2 X1) R1) R2)] [p2:pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (subrel X2 X1) R2) R1)] eq_rel_i X1 EqB X2 R1 R2 EqA p3 ([x3:tm X2] [x4:tm X1] eq_form_i' (@ X1 form (@ X2 (shadowed_0 X1) R1 x3) x4) (@ X1 form (@ X2 (shadowed_0 X1) R2 x3) x4) ([p6:pf (@ X1 form (@ X2 (shadowed_0 X1) R1 x3) x4)] subrel_e X2 X1 R1 R2 x3 x4 p1 p6) ([p6:pf (@ X1 form (@ X2 (shadowed_0 X1) R2 x3) x4)] subrel_e X2 X1 R2 R1 x3 x4 p2 p6)).
eq_arith_symmetric : pf (@ (rel num num) form (symmetric num) eq_arith) = eq_x_symmetric num.
eq_arith_transitive : pf (@ (rel num num) form (transitive num) eq_arith) = eq_x_transitive num.
valideqv_eq_arith : pf (@ (eqrel num) form (valideqv num) eq_arith) = valideqv_eq_x num.
eq_arith_refl : {X:tm num} pf (@ num form (@ num (shadowed_0 num) eq_arith X) X) = [X:tm num] eqv_refl num eq_arith X valideqv_eq_arith.
valideqv_eq_rel : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel (rel X1 X2)) form (valideqv (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] congr (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X2) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2 arrow form)) (lam2 (eqrel X1) (eqrel X2) (eqrel (X1 arrow X2 arrow form)) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form))) Ha) Hb) (@ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) Ha) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Hb) eq_form)) ([z1:tm (eqrel (X1 arrow X2 arrow form))] @ (eqrel (X1 arrow X2 arrow form)) form (valideqv (X1 arrow X2 arrow form)) z1) (beta2 (eqrel (X1 arrow X2 arrow form)) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form)) Ha Hb) (valideqv_eq+ X1 Ha (X2 arrow form) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Hb) eq_form) p1 (valideqv_eq+ X2 Hb form eq_form p2 valideqv_eq_form)).
eq_rel3_i : {X1:tp} {Eq2:tm (eqrel X1)} {X2:tp} {Eq3:tm (eqrel X2)} {X3:tp} {R1:tm (X3 arrow X1 arrow X2 arrow form)} {R2:tm (X3 arrow X1 arrow X2 arrow form)} {Eq1:tm (eqrel X3)} pf (@ (eqrel X1) form (valideqv X1) Eq2) -> pf (@ (eqrel X2) form (valideqv X2) Eq3) -> ({x3:tm X3} {x4:tm X1} {x5:tm X2} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) R1 x3) x4) x5)) (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) R2 x3) x4) x5))) -> pf (@ (rel3 X3 X1 X2) form (@ (rel3 X3 X1 X2) (shadowed_0 (rel3 X3 X1 X2)) (@ (eqrel X2) (eqrel (rel3 X3 X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel3 X3 X1 X2)) (@ (eqrel X3) (eqrel X1 arrow eqrel X2 arrow eqrel (rel3 X3 X1 X2)) (eq_rel3 X3 X1 X2) Eq1) Eq2) Eq3) R1) R2) = [X1:tp] [Eq2:tm (eqrel X1)] [X2:tp] [Eq3:tm (eqrel X2)] [X3:tp] [R1:tm (X3 arrow X1 arrow X2 arrow form)] [R2:tm (X3 arrow X1 arrow X2 arrow form)] [Eq1:tm (eqrel X3)] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq3)] [p6:{x6:tm X3} {x7:tm X1} {x3:tm X2} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) R1 x6) x7) x3)) (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) R2 x6) x7) x3))] def2_congr1 (X3 arrow rel X1 X2) (X3 arrow rel X1 X2) (@ (eqrel X2) ((X3 arrow rel X1 X2) arrow (X3 arrow rel X1 X2) arrow form) (@ (eqrel X1) (eqrel X2 arrow (X3 arrow rel X1 X2) arrow (X3 arrow rel X1 X2) arrow form) (@ (eqrel X3) (eqrel X1 arrow eqrel X2 arrow (X3 arrow rel X1 X2) arrow (X3 arrow rel X1 X2) arrow form) (lam3 (eqrel X3) (eqrel X1) (eqrel X2) ((X3 arrow rel X1 X2) arrow (X3 arrow rel X1 X2) arrow form) ([x3:tm (eqrel X3)] [x4:tm (eqrel X1)] [x5:tm (eqrel X2)] @ (eqrel (rel X1 X2)) (eqrel (X3 arrow rel X1 X2)) (@ (eqrel X3) (eqrel (rel X1 X2) arrow eqrel (X3 arrow rel X1 X2)) (eq+ X3 (rel X1 X2)) x3) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) x4) x5))) Eq1) Eq2) Eq3) (@ (eqrel (rel X1 X2)) (eqrel (X3 arrow rel X1 X2)) (@ (eqrel X3) (eqrel (rel X1 X2) arrow eqrel (X3 arrow rel X1 X2)) (eq+ X3 (rel X1 X2)) Eq1) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq2) Eq3)) R1 R2 (beta3 ((X3 arrow rel X1 X2) arrow (X3 arrow rel X1 X2) arrow form) (eqrel X2) (eqrel X1) (eqrel X3) ([x3:tm (eqrel X3)] [x4:tm (eqrel X1)] [x5:tm (eqrel X2)] @ (eqrel (rel X1 X2)) (eqrel (X3 arrow rel X1 X2)) (@ (eqrel X3) (eqrel (rel X1 X2) arrow eqrel (X3 arrow rel X1 X2)) (eq+ X3 (rel X1 X2)) x3) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) x4) x5)) Eq1 Eq2 Eq3) (eq+_i2 (rel X1 X2) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq2) Eq3) X3 R1 R2 Eq1 (valideqv_eq_rel X1 Eq2 X2 Eq3 p2 p4) ([x8:tm X3] eq_rel_i X2 Eq3 X1 (@ X3 (X1 arrow X2 arrow form) R1 x8) (@ X3 (X1 arrow X2 arrow form) R2 x8) Eq2 p4 ([x9:tm X1] [x3:tm X2] p6 x8 x9 x3))).
valideqv_eq_rel3 : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {X3:tp} {Hc:tm (eqrel X3)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel X3) form (valideqv X3) Hc) -> pf (@ (eqrel (rel3 X1 X2 X3)) form (valideqv (rel3 X1 X2 X3)) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) Ha) Hb) Hc)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [X3:tp] [Hc:tm (eqrel X3)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] [p3:pf (@ (eqrel X3) form (valideqv X3) Hc)] congr (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X3) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (X1 arrow rel X2 X3)) (lam3 (eqrel X1) (eqrel X2) (eqrel X3) (eqrel (X1 arrow rel X2 X3)) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] @ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) x3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) x4) x5))) Ha) Hb) Hc) (@ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) Ha) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Hb) Hc)) ([z1:tm (eqrel (X1 arrow rel X2 X3))] @ (eqrel (X1 arrow rel X2 X3)) form (valideqv (X1 arrow rel X2 X3)) z1) (beta3 (eqrel (X1 arrow rel X2 X3)) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] @ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) x3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) x4) x5)) Ha Hb Hc) (valideqv_eq+ X1 Ha (rel X2 X3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Hb) Hc) p1 (valideqv_eq_rel X2 Hb X3 Hc p2 p3)).
eq_rel_congr : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {R:tm (rel X1 X2)} {R':tm (rel X1 X2)} {X:tm X1} {Y:tm X2} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb) R) R') -> pf (@ X2 form (@ X1 (shadowed_0 X2) R X) Y) -> pf (@ X2 form (@ X1 (shadowed_0 X2) R' X) Y) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [R:tm (rel X1 X2)] [R':tm (rel X1 X2)] [X:tm X1] [Y:tm X2] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] [p3:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb) R) R')] [p4:pf (@ X2 form (@ X1 (shadowed_0 X2) R X) Y)] eq_form_e1 (@ X2 form (@ X1 (X2 arrow form) R X) Y) (@ X2 form (@ X1 (X2 arrow form) R' X) Y) (eq+_congr X2 Hb form eq_form (@ X1 (X2 arrow form) R X) (@ X1 (X2 arrow form) R' X) Y p2 valideqv_eq_form (eq+_congr X1 Ha (X2 arrow form) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Hb) eq_form) R R' X p1 (valideqv_eq+ X2 Hb form eq_form p2 valideqv_eq_form) (gdef2_e (rel X1 X2 arrow rel X1 X2 arrow form) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form)) Ha Hb ([z1:tm (rel X1 X2 arrow rel X1 X2 arrow form)] @ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) z1 R) R') p3))) p4.
eq_rel_e : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {R1:tm (rel X1 X2)} {R2:tm (rel X1 X2)} {X:tm X1} {Y:tm X2} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R1) R2) -> pf (@ form form (@ form (shadowed_0 form) eq_form (@ X2 form (@ X1 (shadowed_0 X2) R1 X) Y)) (@ X2 form (@ X1 (shadowed_0 X2) R2 X) Y)) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [R1:tm (rel X1 X2)] [R2:tm (rel X1 X2)] [X:tm X1] [Y:tm X2] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R1) R2)] cut (@ (X2 arrow form) form (@ (X2 arrow form) (shadowed_0 (X2 arrow form)) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Eq2) eq_form) (@ X1 (X2 arrow form) R1 X)) (@ X1 (X2 arrow form) R2 X)) (@ form form (@ form (shadowed_0 form) eq_form (@ X2 form (@ X1 (shadowed_0 X2) R1 X) Y)) (@ X2 form (@ X1 (shadowed_0 X2) R2 X) Y)) (eq+_e2 X1 Eq1 (X2 arrow form) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Eq2) eq_form) R1 R2 X p2 (valideqv_eq+ X2 Eq2 form eq_form p4 valideqv_eq_form) (def2_congr1 (rel X1 X2) (rel X1 X2) (@ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) Eq1) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Eq2) eq_form)) (@ (eqrel X2) (rel X1 X2 arrow rel X1 X2 arrow form) (@ (eqrel X1) (eqrel X2 arrow rel X1 X2 arrow rel X1 X2 arrow form) (lam2 (eqrel X1) (eqrel X2) (rel X1 X2 arrow rel X1 X2 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form))) Eq1) Eq2) R1 R2 (symm (rel X1 X2 arrow rel X1 X2 arrow form) (@ (eqrel X2) (rel X1 X2 arrow rel X1 X2 arrow form) (@ (eqrel X1) (eqrel X2 arrow rel X1 X2 arrow rel X1 X2 arrow form) (lam2 (eqrel X1) (eqrel X2) (rel X1 X2 arrow rel X1 X2 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form))) Eq1) Eq2) (@ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) Eq1) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Eq2) eq_form)) (beta2 (rel X1 X2 arrow rel X1 X2 arrow form) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form)) Eq1 Eq2)) p6)) ([p10:pf (@ (X2 arrow form) form (@ (X2 arrow form) (shadowed_0 (X2 arrow form)) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Eq2) eq_form) (@ X1 (shadowed_0 X2) R1 X)) (@ X1 (shadowed_0 X2) R2 X))] eq+_e2 X2 Eq2 form eq_form (@ X1 (shadowed_0 X2) R1 X) (@ X1 (shadowed_0 X2) R2 X) Y p4 valideqv_eq_form p10).
eq_rel_e1 : {A:tp} {Ha:tm (eqrel A)} {B:tp} {Hb:tm (eqrel B)} {R:tm (rel A B)} {R':tm (rel A B)} pf (@ (eqrel A) form (valideqv A) Ha) -> pf (@ (eqrel B) form (valideqv B) Hb) -> pf (@ (rel A B) form (@ (rel A B) (shadowed_0 (rel A B)) (@ (eqrel B) (eqrel (rel A B)) (@ (eqrel A) (eqrel B arrow eqrel (rel A B)) (eq_rel A B) Ha) Hb) R) R') -> pf (@ (rel A B) form (@ (rel A B) (shadowed_0 (rel A B)) (subrel A B) R) R') = [A:tp] [Ha:tm (eqrel A)] [B:tp] [Hb:tm (eqrel B)] [R:tm (rel A B)] [R':tm (rel A B)] [p1:pf (@ (eqrel A) form (valideqv A) Ha)] [p2:pf (@ (eqrel B) form (valideqv B) Hb)] [p3:pf (@ (rel A B) form (@ (rel A B) (shadowed_0 (rel A B)) (@ (eqrel B) (eqrel (rel A B)) (@ (eqrel A) (eqrel B arrow eqrel (rel A B)) (eq_rel A B) Ha) Hb) R) R')] subrel_i A B R R' ([x3:tm A] [y:tm B] [p4:pf (@ B form (@ A (shadowed_0 B) R x3) y)] eq_rel_congr A Ha B Hb R R' x3 y p1 p2 p3 p4).
eq_rel_e2 : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {R:tm (rel X1 X2)} {R':tm (rel X1 X2)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb) R) R') -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R') R) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [R:tm (rel X1 X2)] [R':tm (rel X1 X2)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] [p3:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb) R) R')] eq_rel_e1 X1 Ha X2 Hb R' R p1 p2 (eqv_symm (rel X1 X2) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb) R R' (valideqv_eq_rel X1 Ha X2 Hb p1 p2) p3).
subrel_congr : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {R1:tm (rel X1 X2)} {R1':tm (rel X1 X2)} {R2:tm (rel X1 X2)} {R2':tm (rel X1 X2)} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R1) R1') -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R2) R2') -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1') R2') -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1) R2) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [R1:tm (rel X1 X2)] [R1':tm (rel X1 X2)] [R2:tm (rel X1 X2)] [R2':tm (rel X1 X2)] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R1) R1')] [p8:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R2) R2')] [p10:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1') R2')] cut (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1) R1') (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1) R2) (eq_rel_e1 X1 Eq1 X2 Eq2 R1 R1' p2 p4 p6) ([p14:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1) R1')] cut (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R2') R2) (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1) R2) (eq_rel_e2 X1 Eq1 X2 Eq2 R2 R2' p2 p4 p8) ([p16:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R2') R2)] subrel_trans X1 X2 R1 R1' R2 p14 (subrel_trans X1 X2 R1' R2' R2 p10 p16))).
eq_rel3_e : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {X3:tp} {Eq3:tm (eqrel X3)} {R1:tm (rel3 X1 X2 X3)} {R2:tm (rel3 X1 X2 X3)} {X:tm X1} {Y:tm X2} {Z:tm X3} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (eqrel X3) form (valideqv X3) Eq3) -> pf (@ (rel3 X1 X2 X3) form (@ (rel3 X1 X2 X3) (shadowed_0 (rel3 X1 X2 X3)) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) Eq1) Eq2) Eq3) R1) R2) -> pf (@ form form (@ form (shadowed_0 form) eq_form (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R1 X) Y) Z)) (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R2 X) Y) Z)) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [X3:tp] [Eq3:tm (eqrel X3)] [R1:tm (rel3 X1 X2 X3)] [R2:tm (rel3 X1 X2 X3)] [X:tm X1] [Y:tm X2] [Z:tm X3] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (eqrel X3) form (valideqv X3) Eq3)] [p8:pf (@ (rel3 X1 X2 X3) form (@ (rel3 X1 X2 X3) (shadowed_0 (rel3 X1 X2 X3)) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) Eq1) Eq2) Eq3) R1) R2)] cut (@ (rel X2 X3) form (@ (rel X2 X3) (shadowed_0 (rel X2 X3)) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Eq2) Eq3) (@ X1 (rel X2 X3) R1 X)) (@ X1 (rel X2 X3) R2 X)) (@ form form (@ form (shadowed_0 form) eq_form (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R1 X) Y) Z)) (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R2 X) Y) Z)) (eq+_e2 X1 Eq1 (rel X2 X3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Eq2) Eq3) R1 R2 X p2 (valideqv_eq_rel X2 Eq2 X3 Eq3 p4 p6) (def2_congr1 (rel3 X1 X2 X3) (rel3 X1 X2 X3) (@ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) Eq1) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Eq2) Eq3)) (@ (eqrel X3) (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (@ (eqrel X2) (eqrel X3 arrow rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (lam3 (eqrel X1) (eqrel X2) (eqrel X3) (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] @ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) x3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) x4) x5))) Eq1) Eq2) Eq3) R1 R2 (symm (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (@ (eqrel X3) (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (@ (eqrel X2) (eqrel X3 arrow rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (lam3 (eqrel X1) (eqrel X2) (eqrel X3) (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] @ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) x3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) x4) x5))) Eq1) Eq2) Eq3) (@ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) Eq1) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Eq2) Eq3)) (beta3 (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] @ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) x3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) x4) x5)) Eq1 Eq2 Eq3)) p8)) ([p10:pf (@ (rel X2 X3) form (@ (rel X2 X3) (shadowed_0 (rel X2 X3)) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Eq2) Eq3) (@ X1 (rel X2 X3) R1 X)) (@ X1 (rel X2 X3) R2 X))] eq_rel_e X2 Eq2 X3 Eq3 (@ X1 (rel X2 X3) R1 X) (@ X1 (rel X2 X3) R2 X) Y Z p4 p6 p10).
eq_rel4_i : {X1:tp} {Eq2:tm (eqrel X1)} {X2:tp} {Eq3:tm (eqrel X2)} {X3:tp} {Eq4:tm (eqrel X3)} {X4:tp} {R1:tm (X4 arrow X1 arrow X2 arrow X3 arrow form)} {R2:tm (X4 arrow X1 arrow X2 arrow X3 arrow form)} {Eq1:tm (eqrel X4)} pf (@ (eqrel X1) form (valideqv X1) Eq2) -> pf (@ (eqrel X2) form (valideqv X2) Eq3) -> pf (@ (eqrel X3) form (valideqv X3) Eq4) -> ({x3:tm X4} {x4:tm X1} {x5:tm X2} {x6:tm X3} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (@ X4 (X1 arrow X2 arrow X3 arrow form) R1 x3) x4) x5) x6)) (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (@ X4 (X1 arrow X2 arrow X3 arrow form) R2 x3) x4) x5) x6))) -> pf (@ (rel4 X4 X1 X2 X3) form (@ (rel4 X4 X1 X2 X3) (shadowed_0 (rel4 X4 X1 X2 X3)) (@ (eqrel X3) (eqrel (rel4 X4 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel4 X4 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel4 X4 X1 X2 X3)) (@ (eqrel X4) (eqrel X1 arrow eqrel X2 arrow eqrel X3 arrow eqrel (rel4 X4 X1 X2 X3)) (eq_rel4 X4 X1 X2 X3) Eq1) Eq2) Eq3) Eq4) R1) R2) = [X1:tp] [Eq2:tm (eqrel X1)] [X2:tp] [Eq3:tm (eqrel X2)] [X3:tp] [Eq4:tm (eqrel X3)] [X4:tp] [R1:tm (X4 arrow X1 arrow X2 arrow X3 arrow form)] [R2:tm (X4 arrow X1 arrow X2 arrow X3 arrow form)] [Eq1:tm (eqrel X4)] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq3)] [p6:pf (@ (eqrel X3) form (valideqv X3) Eq4)] [p8:{x7:tm X4} {x8:tm X1} {x3:tm X2} {x4:tm X3} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (@ X4 (X1 arrow X2 arrow X3 arrow form) R1 x7) x8) x3) x4)) (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (@ X4 (X1 arrow X2 arrow X3 arrow form) R2 x7) x8) x3) x4))] def2_congr1 (X4 arrow rel3 X1 X2 X3) (X4 arrow rel3 X1 X2 X3) (@ (eqrel X3) ((X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) (@ (eqrel X2) (eqrel X3 arrow (X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow (X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) (@ (eqrel X4) (eqrel X1 arrow eqrel X2 arrow eqrel X3 arrow (X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) (lam4 (eqrel X4) (eqrel X1) (eqrel X2) (eqrel X3) ((X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) ([x3:tm (eqrel X4)] [x4:tm (eqrel X1)] [x5:tm (eqrel X2)] [x6:tm (eqrel X3)] @ (eqrel (rel3 X1 X2 X3)) (eqrel (X4 arrow rel3 X1 X2 X3)) (@ (eqrel X4) (eqrel (rel3 X1 X2 X3) arrow eqrel (X4 arrow rel3 X1 X2 X3)) (eq+ X4 (rel3 X1 X2 X3)) x3) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) x4) x5) x6))) Eq1) Eq2) Eq3) Eq4) (@ (eqrel (rel3 X1 X2 X3)) (eqrel (X4 arrow rel3 X1 X2 X3)) (@ (eqrel X4) (eqrel (rel3 X1 X2 X3) arrow eqrel (X4 arrow rel3 X1 X2 X3)) (eq+ X4 (rel3 X1 X2 X3)) Eq1) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) Eq2) Eq3) Eq4)) R1 R2 (beta4 ((X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) (eqrel X3) (eqrel X2) (eqrel X1) (eqrel X4) ([x3:tm (eqrel X4)] [x4:tm (eqrel X1)] [x5:tm (eqrel X2)] [x6:tm (eqrel X3)] @ (eqrel (rel3 X1 X2 X3)) (eqrel (X4 arrow rel3 X1 X2 X3)) (@ (eqrel X4) (eqrel (rel3 X1 X2 X3) arrow eqrel (X4 arrow rel3 X1 X2 X3)) (eq+ X4 (rel3 X1 X2 X3)) x3) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) x4) x5) x6)) Eq1 Eq2 Eq3 Eq4) (eq+_i2 (rel3 X1 X2 X3) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) Eq2) Eq3) Eq4) X4 R1 R2 Eq1 (valideqv_eq_rel3 X1 Eq2 X2 Eq3 X3 Eq4 p2 p4 p6) ([x9:tm X4] eq_rel3_i X2 Eq3 X3 Eq4 X1 (@ X4 (X1 arrow X2 arrow X3 arrow form) R1 x9) (@ X4 (X1 arrow X2 arrow X3 arrow form) R2 x9) Eq2 p4 p6 ([x10:tm X1] [x3:tm X2] [x4:tm X3] p8 x9 x10 x3 x4))).
eq_rel4_e : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {X3:tp} {Eq3:tm (eqrel X3)} {X4:tp} {Eq4:tm (eqrel X4)} {R1:tm (rel4 X1 X2 X3 X4)} {R2:tm (rel4 X1 X2 X3 X4)} {X5:tm X1} {X6:tm X2} {X7:tm X3} {X8:tm X4} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (eqrel X3) form (valideqv X3) Eq3) -> pf (@ (eqrel X4) form (valideqv X4) Eq4) -> pf (@ (rel4 X1 X2 X3 X4) form (@ (rel4 X1 X2 X3 X4) (shadowed_0 (rel4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (eq_rel4 X1 X2 X3 X4) Eq1) Eq2) Eq3) Eq4) R1) R2) -> pf (@ form form (@ form (shadowed_0 form) eq_form (@ X4 form (@ X3 (shadowed_0 X4) (@ X2 (rel X3 X4) (@ X1 (rel3 X2 X3 X4) R1 X5) X6) X7) X8)) (@ X4 form (@ X3 (shadowed_0 X4) (@ X2 (rel X3 X4) (@ X1 (rel3 X2 X3 X4) R2 X5) X6) X7) X8)) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [X3:tp] [Eq3:tm (eqrel X3)] [X4:tp] [Eq4:tm (eqrel X4)] [R1:tm (rel4 X1 X2 X3 X4)] [R2:tm (rel4 X1 X2 X3 X4)] [X5:tm X1] [X6:tm X2] [X7:tm X3] [X8:tm X4] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (eqrel X3) form (valideqv X3) Eq3)] [p8:pf (@ (eqrel X4) form (valideqv X4) Eq4)] [p10:pf (@ (rel4 X1 X2 X3 X4) form (@ (rel4 X1 X2 X3 X4) (shadowed_0 (rel4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (eq_rel4 X1 X2 X3 X4) Eq1) Eq2) Eq3) Eq4) R1) R2)] cut (@ (rel3 X2 X3 X4) form (@ (rel3 X2 X3 X4) (shadowed_0 (rel3 X2 X3 X4)) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) Eq2) Eq3) Eq4) (@ X1 (rel3 X2 X3 X4) R1 X5)) (@ X1 (rel3 X2 X3 X4) R2 X5)) (@ form form (@ form (shadowed_0 form) eq_form (@ X4 form (@ X3 (shadowed_0 X4) (@ X2 (rel X3 X4) (@ X1 (rel3 X2 X3 X4) R1 X5) X6) X7) X8)) (@ X4 form (@ X3 (shadowed_0 X4) (@ X2 (rel X3 X4) (@ X1 (rel3 X2 X3 X4) R2 X5) X6) X7) X8)) (eq+_e2 X1 Eq1 (rel3 X2 X3 X4) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) Eq2) Eq3) Eq4) R1 R2 X5 p2 (valideqv_eq_rel3 X2 Eq2 X3 Eq3 X4 Eq4 p4 p6 p8) (def2_congr1 (rel4 X1 X2 X3 X4) (rel4 X1 X2 X3 X4) (@ (eqrel (rel3 X2 X3 X4)) (eqrel (X1 arrow rel3 X2 X3 X4)) (@ (eqrel X1) (eqrel (rel3 X2 X3 X4) arrow eqrel (X1 arrow rel3 X2 X3 X4)) (eq+ X1 (rel3 X2 X3 X4)) Eq1) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) Eq2) Eq3) Eq4)) (@ (eqrel X4) (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X3) (eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (lam4 (eqrel X1) (eqrel X2) (eqrel X3) (eqrel X4) (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] @ (eqrel (rel3 X2 X3 X4)) (eqrel (X1 arrow rel3 X2 X3 X4)) (@ (eqrel X1) (eqrel (rel3 X2 X3 X4) arrow eqrel (X1 arrow rel3 X2 X3 X4)) (eq+ X1 (rel3 X2 X3 X4)) x3) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) x4) x5) x6))) Eq1) Eq2) Eq3) Eq4) R1 R2 (symm (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X4) (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X3) (eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (lam4 (eqrel X1) (eqrel X2) (eqrel X3) (eqrel X4) (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] @ (eqrel (rel3 X2 X3 X4)) (eqrel (X1 arrow rel3 X2 X3 X4)) (@ (eqrel X1) (eqrel (rel3 X2 X3 X4) arrow eqrel (X1 arrow rel3 X2 X3 X4)) (eq+ X1 (rel3 X2 X3 X4)) x3) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) x4) x5) x6))) Eq1) Eq2) Eq3) Eq4) (@ (eqrel (rel3 X2 X3 X4)) (eqrel (X1 arrow rel3 X2 X3 X4)) (@ (eqrel X1) (eqrel (rel3 X2 X3 X4) arrow eqrel (X1 arrow rel3 X2 X3 X4)) (eq+ X1 (rel3 X2 X3 X4)) Eq1) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) Eq2) Eq3) Eq4)) (beta4 (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (eqrel X4) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] @ (eqrel (rel3 X2 X3 X4)) (eqrel (X1 arrow rel3 X2 X3 X4)) (@ (eqrel X1) (eqrel (rel3 X2 X3 X4) arrow eqrel (X1 arrow rel3 X2 X3 X4)) (eq+ X1 (rel3 X2 X3 X4)) x3) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) x4) x5) x6)) Eq1 Eq2 Eq3 Eq4)) p10)) ([p20:pf (@ (rel3 X2 X3 X4) form (@ (rel3 X2 X3 X4) (shadowed_0 (rel3 X2 X3 X4)) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) Eq2) Eq3) Eq4) (@ X1 (rel3 X2 X3 X4) R1 X5)) (@ X1 (rel3 X2 X3 X4) R2 X5))] eq_rel3_e X2 Eq2 X3 Eq3 X4 Eq4 (@ X1 (rel3 X2 X3 X4) R1 X5) (@ X1 (rel3 X2 X3 X4) R2 X5) X6 X7 X8 p4 p6 p8 p20).
rel_intersect_refl : {X1:tp} {Eq1:tm (rel X1 X1)} {Eq2:tm (rel X1 X1)} {X:tm X1} pf (@ (rel X1 X1) form (reflexive X1) Eq1) -> pf (@ (rel X1 X1) form (reflexive X1) Eq2) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) X) = [X1:tp] [Eq1:tm (rel X1 X1)] [Eq2:tm (rel X1 X1)] [X:tm X1] [p1:pf (@ (rel X1 X1) form (reflexive X1) Eq1)] [p2:pf (@ (rel X1 X1) form (reflexive X1) Eq2)] rel_intersect_i X1 X1 Eq1 X X Eq2 (reflexive_e X1 Eq1 X p1) (reflexive_e X1 Eq2 X p2).
rel_intersect_reflexive : {T:tp} {Eq1:tm (rel T T)} {Eq2:tm (rel T T)} pf (@ (rel T T) form (reflexive T) Eq1) -> pf (@ (rel T T) form (reflexive T) Eq2) -> pf (@ (rel T T) form (reflexive T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2)) = [T:tp] [Eq1:tm (rel T T)] [Eq2:tm (rel T T)] [p1:pf (@ (rel T T) form (reflexive T) Eq1)] [p2:pf (@ (rel T T) form (reflexive T) Eq2)] reflexive_i T (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) ([x3:tm T] rel_intersect_refl T Eq1 Eq2 x3 p1 p2).
rel_intersect_symm : {X1:tp} {Eq1:tm (rel X1 X1)} {Eq2:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (@ (rel X1 X1) form (symmetric X1) Eq1) -> pf (@ (rel X1 X1) form (symmetric X1) Eq2) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) Y) X) = [X1:tp] [Eq1:tm (rel X1 X1)] [Eq2:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (rel X1 X1) form (symmetric X1) Eq1)] [p2:pf (@ (rel X1 X1) form (symmetric X1) Eq2)] [p3:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) Y)] rel_intersect_i X1 X1 Eq1 Y X Eq2 (symmetric_e X1 Eq1 X Y p1 (rel_intersect_e1 X1 X1 Eq1 Eq2 X Y p3)) (symmetric_e X1 Eq2 X Y p2 (rel_intersect_e2 X1 X1 Eq1 Eq2 X Y p3)).
rel_intersect_symmetric : {T:tp} {Eq1:tm (rel T T)} {Eq2:tm (rel T T)} pf (@ (rel T T) form (symmetric T) Eq1) -> pf (@ (rel T T) form (symmetric T) Eq2) -> pf (@ (rel T T) form (symmetric T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2)) = [T:tp] [Eq1:tm (rel T T)] [Eq2:tm (rel T T)] [p1:pf (@ (rel T T) form (symmetric T) Eq1)] [p2:pf (@ (rel T T) form (symmetric T) Eq2)] symmetric_i T (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) ([x3:tm T] [y:tm T] [x4:pf (@ T form (@ T (shadowed_0 T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) x3) y)] rel_intersect_symm T Eq1 Eq2 x3 y p1 p2 x4).
rel_intersect_trans : {X1:tp} {Eq1:tm (rel X1 X1)} {Eq2:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (@ (rel X1 X1) form (transitive X1) Eq1) -> pf (@ (rel X1 X1) form (transitive X1) Eq2) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) Y) Z) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) Z) = [X1:tp] [Eq1:tm (rel X1 X1)] [Eq2:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [p1:pf (@ (rel X1 X1) form (transitive X1) Eq1)] [p2:pf (@ (rel X1 X1) form (transitive X1) Eq2)] [p3:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) Y)] [p4:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) Y) Z)] rel_intersect_i X1 X1 Eq1 X Z Eq2 (transitive_e X1 Eq1 X Y Z p1 (rel_intersect_e1 X1 X1 Eq1 Eq2 X Y p3) (rel_intersect_e1 X1 X1 Eq1 Eq2 Y Z p4)) (transitive_e X1 Eq2 X Y Z p2 (rel_intersect_e2 X1 X1 Eq1 Eq2 X Y p3) (rel_intersect_e2 X1 X1 Eq1 Eq2 Y Z p4)).
rel_intersect_transitive : {T:tp} {Eq1:tm (rel T T)} {Eq2:tm (rel T T)} pf (@ (rel T T) form (transitive T) Eq1) -> pf (@ (rel T T) form (transitive T) Eq2) -> pf (@ (rel T T) form (transitive T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2)) = [T:tp] [Eq1:tm (rel T T)] [Eq2:tm (rel T T)] [p1:pf (@ (rel T T) form (transitive T) Eq1)] [p2:pf (@ (rel T T) form (transitive T) Eq2)] transitive_i T (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) ([x3:tm T] [y:tm T] [z1:tm T] [x4:pf (@ T form (@ T (shadowed_0 T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) x3) y)] [x5:pf (@ T form (@ T (shadowed_0 T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) y) z1)] rel_intersect_trans T Eq1 Eq2 x3 y z1 p1 p2 x4 x5).
valideqv_rel_intersect : {X1:tp} {Eq1:tm (eqrel X1)} {Eq2:tm (eqrel X1)} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X1) form (valideqv X1) Eq2) -> pf (@ (eqrel X1) form (valideqv X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2)) = [X1:tp] [Eq1:tm (eqrel X1)] [Eq2:tm (eqrel X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq2)] valideqv_i X1 (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) (rel_intersect_reflexive X1 Eq1 Eq2 (valideqv_e1 X1 Eq1 p1) (valideqv_e1 X1 Eq2 p2)) (rel_intersect_symmetric X1 Eq1 Eq2 (valideqv_e2 X1 Eq1 p1) (valideqv_e2 X1 Eq2 p2)) (rel_intersect_transitive X1 Eq1 Eq2 (valideqv_e3 X1 Eq1 p1) (valideqv_e3 X1 Eq2 p2)).
ncomp_rel : {T:tp} tm (rel T T arrow num arrow rel T T) = [T:tp] lam4 (T arrow T arrow form) num T T form ([r:tm (T arrow T arrow form)] [n:tm num] [x3:tm T] [y:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr r) zero) z1) z1) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr r) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) r z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr r) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr r) n) x3) y)).
kleene_star : {T:tp} tm ((T arrow T arrow form) arrow T arrow T arrow form) = [T:tp] lam (T arrow T arrow form) (T arrow T arrow form) ([R:tm (T arrow T arrow form)] lam2 T T form ([V:tm T] [W:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) S Z) Z) imp forall3 T T T ([X:tm T] [Y:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X) Y imp @ T form (@ T (T arrow form) S Y) Z imp @ T form (@ T (T arrow form) S X) Z) imp @ T form (@ T (T arrow form) S V) W))).
ncomp_rel_isNat_pred : {T:tp} tm (rel T T arrow num arrow rel T T) = [T:tp] lam4 (rel T T) num T T form ([r:tm (rel T T)] [n:tm num] [x3:tm T] [y:tm T] isNat n).
ncomp_rel_isNat : {T:tp} {R:tm (rel T T)} {N:tm num} {X:tm T} {Y:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y) -> pf (isNat N) = [T:tp] [R:tm (rel T T)] [N:tm num] [X:tm T] [Y:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y)] def4_e T T num (T arrow T arrow form) ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] isNat x4) R N X Y (imp2_e (forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_isNat_pred T) R) zero) z1) z1)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_isNat_pred T) R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_isNat_pred T) R) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_isNat_pred T) R) N) X) Y) (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) N) X) Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z3) z3) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R N X Y p1) (ncomp_rel_isNat_pred T)) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] isNat x5)) R) zero) x3) x3) ([z4:tm T] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] isNat x4) R zero z4 z4 n_zero)) (forall4_i num T T T ([x3:tm num] [x4:tm T] [x5:tm T] [x6:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_isNat_pred T) R) (pred x3)) x4) x5 imp @ T form (@ T (shadowed_0 T) R x5) x6 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x7:tm (T arrow T arrow form)] [x8:tm num] [x9:tm T] [x10:tm T] isNat x8)) R) x3) x4) x6) ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] imp4_i (isNat n') (gt n' zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_isNat_pred T) R) (pred n')) z1) z2) (@ T form (@ T (shadowed_0 T) R z2) z3) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] isNat x4)) R) n') z1) z3) ([p2:pf (isNat n')] [p3:pf (gt n' zero)] [p4:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_isNat_pred T) R) (pred n')) z1) z2)] [p5:pf (@ T form (@ T (shadowed_0 T) R z2) z3)] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] isNat x4) R n' z1 z3 p2)))).
ncomp_rel_zero : {T:tp} {R:tm (rel T T)} {X:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) X) X) = [T:tp] [R:tm (rel T T)] [X:tm T] def4_i (rel T T) num T T ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z1) z1) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R zero X X (forall_i (rel T T arrow num arrow rel T T) ([x3:tm (rel T T arrow num arrow rel T T)] forall T ([z2:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) n') z1) z3) imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) zero) X) X) ([nr:tm (rel T T arrow num arrow rel T T)] imp2_i (forall T ([z3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) z3) z3)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) n') z1) z3)) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) X) X) ([p1:pf (forall T ([z4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) z4) z4))] [p2:pf (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) n') z1) z3))] forall_e T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) x3) x3) p1 X))).
ncomp_rel_succ : {T:tp} {R:tm (rel T T)} {N:tm num} {X:tm T} {Y:tm T} {Z:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y) -> pf (@ T form (@ T (shadowed_0 T) R Y) Z) -> pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (succ N)) X) Z) = [T:tp] [R:tm (rel T T)] [N:tm num] [X:tm T] [Y:tm T] [Z:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y)] [p2:pf (@ T form (@ T (shadowed_0 T) R Y) Z)] def4_i (rel T T) num T T ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z1) z1) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R (succ N) X Z (forall_i (rel T T arrow num arrow rel T T) ([x3:tm (rel T T arrow num arrow rel T T)] forall T ([z2:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) n') z1) z3) imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) (succ N)) X) Z) ([nr:tm (rel T T arrow num arrow rel T T)] imp2_i (forall T ([z3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) z3) z3)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) n') z1) z3)) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (succ N)) X) Z) ([p3:pf (forall T ([z4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) z4) z4))] [p4:pf (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) n') z1) z3))] imp4_e (isNat (succ N)) (gt (succ N) zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred (succ N))) X) Y) (@ T form (@ T (shadowed_0 T) R Y) Z) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (succ N)) X) Z) (forall4_e num T T T ([x3:tm num] [x4:tm T] [x5:tm T] [x6:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred x3)) x4) x5 imp @ T form (@ T (shadowed_0 T) R x5) x6 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) x3) x4) x6) p4 (succ N) X Y Z) (isNat_succ_i N (ncomp_rel_isNat T R N X Y p1)) (trans_gt_geq (succ N) N zero (succ_greater N) (isNat->geq_zero N (ncomp_rel_isNat T R N X Y p1))) (congr num (pred (succ N)) N ([z5:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) z5) X) Y) (predsucc N) (imp2_e (forall T ([z6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr R) zero) z6) z6)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr R) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr R) N) X) Y) (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z7:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) zero) z7) z7) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) N) X) Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr1:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z8:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr1 x3) zero) z8) z8) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr1 x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr1 x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr1 x3) x4) x5) x6)) R N X Y p1) nr) p3 p4)) p2))).
ncomp_rel_one : {X1:tp} {R:tm (X1 arrow X1 arrow form)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) one) X) Y) = [X1:tp] [R:tm (X1 arrow X1 arrow form)] [X:tm X1] [Y:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) R X) Y)] congr num one (+ zero one) ([z1:tm num] @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) z1) X) Y) (symm num (+ zero one) one (zero_plus one)) (ncomp_rel_succ X1 R zero X X Y (ncomp_rel_zero X1 R X) p1).
ncomp_rel_inv_pred : {T:tp} tm (rel T T arrow num arrow rel T T) = [T:tp] lam4 (rel T T) num T T form ([r:tm (rel T T)] [n:tm num] [x3:tm T] [y:tm T] eq num n zero and eq T x3 y or gt n zero and exists T ([z1:tm T] @ T form (@ T (shadowed_0 T) r x3) z1 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) (pred n)) z1) y)).
ncomp_rel_inv : {T:tp} {R:tm (rel T T)} {N:tm num} {X:tm T} {Y:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y) -> pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_inv_pred T) R) N) X) Y) = [T:tp] [R:tm (rel T T)] [N:tm num] [X:tm T] [Y:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y)] imp2_e (forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_inv_pred T) R) zero) z1) z1)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_inv_pred T) R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_inv_pred T) R) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_inv_pred T) R) N) X) Y) (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) N) X) Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z3) z3) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R N X Y p1) (ncomp_rel_inv_pred T)) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] eq num x5 zero and eq T x6 x7 or gt x5 zero and exists T ([z4:tm T] @ T form (@ T (shadowed_0 T) x4 x6) z4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) (pred x5)) z4) x7))) R) zero) x3) x3) ([z5:tm T] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] eq num x4 zero and eq T x5 x6 or gt x4 zero and exists T ([z6:tm T] @ T form (@ T (shadowed_0 T) x3 x5) z6 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (pred x4)) z6) x6)) R zero z5 z5 (or_i1 (== num zero zero and == T z5 z5) (gt zero zero and exists T ([z7:tm T] @ T form (@ T (shadowed_0 T) R z5) z7 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred zero)) z7) z5)) (and_i (== num zero zero) (== T z5 z5) (refl num zero) (refl T z5))))) (forall4_i num T T T ([x3:tm num] [x4:tm T] [x5:tm T] [x6:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_inv_pred T) R) (pred x3)) x4) x5 imp @ T form (@ T (shadowed_0 T) R x5) x6 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x7:tm (T arrow T arrow form)] [x8:tm num] [x9:tm T] [x10:tm T] eq num x8 zero and eq T x9 x10 or gt x8 zero and exists T ([z8:tm T] @ T form (@ T (shadowed_0 T) x7 x9) z8 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) (pred x8)) z8) x10))) R) x3) x4) x6) ([n:tm num] [z1:tm T] [z2:tm T] [z3:tm T] imp4_i (isNat n) (gt n zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_inv_pred T) R) (pred n)) z1) z2) (@ T form (@ T (shadowed_0 T) R z2) z3) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] eq num x4 zero and eq T x5 x6 or gt x4 zero and exists T ([z9:tm T] @ T form (@ T (shadowed_0 T) x3 x5) z9 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (pred x4)) z9) x6))) R) n) z1) z3) ([p2:pf (isNat n)] [p3:pf (gt n zero)] [p4:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_inv_pred T) R) (pred n)) z1) z2)] [p5:pf (@ T form (@ T (shadowed_0 T) R z2) z3)] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] eq num x4 zero and eq T x5 x6 or gt x4 zero and exists T ([z10:tm T] @ T form (@ T (shadowed_0 T) x3 x5) z10 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (pred x4)) z10) x6)) R n z1 z3 (or_i2 (gt n zero and exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) x3) z3)) (eq num n zero and eq T z1 z3) (and_i (gt n zero) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) x3) z3)) p3 (or_e (eq num (pred n) zero and eq T z1 z2) (gt (pred n) zero and exists T ([z11:tm T] @ T form (@ T (shadowed_0 T) R z1) z11 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z11) z2)) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) x3) z3)) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] eq num x4 zero and eq T x5 x6 or gt x4 zero and exists T ([z12:tm T] @ T form (@ T (shadowed_0 T) x3 x5) z12 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (pred x4)) z12) x6)) R (pred n) z1 z2 p4) ([p6:pf (eq num (pred n) zero and eq T z1 z2)] exists_i T ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) x3) z3) z3 (and_i (@ T form (@ T (shadowed_0 T) R z1) z3) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) z3) z3) (congr T z1 z2 ([z13:tm T] @ T form (@ T (shadowed_0 T) R z13) z3) (and_e2 (eq num (pred n) zero) (eq T z1 z2) p6) p5) (congr num (pred n) zero ([z14:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z14) z3) z3) (and_e1 (eq num (pred n) zero) (eq T z1 z2) p6) (ncomp_rel_zero T R z3)))) ([p6:pf (gt (pred n) zero and exists T ([z15:tm T] @ T form (@ T (shadowed_0 T) R z1) z15 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z15) z2))] exists_ei T ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) x3) z2) ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) x3) z3) (and_e2 (gt (pred n) zero) (exists T ([z16:tm T] @ T form (@ T (shadowed_0 T) R z1) z16 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z16) z2)) p6) ([z17:tm T] [p7:pf (@ T form (@ T (shadowed_0 T) R z1) z17 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z17) z2)] and_i (@ T form (@ T (shadowed_0 T) R z1) z17) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) z17) z3) (and_e1 (@ T form (@ T (shadowed_0 T) R z1) z17) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z17) z2) p7) (congr num (pred n) (succ (pred (pred n))) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z17) z3) (symm num (succ (pred (pred n))) (pred n) (succpred (pred n))) (ncomp_rel_succ T R (pred (pred n)) z17 z2 z3 (and_e2 (@ T form (@ T (shadowed_0 T) R z1) z17) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z17) z2) p7) p5)))))))))).
ncomp_rel_zero_inv : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) zero) X) Y imp eq X1 X Y) = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] imp_i (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) zero) X) Y) (eq X1 X Y) ([p1:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) zero) X) Y)] or_e (eq num zero zero and eq X1 X Y) (gt zero zero and exists X1 ([z1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z1 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred zero)) z1) Y)) (eq X1 X Y) (def4_e X1 X1 num (rel X1 X1) ([x3:tm (rel X1 X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] eq num x4 zero and eq X1 x5 x6 or gt x4 zero and exists X1 ([z2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) z2 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) x3) (pred x4)) z2) x6)) R zero X Y (ncomp_rel_inv X1 R zero X Y p1)) ([p2:pf (eq num zero zero and eq X1 X Y)] and_e2 (eq num zero zero) (eq X1 X Y) p2) ([p2:pf (gt zero zero and exists X1 ([z3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z3 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred zero)) z3) Y))] false_e (eq X1 X Y) (not_e (geq zero zero) (and_e1 (gt zero zero) (exists X1 ([z4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z4 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred zero)) z4) Y)) p2) (ord_reflexivity zero)))).
ncomp_rel_gt_zero_inv : {N:tnum} {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (gt N zero) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) N) X) Y) -> pf (exists X1 ([z1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z1 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z1) Y)) = [N:tnum] [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [p1:pf (gt N zero)] [p2:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) N) X) Y)] or_e (eq num N zero and eq X1 X Y) (gt N zero and exists X1 ([z2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z2 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z2) Y)) (exists X1 ([z3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z3 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z3) Y)) (def4_e X1 X1 num (rel X1 X1) ([x3:tm (rel X1 X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] eq num x4 zero and eq X1 x5 x6 or gt x4 zero and exists X1 ([z4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) z4 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) x3) (pred x4)) z4) x6)) R N X Y (ncomp_rel_inv X1 R N X Y p2)) ([p3:pf (eq num N zero and eq X1 X Y)] false_e (exists X1 ([z5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z5 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z5) Y)) (not_e (eq num N zero) (gt->neq N zero p1) (and_e1 (eq num N zero) (eq X1 X Y) p3))) ([p3:pf (gt N zero and exists X1 ([z6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z6 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z6) Y))] and_e2 (gt N zero) (exists X1 ([z7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z7 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z7) Y)) p3).
ncomp_rel_one_inv : {T:tp} {R:tm (rel T T)} {X:tm T} {Y:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) one) X) Y imp @ T form (@ T (shadowed_0 T) R X) Y) = [T:tp] [R:tm (rel T T)] [X:tm T] [Y:tm T] imp_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) one) X) Y) (@ T form (@ T (shadowed_0 T) R X) Y) ([p1:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) one) X) Y)] exists_e T ([x3:tm T] @ T form (@ T (shadowed_0 T) R X) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (+ zero (const 1)))) x3) Y) (@ T form (@ T (shadowed_0 T) R X) Y) (ncomp_rel_gt_zero_inv (+ zero (const 1)) T R X Y (gt_cong (const 1) (+ zero (const 1)) (const 0) (const 0) (symm num (+ zero (const 1)) (const 1) (zero_plus (const 1))) (refl num (const 0)) greater1_0) (congr num (+ zero one) one ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') X) Y) (zero_plus one) p1)) ([z1:tm T] [p2:pf (@ T form (@ T (shadowed_0 T) R X) z1 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ zero))) z1) Y)] congr T Y z1 ([z':tm T] @ T form (@ T (shadowed_0 T) R X) z') (symm T z1 Y (imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) z1) Y) (eq T z1 Y) (ncomp_rel_zero_inv T R z1 Y) (congr num zero (pred (succ zero)) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z1) Y) (symm num (pred (succ zero)) zero (predsucc zero)) (and_e2 (@ T form (@ T (shadowed_0 T) R X) z1) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ zero))) z1) Y) p2)))) (and_e1 (@ T form (@ T (shadowed_0 T) R X) z1) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ zero))) z1) Y) p2))).
ncomp_rel_compose_pred : {T:tp} {N':tm num} {X':tm T} tm (rel T T arrow num arrow rel T T) = [T:tp] [N':tm num] [X':tm T] lam4 (rel T T) num T T form ([r:tm (rel T T)] [n:tm num] [x3:tm T] [y:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) N') X') x3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) (plus N' n)) X') y).
ncomp_rel_compose : {T:tp} {R:tm (rel T T)} {N':tm num} {X':tm T} {X:tm T} {N:tm num} {Y:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') X) -> pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y) -> pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus N' N)) X') Y) = [T:tp] [R:tm (rel T T)] [N':tm num] [X':tm T] [X:tm T] [N:tm num] [Y:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') X)] [p2:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y)] cut (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_compose_pred T N' X') R) N) X) Y) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus N' N)) X') Y) (imp2_e (forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_compose_pred T N' X') R) zero) z1) z1)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_compose_pred T N' X') R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_compose_pred T N' X') R) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_compose_pred T N' X') R) N) X) Y) (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) N) X) Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z3) z3) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R N X Y p2) (ncomp_rel_compose_pred T N' X')) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) N') X') x6 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) (plus N' x5)) X') x7)) R) zero) x3) x3) ([z4:tm T] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) N') X') x5 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (plus N' x4)) X') x6) R zero z4 z4 (imp_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') z4) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ N' zero)) X') z4) ([p3:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') z4)] congr num (+ N' zero) N' ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') X') z4) (plus_zero N') p3)))) (forall4_i num T T T ([x3:tm num] [x4:tm T] [x5:tm T] [x6:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_compose_pred T N' X') R) (pred x3)) x4) x5 imp @ T form (@ T (shadowed_0 T) R x5) x6 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x7:tm (T arrow T arrow form)] [x8:tm num] [x9:tm T] [x10:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) N') X') x9 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) (plus N' x8)) X') x10)) R) x3) x4) x6) ([n:tm num] [z1:tm T] [z2:tm T] [z3:tm T] imp4_i (isNat n) (gt n zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_compose_pred T N' X') R) (pred n)) z1) z2) (@ T form (@ T (shadowed_0 T) R z2) z3) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) N') X') x5 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (plus N' x4)) X') x6)) R) n) z1) z3) ([p3:pf (isNat n)] [p4:pf (gt n zero)] [p5:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_compose_pred T N' X') R) (pred n)) z1) z2)] [p6:pf (@ T form (@ T (shadowed_0 T) R z2) z3)] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) N') X') x5 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (plus N' x4)) X') x6) R n z1 z3 (imp_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') z1) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ N' n)) X') z3) ([p7:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') z1)] congr num (+ N' n) (plus (plus N' (pred n)) one) ([z5:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z5) X') z3) (trans num (+ N' n) (+ N' (succ (pred n))) (plus (plus N' (pred n)) one) (plus_cong N' N' n (succ (pred n)) (refl num N') (symm num (succ (pred n)) n (succpred n))) (symm num (plus (plus N' (pred n)) one) (plus N' (plus (pred n) one)) (assoc_add N' (pred n) one))) (ncomp_rel_succ T R (plus N' (pred n)) X' z2 z3 (imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') z1) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus N' (pred n))) X') z2) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) N') X') x5 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (plus N' x4)) X') x6) R (pred n) z1 z2 p5) p7) p6))))))) ([p3:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_compose_pred T N' X') R) N) X) Y)] imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') X) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus N' N)) X') Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) N') X') x5 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (plus N' x4)) X') x6) R N X Y p3) p1).
ncomp_rel_split_pred : {T:tp} tm (rel T T arrow num arrow rel T T) = [T:tp] lam4 (rel T T) num T T form ([r:tm (rel T T)] [n:tm num] [x3:tm T] [y:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) n) x3) y and forall num ([j:tm num] isNat j imp geq n j imp exists T ([z1:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) j) x3) z1 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) (minus n j)) z1) y))).
ncomp_rel_split : {I:tnum} {J:tnum} {T:tp} {R:tm (rel T T)} {X:tm T} {Y:tm T} pf (isNat I) -> pf (isNat J) -> pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus I J)) X) Y) -> pf (exists T ([z1:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z1 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) J) z1) Y)) = [I:tnum] [J:tnum] [T:tp] [R:tm (rel T T)] [X:tm T] [Y:tm T] [p1:pf (isNat I)] [p2:pf (isNat J)] [p3:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus I J)) X) Y)] cut (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_split_pred T) R) (plus I J)) X) Y) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) J) x3) Y)) (imp2_e (forall T ([z2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_split_pred T) R) zero) z2) z2)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_split_pred T) R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_split_pred T) R) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_split_pred T) R) (plus I J)) X) Y) (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) zero) z3) z3) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (plus I J)) X) Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z4:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z4) z4) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R (plus I J) X Y p3) (ncomp_rel_split_pred T)) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and forall num ([j:tm num] isNat j imp geq x5 j imp exists T ([z5:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) j) x6) z5 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) (minus x5 j)) z5) x7)))) R) zero) x3) x3) ([z6:tm T] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j:tm num] isNat j imp geq x4 j imp exists T ([z7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j) x5) z7 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j)) z7) x6))) R zero z6 z6 (and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) z6) z6) (forall num ([x3:tm num] isNat x3 imp geq zero x3 imp exists T ([x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z6) x4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus zero x3)) x4) z6))) (ncomp_rel_zero T R z6) (forall_i num ([x3:tm num] isNat x3 imp geq zero x3 imp exists T ([x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z6) x4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus zero x3)) x4) z6)) ([j:tm num] imp2_i (isNat j) (geq zero j) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z6) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus zero j)) x3) z6)) ([p4:pf (isNat j)] [p5:pf (geq zero j)] cut (eqn j zero) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z6) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus zero j)) x3) z6)) (ord_antisymmetry j zero (and_e2 (isInt j) (geq j zero) p4) p5) ([p6:pf (eq num j zero)] exists_i T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z6) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus zero j)) x3) z6) z6 (and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z6) z6) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (- zero j)) z6) z6) (congr num j zero ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z6) z6) p6 (ncomp_rel_zero T R z6)) (congr num (- zero j) zero ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z6) z6) (eq_swap_a_b+c zero zero j (trans num zero (+ zero zero) (+ zero j) (symm num (+ zero zero) zero (zero_plus zero)) (plus_cong zero zero zero j (refl num zero) (symm num j zero p6)))) (ncomp_rel_zero T R z6)))))))))) (forall4_i num T T T ([x3:tm num] [x4:tm T] [x5:tm T] [x6:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_split_pred T) R) (pred x3)) x4) x5 imp @ T form (@ T (shadowed_0 T) R x5) x6 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x7:tm (T arrow T arrow form)] [x8:tm num] [x9:tm T] [x10:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) x8) x9) x10 and forall num ([j:tm num] isNat j imp geq x8 j imp exists T ([z8:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) j) x9) z8 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) (minus x8 j)) z8) x10)))) R) x3) x4) x6) ([n:tm num] [z1:tm T] [z2:tm T] [z3:tm T] imp4_i (isNat n) (gt n zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_split_pred T) R) (pred n)) z1) z2) (@ T form (@ T (shadowed_0 T) R z2) z3) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j:tm num] isNat j imp geq x4 j imp exists T ([z9:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j) x5) z9 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j)) z9) x6)))) R) n) z1) z3) ([p4:pf (isNat n)] [p5:pf (gt n zero)] [p6:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_split_pred T) R) (pred n)) z1) z2)] [p7:pf (@ T form (@ T (shadowed_0 T) R z2) z3)] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j:tm num] isNat j imp geq x4 j imp exists T ([z10:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j) x5) z10 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j)) z10) x6))) R n z1 z3 (cut (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) z1) z3) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) z1) z3 and forall num ([x3:tm num] isNat x3 imp geq n x3 imp exists T ([x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z1) x4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg x3))) x4) z3))) (congr num n (succ (pred n)) ([z11:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z11) z1) z3) (symm num (succ (pred n)) n (succpred n)) (ncomp_rel_succ T R (pred n) z1 z2 z3 (and_e1 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) z1) z2) (forall num ([j:tm num] isNat j imp geq (pred n) j imp exists T ([z12:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z12 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) z12) z2))) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j:tm num] isNat j imp geq x4 j imp exists T ([z13:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j) x5) z13 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j)) z13) x6))) R (pred n) z1 z2 p6)) p7)) ([p8:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) z1) z3)] and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) z1) z3) (forall num ([x3:tm num] isNat x3 imp geq n x3 imp exists T ([x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z1) x4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg x3))) x4) z3))) p8 (forall_i num ([x3:tm num] isNat x3 imp geq n x3 imp exists T ([x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z1) x4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg x3))) x4) z3)) ([j:tm num] imp2_i (isNat j) (geq n j) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) x3) z3)) ([p9:pf (isNat j)] [p10:pf (geq n j)] or_e (== num n j) (> n j) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) x3) z3)) (greater_or_eq n j p10) ([p11:pf (eq num n j)] exists_i T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) x3) z3) z3 (and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z3) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) z3) z3) (congr num j n ([z14:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z14) z1) z3) (symm num n j p11) p8) (congr num (+ n (neg j)) zero ([z15:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z15) z3) z3) (trans num (+ n (neg j)) (+ j (neg j)) zero (minus_cong n j j j p11 (refl num j)) (inv_add j)) (ncomp_rel_zero T R z3)))) ([p12:pf (gt n j)] exists_ei T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) x3) z2) ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) x3) z3) (imp2_e (isNat j) (geq (pred n) j) (exists T ([z16:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z16 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) z16) z2)) (forall_e num ([x3:tm num] isNat x3 imp geq (pred n) x3 imp exists T ([z17:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z1) z17 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) x3)) z17) z2)) (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) z1) z2) (forall num ([j1:tm num] isNat j1 imp geq (pred n) j1 imp exists T ([z18:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j1) z1) z18 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j1)) z18) z2))) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j2:tm num] isNat j2 imp geq x4 j2 imp exists T ([z19:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j2) x5) z19 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j2)) z19) x6))) R (pred n) z1 z2 p6)) j) p9 (greater_greater_eq_minus1 n j (and_e1 (isInt n) (geq n zero) p4) (and_e1 (isInt j) (geq j zero) p9) p12)) ([z20:tm T] [p11:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z20 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) z20) z2)] and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z20) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) z20) z3) (and_e1 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z20) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) z20) z2) p11) (congr num (+ n (neg j)) (plus (plus (pred n) (neg j)) one) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z20) z3) (trans num (+ n (neg j)) (plus (pred n) (plus one (neg j))) (plus (plus (pred n) (neg j)) one) (trans num (+ n (neg j)) (+ (succ (pred n)) (neg j)) (plus (pred n) (plus one (neg j))) (plus_cong n (succ (pred n)) (neg j) (neg j) (symm num (succ (pred n)) n (succpred n)) (refl num (neg j))) (assoc_add (pred n) one (neg j))) (trans num (+ (pred n) (plus one (neg j))) (+ (pred n) (plus (neg j) one)) (plus (plus (pred n) (neg j)) one) (plus_cong (pred n) (pred n) (plus one (neg j)) (plus (neg j) one) (refl num (pred n)) (comm_add one (neg j))) (symm num (plus (plus (pred n) (neg j)) one) (plus (pred n) (plus (neg j) one)) (assoc_add (pred n) (neg j) one)))) (ncomp_rel_succ T R (minus (pred n) j) z20 z2 z3 (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z20) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) z20) z2) p11) p7))))))))))))) ([p4:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_split_pred T) R) (plus I J)) X) Y)] exists_ei T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) I)) x3) Y) ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) J) x3) Y) (imp2_e (isNat I) (geq (plus I J) I) (exists T ([z21:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z21 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) I)) z21) Y)) (forall_e num ([x3:tm num] isNat x3 imp geq (plus I J) x3 imp exists T ([z22:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) X) z22 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) x3)) z22) Y)) (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus I J)) X) Y) (forall num ([j:tm num] isNat j imp geq (plus I J) j imp exists T ([z23:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) X) z23 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) j)) z23) Y))) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j:tm num] isNat j imp geq x4 j imp exists T ([z24:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j) x5) z24 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j)) z24) x6))) R (plus I J) X Y p4)) I) p1 (greatereq_plus_pos J I (and_e2 (isInt J) (geq J zero) p2))) ([z25:tm T] [p5:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z25 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) I)) z25) Y)] and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z25) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) J) z25) Y) (and_e1 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z25) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) I)) z25) Y) p5) (congr num J (- (+ I J) I) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z25) Y) (symm num (- (+ I J) I) J (cancel_a+b-a I J)) (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z25) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) I)) z25) Y) p5)))).
ord_extens : {T:tp} tm (rel T T arrow rel T T arrow form) = [T:tp] lam2 (rel T T) (rel T T) form ([r:tm (rel T T)] [f:tm (rel T T)] forall4 T T T T ([x3:tm T] [x':tm T] [y:tm T] [y':tm T] @ T form (@ T (shadowed_0 T) r x3) x' imp @ T form (@ T (shadowed_0 T) r y) y' imp @ T form (@ T (shadowed_0 T) f x') y' imp @ T form (@ T (shadowed_0 T) f x3) y)).
ord_extens_i : {T:tp} {R:tm (T arrow T arrow form)} {F:tm (T arrow T arrow form)} ({x3:tm T} {x':tm T} {y:tm T} {y':tm T} pf (@ T form (@ T (T arrow form) R x3) x') -> pf (@ T form (@ T (T arrow form) R y) y') -> pf (@ T form (@ T (T arrow form) F x') y') -> pf (@ T form (@ T (T arrow form) F x3) y)) -> pf (@ (rel T T) form (@ (rel T T) (rel T T arrow form) (ord_extens T) R) F) = [T:tp] [R:tm (T arrow T arrow form)] [F:tm (T arrow T arrow form)] [q1:{x4:tm T} {x':tm T} {y:tm T} {y':tm T} pf (@ T form (@ T (T arrow form) R x4) x') -> pf (@ T form (@ T (T arrow form) R y) y') -> pf (@ T form (@ T (T arrow form) F x') y') -> pf (@ T form (@ T (T arrow form) F x4) y)] def2_i (rel T T) (rel T T) ([x3:tm (rel T T)] [x4:tm (rel T T)] forall4 T T T T ([x5:tm T] [x':tm T] [y:tm T] [y':tm T] @ T form (@ T (shadowed_0 T) x3 x5) x' imp @ T form (@ T (shadowed_0 T) x3 y) y' imp @ T form (@ T (shadowed_0 T) x4 x') y' imp @ T form (@ T (shadowed_0 T) x4 x5) y)) R F (forall4_i T T T T ([x3:tm T] [x4:tm T] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) R x3) x4 imp @ T form (@ T (T arrow form) R x5) x6 imp @ T form (@ T (T arrow form) F x4) x6 imp @ T form (@ T (T arrow form) F x3) x5) ([x6:tm T] [x':tm T] [y:tm T] [y':tm T] imp3_i (@ T form (@ T (T arrow form) R x6) x') (@ T form (@ T (T arrow form) R y) y') (@ T form (@ T (T arrow form) F x') y') (@ T form (@ T (T arrow form) F x6) y) ([x3:pf (@ T form (@ T (T arrow form) R x6) x')] [x4:pf (@ T form (@ T (T arrow form) R y) y')] [x5:pf (@ T form (@ T (T arrow form) F x') y')] q1 x6 x' y y' x3 x4 x5))).
ord_extens_e : {X1:tp} {R:tm (rel X1 X1)} {F:tm (rel X1 X1)} {X:tm X1} {X':tm X1} {Y:tm X1} {Y':tm X1} pf (@ (rel X1 X1) form (@ (rel X1 X1) (rel X1 X1 arrow form) (ord_extens X1) R) F) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) X') -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Y') -> pf (@ X1 form (@ X1 (shadowed_0 X1) F X') Y') -> pf (@ X1 form (@ X1 (shadowed_0 X1) F X) Y) = [X1:tp] [R:tm (rel X1 X1)] [F:tm (rel X1 X1)] [X:tm X1] [X':tm X1] [Y:tm X1] [Y':tm X1] [p1:pf (@ (rel X1 X1) form (@ (rel X1 X1) (rel X1 X1 arrow form) (ord_extens X1) R) F)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) X')] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Y')] [x5:pf (@ X1 form (@ X1 (shadowed_0 X1) F X') Y')] imp3_e (@ X1 form (@ X1 (shadowed_0 X1) R X) X') (@ X1 form (@ X1 (shadowed_0 X1) R Y) Y') (@ X1 form (@ X1 (shadowed_0 X1) F X') Y') (@ X1 form (@ X1 (shadowed_0 X1) F X) Y) (forall4_e X1 X1 X1 X1 ([x6:tm X1] [x7:tm X1] [x8:tm X1] [x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R x6) x7 imp @ X1 form (@ X1 (shadowed_0 X1) R x8) x9 imp @ X1 form (@ X1 (shadowed_0 X1) F x7) x9 imp @ X1 form (@ X1 (shadowed_0 X1) F x6) x8) (def2_e (rel X1 X1) (rel X1 X1) ([x6:tm (rel X1 X1)] [x7:tm (rel X1 X1)] forall4 X1 X1 X1 X1 ([x8:tm X1] [x':tm X1] [y:tm X1] [y':tm X1] @ X1 form (@ X1 (shadowed_0 X1) x6 x8) x' imp @ X1 form (@ X1 (shadowed_0 X1) x6 y) y' imp @ X1 form (@ X1 (shadowed_0 X1) x7 x') y' imp @ X1 form (@ X1 (shadowed_0 X1) x7 x8) y)) R F p1) X X' Y Y') x3 x4 x5.
ncomp_rel_extens_pred : {T:tp} {R:tm (T arrow T arrow form)} tm (rel T T arrow num arrow rel T T) = [T:tp] [R:tm (T arrow T arrow form)] lam4 (rel T T) num T T form ([f:tm (rel T T)] [n:tm num] [x':tm T] [y':tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) f) n) x') y' and (gt n zero imp forall2 T T ([x3:tm T] [y:tm T] @ T form (@ T (T arrow form) R x3) x' imp @ T form (@ T (T arrow form) R y) y' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) f) n) x3) y))).
ncomp_rel_extens : {N:tnum} {T:tp} {R:tm (rel T T)} {F:tm (rel T T)} pf (gt N zero) -> pf (@ (rel T T) form (reflexive T) R) -> pf (@ (rel T T) form (@ (rel T T) (rel T T arrow form) (ord_extens T) R) F) -> pf (@ (rel T T) form (@ (rel T T) (rel T T arrow form) (ord_extens T) R) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N)) = [N:tnum] [T:tp] [R:tm (rel T T)] [F:tm (rel T T)] [p1:pf (gt N zero)] [p2:pf (@ (rel T T) form (reflexive T) R)] [p3:pf (@ (rel T T) form (@ (rel T T) (rel T T arrow form) (ord_extens T) R) F)] ord_extens_i T R (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) ([x3:tm T] [x':tm T] [y:tm T] [y':tm T] [p4:pf (@ T form (@ T (shadowed_0 T) R x3) x')] [p5:pf (@ T form (@ T (shadowed_0 T) R y) y')] [p6:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x') y')] cut (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_extens_pred T R) F) N) x') y') (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x3) y) (imp2_e (forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_extens_pred T R) F) zero) z1) z1)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_extens_pred T R) F) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) F z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_extens_pred T R) F) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_extens_pred T R) F) N) x') y') (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x4:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x4 F) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x4 F) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) F z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x4 F) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x4 F) N) x') y') (def4_e T T num (rel T T) ([x4:tm (rel T T)] [x5:tm num] [x6:tm T] [x7:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x4) zero) z3) z3) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x4) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x4 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x4) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x4) x5) x6) x7)) F N x' y' p6) (ncomp_rel_extens_pred T R)) (forall_i T ([x4:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x5:tm (T arrow T arrow form)] [x6:tm num] [x7:tm T] [x8:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x5) x6) x7) x8 and (gt x6 zero imp forall2 T T ([x9:tm T] [y1:tm T] @ T form (@ T (T arrow form) R x9) x7 imp @ T form (@ T (T arrow form) R y1) x8 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x5) x6) x9) y1)))) F) zero) x4) x4) ([z4:tm T] def4_i (T arrow T arrow form) num T T ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x10:tm T] [y2:tm T] @ T form (@ T (T arrow form) R x10) x6 imp @ T form (@ T (T arrow form) R y2) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x10) y2))) F zero z4 z4 (and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) zero) z4) z4) (gt zero zero imp forall2 T T ([x11:tm T] [y3:tm T] @ T form (@ T (T arrow form) R x11) z4 imp @ T form (@ T (T arrow form) R y3) z4 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) zero) x11) y3)) (ncomp_rel_zero T F z4) (imp_i (gt zero zero) (forall2 T T ([x12:tm T] [y4:tm T] @ T form (@ T (T arrow form) R x12) z4 imp @ T form (@ T (T arrow form) R y4) z4 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) zero) x12) y4)) ([p7:pf (gt zero zero)] false_e (forall2 T T ([x13:tm T] [y5:tm T] @ T form (@ T (T arrow form) R x13) z4 imp @ T form (@ T (T arrow form) R y5) z4 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) zero) x13) y5)) (not_e (geq zero zero) p7 (ord_reflexivity zero))))))) (forall4_i num T T T ([x4:tm num] [x5:tm T] [x6:tm T] [x7:tm T] isNat x4 imp gt x4 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_extens_pred T R) F) (pred x4)) x5) x6 imp @ T form (@ T (shadowed_0 T) F x6) x7 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x8:tm (T arrow T arrow form)] [x9:tm num] [x10:tm T] [x11:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x8) x9) x10) x11 and (gt x9 zero imp forall2 T T ([x14:tm T] [y6:tm T] @ T form (@ T (T arrow form) R x14) x10 imp @ T form (@ T (T arrow form) R y6) x11 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x8) x9) x14) y6)))) F) x4) x5) x7) ([n:tm num] [z1':tm T] [z2':tm T] [z3':tm T] imp4_i (isNat n) (gt n zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_extens_pred T R) F) (pred n)) z1') z2') (@ T form (@ T (shadowed_0 T) F z2') z3') (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x15:tm T] [y7:tm T] @ T form (@ T (T arrow form) R x15) x6 imp @ T form (@ T (T arrow form) R y7) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x15) y7)))) F) n) z1') z3') ([p7:pf (isNat n)] [p8:pf (gt n zero)] [p9:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_extens_pred T R) F) (pred n)) z1') z2')] [p10:pf (@ T form (@ T (shadowed_0 T) F z2') z3')] def4_i (T arrow T arrow form) num T T ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x16:tm T] [y8:tm T] @ T form (@ T (T arrow form) R x16) x6 imp @ T form (@ T (T arrow form) R y8) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x16) y8))) F n z1' z3' (and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) z1') z3') (gt n zero imp forall2 T T ([x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x4) z1' imp @ T form (@ T (shadowed_0 T) R x5) z3' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) x4) x5)) (congr num n (succ (pred n)) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) z') z1') z3') (symm num (succ (pred n)) n (succpred n)) (ncomp_rel_succ T F (pred n) z1' z2' z3' (and_e1 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) z1') z2') (gt (pred n) zero imp forall2 T T ([x17:tm T] [y9:tm T] @ T form (@ T (T arrow form) R x17) z1' imp @ T form (@ T (T arrow form) R y9) z2' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) x17) y9)) (def4_e T T num (rel T T) ([x4:tm (rel T T)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x18:tm T] [y10:tm T] @ T form (@ T (T arrow form) R x18) x6 imp @ T form (@ T (T arrow form) R y10) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x18) y10))) F (pred n) z1' z2' p9)) p10)) (imp_i (gt n zero) (forall2 T T ([x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x4) z1' imp @ T form (@ T (shadowed_0 T) R x5) z3' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) x4) x5)) ([p11:pf (gt n zero)] forall2_i T T ([x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x4) z1' imp @ T form (@ T (shadowed_0 T) R x5) z3' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) x4) x5) ([z1:tm T] [z3:tm T] imp2_i (@ T form (@ T (shadowed_0 T) R z1) z1') (@ T form (@ T (shadowed_0 T) R z3) z3') (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) z1) z3) ([p12:pf (@ T form (@ T (shadowed_0 T) R z1) z1')] [p13:pf (@ T form (@ T (shadowed_0 T) R z3) z3')] or_e (== num (pred n) zero) (> (pred n) zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) z1) z3) (greater_or_eq (pred n) zero (greater_greater_eq_minus1 n zero (and_e1 (isInt n) (geq n zero) p7) p_zero p8)) ([p14:pf (eq num (pred n) zero)] congr num n one ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) z') z1) z3) (trans num n (succ (pred n)) one (symm num (succ (pred n)) n (succpred n)) (trans num (+ (pred n) one) (+ zero one) one (eq_plus (pred n) zero one p14) (zero_plus one))) (ncomp_rel_one T F z1 z3 (ord_extens_e T R F z1 z1' z3 z3' p3 p12 p13 (congr T z1' z2' ([z':tm T] @ T form (@ T (shadowed_0 T) F z') z3') (imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) zero) z1') z2') (eq T z1' z2') (ncomp_rel_zero_inv T F z1' z2') (congr num zero (pred n) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) z') z1') z2') (symm num (pred n) zero p14) (and_e1 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) z1') z2') (gt (pred n) zero imp forall2 T T ([x19:tm T] [y11:tm T] @ T form (@ T (T arrow form) R x19) z1' imp @ T form (@ T (T arrow form) R y11) z2' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) x19) y11)) (def4_e T T num (rel T T) ([x4:tm (rel T T)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x20:tm T] [y12:tm T] @ T form (@ T (T arrow form) R x20) x6 imp @ T form (@ T (T arrow form) R y12) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x20) y12))) F (pred n) z1' z2' p9)))) p10)))) ([p14:pf (gt (pred n) zero)] congr num n (succ (pred n)) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) z') z1) z3) (symm num (succ (pred n)) n (succpred n)) (ncomp_rel_succ T F (pred n) z1 z2' z3 (imp2_e (@ T form (@ T (T arrow form) R z1) z1') (@ T form (@ T (T arrow form) R z2') z2') (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) z1) z2') (forall2_e T T ([x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x4) z1' imp @ T form (@ T (T arrow form) R x5) z2' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) x4) x5) (imp_e (gt (pred n) zero) (forall2 T T ([x21:tm T] [y13:tm T] @ T form (@ T (T arrow form) R x21) z1' imp @ T form (@ T (T arrow form) R y13) z2' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) x21) y13)) (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) z1') z2') (gt (pred n) zero imp forall2 T T ([x22:tm T] [y14:tm T] @ T form (@ T (T arrow form) R x22) z1' imp @ T form (@ T (T arrow form) R y14) z2' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) x22) y14)) (def4_e T T num (rel T T) ([x4:tm (rel T T)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x23:tm T] [y15:tm T] @ T form (@ T (T arrow form) R x23) x6 imp @ T form (@ T (T arrow form) R y15) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x23) y15))) F (pred n) z1' z2' p9)) p14) z1 z2') p12 (rel_refl T R z2' p2)) (ord_extens_e T R F z2' z2' z3 z3' p3 (rel_refl T R z2' p2) p13 p10)))))))))))) ([p7:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_extens_pred T R) F) N) x') y')] imp2_e (@ T form (@ T (T arrow form) R x3) x') (@ T form (@ T (T arrow form) R y) y') (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x3) y) (forall2_e T T ([x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x4) x' imp @ T form (@ T (T arrow form) R x5) y' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x4) x5) (imp_e (gt N zero) (forall2 T T ([x24:tm T] [y16:tm T] @ T form (@ T (T arrow form) R x24) x' imp @ T form (@ T (T arrow form) R y16) y' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x24) y16)) (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x') y') (gt N zero imp forall2 T T ([x25:tm T] [y17:tm T] @ T form (@ T (T arrow form) R x25) x' imp @ T form (@ T (T arrow form) R y17) y' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x25) y17)) (def4_e T T num (rel T T) ([x4:tm (rel T T)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x26:tm T] [y18:tm T] @ T form (@ T (T arrow form) R x26) x6 imp @ T form (@ T (T arrow form) R y18) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x26) y18))) F N x' y' p7)) p1) x3 y) p4 p5)).
kleene_step : {T:tp} {R:tm (T arrow T arrow form)} {X:tm T} {Y:tm T} {Z:tm T} pf (@ T form (@ T (T arrow form) R X) Y) -> pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) Y) Z) -> pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Z) = [T:tp] [R:tm (T arrow T arrow form)] [X:tm T] [Y:tm T] [Z:tm T] [p1:pf (@ T form (@ T (T arrow form) R X) Y)] [p2:pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) Y) Z)] def3_i (T arrow T arrow form) T T ([x3:tm (T arrow T arrow form)] [x4:tm T] [x5:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z1:tm T] @ T form (@ T (T arrow form) S Z1) Z1) imp forall3 T T T ([X1:tm T] [Y1:tm T] [Z2:tm T] @ T form (@ T (T arrow form) x3 X1) Y1 imp @ T form (@ T (T arrow form) S Y1) Z2 imp @ T form (@ T (T arrow form) S X1) Z2) imp @ T form (@ T (T arrow form) S x4) x5)) R X Z (forall_i (rel T T) ([x3:tm (rel T T)] forall T ([Z3:tm T] @ T form (@ T (T arrow form) x3 Z3) Z3) imp forall3 T T T ([x4:tm T] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) R x4) x5 imp @ T form (@ T (T arrow form) x3 x5) x6 imp @ T form (@ T (T arrow form) x3 x4) x6) imp @ T form (@ T (T arrow form) x3 X) Z) ([s:tm (rel T T)] imp2_i (forall T ([Z4:tm T] @ T form (@ T (T arrow form) s Z4) Z4)) (forall3 T T T ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x3) x4 imp @ T form (@ T (T arrow form) s x4) x5 imp @ T form (@ T (T arrow form) s x3) x5)) (@ T form (@ T (T arrow form) s X) Z) ([p3:pf (forall T ([Z5:tm T] @ T form (@ T (T arrow form) s Z5) Z5))] [p4:pf (forall3 T T T ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x3) x4 imp @ T form (@ T (T arrow form) s x4) x5 imp @ T form (@ T (T arrow form) s x3) x5))] imp2_e (@ T form (@ T (T arrow form) R X) Y) (@ T form (@ T (T arrow form) s Y) Z) (@ T form (@ T (T arrow form) s X) Z) (forall3_e T T T ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x3) x4 imp @ T form (@ T (T arrow form) s x4) x5 imp @ T form (@ T (T arrow form) s x3) x5) p4 X Y Z) p1 (imp2_e (forall T ([Z6:tm T] @ T form (@ T (T arrow form) s Z6) Z6)) (forall3 T T T ([X2:tm T] [Y2:tm T] [Z7:tm T] @ T form (@ T (T arrow form) R X2) Y2 imp @ T form (@ T (T arrow form) s Y2) Z7 imp @ T form (@ T (T arrow form) s X2) Z7)) (@ T form (@ T (T arrow form) s Y) Z) (forall_e (T arrow T arrow form) ([x3:tm (T arrow T arrow form)] forall T ([Z8:tm T] @ T form (@ T (T arrow form) x3 Z8) Z8) imp forall3 T T T ([X3:tm T] [Y3:tm T] [Z9:tm T] @ T form (@ T (T arrow form) R X3) Y3 imp @ T form (@ T (T arrow form) x3 Y3) Z9 imp @ T form (@ T (T arrow form) x3 X3) Z9) imp @ T form (@ T (T arrow form) x3 Y) Z) (def3_e T T (T arrow T arrow form) ([x3:tm (T arrow T arrow form)] [x4:tm T] [x5:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z10:tm T] @ T form (@ T (T arrow form) S Z10) Z10) imp forall3 T T T ([X4:tm T] [Y4:tm T] [Z11:tm T] @ T form (@ T (T arrow form) x3 X4) Y4 imp @ T form (@ T (T arrow form) S Y4) Z11 imp @ T form (@ T (T arrow form) S X4) Z11) imp @ T form (@ T (T arrow form) S x4) x5)) R Y Z p2) s) p3 p4)))).
kleene_ncomp_pred1 : {T:tp} {R:tm (rel T T)} tm (rel T T) = [T:tp] [R:tm (rel T T)] lam2 T T form ([x3:tm T] [y:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) y)).
kleene_ncomp_pred2 : {T:tp} {R:tm (rel T T)} tm num -> tm form = [T:tp] [R:tm (rel T T)] [n:tm num] forall2 T T ([x3:tm T] [y:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) y imp @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x3) y).
kleene_ncomp : {T:tp} {R:tm (T arrow T arrow form)} {X:tm T} {Y:tm T} pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Y equiv exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) X) Y)) = [T:tp] [R:tm (T arrow T arrow form)] [X:tm T] [Y:tm T] equiv_i2 (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Y) (exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) X) Y)) ([p1:pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Y)] def2_e T T ([x3:tm T] [x4:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) x4)) X Y (imp2_e (forall T ([Z:tm T] @ T form (@ T (T arrow form) (kleene_ncomp_pred1 T R) Z) Z)) (forall3 T T T ([X1:tm T] [Y1:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X1) Y1 imp @ T form (@ T (T arrow form) (kleene_ncomp_pred1 T R) Y1) Z imp @ T form (@ T (T arrow form) (kleene_ncomp_pred1 T R) X1) Z)) (@ T form (@ T (T arrow form) (kleene_ncomp_pred1 T R) X) Y) (forall_e (T arrow T arrow form) ([x3:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) x3 Z) Z) imp forall3 T T T ([X2:tm T] [Y2:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X2) Y2 imp @ T form (@ T (T arrow form) x3 Y2) Z imp @ T form (@ T (T arrow form) x3 X2) Z) imp @ T form (@ T (T arrow form) x3 X) Y) (def3_e T T (T arrow T arrow form) ([x3:tm (T arrow T arrow form)] [x4:tm T] [x5:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) S Z) Z) imp forall3 T T T ([X3:tm T] [Y3:tm T] [Z:tm T] @ T form (@ T (T arrow form) x3 X3) Y3 imp @ T form (@ T (T arrow form) S Y3) Z imp @ T form (@ T (T arrow form) S X3) Z) imp @ T form (@ T (T arrow form) S x4) x5)) R X Y p1) (kleene_ncomp_pred1 T R)) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (lam2 T T form ([x4:tm T] [x5:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x4) x5))) x3) x3) ([x3:tm T] def2_i T T ([x4:tm T] [x5:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x4) x5)) x3 x3 (exists_i num ([x4:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x4) x3) x3) zero (ncomp_rel_zero T R x3)))) (forall3_i T T T ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x3) x4 imp @ T form (@ T (shadowed_0 T) (kleene_ncomp_pred1 T R) x4) x5 imp @ T form (@ T (T arrow form) (lam2 T T form ([x6:tm T] [x7:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x6) x7))) x3) x5) ([x4:tm T] [y:tm T] [z1:tm T] imp2_i (@ T form (@ T (T arrow form) R x4) y) (@ T form (@ T (shadowed_0 T) (kleene_ncomp_pred1 T R) y) z1) (@ T form (@ T (T arrow form) (lam2 T T form ([x3:tm T] [x5:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) x5))) x4) z1) ([p2:pf (@ T form (@ T (T arrow form) R x4) y)] [p3:pf (@ T form (@ T (shadowed_0 T) (kleene_ncomp_pred1 T R) y) z1)] exists_e num ([x3:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) y) z1) (@ T form (@ T (T arrow form) (lam2 T T form ([x3:tm T] [x5:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) x5))) x4) z1) (def2_e T T ([x3:tm T] [x5:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) x5)) y z1 p3) ([n:tm num] [p4:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) y) z1)] def2_i T T ([x3:tm T] [x5:tm T] exists num ([n1:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n1) x3) x5)) x4 z1 (exists_i num ([x3:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) x4) z1) (plus one n) (ncomp_rel_compose T R one x4 y n z1 (ncomp_rel_one T R x4 y p2) p4)))))))) ([p1:pf (exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) X) Y))] cut (_forall num ([n:tnum] isNat n imp kleene_ncomp_pred2 T R n)) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Y) (induction ([x3:tnum] kleene_ncomp_pred2 T R x3) (forall2_i T T ([x3:tm T] [x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) x3) x4 imp @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x3) x4) ([x5:tm T] [y:tm T] imp_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) x5) y) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x5) y) ([p2:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) x5) y)] congr T y x5 ([z':tm T] @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x5) z') (symm T x5 y (imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) x5) y) (eq T x5 y) (ncomp_rel_zero_inv T R x5 y) p2)) (def3_i (T arrow T arrow form) T T ([x3:tm (T arrow T arrow form)] [x4:tm T] [x6:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) S Z) Z) imp forall3 T T T ([X4:tm T] [Y4:tm T] [Z:tm T] @ T form (@ T (T arrow form) x3 X4) Y4 imp @ T form (@ T (T arrow form) S Y4) Z imp @ T form (@ T (T arrow form) S X4) Z) imp @ T form (@ T (T arrow form) S x4) x6)) R x5 x5 (forall_i (rel T T) ([x3:tm (rel T T)] forall T ([z2:tm T] @ T form (@ T (shadowed_0 T) x3 z2) z2) imp forall3 T T T ([X5:tm T] [Y5:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X5) Y5 imp @ T form (@ T (T arrow form) x3 Y5) Z imp @ T form (@ T (T arrow form) x3 X5) Z) imp @ T form (@ T (shadowed_0 T) x3 x5) x5) ([s:tm (rel T T)] imp2_i (forall T ([z3:tm T] @ T form (@ T (shadowed_0 T) s z3) z3)) (forall3 T T T ([X6:tm T] [Y6:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X6) Y6 imp @ T form (@ T (T arrow form) s Y6) Z imp @ T form (@ T (T arrow form) s X6) Z)) (@ T form (@ T (shadowed_0 T) s x5) x5) ([p3:pf (forall T ([z4:tm T] @ T form (@ T (shadowed_0 T) s z4) z4))] [p4:pf (forall3 T T T ([X7:tm T] [Y7:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X7) Y7 imp @ T form (@ T (T arrow form) s Y7) Z imp @ T form (@ T (T arrow form) s X7) Z))] forall_e T ([x3:tm T] @ T form (@ T (shadowed_0 T) s x3) x3) p3 x5))))))) ([n:tm num] [p2:pf (isNat n)] [p3:pf (kleene_ncomp_pred2 T R n)] forall2_i T T ([x3:tm T] [x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (succ n)) x3) x4 imp @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x3) x4) ([x6:tm T] [y:tm T] imp_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (succ n)) x6) y) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x6) y) ([p4:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (succ n)) x6) y)] exists_e T ([x3:tm T] @ T form (@ T (shadowed_0 T) R x6) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ n))) x3) y) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x6) y) (ncomp_rel_gt_zero_inv (succ n) T R x6 y (greater_plus1_i n zero (and_e2 (isInt n) (geq n zero) p2)) p4) ([z5:tm T] [p5:pf (@ T form (@ T (T arrow form) R x6) z5 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ n))) z5) y)] kleene_step T R x6 z5 y (and_e1 (@ T form (@ T (T arrow form) R x6) z5) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ n))) z5) y) p5) (imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) z5) y) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) z5) y) (forall2_e T T ([x3:tm T] [x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) x4 imp @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x3) x4) p3 z5 y) (congr num n (pred (succ n)) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z5) y) (symm num (pred (succ n)) n (predsucc n)) (and_e2 (@ T form (@ T (T arrow form) R x6) z5) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ n))) z5) y) p5)))))))) ([p2:pf (forall num ([n:tm num] isNat n imp kleene_ncomp_pred2 T R n))] exists_e num ([x3:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) X) Y) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Y) p1 ([n:tm num] [p3:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) X) Y)] forall2_imp_e T T ([x7:tm T] [y:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x7) y) ([x8:tm T] [y:tm T] @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x8) y) (imp_e (isNat n) (kleene_ncomp_pred2 T R n) (forall_e num ([x3:tm num] isNat x3 imp kleene_ncomp_pred2 T R x3) p2 n) (ncomp_rel_isNat T R n X Y p3)) X Y p3))).
parfunx : {T1:tp} {T2:tp} tm (rel3 (eqrel T1) (eqrel T2) (rel T1 T2)) = [T1:tp] [T2:tp] lam3 (eqrel T1) (eqrel T2) (rel T1 T2) form ([eq1:tm (eqrel T1)] [eq2:tm (eqrel T2)] [r:tm (rel T1 T2)] forall4 T1 T1 T2 T2 ([x3:tm T1] [x4:tm T1] [y1:tm T2] [y2:tm T2] @ T1 form (@ T1 (shadowed_0 T1) eq1 x3) x4 imp @ T2 form (@ T1 (shadowed_0 T2) r x3) y1 imp @ T2 form (@ T1 (shadowed_0 T2) r x4) y2 imp @ T2 form (@ T2 (shadowed_0 T2) eq2 y1) y2)).
parfunx2 : {T1:tp} {T2:tp} {T3:tp} tm (rel4 (eqrel T1) (eqrel T2) (eqrel T3) (rel3 T1 T2 T3)) = [T1:tp] [T2:tp] [T3:tp] lam4 (eqrel T1) (eqrel T2) (eqrel T3) (rel3 T1 T2 T3) form ([eq1:tm (eqrel T1)] [eq2:tm (eqrel T2)] [eq3:tm (eqrel T3)] [r:tm (rel3 T1 T2 T3)] forall6 T1 T1 T2 T2 T3 T3 ([x3:tm T1] [x4:tm T1] [y1:tm T2] [y2:tm T2] [z1:tm T3] [z2:tm T3] @ T1 form (@ T1 (shadowed_0 T1) eq1 x3) x4 imp @ T2 form (@ T2 (shadowed_0 T2) eq2 y1) y2 imp @ T3 form (@ T2 (shadowed_0 T3) (@ T1 (rel T2 T3) r x3) y1) z1 imp @ T3 form (@ T2 (shadowed_0 T3) (@ T1 (rel T2 T3) r x4) y2) z2 imp @ T3 form (@ T3 (shadowed_0 T3) eq3 z1) z2)).
parfunx_i : {T1:tp} {T2:tp} {Eq1:tm (T1 arrow T1 arrow form)} {R:tm (T1 arrow T2 arrow form)} {Eq2:tm (T2 arrow T2 arrow form)} ({x3:tm T1} {x4:tm T1} {y1:tm T2} {y2:tm T2} pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4) -> pf (@ T2 form (@ T1 (T2 arrow form) R x3) y1) -> pf (@ T2 form (@ T1 (T2 arrow form) R x4) y2) -> pf (@ T2 form (@ T2 (T2 arrow form) Eq2 y1) y2)) -> pf (@ (rel T1 T2) form (@ (eqrel T2) (shadowed_0 (rel T1 T2)) (@ (eqrel T1) (rel (eqrel T2) (rel T1 T2)) (parfunx T1 T2) Eq1) Eq2) R) = [T1:tp] [T2:tp] [Eq1:tm (T1 arrow T1 arrow form)] [R:tm (T1 arrow T2 arrow form)] [Eq2:tm (T2 arrow T2 arrow form)] [q1:{x5:tm T1} {x6:tm T1} {y1:tm T2} {y2:tm T2} pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x5) x6) -> pf (@ T2 form (@ T1 (T2 arrow form) R x5) y1) -> pf (@ T2 form (@ T1 (T2 arrow form) R x6) y2) -> pf (@ T2 form (@ T2 (T2 arrow form) Eq2 y1) y2)] def3_i (eqrel T1) (eqrel T2) (rel T1 T2) ([x3:tm (eqrel T1)] [x4:tm (eqrel T2)] [x5:tm (rel T1 T2)] forall4 T1 T1 T2 T2 ([x7:tm T1] [x8:tm T1] [y1:tm T2] [y2:tm T2] @ T1 form (@ T1 (shadowed_0 T1) x3 x7) x8 imp @ T2 form (@ T1 (shadowed_0 T2) x5 x7) y1 imp @ T2 form (@ T1 (shadowed_0 T2) x5 x8) y2 imp @ T2 form (@ T2 (shadowed_0 T2) x4 y1) y2)) Eq1 Eq2 R (forall4_imp3_i T1 T1 T2 T2 ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] @ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] @ T2 form (@ T1 (T2 arrow form) R x3) x5) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] @ T2 form (@ T1 (T2 arrow form) R x4) x6) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] @ T2 form (@ T2 (T2 arrow form) Eq2 x5) x6) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4)] [x8:pf (@ T2 form (@ T1 (T2 arrow form) R x3) x5)] [x9:pf (@ T2 form (@ T1 (T2 arrow form) R x4) x6)] q1 x3 x4 x5 x6 x7 x8 x9)).
parfunx_e : {X1:tp} {X2:tp} {Eq1:tm (eqrel X1)} {Eq2:tm (eqrel X2)} {R:tm (rel X1 X2)} {X3:tm X1} {X4:tm X1} {Y1:tm X2} {Y2:tm X2} pf (@ (rel X1 X2) form (@ (eqrel X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X1) (rel (eqrel X2) (rel X1 X2)) (parfunx X1 X2) Eq1) Eq2) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq1 X3) X4) -> pf (@ X2 form (@ X1 (shadowed_0 X2) R X3) Y1) -> pf (@ X2 form (@ X1 (shadowed_0 X2) R X4) Y2) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Eq2 Y1) Y2) = [X1:tp] [X2:tp] [Eq1:tm (eqrel X1)] [Eq2:tm (eqrel X2)] [R:tm (rel X1 X2)] [X3:tm X1] [X4:tm X1] [Y1:tm X2] [Y2:tm X2] [p1:pf (@ (rel X1 X2) form (@ (eqrel X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X1) (rel (eqrel X2) (rel X1 X2)) (parfunx X1 X2) Eq1) Eq2) R)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq1 X3) X4)] [x4:pf (@ X2 form (@ X1 (shadowed_0 X2) R X3) Y1)] [x5:pf (@ X2 form (@ X1 (shadowed_0 X2) R X4) Y2)] forall4_imp3_e X1 X1 X2 X2 ([x6:tm X1] [y:tm X1] [z1:tm X2] [u:tm X2] @ X1 form (@ X1 (shadowed_0 X1) Eq1 x6) y) ([x7:tm X1] [y:tm X1] [z2:tm X2] [u:tm X2] @ X2 form (@ X1 (shadowed_0 X2) R x7) z2) ([x8:tm X1] [y:tm X1] [z3:tm X2] [u:tm X2] @ X2 form (@ X1 (shadowed_0 X2) R y) u) ([x9:tm X1] [y:tm X1] [z4:tm X2] [u:tm X2] @ X2 form (@ X2 (shadowed_0 X2) Eq2 z4) u) (def3_e (rel X1 X2) (eqrel X2) (eqrel X1) ([x6:tm (eqrel X1)] [x7:tm (eqrel X2)] [x8:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x10:tm X1] [x11:tm X1] [y1:tm X2] [y2:tm X2] @ X1 form (@ X1 (shadowed_0 X1) x6 x10) x11 imp @ X2 form (@ X1 (shadowed_0 X2) x8 x10) y1 imp @ X2 form (@ X1 (shadowed_0 X2) x8 x11) y2 imp @ X2 form (@ X2 (shadowed_0 X2) x7 y1) y2)) Eq1 Eq2 R p1) X3 X4 Y1 Y2 x3 x4 x5.
parfunx2_i : {T1:tp} {T2:tp} {T3:tp} {Eq1:tm (T1 arrow T1 arrow form)} {Eq2:tm (T2 arrow T2 arrow form)} {R:tm (T1 arrow T2 arrow T3 arrow form)} {Eq3:tm (T3 arrow T3 arrow form)} ({x3:tm T1} {x4:tm T1} {y1:tm T2} {y2:tm T2} {z1:tm T3} {z2:tm T3} pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4) -> pf (@ T2 form (@ T2 (T2 arrow form) Eq2 y1) y2) -> pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x3) y1) z1) -> pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x4) y2) z2) -> pf (@ T3 form (@ T3 (T3 arrow form) Eq3 z1) z2)) -> pf (@ (rel3 T1 T2 T3) form (@ (eqrel T3) (shadowed_0 (rel3 T1 T2 T3)) (@ (eqrel T2) (rel (eqrel T3) (rel3 T1 T2 T3)) (@ (eqrel T1) (rel3 (eqrel T2) (eqrel T3) (rel3 T1 T2 T3)) (parfunx2 T1 T2 T3) Eq1) Eq2) Eq3) R) = [T1:tp] [T2:tp] [T3:tp] [Eq1:tm (T1 arrow T1 arrow form)] [Eq2:tm (T2 arrow T2 arrow form)] [R:tm (T1 arrow T2 arrow T3 arrow form)] [Eq3:tm (T3 arrow T3 arrow form)] [q1:{x5:tm T1} {x6:tm T1} {y1:tm T2} {y2:tm T2} {z1:tm T3} {z2:tm T3} pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x5) x6) -> pf (@ T2 form (@ T2 (T2 arrow form) Eq2 y1) y2) -> pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x5) y1) z1) -> pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x6) y2) z2) -> pf (@ T3 form (@ T3 (T3 arrow form) Eq3 z1) z2)] def4_i (eqrel T1) (eqrel T2) (eqrel T3) (rel3 T1 T2 T3) ([x3:tm (eqrel T1)] [x4:tm (eqrel T2)] [x5:tm (eqrel T3)] [x6:tm (rel3 T1 T2 T3)] forall6 T1 T1 T2 T2 T3 T3 ([x7:tm T1] [x8:tm T1] [y1:tm T2] [y2:tm T2] [z1:tm T3] [z2:tm T3] @ T1 form (@ T1 (shadowed_0 T1) x3 x7) x8 imp @ T2 form (@ T2 (shadowed_0 T2) x4 y1) y2 imp @ T3 form (@ T2 (shadowed_0 T3) (@ T1 (rel T2 T3) x6 x7) y1) z1 imp @ T3 form (@ T2 (shadowed_0 T3) (@ T1 (rel T2 T3) x6 x8) y2) z2 imp @ T3 form (@ T3 (shadowed_0 T3) x5 z1) z2)) Eq1 Eq2 Eq3 R (forall6_imp4_i T1 T1 T2 T2 T3 T3 ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] @ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] @ T2 form (@ T2 (T2 arrow form) Eq2 x5) x6) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] @ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x3) x5) x7) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] @ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x4) x6) x8) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] @ T3 form (@ T3 (T3 arrow form) Eq3 x7) x8) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] [x9:pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4)] [x10:pf (@ T2 form (@ T2 (T2 arrow form) Eq2 x5) x6)] [x11:pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x3) x5) x7)] [x12:pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x4) x6) x8)] q1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)).
parfunx2_e : {X1:tp} {X2:tp} {X3:tp} {Eq1:tm (eqrel X1)} {Eq2:tm (eqrel X2)} {Eq3:tm (eqrel X3)} {R:tm (rel3 X1 X2 X3)} {X4:tm X1} {X5:tm X1} {Y1:tm X2} {Y2:tm X2} {Z1:tm X3} {Z2:tm X3} pf (@ (rel3 X1 X2 X3) form (@ (eqrel X3) (shadowed_0 (rel3 X1 X2 X3)) (@ (eqrel X2) (rel (eqrel X3) (rel3 X1 X2 X3)) (@ (eqrel X1) (rel3 (eqrel X2) (eqrel X3) (rel3 X1 X2 X3)) (parfunx2 X1 X2 X3) Eq1) Eq2) Eq3) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq1 X4) X5) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Eq2 Y1) Y2) -> pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R X4) Y1) Z1) -> pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R X5) Y2) Z2) -> pf (@ X3 form (@ X3 (shadowed_0 X3) Eq3 Z1) Z2) = [X1:tp] [X2:tp] [X3:tp] [Eq1:tm (eqrel X1)] [Eq2:tm (eqrel X2)] [Eq3:tm (eqrel X3)] [R:tm (rel3 X1 X2 X3)] [X4:tm X1] [X5:tm X1] [Y1:tm X2] [Y2:tm X2] [Z1:tm X3] [Z2:tm X3] [p1:pf (@ (rel3 X1 X2 X3) form (@ (eqrel X3) (shadowed_0 (rel3 X1 X2 X3)) (@ (eqrel X2) (rel (eqrel X3) (rel3 X1 X2 X3)) (@ (eqrel X1) (rel3 (eqrel X2) (eqrel X3) (rel3 X1 X2 X3)) (parfunx2 X1 X2 X3) Eq1) Eq2) Eq3) R)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq1 X4) X5)] [x4:pf (@ X2 form (@ X2 (shadowed_0 X2) Eq2 Y1) Y2)] [x5:pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R X4) Y1) Z1)] [x6:pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R X5) Y2) Z2)] forall6_imp4_e X1 X1 X2 X2 X3 X3 ([x7:tm X1] [y:tm X1] [z1:tm X2] [u:tm X2] [v1:tm X3] [w:tm X3] @ X1 form (@ X1 (shadowed_0 X1) Eq1 x7) y) ([x8:tm X1] [y:tm X1] [z2:tm X2] [u:tm X2] [v2:tm X3] [w:tm X3] @ X2 form (@ X2 (shadowed_0 X2) Eq2 z2) u) ([x9:tm X1] [y:tm X1] [z3:tm X2] [u:tm X2] [v3:tm X3] [w:tm X3] @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R x9) z3) v3) ([x10:tm X1] [y:tm X1] [z4:tm X2] [u:tm X2] [v4:tm X3] [w:tm X3] @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R y) u) w) ([x11:tm X1] [y:tm X1] [z5:tm X2] [u:tm X2] [v5:tm X3] [w:tm X3] @ X3 form (@ X3 (shadowed_0 X3) Eq3 v5) w) (def4_e (rel3 X1 X2 X3) (eqrel X3) (eqrel X2) (eqrel X1) ([x7:tm (eqrel X1)] [x8:tm (eqrel X2)] [x9:tm (eqrel X3)] [x10:tm (rel3 X1 X2 X3)] forall6 X1 X1 X2 X2 X3 X3 ([x12:tm X1] [x13:tm X1] [y1:tm X2] [y2:tm X2] [z1:tm X3] [z2:tm X3] @ X1 form (@ X1 (shadowed_0 X1) x7 x12) x13 imp @ X2 form (@ X2 (shadowed_0 X2) x8 y1) y2 imp @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) x10 x12) y1) z1 imp @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) x10 x13) y2) z2 imp @ X3 form (@ X3 (shadowed_0 X3) x9 z1) z2)) Eq1 Eq2 Eq3 R p1) X4 X5 Y1 Y2 Z1 Z2 x3 x4 x5 x6.
mkpair : {T1:tp} {T2:tp} tm (T1 arrow T2 arrow pair T1 T2) = [T1:tp] [T2:tp] _mkpair T1 T2.
fst : {T1:tp} {T2:tp} tm (pair T1 T2 arrow T1) = [T1:tp] [T2:tp] _fst T1 T2.
snd : {T1:tp} {T2:tp} tm (pair T1 T2 arrow T2) = [T1:tp] [T2:tp] _snd T1 T2.
eq_pair : {Ta:tp} {Tb:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel (pair Ta Tb)) = [Ta:tp] [Tb:tp] lam4 (Ta arrow Ta arrow form) (Tb arrow Tb arrow form) (pair Ta Tb) (pair Ta Tb) form ([eq_a:tm (Ta arrow Ta arrow form)] [eq_b:tm (Tb arrow Tb arrow form)] [x3:tm (pair Ta Tb)] [y:tm (pair Ta Tb)] @ Ta form (@ Ta (Ta arrow form) eq_a (@ (pair Ta Tb) Ta (fst Ta Tb) x3)) (@ (pair Ta Tb) Ta (fst Ta Tb) y) and @ Tb form (@ Tb (Tb arrow form) eq_b (@ (pair Ta Tb) Tb (snd Ta Tb) x3)) (@ (pair Ta Tb) Tb (snd Ta Tb) y)).
tuple3 : tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] pair t1 (pair t2 t3).
mktuple3 : {T1:tp} {T2:tp} {T3:tp} tm (T1 arrow T2 arrow T3 arrow tuple3 T1 T2 T3) = [T1:tp] [T2:tp] [T3:tp] lam3 T1 T2 T3 (pair T1 (pair T2 T3)) ([x3:tm T1] [x4:tm T2] [x5:tm T3] @ (pair T2 T3) (pair T1 (pair T2 T3)) (@ T1 (pair T2 T3 arrow pair T1 (pair T2 T3)) (mkpair T1 (pair T2 T3)) x3) (@ T3 (pair T2 T3) (@ T2 (T3 arrow pair T2 T3) (mkpair T2 T3) x4) x5)).
get1of3 : {T1:tp} {T2:tp} {T3:tp} tm (tuple3 T1 T2 T3 arrow T1) = [T1:tp] [T2:tp] [T3:tp] fst T1 (pair T2 T3).
get2of3 : {T1:tp} {T2:tp} {T3:tp} tm (tuple3 T1 T2 T3 arrow T2) = [T1:tp] [T2:tp] [T3:tp] lam (pair T1 (pair T2 T3)) T2 ([a:tm (pair T1 (pair T2 T3))] @ (pair T2 T3) T2 (fst T2 T3) (@ (pair T1 (pair T2 T3)) (pair T2 T3) (snd T1 (pair T2 T3)) a)).
get3of3 : {T1:tp} {T2:tp} {T3:tp} tm (tuple3 T1 T2 T3 arrow T3) = [T1:tp] [T2:tp] [T3:tp] lam (pair T1 (pair T2 T3)) T3 ([a:tm (pair T1 (pair T2 T3))] @ (pair T2 T3) T3 (snd T2 T3) (@ (pair T1 (pair T2 T3)) (pair T2 T3) (snd T1 (pair T2 T3)) a)).
mktuple4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} tm (T1 arrow T2 arrow T3 arrow T4 arrow tuple4 T1 T2 T3 T4) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] lam4 T1 T2 T3 T4 (tuple4 T1 T2 T3 T4) ([x3:tm T1] [x4:tm T2] [x5:tm T3] [x6:tm T4] _mktuple4 T1 T2 T3 T4 x3 x4 x5 x6).
get1of4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} tm (tuple4 T1 T2 T3 T4 arrow T1) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] lam (tuple4 T1 T2 T3 T4) T1 ([x3:tm (tuple4 T1 T2 T3 T4)] _get1of4 T1 T2 T3 T4 x3).
get2of4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} tm (tuple4 T1 T2 T3 T4 arrow T2) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] lam (tuple4 T1 T2 T3 T4) T2 ([x3:tm (tuple4 T1 T2 T3 T4)] _get2of4 T1 T2 T3 T4 x3).
get3of4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} tm (tuple4 T1 T2 T3 T4 arrow T3) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] lam (tuple4 T1 T2 T3 T4) T3 ([x3:tm (tuple4 T1 T2 T3 T4)] _get3of4 T1 T2 T3 T4 x3).
get4of4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} tm (tuple4 T1 T2 T3 T4 arrow T4) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] lam (tuple4 T1 T2 T3 T4) T4 ([x3:tm (tuple4 T1 T2 T3 T4)] _get4of4 T1 T2 T3 T4 x3).
eq_tuple4 : {Ta:tp} {Tb:tp} {Tc:tp} {Td:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel Tc arrow eqrel Td arrow eqrel (tuple4 Ta Tb Tc Td)) = [Ta:tp] [Tb:tp] [Tc:tp] [Td:tp] lam4 (Ta arrow Ta arrow form) (Tb arrow Tb arrow form) (Tc arrow Tc arrow form) (Td arrow Td arrow form) (tuple4 Ta Tb Tc Td arrow tuple4 Ta Tb Tc Td arrow form) ([Ha:tm (Ta arrow Ta arrow form)] [Hb:tm (Tb arrow Tb arrow form)] [Hc:tm (Tc arrow Tc arrow form)] [Hd:tm (Td arrow Td arrow form)] lam2 (tuple4 Ta Tb Tc Td) (tuple4 Ta Tb Tc Td) form ([X:tm (tuple4 Ta Tb Tc Td)] [Y:tm (tuple4 Ta Tb Tc Td)] @ Ta form (@ Ta (Ta arrow form) Ha (@ (tuple4 Ta Tb Tc Td) Ta (get1of4 Ta Tb Tc Td) X)) (@ (tuple4 Ta Tb Tc Td) Ta (get1of4 Ta Tb Tc Td) Y) and @ Tb form (@ Tb (Tb arrow form) Hb (@ (tuple4 Ta Tb Tc Td) Tb (get2of4 Ta Tb Tc Td) X)) (@ (tuple4 Ta Tb Tc Td) Tb (get2of4 Ta Tb Tc Td) Y) and @ Tc form (@ Tc (Tc arrow form) Hc (@ (tuple4 Ta Tb Tc Td) Tc (get3of4 Ta Tb Tc Td) X)) (@ (tuple4 Ta Tb Tc Td) Tc (get3of4 Ta Tb Tc Td) Y) and @ Td form (@ Td (Td arrow form) Hd (@ (tuple4 Ta Tb Tc Td) Td (get4of4 Ta Tb Tc Td) X)) (@ (tuple4 Ta Tb Tc Td) Td (get4of4 Ta Tb Tc Td) Y))).
fstpair : {T1:tp} {X:tm T1} {T2:tp} {Y:tm T2} pf (forall (T1 arrow form) ([f:tm (T1 arrow form)] @ T1 form f X imp @ T1 form f (@ (pair T1 T2) T1 (fst T1 T2) (@ T2 (pair T1 T2) (@ T1 (T2 arrow pair T1 T2) (mkpair T1 T2) X) Y)))) = [T1:tp] [X:tm T1] [T2:tp] [Y:tm T2] _fstpair T1 T2 X Y.
sndpair : {T2:tp} {Y:tm T2} {T1:tp} {X:tm T1} pf (forall (T2 arrow form) ([f:tm (T2 arrow form)] @ T2 form f Y imp @ T2 form f (@ (pair T1 T2) T2 (snd T1 T2) (@ T2 (pair T1 T2) (@ T1 (T2 arrow pair T1 T2) (mkpair T1 T2) X) Y)))) = [T2:tp] [Y:tm T2] [T1:tp] [X:tm T1] _sndpair T1 T2 X Y.
fstpair_congr : {T:tp} {X:tm T} {X1:tp} {Y:tm X1} {P:tm T -> tm form} pf (P X) -> pf (P (@ (pair T X1) T (fst T X1) (@ X1 (pair T X1) (@ T (X1 arrow pair T X1) (mkpair T X1) X) Y))) = [T:tp] [X:tm T] [X1:tp] [Y:tm X1] [P:tm T -> tm form] [p1:pf (P X)] beta_e form T ([x3:tm T] P x3) (@ (pair T X1) T (fst T X1) (@ X1 (pair T X1) (@ T (X1 arrow pair T X1) (mkpair T X1) X) Y)) ([x3:tm form] x3) (imp_e (@ T form (lam T form ([x3:tm T] P x3)) X) (@ T form (lam T form ([x3:tm T] P x3)) (@ (pair T X1) T (fst T X1) (@ X1 (pair T X1) (@ T (X1 arrow pair T X1) (mkpair T X1) X) Y))) (forall_e (T arrow form) ([x3:tm (T arrow form)] @ T form x3 X imp @ T form x3 (@ (pair T X1) T (fst T X1) (@ X1 (pair T X1) (@ T (X1 arrow pair T X1) (mkpair T X1) X) Y))) (fstpair T X X1 Y) (lam T form ([x3:tm T] P x3))) (beta_i form T ([x3:tm T] P x3) X ([x4:tm form] x4) p1)).
sndpair_congr : {T:tp} {Y:tm T} {X1:tp} {X:tm X1} {P:tm T -> tm form} pf (P Y) -> pf (P (@ (pair X1 T) T (snd X1 T) (@ T (pair X1 T) (@ X1 (T arrow pair X1 T) (mkpair X1 T) X) Y))) = [T:tp] [Y:tm T] [X1:tp] [X:tm X1] [P:tm T -> tm form] [p1:pf (P Y)] beta_e form T ([x3:tm T] P x3) (@ (pair X1 T) T (snd X1 T) (@ T (pair X1 T) (@ X1 (T arrow pair X1 T) (mkpair X1 T) X) Y)) ([x3:tm form] x3) (imp_e (@ T form (lam T form ([x3:tm T] P x3)) Y) (@ T form (lam T form ([x3:tm T] P x3)) (@ (pair X1 T) T (snd X1 T) (@ T (pair X1 T) (@ X1 (T arrow pair X1 T) (mkpair X1 T) X) Y))) (forall_e (T arrow form) ([x3:tm (T arrow form)] @ T form x3 Y imp @ T form x3 (@ (pair X1 T) T (snd X1 T) (@ T (pair X1 T) (@ X1 (T arrow pair X1 T) (mkpair X1 T) X) Y))) (sndpair T Y X1 X) (lam T form ([x3:tm T] P x3))) (beta_i form T ([x3:tm T] P x3) Y ([x4:tm form] x4) p1)).
eq_fstpair : {X1:tp} {X2:tp} {X:tm X1} {Y:tm X2} pf (== X1 (@ (pair X1 X2) X1 (fst X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) X) Y)) X) = [X1:tp] [X2:tp] [X:tm X1] [Y:tm X2] def1_e X1 ([x3:tm X1] eq X1 x3 X) (@ (pair X1 X2) X1 (fst X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) X) Y)) (imp_e (@ X1 form (lam X1 form ([x3:tm X1] eq X1 x3 X)) X) (@ X1 form (lam X1 form ([x4:tm X1] eq X1 x4 X)) (@ (pair X1 X2) X1 (fst X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) X) Y))) (forall_e (X1 arrow form) ([x3:tm (X1 arrow form)] @ X1 form x3 X imp @ X1 form x3 (@ (pair X1 X2) X1 (fst X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) X) Y))) (fstpair X1 X X2 Y) (lam X1 form ([x5:tm X1] eq X1 x5 X))) (def1_i X1 ([x3:tm X1] eq X1 x3 X) X (refl X1 X))).
eq_sndpair : {X1:tp} {X2:tp} {X:tm X2} {Y:tm X1} pf (== X1 (@ (pair X2 X1) X1 (snd X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X) Y)) Y) = [X1:tp] [X2:tp] [X:tm X2] [Y:tm X1] def1_e X1 ([x3:tm X1] eq X1 x3 Y) (@ (pair X2 X1) X1 (snd X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X) Y)) (imp_e (@ X1 form (lam X1 form ([x3:tm X1] eq X1 x3 Y)) Y) (@ X1 form (lam X1 form ([x4:tm X1] eq X1 x4 Y)) (@ (pair X2 X1) X1 (snd X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X) Y))) (forall_e (X1 arrow form) ([x3:tm (X1 arrow form)] @ X1 form x3 Y imp @ X1 form x3 (@ (pair X2 X1) X1 (snd X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X) Y))) (sndpair X1 Y X2 X) (lam X1 form ([x5:tm X1] eq X1 x5 Y))) (def1_i X1 ([x3:tm X1] eq X1 x3 Y) Y (refl X1 Y))).
eq_pair_i : {X1:tp} {Ha:tm (X1 arrow X1 arrow form)} {X2:tp} {X:tm (pair X1 X2)} {Y:tm (pair X1 X2)} {Hb:tm (X2 arrow X2 arrow form)} pf (@ X1 form (@ X1 (X1 arrow form) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y)) -> pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y)) -> pf (@ (pair X1 X2) form (@ (pair X1 X2) (shadowed_0 (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) X) Y) = [X1:tp] [Ha:tm (X1 arrow X1 arrow form)] [X2:tp] [X:tm (pair X1 X2)] [Y:tm (pair X1 X2)] [Hb:tm (X2 arrow X2 arrow form)] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y))] [p2:pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y))] def4_i (eqrel X1) (eqrel X2) (pair X1 X2) (pair X1 X2) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (pair X1 X2)] [x6:tm (pair X1 X2)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (pair X1 X2) X1 (fst X1 X2) x5)) (@ (pair X1 X2) X1 (fst X1 X2) x6) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (pair X1 X2) X2 (snd X1 X2) x5)) (@ (pair X1 X2) X2 (snd X1 X2) x6)) Ha Hb X Y (and_i (@ X1 form (@ X1 (X1 arrow form) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y)) p1 p2).
eq_pair_e1 : {X1:tp} {X2:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {X:tm (pair X1 X2)} {Y:tm (pair X1 X2)} pf (@ (pair X1 X2) form (@ (pair X1 X2) (shadowed_0 (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y)) = [X1:tp] [X2:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [X:tm (pair X1 X2)] [Y:tm (pair X1 X2)] [p1:pf (@ (pair X1 X2) form (@ (pair X1 X2) (shadowed_0 (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) X) Y)] and_e1 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y)) (def4_e (pair X1 X2) (pair X1 X2) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (pair X1 X2)] [x6:tm (pair X1 X2)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (pair X1 X2) X1 (fst X1 X2) x5)) (@ (pair X1 X2) X1 (fst X1 X2) x6) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (pair X1 X2) X2 (snd X1 X2) x5)) (@ (pair X1 X2) X2 (snd X1 X2) x6)) Ha Hb X Y p1).
eq_pair_e2 : {X1:tp} {X2:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {X:tm (pair X1 X2)} {Y:tm (pair X1 X2)} pf (@ (pair X1 X2) form (@ (pair X1 X2) (shadowed_0 (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) X) Y) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y)) = [X1:tp] [X2:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [X:tm (pair X1 X2)] [Y:tm (pair X1 X2)] [p1:pf (@ (pair X1 X2) form (@ (pair X1 X2) (shadowed_0 (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) X) Y)] and_e2 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y)) (def4_e (pair X1 X2) (pair X1 X2) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (pair X1 X2)] [x6:tm (pair X1 X2)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (pair X1 X2) X1 (fst X1 X2) x5)) (@ (pair X1 X2) X1 (fst X1 X2) x6) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (pair X1 X2) X2 (snd X1 X2) x5)) (@ (pair X1 X2) X2 (snd X1 X2) x6)) Ha Hb X Y p1).
eq_pair_reflexive : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} pf (@ (rel T1 T1) form (reflexive T1) Eq1) -> pf (@ (rel T2 T2) form (reflexive T2) Eq2) -> pf (@ (rel (pair T1 T2) (pair T1 T2)) form (reflexive (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [p1:pf (@ (rel T1 T1) form (reflexive T1) Eq1)] [p2:pf (@ (rel T2 T2) form (reflexive T2) Eq2)] reflexive_i (pair T1 T2) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) ([x3:tm (pair T1 T2)] eq_pair_i T1 Eq1 T2 x3 x3 Eq2 (reflexive_e T1 Eq1 (@ (pair T1 T2) T1 (fst T1 T2) x3) p1) (reflexive_e T2 Eq2 (@ (pair T1 T2) T2 (snd T1 T2) x3) p2)).
eq_pair_symmetric : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} pf (@ (rel T1 T1) form (symmetric T1) Eq1) -> pf (@ (rel T2 T2) form (symmetric T2) Eq2) -> pf (@ (rel (pair T1 T2) (pair T1 T2)) form (symmetric (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [p1:pf (@ (rel T1 T1) form (symmetric T1) Eq1)] [p2:pf (@ (rel T2 T2) form (symmetric T2) Eq2)] symmetric_i (pair T1 T2) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) ([x3:tm (pair T1 T2)] [y:tm (pair T1 T2)] [p3:pf (@ (pair T1 T2) form (@ (pair T1 T2) (shadowed_0 (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) x3) y)] eq_pair_i T1 Eq1 T2 y x3 Eq2 (symmetric_e T1 Eq1 (@ (pair T1 T2) T1 (fst T1 T2) x3) (@ (pair T1 T2) T1 (fst T1 T2) y) p1 (eq_pair_e1 T1 T2 Eq1 Eq2 x3 y p3)) (symmetric_e T2 Eq2 (@ (pair T1 T2) T2 (snd T1 T2) x3) (@ (pair T1 T2) T2 (snd T1 T2) y) p2 (eq_pair_e2 T1 T2 Eq1 Eq2 x3 y p3))).
eq_pair_transitive : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} pf (@ (rel T1 T1) form (transitive T1) Eq1) -> pf (@ (rel T2 T2) form (transitive T2) Eq2) -> pf (@ (rel (pair T1 T2) (pair T1 T2)) form (transitive (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [p1:pf (@ (rel T1 T1) form (transitive T1) Eq1)] [p2:pf (@ (rel T2 T2) form (transitive T2) Eq2)] transitive_i (pair T1 T2) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) ([x3:tm (pair T1 T2)] [y:tm (pair T1 T2)] [z1:tm (pair T1 T2)] [p3:pf (@ (pair T1 T2) form (@ (pair T1 T2) (shadowed_0 (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) x3) y)] [p4:pf (@ (pair T1 T2) form (@ (pair T1 T2) (shadowed_0 (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) y) z1)] eq_pair_i T1 Eq1 T2 x3 z1 Eq2 (transitive_e T1 Eq1 (@ (pair T1 T2) T1 (fst T1 T2) x3) (@ (pair T1 T2) T1 (fst T1 T2) y) (@ (pair T1 T2) T1 (fst T1 T2) z1) p1 (eq_pair_e1 T1 T2 Eq1 Eq2 x3 y p3) (eq_pair_e1 T1 T2 Eq1 Eq2 y z1 p4)) (transitive_e T2 Eq2 (@ (pair T1 T2) T2 (snd T1 T2) x3) (@ (pair T1 T2) T2 (snd T1 T2) y) (@ (pair T1 T2) T2 (snd T1 T2) z1) p2 (eq_pair_e2 T1 T2 Eq1 Eq2 x3 y p3) (eq_pair_e2 T1 T2 Eq1 Eq2 y z1 p4))).
valideqv_eq_pair : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel (pair X1 X2)) form (valideqv (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] valideqv_i (pair X1 X2) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) (eq_pair_reflexive X1 Ha X2 Hb (valideqv_e1 X1 Ha p1) (valideqv_e1 X2 Hb p2)) (eq_pair_symmetric X1 Ha X2 Hb (valideqv_e2 X1 Ha p1) (valideqv_e2 X2 Hb p2)) (eq_pair_transitive X1 Ha X2 Hb (valideqv_e3 X1 Ha p1) (valideqv_e3 X2 Hb p2)).
reduce_get1of3 : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1} {X5:tm X2} {X6:tm X3} pf (== X1 (@ (tuple3 X1 X2 X3) X1 (get1of3 X1 X2 X3) (@ X3 (tuple3 X1 X2 X3) (@ X2 (X3 arrow tuple3 X1 X2 X3) (@ X1 (X2 arrow X3 arrow tuple3 X1 X2 X3) (mktuple3 X1 X2 X3) X4) X5) X6)) X4) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1] [X5:tm X2] [X6:tm X3] congr (pair X1 (pair X2 X3)) (@ X3 (pair X1 (pair X2 X3)) (@ X2 (X3 arrow pair X1 (pair X2 X3)) (@ X1 (X2 arrow X3 arrow pair X1 (pair X2 X3)) (lam3 X1 X2 X3 (pair X1 (pair X2 X3)) ([x3:tm X1] [x4:tm X2] [x5:tm X3] @ (pair X2 X3) (pair X1 (pair X2 X3)) (@ X1 (pair X2 X3 arrow pair X1 (pair X2 X3)) (mkpair X1 (pair X2 X3)) x3) (@ X3 (pair X2 X3) (@ X2 (X3 arrow pair X2 X3) (mkpair X2 X3) x4) x5))) X4) X5) X6) (@ (pair X2 X3) (pair X1 (pair X2 X3)) (@ X1 (pair X2 X3 arrow pair X1 (pair X2 X3)) (mkpair X1 (pair X2 X3)) X4) (@ X3 (pair X2 X3) (@ X2 (X3 arrow pair X2 X3) (mkpair X2 X3) X5) X6)) ([i1:tm (pair X1 (pair X2 X3))] eq X1 (@ (pair X1 (pair X2 X3)) X1 (fst X1 (pair X2 X3)) i1) X4) (beta3 (pair X1 (pair X2 X3)) X3 X2 X1 ([x3:tm X1] [x4:tm X2] [x5:tm X3] @ (pair X2 X3) (pair X1 (pair X2 X3)) (@ X1 (pair X2 X3 arrow pair X1 (pair X2 X3)) (mkpair X1 (pair X2 X3)) x3) (@ X3 (pair X2 X3) (@ X2 (X3 arrow pair X2 X3) (mkpair X2 X3) x4) x5)) X4 X5 X6) (fstpair X1 X4 (pair X2 X3) (@ X3 (pair X2 X3) (@ X2 (X3 arrow pair X2 X3) (mkpair X2 X3) X5) X6)).
reduce_get2of3 : {X1:tp} {X2:tp} {X3:tp} {X4:tm X2} {X5:tm X1} {X6:tm X3} pf (== X1 (@ (tuple3 X2 X1 X3) X1 (get2of3 X2 X1 X3) (@ X3 (tuple3 X2 X1 X3) (@ X1 (X3 arrow tuple3 X2 X1 X3) (@ X2 (X1 arrow X3 arrow tuple3 X2 X1 X3) (mktuple3 X2 X1 X3) X4) X5) X6)) X5) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X2] [X5:tm X1] [X6:tm X3] congr (tuple3 X2 X1 X3) (@ X3 (tuple3 X2 X1 X3) (@ X1 (X3 arrow tuple3 X2 X1 X3) (@ X2 (X1 arrow X3 arrow tuple3 X2 X1 X3) (lam3 X2 X1 X3 (tuple3 X2 X1 X3) ([x3:tm X2] [x4:tm X1] [x5:tm X3] @ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) x3) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) x4) x5))) X4) X5) X6) (@ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) X4) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6)) ([i1:tm (tuple3 X2 X1 X3)] eq X1 (@ (tuple3 X2 X1 X3) X1 (get2of3 X2 X1 X3) i1) X5) (beta3 (tuple3 X2 X1 X3) X3 X1 X2 ([x3:tm X2] [x4:tm X1] [x5:tm X3] @ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) x3) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) x4) x5)) X4 X5 X6) (congr X1 (@ (tuple3 X2 X1 X3) X1 (lam (tuple3 X2 X1 X3) X1 ([x3:tm (tuple3 X2 X1 X3)] @ (pair X1 X3) X1 (fst X1 X3) (@ (pair X2 (pair X1 X3)) (pair X1 X3) (snd X2 (pair X1 X3)) x3))) (@ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) X4) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6))) (@ (pair X1 X3) X1 (fst X1 X3) (@ (pair X2 (pair X1 X3)) (pair X1 X3) (snd X2 (pair X1 X3)) (@ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) X4) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6)))) ([i2:tm X1] eq X1 i2 X5) (beta X1 (tuple3 X2 X1 X3) ([x3:tm (tuple3 X2 X1 X3)] @ (pair X1 X3) X1 (fst X1 X3) (@ (pair X2 (pair X1 X3)) (pair X1 X3) (snd X2 (pair X1 X3)) x3)) (@ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) X4) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6))) (congr (pair X1 X3) (@ (pair X2 (pair X1 X3)) (pair X1 X3) (snd X2 (pair X1 X3)) (@ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) X4) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6))) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6) ([i3:tm (pair X1 X3)] eq X1 (@ (pair X1 X3) X1 (fst X1 X3) i3) X5) (sndpair (pair X1 X3) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6) X2 X4) (fstpair X1 X5 X3 X6))).
reduce_get3of3 : {X1:tp} {X2:tp} {X3:tp} {X4:tm X2} {X5:tm X3} {X6:tm X1} pf (== X1 (@ (tuple3 X2 X3 X1) X1 (get3of3 X2 X3 X1) (@ X1 (tuple3 X2 X3 X1) (@ X3 (X1 arrow tuple3 X2 X3 X1) (@ X2 (X3 arrow X1 arrow tuple3 X2 X3 X1) (mktuple3 X2 X3 X1) X4) X5) X6)) X6) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X2] [X5:tm X3] [X6:tm X1] congr (tuple3 X2 X3 X1) (@ X1 (tuple3 X2 X3 X1) (@ X3 (X1 arrow tuple3 X2 X3 X1) (@ X2 (X3 arrow X1 arrow tuple3 X2 X3 X1) (lam3 X2 X3 X1 (tuple3 X2 X3 X1) ([x3:tm X2] [x4:tm X3] [x5:tm X1] @ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) x3) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) x4) x5))) X4) X5) X6) (@ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) X4) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6)) ([i1:tm (tuple3 X2 X3 X1)] eq X1 (@ (tuple3 X2 X3 X1) X1 (get3of3 X2 X3 X1) i1) X6) (beta3 (tuple3 X2 X3 X1) X1 X3 X2 ([x3:tm X2] [x4:tm X3] [x5:tm X1] @ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) x3) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) x4) x5)) X4 X5 X6) (congr X1 (@ (tuple3 X2 X3 X1) X1 (lam (tuple3 X2 X3 X1) X1 ([x3:tm (tuple3 X2 X3 X1)] @ (pair X3 X1) X1 (snd X3 X1) (@ (pair X2 (pair X3 X1)) (pair X3 X1) (snd X2 (pair X3 X1)) x3))) (@ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) X4) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6))) (@ (pair X3 X1) X1 (snd X3 X1) (@ (pair X2 (pair X3 X1)) (pair X3 X1) (snd X2 (pair X3 X1)) (@ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) X4) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6)))) ([i2:tm X1] eq X1 i2 X6) (beta X1 (tuple3 X2 X3 X1) ([x3:tm (tuple3 X2 X3 X1)] @ (pair X3 X1) X1 (snd X3 X1) (@ (pair X2 (pair X3 X1)) (pair X3 X1) (snd X2 (pair X3 X1)) x3)) (@ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) X4) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6))) (congr (pair X3 X1) (@ (pair X2 (pair X3 X1)) (pair X3 X1) (snd X2 (pair X3 X1)) (@ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) X4) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6))) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6) ([i3:tm (pair X3 X1)] eq X1 (@ (pair X3 X1) X1 (snd X3 X1) i3) X6) (sndpair (pair X3 X1) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6) X2 X4) (sndpair X1 X6 X3 X5))).
congr_app : {X1:tp} {X2:tp} {X3:tm (X1 arrow X2)} {X4:tm (X1 arrow X2)} {Y1:tm X1} {Y2:tm X1} pf (eq (X1 arrow X2) X3 X4) -> pf (eq X1 Y1 Y2) -> pf (eq X2 (@ X1 X2 X3 Y1) (@ X1 X2 X4 Y2)) = [X1:tp] [X2:tp] [X3:tm (X1 arrow X2)] [X4:tm (X1 arrow X2)] [Y1:tm X1] [Y2:tm X1] [p1:pf (eq (X1 arrow X2) X3 X4)] [p2:pf (eq X1 Y1 Y2)] congr (X1 arrow X2) X3 X4 ([W:tm (X1 arrow X2)] eq X2 (@ X1 X2 W Y1) (@ X1 X2 X4 Y2)) p1 (congr X1 Y1 Y2 ([W:tm X1] eq X2 (@ X1 X2 X4 W) (@ X1 X2 X4 Y2)) p2 (refl X2 (@ X1 X2 X4 Y2))).
reduce_get1of4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} pf (== X1 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) (@ X4 (tuple4 X1 X2 X3 X4) (@ X3 (X4 arrow tuple4 X1 X2 X3 X4) (@ X2 (X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (@ X1 (X2 arrow X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (mktuple4 X1 X2 X3 X4) A) B) C) D)) A) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] trans X1 (@ (tuple4 X1 X2 X3 X4) X1 (lam (tuple4 X1 X2 X3 X4) X1 ([x3:tm (tuple4 X1 X2 X3 X4)] _get1of4 X1 X2 X3 X4 x3)) (@ X4 (tuple4 X1 X2 X3 X4) (@ X3 (X4 arrow tuple4 X1 X2 X3 X4) (@ X2 (X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (@ X1 (X2 arrow X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (mktuple4 X1 X2 X3 X4) A) B) C) D)) (_get1of4 X1 X2 X3 X4 (@ X4 (tuple4 X1 X2 X3 X4) (@ X3 (X4 arrow tuple4 X1 X2 X3 X4) (@ X2 (X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (@ X1 (X2 arrow X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (mktuple4 X1 X2 X3 X4) A) B) C) D)) A (beta1 X1 (tuple4 X1 X2 X3 X4) ([x3:tm (tuple4 X1 X2 X3 X4)] _get1of4 X1 X2 X3 X4 x3) (@ X4 (tuple4 X1 X2 X3 X4) (@ X3 (X4 arrow tuple4 X1 X2 X3 X4) (@ X2 (X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (@ X1 (X2 arrow X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (mktuple4 X1 X2 X3 X4) A) B) C) D)) (trans X1 (@ (pair X1 X2) X1 (fst X1 X2) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (@ X4 (pair (pair X1 X2) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X2 (X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X1 (X2 arrow X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (lam4 X1 X2 X3 X4 (pair (pair X1 X2) (pair X3 X4)) ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] _mktuple4 X1 X2 X3 X4 x3 x4 x5 x6)) A) B) C) D))) (@ (pair X1 X2) X1 (fst X1 X2) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (_mktuple4 X1 X2 X3 X4 A B C D))) A (congr_app (pair X1 X2) X1 (fst X1 X2) (fst X1 X2) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (@ X4 (pair (pair X1 X2) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X2 (X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X1 (X2 arrow X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (lam4 X1 X2 X3 X4 (pair (pair X1 X2) (pair X3 X4)) ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] _mktuple4 X1 X2 X3 X4 x3 x4 x5 x6)) A) B) C) D)) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (_mktuple4 X1 X2 X3 X4 A B C D)) (refl (pair X1 X2 arrow X1) (fst X1 X2)) (congr_app (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (fst (pair X1 X2) (pair X3 X4)) (@ X4 (pair (pair X1 X2) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X2 (X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X1 (X2 arrow X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (lam4 X1 X2 X3 X4 (pair (pair X1 X2) (pair X3 X4)) ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] _mktuple4 X1 X2 X3 X4 x3 x4 x5 x6)) A) B) C) D) (_mktuple4 X1 X2 X3 X4 A B C D) (refl (pair (pair X1 X2) (pair X3 X4) arrow pair X1 X2) (fst (pair X1 X2) (pair X3 X4))) (beta4 (pair (pair X1 X2) (pair X3 X4)) X4 X3 X2 X1 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] _mktuple4 X1 X2 X3 X4 x3 x4 x5 x6) A B C D))) (trans X1 (@ (pair X1 X2) X1 (fst X1 X2) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (@ (pair X3 X4) (pair (pair X1 X2) (pair X3 X4)) (@ (pair X1 X2) (pair X3 X4 arrow pair (pair X1 X2) (pair X3 X4)) (mkpair (pair X1 X2) (pair X3 X4)) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) A) B)) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) C D)))) (@ (pair X1 X2) X1 (fst X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) A) B)) A (congr_app (pair X1 X2) X1 (fst X1 X2) (fst X1 X2) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (@ (pair X3 X4) (pair (pair X1 X2) (pair X3 X4)) (@ (pair X1 X2) (pair X3 X4 arrow pair (pair X1 X2) (pair X3 X4)) (mkpair (pair X1 X2) (pair X3 X4)) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) A) B)) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) C D))) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) A) B) (refl (pair X1 X2 arrow X1) (fst X1 X2)) (fstpair (pair X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) A) B) (pair X3 X4) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) C D))) (fstpair X1 A X2 B))).
reduce_get2of4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X2} {X6:tm X1} {X7:tm X3} {X8:tm X4} pf (eq X1 (@ (tuple4 X2 X1 X3 X4) X1 (get2of4 X2 X1 X3 X4) (@ X4 (tuple4 X2 X1 X3 X4) (@ X3 (X4 arrow tuple4 X2 X1 X3 X4) (@ X1 (X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (@ X2 (X1 arrow X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (mktuple4 X2 X1 X3 X4) X5) X6) X7) X8)) X6) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X2] [X6:tm X1] [X7:tm X3] [X8:tm X4] trans X1 (@ (tuple4 X2 X1 X3 X4) X1 (lam (tuple4 X2 X1 X3 X4) X1 ([x3:tm (tuple4 X2 X1 X3 X4)] _get2of4 X2 X1 X3 X4 x3)) (@ X4 (tuple4 X2 X1 X3 X4) (@ X3 (X4 arrow tuple4 X2 X1 X3 X4) (@ X1 (X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (@ X2 (X1 arrow X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (mktuple4 X2 X1 X3 X4) X5) X6) X7) X8)) (_get2of4 X2 X1 X3 X4 (@ X4 (tuple4 X2 X1 X3 X4) (@ X3 (X4 arrow tuple4 X2 X1 X3 X4) (@ X1 (X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (@ X2 (X1 arrow X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (mktuple4 X2 X1 X3 X4) X5) X6) X7) X8)) X6 (beta1 X1 (tuple4 X2 X1 X3 X4) ([x3:tm (tuple4 X2 X1 X3 X4)] _get2of4 X2 X1 X3 X4 x3) (@ X4 (tuple4 X2 X1 X3 X4) (@ X3 (X4 arrow tuple4 X2 X1 X3 X4) (@ X1 (X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (@ X2 (X1 arrow X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (mktuple4 X2 X1 X3 X4) X5) X6) X7) X8)) (trans X1 (@ (pair X2 X1) X1 (snd X2 X1) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (@ X4 (pair (pair X2 X1) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X1 (X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X2 (X1 arrow X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (lam4 X2 X1 X3 X4 (pair (pair X2 X1) (pair X3 X4)) ([x3:tm X2] [x4:tm X1] [x5:tm X3] [x6:tm X4] _mktuple4 X2 X1 X3 X4 x3 x4 x5 x6)) X5) X6) X7) X8))) (@ (pair X2 X1) X1 (snd X2 X1) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (_mktuple4 X2 X1 X3 X4 X5 X6 X7 X8))) X6 (congr_app (pair X2 X1) X1 (snd X2 X1) (snd X2 X1) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (@ X4 (pair (pair X2 X1) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X1 (X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X2 (X1 arrow X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (lam4 X2 X1 X3 X4 (pair (pair X2 X1) (pair X3 X4)) ([x3:tm X2] [x4:tm X1] [x5:tm X3] [x6:tm X4] _mktuple4 X2 X1 X3 X4 x3 x4 x5 x6)) X5) X6) X7) X8)) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (_mktuple4 X2 X1 X3 X4 X5 X6 X7 X8)) (refl (pair X2 X1 arrow X1) (snd X2 X1)) (congr_app (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (fst (pair X2 X1) (pair X3 X4)) (@ X4 (pair (pair X2 X1) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X1 (X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X2 (X1 arrow X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (lam4 X2 X1 X3 X4 (pair (pair X2 X1) (pair X3 X4)) ([x3:tm X2] [x4:tm X1] [x5:tm X3] [x6:tm X4] _mktuple4 X2 X1 X3 X4 x3 x4 x5 x6)) X5) X6) X7) X8) (_mktuple4 X2 X1 X3 X4 X5 X6 X7 X8) (refl (pair (pair X2 X1) (pair X3 X4) arrow pair X2 X1) (fst (pair X2 X1) (pair X3 X4))) (beta4 (pair (pair X2 X1) (pair X3 X4)) X4 X3 X1 X2 ([x3:tm X2] [x4:tm X1] [x5:tm X3] [x6:tm X4] _mktuple4 X2 X1 X3 X4 x3 x4 x5 x6) X5 X6 X7 X8))) (trans X1 (@ (pair X2 X1) X1 (snd X2 X1) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (@ (pair X3 X4) (pair (pair X2 X1) (pair X3 X4)) (@ (pair X2 X1) (pair X3 X4 arrow pair (pair X2 X1) (pair X3 X4)) (mkpair (pair X2 X1) (pair X3 X4)) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X5) X6)) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) X7 X8)))) (@ (pair X2 X1) X1 (snd X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X5) X6)) X6 (congr_app (pair X2 X1) X1 (snd X2 X1) (snd X2 X1) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (@ (pair X3 X4) (pair (pair X2 X1) (pair X3 X4)) (@ (pair X2 X1) (pair X3 X4 arrow pair (pair X2 X1) (pair X3 X4)) (mkpair (pair X2 X1) (pair X3 X4)) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X5) X6)) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) X7 X8))) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X5) X6) (refl (pair X2 X1 arrow X1) (snd X2 X1)) (fstpair (pair X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X5) X6) (pair X3 X4) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) X7 X8))) (sndpair X1 X6 X2 X5))).
reduce_get3of4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X2} {X6:tm X3} {X7:tm X1} {X8:tm X4} pf (eq X1 (@ (tuple4 X2 X3 X1 X4) X1 (get3of4 X2 X3 X1 X4) (@ X4 (tuple4 X2 X3 X1 X4) (@ X1 (X4 arrow tuple4 X2 X3 X1 X4) (@ X3 (X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (@ X2 (X3 arrow X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (mktuple4 X2 X3 X1 X4) X5) X6) X7) X8)) X7) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X2] [X6:tm X3] [X7:tm X1] [X8:tm X4] trans X1 (@ (tuple4 X2 X3 X1 X4) X1 (lam (tuple4 X2 X3 X1 X4) X1 ([x3:tm (tuple4 X2 X3 X1 X4)] _get3of4 X2 X3 X1 X4 x3)) (@ X4 (tuple4 X2 X3 X1 X4) (@ X1 (X4 arrow tuple4 X2 X3 X1 X4) (@ X3 (X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (@ X2 (X3 arrow X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (mktuple4 X2 X3 X1 X4) X5) X6) X7) X8)) (_get3of4 X2 X3 X1 X4 (@ X4 (tuple4 X2 X3 X1 X4) (@ X1 (X4 arrow tuple4 X2 X3 X1 X4) (@ X3 (X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (@ X2 (X3 arrow X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (mktuple4 X2 X3 X1 X4) X5) X6) X7) X8)) X7 (beta1 X1 (tuple4 X2 X3 X1 X4) ([x3:tm (tuple4 X2 X3 X1 X4)] _get3of4 X2 X3 X1 X4 x3) (@ X4 (tuple4 X2 X3 X1 X4) (@ X1 (X4 arrow tuple4 X2 X3 X1 X4) (@ X3 (X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (@ X2 (X3 arrow X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (mktuple4 X2 X3 X1 X4) X5) X6) X7) X8)) (trans X1 (@ (pair X1 X4) X1 (fst X1 X4) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (@ X4 (pair (pair X2 X3) (pair X1 X4)) (@ X1 (X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X3 (X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X2 (X3 arrow X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (lam4 X2 X3 X1 X4 (pair (pair X2 X3) (pair X1 X4)) ([x3:tm X2] [x4:tm X3] [x5:tm X1] [x6:tm X4] _mktuple4 X2 X3 X1 X4 x3 x4 x5 x6)) X5) X6) X7) X8))) (@ (pair X1 X4) X1 (fst X1 X4) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (_mktuple4 X2 X3 X1 X4 X5 X6 X7 X8))) X7 (congr_app (pair X1 X4) X1 (fst X1 X4) (fst X1 X4) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (@ X4 (pair (pair X2 X3) (pair X1 X4)) (@ X1 (X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X3 (X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X2 (X3 arrow X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (lam4 X2 X3 X1 X4 (pair (pair X2 X3) (pair X1 X4)) ([x3:tm X2] [x4:tm X3] [x5:tm X1] [x6:tm X4] _mktuple4 X2 X3 X1 X4 x3 x4 x5 x6)) X5) X6) X7) X8)) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (_mktuple4 X2 X3 X1 X4 X5 X6 X7 X8)) (refl (pair X1 X4 arrow X1) (fst X1 X4)) (congr_app (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (snd (pair X2 X3) (pair X1 X4)) (@ X4 (pair (pair X2 X3) (pair X1 X4)) (@ X1 (X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X3 (X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X2 (X3 arrow X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (lam4 X2 X3 X1 X4 (pair (pair X2 X3) (pair X1 X4)) ([x3:tm X2] [x4:tm X3] [x5:tm X1] [x6:tm X4] _mktuple4 X2 X3 X1 X4 x3 x4 x5 x6)) X5) X6) X7) X8) (_mktuple4 X2 X3 X1 X4 X5 X6 X7 X8) (refl (pair (pair X2 X3) (pair X1 X4) arrow pair X1 X4) (snd (pair X2 X3) (pair X1 X4))) (beta4 (pair (pair X2 X3) (pair X1 X4)) X4 X1 X3 X2 ([x3:tm X2] [x4:tm X3] [x5:tm X1] [x6:tm X4] _mktuple4 X2 X3 X1 X4 x3 x4 x5 x6) X5 X6 X7 X8))) (trans X1 (@ (pair X1 X4) X1 (fst X1 X4) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (@ (pair X1 X4) (pair (pair X2 X3) (pair X1 X4)) (@ (pair X2 X3) (pair X1 X4 arrow pair (pair X2 X3) (pair X1 X4)) (mkpair (pair X2 X3) (pair X1 X4)) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6)) (@ X4 (pair X1 X4) (@ X1 (X4 arrow pair X1 X4) (mkpair X1 X4) X7) X8)))) (@ (pair X1 X4) X1 (fst X1 X4) (@ X4 (pair X1 X4) (@ X1 (X4 arrow pair X1 X4) (mkpair X1 X4) X7) X8)) X7 (congr_app (pair X1 X4) X1 (fst X1 X4) (fst X1 X4) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (@ (pair X1 X4) (pair (pair X2 X3) (pair X1 X4)) (@ (pair X2 X3) (pair X1 X4 arrow pair (pair X2 X3) (pair X1 X4)) (mkpair (pair X2 X3) (pair X1 X4)) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6)) (@ X4 (pair X1 X4) (@ X1 (X4 arrow pair X1 X4) (mkpair X1 X4) X7) X8))) (@ X4 (pair X1 X4) (@ X1 (X4 arrow pair X1 X4) (mkpair X1 X4) X7) X8) (refl (pair X1 X4 arrow X1) (fst X1 X4)) (sndpair (pair X1 X4) (@ X4 (pair X1 X4) (@ X1 (X4 arrow pair X1 X4) (mkpair X1 X4) X7) X8) (pair X2 X3) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6))) (fstpair X1 X7 X4 X8))).
reduce_get4of4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X2} {X6:tm X3} {X7:tm X4} {X8:tm X1} pf (eq X1 (@ (tuple4 X2 X3 X4 X1) X1 (get4of4 X2 X3 X4 X1) (@ X1 (tuple4 X2 X3 X4 X1) (@ X4 (X1 arrow tuple4 X2 X3 X4 X1) (@ X3 (X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (@ X2 (X3 arrow X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (mktuple4 X2 X3 X4 X1) X5) X6) X7) X8)) X8) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X2] [X6:tm X3] [X7:tm X4] [X8:tm X1] trans X1 (@ (tuple4 X2 X3 X4 X1) X1 (lam (tuple4 X2 X3 X4 X1) X1 ([x3:tm (tuple4 X2 X3 X4 X1)] _get4of4 X2 X3 X4 X1 x3)) (@ X1 (tuple4 X2 X3 X4 X1) (@ X4 (X1 arrow tuple4 X2 X3 X4 X1) (@ X3 (X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (@ X2 (X3 arrow X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (mktuple4 X2 X3 X4 X1) X5) X6) X7) X8)) (_get4of4 X2 X3 X4 X1 (@ X1 (tuple4 X2 X3 X4 X1) (@ X4 (X1 arrow tuple4 X2 X3 X4 X1) (@ X3 (X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (@ X2 (X3 arrow X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (mktuple4 X2 X3 X4 X1) X5) X6) X7) X8)) X8 (beta1 X1 (tuple4 X2 X3 X4 X1) ([x3:tm (tuple4 X2 X3 X4 X1)] _get4of4 X2 X3 X4 X1 x3) (@ X1 (tuple4 X2 X3 X4 X1) (@ X4 (X1 arrow tuple4 X2 X3 X4 X1) (@ X3 (X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (@ X2 (X3 arrow X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (mktuple4 X2 X3 X4 X1) X5) X6) X7) X8)) (trans X1 (@ (pair X4 X1) X1 (snd X4 X1) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (@ X1 (pair (pair X2 X3) (pair X4 X1)) (@ X4 (X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X3 (X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X2 (X3 arrow X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (lam4 X2 X3 X4 X1 (pair (pair X2 X3) (pair X4 X1)) ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X1] _mktuple4 X2 X3 X4 X1 x3 x4 x5 x6)) X5) X6) X7) X8))) (@ (pair X4 X1) X1 (snd X4 X1) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (_mktuple4 X2 X3 X4 X1 X5 X6 X7 X8))) X8 (congr_app (pair X4 X1) X1 (snd X4 X1) (snd X4 X1) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (@ X1 (pair (pair X2 X3) (pair X4 X1)) (@ X4 (X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X3 (X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X2 (X3 arrow X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (lam4 X2 X3 X4 X1 (pair (pair X2 X3) (pair X4 X1)) ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X1] _mktuple4 X2 X3 X4 X1 x3 x4 x5 x6)) X5) X6) X7) X8)) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (_mktuple4 X2 X3 X4 X1 X5 X6 X7 X8)) (refl (pair X4 X1 arrow X1) (snd X4 X1)) (congr_app (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (snd (pair X2 X3) (pair X4 X1)) (@ X1 (pair (pair X2 X3) (pair X4 X1)) (@ X4 (X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X3 (X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X2 (X3 arrow X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (lam4 X2 X3 X4 X1 (pair (pair X2 X3) (pair X4 X1)) ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X1] _mktuple4 X2 X3 X4 X1 x3 x4 x5 x6)) X5) X6) X7) X8) (_mktuple4 X2 X3 X4 X1 X5 X6 X7 X8) (refl (pair (pair X2 X3) (pair X4 X1) arrow pair X4 X1) (snd (pair X2 X3) (pair X4 X1))) (beta4 (pair (pair X2 X3) (pair X4 X1)) X1 X4 X3 X2 ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X1] _mktuple4 X2 X3 X4 X1 x3 x4 x5 x6) X5 X6 X7 X8))) (trans X1 (@ (pair X4 X1) X1 (snd X4 X1) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (@ (pair X4 X1) (pair (pair X2 X3) (pair X4 X1)) (@ (pair X2 X3) (pair X4 X1 arrow pair (pair X2 X3) (pair X4 X1)) (mkpair (pair X2 X3) (pair X4 X1)) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6)) (@ X1 (pair X4 X1) (@ X4 (X1 arrow pair X4 X1) (mkpair X4 X1) X7) X8)))) (@ (pair X4 X1) X1 (snd X4 X1) (@ X1 (pair X4 X1) (@ X4 (X1 arrow pair X4 X1) (mkpair X4 X1) X7) X8)) X8 (congr_app (pair X4 X1) X1 (snd X4 X1) (snd X4 X1) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (@ (pair X4 X1) (pair (pair X2 X3) (pair X4 X1)) (@ (pair X2 X3) (pair X4 X1 arrow pair (pair X2 X3) (pair X4 X1)) (mkpair (pair X2 X3) (pair X4 X1)) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6)) (@ X1 (pair X4 X1) (@ X4 (X1 arrow pair X4 X1) (mkpair X4 X1) X7) X8))) (@ X1 (pair X4 X1) (@ X4 (X1 arrow pair X4 X1) (mkpair X4 X1) X7) X8) (refl (pair X4 X1 arrow X1) (snd X4 X1)) (sndpair (pair X4 X1) (@ X1 (pair X4 X1) (@ X4 (X1 arrow pair X4 X1) (mkpair X4 X1) X7) X8) (pair X2 X3) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6))) (sndpair X1 X8 X4 X7))).
eq_tuple4_i : {X1:tp} {Ha:tm (X1 arrow X1 arrow form)} {X2:tp} {X3:tp} {X4:tp} {X:tm (tuple4 X1 X2 X3 X4)} {Y:tm (tuple4 X1 X2 X3 X4)} {Hb:tm (X2 arrow X2 arrow form)} {Hc:tm (X3 arrow X3 arrow form)} {Hd:tm (X4 arrow X4 arrow form)} pf (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) -> pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) -> pf (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y)) -> pf (@ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) -> pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y) = [X1:tp] [Ha:tm (X1 arrow X1 arrow form)] [X2:tp] [X3:tp] [X4:tp] [X:tm (tuple4 X1 X2 X3 X4)] [Y:tm (tuple4 X1 X2 X3 X4)] [Hb:tm (X2 arrow X2 arrow form)] [Hc:tm (X3 arrow X3 arrow form)] [Hd:tm (X4 arrow X4 arrow form)] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y))] [p2:pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y))] [p3:pf (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y))] [p4:pf (@ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y))] def6_i (eqrel X1) (eqrel X2) (eqrel X3) (eqrel X4) (tuple4 X1 X2 X3 X4) (tuple4 X1 X2 X3 X4) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] [x7:tm (tuple4 X1 X2 X3 X4)] [x8:tm (tuple4 X1 X2 X3 X4)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x8) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x8) and @ X3 form (@ X3 (X3 arrow form) x5 (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x8) and @ X4 form (@ X4 (X4 arrow form) x6 (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x8)) Ha Hb Hc Hd X Y (and4_i (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y)) (@ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) p1 p2 p3 p4).
eq_tuple4_e1 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {Hc:tm (eqrel X3)} {Hd:tm (eqrel X4)} {X:tm (tuple4 X1 X2 X3 X4)} {Y:tm (tuple4 X1 X2 X3 X4)} pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [Hc:tm (eqrel X3)] [Hd:tm (eqrel X4)] [X:tm (tuple4 X1 X2 X3 X4)] [Y:tm (tuple4 X1 X2 X3 X4)] [p1:pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y)] and_e1 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y) and @ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (def6_e (tuple4 X1 X2 X3 X4) (tuple4 X1 X2 X3 X4) (eqrel X4) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] [x7:tm (tuple4 X1 X2 X3 X4)] [x8:tm (tuple4 X1 X2 X3 X4)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x8) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x8) and @ X3 form (@ X3 (X3 arrow form) x5 (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x8) and @ X4 form (@ X4 (X4 arrow form) x6 (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x8)) Ha Hb Hc Hd X Y p1).
eq_tuple4_e2 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {Hc:tm (eqrel X3)} {Hd:tm (eqrel X4)} {X:tm (tuple4 X1 X2 X3 X4)} {Y:tm (tuple4 X1 X2 X3 X4)} pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [Hc:tm (eqrel X3)] [Hd:tm (eqrel X4)] [X:tm (tuple4 X1 X2 X3 X4)] [Y:tm (tuple4 X1 X2 X3 X4)] [p1:pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y)] and_e1 (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y) and @ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (def6_e (tuple4 X1 X2 X3 X4) (tuple4 X1 X2 X3 X4) (eqrel X4) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] [x7:tm (tuple4 X1 X2 X3 X4)] [x8:tm (tuple4 X1 X2 X3 X4)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x8) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x8) and @ X3 form (@ X3 (X3 arrow form) x5 (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x8) and @ X4 form (@ X4 (X4 arrow form) x6 (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x8)) Ha Hb Hc Hd X Y p1)).
eq_tuple4_e3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {Hc:tm (eqrel X3)} {Hd:tm (eqrel X4)} {X:tm (tuple4 X1 X2 X3 X4)} {Y:tm (tuple4 X1 X2 X3 X4)} pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y) -> pf (@ X3 form (@ X3 (shadowed_0 X3) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [Hc:tm (eqrel X3)] [Hd:tm (eqrel X4)] [X:tm (tuple4 X1 X2 X3 X4)] [Y:tm (tuple4 X1 X2 X3 X4)] [p1:pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y)] and_e1 (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y)) (@ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (and_e2 (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y) and @ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (def6_e (tuple4 X1 X2 X3 X4) (tuple4 X1 X2 X3 X4) (eqrel X4) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] [x7:tm (tuple4 X1 X2 X3 X4)] [x8:tm (tuple4 X1 X2 X3 X4)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x8) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x8) and @ X3 form (@ X3 (X3 arrow form) x5 (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x8) and @ X4 form (@ X4 (X4 arrow form) x6 (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x8)) Ha Hb Hc Hd X Y p1))).
eq_tuple4_e4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {Hc:tm (eqrel X3)} {Hd:tm (eqrel X4)} {X:tm (tuple4 X1 X2 X3 X4)} {Y:tm (tuple4 X1 X2 X3 X4)} pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y) -> pf (@ X4 form (@ X4 (shadowed_0 X4) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [Hc:tm (eqrel X3)] [Hd:tm (eqrel X4)] [X:tm (tuple4 X1 X2 X3 X4)] [Y:tm (tuple4 X1 X2 X3 X4)] [p1:pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y)] and_e2 (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y)) (@ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (and_e2 (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y) and @ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (def6_e (tuple4 X1 X2 X3 X4) (tuple4 X1 X2 X3 X4) (eqrel X4) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] [x7:tm (tuple4 X1 X2 X3 X4)] [x8:tm (tuple4 X1 X2 X3 X4)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x8) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x8) and @ X3 form (@ X3 (X3 arrow form) x5 (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x8) and @ X4 form (@ X4 (X4 arrow form) x6 (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x8)) Ha Hb Hc Hd X Y p1))).
eq_tuple4_reflexive : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} {T3:tp} {Eq3:tm (rel T3 T3)} {T4:tp} {Eq4:tm (rel T4 T4)} pf (@ (rel T1 T1) form (reflexive T1) Eq1) -> pf (@ (rel T2 T2) form (reflexive T2) Eq2) -> pf (@ (rel T3 T3) form (reflexive T3) Eq3) -> pf (@ (rel T4 T4) form (reflexive T4) Eq4) -> pf (@ (rel (tuple4 T1 T2 T3 T4) (tuple4 T1 T2 T3 T4)) form (reflexive (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [T3:tp] [Eq3:tm (rel T3 T3)] [T4:tp] [Eq4:tm (rel T4 T4)] [p1:pf (@ (rel T1 T1) form (reflexive T1) Eq1)] [p2:pf (@ (rel T2 T2) form (reflexive T2) Eq2)] [p3:pf (@ (rel T3 T3) form (reflexive T3) Eq3)] [p4:pf (@ (rel T4 T4) form (reflexive T4) Eq4)] reflexive_i (tuple4 T1 T2 T3 T4) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) ([x3:tm (tuple4 T1 T2 T3 T4)] eq_tuple4_i T1 Eq1 T2 T3 T4 x3 x3 Eq2 Eq3 Eq4 (reflexive_e T1 Eq1 (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) x3) p1) (reflexive_e T2 Eq2 (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) x3) p2) (reflexive_e T3 Eq3 (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) x3) p3) (reflexive_e T4 Eq4 (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) x3) p4)).
eq_tuple4_symmetric : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} {T3:tp} {Eq3:tm (rel T3 T3)} {T4:tp} {Eq4:tm (rel T4 T4)} pf (@ (rel T1 T1) form (symmetric T1) Eq1) -> pf (@ (rel T2 T2) form (symmetric T2) Eq2) -> pf (@ (rel T3 T3) form (symmetric T3) Eq3) -> pf (@ (rel T4 T4) form (symmetric T4) Eq4) -> pf (@ (rel (tuple4 T1 T2 T3 T4) (tuple4 T1 T2 T3 T4)) form (symmetric (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [T3:tp] [Eq3:tm (rel T3 T3)] [T4:tp] [Eq4:tm (rel T4 T4)] [p1:pf (@ (rel T1 T1) form (symmetric T1) Eq1)] [p2:pf (@ (rel T2 T2) form (symmetric T2) Eq2)] [p3:pf (@ (rel T3 T3) form (symmetric T3) Eq3)] [p4:pf (@ (rel T4 T4) form (symmetric T4) Eq4)] symmetric_i (tuple4 T1 T2 T3 T4) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) ([x3:tm (tuple4 T1 T2 T3 T4)] [y:tm (tuple4 T1 T2 T3 T4)] [p5:pf (@ (tuple4 T1 T2 T3 T4) form (@ (tuple4 T1 T2 T3 T4) (shadowed_0 (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) x3) y)] eq_tuple4_i T1 Eq1 T2 T3 T4 y x3 Eq2 Eq3 Eq4 (symmetric_e T1 Eq1 (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) y) p1 (eq_tuple4_e1 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5)) (symmetric_e T2 Eq2 (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) y) p2 (eq_tuple4_e2 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5)) (symmetric_e T3 Eq3 (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) y) p3 (eq_tuple4_e3 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5)) (symmetric_e T4 Eq4 (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) y) p4 (eq_tuple4_e4 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5))).
eq_tuple4_transitive : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} {T3:tp} {Eq3:tm (rel T3 T3)} {T4:tp} {Eq4:tm (rel T4 T4)} pf (@ (rel T1 T1) form (transitive T1) Eq1) -> pf (@ (rel T2 T2) form (transitive T2) Eq2) -> pf (@ (rel T3 T3) form (transitive T3) Eq3) -> pf (@ (rel T4 T4) form (transitive T4) Eq4) -> pf (@ (rel (tuple4 T1 T2 T3 T4) (tuple4 T1 T2 T3 T4)) form (transitive (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [T3:tp] [Eq3:tm (rel T3 T3)] [T4:tp] [Eq4:tm (rel T4 T4)] [p1:pf (@ (rel T1 T1) form (transitive T1) Eq1)] [p2:pf (@ (rel T2 T2) form (transitive T2) Eq2)] [p3:pf (@ (rel T3 T3) form (transitive T3) Eq3)] [p4:pf (@ (rel T4 T4) form (transitive T4) Eq4)] transitive_i (tuple4 T1 T2 T3 T4) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) ([x3:tm (tuple4 T1 T2 T3 T4)] [y:tm (tuple4 T1 T2 T3 T4)] [z1:tm (tuple4 T1 T2 T3 T4)] [p5:pf (@ (tuple4 T1 T2 T3 T4) form (@ (tuple4 T1 T2 T3 T4) (shadowed_0 (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) x3) y)] [p6:pf (@ (tuple4 T1 T2 T3 T4) form (@ (tuple4 T1 T2 T3 T4) (shadowed_0 (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) y) z1)] eq_tuple4_i T1 Eq1 T2 T3 T4 x3 z1 Eq2 Eq3 Eq4 (transitive_e T1 Eq1 (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) y) (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) z1) p1 (eq_tuple4_e1 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5) (eq_tuple4_e1 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 y z1 p6)) (transitive_e T2 Eq2 (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) y) (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) z1) p2 (eq_tuple4_e2 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5) (eq_tuple4_e2 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 y z1 p6)) (transitive_e T3 Eq3 (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) y) (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) z1) p3 (eq_tuple4_e3 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5) (eq_tuple4_e3 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 y z1 p6)) (transitive_e T4 Eq4 (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) y) (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) z1) p4 (eq_tuple4_e4 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5) (eq_tuple4_e4 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 y z1 p6))).
valideqv_eq_tuple4 : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {X3:tp} {Hc:tm (eqrel X3)} {X4:tp} {Hd:tm (eqrel X4)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel X3) form (valideqv X3) Hc) -> pf (@ (eqrel X4) form (valideqv X4) Hd) -> pf (@ (eqrel (tuple4 X1 X2 X3 X4)) form (valideqv (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [X3:tp] [Hc:tm (eqrel X3)] [X4:tp] [Hd:tm (eqrel X4)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] [p3:pf (@ (eqrel X3) form (valideqv X3) Hc)] [p4:pf (@ (eqrel X4) form (valideqv X4) Hd)] valideqv_i (tuple4 X1 X2 X3 X4) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) (eq_tuple4_reflexive X1 Ha X2 Hb X3 Hc X4 Hd (valideqv_e1 X1 Ha p1) (valideqv_e1 X2 Hb p2) (valideqv_e1 X3 Hc p3) (valideqv_e1 X4 Hd p4)) (eq_tuple4_symmetric X1 Ha X2 Hb X3 Hc X4 Hd (valideqv_e2 X1 Ha p1) (valideqv_e2 X2 Hb p2) (valideqv_e2 X3 Hc p3) (valideqv_e2 X4 Hd p4)) (eq_tuple4_transitive X1 Ha X2 Hb X3 Hc X4 Hd (valideqv_e3 X1 Ha p1) (valideqv_e3 X2 Hb p2) (valideqv_e3 X3 Hc p3) (valideqv_e3 X4 Hd p4)).
parfun : {A:tp} {B:tp} tm (rel A B) -> tm form = [A:tp] [B:tp] [P:tm (rel A B)] forall3 A B B ([m:tm A] [n:tm B] [n':tm B] @ B form (@ A (shadowed_0 B) P m) n imp @ B form (@ A (shadowed_0 B) P m) n' imp eq B n n').
parfun2 : {A:tp} {B:tp} {C:tp} tm (rel3 A B C) -> tm form = [A:tp] [B:tp] [C:tp] [P:tm (rel3 A B C)] forall4 A B C C ([m1:tm A] [m2:tm B] [n:tm C] [n':tm C] @ C form (@ B (shadowed_0 C) (@ A (rel B C) P m1) m2) n imp @ C form (@ B (shadowed_0 C) (@ A (rel B C) P m1) m2) n' imp eq C n n').
parfun2_2 : {A:tp} {B:tp} {C:tp} {D:tp} tm (A arrow B arrow C arrow D arrow form) -> tm form = [A:tp] [B:tp] [C:tp] [D:tp] [P:tm (A arrow B arrow C arrow D arrow form)] forall6 A B C C D D ([m1:tm A] [m2:tm B] [n1:tm C] [n1':tm C] [n2:tm D] [n2':tm D] @ D form (@ C (D arrow form) (@ B (C arrow D arrow form) (@ A (B arrow C arrow D arrow form) P m1) m2) n1) n2 imp @ D form (@ C (D arrow form) (@ B (C arrow D arrow form) (@ A (B arrow C arrow D arrow form) P m1) m2) n1') n2' imp eq C n1 n1' and eq D n2 n2').
parfun3 : {A:tp} {B:tp} {C:tp} {D:tp} tm (A arrow B arrow C arrow D arrow form) -> tm form = [A:tp] [B:tp] [C:tp] [D:tp] [P:tm (A arrow B arrow C arrow D arrow form)] forall5 A B C D D ([m1:tm A] [m2:tm B] [m3:tm C] [n:tm D] [n':tm D] @ D form (@ C (D arrow form) (@ B (C arrow D arrow form) (@ A (B arrow C arrow D arrow form) P m1) m2) m3) n imp @ D form (@ C (D arrow form) (@ B (C arrow D arrow form) (@ A (B arrow C arrow D arrow form) P m1) m2) m3) n' imp eq D n n').
parfun_i : {X1:tp} {X2:tp} {P:tm (X1 arrow X2 arrow form)} ({m:tm X1} {n:tm X2} {n':tm X2} pf (@ X2 form (@ X1 (X2 arrow form) P m) n) -> pf (@ X2 form (@ X1 (X2 arrow form) P m) n') -> pf (eq X2 n n')) -> pf (parfun X1 X2 P) = [X1:tp] [X2:tp] [P:tm (X1 arrow X2 arrow form)] [x3:{m:tm X1} {n:tm X2} {n':tm X2} pf (@ X2 form (@ X1 (X2 arrow form) P m) n) -> pf (@ X2 form (@ X1 (X2 arrow form) P m) n') -> pf (eq X2 n n')] forall3_imp2_i X1 X2 X2 ([x4:tm X1] [x5:tm X2] [x6:tm X2] @ X2 form (@ X1 (X2 arrow form) P x4) x5) ([x4:tm X1] [x5:tm X2] [x6:tm X2] @ X2 form (@ X1 (X2 arrow form) P x4) x6) ([x4:tm X1] [x5:tm X2] [x6:tm X2] eq X2 x5 x6) ([m:tm X1] [n:tm X2] [n':tm X2] [x4:pf (@ X2 form (@ X1 (X2 arrow form) P m) n)] [x5:pf (@ X2 form (@ X1 (X2 arrow form) P m) n')] x3 m n n' x4 x5).
parfun_e : {X1:tp} {X2:tp} {F:tm (rel X1 X2)} {M:tm X1} {N:tm X2} {N':tm X2} pf (parfun X1 X2 F) -> pf (@ X2 form (@ X1 (shadowed_0 X2) F M) N) -> pf (@ X2 form (@ X1 (shadowed_0 X2) F M) N') -> pf (eq X2 N N') = [X1:tp] [X2:tp] [F:tm (rel X1 X2)] [M:tm X1] [N:tm X2] [N':tm X2] [p1:pf (parfun X1 X2 F)] [x3:pf (@ X2 form (@ X1 (shadowed_0 X2) F M) N)] [x4:pf (@ X2 form (@ X1 (shadowed_0 X2) F M) N')] imp2_e (@ X2 form (@ X1 (shadowed_0 X2) F M) N) (@ X2 form (@ X1 (shadowed_0 X2) F M) N') (eq X2 N N') (forall3_e X1 X2 X2 ([x5:tm X1] [x6:tm X2] [x7:tm X2] @ X2 form (@ X1 (shadowed_0 X2) F x5) x6 imp @ X2 form (@ X1 (shadowed_0 X2) F x5) x7 imp eq X2 x6 x7) p1 M N N') x3 x4.
parfun2_e : {X1:tp} {X2:tp} {X3:tp} {F:tm (rel3 X1 X2 X3)} {X:tm X1} {Y:tm X2} {Z1:tm X3} {Z2:tm X3} pf (parfun2 X1 X2 X3 F) -> pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F X) Y) Z1) -> pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F X) Y) Z2) -> pf (eq X3 Z1 Z2) = [X1:tp] [X2:tp] [X3:tp] [F:tm (rel3 X1 X2 X3)] [X:tm X1] [Y:tm X2] [Z1:tm X3] [Z2:tm X3] [p1:pf (parfun2 X1 X2 X3 F)] [p2:pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F X) Y) Z1)] [p3:pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F X) Y) Z2)] forall4_imp2_e X1 X2 X3 X3 ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X3] @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F x3) y) z1) ([x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X3] @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F x4) y) u) ([x5:tm X1] [y:tm X2] [z3:tm X3] [u:tm X3] eq X3 z3 u) p1 X Y Z1 Z2 p2 p3.
ncomp : {T:tp} tm ((T arrow T) arrow num arrow T arrow T arrow form) = [T:tp] lam4 (T arrow T) num T T form ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] _ncomp T x3 x4 x5 x6).
n_iter : {T:tp} tm ((T arrow T) arrow T arrow sequence T) = [T:tp] lam2 (T arrow T) T (num arrow T arrow form) ([F:tm (T arrow T)] [X0:tm T] lam2 num T form ([I:tm num] [Y:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) I) X0) Y)).
ncomp_zero : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) X) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F zero X X (forall_i ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) zero) Z) Z) imp forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N') Z1) (@ X1 X1 F Z2)) imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) zero) X) X) ([NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] imp2_i (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z)) (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2))) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) X) X) ([P1:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z))] [P2:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2)))] forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) x3) x3) P1 X))).
ncomp_succ : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (isNat N) -> pf (gt N zero) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (pred N)) X) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) (@ X1 X1 F Y)) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [P0:pf (isNat N)] [P1:pf (gt N zero)] [P2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (pred N)) X) Y)] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F N X (@ X1 X1 F Y) (forall_i ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) zero) Z) Z) imp forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N') Z1) (@ X1 X1 F Z2)) imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N) X) (@ X1 X1 F Y)) ([NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] imp2_i (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z)) (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2))) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N) X) (@ X1 X1 F Y)) ([Q1a:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z))] [Q1b:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2)))] imp3_e (isNat N) (gt N zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N)) X) Y) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N) X) (@ X1 X1 F Y)) (forall3_e num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) x3) x4) (@ X1 X1 F x5)) Q1b N X Y) P0 P1 (imp2_e (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form NC F zero Z Z)) (_forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form NC F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form NC F N' Z1 (_@ X1 X1 F Z2))) (_@4 (X1 arrow X1) num X1 X1 form NC F (pred N) X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N) X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F (pred N) X Y P2) NC) Q1a Q1b)))).
ncomp_succ' : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (isNat N) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (succ N)) X) (@ X1 X1 F Y)) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [P0:pf (isNat N)] [P2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y)] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F (succ N) X (@ X1 X1 F Y) (forall_i ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) zero) Z) Z) imp forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N') Z1) (@ X1 X1 F Z2)) imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) (succ N)) X) (@ X1 X1 F Y)) ([NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] imp2_i (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z)) (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2))) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (succ N)) X) (@ X1 X1 F Y)) ([Q1a:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z))] [Q1b:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2)))] imp3_e (isNat (succ N)) (gt (succ N) zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (succ N))) X) Y) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (succ N)) X) (@ X1 X1 F Y)) (forall3_e num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) x3) x4) (@ X1 X1 F x5)) Q1b (succ N) X Y) (isNat_succ_i N P0) (trans_gt_geq (succ N) N zero (succ_greater N) (isNat->geq_zero N P0)) (congr num (pred (succ N)) N ([z1:tm num] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) z1) X) Y) (predsucc N) (imp2_e (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form NC F zero Z Z)) (_forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form NC F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form NC F N' Z1 (_@ X1 X1 F Z2))) (_@4 (X1 arrow X1) num X1 X1 form NC F N X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F N X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F N X Y P2) NC) Q1a Q1b))))).
ncomp_zero_pred : {T:tp} tm ((T arrow T) arrow num arrow T arrow T arrow form) = [T:tp] lam4 (T arrow T) num T T form ([F:tm (T arrow T)] [N:tm num] [X:tm T] [Y:tm T] eq num N zero imp eq T X Y).
ncomp_zero_inv : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y imp eq X1 X Y) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] imp_i (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y) (eq X1 X Y) ([P1:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y)] cut (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form (ncomp_zero_pred X1) F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_zero_pred X1) F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_zero_pred X1) F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_zero_pred X1) F zero X Y) (eq X1 X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F zero X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F zero X Y P1) (ncomp_zero_pred X1)) ([P3:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) Z) Z) imp forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) N') Z1) (@ X1 X1 F Z2)) imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) X) Y)] cut (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) X) Y) (eq X1 X Y) (imp2_e (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) Z) Z)) (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) N') Z1) (@ X1 X1 F Z2))) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) X) Y) P3 (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] eq num x5 zero imp eq X1 x6 x7)) F) zero) x3) x3) ([Z:tm X1] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] eq num x4 zero imp eq X1 x5 x6) F zero Z Z (imp_i (eq num zero zero) (== X1 Z Z) ([Q:pf (eq num zero zero)] refl X1 Z)))) (forall3_i num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x6:tm (X1 arrow X1)] [x7:tm num] [x8:tm X1] [x9:tm X1] eq num x7 zero imp eq X1 x8 x9)) F) x3) x4) (@ X1 X1 F x5)) ([N':tm num] [Z1:tm X1] [Z2:tm X1] imp3_i (isNat N') (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) (pred N')) Z1) Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] eq num x4 zero imp eq X1 x5 x6)) F) N') Z1) (@ X1 X1 F Z2)) ([x3:pf (isNat N')] [P7:pf (gt N' zero)] [x4:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) (pred N')) Z1) Z2)] def4_i (X1 arrow X1) num X1 X1 ([x5:tm (X1 arrow X1)] [x6:tm num] [x7:tm X1] [x8:tm X1] eq num x6 zero imp eq X1 x7 x8) F N' Z1 (@ X1 X1 F Z2) (imp_i (eq num N' zero) (eq X1 Z1 (@ X1 X1 F Z2)) ([P8:pf (eq num N' zero)] false_e (eq X1 Z1 (@ X1 X1 F Z2)) (not_e (eq num N' zero) (gt->neq N' zero P7) P8))))))) ([P4:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) X) Y)] imp_e (eq num zero zero) (eq X1 X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] eq num x4 zero imp eq X1 x5 x6) F zero X Y P4) (refl num zero)))).
ncomp_one_pred : {T:tp} tm ((T arrow T) arrow num arrow T arrow T arrow form) = [T:tp] lam4 (T arrow T) num T T form ([F:tm (T arrow T)] [N:tm num] [X:tm T] [Y:tm T] (eq num N one imp eq T (@ T T F X) Y) and (eq num N zero imp eq T X Y)).
ncomp_one_inv : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) one) X) Y imp eq X1 (@ X1 X1 F X) Y) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] imp_i (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) one) X) Y) (eq X1 (@ X1 X1 F X) Y) ([P1:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) one) X) Y)] cut (_@4 (X1 arrow X1) num X1 X1 form (ncomp_one_pred X1) F one X Y) (eq X1 (@ X1 X1 F X) Y) (imp2_e (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form (ncomp_one_pred X1) F zero Z Z)) (_forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_one_pred X1) F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_one_pred X1) F N' Z1 (_@ X1 X1 F Z2))) (_@4 (X1 arrow X1) num X1 X1 form (ncomp_one_pred X1) F one X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F one X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F one X Y P1) (ncomp_one_pred X1)) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (eq num x5 one imp eq X1 (@ X1 X1 x4 x6) x7) and (eq num x5 zero imp eq X1 x6 x7))) F) zero) x3) x3) ([Z:tm X1] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (eq num x4 one imp eq X1 (@ X1 X1 x3 x5) x6) and (eq num x4 zero imp eq X1 x5 x6)) F zero Z Z (and_i (eq num zero one imp eq X1 (@ X1 X1 F Z) Z) (eq num zero zero imp == X1 Z Z) (imp_i (eq num zero one) (eq X1 (@ X1 X1 F Z) Z) ([Q:pf (eq num zero one)] false_e (eq X1 (@ X1 X1 F Z) Z) (not_e (eqn one zero) one_neq_zero (symm num zero one Q)))) (imp_i (eq num zero zero) (== X1 Z Z) ([Q:pf (eq num zero zero)] refl X1 Z))))) (forall3_i num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_one_pred X1) F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x6:tm (X1 arrow X1)] [x7:tm num] [x8:tm X1] [x9:tm X1] (eq num x7 one imp eq X1 (@ X1 X1 x6 x8) x9) and (eq num x7 zero imp eq X1 x8 x9))) F) x3) x4) (_@ X1 X1 F x5)) ([N':tm num] [Z1:tm X1] [Z2:tm X1] imp3_i (isNat N') (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_one_pred X1) F) (pred N')) Z1) Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (eq num x4 one imp eq X1 (@ X1 X1 x3 x5) x6) and (eq num x4 zero imp eq X1 x5 x6))) F) N') Z1) (_@ X1 X1 F Z2)) ([x3:pf (isNat N')] [P6:pf (gt N' zero)] [P7:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_one_pred X1) F) (pred N')) Z1) Z2)] def4_i (X1 arrow X1) num X1 X1 ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (eq num x5 one imp eq X1 (@ X1 X1 x4 x6) x7) and (eq num x5 zero imp eq X1 x6 x7)) F N' Z1 (_@ X1 X1 F Z2) (and_i (eq num N' one imp eq X1 (@ X1 X1 F Z1) (@ X1 X1 F Z2)) (eq num N' zero imp eq X1 Z1 (_@ X1 X1 F Z2)) (cut (eq num (pred N') zero imp eq X1 Z1 Z2) (eq num N' one imp eq X1 (@ X1 X1 F Z1) (@ X1 X1 F Z2)) (and_e2 (eq num (pred N') one imp eq X1 (@ X1 X1 F Z1) Z2) (eq num (pred N') zero imp eq X1 Z1 Z2) (def4_e X1 X1 num (X1 arrow X1) ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (eq num x5 one imp eq X1 (@ X1 X1 x4 x6) x7) and (eq num x5 zero imp eq X1 x6 x7)) F (pred N') Z1 Z2 P7)) ([P9:pf (eq num (pred N') zero imp eq X1 Z1 Z2)] imp_i (eq num N' one) (eq X1 (@ X1 X1 F Z1) (@ X1 X1 F Z2)) ([P10:pf (eq num N' one)] cut (eq X1 Z1 Z2) (eq X1 (@ X1 X1 F Z1) (@ X1 X1 F Z2)) (imp_e (eq num (pred N') zero) (eq X1 Z1 Z2) P9 (trans num (+ N' (neg one)) (+ one (neg one)) zero (plus_cong N' one (neg one) (neg one) P10 (refl num (neg one))) (inv_add one))) ([P11:pf (eq X1 Z1 Z2)] congr X1 Z1 Z2 ([W:tm X1] eq X1 (@ X1 X1 F W) (@ X1 X1 F Z2)) P11 (refl X1 (@ X1 X1 F Z2)))))) (imp_i (eq num N' zero) (eq X1 Z1 (_@ X1 X1 F Z2)) ([P8:pf (eq num N' zero)] false_e (eq X1 Z1 (_@ X1 X1 F Z2)) (not_e (eq num N' zero) (gt->neq N' zero P6) P8)))))))) ([P4:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_one_pred X1) F) one) X) Y)] imp_e (eq num one one) (eq X1 (@ X1 X1 F X) Y) (and_e1 (eq num one one imp eq X1 (@ X1 X1 F X) Y) (eq num one zero imp eq X1 X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (eq num x4 one imp eq X1 (@ X1 X1 x3 x5) x6) and (eq num x4 zero imp eq X1 x5 x6)) F one X Y P4)) (refl num one))).
ncomp_gt_zero_inv_pred : {T:tp} tm ((T arrow T) arrow num arrow T arrow T arrow form) -> tm ((T arrow T) arrow num arrow T arrow T arrow form) = [T:tp] [NC:tm ((T arrow T) arrow num arrow T arrow T arrow form)] lam4 (T arrow T) num T T form ([F:tm (T arrow T)] [N:tm num] [X:tm T] [Y:tm T] (gt N zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) NC F) (pred N)) (@ T T F X)) Y) and (eq num N zero imp eq T X Y)).
ncomp_gt_zero_inv1 : {X1:tp} {F:tm (X1 arrow X1)} {N:tnum} {X:tm X1} {Y:tm X1} {NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y) -> pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z)) -> pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2))) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (plus N one)) X) Y) = [X1:tp] [F:tm (X1 arrow X1)] [N:tnum] [X:tm X1] [Y:tm X1] [NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] [P2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y)] [P5a:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z))] [P5b:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2)))] imp2_e (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form (ncomp_gt_zero_inv_pred X1 NC) F zero Z Z)) (_forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_gt_zero_inv_pred X1 NC) F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_gt_zero_inv_pred X1 NC) F N' Z1 (_@ X1 X1 F Z2))) (_@4 (X1 arrow X1) num X1 X1 form (ncomp_gt_zero_inv_pred X1 NC) F (plus N one) X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F (plus N one) X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F (plus N one) X Y P2) (ncomp_gt_zero_inv_pred X1 NC)) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (gt x5 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x4) (pred x5)) (@ X1 X1 x4 x6)) x7) and (eq num x5 zero imp eq X1 x6 x7))) F) zero) x3) x3) ([Z:tm X1] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6)) F zero Z Z (and_i (gt zero zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred zero)) (@ X1 X1 F Z)) Z) (eq num zero zero imp == X1 Z Z) (imp_i (gt zero zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred zero)) (@ X1 X1 F Z)) Z) ([R1:pf (gt zero zero)] false_e (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred zero)) (@ X1 X1 F Z)) Z) (not_e (eq num zero zero) (gt->neq zero zero R1) (refl num zero)))) (imp_i (eq num zero zero) (== X1 Z Z) ([R1:pf (eq num zero zero)] refl X1 Z))))) (forall3_i num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x6:tm (X1 arrow X1)] [x7:tm num] [x8:tm X1] [x9:tm X1] (gt x7 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x6) (pred x7)) (@ X1 X1 x6 x8)) x9) and (eq num x7 zero imp eq X1 x8 x9))) F) x3) x4) (_@ X1 X1 F x5)) ([N':tm num] [Z1:tm X1] [Z2:tm X1] or_e (== num N' one) (!= num N' one) (isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6))) F) N') Z1) (_@ X1 X1 F Z2)) (num_eq_excluded_middle N' one) ([Q3:pf (eq num N' one)] imp3_i (isNat N') (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred N')) Z1) Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6))) F) N') Z1) (_@ X1 X1 F Z2)) ([x3:pf (isNat N')] [Q4a:pf (gt N' zero)] [Q4b:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred N')) Z1) Z2)] cut (== num (+ N' (neg one)) zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (gt x5 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x4) (pred x5)) (@ X1 X1 x4 x6)) x7) and (eq num x5 zero imp eq X1 x6 x7))) F) N') Z1) (_@ X1 X1 F Z2)) (trans num (+ N' (neg one)) (+ one (neg one)) zero (minus_cong N' one one one Q3 (refl num one)) (inv_add one)) ([R3:pf (eq num (pred N') zero)] cut (eq X1 Z1 Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (gt x5 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x4) (pred x5)) (@ X1 X1 x4 x6)) x7) and (eq num x5 zero imp eq X1 x6 x7))) F) N') Z1) (_@ X1 X1 F Z2)) (imp_e (eq num (pred N') zero) (eq X1 Z1 Z2) (and_e2 (gt (pred N') zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2) (eq num (pred N') zero imp eq X1 Z1 Z2) (def4_e X1 X1 num (X1 arrow X1) ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (gt x5 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x4) (pred x5)) (@ X1 X1 x4 x6)) x7) and (eq num x5 zero imp eq X1 x6 x7)) F (pred N') Z1 Z2 Q4b)) R3) ([Q6:pf (eq X1 Z1 Z2)] def4_i (X1 arrow X1) num X1 X1 ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (gt x5 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x4) (pred x5)) (@ X1 X1 x4 x6)) x7) and (eq num x5 zero imp eq X1 x6 x7)) F N' Z1 (_@ X1 X1 F Z2) (and_i (gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (eq num N' zero imp eq X1 Z1 (_@ X1 X1 F Z2)) (imp_i (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) ([x4:pf (gt N' zero)] cut (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) (@ X1 X1 F Z2)) (@ X1 X1 F Z2)) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (forall_e X1 ([x5:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) x5) x5) P5a (@ X1 X1 F Z2)) ([Q7:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) (@ X1 X1 F Z2)) (@ X1 X1 F Z2))] congr X1 Z1 Z2 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z)) (@ X1 X1 F Z2)) Q6 (congr num (pred N') zero ([Z:tm num] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) Z) (@ X1 X1 F Z2)) (@ X1 X1 F Z2)) R3 Q7)))) (imp_i (eq num N' zero) (eq X1 Z1 (_@ X1 X1 F Z2)) ([Q7:pf (eq num N' zero)] false_e (eq X1 Z1 (_@ X1 X1 F Z2)) (not_e (eqn one zero) one_neq_zero (trans num one N' zero (symm num N' one Q3) Q7))))))))) ([Q3:pf (not (eq num N' one))] imp3_i (isNat N') (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred N')) Z1) Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6))) F) N') Z1) (_@ X1 X1 F Z2)) ([Q4c:pf (isNat N')] [Q4a:pf (gt N' zero)] [Q4b:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred N')) Z1) Z2)] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6)) F N' Z1 (_@ X1 X1 F Z2) (and_i (gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (eq num N' zero imp eq X1 Z1 (_@ X1 X1 F Z2)) (imp_i (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) ([Q6:pf (gt N' zero)] cut (isNat (pred N') imp gt (pred N') zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (forall3_e num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) x3) x4) (@ X1 X1 F x5)) P5b (pred N') (@ X1 X1 F Z1) Z2) ([Q7:pf (isNat (pred N') imp gt (pred N') zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2))] cut (gt (pred N') zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (or_e (== num (pred N') zero) (> (pred N') zero) (gt (pred N') zero) (greater_or_eq (pred N') zero (lesseq_minus1_i zero N' p_zero (and_e1 (isInt N') (geq N' zero) Q4c) Q4a)) ([Q8:pf (eq num (pred N') zero)] false_e (gt (pred N') zero) (not_e (eq num N' one) Q3 (plus_eq1 N' (neg one) one (trans num (pred N') zero (plus one (neg one)) Q8 (symm num (plus one (neg one)) zero (inv_add one)))))) ([Q8:pf (gt (pred N') zero)] Q8)) ([R6:pf (gt (pred N') zero)] imp3_e (isNat (pred N')) (gt (pred N') zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) Q7 (and_i (isInt (pred N')) (>= (pred N') zero) (isInt_pred_i N' (and_e1 (isInt N') (geq N' zero) Q4c)) (gt->geq (pred N') zero R6)) R6 (imp_e (gt (pred N') zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2) (and_e1 (gt (pred N') zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2) (eq num (pred N') zero imp eq X1 Z1 Z2) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6)) F (pred N') Z1 Z2 Q4b)) R6))))) (imp_i (eq num N' zero) (eq X1 Z1 (_@ X1 X1 F Z2)) ([R5:pf (eq num N' zero)] false_e (eq X1 Z1 (_@ X1 X1 F Z2)) (not_e (eq num N' zero) (gt->neq N' zero Q4a) R5)))))))).
ncomp_gt_zero_inv : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (gt N zero) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) (@ X1 X1 F X)) Y) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [P1:pf (gt N zero)] [P2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y)] strictify num (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6)) F) N) (@ X1 X1 F X)) Y) N (strictify (X1 arrow X1) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6)) F) N) (@ X1 X1 F X)) Y) F (strictify X1 (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6)) F) N) (@ X1 X1 F X)) Y) X (strictify X1 (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6)) F) N) (@ X1 X1 F X)) Y) Y (def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F N (@ X1 X1 F X) Y (forall_i ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) zero) Z) Z) imp forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N') Z1) (@ X1 X1 F Z2)) imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N) (@ X1 X1 F X)) Y) ([NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] imp2_i (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z)) (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2))) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N) (@ X1 X1 F X)) Y) ([P5a:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z))] [P5b:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2)))] cut (gt (plus N one) zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (plus N one))) (@ X1 X1 F X)) Y) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N) (@ X1 X1 F X)) Y) (and_e1 (gt (plus N one) zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (plus N one))) (@ X1 X1 F X)) Y) (eq num (plus N one) zero imp eq X1 X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6)) F (plus N one) X Y (ncomp_gt_zero_inv1 X1 F N X Y NC P2 P5a P5b))) ([P7:pf (gt (succ N) zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (minus (plus N one) one)) (@ X1 X1 F X)) Y)] congr num N (plus (plus N one) (neg one)) ([Z:tm num] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) Z) (@ X1 X1 F X)) Y) (trans num N (+ N (plus one (neg one))) (plus (plus N one) (neg one)) (trans num N (+ N zero) (+ N (plus one (neg one))) (symm num (+ N zero) N (plus_zero N)) (plus_cong N N zero (plus one (neg one)) (refl num N) (symm num (plus one (neg one)) zero (inv_add one)))) (symm num (plus (plus N one) (neg one)) (plus N (plus one (neg one))) (assoc_add N one (neg one)))) (imp_e (gt (succ N) zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (minus (plus N one) one)) (@ X1 X1 F X)) Y) P7 (trans_gt (succ N) N zero (succ_greater N) P1)))))))))).
ncomp_succ_inv : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (geq N zero) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) (@ X1 X1 F X)) Y) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [P1:pf (geq N zero)] [P2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y)] cut (== num N zero or > N zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) (@ X1 X1 F X)) Y) (greater_or_eq N zero P1) ([P3:pf (eq num N zero or gt N zero)] or_e (eq num N zero) (gt N zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) (@ X1 X1 F X)) Y) P3 ([P4:pf (eq num N zero)] cut (eq X1 (@ X1 X1 F X) Y) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) (@ X1 X1 F X)) Y) (imp_e (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) one) X) Y) (eq X1 (@ X1 X1 F X) Y) (ncomp_one_inv X1 F X Y) (congr num one (+ N one) ([W:tm num] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) W) X) Y) (trans num one (plus zero one) (+ N one) (trans num one (+ one zero) (plus zero one) (symm num (+ one zero) one (plus_zero one)) (comm_add one zero)) (plus_cong zero N one one (symm num N zero P4) (refl num one))) P2)) ([P5:pf (eq X1 (@ X1 X1 F X) Y)] congr X1 (@ X1 X1 F X) Y ([W:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) W) Y) P5 (congr num N zero ([W:tm num] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) W) Y) Y) P4 (ncomp_zero X1 F Y)))) ([P4:pf (gt N zero)] ncomp_gt_zero_inv N X1 F X Y P4 P2)).
ncomp_gt_zero_inv2_pred : {X1:tp} tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) = [X1:tp] lam4 (X1 arrow X1) num X1 X1 form ([f:tm (X1 arrow X1)] [n:tm num] [x3:tm X1] [y:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) f) n) x3) y and (gt n zero imp exists X1 ([y':tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) f) (pred n)) x3) y' and eq X1 y (@ X1 X1 f y')))).
ncomp_gt_zero_inv2 : {N:tnum} {T:tp} {F:tm (T arrow T)} {X:tm T} {Y:tm T} pf (gt N zero) -> pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Y) -> pf (exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred N)) X) y' and eq T Y (@ T T F y'))) = [N:tnum] [T:tp] [F:tm (T arrow T)] [X:tm T] [Y:tm T] [p1:pf (gt N zero)] [p2:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Y)] cut (_@4 (T arrow T) num T T form (ncomp_gt_zero_inv2_pred T) F N X Y) (exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred N)) X) y' and eq T Y (@ T T F y'))) (imp2_e (_forall T ([Z:tm T] _@4 (T arrow T) num T T form (ncomp_gt_zero_inv2_pred T) F zero Z Z)) (_forall3 num T T ([N':tm num] [Z1:tm T] [Z2:tm T] isNat N' imp gt N' zero imp _@4 (T arrow T) num T T form (ncomp_gt_zero_inv2_pred T) F (pred N') Z1 Z2 imp _@4 (T arrow T) num T T form (ncomp_gt_zero_inv2_pred T) F N' Z1 (_@ T T F Z2))) (_@4 (T arrow T) num T T form (ncomp_gt_zero_inv2_pred T) F N X Y) (forall_e ((T arrow T) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T) arrow num arrow T arrow T arrow form)] _forall T ([Z:tm T] _@4 (T arrow T) num T T form x3 F zero Z Z) imp _forall3 num T T ([N':tm num] [Z1:tm T] [Z2:tm T] isNat N' imp gt N' zero imp _@4 (T arrow T) num T T form x3 F (pred N') Z1 Z2 imp _@4 (T arrow T) num T T form x3 F N' Z1 (_@ T T F Z2)) imp _@4 (T arrow T) num T T form x3 F N X Y) (def4_e T T num (T arrow T) ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] _ncomp T x3 x4 x5 x6) F N X Y p2) (ncomp_gt_zero_inv2_pred T)) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (lam4 (T arrow T) num T T form ([x4:tm (T arrow T)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x4) x5) x6) x7 and (gt x5 zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x4) (pred x5)) x6) y' and eq T x7 (@ T T x4 y'))))) F) zero) x3) x3) ([z1:tm T] def4_i (T arrow T) num T T ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y' and eq T x6 (@ T T x3 y')))) F zero z1 z1 (and_i (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) z1) z1) (gt zero zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred zero)) z1) y' and eq T z1 (@ T T F y'))) (ncomp_zero T F z1) (imp_i (gt zero zero) (exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred zero)) z1) y' and eq T z1 (@ T T F y'))) ([p3:pf (gt zero zero)] false_e (exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred zero)) z1) y' and eq T z1 (@ T T F y'))) (not_e (geq zero zero) p3 (ord_reflexivity zero))))))) (forall3_i num T T ([x3:tm num] [x4:tm T] [x5:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp_gt_zero_inv2_pred T) F) (pred x3)) x4) x5 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (lam4 (T arrow T) num T T form ([x6:tm (T arrow T)] [x7:tm num] [x8:tm T] [x9:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x6) x7) x8) x9 and (gt x7 zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x6) (pred x7)) x8) y' and eq T x9 (@ T T x6 y'))))) F) x3) x4) (_@ T T F x5)) ([n':tm num] [x':tm T] [y':tm T] imp3_i (isNat n') (gt n' zero) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp_gt_zero_inv2_pred T) F) (pred n')) x') y') (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (lam4 (T arrow T) num T T form ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y'1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y'1 and eq T x6 (@ T T x3 y'1))))) F) n') x') (_@ T T F y')) ([p3:pf (isNat n')] [p4:pf (gt n' zero)] [p5:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp_gt_zero_inv2_pred T) F) (pred n')) x') y')] def4_i (T arrow T) num T T ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y'2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y'2 and eq T x6 (@ T T x3 y'2)))) F n' x' (_@ T T F y') (and_i (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) n') x') (@ T T F y')) (gt n' zero imp exists T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') x3 and eq T (_@ T T F y') (@ T T F x3))) (ncomp_succ n' T F x' y' p3 p4 (and_e1 (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') y') (gt (pred n') zero imp exists T ([y'3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred (pred n'))) x') y'3 and eq T y' (@ T T F y'3))) (def4_e T T num (T arrow T) ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y'4:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y'4 and eq T x6 (@ T T x3 y'4)))) F (pred n') x' y' p5))) (imp_i (gt n' zero) (exists T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') x3 and eq T (_@ T T F y') (@ T T F x3))) ([p6:pf (gt n' zero)] exists_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') x3 and eq T (_@ T T F y') (@ T T F x3)) y' (and_i (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') y') (== T (_@ T T F y') (_@ T T F y')) (and_e1 (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') y') (gt (pred n') zero imp exists T ([y'5:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred (pred n'))) x') y'5 and eq T y' (@ T T F y'5))) (def4_e T T num (T arrow T) ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y'6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y'6 and eq T x6 (@ T T x3 y'6)))) F (pred n') x' y' p5)) (refl T (_@ T T F y')))))))))) ([p3:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp_gt_zero_inv2_pred T) F) N) X) Y)] imp_e (gt N zero) (exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred N)) X) y' and eq T Y (@ T T F y'))) (and_e2 (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Y) (gt N zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred N)) X) y' and eq T Y (@ T T F y'))) (def4_e T T num (T arrow T) ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y' and eq T x6 (@ T T x3 y')))) F N X Y p3)) p1).
ncomp_unique_step : tp -> tm num -> tform = [T:tp] [N:tm num] forall4 (T arrow T) T T T ([F:tm (T arrow T)] [X:tm T] [Y:tm T] [Z:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Y imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Z imp eq T Y Z).
ncomp_unique_zero : {T:tp} pf (ncomp_unique_step T zero) = [T:tp] forall4_i (T arrow T) T T T ([x3:tm (T arrow T)] [x4:tm T] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) zero) x4) x5 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) zero) x4) x6 imp == T x5 x6) ([F:tm (T arrow T)] [X:tm T] [Y:tm T] [Z:tm T] imp2_i (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Y) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Z) (== T Y Z) ([P2:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Y)] [P3:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Z)] cut (eq T X Y) (== T Y Z) (imp_e (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Y) (eq T X Y) (ncomp_zero_inv T F X Y) P2) ([P4:pf (eq T X Y)] cut (eq T X Z) (== T Y Z) (imp_e (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Z) (eq T X Z) (ncomp_zero_inv T F X Z) P3) ([P5:pf (eq T X Z)] trans T Y X Z (symm T X Y P4) P5)))).
ncomp_unique_incr : {T:tp} {N:tnum} pf (isNat N) -> pf (ncomp_unique_step T N) -> pf (ncomp_unique_step T (succ N)) = [T:tp] [N:tnum] [Q:pf (isNat N)] [P1:pf (ncomp_unique_step T N)] forall4_i (T arrow T) T T T ([x3:tm (T arrow T)] [x4:tm T] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (succ N)) x4) x5 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (succ N)) x4) x6 imp eq T x5 x6) ([F:tm (T arrow T)] [X:tm T] [Y:tm T] [Z:tm T] imp2_i (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (succ N)) X) Y) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (succ N)) X) Z) (eq T Y Z) ([P2:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (succ N)) X) Y)] [P3:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (succ N)) X) Z)] cut (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Y) (eq T Y Z) (ncomp_succ_inv N T F X Y (isNat->geq_zero N Q) P2) ([P4:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Y)] cut (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Z) (eq T Y Z) (ncomp_succ_inv N T F X Z (isNat->geq_zero N Q) P3) ([P5:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Z)] imp2_e (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Y) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Z) (eq T Y Z) (forall4_e (T arrow T) T T T ([x3:tm (T arrow T)] [x4:tm T] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) N) x4) x5 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) N) x4) x6 imp eq T x5 x6) P1 F (@ T T F X) Y Z) P4 P5)))).
ncomp_unique : {T:tp} pf (forall num ([N:tm num] isNat N imp forall4 (T arrow T) T T T ([F:tm (T arrow T)] [X:tm T] [Y:tm T] [Z:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Y imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Z imp eq T Y Z))) = [T:tp] induction ([x3:tnum] ncomp_unique_step T x3) (ncomp_unique_zero T) ([n:tnum] [x3:pf (isNat n)] [x4:pf (ncomp_unique_step T n)] ncomp_unique_incr T n x3 x4).
ncomp_unique' : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (isNat N) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Z) -> pf (eq X1 Y Z) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [p1:pf (isNat N)] [x3:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y)] [x4:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Z)] imp2_e (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Z) (eq X1 Y Z) (forall4_e (X1 arrow X1) X1 X1 X1 ([x5:tm (X1 arrow X1)] [x6:tm X1] [x7:tm X1] [x8:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x5) N) x6) x7 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x5) N) x6) x8 imp eq X1 x7 x8) (imp_e (isNat N) (forall4 (X1 arrow X1) X1 X1 X1 ([F1:tm (X1 arrow X1)] [X2:tm X1] [Y1:tm X1] [Z1:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F1) N) X2) Y1 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F1) N) X2) Z1 imp eq X1 Y1 Z1)) (forall_e num ([x5:tm num] isNat x5 imp forall4 (X1 arrow X1) X1 X1 X1 ([F2:tm (X1 arrow X1)] [X3:tm X1] [Y2:tm X1] [Z2:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F2) x5) X3) Y2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F2) x5) X3) Z2 imp eq X1 Y2 Z2)) (ncomp_unique X1) N) p1) F X Y Z) x3 x4.
ncomp_zero' : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y) -> pf (eq X1 X Y) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y)] cut (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) X imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y imp eq X1 X Y) (eq X1 X Y) (forall4_e (X1 arrow X1) X1 X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm X1] [x5:tm X1] [x6:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) zero) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) zero) x4) x6 imp eq X1 x5 x6) (imp_e (isNat zero) (forall4 (X1 arrow X1) X1 X1 X1 ([F1:tm (X1 arrow X1)] [X2:tm X1] [Y1:tm X1] [Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F1) zero) X2) Y1 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F1) zero) X2) Z imp eq X1 Y1 Z)) (forall_e num ([x3:tm num] isNat x3 imp forall4 (X1 arrow X1) X1 X1 X1 ([F2:tm (X1 arrow X1)] [X3:tm X1] [Y2:tm X1] [Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F2) x3) X3) Y2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F2) x3) X3) Z imp eq X1 Y2 Z)) (ncomp_unique X1) zero) n_zero) F X X Y) ([p2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) X imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y imp eq X1 X Y)] imp2_e (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) X) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y) (eq X1 X Y) p2 (ncomp_zero X1 F X) p1).
ncompnat : {X1:tp} tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) = [X1:tp] lam4 (X1 arrow X1) num X1 X1 form ([f:tm (X1 arrow X1)] [n:tm num] [x3:tm X1] [y:tm X1] isNat n and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) f) n) x3) y).
ncomp_isNat : {X1:tp} {F:tm (X1 arrow X1)} {N:tm num} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) -> pf (isNat N) = [X1:tp] [F:tm (X1 arrow X1)] [N:tm num] [X:tm X1] [Y:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y)] cut (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] isNat x5 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x4) x5) x6) x7)) F) zero) x3) x3)) (isNat N) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] isNat x5 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x4) x5) x6) x7)) F) zero) x3) x3) ([z1:tm X1] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6) F zero z1 z1 (and_i (isNat zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) z1) z1) n_zero (ncomp_zero X1 F z1)))) ([p4:pf (forall X1 ([z2:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) zero) z2) z2))] cut (forall3 num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x6:tm (X1 arrow X1)] [x7:tm num] [x8:tm X1] [x9:tm X1] isNat x7 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x6) x7) x8) x9)) F) x3) x4) (@ X1 X1 F x5))) (isNat N) (forall3_i num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x6:tm (X1 arrow X1)] [x7:tm num] [x8:tm X1] [x9:tm X1] isNat x7 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x6) x7) x8) x9)) F) x3) x4) (@ X1 X1 F x5)) ([n':tm num] [z1:tm X1] [z2:tm X1] imp3_i (isNat n') (gt n' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) (pred n')) z1) z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6)) F) n') z1) (@ X1 X1 F z2)) ([p5:pf (isNat n')] [p6:pf (gt n' zero)] [p7:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) (pred n')) z1) z2)] cut (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) n') z1) (@ X1 X1 F z2)) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6)) F) n') z1) (@ X1 X1 F z2)) (ncomp_succ n' X1 F z1 z2 p5 p6 (and_e2 (isNat (pred n')) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (pred n')) z1) z2) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6) F (pred n') z1 z2 p7))) ([p8:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) n') z1) (@ X1 X1 F z2))] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6) F n' z1 (@ X1 X1 F z2) (and_i (isNat n') (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) n') z1) (@ X1 X1 F z2)) p5 p8))))) ([p9:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) N') Z1) (@ X1 X1 F Z2)))] cut (_@4 (X1 arrow X1) num X1 X1 form (ncompnat X1) F N X Y) (isNat N) (imp2_e (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form (ncompnat X1) F zero Z Z)) (_forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form (ncompnat X1) F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form (ncompnat X1) F N' Z1 (_@ X1 X1 F Z2))) (_@4 (X1 arrow X1) num X1 X1 form (ncompnat X1) F N X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F N X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F N X Y p1) (ncompnat X1)) p4 p9) ([p10:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) N) X) Y)] and_e1 (isNat N) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6) F N X Y p10)))).
n_iter_zero : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) zero) X) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] def4_i (X1 arrow X1) X1 num X1 ([x3:tm (X1 arrow X1)] [x4:tm X1] [x5:tm num] [x6:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x5) x4) x6) F X zero X (ncomp_zero X1 F X).
n_iter_succ : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (isNat N) -> pf (gt N zero) -> pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) (pred N)) Y) -> pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) (@ X1 X1 F Y)) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [P0:pf (isNat N)] [P1:pf (gt N zero)] [P2:pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) (pred N)) Y)] def4_i (X1 arrow X1) X1 num X1 ([x3:tm (X1 arrow X1)] [x4:tm X1] [x5:tm num] [x6:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x5) x4) x6) F X N (@ X1 X1 F Y) (ncomp_succ N X1 F X Y P0 P1 (def4_e X1 num X1 (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm X1] [x5:tm num] [x6:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x5) x4) x6) F X (pred N) Y P2)).
n_iter_exists : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} pf (forall num ([N:tm num] isNat N imp exists X1 ([Y:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) Y))) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] induction ([N:tnum] exists X1 ([Y:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) Y)) (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) zero) x3) X (n_iter_zero X1 F X)) ([N:tnum] [P1:pf (isNat N)] [P2:pf (exists X1 ([Y:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) Y))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) x3) (exists X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) (plus N one)) x3)) P2 ([Y:tm X1] [P3:pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) Y)] exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) (plus N one)) x3) (@ X1 X1 F Y) (n_iter_succ (succ N) X1 F X Y (isNat_succ_i N P1) (trans_gt_geq (succ N) N zero (succ_gt N) (and_e2 (isInt N) (geq N zero) P1)) (congr num (plus (plus N one) (neg one)) N ([W:tm num] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) W) Y) (trans num (plus (plus N one) (neg one)) (plus N (plus one (neg one))) N (symm num (plus N (plus one (neg one))) (plus (plus N one) (neg one)) (symm num (plus (plus N one) (neg one)) (plus N (plus one (neg one))) (assoc_add N one (neg one)))) (trans num (+ N (plus one (neg one))) (+ N zero) N (plus_cong N N (plus one (neg one)) zero (refl num N) (inv_add one)) (plus_zero N))) P3)))).
ncomp_exists_e : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {B:tform} pf (isNat N) -> ({Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) -> pf B) -> pf B = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [B:tform] [p1:pf (isNat N)] [p2:{Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) -> pf B] cut (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) x3 imp B)) B (forall_imp_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) x3) ([x3:tm X1] B) ([x3:tm X1] [x4:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) x3)] p2 x3 x4)) ([x3:pf (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) x3 imp B))] exists_e X1 ([x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) x4) B (imp_e (isNat N) (exists X1 ([Y:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) Y)) (forall_e num ([x4:tm num] isNat x4 imp exists X1 ([Y:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) x4) Y)) (n_iter_exists X1 F X) N) p1) ([y:tm X1] [p3:pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) y)] p2 y (def4_e X1 num X1 (X1 arrow X1) ([x4:tm (X1 arrow X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x4) x6) x5) x7) F X N y p3))).
ncomp_succ_inv2 : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} {B:tform} pf (geq N zero) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (succ N)) X) Y) -> ({w:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) w) -> pf (eq X1 (@ X1 X1 F w) Y) -> pf B) -> pf B = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [B:tform] [p1:pf (geq N zero)] [p2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (succ N)) X) Y)] [p3:{w:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) w) -> pf (eq X1 (@ X1 X1 F w) Y) -> pf B] cut (isInt N and geq N zero) B (and_i (isInt N) (geq N zero) (isInt_succ_e N (isNat->isInt (succ N) (ncomp_isNat X1 F (succ N) X Y p2))) p1) ([p4:pf (isNat N)] ncomp_exists_e N X1 F X B p4 ([w:tm X1] [p5:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) w)] cut (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (succ N)) X) (@ X1 X1 F w)) B (ncomp_succ' N X1 F X w p4 p5) ([p6:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (succ N)) X) (@ X1 X1 F w))] cut (eq X1 (@ X1 X1 F w) Y) B (ncomp_unique' (succ N) X1 F X (@ X1 X1 F w) Y (isNat_succ_i N p4) p6 p2) ([p7:pf (eq X1 (@ X1 X1 F w) Y)] p3 w p5 p7)))).
ncomp_closure_prop : {T:tp} tm num -> tm form = [T:tp] [n:tm num] forall4 (T arrow form) (T arrow T) T T ([s:tm (T arrow form)] [f:tm (T arrow T)] [z1:tm T] [fn:tm T] forall T ([x3:tm T] @ T form s x3 imp @ T form s (@ T T f x3)) imp @ T form s z1 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) f) n) z1) fn imp @ T form s fn).
ncomp_closure_basis : {T:tp} pf (ncomp_closure_prop T zero) = [T:tp] forall4_imp3_i (T arrow form) (T arrow T) T T ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] forall T ([x7:tm T] @ T form x3 x7 imp @ T form x3 (@ T T x4 x7))) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form x3 x5) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x4) zero) x5) x6) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form x3 x6) ([s:tm (T arrow form)] [f:tm (T arrow T)] [z1:tm T] [f0:tm T] [x3:pf (forall T ([x8:tm T] @ T form s x8 imp @ T form s (@ T T f x8)))] [p1:pf (@ T form s z1)] [p2:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) f) zero) z1) f0)] congr T f0 z1 ([z2:tm T] @ T form s z2) (symm T z1 f0 (ncomp_zero' T f z1 f0 p2)) p1).
ncomp_closure_step : {T:tp} {n:tm num} pf (isNat n) -> pf (ncomp_closure_prop T n) -> pf (ncomp_closure_prop T (succ n)) = [T:tp] [n:tm num] [p1:pf (isNat n)] [p2:pf (ncomp_closure_prop T n)] forall4_imp3_i (T arrow form) (T arrow T) T T ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] forall T ([x7:tm T] @ T form x3 x7 imp @ T form x3 (@ T T x4 x7))) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form x3 x5) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x4) (succ n)) x5) x6) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form x3 x6) ([s:tm (T arrow form)] [f:tm (T arrow T)] [z1:tm T] [fn+1:tm T] [p3:pf (forall T ([x8:tm T] @ T form s x8 imp @ T form s (@ T T f x8)))] [p4:pf (@ T form s z1)] [p5:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) f) (succ n)) z1) fn+1)] ncomp_succ_inv2 n T f z1 fn+1 (@ T form s fn+1) (isNat->geq_zero n p1) p5 ([fn:tm T] [p6:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) f) n) z1) fn)] [p7:pf (eq T (@ T T f fn) fn+1)] congr T fn+1 (@ T T f fn) ([z2:tm T] @ T form s z2) (symm T (@ T T f fn) fn+1 p7) (forall_imp_e T ([a:tm T] @ T form s a) ([a:tm T] @ T form s (@ T T f a)) p3 fn (forall4_imp3_e (T arrow form) (T arrow T) T T ([x9:tm (T arrow form)] [y:tm (T arrow T)] [z3:tm T] [u:tm T] forall T ([x10:tm T] @ T form x9 x10 imp @ T form x9 (@ T T y x10))) ([x11:tm (T arrow form)] [y:tm (T arrow T)] [z4:tm T] [u:tm T] @ T form x11 z4) ([x12:tm (T arrow form)] [y:tm (T arrow T)] [z5:tm T] [u:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) y) n) z5) u) ([x13:tm (T arrow form)] [y:tm (T arrow T)] [z6:tm T] [u:tm T] @ T form x13 u) p2 s f z1 fn p3 p4 p6)))).
ncomp_closure : {X1:tp} {S:tm (X1 arrow form)} {F:tm (X1 arrow X1)} {Z:tm X1} {N:tm num} {FN:tm X1} pf (forall X1 ([x3:tm X1] @ X1 form S x3 imp @ X1 form S (@ X1 X1 F x3))) -> pf (@ X1 form S Z) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) Z) FN) -> pf (@ X1 form S FN) = [X1:tp] [S:tm (X1 arrow form)] [F:tm (X1 arrow X1)] [Z:tm X1] [N:tm num] [FN:tm X1] [p1:pf (forall X1 ([x4:tm X1] @ X1 form S x4 imp @ X1 form S (@ X1 X1 F x4)))] [p2:pf (@ X1 form S Z)] [p3:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) Z) FN)] cut (_forall num ([n:tnum] isNat n imp ncomp_closure_prop X1 n)) (@ X1 form S FN) (induction ([x3:tnum] ncomp_closure_prop X1 x3) (ncomp_closure_basis X1) ([n:tnum] [x3:pf (isNat n)] [x4:pf (ncomp_closure_prop X1 n)] ncomp_closure_step X1 n x3 x4)) ([p4:pf (forall num ([n:tm num] isNat n imp ncomp_closure_prop X1 n))] forall4_imp3_e (X1 arrow form) (X1 arrow X1) X1 X1 ([x5:tm (X1 arrow form)] [y:tm (X1 arrow X1)] [z1:tm X1] [u:tm X1] forall X1 ([x6:tm X1] @ X1 form x5 x6 imp @ X1 form x5 (@ X1 X1 y x6))) ([x7:tm (X1 arrow form)] [y:tm (X1 arrow X1)] [z2:tm X1] [u:tm X1] @ X1 form x7 z2) ([x8:tm (X1 arrow form)] [y:tm (X1 arrow X1)] [z3:tm X1] [u:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) y) N) z3) u) ([x9:tm (X1 arrow form)] [y:tm (X1 arrow X1)] [z4:tm X1] [u:tm X1] @ X1 form x9 u) (forall_imp_e num ([a:tm num] isNat a) ([a:tm num] ncomp_closure_prop X1 a) p4 N (ncomp_isNat X1 F N Z FN p3)) S F Z FN p1 p2 p3).
power2 : tm (num arrow num arrow form) = lam2 num num form ([a:tm num] [b:tm num] isNat a and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) a) one) b).
power' : tm num -> tm num -> tm num -> tm form = [b:tm num] [e:tm num] [v1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) (lam num num ([x3:tm num] times b x3))) e) one) v1.
power : tm (num arrow num arrow num arrow form) = lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] power' x3 x4 x5).
power_i : {B:tm num} {E:tm num} {V:tm num} pf (power' B E V) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E) V) = [B:tm num] [E:tm num] [V:tm num] [x3:pf (power' B E V)] def3_i num num num ([x4:tm num] [x5:tm num] [x6:tm num] power' x4 x5 x6) B E V x3.
power_e : {B:tm num} {E:tm num} {V:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E) V) -> pf (power' B E V) = [B:tm num] [E:tm num] [V:tm num] [x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E) V)] def3_e num num num ([x4:tm num] [x5:tm num] [x6:tm num] power' x4 x5 x6) B E V x3.
power_isNat : {B:tm num} {E:tm num} {V:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E) V) -> pf (isNat E) = [B:tm num] [E:tm num] [V:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E) V)] ncomp_isNat num (lam num num ([x3:tm num] times B x3)) E one V (power_e B E V p1).
power_zero : {B:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) zero) one) = [B:tm num] power_i B zero one (ncomp_zero num (lam num num ([x3:tm num] times B x3)) one).
power_zero' : {B:tm num} {V:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) zero) V) -> pf (eq num one V) = [B:tm num] [V:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) zero) V)] ncomp_zero' num (lam num num ([x3:tm num] times B x3)) one V (power_e B zero V p1).
power_inc : {B:tm num} {M:tm num} {N:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) M) N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) (succ M)) (times B N)) = [B:tm num] [M:tm num] [N:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) M) N)] cut (isNat M) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) (succ M)) (times B N)) (power_isNat B M N p1) ([p2:pf (isNat M)] cut3 (isNat (succ M)) (> (+ M (const 1)) (const 0)) (power' B (pred (succ M)) N) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) (succ M)) (times B N)) (isNat_succ_i M p2) (trans_geq_gt (+ M (const 1)) (const 1) (const 0) (ord_transitivity (+ M (const 1)) (+ zero (const 1)) (const 1) (greatereq_plus_cong2 M zero (const 1) (and_e2 (isInt M) (geq M zero) p2)) (pf_zero_plus_one_geq_one (const 1))) greater1_0) (congr num (pred (succ M)) M ([z1:tm num] power' B z1 N) (predsucc M) (power_e B M N p1)) ([lemma3:pf (isNat (succ M))] [lemma4:pf (gt (succ M) zero)] [lemma5:pf (power' B (pred (succ M)) N)] power_i B (succ M) (times B N) (congr num (times B N) (@ num num (lam num num ([x3:tm num] times B x3)) N) ([x3:tm num] power' B (succ M) x3) (symm num (@ num num (lam num num ([x3:tm num] times B x3)) N) (times B N) (beta num num ([x3:tm num] times B x3) N)) (ncomp_succ (succ M) num (lam num num ([x3:tm num] times B x3)) one N lemma3 lemma4 lemma5)))).
_power_prod_prop : tm num -> tm form = [e1:tm num] forall4 num num num num ([b:tm num] [e2:tm num] [v2:tm num] [v1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e1) v1 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e2) v2 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus e1 e2)) (times v1 v2)).
_power_prod_basis : pf (_power_prod_prop zero) = forall4_imp2_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) zero) x6) ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) x4) x5) ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) (plus zero x4)) (times x6 x5)) ([b:tm num] [e2:tm num] [v2:tm num] [v1:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) zero) v1)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e2) v2)] cut (eq num one v1) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus zero e2)) (times v1 v2)) (power_zero' b v1 p1) ([p3:pf (eq num one v1)] cut (eq num (times v1 v2) v2) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus zero e2)) (times v1 v2)) (congr num v1 one ([z1:tm num] eq num (times z1 v2) v2) (symm num one v1 p3) (one_times v2)) ([p6:pf (eq num (times v1 v2) v2)] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (+ zero e2)) v2) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus zero e2)) (times v1 v2)) (congr num (+ zero e2) e2 ([z2:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) z2) v2) (zero_plus e2) p2) ([p7:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus zero e2)) v2)] congr num (times v1 v2) v2 ([z3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus zero e2)) z3) p6 p7)))).
_power_prod_step : {e1:tm num} pf (isNat e1) -> pf (_power_prod_prop e1) -> pf (_power_prod_prop (succ e1)) = [e1:tm num] [p1:pf (isNat e1)] [p2:pf (_power_prod_prop e1)] forall4_imp2_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) (succ e1)) x6) ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) x4) x5) ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) (plus (succ e1) x4)) (times x6 x5)) ([b:tm num] [e2:tm num] [v2:tm num] [v1:tm num] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ e1)) v1)] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e2) v2)] ncomp_succ_inv2 e1 num (lam num num ([x3:tm num] times b x3)) one v1 (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (isNat->geq_zero e1 p1) (power_e b (succ e1) v1 p3) ([u:tm num] [pa:pf (power' b e1 u)] [pb:pf (eq num (@ num num (lam num num ([x4:tm num] times b x4)) u) v1)] cut (eq num v1 (times b u)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (congr num (times b u) (@ num num (lam num num ([x3:tm num] times b x3)) u) ([x3:tm num] eq num v1 x3) (symm num (@ num num (lam num num ([x3:tm num] times b x3)) u) (times b u) (beta num num ([x3:tm num] times b x3) u)) (symm num (@ num num (lam num num ([x5:tm num] times b x5)) u) v1 pb)) ([pc1:pf (eq num v1 (times b u))] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus e1 e2)) (times u v2)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (imp2_e (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e1) u) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e2) v2) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus e1 e2)) (times u v2)) (forall4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) e1) x6 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) x4) x5 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) (plus e1 x4)) (times x6 x5)) p2 b e2 v2 u) (power_i b e1 u pa) p4) ([pd:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus e1 e2)) (times u v2))] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times b (times u v2))) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (power_inc b (plus e1 e2) (times u v2) pd) ([pe:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times b (times u v2)))] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times (times b u) v2)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (congr num (times (times b u) v2) (times b (times u v2)) ([z1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) z1) (assoc_mult b u v2) pe) ([pg:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times (times b u) v2))] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times v1 v2)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (congr num v1 (times b u) ([z2:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times z2 v2)) pc1 pg) ([ph:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times v1 v2))] cut (eq num (plus e1 (plus one e2)) (succ (plus e1 e2))) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (congr num (plus one e2) (plus e2 one) ([z3:tm num] eq num (plus e1 z3) (succ (plus e1 e2))) (comm_add one e2) (symm num (plus (plus e1 e2) one) (plus e1 (plus e2 one)) (assoc_add e1 e2 one))) ([pi1:pf (eq num (plus e1 (plus one e2)) (succ (plus e1 e2)))] cut (eq num (plus (plus e1 one) e2) (succ (plus e1 e2))) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (congr num (plus (plus e1 one) e2) (plus e1 (plus one e2)) ([z4:tm num] eq num z4 (succ (plus e1 e2))) (assoc_add e1 one e2) pi1) ([pj:pf (eq num (plus (succ e1) e2) (succ (plus e1 e2)))] congr num (plus (succ e1) e2) (succ (plus e1 e2)) ([z5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) z5) (times v1 v2)) pj ph))))))))).
_power_prod_ugly : pf (forall num ([n:tm num] isNat n imp _power_prod_prop n)) = induction ([x3:tnum] _power_prod_prop x3) _power_prod_basis ([n:tnum] [x3:pf (isNat n)] [x4:pf (_power_prod_prop n)] _power_prod_step n x3 x4).
power_prod : {B:tm num} {E1:tm num} {V1:tm num} {E2:tm num} {V2:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E1) V1) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E2) V2) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) (plus E1 E2)) (times V1 V2)) = [B:tm num] [E1:tm num] [V1:tm num] [E2:tm num] [V2:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E1) V1)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E2) V2)] forall4_imp2_e num num num num ([x3:tm num] [y:tm num] [z1:tm num] [u:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) E1) u) ([x4:tm num] [y:tm num] [z2:tm num] [u:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x4) y) z2) ([x5:tm num] [y:tm num] [z3:tm num] [u:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x5) (plus E1 y)) (times u z3)) (forall_imp_e num ([a:tm num] isNat a) ([a:tm num] _power_prod_prop a) _power_prod_ugly E1 (power_isNat B E1 V1 p1)) B E2 V2 V1 p1 p2.
power->power2 : {E:tm num} {V:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power two) E) V) -> pf (@ num form (@ num (num arrow form) power2 E) V) = [E:tm num] [V:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power two) E) V)] def2_i num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) E V (and_i (isNat E) (power' two E V) (power_isNat two E V p1) (power_e two E V p1)).
power2->power : {E:tm num} {V:tm num} pf (@ num form (@ num (num arrow form) power2 E) V) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power two) E) V) = [E:tm num] [V:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 E) V)] power_i two E V (and_e2 (isNat E) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) E) one) V) (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) E V p1)).
parfun_power2 : pf (parfun num num power2) = forall3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) power2 x3) x4 imp @ num form (@ num (num arrow form) power2 x3) x5 imp eq num x4 x5) ([m:tm num] [n:tm num] [n':tm num] imp2_i (@ num form (@ num (num arrow form) power2 m) n) (@ num form (@ num (num arrow form) power2 m) n') (eq num n n') ([p1:pf (@ num form (@ num (num arrow form) power2 m) n)] [p2:pf (@ num form (@ num (num arrow form) power2 m) n')] and_l (isNat m) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n) (eq num n n') (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) m n p1) ([p1_1:pf (isNat m)] [p1_2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n)] and_l (isNat m) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n') (eq num n n') (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) m n' p2) ([p2_1:pf (isNat m)] [p2_2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n')] imp2_e (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n') (eq num n n') (forall4_e (num arrow num) num num num ([x3:tm (num arrow num)] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) x3) m) x4) x5 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) x3) m) x4) x6 imp eq num x5 x6) (imp_e (isNat m) (forall4 (num arrow num) num num num ([F:tm (num arrow num)] [X:tm num] [Y:tm num] [Z:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) F) m) X) Y imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) F) m) X) Z imp eq num Y Z)) (forall_e num ([x3:tm num] isNat x3 imp forall4 (num arrow num) num num num ([F:tm (num arrow num)] [X:tm num] [Y:tm num] [Z:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) F) x3) X) Y imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) F) x3) X) Z imp eq num Y Z)) (ncomp_unique num) m) p1_1) double one n n') p1_2 p2_2)))).
power2_inc : {M:tm num} {N:tm num} pf (@ num form (@ num (num arrow form) power2 M) N) -> pf (@ num form (@ num (num arrow form) power2 (succ M)) (times two N)) = [M:tm num] [N:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 M) N)] power->power2 (succ M) (times two N) (power_inc two M N (power2->power M N p1)).
power2_eval_parts : {N:word32} {M:word32} {N+1:word32} {M*2:word32} pf (@ num form (@ num (num arrow form) power2 (succ (const N))) (times two (const M))) -> rep_plus N 1 N+1 -> rep_times 2 M M*2 -> pf (@ num form (@ num (num arrow form) power2 (const N+1)) (const M*2)) = [N:word32] [M:word32] [N+1:word32] [M*2:word32] [p1:pf (@ num form (@ num (num arrow form) power2 (succ (const N))) (times two (const M)))] [p2:rep_plus N 1 N+1] [p3:rep_times 2 M M*2] cut2 (== num (+ (shadowed_2 N) (shadowed_2 1)) (shadowed_2 N+1)) (== num (* (shadowed_2 2) (shadowed_2 M)) (shadowed_2 M*2)) (@ num form (@ num (num arrow form) power2 (shadowed_2 N+1)) (shadowed_2 M*2)) (eval_plus N 1 N+1 p2) (eval_times 2 M M*2 p3) ([q1:pf (== num (+ (shadowed_2 N) (shadowed_2 1)) (shadowed_2 N+1))] [q2:pf (== num (* (shadowed_2 2) (shadowed_2 M)) (shadowed_2 M*2))] congr2 num num (shadowed_2 N+1) (+ (shadowed_2 N) (shadowed_2 1)) (shadowed_2 M*2) (* (shadowed_2 2) (shadowed_2 M)) ([z1:tm num] [z2:tm num] @ num form (@ num (num arrow form) power2 z1) z2) (symm num (+ (shadowed_2 N) (shadowed_2 1)) (shadowed_2 N+1) q1) (symm num (* (shadowed_2 2) (shadowed_2 M)) (shadowed_2 M*2) q2) p1).
power2_eval_next : {N:word32} {M:word32} {N+1:word32} {M*2:word32} pf (@ num form (@ num (num arrow form) power2 (const N)) (const M)) -> rep_plus N 1 N+1 -> rep_times 2 M M*2 -> pf (@ num form (@ num (num arrow form) power2 (const N+1)) (const M*2)) = [N:word32] [M:word32] [N+1:word32] [M*2:word32] [p1:pf (@ num form (@ num (num arrow form) power2 (const N)) (const M))] [p2:rep_plus N 1 N+1] [p3:rep_times 2 M M*2] power2_eval_parts N M N+1 M*2 (power2_inc (const N) (const M) p1) p2 p3.
power2_0 : pf (@ num form (@ num (num arrow form) power2 zero) one) = power->power2 zero one (power_zero two).
power2_1 : pf (@ num form (@ num (num arrow form) power2 (const 1)) (const 2)) = power2_eval_next 0 1 1 2 power2_0 pfSucc0 pfMultSucc0.
power2_2 : pf (@ num form (@ num (num arrow form) power2 (const 2)) (const 4)) = power2_eval_next 1 2 2 4 power2_1 pfSucc1 pfMultSucc1.
power2_3 : pf (@ num form (@ num (num arrow form) power2 (const 3)) (const 8)) = power2_eval_next 2 4 3 8 power2_2 pfSucc2 pfMultSucc2.
power2_4 : pf (@ num form (@ num (num arrow form) power2 (const 4)) (const 16)) = power2_eval_next 3 8 4 16 power2_3 pfSucc3 pfMultSucc3.
power2_5 : pf (@ num form (@ num (num arrow form) power2 (const 5)) (const 32)) = power2_eval_next 4 16 5 32 power2_4 pfSucc4 pfMultSucc4.
power2_6 : pf (@ num form (@ num (num arrow form) power2 (const 6)) (const 64)) = power2_eval_next 5 32 6 64 power2_5 pfSucc5 pfMultSucc5.
power2_7 : pf (@ num form (@ num (num arrow form) power2 (const 7)) (const 128)) = power2_eval_next 6 64 7 128 power2_6 pfSucc6 pfMultSucc6.
power2_8 : pf (@ num form (@ num (num arrow form) power2 (const 8)) (const 256)) = power2_eval_next 7 128 8 256 power2_7 pfSucc7 pfMultSucc7.
power2_9 : pf (@ num form (@ num (num arrow form) power2 (const 9)) (const 512)) = power2_eval_next 8 256 9 512 power2_8 pfSucc8 pfMultSucc8.
power2_10 : pf (@ num form (@ num (num arrow form) power2 (const 10)) (const 1024)) = power2_eval_next 9 512 10 1024 power2_9 pfSucc9 pfMultSucc9.
power2_11 : pf (@ num form (@ num (num arrow form) power2 (const 11)) (const 2048)) = power2_eval_next 10 1024 11 2048 power2_10 pfSucc10 pfMultSucc10.
power2_12 : pf (@ num form (@ num (num arrow form) power2 (const 12)) (const 4096)) = power2_eval_next 11 2048 12 4096 power2_11 pfSucc11 pfMultSucc11.
power2_13 : pf (@ num form (@ num (num arrow form) power2 (const 13)) (const 8192)) = power2_eval_next 12 4096 13 8192 power2_12 pfSucc12 pfMultSucc12.
power2_14 : pf (@ num form (@ num (num arrow form) power2 (const 14)) (const 16384)) = power2_eval_next 13 8192 14 16384 power2_13 pfSucc13 pfMultSucc13.
power2_15 : pf (@ num form (@ num (num arrow form) power2 (const 15)) (const 32768)) = power2_eval_next 14 16384 15 32768 power2_14 pfSucc14 pfMultSucc14.
power2_16 : pf (@ num form (@ num (num arrow form) power2 (const 16)) (const 65536)) = power2_eval_next 15 32768 16 65536 power2_15 pfSucc15 pfMultSucc15.
power2_17 : pf (@ num form (@ num (num arrow form) power2 (const 17)) (const 131072)) = power2_eval_next 16 65536 17 131072 power2_16 pfSucc16 pfMultSucc16.
power2_18 : pf (@ num form (@ num (num arrow form) power2 (const 18)) (const 262144)) = power2_eval_next 17 131072 18 262144 power2_17 pfSucc17 pfMultSucc17.
power2_19 : pf (@ num form (@ num (num arrow form) power2 (const 19)) (const 524288)) = power2_eval_next 18 262144 19 524288 power2_18 pfSucc18 pfMultSucc18.
power2_20 : pf (@ num form (@ num (num arrow form) power2 (const 20)) (const 1048576)) = power2_eval_next 19 524288 20 1048576 power2_19 pfSucc19 pfMultSucc19.
power2_21 : pf (@ num form (@ num (num arrow form) power2 (const 21)) (const 2097152)) = power2_eval_next 20 1048576 21 2097152 power2_20 pfSucc20 pfMultSucc20.
power2_22 : pf (@ num form (@ num (num arrow form) power2 (const 22)) (const 4194304)) = power2_eval_next 21 2097152 22 4194304 power2_21 pfSucc21 pfMultSucc21.
power2_23 : pf (@ num form (@ num (num arrow form) power2 (const 23)) (const 8388608)) = power2_eval_next 22 4194304 23 8388608 power2_22 pfSucc22 pfMultSucc22.
power2_24 : pf (@ num form (@ num (num arrow form) power2 (const 24)) (const 16777216)) = power2_eval_next 23 8388608 24 16777216 power2_23 pfSucc23 pfMultSucc23.
power2_25 : pf (@ num form (@ num (num arrow form) power2 (const 25)) (const 33554432)) = power2_eval_next 24 16777216 25 33554432 power2_24 pfSucc24 pfMultSucc24.
power2_26 : pf (@ num form (@ num (num arrow form) power2 (const 26)) (const 67108864)) = power2_eval_next 25 33554432 26 67108864 power2_25 pfSucc25 pfMultSucc25.
power2_27 : pf (@ num form (@ num (num arrow form) power2 (const 27)) (const 134217728)) = power2_eval_next 26 67108864 27 134217728 power2_26 pfSucc26 pfMultSucc26.
power2_28 : pf (@ num form (@ num (num arrow form) power2 (const 28)) (const 268435456)) = power2_eval_next 27 134217728 28 268435456 power2_27 pfSucc27 pfMultSucc27.
power2_29 : pf (@ num form (@ num (num arrow form) power2 (const 29)) (const 536870912)) = power2_eval_next 28 268435456 29 536870912 power2_28 pfSucc28 pfMultSucc28.
power2_30 : pf (@ num form (@ num (num arrow form) power2 (const 30)) (const 1073741824)) = power2_eval_next 29 536870912 30 1073741824 power2_29 pfSucc29 pfMultSucc29.
power2_prod' : {V1:tm num} {F1:tm num} {V2:tm num} {F2:tm num} pf (@ num form (@ num (num arrow form) power2 V1) F1) -> pf (@ num form (@ num (num arrow form) power2 V2) F2) -> pf (@ num form (@ num (num arrow form) power2 (plus V1 V2)) (times F1 F2)) = [V1:tm num] [F1:tm num] [V2:tm num] [F2:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 V1) F1)] [p2:pf (@ num form (@ num (num arrow form) power2 V2) F2)] power->power2 (plus V1 V2) (times F1 F2) (power_prod two V1 F1 V2 F2 (power2->power V1 F1 p1) (power2->power V2 F2 p2)).
16+16 : rep_plus 16 16 32 = 16+16.
power2_32_is : pf (@ num form (@ num (num arrow form) power2 (const 32)) pow2_32) = cut (@ num form (@ num (num arrow form) power2 (plus (const 16) (const 16))) (times (const 65536) (const 65536))) (@ num form (@ num (num arrow form) power2 (shadowed_2 32)) pow2_32) (power2_prod' (const 16) (const 65536) (const 16) (const 65536) power2_16 power2_16) ([p1:pf (@ num form (@ num (num arrow form) power2 (plus (const 16) (const 16))) (times (const 65536) (const 65536)))] congr2 num num (shadowed_2 32) (+ (shadowed_2 16) (shadowed_2 16)) pow2_32 (* (shadowed_2 65536) (shadowed_2 65536)) ([y:tm num] [z1:tm num] @ num form (@ num (num arrow form) power2 y) z1) (symm num (+ (shadowed_2 16) (shadowed_2 16)) (shadowed_2 32) (eval_plus 16 16 32 16+16)) pow2_32_eq_65536*65536 p1).
power2_exists_hyp : tm num -> tm form = [n:tm num] exists num ([x3:tm num] @ num form (@ num (num arrow form) power2 n) x3).
power2_exists_base : pf (power2_exists_hyp zero) = exists_i num ([x3:tm num] @ num form (@ num (num arrow form) power2 zero) x3) one power2_0.
power2_exists_step : {n:tnum} pf (isNat n) -> pf (power2_exists_hyp n) -> pf (power2_exists_hyp (succ n)) = [n:tnum] [p1:pf (isNat n)] [p2:pf (power2_exists_hyp n)] cut (isNat n) (exists num ([x3:tm num] @ num form (@ num (num arrow form) power2 (succ n)) x3)) p1 ([x3:pf (isNat n)] exists_e num ([x4:tm num] @ num form (@ num (num arrow form) power2 n) x4) (exists num ([x4:tm num] @ num form (@ num (num arrow form) power2 (succ n)) x4)) p2 ([x4:tm num] [p3:pf (@ num form (@ num (num arrow form) power2 n) x4)] exists_i num ([x5:tm num] @ num form (@ num (num arrow form) power2 (succ n)) x5) (times two x4) (power2_inc n x4 p3))).
power2_exists : {I:tnum} pf (isNat I) -> pf (exists num ([x3:tm num] @ num form (@ num (num arrow form) power2 I) x3)) = [I:tnum] [p1:pf (isNat I)] forall_imp_e num ([a:tm num] isNat a) ([a:tm num] power2_exists_hyp a) (induction ([x3:tnum] power2_exists_hyp x3) power2_exists_base ([n:tnum] [x3:pf (isNat n)] [x4:pf (power2_exists_hyp n)] power2_exists_step n x3 x4)) I p1.
power2_gt_hyp : tm num -> tform = [i1:tm num] forall num ([n:tm num] @ num form (@ num (num arrow form) power2 i1) n imp isNat n and neq num n zero).
power2_gt_base : pf (power2_gt_hyp zero) = forall_i num ([x3:tm num] @ num form (@ num (num arrow form) power2 zero) x3 imp isNat x3 and neq num x3 zero) ([n:tm num] imp_i (@ num form (@ num (num arrow form) power2 zero) n) (isNat n and neq num n zero) ([p3:pf (@ num form (@ num (num arrow form) power2 zero) n)] cut (eq num n one) (isNat n and neq num n zero) (parfun_e num num power2 zero n one parfun_power2 p3 power2_0) ([p4:pf (eq num n one)] congr num n one ([z1:tm num] isNat z1 and neq num z1 zero) p4 (and_i (isNat one) (!= num (const 1) (const 0)) n_one (gt->neq (const 1) (const 0) greater1_0))))).
n_two : pf (isNat two) = congr num (shadowed_2 2) (+ (shadowed_2 1) (shadowed_2 1)) ([x3:tm num] isNat x3) (symm num (+ (shadowed_2 1) (shadowed_2 1)) (shadowed_2 2) (eval_plus 1 1 2 1+1)) (isNat_succ_i one n_one).
2>0 : rep_div 0 2 0 = 0/2.
two!=0 : pf (neq num two zero) = gt->neq (shadowed_2 2) (shadowed_2 0) (eval_gt 0 2 2>0).
power2_gt_step : {i1:tnum} pf (isNat i1) -> pf (power2_gt_hyp i1) -> pf (power2_gt_hyp (succ i1)) = [i2:tnum] [p1:pf (isNat i2)] [p2:pf (power2_gt_hyp i2)] forall_i num ([x3:tm num] @ num form (@ num (num arrow form) power2 (succ i2)) x3 imp isNat x3 and neq num x3 zero) ([n:tm num] imp_i (@ num form (@ num (num arrow form) power2 (succ i2)) n) (isNat n and neq num n zero) ([p4:pf (@ num form (@ num (num arrow form) power2 (succ i2)) n)] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) power2 i2) x3) (isNat n and neq num n zero) (power2_exists i2 p1) ([n1:tm num] [p5:pf (@ num form (@ num (num arrow form) power2 i2) n1)] cut (@ num form (@ num (num arrow form) power2 (succ i2)) (times two n1)) (isNat n and neq num n zero) (power2_inc i2 n1 p5) ([p6:pf (@ num form (@ num (num arrow form) power2 (succ i2)) (times two n1))] cut (eq num n (times two n1)) (isNat n and neq num n zero) (parfun_e num num power2 (succ i2) n (times two n1) parfun_power2 p4 p6) ([p7:pf (eq num n (times two n1))] and_l (isNat n1) (neq num n1 zero) (isNat n and neq num n zero) (forall_imp_e num ([a:tm num] @ num form (@ num (num arrow form) power2 i2) a) ([a:tm num] isNat a and neq num a zero) p2 n1 p5) ([p8:pf (isNat n1)] [p9:pf (neq num n1 zero)] cut (isNat n) (isNat n and neq num n zero) (congr num n (times two n1) ([x3:tm num] isNat x3) p7 (nat_prod two n1 n_two p8)) ([p10:pf (isNat n)] cut (neq num n zero) (isNat n and neq num n zero) (congr num n (times two n1) ([z1:tm num] neq num z1 zero) p7 (neq_mult_closure two n1 two!=0 p9)) ([p11:pf (neq num n zero)] and_i (isNat n) (neq num n zero) p10 p11)))))))).
power2_gt_zero : {I:tm num} {N:tm num} pf (@ num form (@ num (num arrow form) power2 I) N) -> pf (isNat N and neq num N zero) = [I:tm num] [N:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 I) N)] cut (_forall num ([n:tnum] isNat n imp power2_gt_hyp n)) (isNat N and neq num N zero) (induction ([x3:tnum] power2_gt_hyp x3) power2_gt_base ([n:tnum] [x3:pf (isNat n)] [x4:pf (power2_gt_hyp n)] power2_gt_step n x3 x4)) ([p2:pf (forall num ([i1:tm num] isNat i1 imp power2_gt_hyp i1))] forall_imp_e num ([a:tm num] @ num form (@ num (num arrow form) power2 I) a) ([a:tm num] isNat a and neq num a zero) (forall_imp_e num ([a:tm num] isNat a) ([a:tm num] power2_gt_hyp a) p2 I (and_e1 (isNat I) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) I) one) N) (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) I N p1))) N p1).
power2_gt_zero' : {I:tm num} {N:tm num} pf (@ num form (@ num (num arrow form) power2 I) N) -> pf (gt N zero) = [I:tm num] [N:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 I) N)] and_l (isNat N) (neq num N zero) (> N zero) (power2_gt_zero I N p1) ([p2:pf (isNat N)] [p3:pf (neq num N zero)] neq->geq->gt N zero p3 (isNat->geq_zero N p2)).
power2_isnat : {A:tm num} {B:tm num} pf (@ num form (@ num (num arrow form) power2 A) B) -> pf (isNat B) = [A:tm num] [B:tm num] [p2:pf (@ num form (@ num (num arrow form) power2 A) B)] and_e1 (isNat B) (neq num B zero) (power2_gt_zero A B p2).
power2_digshift : {I:tm num} {A:tm num} pf (@ num form (@ num (num arrow form) power2 I) A) -> pf (@ num form (@ num (num arrow form) power2 (plus I eight)) (A dig 0)) = [I:tm num] [A:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 I) A)] cut (@ num form (@ num (num arrow form) power2 (plus I (const 8))) (times A (const 256))) (@ num form (@ num (num arrow form) power2 (plus I eight)) (A dig 0)) (power2_prod' I A (const 8) (const 256) p1 power2_8) ([p21:pf (@ num form (@ num (num arrow form) power2 (plus I eight)) (times A (const bignum_base)))] congr num (A dig 0) (* A (shadowed_2 bignum_base)) ([z1:tm num] @ num form (@ num (num arrow form) power2 (plus I eight)) z1) (dig0lem A) p21).
0+8 : rep_plus 0 8 8 = 0+8.
8+8 : rep_plus 8 8 16 = 8+8.
16+8 : rep_plus 16 8 24 = 16+8.
24+8 : rep_plus 24 8 32 = 24+8.
power2_digshift' : {A:word32} {A':word32} {B:tm num} rep_plus A 8 A' -> pf (@ num form (@ num (num arrow form) power2 (shadowed_2 A)) B) -> pf (@ num form (@ num (num arrow form) power2 (shadowed_2 A')) (B dig 0)) = [A:word32] [A':word32] [B:tm num] [p2:rep_plus A 8 A'] [p1:pf (@ num form (@ num (num arrow form) power2 (shadowed_2 A)) B)] congr num (shadowed_2 A') (+ (shadowed_2 A) (shadowed_2 8)) ([z1:tm num] @ num form (@ num (num arrow form) power2 z1) (B dig 0)) (symm num (+ (shadowed_2 A) (shadowed_2 8)) (shadowed_2 A') (eval_plus A 8 A' p2)) (power2_digshift (shadowed_2 A) B p1).
pow2_12 : tnum = shadowed_2 4096.
pow2_13 : tnum = shadowed_2 8192.
pow2_21 : tnum = shadowed_2 2097152.
8192>0 : rep_div 0 8192 0 = 0/8192.
pow2_13_gt_0 : pf (gt pow2_13 zero) = eval_gt 0 8192 8192>0.
pow2_32eq' : pf (@ num form (@ num (num arrow form) power2 (const 32)) pow2_32) = cut (eq num (plus (* zero (const bignum_base)) one) one) (@ num form (@ num (num arrow form) power2 (shadowed_2 32)) (bignum dig 1 dig 0 dig 0 dig 0 dig 0)) (congr num (* zero (const bignum_base)) zero ([z1:tm num] eq num (plus z1 one) one) (zero_times (const bignum_base)) (zero_plus one)) ([p1:pf (eq num (bignum dig 1) one)] cut (@ num form (@ num (num arrow form) power2 zero) (bignum dig 1)) (@ num form (@ num (num arrow form) power2 (shadowed_2 32)) (bignum dig 1 dig 0 dig 0 dig 0 dig 0)) (congr num (bignum dig 1) one ([z2:tm num] @ num form (@ num (num arrow form) power2 zero) z2) p1 power2_0) ([p2:pf (@ num form (@ num (num arrow form) power2 zero) (bignum dig 1))] power2_digshift' 24 32 (bignum dig 1 dig 0 dig 0 dig 0) 24+8 (power2_digshift' 16 24 (bignum dig 1 dig 0 dig 0) 16+8 (power2_digshift' 8 16 (bignum dig 1 dig 0) 8+8 (power2_digshift' 0 8 (bignum dig 1) 0+8 p2))))).
power2_monotonic : {I:tm num} {A:tm num} {J:tm num} {B:tm num} pf (@ num form (@ num (num arrow form) power2 I) A) -> pf (@ num form (@ num (num arrow form) power2 J) B) -> pf (leq I J) -> pf (leq A B) = [I:tm num] [A:tm num] [J:tm num] [B:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 I) A)] [p2:pf (@ num form (@ num (num arrow form) power2 J) B)] [p3:pf (leq I J)] cut3 (@ num form (@ num (num arrow form) power2 I) A) (@ num form (@ num (num arrow form) power2 J) B) (leq I J) (geq B A) p1 p2 p3 ([p1':pf (@ num form (@ num (num arrow form) power2 I) A)] [p2':pf (@ num form (@ num (num arrow form) power2 J) B)] [p3':pf (leq I J)] cut (isNat I) (geq B A) (and_e1 (isNat I) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) I) one) A) (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) I A p1)) ([p11:pf (isNat I)] cut (isNat J) (geq B A) (and_e1 (isNat J) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) J) one) B) (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) J B p2)) ([p12:pf (isNat J)] cut (isNat (- J I)) (geq B A) (nat_diff J I p12 (isNat->isInt I p11) p3) ([p13:pf (isNat (minus J I))] cut (== num (+ I (- J I)) J) (geq B A) (cancel_a+b-a' I J) ([p14:pf (eq num (plus I (minus J I)) J)] cut (@ num form (@ num (num arrow form) power2 (plus I (minus J I))) B) (geq B A) (congr num (plus I (minus J I)) J ([z1:tm num] @ num form (@ num (num arrow form) power2 z1) B) p14 p2) ([p15:pf (@ num form (@ num (num arrow form) power2 (plus I (minus J I))) B)] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) power2 (minus J I)) x3) (geq B A) (power2_exists (minus J I) p13) ([x3:tm num] [p16:pf (@ num form (@ num (num arrow form) power2 (minus J I)) x3)] cut (gt x3 zero) (geq B A) (power2_gt_zero' (minus J I) x3 p16) ([p17:pf (gt x3 zero)] cut (@ num form (@ num (num arrow form) power2 (plus I (minus J I))) (times A x3)) (geq B A) (power2_prod' I A (minus J I) x3 p1 p16) ([p18:pf (@ num form (@ num (num arrow form) power2 (plus I (minus J I))) (times A x3))] cut (eq num B (times A x3)) (geq B A) (parfun_e num num power2 (plus I (minus J I)) B (times A x3) parfun_power2 p15 p18) ([p19:pf (eq num B (times A x3))] cut (isInt x3) (geq B A) (isNat->isInt x3 (and_e1 (isNat x3) (neq num x3 zero) (power2_gt_zero (minus J I) x3 p16))) ([p20:pf (isInt x3)] cut (>= (pred x3) zero) (geq B A) (greater_greater_eq_minus1 x3 zero p20 p_zero p17) ([p21:pf (geq (pred x3) zero)] cut (eq num B (times A (succ (pred x3)))) (geq B A) (congr num (succ (pred x3)) x3 ([z2:tm num] eq num B (times A z2)) (succpred x3) p19) ([p22:pf (eq num B (times A (succ (pred x3))))] cut (== num B (+ (* A (pred x3)) (* A one))) (geq B A) (trans num B (times A (succ (pred x3))) (+ (* A (pred x3)) (* A one)) p22 (distrib A (pred x3) one)) ([p23:pf (eq num B (plus (times A (pred x3)) (times A one)))] cut (eq num B (plus (times A (pred x3)) A)) (geq B A) (congr num A (* A one) ([z3:tm num] eq num B (plus (times A (pred x3)) z3)) (symm num (* A one) A (times_one A)) p23) ([p4:pf (eq num B (plus (times A (pred x3)) A))] cut (gt A zero) (geq B A) (power2_gt_zero' I A p1) ([p24:pf (gt A zero)] cut (geq (times A (pred x3)) zero) (geq B A) (ord_mult_closure A (pred x3) (gt->geq A zero p24) p21) ([p25:pf (geq (times A (pred x3)) zero)] cut (geq (plus (times A (pred x3)) A) (plus zero A)) (geq B A) (ord_add_closure (times A (pred x3)) zero A p25) ([p26:pf (geq (plus (times A (pred x3)) A) (plus zero A))] cut (geq (plus (times A (pred x3)) A) A) (geq B A) (congr num A (+ zero A) ([z4:tm num] geq (plus (times A (pred x3)) A) z4) (symm num (+ zero A) A (zero_plus A)) p26) ([p5:pf (geq (plus (times A (pred x3)) A) A)] cut (>= B A) (geq B A) (trans_geq B (plus (times A (pred x3)) A) A (eq->geq B (plus (times A (pred x3)) A) p4) p5) ([p27:pf (geq B A)] p27)))))))))))))))))))).
upd : {A:tp} {B:tp} tm (rel4 (A arrow B) A B (A arrow B)) = [A:tp] [B:tp] lam4 (A arrow B) A B (A arrow B) form ([F:tm (A arrow B)] [D:tm A] [X:tm B] [F':tm (A arrow B)] forall A ([Z:tm A] if (eq A Z D) (eq B (@ A B F' Z) X) (eq B (@ A B F' Z) (@ A B F Z)))).
upd_i : {X1:tp} {T:tp} {R':tm (T arrow X1)} {V1:tm T} {X2:tm X1} {R:tm (T arrow X1)} pf (eq X1 (@ T X1 R' V1) X2) -> ({v1:tm T} pf (neq T v1 V1) -> pf (eq X1 (@ T X1 R' v1) (@ T X1 R v1))) -> pf (@ (T arrow X1) form (@ X1 (shadowed_0 (T arrow X1)) (@ T (rel X1 (T arrow X1)) (@ (T arrow X1) (rel3 T X1 (T arrow X1)) (upd T X1) R) V1) X2) R') = [X1:tp] [T:tp] [R':tm (T arrow X1)] [V1:tm T] [X2:tm X1] [R:tm (T arrow X1)] [p1:pf (eq X1 (@ T X1 R' V1) X2)] [q1:{v2:tm T} pf (neq T v2 V1) -> pf (eq X1 (@ T X1 R' v2) (@ T X1 R v2))] def4_i (T arrow X1) T X1 (T arrow X1) ([x3:tm (T arrow X1)] [x4:tm T] [x5:tm X1] [x6:tm (T arrow X1)] forall T ([Z:tm T] if (eq T Z x4) (eq X1 (@ T X1 x6 Z) x5) (eq X1 (@ T X1 x6 Z) (@ T X1 x3 Z)))) R V1 X2 R' (forall_i T ([x3:tm T] if (eq T x3 V1) (== X1 (@ T X1 R' x3) X2) (eq X1 (@ T X1 R' x3) (@ T X1 R x3))) ([z1:tm T] if_i (eq T z1 V1) (== X1 (@ T X1 R' z1) X2) (eq X1 (@ T X1 R' z1) (@ T X1 R z1)) ([p2:pf (eq T z1 V1)] trans X1 (@ T X1 R' z1) (@ T X1 R' V1) X2 (congr_app T X1 R' R' z1 V1 (refl (T arrow X1) R') p2) p1) ([x3:pf (not (eq T z1 V1))] q1 z1 x3))).
upd_e1 : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {X:tm X1} {Y:tm X2} {R':tm (X1 arrow X2)} pf (@ (X1 arrow X2) form (@ X2 (shadowed_0 (X1 arrow X2)) (@ X1 (rel X2 (X1 arrow X2)) (@ (X1 arrow X2) (rel3 X1 X2 (X1 arrow X2)) (upd X1 X2) R) X) Y) R') -> pf (eq X2 (@ X1 X2 R' X) Y) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [X:tm X1] [Y:tm X2] [R':tm (X1 arrow X2)] [p1:pf (@ (X1 arrow X2) form (@ X2 (shadowed_0 (X1 arrow X2)) (@ X1 (rel X2 (X1 arrow X2)) (@ (X1 arrow X2) (rel3 X1 X2 (X1 arrow X2)) (upd X1 X2) R) X) Y) R')] if_e1 (eq X1 X X) (eq X2 (@ X1 X2 R' X) Y) (eq X2 (@ X1 X2 R' X) (@ X1 X2 R X)) (forall_e X1 ([x3:tm X1] if (eq X1 x3 X) (eq X2 (@ X1 X2 R' x3) Y) (eq X2 (@ X1 X2 R' x3) (@ X1 X2 R x3))) (def4_e (X1 arrow X2) X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm (X1 arrow X2)] forall X1 ([Z:tm X1] if (eq X1 Z x4) (eq X2 (@ X1 X2 x6 Z) x5) (eq X2 (@ X1 X2 x6 Z) (@ X1 X2 x3 Z)))) R X Y R' p1) X) (refl X1 X).
upd_e2 : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V:tm X1} {X:tm X2} {R':tm (X1 arrow X2)} {W:tm X1} pf (@ (X1 arrow X2) form (@ X2 (shadowed_0 (X1 arrow X2)) (@ X1 (rel X2 (X1 arrow X2)) (@ (X1 arrow X2) (rel3 X1 X2 (X1 arrow X2)) (upd X1 X2) R) V) X) R') -> pf (not (eq X1 W V)) -> pf (eq X2 (@ X1 X2 R' W) (@ X1 X2 R W)) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V:tm X1] [X:tm X2] [R':tm (X1 arrow X2)] [W:tm X1] [p1:pf (@ (X1 arrow X2) form (@ X2 (shadowed_0 (X1 arrow X2)) (@ X1 (rel X2 (X1 arrow X2)) (@ (X1 arrow X2) (rel3 X1 X2 (X1 arrow X2)) (upd X1 X2) R) V) X) R')] [x3:pf (not (eq X1 W V))] if_e2 (eq X1 W V) (eq X2 (@ X1 X2 R' W) X) (eq X2 (@ X1 X2 R' W) (@ X1 X2 R W)) (forall_e X1 ([x4:tm X1] if (eq X1 x4 V) (eq X2 (@ X1 X2 R' x4) X) (eq X2 (@ X1 X2 R' x4) (@ X1 X2 R x4))) (def4_e (X1 arrow X2) X2 X1 (X1 arrow X2) ([x4:tm (X1 arrow X2)] [x5:tm X1] [x6:tm X2] [x7:tm (X1 arrow X2)] forall X1 ([Z:tm X1] if (eq X1 Z x5) (eq X2 (@ X1 X2 x7 Z) x6) (eq X2 (@ X1 X2 x7 Z) (@ X1 X2 x4 Z)))) R V X R' p1) W) x3.
eq_upd : {X1:tp} {X2:tp} {F:tm (X1 arrow X2)} {G:tm (X1 arrow X2)} {F':tm (X1 arrow X2)} {G':tm (X1 arrow X2)} {D:tm X1} {X:tm X2} pf (forall X1 ([i1:tm X1] eq X2 (@ X1 X2 F i1) (@ X1 X2 G i1))) -> pf (forall X1 ([i2:tm X1] eq X2 (@ X1 X2 F' i2) (@ X1 X2 G' i2))) -> pf (@ (X1 arrow X2) form (@ X2 (shadowed_0 (X1 arrow X2)) (@ X1 (rel X2 (X1 arrow X2)) (@ (X1 arrow X2) (rel3 X1 X2 (X1 arrow X2)) (upd X1 X2) F) D) X) F') -> pf (@ (X1 arrow X2) form (@ X2 (shadowed_0 (X1 arrow X2)) (@ X1 (rel X2 (X1 arrow X2)) (@ (X1 arrow X2) (rel3 X1 X2 (X1 arrow X2)) (upd X1 X2) G) D) X) G') = [X1:tp] [X2:tp] [F:tm (X1 arrow X2)] [G:tm (X1 arrow X2)] [F':tm (X1 arrow X2)] [G':tm (X1 arrow X2)] [D:tm X1] [X:tm X2] [p1:pf (forall X1 ([i3:tm X1] eq X2 (@ X1 X2 F i3) (@ X1 X2 G i3)))] [p2:pf (forall X1 ([i4:tm X1] eq X2 (@ X1 X2 F' i4) (@ X1 X2 G' i4)))] [p3:pf (@ (X1 arrow X2) form (@ X2 (shadowed_0 (X1 arrow X2)) (@ X1 (rel X2 (X1 arrow X2)) (@ (X1 arrow X2) (rel3 X1 X2 (X1 arrow X2)) (upd X1 X2) F) D) X) F')] def4_i (X1 arrow X2) X1 X2 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm (X1 arrow X2)] forall X1 ([Z:tm X1] if (eq X1 Z x4) (eq X2 (@ X1 X2 x6 Z) x5) (eq X2 (@ X1 X2 x6 Z) (@ X1 X2 x3 Z)))) G D X G' (forall_i X1 ([x3:tm X1] (eq X1 x3 D imp == X2 (@ X1 X2 G' x3) X) and (not (eq X1 x3 D) imp == X2 (@ X1 X2 G' x3) (@ X1 X2 G x3))) ([Z:tm X1] and_l (eq X1 Z D imp eq X2 (@ X1 X2 F' Z) X) (not (eq X1 Z D) imp eq X2 (@ X1 X2 F' Z) (@ X1 X2 F Z)) ((eq X1 Z D imp == X2 (@ X1 X2 G' Z) X) and (not (eq X1 Z D) imp == X2 (@ X1 X2 G' Z) (@ X1 X2 G Z))) (forall_e X1 ([x3:tm X1] if (eq X1 x3 D) (eq X2 (@ X1 X2 F' x3) X) (eq X2 (@ X1 X2 F' x3) (@ X1 X2 F x3))) (def4_e (X1 arrow X2) X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm (X1 arrow X2)] forall X1 ([Z1:tm X1] if (eq X1 Z1 x4) (eq X2 (@ X1 X2 x6 Z1) x5) (eq X2 (@ X1 X2 x6 Z1) (@ X1 X2 x3 Z1)))) F D X F' p3) Z) ([p4:pf (eq X1 Z D imp eq X2 (@ X1 X2 F' Z) X)] [p5:pf (not (eq X1 Z D) imp eq X2 (@ X1 X2 F' Z) (@ X1 X2 F Z))] and_i (eq X1 Z D imp == X2 (@ X1 X2 G' Z) X) (not (eq X1 Z D) imp == X2 (@ X1 X2 G' Z) (@ X1 X2 G Z)) (imp_i (eq X1 Z D) (== X2 (@ X1 X2 G' Z) X) ([p6:pf (eq X1 Z D)] trans X2 (@ X1 X2 G' Z) (@ X1 X2 F' Z) X (symm X2 (@ X1 X2 F' Z) (@ X1 X2 G' Z) (forall_e X1 ([x3:tm X1] eq X2 (@ X1 X2 F' x3) (@ X1 X2 G' x3)) p2 Z)) (imp_e (eq X1 Z D) (eq X2 (@ X1 X2 F' Z) X) p4 p6))) (imp_i (not (eq X1 Z D)) (== X2 (@ X1 X2 G' Z) (@ X1 X2 G Z)) ([p7:pf (not (eq X1 Z D))] trans X2 (@ X1 X2 G' Z) (@ X1 X2 F' Z) (@ X1 X2 G Z) (symm X2 (@ X1 X2 F' Z) (@ X1 X2 G' Z) (forall_e X1 ([x3:tm X1] eq X2 (@ X1 X2 F' x3) (@ X1 X2 G' x3)) p2 Z)) (trans X2 (@ X1 X2 F' Z) (@ X1 X2 F Z) (@ X1 X2 G Z) (imp_e (not (eq X1 Z D)) (eq X2 (@ X1 X2 F' Z) (@ X1 X2 F Z)) p5 p7) (forall_e X1 ([x3:tm X1] eq X2 (@ X1 X2 F x3) (@ X1 X2 G x3)) p1 Z))))))).
set : tp -> tp = [t:tp] t arrow form.
emptyset : {T:tp} tm (set T) = [T:tp] _emptyset T.
singleton : {T:tp} tm (T arrow set T) = [T:tp] _singleton T.
set_union : {T:tp} tm (2ary (set T)) = [T:tp] _set_union T.
set_intersection : {T:tp} tm (2ary (set T)) = [T:tp] _set_intersection T.
set_disjoint : {T:tp} tm (rel (set T) (set T)) = [T:tp] lam2 (T arrow form) (T arrow form) form ([s1:tm (T arrow form)] [s2:tm (T arrow form)] _set_disjoint T ([x3:tm T] @ T form s1 x3) ([x4:tm T] @ T form s2 x4)).
set_compl : {T:tp} tm (1ary (set T)) = [T:tp] _set_compl T.
universe : {T:tp} tm (set T) = [T:tp] lam T form ([x3:tm T] true).
set_diff : {T:tp} tm (2ary (set T)) = [T:tp] _set_diff T.
is_singleton : {T:tp} tm (rel (eqrel T) (set T)) = [T:tp] _is_singleton T.
isempty : {T:tp} tm (set T arrow form) = [T:tp] lam (T arrow form) form ([S:tm (T arrow form)] not (exists T ([x3:tm T] @ T form S x3))).
nonempty : {T:tp} tm (set T arrow form) = [T:tp] lam (T arrow form) form ([S:tm (T arrow form)] exists T ([x3:tm T] @ T form S x3)).
singleton_i : {X1:tp} {X:tm X1} {Y:tm X1} pf (eq X1 X Y) -> pf (@ X1 form (@ X1 (set X1) (singleton X1) X) Y) = [X1:tp] [X:tm X1] [Y:tm X1] [p1:pf (eq X1 X Y)] def2_i X1 X1 ([x3:tm X1] [x4:tm X1] _eq X1 x4 x3) X Y (symm X1 X Y p1).
singleton_e : {X1:tp} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (set X1) (singleton X1) X) Y) -> pf (eq X1 X Y) = [X1:tp] [X:tm X1] [Y:tm X1] [p1:pf (@ X1 form (@ X1 (set X1) (singleton X1) X) Y)] symm X1 Y X (def2_e X1 X1 ([x3:tm X1] [x4:tm X1] _eq X1 x4 x3) X Y p1).
subset_refl : {T:tp} {S:tm (shadowed_0 T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S) S) = [T:tp] [S:tm (shadowed_0 T)] subset_i T S S ([x3:tm T] [p1:pf (@ T form S x3)] p1).
subset_trans : {T:tp} {S1:tm (shadowed_0 T)} {S2:tm (shadowed_0 T)} {S3:tm (shadowed_0 T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) S2) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S2) S3) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) S3) = [T:tp] [S1:tm (shadowed_0 T)] [S2:tm (shadowed_0 T)] [S3:tm (shadowed_0 T)] [p1:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) S2)] [p2:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S2) S3)] subset_i T S1 S3 ([x3:tm T] [p3:pf (@ T form S1 x3)] subset_e T S2 S3 x3 p2 (subset_e T S1 S2 x3 p1 p3)).
emptyset_subset : {T:tp} {S:tm (shadowed_0 T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) (emptyset T)) S) = [T:tp] [S:tm (shadowed_0 T)] subset_i T (emptyset T) S ([x3:tm T] [p1:pf (@ T form (emptyset T) x3)] false_e (@ T form S x3) (def1_e T ([x4:tm T] false) x3 p1)).
set_equiv_reflexive : {T:tp} pf (@ (rel (shadowed_0 T) (shadowed_0 T)) form (reflexive (shadowed_0 T)) (set_equiv T)) = [T:tp] def1_i (rel (shadowed_0 T) (shadowed_0 T)) ([x3:tm (rel (shadowed_0 T) (shadowed_0 T))] forall (shadowed_0 T) ([x4:tm (shadowed_0 T)] @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 T arrow form) x3 x4) x4)) (set_equiv T) (forall_i (set T) ([x3:tm (set T)] @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) x3) x3) ([s:tm (set T)] set_equiv_i2 T s s ([x5:tm T] [p1:pf (@ T form s x5)] p1) ([x6:tm T] [p1:pf (@ T form s x6)] p1))).
set_equiv_refl : {X1:tp} {S:tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S) S) = [X1:tp] [S:tm (shadowed_0 X1)] rel_refl (shadowed_0 X1) (set_equiv X1) S (set_equiv_reflexive X1).
set_equiv_symmetric : {T:tp} pf (@ (rel (shadowed_0 T) (shadowed_0 T)) form (symmetric (shadowed_0 T)) (set_equiv T)) = [T:tp] def1_i (rel (shadowed_0 T) (shadowed_0 T)) ([x3:tm (rel (shadowed_0 T) (shadowed_0 T))] forall2 (shadowed_0 T) (shadowed_0 T) ([x4:tm (shadowed_0 T)] [y:tm (shadowed_0 T)] @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 T arrow form) x3 x4) y imp @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 T arrow form) x3 y) x4)) (set_equiv T) (forall2_i (set T) (set T) ([x3:tm (set T)] [x4:tm (set T)] @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) x3) x4 imp @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) x4) x3) ([s1:tm (set T)] [s2:tm (set T)] imp_i (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) s1) s2) (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) s2) s1) ([p1:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) s1) s2)] set_equiv_i T s2 s1 (forall_i T ([x3:tm T] @ T form s2 x3 equiv @ T form s1 x3) ([x5:tm T] equiv_symm (@ T form s1 x5) (@ T form s2 x5) (set_equiv_e T s1 s2 x5 p1)))))).
set_equiv_symm : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S2) S1) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2)] rel_symm (shadowed_0 X1) (set_equiv X1) S1 S2 (set_equiv_symmetric X1) p1.
set_equiv_transitive : {T:tp} pf (@ (rel (shadowed_0 T) (shadowed_0 T)) form (transitive (shadowed_0 T)) (set_equiv T)) = [T:tp] def1_i (rel (shadowed_0 T) (shadowed_0 T)) ([x3:tm (rel (shadowed_0 T) (shadowed_0 T))] forall3 (shadowed_0 T) (shadowed_0 T) (shadowed_0 T) ([x4:tm (shadowed_0 T)] [y:tm (shadowed_0 T)] [z1:tm (shadowed_0 T)] @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 T arrow form) x3 x4) y imp @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 T arrow form) x3 y) z1 imp @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 T arrow form) x3 x4) z1)) (set_equiv T) (forall3_i (set T) (set T) (set T) ([x3:tm (set T)] [x4:tm (set T)] [x5:tm (set T)] @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) x3) x4 imp @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) x4) x5 imp @ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) x3) x5) ([s1:tm (set T)] [s2:tm (set T)] [s3:tm (set T)] imp2_i (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) s1) s2) (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) s2) s3) (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) s1) s3) ([p1:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) s1) s2)] [p2:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) s2) s3)] set_equiv_i2 T s1 s3 ([x5:tm T] [p3:pf (@ T form s1 x5)] set_equiv_e1 T s2 s3 x5 p2 (set_equiv_e1 T s1 s2 x5 p1 p3)) ([x6:tm T] [p3:pf (@ T form s3 x6)] set_equiv_e2 T s1 s2 x6 p1 (set_equiv_e2 T s2 s3 x6 p2 p3))))).
set_equiv_trans : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {S3:tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S2) S3) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S3) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [S3:tm (shadowed_0 X1)] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2)] [p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S2) S3)] rel_trans (shadowed_0 X1) (set_equiv X1) S1 S2 S3 (set_equiv_transitive X1) p1 p2.
set_equiv_subset1 : {T:tp} {S1:tm (shadowed_0 T)} {S2:tm (shadowed_0 T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S2) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) S2) = [T:tp] [S1:tm (shadowed_0 T)] [S2:tm (shadowed_0 T)] [p1:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S2)] subset_i T S1 S2 ([x3:tm T] [p2:pf (@ T form S1 x3)] set_equiv_e1 T S1 S2 x3 p1 p2).
set_equiv_subset2 : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S1) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2)] subset_i X1 S2 S1 ([x3:tm X1] [p2:pf (@ X1 form S2 x3)] set_equiv_e2 X1 S1 S2 x3 p1 p2).
set_union_i1 : {X1:tp} {S1:tm (X1 arrow form)} {X:tm X1} {S2:tm (set X1)} pf (@ X1 form S1 X) -> pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) S1) S2) X) = [X1:tp] [S1:tm (X1 arrow form)] [X:tm X1] [S2:tm (set X1)] [p1:pf (@ X1 form S1 X)] def3_i (set X1) (set X1) X1 ([x3:tm (set X1)] [x4:tm (set X1)] [x5:tm X1] _@ X1 form x3 x5 or _@ X1 form x4 x5) S1 S2 X (or_i1 (@ X1 form S1 X) (_@ X1 form S2 X) p1).
set_union_i2 : {X1:tp} {S2:tm (X1 arrow form)} {X:tm X1} {S1:tm (set X1)} pf (@ X1 form S2 X) -> pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) S1) S2) X) = [X1:tp] [S2:tm (X1 arrow form)] [X:tm X1] [S1:tm (set X1)] [p1:pf (@ X1 form S2 X)] def3_i (set X1) (set X1) X1 ([x3:tm (set X1)] [x4:tm (set X1)] [x5:tm X1] _@ X1 form x3 x5 or _@ X1 form x4 x5) S1 S2 X (or_i2 (@ X1 form S2 X) (_@ X1 form S1 X) p1).
set_union_e : {X1:tp} {S1:tm (set X1)} {S2:tm (set X1)} {X:tm X1} {Z:tform} pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) S1) S2) X) -> (pf (@ X1 form S1 X) -> pf Z) -> (pf (@ X1 form S2 X) -> pf Z) -> pf Z = [X1:tp] [S1:tm (set X1)] [S2:tm (set X1)] [X:tm X1] [Z:tform] [p1:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) S1) S2) X)] [q1:pf (@ X1 form S1 X) -> pf Z] [q2:pf (@ X1 form S2 X) -> pf Z] or_e (_@ X1 form S1 X) (_@ X1 form S2 X) Z (def3_e X1 (set X1) (set X1) ([x3:tm (set X1)] [x4:tm (set X1)] [x5:tm X1] _@ X1 form x3 x5 or _@ X1 form x4 x5) S1 S2 X p1) ([p2:pf (@ X1 form S1 X)] q1 p2) ([p2:pf (@ X1 form S2 X)] q2 p2).
set_union_comm : {T:tp} {S1:tm (set T)} {S2:tm (set T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2)) (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S2) S1)) = [T:tp] [S1:tm (set T)] [S2:tm (set T)] set_equiv_i2 T (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S2) S1) ([x3:tm T] [p1:pf (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) x3)] or_e (_@ T form S1 x3) (_@ T form S2 x3) (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S2) S1) x3) (def3_e T (set T) (set T) ([x4:tm (set T)] [x5:tm (set T)] [x6:tm T] _@ T form x4 x6 or _@ T form x5 x6) S1 S2 x3 p1) ([p2:pf (@ T form S1 x3)] set_union_i2 T S1 x3 S2 p2) ([p2:pf (@ T form S2 x3)] set_union_i1 T S2 x3 S1 p2)) ([x4:tm T] [p1:pf (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S2) S1) x4)] or_e (_@ T form S2 x4) (_@ T form S1 x4) (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) x4) (def3_e T (set T) (set T) ([x3:tm (set T)] [x5:tm (set T)] [x6:tm T] _@ T form x3 x6 or _@ T form x5 x6) S2 S1 x4 p1) ([p2:pf (@ T form S2 x4)] set_union_i2 T S2 x4 S1 p2) ([p2:pf (@ T form S1 x4)] set_union_i1 T S1 x4 S2 p2)).
not_in_set_union_i : {X1:tp} {S1:tm (X1 arrow form)} {X:tm X1} {S2:tm (X1 arrow form)} pf (not (@ X1 form S1 X)) -> pf (not (@ X1 form S2 X)) -> pf (not (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) S1) S2) X)) = [X1:tp] [S1:tm (X1 arrow form)] [X:tm X1] [S2:tm (X1 arrow form)] [p1:pf (not (@ X1 form S1 X))] [p2:pf (not (@ X1 form S2 X))] not_i (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) S1) S2) X) ([p3:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) S1) S2) X)] set_union_e X1 S1 S2 X false p3 ([p4:pf (@ X1 form S1 X)] not_e (@ X1 form S1 X) p1 p4) ([p4:pf (@ X1 form S2 X)] not_e (@ X1 form S2 X) p2 p4)).
set_equiv_union_emptyset : {T:tp} {S2:tm (shadowed_0 T)} {S1:tm (shadowed_0 T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S2) (emptyset T)) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2)) = [T:tp] [S2:tm (shadowed_0 T)] [S1:tm (shadowed_0 T)] [p1:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S2) (emptyset T))] set_equiv_i T S1 (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) (forall_i T ([x3:tm T] @ T form S1 x3 equiv @ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) x3) ([x3:tm T] equiv_i (@ T form S1 x3) (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) x3) (imp_i (@ T form S1 x3) (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) x3) ([p2:pf (@ T form S1 x3)] set_union_i1 T S1 x3 S2 p2)) (imp_i (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) x3) (_@ T form S1 x3) ([p2:pf (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) x3)] a_or_b_and_not_a (_@ T form S2 x3) (_@ T form S1 x3) (or_symm (_@ T form S1 x3) (_@ T form S2 x3) (def3_e T (set T) (set T) ([x4:tm (set T)] [x5:tm (set T)] [x6:tm T] _@ T form x4 x6 or _@ T form x5 x6) S1 S2 x3 p2)) (not_i (@ T form S2 x3) ([p3:pf (@ T form S2 x3)] def1_e T ([x4:tm T] false) x3 (imp_e (@ T form S2 x3) (@ T form (emptyset T) x3) (and_e1 (@ T form S2 x3 imp @ T form (emptyset T) x3) (@ T form (emptyset T) x3 imp @ T form S2 x3) (set_equiv_e T S2 (emptyset T) x3 p1)) p3))))))).
set_subset_union1 : {T:tp} {S1:tm (shadowed_0 T)} {S2:tm (set T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2)) = [T:tp] [S1:tm (shadowed_0 T)] [S2:tm (set T)] subset_i T S1 (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) ([x3:tm T] [p1:pf (@ T form S1 x3)] set_union_i1 T S1 x3 S2 p1).
set_subset_union2 : {T:tp} {S2:tm (shadowed_0 T)} {S1:tm (set T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S2) (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2)) = [T:tp] [S2:tm (shadowed_0 T)] [S1:tm (set T)] subset_i T S2 (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) ([x3:tm T] [p1:pf (@ T form S2 x3)] set_union_i2 T S2 x3 S1 p1).
set_union_subset_i : {X1:tp} {A:tm (shadowed_0 X1)} {C:tm (shadowed_0 X1)} {B:tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) A) C) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) B) C) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) A) B)) C) = [X1:tp] [A:tm (shadowed_0 X1)] [C:tm (shadowed_0 X1)] [B:tm (shadowed_0 X1)] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) A) C)] [p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) B) C)] subset_i X1 (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) A) B) C ([x3:tm X1] [p3:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) A) B) x3)] set_union_e X1 A B x3 (@ X1 form C x3) p3 ([p6:pf (@ X1 form A x3)] subset_e X1 A C x3 p1 p6) ([p7:pf (@ X1 form B x3)] subset_e X1 B C x3 p2 p7)).
set_union_congr : {T:tp} {S1:tm (shadowed_0 T)} {S1':tm (shadowed_0 T)} {S2:tm (shadowed_0 T)} {S2':tm (shadowed_0 T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S1') -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S2) S2') -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2)) (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1') S2')) = [T:tp] [S1:tm (shadowed_0 T)] [S1':tm (shadowed_0 T)] [S2:tm (shadowed_0 T)] [S2':tm (shadowed_0 T)] [p1:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S1')] [p2:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S2) S2')] set_equiv_i2 T (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1') S2') ([x3:tm T] [p3:pf (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) x3)] set_union_e T S1 S2 x3 (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1') S2') x3) p3 ([p4:pf (@ T form S1 x3)] set_union_i1 T S1' x3 S2' (set_equiv_e1 T S1 S1' x3 p1 p4)) ([p4:pf (@ T form S2 x3)] set_union_i2 T S2' x3 S1' (set_equiv_e1 T S2 S2' x3 p2 p4))) ([x4:tm T] [p3:pf (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1') S2') x4)] set_union_e T S1' S2' x4 (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_union T) S1) S2) x4) p3 ([p4:pf (@ T form S1' x4)] set_union_i1 T S1 x4 S2 (set_equiv_e2 T S1 S1' x4 p1 p4)) ([p4:pf (@ T form S2' x4)] set_union_i2 T S2 x4 S1 (set_equiv_e2 T S2 S2' x4 p2 p4))).
set_intersection_i : {X1:tp} {S1:tm (X1 arrow form)} {X:tm X1} {S2:tm (X1 arrow form)} pf (@ X1 form S1 X) -> pf (@ X1 form S2 X) -> pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2) X) = [X1:tp] [S1:tm (X1 arrow form)] [X:tm X1] [S2:tm (X1 arrow form)] [p1:pf (@ X1 form S1 X)] [p2:pf (@ X1 form S2 X)] def3_i (set X1) (set X1) X1 ([x3:tm (set X1)] [x4:tm (set X1)] [x5:tm X1] _@ X1 form x3 x5 and _@ X1 form x4 x5) S1 S2 X (and_i (@ X1 form S1 X) (@ X1 form S2 X) p1 p2).
set_intersection_e : {X1:tp} {S1:tm (set X1)} {S2:tm (set X1)} {X:tm X1} {A:tform} pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2) X) -> (pf (@ X1 form S1 X) -> pf (@ X1 form S2 X) -> pf A) -> pf A = [X1:tp] [S1:tm (set X1)] [S2:tm (set X1)] [X:tm X1] [A:tform] [p1:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2) X)] [x3:pf (_@ X1 form S1 X) -> pf (_@ X1 form S2 X) -> pf A] and_l (_@ X1 form S1 X) (_@ X1 form S2 X) A (def3_e X1 (set X1) (set X1) ([x4:tm (set X1)] [x5:tm (set X1)] [x6:tm X1] _@ X1 form x4 x6 and _@ X1 form x5 x6) S1 S2 X p1) ([x4:pf (_@ X1 form S1 X)] [x5:pf (_@ X1 form S2 X)] x3 x4 x5).
set_intersection_e1 : {X1:tp} {S1:tm (set X1)} {S2:tm (set X1)} {X:tm X1} pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2) X) -> pf (@ X1 form S1 X) = [X1:tp] [S1:tm (set X1)] [S2:tm (set X1)] [X:tm X1] [p1:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2) X)] and_e1 (_@ X1 form S1 X) (_@ X1 form S2 X) (def3_e X1 (set X1) (set X1) ([x3:tm (set X1)] [x4:tm (set X1)] [x5:tm X1] _@ X1 form x3 x5 and _@ X1 form x4 x5) S1 S2 X p1).
set_intersection_e2 : {X1:tp} {S1:tm (set X1)} {S2:tm (set X1)} {X:tm X1} pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2) X) -> pf (@ X1 form S2 X) = [X1:tp] [S1:tm (set X1)] [S2:tm (set X1)] [X:tm X1] [p1:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2) X)] and_e2 (_@ X1 form S1 X) (_@ X1 form S2 X) (def3_e X1 (set X1) (set X1) ([x3:tm (set X1)] [x4:tm (set X1)] [x5:tm X1] _@ X1 form x3 x5 and _@ X1 form x4 x5) S1 S2 X p1).
intersection_subset_right : {T:tp} {S1:tm (set T)} {S2:tm (set T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_intersection T) S1) S2)) S2) = [T:tp] [S1:tm (set T)] [S2:tm (set T)] subset_i T (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_intersection T) S1) S2) S2 ([x3:tm T] [p1:pf (@ T form (@ (set T) (set T) (@ (set T) (1ary (set T)) (set_intersection T) S1) S2) x3)] set_intersection_e2 T S1 S2 x3 p1).
intersection_subset : {X1:tp} {S1:tm (shadowed_0 X1)} {S1':tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {S2':tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S1') -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S2') -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2)) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1') S2')) = [X1:tp] [S1:tm (shadowed_0 X1)] [S1':tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [S2':tm (shadowed_0 X1)] [p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S1')] [p4:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S2')] cut2 (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S1') (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S2') (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2)) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1') S2')) p2 p4 ([x3:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S1')] [x4:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S2')] subset_i X1 (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1') S2') ([x5:tm X1] [p6:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1) S2) x5)] set_intersection_e X1 S1 S2 x5 (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_intersection X1) S1') S2') x5) p6 ([p8:pf (@ X1 form S1 x5)] [p10:pf (@ X1 form S2 x5)] set_intersection_i X1 S1' x5 S2' (subset_e X1 S1 S1' x5 p2 p8) (subset_e X1 S2 S2' x5 p4 p10)))).
set_disjoint_i : {T:tp} {S1:tm (T arrow form)} {S2:tm (T arrow form)} ({x3:tm T} pf (@ T form S1 x3) -> pf (@ T form S2 x3) -> pf false) -> pf (@ (set T) form (@ (set T) (shadowed_0 (set T)) (set_disjoint T) S1) S2) = [T:tp] [S1:tm (T arrow form)] [S2:tm (T arrow form)] [p1:{x4:tm T} pf (@ T form S1 x4) -> pf (@ T form S2 x4) -> pf false] def2_i (set T) (set T) ([x3:tm (set T)] [x4:tm (set T)] _set_disjoint T ([x5:tm T] @ T form x3 x5) ([x6:tm T] @ T form x4 x6)) S1 S2 (not_i (exists T ([x7:tm T] @ T form S1 x7 and @ T form S2 x7)) ([p2:pf (exists T ([x8:tm T] @ T form S1 x8 and @ T form S2 x8))] exists_e T ([x3:tm T] @ T form S1 x3 and @ T form S2 x3) false p2 ([x9:tm T] [p3:pf (@ T form S1 x9 and @ T form S2 x9)] and_l (@ T form S1 x9) (@ T form S2 x9) false p3 ([p4:pf (@ T form S1 x9)] [p5:pf (@ T form S2 x9)] p1 x9 p4 p5)))).
set_disjoint_e1 : {X1:tp} {S1:tm (set X1)} {S2:tm (set X1)} {X:tm X1} pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) S1) S2) -> pf (@ X1 form S1 X) -> pf (not (@ X1 form S2 X)) = [X1:tp] [S1:tm (set X1)] [S2:tm (set X1)] [X:tm X1] [p1:pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) S1) S2)] [p2:pf (@ X1 form S1 X)] not_ei (_exists X1 ([x3:tm X1] @ X1 form S1 x3 and @ X1 form S2 x3)) (@ X1 form S2 X) (def2_e (set X1) (set X1) ([x3:tm (set X1)] [x4:tm (set X1)] _set_disjoint X1 ([x5:tm X1] @ X1 form x3 x5) ([x6:tm X1] @ X1 form x4 x6)) S1 S2 p1) ([p3:pf (@ X1 form S2 X)] exists_i X1 ([x3:tm X1] @ X1 form S1 x3 and @ X1 form S2 x3) X (and_i (@ X1 form S1 X) (@ X1 form S2 X) p2 p3)).
set_disjoint_e2 : {X1:tp} {S1:tm (set X1)} {S2:tm (set X1)} {X:tm X1} pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) S1) S2) -> pf (@ X1 form S2 X) -> pf (not (@ X1 form S1 X)) = [X1:tp] [S1:tm (set X1)] [S2:tm (set X1)] [X:tm X1] [p1:pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) S1) S2)] [p2:pf (@ X1 form S2 X)] not_ei (_exists X1 ([x3:tm X1] @ X1 form S1 x3 and @ X1 form S2 x3)) (@ X1 form S1 X) (def2_e (set X1) (set X1) ([x3:tm (set X1)] [x4:tm (set X1)] _set_disjoint X1 ([x5:tm X1] @ X1 form x3 x5) ([x6:tm X1] @ X1 form x4 x6)) S1 S2 p1) ([p3:pf (@ X1 form S1 X)] exists_i X1 ([x3:tm X1] @ X1 form S1 x3 and @ X1 form S2 x3) X (and_i (@ X1 form S1 X) (@ X1 form S2 X) p3 p2)).
set_disjoint_e : {X1:tp} {A:tm (set X1)} {B:tm (set X1)} {X:tm X1} {C:tform} pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) A) B) -> pf (@ X1 form A X) -> pf (@ X1 form B X) -> pf C = [X1:tp] [A:tm (set X1)] [B:tm (set X1)] [X:tm X1] [C:tform] [p1:pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) A) B)] [p2:pf (@ X1 form A X)] [p3:pf (@ X1 form B X)] false_e C (not_e (@ X1 form B X) (set_disjoint_e1 X1 A B X p1 p2) p3).
set_disjoint_symm : {X1:tp} {A:tm (set X1)} {B:tm (set X1)} pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) A) B) -> pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) B) A) = [X1:tp] [A:tm (set X1)] [B:tm (set X1)] [p1:pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) A) B)] set_disjoint_i X1 B A ([x3:tm X1] [p2:pf (@ X1 form B x3)] [p4:pf (@ X1 form A x3)] set_disjoint_e X1 A B x3 false p1 p4 p2).
set_disjoint_union : {X1:tp} {A:tm (set X1)} {S:tm (set X1)} {B:tm (set X1)} pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) A) S) -> pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) B) S) -> pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) A) B)) S) = [X1:tp] [A:tm (set X1)] [S:tm (set X1)] [B:tm (set X1)] [p1:pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) A) S)] [p2:pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) B) S)] set_disjoint_i X1 (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) A) B) S ([x3:tm X1] [p3:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_union X1) A) B) x3)] [p4:pf (@ X1 form S x3)] set_union_e X1 A B x3 false p3 ([p5:pf (@ X1 form A x3)] not_e (@ X1 form S x3) (set_disjoint_e1 X1 A S x3 p1 p5) p4) ([p5:pf (@ X1 form B x3)] not_e (@ X1 form S x3) (set_disjoint_e1 X1 B S x3 p2 p5) p4)).
subset_disjoint : {X1:tp} {A':tm (shadowed_0 X1)} {A:tm (shadowed_0 X1)} {B':tm (shadowed_0 X1)} {B:tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) A') A) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) B') B) -> pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) A) B) -> pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) A') B') = [X1:tp] [A':tm (shadowed_0 X1)] [A:tm (shadowed_0 X1)] [B':tm (shadowed_0 X1)] [B:tm (shadowed_0 X1)] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) A') A)] [p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) B') B)] [p3:pf (@ (set X1) form (@ (set X1) (shadowed_0 (set X1)) (set_disjoint X1) A) B)] set_disjoint_i X1 A' B' ([x3:tm X1] [p4:pf (@ X1 form A' x3)] [p5:pf (@ X1 form B' x3)] not_e (@ X1 form B x3) (set_disjoint_e1 X1 A B x3 p3 (subset_e X1 A' A x3 p1 p4)) (subset_e X1 B' B x3 p2 p5)).
set_disjoint_congr : {T:tp} {S1:tm (shadowed_0 T)} {S1':tm (shadowed_0 T)} {S2:tm (shadowed_0 T)} {S2':tm (shadowed_0 T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S1') -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S2) S2') -> pf (@ (set T) form (@ (set T) (shadowed_0 (set T)) (set_disjoint T) S1) S2) -> pf (@ (set T) form (@ (set T) (shadowed_0 (set T)) (set_disjoint T) S1') S2') = [T:tp] [S1:tm (shadowed_0 T)] [S1':tm (shadowed_0 T)] [S2:tm (shadowed_0 T)] [S2':tm (shadowed_0 T)] [p1:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S1')] [p2:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S2) S2')] [p3:pf (@ (set T) form (@ (set T) (shadowed_0 (set T)) (set_disjoint T) S1) S2)] def2_i (set T) (set T) ([x3:tm (set T)] [x4:tm (set T)] _set_disjoint T ([x5:tm T] @ T form x3 x5) ([x6:tm T] @ T form x4 x6)) S1' S2' (not_ei (_exists T ([x7:tm T] @ T form S1 x7 and @ T form S2 x7)) (exists T ([x8:tm T] @ T form S1' x8 and @ T form S2' x8)) (def2_e (set T) (set T) ([x3:tm (set T)] [x4:tm (set T)] _set_disjoint T ([x9:tm T] @ T form x3 x9) ([x10:tm T] @ T form x4 x10)) S1 S2 p3) ([p4:pf (exists T ([x11:tm T] @ T form S1' x11 and @ T form S2' x11))] exists_ei T ([x3:tm T] @ T form S1' x3 and @ T form S2' x3) ([x3:tm T] @ T form S1 x3 and @ T form S2 x3) p4 ([x12:tm T] [p5:pf (@ T form S1' x12 and @ T form S2' x12)] and_l (@ T form S1' x12) (@ T form S2' x12) (@ T form S1 x12 and @ T form S2 x12) p5 ([p6:pf (@ T form S1' x12)] [p7:pf (@ T form S2' x12)] and_i (@ T form S1 x12) (@ T form S2 x12) (set_equiv_e2 T S1 S1' x12 p1 p6) (set_equiv_e2 T S2 S2' x12 p2 p7))))).
subset_congr : {T:tp} {S1:tm (shadowed_0 T)} {S1':tm (shadowed_0 T)} {S2:tm (shadowed_0 T)} {S2':tm (shadowed_0 T)} pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S1') -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S2) S2') -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) S2) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1') S2') = [T:tp] [S1:tm (shadowed_0 T)] [S1':tm (shadowed_0 T)] [S2:tm (shadowed_0 T)] [S2':tm (shadowed_0 T)] [p1:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S1')] [p2:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S2) S2')] [p3:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) S2)] subset_i T S1' S2' ([x3:tm T] [p4:pf (@ T form S1' x3)] set_equiv_e1 T S2 S2' x3 p2 (subset_e T S1 S2 x3 p3 (set_equiv_e2 T S1 S1' x3 p1 p4))).
set_compl_i : {X1:tp} {S:tm (X1 arrow form)} {X:tm X1} pf (not (@ X1 form S X)) -> pf (@ X1 form (@ (set X1) (set X1) (set_compl X1) S) X) = [X1:tp] [S:tm (X1 arrow form)] [X:tm X1] [p1:pf (not (@ X1 form S X))] def2_i (set X1) X1 ([x3:tm (set X1)] [x4:tm X1] not (_@ X1 form x3 x4)) S X p1.
set_diff_i : {X1:tp} {S:tm (X1 arrow form)} {X:tm X1} {T:tm (X1 arrow form)} pf (@ X1 form S X) -> pf (not (@ X1 form T X)) -> pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S) T) X) = [X1:tp] [S:tm (X1 arrow form)] [X:tm X1] [T:tm (X1 arrow form)] [p1:pf (@ X1 form S X)] [p2:pf (not (@ X1 form T X))] def3_i (set X1) (set X1) X1 ([x3:tm (set X1)] [x4:tm (set X1)] [x5:tm X1] _@ X1 form x3 x5 and not (_@ X1 form x4 x5)) S T X (and_i (@ X1 form S X) (not (@ X1 form T X)) p1 p2).
set_diff_e1 : {X1:tp} {S:tm (set X1)} {T:tm (set X1)} {X:tm X1} pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S) T) X) -> pf (@ X1 form S X) = [X1:tp] [S:tm (set X1)] [T:tm (set X1)] [X:tm X1] [p1:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S) T) X)] and_e1 (_@ X1 form S X) (not (_@ X1 form T X)) (def3_e X1 (set X1) (set X1) ([x3:tm (set X1)] [x4:tm (set X1)] [x5:tm X1] _@ X1 form x3 x5 and not (_@ X1 form x4 x5)) S T X p1).
set_diff_e2 : {X1:tp} {S:tm (set X1)} {T:tm (set X1)} {X:tm X1} pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S) T) X) -> pf (not (@ X1 form T X)) = [X1:tp] [S:tm (set X1)] [T:tm (set X1)] [X:tm X1] [p1:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S) T) X)] and_e2 (_@ X1 form S X) (not (_@ X1 form T X)) (def3_e X1 (set X1) (set X1) ([x3:tm (set X1)] [x4:tm (set X1)] [x5:tm X1] _@ X1 form x3 x5 and not (_@ X1 form x4 x5)) S T X p1).
set_diff_subset : {X1:tp} {S1:tm (shadowed_0 X1)} {S1':tm (shadowed_0 X1)} {S2':tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S1') -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2') S2) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1) S2)) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1') S2')) = [X1:tp] [S1:tm (shadowed_0 X1)] [S1':tm (shadowed_0 X1)] [S2':tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S1')] [p4:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2') S2)] cut2 (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S1') (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2') S2) (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1) S2)) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1') S2')) p2 p4 ([x3:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S1')] [x4:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2') S2)] subset_i X1 (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1) S2) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1') S2') ([x5:tm X1] [p10:pf (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1) S2) x5)] cut (@ X1 form S1' x5) (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1') S2') x5) (subset_e X1 S1 S1' x5 p2 (set_diff_e1 X1 S1 S2 x5 p10)) ([p12:pf (@ X1 form S1' x5)] cut (not (@ X1 form S2' x5)) (@ X1 form (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1') S2') x5) (not_i (@ X1 form S2' x5) ([p14:pf (@ X1 form S2' x5)] false_e false (not_e (@ X1 form S2 x5) (set_diff_e2 X1 S1 S2 x5 p10) (subset_e X1 S2' S2 x5 p4 p14)))) ([p14:pf (not (@ X1 form S2' x5))] set_diff_i X1 S1' x5 S2' p12 p14)))).
set_diff_congr : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {T1:tm (shadowed_0 X1)} {T2:tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) T1) T2) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1) T1)) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S2) T2)) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [T1:tm (shadowed_0 X1)] [T2:tm (shadowed_0 X1)] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2)] [p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) T1) T2)] set_equiv_i3 X1 (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S1) T1) (@ (set X1) (set X1) (@ (set X1) (1ary (set X1)) (set_diff X1) S2) T2) (set_diff_subset X1 S1 S2 T2 T1 (set_equiv_subset1 X1 S1 S2 p1) (set_equiv_subset2 X1 T1 T2 p2)) (set_diff_subset X1 S2 S1 T1 T2 (set_equiv_subset2 X1 S1 S2 p1) (set_equiv_subset1 X1 T1 T2 p2)).
set_isempty_e : {X1:tp} {S:tm (set X1)} pf (@ (set X1) form (isempty X1) S) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S) (emptyset X1)) = [X1:tp] [S:tm (set X1)] [p1:pf (@ (set X1) form (isempty X1) S)] def2_i (shadowed_0 X1) (shadowed_0 X1) ([x3:tm (shadowed_0 X1)] [x4:tm (shadowed_0 X1)] _@2 (shadowed_0 X1) (shadowed_0 X1) form (_subset X1) x3 x4 and _@2 (shadowed_0 X1) (shadowed_0 X1) form (_subset X1) x4 x3) S (emptyset X1) (and_i (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S) (emptyset X1)) (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) (emptyset X1)) S) (subset_i X1 S (emptyset X1) ([x3:tm X1] [p4:pf (@ X1 form S x3)] cut (not (exists X1 ([x4:tm X1] @ X1 form S x4))) (@ X1 form (emptyset X1) x3) (def1_e (set X1) ([x4:tm (set X1)] not (exists X1 ([x5:tm X1] @ X1 form x4 x5))) S p1) ([p2:pf (not (exists X1 ([x6:tm X1] @ X1 form S x6)))] cut (forall X1 ([X:tm X1] not (@ X1 form S X))) (@ X1 form (emptyset X1) x3) (not_EA_not X1 ([x4:tm X1] @ X1 form S x4) p2) ([p3:pf (forall X1 ([x7:tm X1] not (@ X1 form S x7)))] false_e (@ X1 form (emptyset X1) x3) (not_e (@ X1 form S x3) (forall_e X1 ([x4:tm X1] not (@ X1 form S x4)) p3 x3) p4))))) (emptyset_subset X1 S)).
in_notin_set->neq : {X1:tp} {S:tm (X1 arrow form)} {X:tm X1} {Y:tm X1} pf (@ X1 form S X) -> pf (not (@ X1 form S Y)) -> pf (neq X1 X Y) = [X1:tp] [S:tm (X1 arrow form)] [X:tm X1] [Y:tm X1] [p1:pf (@ X1 form S X)] [p2:pf (not (@ X1 form S Y))] cut2 (@ X1 form S X) (not (@ X1 form S Y)) (not (eq X1 X Y)) p1 p2 ([x3:pf (@ X1 form S X)] [x4:pf (not (@ X1 form S Y))] not_i (eq X1 X Y) ([p4:pf (eq X1 X Y)] cut (not (@ X1 form S X)) false (congr X1 X Y ([u:tm X1] not (@ X1 form S u)) p4 p2) ([p6:pf (not (@ X1 form S X))] not_e (@ X1 form S X) p6 p1))).
is_singleton_i : {T:tp} {S:tm (T arrow form)} {Eq:tm (T arrow T arrow form)} ({x3:tm T} {x4:tm T} pf (@ T form S x3) -> pf (@ T form S x4) -> pf (@ T form (@ T (T arrow form) Eq x3) x4)) -> pf (@ (set T) form (@ (eqrel T) (shadowed_0 (set T)) (is_singleton T) Eq) S) = [T:tp] [S:tm (T arrow form)] [Eq:tm (T arrow T arrow form)] [q1:{x5:tm T} {x6:tm T} pf (@ T form S x5) -> pf (@ T form S x6) -> pf (@ T form (@ T (T arrow form) Eq x5) x6)] def2_i (eqrel T) (set T) ([x3:tm (eqrel T)] [x4:tm (set T)] _forall2 T T ([x7:tm T] [x8:tm T] _@ T form x4 x7 imp _@ T form x4 x8 imp _@2 T T form x3 x7 x8)) Eq S (forall2_imp2_i T T ([x3:tm T] [x4:tm T] @ T form S x3) ([x3:tm T] [x4:tm T] @ T form S x4) ([x3:tm T] [x4:tm T] @ T form (@ T (T arrow form) Eq x3) x4) ([x3:tm T] [x4:tm T] [x5:pf (@ T form S x3)] [x6:pf (@ T form S x4)] q1 x3 x4 x5 x6)).
is_singleton_e : {X1:tp} {Eq:tm (eqrel X1)} {S:tm (set X1)} {X2:tm X1} {X3:tm X1} pf (@ (set X1) form (@ (eqrel X1) (shadowed_0 (set X1)) (is_singleton X1) Eq) S) -> pf (@ X1 form S X2) -> pf (@ X1 form S X3) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X2) X3) = [X1:tp] [Eq:tm (eqrel X1)] [S:tm (set X1)] [X2:tm X1] [X3:tm X1] [p1:pf (@ (set X1) form (@ (eqrel X1) (shadowed_0 (set X1)) (is_singleton X1) Eq) S)] [x3:pf (_@ X1 form S X2)] [x4:pf (_@ X1 form S X3)] forall2_imp2_e X1 X1 ([x5:tm X1] [y:tm X1] _@ X1 form S x5) ([x6:tm X1] [y:tm X1] _@ X1 form S y) ([x7:tm X1] [y:tm X1] _@2 X1 X1 form Eq x7 y) (def2_e (set X1) (eqrel X1) ([x5:tm (eqrel X1)] [x6:tm (set X1)] _forall2 X1 X1 ([x8:tm X1] [x9:tm X1] _@ X1 form x6 x8 imp _@ X1 form x6 x9 imp _@2 X1 X1 form x5 x8 x9)) Eq S p1) X2 X3 x3 x4.
agree_over_set : {T1:tp} {T2:tp} tm (rel3 (set T1) (T1 arrow T2) (T1 arrow T2)) = [T1:tp] [T2:tp] _agree_over_set T1 T2.
agree_outside_set : {T1:tp} {T2:tp} tm (rel3 (set T1) (T1 arrow T2) (T1 arrow T2)) = [T1:tp] [T2:tp] _agree_outside_set T1 T2.
agree_over_set_i : {X1:tp} {S:tm (X1 arrow form)} {X2:tp} {M:tm (X1 arrow X2)} {M':tm (X1 arrow X2)} ({x3:tm X1} pf (@ X1 form S x3) -> pf (eq X2 (@ X1 X2 M x3) (@ X1 X2 M' x3))) -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_over_set X1 X2) S) M) M') = [X1:tp] [S:tm (X1 arrow form)] [X2:tp] [M:tm (X1 arrow X2)] [M':tm (X1 arrow X2)] [p2:{x4:tm X1} pf (@ X1 form S x4) -> pf (eq X2 (@ X1 X2 M x4) (@ X1 X2 M' x4))] def3_i (set X1) (X1 arrow X2) (X1 arrow X2) ([x3:tm (set X1)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] _forall X1 ([x6:tm X1] _@ X1 form x3 x6 imp _eq X2 (_@ X1 X2 x4 x6) (_@ X1 X2 x5 x6))) S M M' (forall_imp_i X1 ([x7:tm X1] @ X1 form S x7) ([x3:tm X1] eq X2 (@ X1 X2 M x3) (@ X1 X2 M' x3)) ([x8:tm X1] [p4:pf (@ X1 form S x8)] p2 x8 p4)).
agree_over_set_e : {X1:tp} {X2:tp} {S:tm (set X1)} {M:tm (X1 arrow X2)} {M':tm (X1 arrow X2)} {X:tm X1} pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_over_set X1 X2) S) M) M') -> pf (@ X1 form S X) -> pf (eq X2 (@ X1 X2 M X) (@ X1 X2 M' X)) = [X1:tp] [X2:tp] [S:tm (set X1)] [M:tm (X1 arrow X2)] [M':tm (X1 arrow X2)] [X:tm X1] [p2:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_over_set X1 X2) S) M) M')] [p4:pf (@ X1 form S X)] forall_imp_e X1 ([a:tm X1] _@ X1 form S a) ([a:tm X1] _eq X2 (_@ X1 X2 M a) (_@ X1 X2 M' a)) (def3_e (X1 arrow X2) (X1 arrow X2) (set X1) ([x3:tm (set X1)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] _forall X1 ([x6:tm X1] _@ X1 form x3 x6 imp _eq X2 (_@ X1 X2 x4 x6) (_@ X1 X2 x5 x6))) S M M' p2) X p4.
agree_outside_set_i : {X1:tp} {S:tm (X1 arrow form)} {X2:tp} {R:tm (X1 arrow X2)} {R':tm (X1 arrow X2)} ({x3:tm X1} pf (not (@ X1 form S x3)) -> pf (eq X2 (@ X1 X2 R x3) (@ X1 X2 R' x3))) -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_outside_set X1 X2) S) R) R') = [X1:tp] [S:tm (X1 arrow form)] [X2:tp] [R:tm (X1 arrow X2)] [R':tm (X1 arrow X2)] [p1:{x4:tm X1} pf (not (@ X1 form S x4)) -> pf (eq X2 (@ X1 X2 R x4) (@ X1 X2 R' x4))] def3_i (set X1) (X1 arrow X2) (X1 arrow X2) ([x3:tm (set X1)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] _forall X1 ([x6:tm X1] not (_@ X1 form x3 x6) imp _eq X2 (_@ X1 X2 x4 x6) (_@ X1 X2 x5 x6))) S R R' (forall_imp_i X1 ([x7:tm X1] not (@ X1 form S x7)) ([x3:tm X1] eq X2 (@ X1 X2 R x3) (@ X1 X2 R' x3)) ([x8:tm X1] [p3:pf (not (@ X1 form S x8))] p1 x8 p3)).
agree_outside_set_e : {X1:tp} {X2:tp} {S:tm (set X1)} {R:tm (X1 arrow X2)} {R':tm (X1 arrow X2)} {X:tm X1} pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_outside_set X1 X2) S) R) R') -> pf (not (@ X1 form S X)) -> pf (eq X2 (@ X1 X2 R X) (@ X1 X2 R' X)) = [X1:tp] [X2:tp] [S:tm (set X1)] [R:tm (X1 arrow X2)] [R':tm (X1 arrow X2)] [X:tm X1] [p1:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_outside_set X1 X2) S) R) R')] [p2:pf (not (@ X1 form S X))] forall_imp_e X1 ([a:tm X1] not (_@ X1 form S a)) ([a:tm X1] _eq X2 (_@ X1 X2 R a) (_@ X1 X2 R' a)) (def3_e (X1 arrow X2) (X1 arrow X2) (set X1) ([x3:tm (set X1)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] _forall X1 ([x6:tm X1] not (_@ X1 form x3 x6) imp _eq X2 (_@ X1 X2 x4 x6) (_@ X1 X2 x5 x6))) S R R' p1) X p2.
agree_over->agree_outside : {T:tp} {X1:tp} {S:tm (set T)} {R:tm (T arrow X1)} {R':tm (T arrow X1)} pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) (@ (set T) (set T) (set_compl T) S)) R) R') -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R) R') = [T:tp] [X1:tp] [S:tm (set T)] [R:tm (T arrow X1)] [R':tm (T arrow X1)] [p1:pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) (@ (set T) (set T) (set_compl T) S)) R) R')] agree_outside_set_i T S X1 R R' ([x3:tm T] [p2:pf (not (@ T form S x3))] agree_over_set_e T X1 (@ (set T) (set T) (set_compl T) S) R R' x3 p1 (set_compl_i T S x3 p2)).
upd_agree_outside_set : {T:tp} {X1:tp} {R:tm (T arrow X1)} {X:tm T} {V:tm X1} {R':tm (T arrow X1)} {S:tm (T arrow form)} pf (@ (T arrow X1) form (@ X1 (shadowed_0 (T arrow X1)) (@ T (rel X1 (T arrow X1)) (@ (T arrow X1) (rel3 T X1 (T arrow X1)) (upd T X1) R) X) V) R') -> pf (@ T form S X) -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R) R') = [T:tp] [X1:tp] [R:tm (T arrow X1)] [X:tm T] [V:tm X1] [R':tm (T arrow X1)] [S:tm (T arrow form)] [p2:pf (@ (T arrow X1) form (@ X1 (shadowed_0 (T arrow X1)) (@ T (rel X1 (T arrow X1)) (@ (T arrow X1) (rel3 T X1 (T arrow X1)) (upd T X1) R) X) V) R')] [p1:pf (@ T form S X)] agree_outside_set_i T S X1 R R' ([y:tm T] [p5:pf (not (@ T form S y))] cut (not (eq T y X)) (== X1 (@ T X1 R y) (@ T X1 R' y)) (not_i (eq T y X) ([p6:pf (eq T y X)] not_e (@ T form S y) p5 (congr T y X ([z1:tm T] @ T form S z1) p6 p1))) ([p7:pf (not (eq T y X))] symm X1 (@ T X1 R' y) (@ T X1 R y) (upd_e2 T X1 R X V R' y p2 p7))).
upd_agree_over_set : {T:tp} {S:tm (T arrow form)} {X:tm T} {X1:tp} {R:tm (T arrow X1)} {V:tm X1} {R':tm (T arrow X1)} pf (not (@ T form S X)) -> pf (@ (T arrow X1) form (@ X1 (shadowed_0 (T arrow X1)) (@ T (rel X1 (T arrow X1)) (@ (T arrow X1) (rel3 T X1 (T arrow X1)) (upd T X1) R) X) V) R') -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) R) R') = [T:tp] [S:tm (T arrow form)] [X:tm T] [X1:tp] [R:tm (T arrow X1)] [V:tm X1] [R':tm (T arrow X1)] [p1:pf (not (@ T form S X))] [p2:pf (@ (T arrow X1) form (@ X1 (shadowed_0 (T arrow X1)) (@ T (rel X1 (T arrow X1)) (@ (T arrow X1) (rel3 T X1 (T arrow X1)) (upd T X1) R) X) V) R')] agree_over_set_i T S X1 R R' ([y:tm T] [p5:pf (@ T form S y)] cut (not (eq T y X)) (== X1 (@ T X1 R y) (@ T X1 R' y)) (not_i (eq T y X) ([p6:pf (eq T y X)] not_e (@ T form S y) (congr T y X ([z1:tm T] not (@ T form S z1)) p6 p1) p5)) ([p7:pf (not (eq T y X))] symm X1 (@ T X1 R' y) (@ T X1 R y) (upd_e2 T X1 R X V R' y p2 p7))).
agree_over_subset : {T:tp} {X1:tp} {S:tm (set T)} {R:tm (T arrow X1)} {R':tm (T arrow X1)} {S':tm (shadowed_0 T)} pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) R) R') -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S') S) -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S') R) R') = [T:tp] [X1:tp] [S:tm (set T)] [R:tm (T arrow X1)] [R':tm (T arrow X1)] [S':tm (shadowed_0 T)] [p1:pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) R) R')] [p2:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S') S)] agree_over_set_i T S' X1 R R' ([x3:tm T] [p3:pf (@ T form S' x3)] agree_over_set_e T X1 S R R' x3 p1 (subset_e T S' S x3 p2 p3)).
agree_over_emptyset : {T:tp} {X1:tp} {R:tm (T arrow X1)} {R':tm (T arrow X1)} pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) (emptyset T)) R) R') = [T:tp] [X1:tp] [R:tm (T arrow X1)] [R':tm (T arrow X1)] agree_over_set_i T (emptyset T) X1 R R' ([x3:tm T] [p1:pf (@ T form (emptyset T) x3)] false_e (eq X1 (@ T X1 R x3) (@ T X1 R' x3)) (def1_e T ([x4:tm T] false) x3 p1)).
agree_over_refl : {T:tp} {X1:tp} {S:tm (set T)} {R:tm (T arrow X1)} pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) R) R) = [T:tp] [X1:tp] [S:tm (set T)] [R:tm (T arrow X1)] agree_over_set_i T S X1 R R ([x3:tm T] [p1:pf (@ T form S x3)] refl X1 (@ T X1 R x3)).
agree_over_reflexive : {T1:tp} {T2:tp} {S:tm (set T1)} pf (@ (rel (T1 arrow T2) (T1 arrow T2)) form (reflexive (T1 arrow T2)) (@ (set T1) (rel (T1 arrow T2) (T1 arrow T2)) (agree_over_set T1 T2) S)) = [T1:tp] [T2:tp] [S:tm (set T1)] reflexive_i (T1 arrow T2) (@ (set T1) (rel (T1 arrow T2) (T1 arrow T2)) (agree_over_set T1 T2) S) ([x3:tm (T1 arrow T2)] agree_over_refl T1 T2 S x3).
agree_over_symm : {T:tp} {X1:tp} {S:tm (set T)} {M:tm (T arrow X1)} {M':tm (T arrow X1)} pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) M) M') -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) M') M) = [T:tp] [X1:tp] [S:tm (set T)] [M:tm (T arrow X1)] [M':tm (T arrow X1)] [p1:pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) M) M')] agree_over_set_i T S X1 M' M ([x3:tm T] [p2:pf (@ T form S x3)] symm X1 (@ T X1 M x3) (@ T X1 M' x3) (agree_over_set_e T X1 S M M' x3 p1 p2)).
agree_over_symmetric : {T1:tp} {T2:tp} {S:tm (set T1)} pf (@ (rel (T1 arrow T2) (T1 arrow T2)) form (symmetric (T1 arrow T2)) (@ (set T1) (rel (T1 arrow T2) (T1 arrow T2)) (agree_over_set T1 T2) S)) = [T1:tp] [T2:tp] [S:tm (set T1)] symmetric_i (T1 arrow T2) (@ (set T1) (rel (T1 arrow T2) (T1 arrow T2)) (agree_over_set T1 T2) S) ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:pf (@ (T1 arrow T2) form (@ (T1 arrow T2) (shadowed_0 (T1 arrow T2)) (@ (set T1) (rel (T1 arrow T2) (T1 arrow T2)) (agree_over_set T1 T2) S) x3) x4)] agree_over_symm T1 T2 S x3 x4 x5).
agree_over_trans : {T:tp} {X1:tp} {S:tm (set T)} {R1:tm (T arrow X1)} {R2:tm (T arrow X1)} {R3:tm (T arrow X1)} pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) R1) R2) -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) R2) R3) -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) R1) R3) = [T:tp] [X1:tp] [S:tm (set T)] [R1:tm (T arrow X1)] [R2:tm (T arrow X1)] [R3:tm (T arrow X1)] [p1:pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) R1) R2)] [p2:pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S) R2) R3)] agree_over_set_i T S X1 R1 R3 ([x3:tm T] [p3:pf (@ T form S x3)] trans X1 (@ T X1 R1 x3) (@ T X1 R2 x3) (@ T X1 R3 x3) (agree_over_set_e T X1 S R1 R2 x3 p1 p3) (agree_over_set_e T X1 S R2 R3 x3 p2 p3)).
agree_over_transitive : {T1:tp} {T2:tp} {S:tm (set T1)} pf (@ (rel (T1 arrow T2) (T1 arrow T2)) form (transitive (T1 arrow T2)) (@ (set T1) (rel (T1 arrow T2) (T1 arrow T2)) (agree_over_set T1 T2) S)) = [T1:tp] [T2:tp] [S:tm (set T1)] transitive_i (T1 arrow T2) (@ (set T1) (rel (T1 arrow T2) (T1 arrow T2)) (agree_over_set T1 T2) S) ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:pf (@ (T1 arrow T2) form (@ (T1 arrow T2) (shadowed_0 (T1 arrow T2)) (@ (set T1) (rel (T1 arrow T2) (T1 arrow T2)) (agree_over_set T1 T2) S) x3) x4)] [x7:pf (@ (T1 arrow T2) form (@ (T1 arrow T2) (shadowed_0 (T1 arrow T2)) (@ (set T1) (rel (T1 arrow T2) (T1 arrow T2)) (agree_over_set T1 T2) S) x4) x5)] agree_over_trans T1 T2 S x3 x4 x5 x6 x7).
valideqv_agree_over : {X1:tp} {X2:tp} {S:tm (set X1)} pf (@ (eqrel (X1 arrow X2)) form (valideqv (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_over_set X1 X2) S)) = [X1:tp] [X2:tp] [S:tm (set X1)] valideqv_i (X1 arrow X2) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_over_set X1 X2) S) (agree_over_reflexive X1 X2 S) (agree_over_symmetric X1 X2 S) (agree_over_transitive X1 X2 S).
agree_outside_subset : {T:tp} {X1:tp} {S:tm (set T)} {R:tm (T arrow X1)} {R':tm (T arrow X1)} {S':tm (shadowed_0 T)} pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R) R') -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S) S') -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S') R) R') = [T:tp] [X1:tp] [S:tm (set T)] [R:tm (T arrow X1)] [R':tm (T arrow X1)] [S':tm (shadowed_0 T)] [p1:pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R) R')] [p2:pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S) S')] agree_outside_set_i T S' X1 R R' ([x3:tm T] [p3:pf (not (@ T form S' x3))] cut (not (@ T form S x3)) (eq X1 (@ T X1 R x3) (@ T X1 R' x3)) (not_ei (@ T form S' x3) (@ T form S x3) p3 ([x4:pf (@ T form S x3)] subset_e T S S' x3 p2 x4)) ([p4:pf (not (@ T form S x3))] agree_outside_set_e T X1 S R R' x3 p1 p4)).
agree_outside_symm : {T:tp} {X1:tp} {S:tm (set T)} {M:tm (T arrow X1)} {M':tm (T arrow X1)} pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) M) M') -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) M') M) = [T:tp] [X1:tp] [S:tm (set T)] [M:tm (T arrow X1)] [M':tm (T arrow X1)] [p1:pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) M) M')] agree_outside_set_i T S X1 M' M ([x3:tm T] [p2:pf (not (@ T form S x3))] symm X1 (@ T X1 M x3) (@ T X1 M' x3) (agree_outside_set_e T X1 S M M' x3 p1 p2)).
agree_outside_trans : {T:tp} {X1:tp} {S:tm (set T)} {R1:tm (T arrow X1)} {R2:tm (T arrow X1)} {R3:tm (T arrow X1)} pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R1) R2) -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R2) R3) -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R1) R3) = [T:tp] [X1:tp] [S:tm (set T)] [R1:tm (T arrow X1)] [R2:tm (T arrow X1)] [R3:tm (T arrow X1)] [p1:pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R1) R2)] [p2:pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R2) R3)] agree_outside_set_i T S X1 R1 R3 ([x3:tm T] [p3:pf (not (@ T form S x3))] trans X1 (@ T X1 R1 x3) (@ T X1 R2 x3) (@ T X1 R3 x3) (agree_outside_set_e T X1 S R1 R2 x3 p1 p3) (agree_outside_set_e T X1 S R2 R3 x3 p2 p3)).
agree_outside_disjoint : {T:tp} {X1:tp} {S:tm (set T)} {R:tm (T arrow X1)} {R':tm (T arrow X1)} {S':tm (set T)} pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R) R') -> pf (@ (set T) form (@ (set T) (shadowed_0 (set T)) (set_disjoint T) S) S') -> pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_over_set T X1) S') R) R') = [T:tp] [X1:tp] [S:tm (set T)] [R:tm (T arrow X1)] [R':tm (T arrow X1)] [S':tm (set T)] [p1:pf (@ (T arrow X1) form (@ (T arrow X1) (shadowed_0 (T arrow X1)) (@ (set T) (rel (T arrow X1) (T arrow X1)) (agree_outside_set T X1) S) R) R')] [p2:pf (@ (set T) form (@ (set T) (shadowed_0 (set T)) (set_disjoint T) S) S')] agree_over_set_i T S' X1 R R' ([x3:tm T] [p3:pf (@ T form S' x3)] agree_outside_set_e T X1 S R R' x3 p1 (set_disjoint_e2 T S S' x3 p2 p3)).
agree_over_set_eq : {X1:tp} {X2:tp} {M:tm (X1 arrow X2)} {M':tm (X1 arrow X2)} {Any:tm (set X1)} pf (@ (X1 arrow X2) form (@ (X1 arrow X2) ((X1 arrow X2) arrow form) (lam2 (X1 arrow X2) (X1 arrow X2) form ([m:tm (X1 arrow X2)] [m':tm (X1 arrow X2)] forall X1 ([i1:tm X1] eq X2 (@ X1 X2 m i1) (@ X1 X2 m' i1)))) M) M') -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_over_set X1 X2) Any) M) M') = [X1:tp] [X2:tp] [M:tm (X1 arrow X2)] [M':tm (X1 arrow X2)] [Any:tm (set X1)] [p1:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) ((X1 arrow X2) arrow form) (lam2 (X1 arrow X2) (X1 arrow X2) form ([m:tm (X1 arrow X2)] [m':tm (X1 arrow X2)] forall X1 ([i2:tm X1] eq X2 (@ X1 X2 m i2) (@ X1 X2 m' i2)))) M) M')] def3_i (set X1) (X1 arrow X2) (X1 arrow X2) ([x3:tm (set X1)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] _forall X1 ([x6:tm X1] _@ X1 form x3 x6 imp _eq X2 (_@ X1 X2 x4 x6) (_@ X1 X2 x5 x6))) Any M M' (forall_i X1 ([x3:tm X1] @ X1 form Any x3 imp eq X2 (@ X1 X2 M x3) (@ X1 X2 M' x3)) ([x7:tm X1] imp_i (@ X1 form Any x7) (eq X2 (@ X1 X2 M x7) (@ X1 X2 M' x7)) ([p2:pf (@ X1 form Any x7)] forall_e X1 ([x3:tm X1] eq X2 (@ X1 X2 M x3) (@ X1 X2 M' x3)) (def2_e (X1 arrow X2) (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] forall X1 ([i3:tm X1] eq X2 (@ X1 X2 x3 i3) (@ X1 X2 x4 i3))) M M' p1) x7))).
agree_outside_set_eq : {X1:tp} {X2:tp} {M:tm (X1 arrow X2)} {M':tm (X1 arrow X2)} {Any:tm (set X1)} pf (@ (X1 arrow X2) form (@ (X1 arrow X2) ((X1 arrow X2) arrow form) (lam2 (X1 arrow X2) (X1 arrow X2) form ([m:tm (X1 arrow X2)] [m':tm (X1 arrow X2)] forall X1 ([i1:tm X1] eq X2 (@ X1 X2 m i1) (@ X1 X2 m' i1)))) M) M') -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_outside_set X1 X2) Any) M) M') = [X1:tp] [X2:tp] [M:tm (X1 arrow X2)] [M':tm (X1 arrow X2)] [Any:tm (set X1)] [p1:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) ((X1 arrow X2) arrow form) (lam2 (X1 arrow X2) (X1 arrow X2) form ([m:tm (X1 arrow X2)] [m':tm (X1 arrow X2)] forall X1 ([i2:tm X1] eq X2 (@ X1 X2 m i2) (@ X1 X2 m' i2)))) M) M')] def3_i (set X1) (X1 arrow X2) (X1 arrow X2) ([x3:tm (set X1)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] _forall X1 ([x6:tm X1] not (_@ X1 form x3 x6) imp _eq X2 (_@ X1 X2 x4 x6) (_@ X1 X2 x5 x6))) Any M M' (forall_i X1 ([x3:tm X1] not (@ X1 form Any x3) imp eq X2 (@ X1 X2 M x3) (@ X1 X2 M' x3)) ([x7:tm X1] imp_i (not (@ X1 form Any x7)) (eq X2 (@ X1 X2 M x7) (@ X1 X2 M' x7)) ([p2:pf (not (@ X1 form Any x7))] forall_e X1 ([x3:tm X1] eq X2 (@ X1 X2 M x3) (@ X1 X2 M' x3)) (def2_e (X1 arrow X2) (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] forall X1 ([i3:tm X1] eq X2 (@ X1 X2 x3 i3) (@ X1 X2 x4 i3))) M M' p1) x7))).
agree_over_set_congr : {X1:tp} {X2:tp} {S:tm (set X1)} {M:tm (X1 arrow X2)} {M':tm (X1 arrow X2)} {S':tm (shadowed_0 X1)} pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_over_set X1 X2) S) M) M') -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S) S') -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_over_set X1 X2) S') M) M') = [X1:tp] [X2:tp] [S:tm (set X1)] [M:tm (X1 arrow X2)] [M':tm (X1 arrow X2)] [S':tm (shadowed_0 X1)] [p1:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (set X1) (rel (X1 arrow X2) (X1 arrow X2)) (agree_over_set X1 X2) S) M) M')] [p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S) S')] def3_i (set X1) (X1 arrow X2) (X1 arrow X2) ([x3:tm (set X1)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] _forall X1 ([x6:tm X1] _@ X1 form x3 x6 imp _eq X2 (_@ X1 X2 x4 x6) (_@ X1 X2 x5 x6))) S' M M' (forall_i X1 ([x3:tm X1] @ X1 form S' x3 imp _eq X2 (_@ X1 X2 M x3) (_@ X1 X2 M' x3)) ([X:tm X1] imp_i (@ X1 form S' X) (_eq X2 (_@ X1 X2 M X) (_@ X1 X2 M' X)) ([p3:pf (@ X1 form S' X)] imp_e (_@ X1 form S X) (_eq X2 (_@ X1 X2 M X) (_@ X1 X2 M' X)) (forall_e X1 ([x3:tm X1] _@ X1 form S x3 imp _eq X2 (_@ X1 X2 M x3) (_@ X1 X2 M' x3)) (def3_e (X1 arrow X2) (X1 arrow X2) (set X1) ([x3:tm (set X1)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] _forall X1 ([x7:tm X1] _@ X1 form x3 x7 imp _eq X2 (_@ X1 X2 x4 x7) (_@ X1 X2 x5 x7))) S M M' p1) X) (set_equiv_e2 X1 S S' X p2 p3)))).
per : tp -> tp = [T:tp] rel T T.
validper : {T:tp} tm (per T arrow form) = [T:tp] lam (rel T T) form ([R:tm (rel T T)] @ (rel T T) form (symmetric T) R and @ (rel T T) form (transitive T) R).
per_rel : {T:tp} {U:tp} tm (per T arrow per U arrow per (rel T U)) = [T:tp] [U:tp] lam4 (T arrow T arrow form) (U arrow U arrow form) (T arrow U arrow form) (T arrow U arrow form) form ([eqt:tm (T arrow T arrow form)] [equ:tm (U arrow U arrow form)] [f:tm (T arrow U arrow form)] [g:tm (T arrow U arrow form)] forall4 T T U U ([x3:tm T] [x':tm T] [y:tm U] [y':tm U] (@ T form (@ T (T arrow form) eqt x3) x' imp @ U form (@ U (U arrow form) equ y) y' imp @ U form (@ T (U arrow form) f x3) y equiv @ U form (@ T (U arrow form) g x') y') and (@ U form (@ T (U arrow form) f x3) y imp @ T form (@ T (T arrow form) eqt x3) x3 and @ U form (@ U (U arrow form) equ y) y) and (@ U form (@ T (U arrow form) g x') y' imp @ T form (@ T (T arrow form) eqt x') x' and @ U form (@ U (U arrow form) equ y') y'))).
per_validity : {T:tp} tm (set T arrow eqrel T arrow per T) = [T:tp] lam2 (set T) (eqrel T) (T arrow T arrow form) ([valid:tm (set T)] [eq_T:tm (eqrel T)] lam2 T T form ([x3:tm T] [y:tm T] @ T form valid x3 and @ T form valid y and @ T form (@ T (shadowed_0 T) eq_T x3) y)).
eq_int : tm (per num) = @ (eqrel num) (per num) (@ (set num) (eqrel num arrow per num) (per_validity num) (lam num form ([x3:tm num] isInt x3))) (eq_x num).
set2per : {T:tp} tm (set T arrow per T) = [T:tp] lam (T arrow form) (T arrow T arrow form) ([s:tm (T arrow form)] lam2 T T form ([t1:tm T] [t2:tm T] eq T t1 t2 and @ T form s t1)).
validper_i : {X1:tp} {R:tm (rel X1 X1)} pf (@ (rel X1 X1) form (symmetric X1) R) -> pf (@ (rel X1 X1) form (transitive X1) R) -> pf (@ (per X1) form (validper X1) R) = [X1:tp] [R:tm (rel X1 X1)] [p1:pf (@ (rel X1 X1) form (symmetric X1) R)] [p2:pf (@ (rel X1 X1) form (transitive X1) R)] def1_i (per X1) ([x3:tm (per X1)] @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R (and_i (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) p1 p2).
validper_e1 : {X1:tp} {R:tm (per X1)} pf (@ (per X1) form (validper X1) R) -> pf (@ (rel X1 X1) form (symmetric X1) R) = [X1:tp] [R:tm (per X1)] [p1:pf (@ (per X1) form (validper X1) R)] and_e1 (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) (def1_e (per X1) ([x3:tm (per X1)] @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R p1).
validper_e2 : {X1:tp} {R:tm (per X1)} pf (@ (per X1) form (validper X1) R) -> pf (@ (rel X1 X1) form (transitive X1) R) = [X1:tp] [R:tm (per X1)] [p1:pf (@ (per X1) form (validper X1) R)] and_e2 (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) (def1_e (per X1) ([x3:tm (per X1)] @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R p1).
per_symm : {X1:tp} {R:tm (per X1)} {X:tm X1} {Y:tm X1} pf (@ (per X1) form (validper X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) X) = [X1:tp] [R:tm (per X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (per X1) form (validper X1) R)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] symmetric_e X1 R X Y (validper_e1 X1 R p1) x3.
per_trans : {X1:tp} {R:tm (per X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (@ (per X1) form (validper X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Z) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Z) = [X1:tp] [R:tm (per X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [p1:pf (@ (per X1) form (validper X1) R)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Z)] transitive_e X1 R X Y Z (validper_e2 X1 R p1) x3 x4.
per_refl : {X1:tp} {R:tm (per X1)} {X:tm X1} {Y:tm X1} pf (@ (per X1) form (validper X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) X) = [X1:tp] [R:tm (per X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (per X1) form (validper X1) R)] [p2:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] per_trans X1 R X Y X p1 p2 (per_symm X1 R X Y p1 p2).
per_validity_i : {X1:tp} {Valid:tm (X1 arrow form)} {X:tm X1} {Y:tm X1} {Eq:tm (X1 arrow X1 arrow form)} pf (@ X1 form Valid X) -> pf (@ X1 form Valid Y) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (eqrel X1) (per X1) (@ (set X1) (eqrel X1 arrow per X1) (per_validity X1) Valid) Eq) X) Y) = [X1:tp] [Valid:tm (X1 arrow form)] [X:tm X1] [Y:tm X1] [Eq:tm (X1 arrow X1 arrow form)] [p1:pf (@ X1 form Valid X)] [p2:pf (@ X1 form Valid Y)] [p3:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) Y)] def4_i (set X1) (eqrel X1) X1 X1 ([x3:tm (set X1)] [x4:tm (eqrel X1)] [x5:tm X1] [x6:tm X1] @ X1 form x3 x5 and @ X1 form x3 x6 and @ X1 form (@ X1 (shadowed_0 X1) x4 x5) x6) Valid Eq X Y (and3_i (@ X1 form Valid X) (@ X1 form Valid Y) (@ X1 form (@ X1 (X1 arrow form) Eq X) Y) p1 p2 p3).
per_validity_e1 : {X1:tp} {Valid:tm (set X1)} {Eq:tm (eqrel X1)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (eqrel X1) (per X1) (@ (set X1) (eqrel X1 arrow per X1) (per_validity X1) Valid) Eq) X) Y) -> pf (@ X1 form Valid X) = [X1:tp] [Valid:tm (set X1)] [Eq:tm (eqrel X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (eqrel X1) (per X1) (@ (set X1) (eqrel X1 arrow per X1) (per_validity X1) Valid) Eq) X) Y)] and3_e1 (@ X1 form Valid X) (@ X1 form Valid Y) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (def4_e X1 X1 (eqrel X1) (set X1) ([x3:tm (set X1)] [x4:tm (eqrel X1)] [x5:tm X1] [x6:tm X1] @ X1 form x3 x5 and @ X1 form x3 x6 and @ X1 form (@ X1 (shadowed_0 X1) x4 x5) x6) Valid Eq X Y p1).
per_validity_e3 : {X1:tp} {Valid:tm (set X1)} {Eq:tm (eqrel X1)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (eqrel X1) (per X1) (@ (set X1) (eqrel X1 arrow per X1) (per_validity X1) Valid) Eq) X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) = [X1:tp] [Valid:tm (set X1)] [Eq:tm (eqrel X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (eqrel X1) (per X1) (@ (set X1) (eqrel X1 arrow per X1) (per_validity X1) Valid) Eq) X) Y)] and3_e3 (@ X1 form Valid X) (@ X1 form Valid Y) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (def4_e X1 X1 (eqrel X1) (set X1) ([x3:tm (set X1)] [x4:tm (eqrel X1)] [x5:tm X1] [x6:tm X1] @ X1 form x3 x5 and @ X1 form x3 x6 and @ X1 form (@ X1 (shadowed_0 X1) x4 x5) x6) Valid Eq X Y p1).
per_validity_e : {X1:tp} {Valid:tm (set X1)} {Eq:tm (eqrel X1)} {X:tm X1} {Y:tm X1} {A:tform} pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (eqrel X1) (per X1) (@ (set X1) (eqrel X1 arrow per X1) (per_validity X1) Valid) Eq) X) Y) -> (pf (@ X1 form Valid X) -> pf (@ X1 form Valid Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) -> pf A) -> pf A = [X1:tp] [Valid:tm (set X1)] [Eq:tm (eqrel X1)] [X:tm X1] [Y:tm X1] [A:tform] [p1:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (eqrel X1) (per X1) (@ (set X1) (eqrel X1 arrow per X1) (per_validity X1) Valid) Eq) X) Y)] [x3:pf (@ X1 form Valid X) -> pf (@ X1 form Valid Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) -> pf A] and3_l (@ X1 form Valid X) (@ X1 form Valid Y) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) A (def4_e X1 X1 (eqrel X1) (set X1) ([x4:tm (set X1)] [x5:tm (eqrel X1)] [x6:tm X1] [x7:tm X1] @ X1 form x4 x6 and @ X1 form x4 x7 and @ X1 form (@ X1 (shadowed_0 X1) x5 x6) x7) Valid Eq X Y p1) ([x4:pf (@ X1 form Valid X)] [x5:pf (@ X1 form Valid Y)] [x6:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y)] x3 x4 x5 x6).
per_validity_symmetric : {T:tp} {Eq:tm (rel T T)} {Valid:tm (set T)} pf (@ (rel T T) form (symmetric T) Eq) -> pf (@ (rel T T) form (symmetric T) (@ (eqrel T) (per T) (@ (set T) (eqrel T arrow per T) (per_validity T) Valid) Eq)) = [T:tp] [Eq:tm (rel T T)] [Valid:tm (set T)] [p1:pf (@ (rel T T) form (symmetric T) Eq)] symmetric_i T (@ (eqrel T) (per T) (@ (set T) (eqrel T arrow per T) (per_validity T) Valid) Eq) ([x3:tm T] [y:tm T] [p2:pf (@ T form (@ T (shadowed_0 T) (@ (eqrel T) (per T) (@ (set T) (eqrel T arrow per T) (per_validity T) Valid) Eq) x3) y)] per_validity_e T Valid Eq x3 y (@ T form (@ T (shadowed_0 T) (@ (eqrel T) (per T) (@ (set T) (eqrel T arrow per T) (per_validity T) Valid) Eq) y) x3) p2 ([p3:pf (@ T form Valid x3)] [p4:pf (@ T form Valid y)] [p5:pf (@ T form (@ T (shadowed_0 T) Eq x3) y)] per_validity_i T Valid y x3 Eq p4 p3 (symmetric_e T Eq x3 y p1 p5))).
per_validity_transitive : {T:tp} {Eq:tm (rel T T)} {Valid:tm (set T)} pf (@ (rel T T) form (transitive T) Eq) -> pf (@ (rel T T) form (transitive T) (@ (eqrel T) (per T) (@ (set T) (eqrel T arrow per T) (per_validity T) Valid) Eq)) = [T:tp] [Eq:tm (rel T T)] [Valid:tm (set T)] [p1:pf (@ (rel T T) form (transitive T) Eq)] transitive_i T (@ (eqrel T) (per T) (@ (set T) (eqrel T arrow per T) (per_validity T) Valid) Eq) ([x3:tm T] [y:tm T] [z1:tm T] [p2:pf (@ T form (@ T (shadowed_0 T) (@ (eqrel T) (per T) (@ (set T) (eqrel T arrow per T) (per_validity T) Valid) Eq) x3) y)] [p3:pf (@ T form (@ T (shadowed_0 T) (@ (eqrel T) (per T) (@ (set T) (eqrel T arrow per T) (per_validity T) Valid) Eq) y) z1)] per_validity_e T Valid Eq x3 y (@ T form (@ T (shadowed_0 T) (@ (eqrel T) (per T) (@ (set T) (eqrel T arrow per T) (per_validity T) Valid) Eq) x3) z1) p2 ([p4:pf (@ T form Valid x3)] [p5:pf (@ T form Valid y)] [p6:pf (@ T form (@ T (shadowed_0 T) Eq x3) y)] per_validity_e T Valid Eq y z1 (@ T form (@ T (shadowed_0 T) (@ (eqrel T) (per T) (@ (set T) (eqrel T arrow per T) (per_validity T) Valid) Eq) x3) z1) p3 ([x4:pf (@ T form Valid y)] [p7:pf (@ T form Valid z1)] [p8:pf (@ T form (@ T (shadowed_0 T) Eq y) z1)] per_validity_i T Valid x3 z1 Eq p4 p7 (transitive_e T Eq x3 y z1 p1 p6 p8)))).
eq_int_i : {X:tm num} {Y:tm num} pf (eq num X Y) -> pf (isInt X) -> pf (@ num form (@ num (shadowed_0 num) eq_int X) Y) = [X:tm num] [Y:tm num] [p1:pf (eq num X Y)] [p2:pf (isInt X)] per_validity_i num (lam num form ([x3:tm num] isInt x3)) X Y (lam2 num num form ([x3:tm num] [x4:tm num] eq num x3 x4)) (def1_i num ([x3:tm num] isInt x3) X p2) (def1_i num ([x3:tm num] isInt x3) Y (congr num Y X ([x3:tm num] isInt x3) (symm num X Y p1) p2)) (def2_i num num ([x3:tm num] [x4:tm num] eq num x3 x4) X Y p1).
eq_int_e1 : {X:tm num} {Y:tm num} pf (@ num form (@ num (shadowed_0 num) eq_int X) Y) -> pf (eq num X Y) = [X:tm num] [Y:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) eq_int X) Y)] def2_e num num ([x3:tm num] [x4:tm num] eq num x3 x4) X Y (per_validity_e3 num (lam num form ([x3:tm num] isInt x3)) (eq_x num) X Y p1).
eq_int_e2 : {X:tm num} {Y:tm num} pf (@ num form (@ num (shadowed_0 num) eq_int X) Y) -> pf (isInt X) = [X:tm num] [Y:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) eq_int X) Y)] def1_e num ([x3:tm num] isInt x3) X (per_validity_e1 num (lam num form ([x3:tm num] isInt x3)) (eq_x num) X Y p1).
eq_int_e3 : {X:tm num} {Y:tm num} pf (@ num form (@ num (shadowed_0 num) eq_int X) Y) -> pf (isInt Y) = [X:tm num] [Y:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) eq_int X) Y)] congr num Y X ([u:tm num] isInt u) (symm num X Y (eq_int_e1 X Y p2)) (eq_int_e2 X Y p2).
eq_int_refl : {X:tnum} pf (isInt X) -> pf (@ num form (@ num (shadowed_0 num) eq_int X) X) = [X:tnum] [x3:pf (isInt X)] eq_int_i X X (refl num X) x3.
eq_nat : tm (per num) = @ (eqrel num) (per num) (@ (set num) (eqrel num arrow per num) (per_validity num) (lam num form ([x3:tm num] isNat x3))) (eq_x num).
eq_nat_i : {X:tm num} {Y:tm num} pf (eq num X Y) -> pf (isNat X) -> pf (@ num form (@ num (shadowed_0 num) eq_nat X) Y) = [X:tm num] [Y:tm num] [p1:pf (eq num X Y)] [p2:pf (isNat X)] per_validity_i num (lam num form ([x3:tm num] isNat x3)) X Y (lam2 num num form ([x3:tm num] [x4:tm num] eq num x3 x4)) (def1_i num ([x3:tm num] isNat x3) X p2) (def1_i num ([x3:tm num] isNat x3) Y (congr num Y X ([x3:tm num] isNat x3) (symm num X Y p1) p2)) (def2_i num num ([x3:tm num] [x4:tm num] eq num x3 x4) X Y p1).
eq_nat_e1 : {X:tm num} {Y:tm num} pf (@ num form (@ num (shadowed_0 num) eq_nat X) Y) -> pf (eq num X Y) = [X:tm num] [Y:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) eq_nat X) Y)] def2_e num num ([x3:tm num] [x4:tm num] eq num x3 x4) X Y (per_validity_e3 num (lam num form ([x3:tm num] isNat x3)) (eq_x num) X Y p1).
eq_nat_e2 : {X:tm num} {Y:tm num} pf (@ num form (@ num (shadowed_0 num) eq_nat X) Y) -> pf (isNat X) = [X:tm num] [Y:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) eq_nat X) Y)] def1_e num ([x3:tm num] isNat x3) X (per_validity_e1 num (lam num form ([x3:tm num] isNat x3)) (eq_x num) X Y p1).
eq_arith_validper : pf (@ (per num) form (validper num) eq_arith) = validper_i num eq_arith eq_arith_symmetric eq_arith_transitive.
eq_pair_validper : {X1:tp} {EqA:tm (per X1)} {X2:tp} {EqB:tm (per X2)} pf (@ (per X1) form (validper X1) EqA) -> pf (@ (per X2) form (validper X2) EqB) -> pf (@ (per (pair X1 X2)) form (validper (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) EqA) EqB)) = [X1:tp] [EqA:tm (per X1)] [X2:tp] [EqB:tm (per X2)] [p1:pf (@ (per X1) form (validper X1) EqA)] [p2:pf (@ (per X2) form (validper X2) EqB)] validper_i (pair X1 X2) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) EqA) EqB) (eq_pair_symmetric X1 EqA X2 EqB (validper_e1 X1 EqA p1) (validper_e1 X2 EqB p2)) (eq_pair_transitive X1 EqA X2 EqB (validper_e2 X1 EqA p1) (validper_e2 X2 EqB p2)).
eq_int_symmetric : pf (@ (rel num num) form (symmetric num) eq_int) = per_validity_symmetric num (eq_x num) (lam num form ([x3:tm num] isInt x3)) (eq_x_symmetric num).
eq_int_transitive : pf (@ (rel num num) form (transitive num) eq_int) = per_validity_transitive num (eq_x num) (lam num form ([x3:tm num] isInt x3)) (eq_x_transitive num).
eq_int_validper : pf (@ (per num) form (validper num) eq_int) = validper_i num eq_int eq_int_symmetric eq_int_transitive.
eq_nat_symmetric : pf (@ (rel num num) form (symmetric num) eq_nat) = per_validity_symmetric num (eq_x num) (lam num form ([x3:tm num] isNat x3)) (eq_x_symmetric num).
eq_nat_transitive : pf (@ (rel num num) form (transitive num) eq_nat) = per_validity_transitive num (eq_x num) (lam num form ([x3:tm num] isNat x3)) (eq_x_transitive num).
eq_nat_validper : pf (@ (per num) form (validper num) eq_nat) = validper_i num eq_nat eq_nat_symmetric eq_nat_transitive.
per_rel_i : {X1:tp} {X2:tp} {Eqt:tm (X1 arrow X1 arrow form)} {Equ:tm (X2 arrow X2 arrow form)} {F:tm (X1 arrow X2 arrow form)} {G:tm (X1 arrow X2 arrow form)} ({x3:tm X1} {x':tm X1} {y:tm X2} {y':tm X2} pf (@ X1 form (@ X1 (X1 arrow form) Eqt x3) x') -> pf (@ X2 form (@ X2 (X2 arrow form) Equ y) y') -> pf (@ X2 form (@ X1 (X2 arrow form) F x3) y equiv @ X2 form (@ X1 (X2 arrow form) G x') y')) -> ({x4:tm X1} {y:tm X2} pf (@ X2 form (@ X1 (X2 arrow form) F x4) y) -> pf (@ X1 form (@ X1 (X1 arrow form) Eqt x4) x4 and @ X2 form (@ X2 (X2 arrow form) Equ y) y)) -> ({x':tm X1} {y':tm X2} pf (@ X2 form (@ X1 (X2 arrow form) G x') y') -> pf (@ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y')) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) F) G) = [X1:tp] [X2:tp] [Eqt:tm (X1 arrow X1 arrow form)] [Equ:tm (X2 arrow X2 arrow form)] [F:tm (X1 arrow X2 arrow form)] [G:tm (X1 arrow X2 arrow form)] [p1:{x5:tm X1} {x':tm X1} {y:tm X2} {y':tm X2} pf (@ X1 form (@ X1 (X1 arrow form) Eqt x5) x') -> pf (@ X2 form (@ X2 (X2 arrow form) Equ y) y') -> pf (@ X2 form (@ X1 (X2 arrow form) F x5) y equiv @ X2 form (@ X1 (X2 arrow form) G x') y')] [p2:{x6:tm X1} {y:tm X2} pf (@ X2 form (@ X1 (X2 arrow form) F x6) y) -> pf (@ X1 form (@ X1 (X1 arrow form) Eqt x6) x6 and @ X2 form (@ X2 (X2 arrow form) Equ y) y)] [p3:{x':tm X1} {y':tm X2} pf (@ X2 form (@ X1 (X2 arrow form) G x') y') -> pf (@ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y')] def4_i (per X1) (per X2) (rel X1 X2) (rel X1 X2) ([x3:tm (per X1)] [x4:tm (per X2)] [x5:tm (rel X1 X2)] [x6:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x7:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] (@ X1 form (@ X1 (X1 arrow form) x3 x7) x' imp @ X2 form (@ X2 (X2 arrow form) x4 y) y' imp @ X2 form (@ X1 (X2 arrow form) x5 x7) y equiv @ X2 form (@ X1 (X2 arrow form) x6 x') y') and (@ X2 form (@ X1 (X2 arrow form) x5 x7) y imp @ X1 form (@ X1 (X1 arrow form) x3 x7) x7 and @ X2 form (@ X2 (X2 arrow form) x4 y) y) and (@ X2 form (@ X1 (X2 arrow form) x6 x') y' imp @ X1 form (@ X1 (X1 arrow form) x3 x') x' and @ X2 form (@ X2 (X2 arrow form) x4 y') y'))) Eqt Equ F G (forall4_i X1 X1 X2 X2 ([x3:tm X1] [x4:tm X1] [x5:tm X2] [x6:tm X2] (@ X1 form (@ X1 (X1 arrow form) Eqt x3) x4 imp @ X2 form (@ X2 (X2 arrow form) Equ x5) x6 imp @ X2 form (@ X1 (X2 arrow form) F x3) x5 equiv @ X2 form (@ X1 (X2 arrow form) G x4) x6) and (@ X2 form (@ X1 (X2 arrow form) F x3) x5 imp @ X1 form (@ X1 (X1 arrow form) Eqt x3) x3 and @ X2 form (@ X2 (X2 arrow form) Equ x5) x5) and (@ X2 form (@ X1 (X2 arrow form) G x4) x6 imp @ X1 form (@ X1 (X1 arrow form) Eqt x4) x4 and @ X2 form (@ X2 (X2 arrow form) Equ x6) x6)) ([x8:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] and3_i (@ X1 form (@ X1 (X1 arrow form) Eqt x8) x' imp @ X2 form (@ X2 (X2 arrow form) Equ y) y' imp @ X2 form (@ X1 (X2 arrow form) F x8) y equiv @ X2 form (@ X1 (X2 arrow form) G x') y') (@ X2 form (@ X1 (X2 arrow form) F x8) y imp @ X1 form (@ X1 (X1 arrow form) Eqt x8) x8 and @ X2 form (@ X2 (X2 arrow form) Equ y) y) (@ X2 form (@ X1 (X2 arrow form) G x') y' imp @ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') (imp2_i (@ X1 form (@ X1 (X1 arrow form) Eqt x8) x') (@ X2 form (@ X2 (X2 arrow form) Equ y) y') (@ X2 form (@ X1 (X2 arrow form) F x8) y equiv @ X2 form (@ X1 (X2 arrow form) G x') y') ([q1:pf (@ X1 form (@ X1 (X1 arrow form) Eqt x8) x')] [q2:pf (@ X2 form (@ X2 (X2 arrow form) Equ y) y')] p1 x8 x' y y' q1 q2)) (imp_i (@ X2 form (@ X1 (X2 arrow form) F x8) y) (@ X1 form (@ X1 (X1 arrow form) Eqt x8) x8 and @ X2 form (@ X2 (X2 arrow form) Equ y) y) ([q3:pf (@ X2 form (@ X1 (X2 arrow form) F x8) y)] p2 x8 y q3)) (imp_i (@ X2 form (@ X1 (X2 arrow form) G x') y') (@ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') ([q4:pf (@ X2 form (@ X1 (X2 arrow form) G x') y')] p3 x' y' q4)))).
per_rel_e1 : {X1:tp} {X2:tp} {Eqt:tm (per X1)} {Equ:tm (per X2)} {F:tm (rel X1 X2)} {G:tm (rel X1 X2)} {X:tm X1} {X':tm X1} {Y:tm X2} {Y':tm X2} pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) F) G) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eqt X) X') -> pf (@ X2 form (@ X2 (shadowed_0 X2) Equ Y) Y') -> pf (@ X2 form (@ X1 (shadowed_0 X2) F X) Y equiv @ X2 form (@ X1 (shadowed_0 X2) G X') Y') = [X1:tp] [X2:tp] [Eqt:tm (per X1)] [Equ:tm (per X2)] [F:tm (rel X1 X2)] [G:tm (rel X1 X2)] [X:tm X1] [X':tm X1] [Y:tm X2] [Y':tm X2] [p1:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) F) G)] [p2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eqt X) X')] [p3:pf (@ X2 form (@ X2 (shadowed_0 X2) Equ Y) Y')] imp2_e (@ X1 form (@ X1 (X1 arrow form) Eqt X) X') (@ X2 form (@ X2 (X2 arrow form) Equ Y) Y') (@ X2 form (@ X1 (X2 arrow form) F X) Y equiv @ X2 form (@ X1 (X2 arrow form) G X') Y') (and_e1 (@ X1 form (@ X1 (X1 arrow form) Eqt X) X' imp @ X2 form (@ X2 (X2 arrow form) Equ Y) Y' imp @ X2 form (@ X1 (X2 arrow form) F X) Y equiv @ X2 form (@ X1 (X2 arrow form) G X') Y') ((@ X2 form (@ X1 (X2 arrow form) F X) Y imp @ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y) and (@ X2 form (@ X1 (X2 arrow form) G X') Y' imp @ X1 form (@ X1 (X1 arrow form) Eqt X') X' and @ X2 form (@ X2 (X2 arrow form) Equ Y') Y')) (forall4_e X1 X1 X2 X2 ([x3:tm X1] [x4:tm X1] [x5:tm X2] [x6:tm X2] (@ X1 form (@ X1 (X1 arrow form) Eqt x3) x4 imp @ X2 form (@ X2 (X2 arrow form) Equ x5) x6 imp @ X2 form (@ X1 (X2 arrow form) F x3) x5 equiv @ X2 form (@ X1 (X2 arrow form) G x4) x6) and (@ X2 form (@ X1 (X2 arrow form) F x3) x5 imp @ X1 form (@ X1 (X1 arrow form) Eqt x3) x3 and @ X2 form (@ X2 (X2 arrow form) Equ x5) x5) and (@ X2 form (@ X1 (X2 arrow form) G x4) x6 imp @ X1 form (@ X1 (X1 arrow form) Eqt x4) x4 and @ X2 form (@ X2 (X2 arrow form) Equ x6) x6)) (def4_e (rel X1 X2) (rel X1 X2) (per X2) (per X1) ([x3:tm (per X1)] [x4:tm (per X2)] [x5:tm (rel X1 X2)] [x6:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x7:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] (@ X1 form (@ X1 (X1 arrow form) x3 x7) x' imp @ X2 form (@ X2 (X2 arrow form) x4 y) y' imp @ X2 form (@ X1 (X2 arrow form) x5 x7) y equiv @ X2 form (@ X1 (X2 arrow form) x6 x') y') and (@ X2 form (@ X1 (X2 arrow form) x5 x7) y imp @ X1 form (@ X1 (X1 arrow form) x3 x7) x7 and @ X2 form (@ X2 (X2 arrow form) x4 y) y) and (@ X2 form (@ X1 (X2 arrow form) x6 x') y' imp @ X1 form (@ X1 (X1 arrow form) x3 x') x' and @ X2 form (@ X2 (X2 arrow form) x4 y') y'))) Eqt Equ F G p1) X X' Y Y')) p2 p3.
per_rel_e2 : {X1:tp} {X2:tp} {Eqt:tm (per X1)} {Equ:tm (per X2)} {F:tm (rel X1 X2)} {G:tm (rel X1 X2)} {X:tm X1} {Y:tm X2} pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) F) G) -> pf (@ X2 form (@ X1 (shadowed_0 X2) F X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eqt X) X and @ X2 form (@ X2 (shadowed_0 X2) Equ Y) Y) = [X1:tp] [X2:tp] [Eqt:tm (per X1)] [Equ:tm (per X2)] [F:tm (rel X1 X2)] [G:tm (rel X1 X2)] [X:tm X1] [Y:tm X2] [p1:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) F) G)] [p2:pf (@ X2 form (@ X1 (shadowed_0 X2) F X) Y)] imp_e (@ X2 form (@ X1 (X2 arrow form) F X) Y) (@ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y) (and_e1 (@ X2 form (@ X1 (X2 arrow form) F X) Y imp @ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y) (@ X2 form (@ X1 (X2 arrow form) G X) Y imp @ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eqt X) X imp @ X2 form (@ X2 (X2 arrow form) Equ Y) Y imp @ X2 form (@ X1 (X2 arrow form) F X) Y equiv @ X2 form (@ X1 (X2 arrow form) G X) Y) ((@ X2 form (@ X1 (X2 arrow form) F X) Y imp @ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y) and (@ X2 form (@ X1 (X2 arrow form) G X) Y imp @ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y)) (forall4_e X1 X1 X2 X2 ([x3:tm X1] [x4:tm X1] [x5:tm X2] [x6:tm X2] (@ X1 form (@ X1 (X1 arrow form) Eqt x3) x4 imp @ X2 form (@ X2 (X2 arrow form) Equ x5) x6 imp @ X2 form (@ X1 (X2 arrow form) F x3) x5 equiv @ X2 form (@ X1 (X2 arrow form) G x4) x6) and (@ X2 form (@ X1 (X2 arrow form) F x3) x5 imp @ X1 form (@ X1 (X1 arrow form) Eqt x3) x3 and @ X2 form (@ X2 (X2 arrow form) Equ x5) x5) and (@ X2 form (@ X1 (X2 arrow form) G x4) x6 imp @ X1 form (@ X1 (X1 arrow form) Eqt x4) x4 and @ X2 form (@ X2 (X2 arrow form) Equ x6) x6)) (def4_e (rel X1 X2) (rel X1 X2) (per X2) (per X1) ([x3:tm (per X1)] [x4:tm (per X2)] [x5:tm (rel X1 X2)] [x6:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x7:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] (@ X1 form (@ X1 (X1 arrow form) x3 x7) x' imp @ X2 form (@ X2 (X2 arrow form) x4 y) y' imp @ X2 form (@ X1 (X2 arrow form) x5 x7) y equiv @ X2 form (@ X1 (X2 arrow form) x6 x') y') and (@ X2 form (@ X1 (X2 arrow form) x5 x7) y imp @ X1 form (@ X1 (X1 arrow form) x3 x7) x7 and @ X2 form (@ X2 (X2 arrow form) x4 y) y) and (@ X2 form (@ X1 (X2 arrow form) x6 x') y' imp @ X1 form (@ X1 (X1 arrow form) x3 x') x' and @ X2 form (@ X2 (X2 arrow form) x4 y') y'))) Eqt Equ F G p1) X X Y Y))) p2.
per_rel_e3 : {X1:tp} {X2:tp} {Eqt:tm (per X1)} {Equ:tm (per X2)} {F:tm (rel X1 X2)} {G:tm (rel X1 X2)} {X:tm X1} {Y:tm X2} pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) F) G) -> pf (@ X2 form (@ X1 (shadowed_0 X2) G X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eqt X) X and @ X2 form (@ X2 (shadowed_0 X2) Equ Y) Y) = [X1:tp] [X2:tp] [Eqt:tm (per X1)] [Equ:tm (per X2)] [F:tm (rel X1 X2)] [G:tm (rel X1 X2)] [X:tm X1] [Y:tm X2] [p1:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) F) G)] [p2:pf (@ X2 form (@ X1 (shadowed_0 X2) G X) Y)] imp_e (@ X2 form (@ X1 (X2 arrow form) G X) Y) (@ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y) (and_e2 (@ X2 form (@ X1 (X2 arrow form) F X) Y imp @ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y) (@ X2 form (@ X1 (X2 arrow form) G X) Y imp @ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eqt X) X imp @ X2 form (@ X2 (X2 arrow form) Equ Y) Y imp @ X2 form (@ X1 (X2 arrow form) F X) Y equiv @ X2 form (@ X1 (X2 arrow form) G X) Y) ((@ X2 form (@ X1 (X2 arrow form) F X) Y imp @ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y) and (@ X2 form (@ X1 (X2 arrow form) G X) Y imp @ X1 form (@ X1 (X1 arrow form) Eqt X) X and @ X2 form (@ X2 (X2 arrow form) Equ Y) Y)) (forall4_e X1 X1 X2 X2 ([x3:tm X1] [x4:tm X1] [x5:tm X2] [x6:tm X2] (@ X1 form (@ X1 (X1 arrow form) Eqt x3) x4 imp @ X2 form (@ X2 (X2 arrow form) Equ x5) x6 imp @ X2 form (@ X1 (X2 arrow form) F x3) x5 equiv @ X2 form (@ X1 (X2 arrow form) G x4) x6) and (@ X2 form (@ X1 (X2 arrow form) F x3) x5 imp @ X1 form (@ X1 (X1 arrow form) Eqt x3) x3 and @ X2 form (@ X2 (X2 arrow form) Equ x5) x5) and (@ X2 form (@ X1 (X2 arrow form) G x4) x6 imp @ X1 form (@ X1 (X1 arrow form) Eqt x4) x4 and @ X2 form (@ X2 (X2 arrow form) Equ x6) x6)) (def4_e (rel X1 X2) (rel X1 X2) (per X2) (per X1) ([x3:tm (per X1)] [x4:tm (per X2)] [x5:tm (rel X1 X2)] [x6:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x7:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] (@ X1 form (@ X1 (X1 arrow form) x3 x7) x' imp @ X2 form (@ X2 (X2 arrow form) x4 y) y' imp @ X2 form (@ X1 (X2 arrow form) x5 x7) y equiv @ X2 form (@ X1 (X2 arrow form) x6 x') y') and (@ X2 form (@ X1 (X2 arrow form) x5 x7) y imp @ X1 form (@ X1 (X1 arrow form) x3 x7) x7 and @ X2 form (@ X2 (X2 arrow form) x4 y) y) and (@ X2 form (@ X1 (X2 arrow form) x6 x') y' imp @ X1 form (@ X1 (X1 arrow form) x3 x') x' and @ X2 form (@ X2 (X2 arrow form) x4 y') y'))) Eqt Equ F G p1) X X Y Y))) p2.
per_rel_symm : {X1:tp} {Eqt:tm (per X1)} {X2:tp} {Equ:tm (per X2)} pf (@ (per X1) form (validper X1) Eqt) -> pf (@ (per X2) form (validper X2) Equ) -> pf (@ (rel (rel X1 X2) (rel X1 X2)) form (symmetric (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ)) = [X1:tp] [Eqt:tm (per X1)] [X2:tp] [Equ:tm (per X2)] [p1:pf (@ (per X1) form (validper X1) Eqt)] [p2:pf (@ (per X2) form (validper X2) Equ)] def1_i (rel (rel X1 X2) (rel X1 X2)) ([x3:tm (rel (rel X1 X2) (rel X1 X2))] forall2 (rel X1 X2) (rel X1 X2) ([x4:tm (rel X1 X2)] [y:tm (rel X1 X2)] @ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) x3 x4) y imp @ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) x3 y) x4)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) (forall2_i (rel X1 X2) (rel X1 X2) ([x3:tm (rel X1 X2)] [x4:tm (rel X1 X2)] @ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) x3) x4 imp @ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) (@ (per X2) (rel X1 X2 arrow rel X1 X2 arrow form) (@ (per X1) (per X2 arrow rel X1 X2 arrow rel X1 X2 arrow form) (lam4 (per X1) (per X2) (rel X1 X2) (rel X1 X2) form ([x5:tm (per X1)] [x6:tm (per X2)] [x7:tm (rel X1 X2)] [x8:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x9:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] (@ X1 form (@ X1 (X1 arrow form) x5 x9) x' imp @ X2 form (@ X2 (X2 arrow form) x6 y) y' imp @ X2 form (@ X1 (X2 arrow form) x7 x9) y equiv @ X2 form (@ X1 (X2 arrow form) x8 x') y') and (@ X2 form (@ X1 (X2 arrow form) x7 x9) y imp @ X1 form (@ X1 (X1 arrow form) x5 x9) x9 and @ X2 form (@ X2 (X2 arrow form) x6 y) y) and (@ X2 form (@ X1 (X2 arrow form) x8 x') y' imp @ X1 form (@ X1 (X1 arrow form) x5 x') x' and @ X2 form (@ X2 (X2 arrow form) x6 y') y')))) Eqt) Equ) x4) x3) ([f:tm (rel X1 X2)] [g:tm (rel X1 X2)] imp_i (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) f) g) (@ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) (@ (per X2) (rel X1 X2 arrow rel X1 X2 arrow form) (@ (per X1) (per X2 arrow rel X1 X2 arrow rel X1 X2 arrow form) (lam4 (per X1) (per X2) (rel X1 X2) (rel X1 X2) form ([x3:tm (per X1)] [x4:tm (per X2)] [x5:tm (rel X1 X2)] [x6:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x10:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] (@ X1 form (@ X1 (X1 arrow form) x3 x10) x' imp @ X2 form (@ X2 (X2 arrow form) x4 y) y' imp @ X2 form (@ X1 (X2 arrow form) x5 x10) y equiv @ X2 form (@ X1 (X2 arrow form) x6 x') y') and (@ X2 form (@ X1 (X2 arrow form) x5 x10) y imp @ X1 form (@ X1 (X1 arrow form) x3 x10) x10 and @ X2 form (@ X2 (X2 arrow form) x4 y) y) and (@ X2 form (@ X1 (X2 arrow form) x6 x') y' imp @ X1 form (@ X1 (X1 arrow form) x3 x') x' and @ X2 form (@ X2 (X2 arrow form) x4 y') y')))) Eqt) Equ) g) f) ([p3:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) f) g)] def4_i (per X1) (per X2) (rel X1 X2) (rel X1 X2) ([x3:tm (per X1)] [x4:tm (per X2)] [x5:tm (rel X1 X2)] [x6:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x11:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] (@ X1 form (@ X1 (X1 arrow form) x3 x11) x' imp @ X2 form (@ X2 (X2 arrow form) x4 y) y' imp @ X2 form (@ X1 (X2 arrow form) x5 x11) y equiv @ X2 form (@ X1 (X2 arrow form) x6 x') y') and (@ X2 form (@ X1 (X2 arrow form) x5 x11) y imp @ X1 form (@ X1 (X1 arrow form) x3 x11) x11 and @ X2 form (@ X2 (X2 arrow form) x4 y) y) and (@ X2 form (@ X1 (X2 arrow form) x6 x') y' imp @ X1 form (@ X1 (X1 arrow form) x3 x') x' and @ X2 form (@ X2 (X2 arrow form) x4 y') y'))) Eqt Equ g f (forall4_i X1 X1 X2 X2 ([x3:tm X1] [x4:tm X1] [x5:tm X2] [x6:tm X2] (@ X1 form (@ X1 (shadowed_0 X1) Eqt x3) x4 imp @ X2 form (@ X2 (shadowed_0 X2) Equ x5) x6 imp @ X2 form (@ X1 (X2 arrow form) g x3) x5 equiv @ X2 form (@ X1 (X2 arrow form) f x4) x6) and (@ X2 form (@ X1 (shadowed_0 X2) g x3) x5 imp @ X1 form (@ X1 (X1 arrow form) Eqt x3) x3 and @ X2 form (@ X2 (X2 arrow form) Equ x5) x5) and (@ X2 form (@ X1 (shadowed_0 X2) f x4) x6 imp @ X1 form (@ X1 (X1 arrow form) Eqt x4) x4 and @ X2 form (@ X2 (X2 arrow form) Equ x6) x6)) ([x12:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] cut ((@ X1 form (@ X1 (X1 arrow form) Eqt x') x12 imp @ X2 form (@ X2 (X2 arrow form) Equ y') y imp @ X2 form (@ X1 (X2 arrow form) f x') y' equiv @ X2 form (@ X1 (X2 arrow form) g x12) y) and (@ X2 form (@ X1 (X2 arrow form) f x') y' imp @ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') and (@ X2 form (@ X1 (X2 arrow form) g x12) y imp @ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y)) ((@ X1 form (@ X1 (shadowed_0 X1) Eqt x12) x' imp @ X2 form (@ X2 (shadowed_0 X2) Equ y) y' imp @ X2 form (@ X1 (X2 arrow form) g x12) y equiv @ X2 form (@ X1 (X2 arrow form) f x') y') and (@ X2 form (@ X1 (shadowed_0 X2) g x12) y imp @ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y) and (@ X2 form (@ X1 (shadowed_0 X2) f x') y' imp @ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y')) (forall4_e X1 X1 X2 X2 ([x3:tm X1] [x4:tm X1] [x5:tm X2] [x6:tm X2] (@ X1 form (@ X1 (X1 arrow form) Eqt x3) x4 imp @ X2 form (@ X2 (X2 arrow form) Equ x5) x6 imp @ X2 form (@ X1 (X2 arrow form) f x3) x5 equiv @ X2 form (@ X1 (X2 arrow form) g x4) x6) and (@ X2 form (@ X1 (X2 arrow form) f x3) x5 imp @ X1 form (@ X1 (X1 arrow form) Eqt x3) x3 and @ X2 form (@ X2 (X2 arrow form) Equ x5) x5) and (@ X2 form (@ X1 (X2 arrow form) g x4) x6 imp @ X1 form (@ X1 (X1 arrow form) Eqt x4) x4 and @ X2 form (@ X2 (X2 arrow form) Equ x6) x6)) (def4_e (rel X1 X2) (rel X1 X2) (per X2) (per X1) ([x3:tm (per X1)] [x4:tm (per X2)] [x5:tm (rel X1 X2)] [x6:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x13:tm X1] [x'1:tm X1] [y1:tm X2] [y'1:tm X2] (@ X1 form (@ X1 (X1 arrow form) x3 x13) x'1 imp @ X2 form (@ X2 (X2 arrow form) x4 y1) y'1 imp @ X2 form (@ X1 (X2 arrow form) x5 x13) y1 equiv @ X2 form (@ X1 (X2 arrow form) x6 x'1) y'1) and (@ X2 form (@ X1 (X2 arrow form) x5 x13) y1 imp @ X1 form (@ X1 (X1 arrow form) x3 x13) x13 and @ X2 form (@ X2 (X2 arrow form) x4 y1) y1) and (@ X2 form (@ X1 (X2 arrow form) x6 x'1) y'1 imp @ X1 form (@ X1 (X1 arrow form) x3 x'1) x'1 and @ X2 form (@ X2 (X2 arrow form) x4 y'1) y'1))) Eqt Equ f g p3) x' x12 y' y) ([q5:pf ((@ X1 form (@ X1 (X1 arrow form) Eqt x') x12 imp @ X2 form (@ X2 (X2 arrow form) Equ y') y imp @ X2 form (@ X1 (X2 arrow form) f x') y' equiv @ X2 form (@ X1 (X2 arrow form) g x12) y) and (@ X2 form (@ X1 (X2 arrow form) f x') y' imp @ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') and (@ X2 form (@ X1 (X2 arrow form) g x12) y imp @ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y))] and3_i (@ X1 form (@ X1 (shadowed_0 X1) Eqt x12) x' imp @ X2 form (@ X2 (shadowed_0 X2) Equ y) y' imp @ X2 form (@ X1 (X2 arrow form) g x12) y equiv @ X2 form (@ X1 (X2 arrow form) f x') y') (@ X2 form (@ X1 (shadowed_0 X2) g x12) y imp @ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y) (@ X2 form (@ X1 (shadowed_0 X2) f x') y' imp @ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') (imp2_i (@ X1 form (@ X1 (shadowed_0 X1) Eqt x12) x') (@ X2 form (@ X2 (shadowed_0 X2) Equ y) y') (@ X2 form (@ X1 (X2 arrow form) g x12) y equiv @ X2 form (@ X1 (X2 arrow form) f x') y') ([q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eqt x12) x')] [q3:pf (@ X2 form (@ X2 (shadowed_0 X2) Equ y) y')] cut (@ X1 form (@ X1 (shadowed_0 X1) Eqt x') x12) (@ X2 form (@ X1 (X2 arrow form) g x12) y equiv @ X2 form (@ X1 (X2 arrow form) f x') y') (per_symm X1 Eqt x12 x' p1 q2) ([q52:pf (@ X1 form (@ X1 (shadowed_0 X1) Eqt x') x12)] cut (@ X2 form (@ X2 (shadowed_0 X2) Equ y') y) (@ X2 form (@ X1 (X2 arrow form) g x12) y equiv @ X2 form (@ X1 (X2 arrow form) f x') y') (per_symm X2 Equ y y' p2 q3) ([q53:pf (@ X2 form (@ X2 (shadowed_0 X2) Equ y') y)] equiv_symm (@ X2 form (@ X1 (X2 arrow form) f x') y') (@ X2 form (@ X1 (X2 arrow form) g x12) y) (imp2_e (@ X1 form (@ X1 (X1 arrow form) Eqt x') x12) (@ X2 form (@ X2 (X2 arrow form) Equ y') y) (@ X2 form (@ X1 (X2 arrow form) f x') y' equiv @ X2 form (@ X1 (X2 arrow form) g x12) y) (and_e1 (@ X1 form (@ X1 (X1 arrow form) Eqt x') x12 imp @ X2 form (@ X2 (X2 arrow form) Equ y') y imp @ X2 form (@ X1 (X2 arrow form) f x') y' equiv @ X2 form (@ X1 (X2 arrow form) g x12) y) ((@ X2 form (@ X1 (X2 arrow form) f x') y' imp @ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') and (@ X2 form (@ X1 (X2 arrow form) g x12) y imp @ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y)) q5) q52 q53))))) (imp_i (@ X2 form (@ X1 (shadowed_0 X2) g x12) y) (@ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y) ([q4:pf (@ X2 form (@ X1 (shadowed_0 X2) g x12) y)] imp_e (@ X2 form (@ X1 (X2 arrow form) g x12) y) (@ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y) (and_e2 (@ X2 form (@ X1 (X2 arrow form) f x') y' imp @ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') (@ X2 form (@ X1 (X2 arrow form) g x12) y imp @ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eqt x') x12 imp @ X2 form (@ X2 (X2 arrow form) Equ y') y imp @ X2 form (@ X1 (X2 arrow form) f x') y' equiv @ X2 form (@ X1 (X2 arrow form) g x12) y) ((@ X2 form (@ X1 (X2 arrow form) f x') y' imp @ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') and (@ X2 form (@ X1 (X2 arrow form) g x12) y imp @ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y)) q5)) q4)) (imp_i (@ X2 form (@ X1 (shadowed_0 X2) f x') y') (@ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') ([q6:pf (@ X2 form (@ X1 (shadowed_0 X2) f x') y')] imp_e (@ X2 form (@ X1 (X2 arrow form) f x') y') (@ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') (and_e1 (@ X2 form (@ X1 (X2 arrow form) f x') y' imp @ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') (@ X2 form (@ X1 (X2 arrow form) g x12) y imp @ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eqt x') x12 imp @ X2 form (@ X2 (X2 arrow form) Equ y') y imp @ X2 form (@ X1 (X2 arrow form) f x') y' equiv @ X2 form (@ X1 (X2 arrow form) g x12) y) ((@ X2 form (@ X1 (X2 arrow form) f x') y' imp @ X1 form (@ X1 (X1 arrow form) Eqt x') x' and @ X2 form (@ X2 (X2 arrow form) Equ y') y') and (@ X2 form (@ X1 (X2 arrow form) g x12) y imp @ X1 form (@ X1 (X1 arrow form) Eqt x12) x12 and @ X2 form (@ X2 (X2 arrow form) Equ y) y)) q5)) q6)))))))).
per_rel_trans : {X1:tp} {Eqt:tm (per X1)} {X2:tp} {Equ:tm (per X2)} pf (@ (per X1) form (validper X1) Eqt) -> pf (@ (per X2) form (validper X2) Equ) -> pf (@ (rel (rel X1 X2) (rel X1 X2)) form (transitive (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ)) = [X1:tp] [Eqt:tm (per X1)] [X2:tp] [Equ:tm (per X2)] [p1:pf (@ (per X1) form (validper X1) Eqt)] [p2:pf (@ (per X2) form (validper X2) Equ)] def1_i (rel (rel X1 X2) (rel X1 X2)) ([x3:tm (rel (rel X1 X2) (rel X1 X2))] forall3 (rel X1 X2) (rel X1 X2) (rel X1 X2) ([x4:tm (rel X1 X2)] [y:tm (rel X1 X2)] [z1:tm (rel X1 X2)] @ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) x3 x4) y imp @ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) x3 y) z1 imp @ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) x3 x4) z1)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) (forall3_i (rel X1 X2) (rel X1 X2) (rel X1 X2) ([x3:tm (rel X1 X2)] [x4:tm (rel X1 X2)] [x5:tm (rel X1 X2)] @ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) x3) x4 imp @ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) x4) x5 imp @ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) (@ (per X2) (rel X1 X2 arrow rel X1 X2 arrow form) (@ (per X1) (per X2 arrow rel X1 X2 arrow rel X1 X2 arrow form) (lam4 (per X1) (per X2) (rel X1 X2) (rel X1 X2) form ([x6:tm (per X1)] [x7:tm (per X2)] [x8:tm (rel X1 X2)] [x9:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x10:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] (@ X1 form (@ X1 (X1 arrow form) x6 x10) x' imp @ X2 form (@ X2 (X2 arrow form) x7 y) y' imp @ X2 form (@ X1 (X2 arrow form) x8 x10) y equiv @ X2 form (@ X1 (X2 arrow form) x9 x') y') and (@ X2 form (@ X1 (X2 arrow form) x8 x10) y imp @ X1 form (@ X1 (X1 arrow form) x6 x10) x10 and @ X2 form (@ X2 (X2 arrow form) x7 y) y) and (@ X2 form (@ X1 (X2 arrow form) x9 x') y' imp @ X1 form (@ X1 (X1 arrow form) x6 x') x' and @ X2 form (@ X2 (X2 arrow form) x7 y') y')))) Eqt) Equ) x3) x5) ([f:tm (rel X1 X2)] [g:tm (rel X1 X2)] [h:tm (rel X1 X2)] imp2_i (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) f) g) (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) g) h) (@ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) (@ (per X2) (rel X1 X2 arrow rel X1 X2 arrow form) (@ (per X1) (per X2 arrow rel X1 X2 arrow rel X1 X2 arrow form) (lam4 (per X1) (per X2) (rel X1 X2) (rel X1 X2) form ([x3:tm (per X1)] [x4:tm (per X2)] [x5:tm (rel X1 X2)] [x6:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x11:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] (@ X1 form (@ X1 (X1 arrow form) x3 x11) x' imp @ X2 form (@ X2 (X2 arrow form) x4 y) y' imp @ X2 form (@ X1 (X2 arrow form) x5 x11) y equiv @ X2 form (@ X1 (X2 arrow form) x6 x') y') and (@ X2 form (@ X1 (X2 arrow form) x5 x11) y imp @ X1 form (@ X1 (X1 arrow form) x3 x11) x11 and @ X2 form (@ X2 (X2 arrow form) x4 y) y) and (@ X2 form (@ X1 (X2 arrow form) x6 x') y' imp @ X1 form (@ X1 (X1 arrow form) x3 x') x' and @ X2 form (@ X2 (X2 arrow form) x4 y') y')))) Eqt) Equ) f) h) ([q1:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) f) g)] [q2:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) g) h)] def4_i (per X1) (per X2) (rel X1 X2) (rel X1 X2) ([x3:tm (per X1)] [x4:tm (per X2)] [x5:tm (rel X1 X2)] [x6:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x12:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] (@ X1 form (@ X1 (X1 arrow form) x3 x12) x' imp @ X2 form (@ X2 (X2 arrow form) x4 y) y' imp @ X2 form (@ X1 (X2 arrow form) x5 x12) y equiv @ X2 form (@ X1 (X2 arrow form) x6 x') y') and (@ X2 form (@ X1 (X2 arrow form) x5 x12) y imp @ X1 form (@ X1 (X1 arrow form) x3 x12) x12 and @ X2 form (@ X2 (X2 arrow form) x4 y) y) and (@ X2 form (@ X1 (X2 arrow form) x6 x') y' imp @ X1 form (@ X1 (X1 arrow form) x3 x') x' and @ X2 form (@ X2 (X2 arrow form) x4 y') y'))) Eqt Equ f h (forall4_i X1 X1 X2 X2 ([x3:tm X1] [x4:tm X1] [x5:tm X2] [x6:tm X2] (@ X1 form (@ X1 (shadowed_0 X1) Eqt x3) x4 imp @ X2 form (@ X2 (shadowed_0 X2) Equ x5) x6 imp @ X2 form (@ X1 (shadowed_0 X2) f x3) x5 equiv @ X2 form (@ X1 (shadowed_0 X2) h x4) x6) and (@ X2 form (@ X1 (shadowed_0 X2) f x3) x5 imp @ X1 form (@ X1 (shadowed_0 X1) Eqt x3) x3 and @ X2 form (@ X2 (shadowed_0 X2) Equ x5) x5) and (@ X2 form (@ X1 (shadowed_0 X2) h x4) x6 imp @ X1 form (@ X1 (shadowed_0 X1) Eqt x4) x4 and @ X2 form (@ X2 (shadowed_0 X2) Equ x6) x6)) ([x13:tm X1] [x':tm X1] [y:tm X2] [y':tm X2] and3_i (@ X1 form (@ X1 (shadowed_0 X1) Eqt x13) x' imp @ X2 form (@ X2 (shadowed_0 X2) Equ y) y' imp @ X2 form (@ X1 (shadowed_0 X2) f x13) y equiv @ X2 form (@ X1 (shadowed_0 X2) h x') y') (@ X2 form (@ X1 (shadowed_0 X2) f x13) y imp @ X1 form (@ X1 (shadowed_0 X1) Eqt x13) x13 and @ X2 form (@ X2 (shadowed_0 X2) Equ y) y) (@ X2 form (@ X1 (shadowed_0 X2) h x') y' imp @ X1 form (@ X1 (shadowed_0 X1) Eqt x') x' and @ X2 form (@ X2 (shadowed_0 X2) Equ y') y') (imp2_i (@ X1 form (@ X1 (shadowed_0 X1) Eqt x13) x') (@ X2 form (@ X2 (shadowed_0 X2) Equ y) y') (@ X2 form (@ X1 (shadowed_0 X2) f x13) y equiv @ X2 form (@ X1 (shadowed_0 X2) h x') y') ([q3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eqt x13) x')] [q4:pf (@ X2 form (@ X2 (shadowed_0 X2) Equ y) y')] cut (@ X2 form (@ X1 (shadowed_0 X2) f x13) y equiv @ X2 form (@ X1 (shadowed_0 X2) g x') y') (@ X2 form (@ X1 (shadowed_0 X2) f x13) y equiv @ X2 form (@ X1 (shadowed_0 X2) h x') y') (per_rel_e1 X1 X2 Eqt Equ f g x13 x' y y' q1 q3 q4) ([q11:pf (@ X2 form (@ X1 (shadowed_0 X2) f x13) y equiv @ X2 form (@ X1 (shadowed_0 X2) g x') y')] cut (@ X1 form (@ X1 (shadowed_0 X1) Eqt x') x') (@ X2 form (@ X1 (shadowed_0 X2) f x13) y equiv @ X2 form (@ X1 (shadowed_0 X2) h x') y') (per_refl X1 Eqt x' x13 p1 (per_symm X1 Eqt x13 x' p1 q3)) ([q31:pf (@ X1 form (@ X1 (shadowed_0 X1) Eqt x') x')] cut (@ X2 form (@ X2 (shadowed_0 X2) Equ y') y') (@ X2 form (@ X1 (shadowed_0 X2) f x13) y equiv @ X2 form (@ X1 (shadowed_0 X2) h x') y') (per_refl X2 Equ y' y p2 (per_symm X2 Equ y y' p2 q4)) ([q41:pf (@ X2 form (@ X2 (shadowed_0 X2) Equ y') y')] cut (@ X2 form (@ X1 (shadowed_0 X2) g x') y' equiv @ X2 form (@ X1 (shadowed_0 X2) h x') y') (@ X2 form (@ X1 (shadowed_0 X2) f x13) y equiv @ X2 form (@ X1 (shadowed_0 X2) h x') y') (per_rel_e1 X1 X2 Eqt Equ g h x' x' y' y' q2 q31 q41) ([q21:pf (@ X2 form (@ X1 (shadowed_0 X2) g x') y' equiv @ X2 form (@ X1 (shadowed_0 X2) h x') y')] equiv_trans (@ X2 form (@ X1 (shadowed_0 X2) f x13) y) (@ X2 form (@ X1 (shadowed_0 X2) g x') y') (@ X2 form (@ X1 (shadowed_0 X2) h x') y') q11 q21)))))) (imp_i (@ X2 form (@ X1 (shadowed_0 X2) f x13) y) (@ X1 form (@ X1 (shadowed_0 X1) Eqt x13) x13 and @ X2 form (@ X2 (shadowed_0 X2) Equ y) y) ([q5:pf (@ X2 form (@ X1 (shadowed_0 X2) f x13) y)] per_rel_e2 X1 X2 Eqt Equ f g x13 y q1 q5)) (imp_i (@ X2 form (@ X1 (shadowed_0 X2) h x') y') (@ X1 form (@ X1 (shadowed_0 X1) Eqt x') x' and @ X2 form (@ X2 (shadowed_0 X2) Equ y') y') ([q6:pf (@ X2 form (@ X1 (shadowed_0 X2) h x') y')] per_rel_e3 X1 X2 Eqt Equ g h x' y' q2 q6))))))).
validper_per_rel : {X1:tp} {Eqt:tm (per X1)} {X2:tp} {Equ:tm (per X2)} pf (@ (per X1) form (validper X1) Eqt) -> pf (@ (per X2) form (validper X2) Equ) -> pf (@ (per (rel X1 X2)) form (validper (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ)) = [X1:tp] [Eqt:tm (per X1)] [X2:tp] [Equ:tm (per X2)] [p1:pf (@ (per X1) form (validper X1) Eqt)] [p2:pf (@ (per X2) form (validper X2) Equ)] def1_i (per (rel X1 X2)) ([x3:tm (per (rel X1 X2))] @ (rel (rel X1 X2) (rel X1 X2)) form (symmetric (rel X1 X2)) x3 and @ (rel (rel X1 X2) (rel X1 X2)) form (transitive (rel X1 X2)) x3) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ) (and_i (@ (rel (rel X1 X2) (rel X1 X2)) form (symmetric (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ)) (@ (rel (rel X1 X2) (rel X1 X2)) form (transitive (rel X1 X2)) (@ (per X2) (per (rel X1 X2)) (@ (per X1) (per X2 arrow per (rel X1 X2)) (per_rel X1 X2) Eqt) Equ)) (per_rel_symm X1 Eqt X2 Equ p1 p2) (per_rel_trans X1 Eqt X2 Equ p1 p2)).
validper_trans_equiv : {X1:tp} {Eq:tm (per X1)} {A:tm X1} {B:tm X1} {C:tm X1} pf (@ (per X1) form (validper X1) Eq) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq A) B) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq C) A equiv @ X1 form (@ X1 (shadowed_0 X1) Eq C) B) = [X1:tp] [Eq:tm (per X1)] [A:tm X1] [B:tm X1] [C:tm X1] [p1:pf (@ (per X1) form (validper X1) Eq)] [p2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq A) B)] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq C) A) (@ X1 form (@ X1 (shadowed_0 X1) Eq C) B) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq C) A) (@ X1 form (@ X1 (shadowed_0 X1) Eq C) B) ([q1:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq C) A)] per_trans X1 Eq C A B p1 q1 p2)) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq C) B) (@ X1 form (@ X1 (shadowed_0 X1) Eq C) A) ([q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq C) B)] per_trans X1 Eq C B A p1 q2 (per_symm X1 Eq A B p1 p2))).
valideqv->validper : {X1:tp} {Eq:tm (eqrel X1)} pf (@ (eqrel X1) form (valideqv X1) Eq) -> pf (@ (per X1) form (validper X1) Eq) = [X1:tp] [Eq:tm (eqrel X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq)] validper_i X1 Eq (valideqv_e2 X1 Eq p1) (valideqv_e3 X1 Eq p1).
validper_set2per : {X1:tp} {S:tm (set X1)} pf (@ (per X1) form (validper X1) (@ (set X1) (per X1) (set2per X1) S)) = [X1:tp] [S:tm (set X1)] validper_i X1 (@ (set X1) (per X1) (set2per X1) S) (symmetric_i X1 (@ (set X1) (per X1) (set2per X1) S) ([a:tm X1] [b:tm X1] [p1:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S) a) b)] and_l (eq X1 a b) (@ X1 form S a) (@ X1 form (@ X1 (X1 arrow form) (@ (set X1) (X1 arrow X1 arrow form) (lam3 (set X1) X1 X1 form ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4)) S) b) a) (def3_e X1 X1 (set X1) ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4) S a b p1) ([p2:pf (eq X1 a b)] [p3:pf (@ X1 form S a)] def3_i (set X1) X1 X1 ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4) S b a (and_i (== X1 b a) (@ X1 form S b) (symm X1 a b p2) (congr X1 b a ([z1:tm X1] @ X1 form S z1) (symm X1 a b p2) p3))))) (transitive_i X1 (@ (set X1) (per X1) (set2per X1) S) ([a:tm X1] [b:tm X1] [c1:tm X1] [p5:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S) a) b)] [p6:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S) b) c1)] and_l (eq X1 a b) (@ X1 form S a) (@ X1 form (@ X1 (X1 arrow form) (@ (set X1) (X1 arrow X1 arrow form) (lam3 (set X1) X1 X1 form ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4)) S) a) c1) (def3_e X1 X1 (set X1) ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4) S a b p5) ([p7:pf (eq X1 a b)] [p8:pf (@ X1 form S a)] and_l (eq X1 b c1) (@ X1 form S b) (@ X1 form (@ X1 (X1 arrow form) (@ (set X1) (X1 arrow X1 arrow form) (lam3 (set X1) X1 X1 form ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4)) S) a) c1) (def3_e X1 X1 (set X1) ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4) S b c1 p6) ([p9:pf (eq X1 b c1)] [p10:pf (@ X1 form S b)] def3_i (set X1) X1 X1 ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4) S a c1 (and_i (== X1 a c1) (@ X1 form S a) (trans X1 a b c1 p7 p9) p8))))).
vector : tp -> tp = [x3:tp] rel num x3.
vector_eq : {T:tp} tm (eqrel T) -> tm (eqrel (vector T)) = [T:tp] [eq_T:tm (eqrel T)] @ (eqrel T) (eqrel (rel num T)) (@ (eqrel num) (eqrel T arrow eqrel (rel num T)) (eq_rel num T) eq_arith) eq_T.
vector_aeq : {T:tp} tm (eqrel T) -> tm (num arrow eqrel (vector T)) = [T:tp] [eq_T:tm (eqrel T)] lam num (eqrel (num arrow T arrow form)) ([i1:tm num] @ (eqrel (T arrow form)) (eqrel (num arrow T arrow form)) (@ (eqrel num) (eqrel (T arrow form) arrow eqrel (num arrow T arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (T arrow form) arrow eqrel (num arrow T arrow form)) (eq++ num (T arrow form)) (lam num form ([j:tm num] not (eq num i1 j)))) eq_arith) (@ (eqrel form) (eqrel (T arrow form)) (@ (eqrel T) (eqrel form arrow eqrel (T arrow form)) (eq+ T form) eq_T) eq_form)).
vector_mkconst : {T:tp} tm (T arrow vector T) = [T:tp] lam T (num arrow T arrow form) ([x3:tm T] lam2 num T form ([i1:tm num] [x':tm T] eq T x3 x')).
c_vec : {X1:tp} tm (X1 arrow vector X1) = [X1:tp] vector_mkconst X1.
vector_upd : {T:tp} tm (eqrel T arrow vector T arrow num arrow T arrow vector T) = [T:tp] lam (eqrel T) (vector T arrow num arrow T arrow num arrow T arrow form) ([eq_T:tm (eqrel T)] lam3 (vector T) num T (num arrow T arrow form) ([v1:tm (vector T)] [i1:tm num] [x3:tm T] lam2 num T form ([j:tm num] [y:tm T] if (eq num i1 j) (@ T form (@ T (shadowed_0 T) eq_T x3) y) (@ T form (@ num (shadowed_0 T) v1 j) y)))).
valideqv_vector_eq : {X1:tp} {Eq:tm (eqrel X1)} pf (@ (eqrel X1) form (valideqv X1) Eq) -> pf (@ (eqrel (vector X1)) form (valideqv (vector X1)) (vector_eq X1 Eq)) = [X1:tp] [Eq:tm (eqrel X1)] [x3:pf (@ (eqrel X1) form (valideqv X1) Eq)] valideqv_eq_rel num eq_arith X1 Eq valideqv_eq_arith x3.
vector_eq_i : {X1:tp} {Eq:tm (eqrel X1)} {Vec1:tm (rel num X1)} {Vec2:tm (rel num X1)} pf (@ (eqrel X1) form (valideqv X1) Eq) -> pf (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (subrel num X1) Vec1) Vec2) -> pf (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (subrel num X1) Vec2) Vec1) -> pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) Vec1) Vec2) = [X1:tp] [Eq:tm (eqrel X1)] [Vec1:tm (rel num X1)] [Vec2:tm (rel num X1)] [x3:pf (@ (eqrel X1) form (valideqv X1) Eq)] [x4:pf (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (subrel num X1) Vec1) Vec2)] [x5:pf (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (subrel num X1) Vec2) Vec1)] eq_rel_i2 X1 Eq num Vec1 Vec2 eq_arith x3 x4 x5.
vector_eq_e : {X1:tp} {Eq:tm (eqrel X1)} {Vec1:tm (vector X1)} {Vec2:tm (vector X1)} {I:tm num} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) Eq) -> pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) Vec1) Vec2) -> pf (@ X1 form (@ num (shadowed_0 X1) Vec1 I) X) -> pf (@ X1 form (@ num (shadowed_0 X1) Vec2 I) X) = [X1:tp] [Eq:tm (eqrel X1)] [Vec1:tm (vector X1)] [Vec2:tm (vector X1)] [I:tm num] [X:tm X1] [x3:pf (@ (eqrel X1) form (valideqv X1) Eq)] [x4:pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) Vec1) Vec2)] [x5:pf (@ X1 form (@ num (shadowed_0 X1) Vec1 I) X)] eq_rel_congr num eq_arith X1 Eq Vec1 Vec2 I X valideqv_eq_arith x3 x4 x5.
vector_eq_refl : {X1:tp} {Eq:tm (eqrel X1)} {V:tm (vector X1)} pf (@ (eqrel X1) form (valideqv X1) Eq) -> pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) V) V) = [X1:tp] [Eq:tm (eqrel X1)] [V:tm (vector X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq)] eqv_refl (vector X1) (vector_eq X1 Eq) V (valideqv_vector_eq X1 Eq p1).
vector_eq_symm : {X1:tp} {Eq:tm (eqrel X1)} {V1:tm (vector X1)} {V2:tm (vector X1)} pf (@ (eqrel X1) form (valideqv X1) Eq) -> pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) V1) V2) -> pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) V2) V1) = [X1:tp] [Eq:tm (eqrel X1)] [V1:tm (vector X1)] [V2:tm (vector X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq)] [x3:pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) V1) V2)] eqv_symm (vector X1) (vector_eq X1 Eq) V1 V2 (valideqv_vector_eq X1 Eq p1) x3.
vector_eq_trans : {X1:tp} {Eq:tm (eqrel X1)} {V1:tm (vector X1)} {V2:tm (vector X1)} {V3:tm (vector X1)} pf (@ (eqrel X1) form (valideqv X1) Eq) -> pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) V1) V2) -> pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) V2) V3) -> pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) V1) V3) = [X1:tp] [Eq:tm (eqrel X1)] [V1:tm (vector X1)] [V2:tm (vector X1)] [V3:tm (vector X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq)] [x3:pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) V1) V2)] [x4:pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (vector_eq X1 Eq) V2) V3)] eqv_trans (vector X1) (vector_eq X1 Eq) V1 V2 V3 (valideqv_vector_eq X1 Eq p1) x3 x4.
valideqv_vector_aeq : {X1:tp} {Eq:tm (eqrel X1)} {I:tm num} pf (@ (eqrel X1) form (valideqv X1) Eq) -> pf (@ (eqrel (vector X1)) form (valideqv (vector X1)) (@ num (eqrel (vector X1)) (vector_aeq X1 Eq) I)) = [X1:tp] [Eq:tm (eqrel X1)] [I:tm num] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq)] gdef1_i (eqrel (num arrow X1 arrow form)) num ([x3:tm num] @ (eqrel (X1 arrow form)) (eqrel (num arrow X1 arrow form)) (@ (eqrel num) (eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (eq++ num (X1 arrow form)) (lam num form ([j:tm num] not (eq num x3 j)))) eq_arith) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq) eq_form)) I ([z1:tm (eqrel (num arrow X1 arrow form))] @ (eqrel (num arrow X1 arrow form)) form (valideqv (num arrow X1 arrow form)) z1) (valideqv_eq++ num eq_arith (X1 arrow form) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq) eq_form) (lam num form ([j:tm num] not (eq num I j))) valideqv_eq_arith (valideqv_eq+ X1 Eq form eq_form p2 valideqv_eq_form)).
vector_aeq_i : {T:tp} {Eq:tm (eqrel T)} {I:tm num} {Vec1:tm (num arrow T arrow form)} {Vec2:tm (num arrow T arrow form)} pf (@ (eqrel T) form (valideqv T) Eq) -> ({j:tm num} {x3:tm T} pf (neq num I j) -> pf (@ T form (@ num (T arrow form) Vec1 j) x3 equiv @ T form (@ num (T arrow form) Vec2 j) x3)) -> pf (@ (vector T) form (@ (vector T) (shadowed_0 (vector T)) (@ num (eqrel (vector T)) (vector_aeq T Eq) I) Vec1) Vec2) = [T:tp] [Eq:tm (eqrel T)] [I:tm num] [Vec1:tm (num arrow T arrow form)] [Vec2:tm (num arrow T arrow form)] [p2:pf (@ (eqrel T) form (valideqv T) Eq)] [q1:{j:tm num} {x4:tm T} pf (neq num I j) -> pf (@ T form (@ num (T arrow form) Vec1 j) x4 equiv @ T form (@ num (T arrow form) Vec2 j) x4)] cut (forall2 num T ([x3:tm num] [x4:tm T] neq num I x3 imp @ T form (@ num (T arrow form) Vec1 x3) x4 equiv @ T form (@ num (T arrow form) Vec2 x3) x4)) (@ (num arrow T arrow form) form (@ (num arrow T arrow form) ((num arrow T arrow form) arrow form) (@ num ((num arrow T arrow form) arrow (num arrow T arrow form) arrow form) (lam num ((num arrow T arrow form) arrow (num arrow T arrow form) arrow form) ([x3:tm num] @ (eqrel (T arrow form)) (eqrel (num arrow T arrow form)) (@ (eqrel num) (eqrel (T arrow form) arrow eqrel (num arrow T arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (T arrow form) arrow eqrel (num arrow T arrow form)) (eq++ num (T arrow form)) (lam num form ([j:tm num] not (eq num x3 j)))) eq_arith) (@ (eqrel form) (eqrel (T arrow form)) (@ (eqrel T) (eqrel form arrow eqrel (T arrow form)) (eq+ T form) Eq) eq_form))) I) Vec1) Vec2) (forall2_i num T ([x3:tm num] [x4:tm T] neq num I x3 imp @ T form (@ num (T arrow form) Vec1 x3) x4 equiv @ T form (@ num (T arrow form) Vec2 x3) x4) ([a:tm num] [b:tm T] imp_i (neq num I a) (@ T form (@ num (T arrow form) Vec1 a) b equiv @ T form (@ num (T arrow form) Vec2 a) b) ([x3:pf (neq num I a)] q1 a b x3))) ([x3:pf (forall2 num T ([x3:tm num] [x4:tm T] neq num I x3 imp @ T form (@ num (T arrow form) Vec1 x3) x4 equiv @ T form (@ num (T arrow form) Vec2 x3) x4))] def2_congr1 (num arrow T arrow form) (num arrow T arrow form) (@ num ((num arrow T arrow form) arrow (num arrow T arrow form) arrow form) (lam num ((num arrow T arrow form) arrow (num arrow T arrow form) arrow form) ([x4:tm num] @ (eqrel (T arrow form)) (eqrel (num arrow T arrow form)) (@ (eqrel num) (eqrel (T arrow form) arrow eqrel (num arrow T arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (T arrow form) arrow eqrel (num arrow T arrow form)) (eq++ num (T arrow form)) (lam num form ([j:tm num] not (eq num x4 j)))) eq_arith) (@ (eqrel form) (eqrel (T arrow form)) (@ (eqrel T) (eqrel form arrow eqrel (T arrow form)) (eq+ T form) Eq) eq_form))) I) (@ (eqrel (T arrow form)) (eqrel (num arrow T arrow form)) (@ (eqrel num) (eqrel (T arrow form) arrow eqrel (num arrow T arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (T arrow form) arrow eqrel (num arrow T arrow form)) (eq++ num (T arrow form)) (lam num form ([j:tm num] not (eq num I j)))) eq_arith) (@ (eqrel form) (eqrel (T arrow form)) (@ (eqrel T) (eqrel form arrow eqrel (T arrow form)) (eq+ T form) Eq) eq_form)) Vec1 Vec2 (beta1 ((num arrow T arrow form) arrow (num arrow T arrow form) arrow form) num ([x4:tm num] @ (eqrel (T arrow form)) (eqrel (num arrow T arrow form)) (@ (eqrel num) (eqrel (T arrow form) arrow eqrel (num arrow T arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (T arrow form) arrow eqrel (num arrow T arrow form)) (eq++ num (T arrow form)) (lam num form ([j:tm num] not (eq num x4 j)))) eq_arith) (@ (eqrel form) (eqrel (T arrow form)) (@ (eqrel T) (eqrel form arrow eqrel (T arrow form)) (eq+ T form) Eq) eq_form)) I) (eq++_i2 (T arrow form) (@ (eqrel form) (eqrel (T arrow form)) (@ (eqrel T) (eqrel form arrow eqrel (T arrow form)) (eq+ T form) Eq) eq_form) num (lam num form ([j:tm num] neq num I j)) Vec1 Vec2 eq_arith (valideqv_eq+ T Eq form eq_form p2 valideqv_eq_form) ([j:tm num] [p10:pf (@ num form (lam num form ([j1:tm num] neq num I j1)) j)] eq+_i2 form eq_form T (@ num (T arrow form) Vec1 j) (@ num (T arrow form) Vec2 j) Eq valideqv_eq_form ([x5:tm T] eq_form_i (@ T form (@ num (T arrow form) Vec1 j) x5) (@ T form (@ num (T arrow form) Vec2 j) x5) (q1 j x5 (def1_e num ([x4:tm num] neq num I x4) j p10)))))).
vector_aeq_e : {X1:tp} {Eq:tm (eqrel X1)} {I:tm num} {Vec1:tm (vector X1)} {Vec2:tm (vector X1)} {J:tm num} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) Eq) -> pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (@ num (eqrel (vector X1)) (vector_aeq X1 Eq) I) Vec1) Vec2) -> pf (neq num I J) -> pf (@ X1 form (@ num (shadowed_0 X1) Vec1 J) X) -> pf (@ X1 form (@ num (shadowed_0 X1) Vec2 J) X) = [X1:tp] [Eq:tm (eqrel X1)] [I:tm num] [Vec1:tm (vector X1)] [Vec2:tm (vector X1)] [J:tm num] [X:tm X1] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq)] [p4:pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (@ num (eqrel (vector X1)) (vector_aeq X1 Eq) I) Vec1) Vec2)] [p6:pf (neq num I J)] [p8:pf (@ X1 form (@ num (shadowed_0 X1) Vec1 J) X)] cut4 (@ (eqrel X1) form (valideqv X1) Eq) (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (@ num (eqrel (vector X1)) (vector_aeq X1 Eq) I) Vec1) Vec2) (neq num I J) (@ X1 form (@ num (shadowed_0 X1) Vec1 J) X) (@ X1 form (@ num (shadowed_0 X1) Vec2 J) X) p2 p4 p6 p8 ([x3:pf (@ (eqrel X1) form (valideqv X1) Eq)] [x4:pf (@ (vector X1) form (@ (vector X1) (shadowed_0 (vector X1)) (@ num (eqrel (vector X1)) (vector_aeq X1 Eq) I) Vec1) Vec2)] [x5:pf (neq num I J)] [x6:pf (@ X1 form (@ num (shadowed_0 X1) Vec1 J) X)] cut (@ num form (lam num form ([x7:tm num] neq num I x7)) J) (@ X1 form (@ num (shadowed_0 X1) Vec2 J) X) (def1_i num ([x7:tm num] neq num I x7) J p6) ([p10:pf (@ num form (lam num form ([j:tm num] neq num I j)) J)] cut (@ (X1 arrow form) form (@ (X1 arrow form) (shadowed_0 (X1 arrow form)) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq) eq_form) (@ num (X1 arrow form) Vec1 J)) (@ num (X1 arrow form) Vec2 J)) (@ X1 form (@ num (shadowed_0 X1) Vec2 J) X) (eq++_e2 num eq_arith (X1 arrow form) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq) eq_form) (lam num form ([j:tm num] not (eq num I j))) Vec1 Vec2 J valideqv_eq_arith (valideqv_eq+ X1 Eq form eq_form p2 valideqv_eq_form) (def2_congr1 (vector X1) (vector X1) (@ (eqrel (X1 arrow form)) (eqrel (num arrow X1 arrow form)) (@ (eqrel num) (eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (eq++ num (X1 arrow form)) (lam num form ([j:tm num] not (eq num I j)))) eq_arith) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq) eq_form)) (@ num (vector X1 arrow vector X1 arrow form) (lam num (vector X1 arrow vector X1 arrow form) ([x7:tm num] @ (eqrel (X1 arrow form)) (eqrel (num arrow X1 arrow form)) (@ (eqrel num) (eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (eq++ num (X1 arrow form)) (lam num form ([j:tm num] not (eq num x7 j)))) eq_arith) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq) eq_form))) I) Vec1 Vec2 (symm (vector X1 arrow vector X1 arrow form) (@ num (vector X1 arrow vector X1 arrow form) (lam num (vector X1 arrow vector X1 arrow form) ([x7:tm num] @ (eqrel (X1 arrow form)) (eqrel (num arrow X1 arrow form)) (@ (eqrel num) (eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (eq++ num (X1 arrow form)) (lam num form ([j:tm num] not (eq num x7 j)))) eq_arith) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq) eq_form))) I) (@ (eqrel (X1 arrow form)) (eqrel (num arrow X1 arrow form)) (@ (eqrel num) (eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (eq++ num (X1 arrow form)) (lam num form ([j:tm num] not (eq num I j)))) eq_arith) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq) eq_form)) (beta1 (vector X1 arrow vector X1 arrow form) num ([x7:tm num] @ (eqrel (X1 arrow form)) (eqrel (num arrow X1 arrow form)) (@ (eqrel num) (eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (@ (shadowed_0 num) (eqrel num arrow eqrel (X1 arrow form) arrow eqrel (num arrow X1 arrow form)) (eq++ num (X1 arrow form)) (lam num form ([j:tm num] not (eq num x7 j)))) eq_arith) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq) eq_form)) I)) p4) p10) ([p12:pf (@ (X1 arrow form) form (@ (X1 arrow form) (shadowed_0 (X1 arrow form)) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq) eq_form) (@ num (shadowed_0 X1) Vec1 J)) (@ num (shadowed_0 X1) Vec2 J))] cut (@ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ num (shadowed_0 X1) Vec1 J) X)) (@ X1 form (@ num (shadowed_0 X1) Vec2 J) X)) (@ X1 form (@ num (shadowed_0 X1) Vec2 J) X) (eq+_e2 X1 Eq form eq_form (@ num (shadowed_0 X1) Vec1 J) (@ num (shadowed_0 X1) Vec2 J) X p2 valideqv_eq_form p12) ([p14:pf (@ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ num (shadowed_0 X1) Vec1 J) X)) (@ X1 form (@ num (shadowed_0 X1) Vec2 J) X))] equiv_e1 (@ X1 form (@ num (shadowed_0 X1) Vec1 J) X) (@ X1 form (@ num (shadowed_0 X1) Vec2 J) X) (eq_form_e (@ X1 form (@ num (shadowed_0 X1) Vec1 J) X) (@ X1 form (@ num (shadowed_0 X1) Vec2 J) X) p14) p8)))).
vector_mkconst_i : {X1:tp} {X:tm X1} {X':tm X1} {I:tm num} pf (eq X1 X X') -> pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (vector_mkconst X1) X) I) X') = [X1:tp] [X:tm X1] [X':tm X1] [I:tm num] [x3:pf (eq X1 X X')] def3_i X1 num X1 ([x4:tm X1] [x5:tm num] [x6:tm X1] eq X1 x4 x6) X I X' x3.
vector_mkconst_e : {X1:tp} {X:tm X1} {I:tm num} {X':tm X1} pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (vector_mkconst X1) X) I) X') -> pf (eq X1 X X') = [X1:tp] [X:tm X1] [I:tm num] [X':tm X1] [x3:pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (vector_mkconst X1) X) I) X')] def3_e X1 num X1 ([x4:tm X1] [x5:tm num] [x6:tm X1] eq X1 x4 x6) X I X' x3.
vector_upd_i1 : {I:tm num} {J:tm num} {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} {Y:tm X1} {V:tm (vector X1)} pf (eq num I J) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq X) Y) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (@ num (X1 arrow vector X1) (@ (vector X1) (num arrow X1 arrow vector X1) (@ (eqrel X1) (vector X1 arrow num arrow X1 arrow vector X1) (vector_upd X1) Eq) V) I) X) J) Y) = [I:tm num] [J:tm num] [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [Y:tm X1] [V:tm (vector X1)] [p1:pf (eq num I J)] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) Y)] def6_i (eqrel X1) (vector X1) num X1 num X1 ([x3:tm (eqrel X1)] [x4:tm (vector X1)] [x5:tm num] [x6:tm X1] [x7:tm num] [x8:tm X1] if (eq num x5 x7) (@ X1 form (@ X1 (shadowed_0 X1) x3 x6) x8) (@ X1 form (@ num (shadowed_0 X1) x4 x7) x8)) Eq V I X J Y (if_i1 (eq num I J) (@ X1 form (@ X1 (X1 arrow form) Eq X) Y) (@ X1 form (@ num (shadowed_0 X1) V J) Y) p1 p2).
vector_upd_i2 : {I:tm num} {J:tm num} {X1:tp} {V:tm (num arrow X1 arrow form)} {Y:tm X1} {Eq:tm (eqrel X1)} {X:tm X1} pf (neq num I J) -> pf (@ X1 form (@ num (X1 arrow form) V J) Y) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (@ num (X1 arrow vector X1) (@ (vector X1) (num arrow X1 arrow vector X1) (@ (eqrel X1) (vector X1 arrow num arrow X1 arrow vector X1) (vector_upd X1) Eq) V) I) X) J) Y) = [I:tm num] [J:tm num] [X1:tp] [V:tm (num arrow X1 arrow form)] [Y:tm X1] [Eq:tm (eqrel X1)] [X:tm X1] [p1:pf (neq num I J)] [p2:pf (@ X1 form (@ num (X1 arrow form) V J) Y)] def6_i (eqrel X1) (vector X1) num X1 num X1 ([x3:tm (eqrel X1)] [x4:tm (vector X1)] [x5:tm num] [x6:tm X1] [x7:tm num] [x8:tm X1] if (eq num x5 x7) (@ X1 form (@ X1 (shadowed_0 X1) x3 x6) x8) (@ X1 form (@ num (shadowed_0 X1) x4 x7) x8)) Eq V I X J Y (if_i2 (eq num I J) (@ X1 form (@ num (X1 arrow form) V J) Y) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) p1 p2).
vector_upd_i : {I:tm num} {J:tm num} {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} {Y:tm X1} {V:tm (num arrow X1 arrow form)} (pf (eq num I J) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq X) Y)) -> (pf (neq num I J) -> pf (@ X1 form (@ num (X1 arrow form) V J) Y)) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (@ num (X1 arrow vector X1) (@ (vector X1) (num arrow X1 arrow vector X1) (@ (eqrel X1) (vector X1 arrow num arrow X1 arrow vector X1) (vector_upd X1) Eq) V) I) X) J) Y) = [I:tm num] [J:tm num] [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [Y:tm X1] [V:tm (num arrow X1 arrow form)] [q1:pf (eq num I J) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq X) Y)] [q2:pf (neq num I J) -> pf (@ X1 form (@ num (X1 arrow form) V J) Y)] or_e (== num I J) (!= num I J) (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (@ num (X1 arrow vector X1) (@ (vector X1) (num arrow X1 arrow vector X1) (@ (eqrel X1) (vector X1 arrow num arrow X1 arrow vector X1) (vector_upd X1) Eq) V) I) X) J) Y) (num_eq_excluded_middle I J) ([p7:pf (eq num I J)] vector_upd_i1 I J X1 Eq X Y V p7 (q1 p7)) ([p7:pf (neq num I J)] vector_upd_i2 I J X1 V Y Eq X p7 (q2 p7)).
vector_upd_e1 : {X1:tp} {Eq:tm (eqrel X1)} {V:tm (vector X1)} {I:tm num} {X:tm X1} {J:tm num} {Y:tm X1} pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (@ num (X1 arrow vector X1) (@ (vector X1) (num arrow X1 arrow vector X1) (@ (eqrel X1) (vector X1 arrow num arrow X1 arrow vector X1) (vector_upd X1) Eq) V) I) X) J) Y) -> pf (eq num I J) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) = [X1:tp] [Eq:tm (eqrel X1)] [V:tm (vector X1)] [I:tm num] [X:tm X1] [J:tm num] [Y:tm X1] [p1:pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (@ num (X1 arrow vector X1) (@ (vector X1) (num arrow X1 arrow vector X1) (@ (eqrel X1) (vector X1 arrow num arrow X1 arrow vector X1) (vector_upd X1) Eq) V) I) X) J) Y)] [x3:pf (eq num I J)] if_e1 (eq num I J) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (@ X1 form (@ num (shadowed_0 X1) V J) Y) (def6_e X1 num X1 num (vector X1) (eqrel X1) ([x4:tm (eqrel X1)] [x5:tm (vector X1)] [x6:tm num] [x7:tm X1] [x8:tm num] [x9:tm X1] if (eq num x6 x8) (@ X1 form (@ X1 (shadowed_0 X1) x4 x7) x9) (@ X1 form (@ num (shadowed_0 X1) x5 x8) x9)) Eq V I X J Y p1) x3.
vector_upd_e2 : {X1:tp} {Eq:tm (eqrel X1)} {V:tm (vector X1)} {I:tm num} {X:tm X1} {J:tm num} {Y:tm X1} pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (@ num (X1 arrow vector X1) (@ (vector X1) (num arrow X1 arrow vector X1) (@ (eqrel X1) (vector X1 arrow num arrow X1 arrow vector X1) (vector_upd X1) Eq) V) I) X) J) Y) -> pf (neq num I J) -> pf (@ X1 form (@ num (shadowed_0 X1) V J) Y) = [X1:tp] [Eq:tm (eqrel X1)] [V:tm (vector X1)] [I:tm num] [X:tm X1] [J:tm num] [Y:tm X1] [p1:pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (@ num (X1 arrow vector X1) (@ (vector X1) (num arrow X1 arrow vector X1) (@ (eqrel X1) (vector X1 arrow num arrow X1 arrow vector X1) (vector_upd X1) Eq) V) I) X) J) Y)] [x3:pf (not (eq num I J))] if_e2 (eq num I J) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (@ X1 form (@ num (shadowed_0 X1) V J) Y) (def6_e X1 num X1 num (vector X1) (eqrel X1) ([x4:tm (eqrel X1)] [x5:tm (vector X1)] [x6:tm num] [x7:tm X1] [x8:tm num] [x9:tm X1] if (eq num x6 x8) (@ X1 form (@ X1 (shadowed_0 X1) x4 x7) x9) (@ X1 form (@ num (shadowed_0 X1) x5 x8) x9)) Eq V I X J Y p1) x3.
vector_upd_refl : {X1:tp} {Eq:tm (eqrel X1)} {V:tm (vector X1)} {I:tm num} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) Eq) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (vector X1) (@ num (X1 arrow vector X1) (@ (vector X1) (num arrow X1 arrow vector X1) (@ (eqrel X1) (vector X1 arrow num arrow X1 arrow vector X1) (vector_upd X1) Eq) V) I) X) I) X) = [X1:tp] [Eq:tm (eqrel X1)] [V:tm (vector X1)] [I:tm num] [X:tm X1] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq)] vector_upd_i I I X1 Eq X X V ([x3:pf (eq num I I)] eqv_refl X1 Eq X p1) ([p3:pf (neq num I I)] neq_refl num I (@ X1 form (@ num (X1 arrow form) V I) X) p3).
vecval : tp = vector num.
vecval_slot_valid : tm (rel num vecval) = lam2 num (num arrow set num) form ([i1:tm num] [v1:tm (num arrow set num)] @ (set num) form (@ (eqrel num) (shadowed_0 (set num)) (is_singleton num) eq_arith) (@ num (set num) v1 i1) and @ num form (@ (rel num num) (shadowed_0 num) (domain num num) v1) i1).
vecval_deref : tm (vecval arrow vecval) = lam3 vecval num num form ([v1:tm vecval] [i1:tm num] [x3:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid i1) v1) (@ num form (@ num (shadowed_0 num) v1 i1) x3) (eq num x3 zero)).
vecval_eq : tm (eqrel vecval) = lam2 vecval vecval form ([v1:tm vecval] [v2:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (vector_eq num eq_arith) (@ vecval vecval vecval_deref v1)) (@ vecval vecval vecval_deref v2)).
vecval_aeq : tm (num arrow eqrel vecval) = lam3 num vecval vecval form ([n:tm num] [v1:tm vecval] [v2:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) n) (@ vecval vecval vecval_deref v1)) (@ vecval vecval vecval_deref v2)).
vecval_upd : tm (vecval arrow num arrow num arrow vecval) = @ (eqrel num) (vector num arrow num arrow num arrow vector num) (vector_upd num) eq_arith.
vecval_deref_i1 : {I:tm num} {V:tm vecval} {X:tm num} pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) -> pf (@ num form (@ num (shadowed_0 num) V I) X) -> pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X) = [I:tm num] [V:tm vecval] [X:tm num] [p1:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)] [p2:pf (@ num form (@ num (shadowed_0 num) V I) X)] def3_i vecval num num ([x3:tm vecval] [x4:tm num] [x5:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x4) x3) (@ num form (@ num (shadowed_0 num) x3 x4) x5) (eq num x5 zero)) V I X (if_i1 (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) (@ num form (@ num (shadowed_0 num) V I) X) (eq num X zero) p1 p2).
vecval_deref_i2 : {I:tm num} {V:tm vecval} {X:tm num} pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)) -> pf (eq num X zero) -> pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X) = [I:tm num] [V:tm vecval] [X:tm num] [p1:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V))] [p2:pf (eq num X zero)] def3_i vecval num num ([x3:tm vecval] [x4:tm num] [x5:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x4) x3) (@ num form (@ num (shadowed_0 num) x3 x4) x5) (eq num x5 zero)) V I X (if_i2 (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) (eq num X zero) (@ num form (@ num (shadowed_0 num) V I) X) p1 p2).
vecval_deref_e : {V:tm vecval} {I:tm num} {X:tm num} {A:tform} pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X) -> (pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) -> pf (@ num form (@ num (shadowed_0 num) V I) X) -> pf A) -> (pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)) -> pf (eq num X zero) -> pf A) -> pf A = [V:tm vecval] [I:tm num] [X:tm num] [A:tform] [p1:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X)] [p2:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) -> pf (@ num form (@ num (shadowed_0 num) V I) X) -> pf A] [p4:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)) -> pf (eq num X zero) -> pf A] if_e (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) (@ num form (@ num (shadowed_0 num) V I) X) (eq num X zero) A (def3_e num num vecval ([x3:tm vecval] [x4:tm num] [x5:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x4) x3) (@ num form (@ num (shadowed_0 num) x3 x4) x5) (eq num x5 zero)) V I X p1) ([x3:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)] [x4:pf (@ num form (@ num (shadowed_0 num) V I) X)] p2 x3 x4) ([x3:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V))] [x4:pf (eq num X zero)] p4 x3 x4).
vecval_deref_e1 : {V:tm vecval} {I:tm num} {X:tm num} pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X) -> pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) -> pf (@ num form (@ num (shadowed_0 num) V I) X) = [V:tm vecval] [I:tm num] [X:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X)] [x3:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)] if_e1 (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) (@ num form (@ num (shadowed_0 num) V I) X) (eq num X zero) (def3_e num num vecval ([x4:tm vecval] [x5:tm num] [x6:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x5) x4) (@ num form (@ num (shadowed_0 num) x4 x5) x6) (eq num x6 zero)) V I X p1) x3.
vecval_deref_e2 : {V:tm vecval} {I:tm num} {X:tm num} pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X) -> pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)) -> pf (eq num X zero) = [V:tm vecval] [I:tm num] [X:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X)] [x3:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V))] if_e2 (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) (@ num form (@ num (shadowed_0 num) V I) X) (eq num X zero) (def3_e num num vecval ([x4:tm vecval] [x5:tm num] [x6:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x5) x4) (@ num form (@ num (shadowed_0 num) x4 x5) x6) (eq num x6 zero)) V I X p1) x3.
vecval_eq_i : {R1:tm vecval} {R2:tm vecval} pf (@ (rel num num) form (@ (rel num num) (shadowed_0 (rel num num)) (subrel num num) (@ vecval vecval vecval_deref R1)) (@ vecval vecval vecval_deref R2)) -> pf (@ (rel num num) form (@ (rel num num) (shadowed_0 (rel num num)) (subrel num num) (@ vecval vecval vecval_deref R2)) (@ vecval vecval vecval_deref R1)) -> pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq R1) R2) = [R1:tm vecval] [R2:tm vecval] [p1:pf (@ (rel num num) form (@ (rel num num) (shadowed_0 (rel num num)) (subrel num num) (@ vecval vecval vecval_deref R1)) (@ vecval vecval vecval_deref R2))] [p2:pf (@ (rel num num) form (@ (rel num num) (shadowed_0 (rel num num)) (subrel num num) (@ vecval vecval vecval_deref R2)) (@ vecval vecval vecval_deref R1))] def2_i vecval vecval ([x3:tm vecval] [x4:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (vector_eq num eq_arith) (@ vecval vecval vecval_deref x3)) (@ vecval vecval vecval_deref x4)) R1 R2 (vector_eq_i num eq_arith (@ vecval vecval vecval_deref R1) (@ vecval vecval vecval_deref R2) valideqv_eq_arith p1 p2).
vecval_eq_e : {R1:tm vecval} {R2:tm vecval} {I:tm num} {X:tm num} pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq R1) R2) -> pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref R1) I) X) -> pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref R2) I) X) = [R1:tm vecval] [R2:tm vecval] [I:tm num] [X:tm num] [p1:pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq R1) R2)] [p2:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref R1) I) X)] vector_eq_e num eq_arith (@ vecval vecval vecval_deref R1) (@ vecval vecval vecval_deref R2) I X valideqv_eq_arith (def2_e vecval vecval ([x3:tm vecval] [x4:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (vector_eq num eq_arith) (@ vecval vecval vecval_deref x3)) (@ vecval vecval vecval_deref x4)) R1 R2 p1) p2.
vecval_eq_refl : {Vec:tm vecval} pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq Vec) Vec) = [Vec:tm vecval] def2_i vecval vecval ([x3:tm vecval] [x4:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (vector_eq num eq_arith) (@ vecval vecval vecval_deref x3)) (@ vecval vecval vecval_deref x4)) Vec Vec (vector_eq_refl num eq_arith (@ vecval vecval vecval_deref Vec) valideqv_eq_arith).
vecval_eq_weaken : {R1:tm vecval} {R2:tm vecval} pf (eq vecval R1 R2) -> pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq R1) R2) = [R1:tm vecval] [R2:tm vecval] [p1:pf (eq vecval R1 R2)] congr vecval R1 R2 ([z1:tm vecval] @ vecval form (@ vecval (shadowed_0 vecval) vecval_eq z1) R2) p1 (vecval_eq_refl R2).
vecval_eq_symm : {V1:tm vecval} {V2:tm vecval} pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V1) V2) -> pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V2) V1) = [V1:tm vecval] [V2:tm vecval] [p1:pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V1) V2)] def2_i vecval vecval ([x3:tm vecval] [x4:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (vector_eq num eq_arith) (@ vecval vecval vecval_deref x3)) (@ vecval vecval vecval_deref x4)) V2 V1 (vector_eq_symm num eq_arith (@ vecval vecval vecval_deref V1) (@ vecval vecval vecval_deref V2) valideqv_eq_arith (def2_e vecval vecval ([x3:tm vecval] [x4:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (vector_eq num eq_arith) (@ vecval vecval vecval_deref x3)) (@ vecval vecval vecval_deref x4)) V1 V2 p1)).
vecval_eq_trans : {V1:tm vecval} {V2:tm vecval} {V3:tm vecval} pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V1) V2) -> pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V2) V3) -> pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V1) V3) = [V1:tm vecval] [V2:tm vecval] [V3:tm vecval] [p1:pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V1) V2)] [p2:pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V2) V3)] def2_i vecval vecval ([x3:tm vecval] [x4:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (vector_eq num eq_arith) (@ vecval vecval vecval_deref x3)) (@ vecval vecval vecval_deref x4)) V1 V3 (vector_eq_trans num eq_arith (@ vecval vecval vecval_deref V1) (@ vecval vecval vecval_deref V2) (@ vecval vecval vecval_deref V3) valideqv_eq_arith (def2_e vecval vecval ([x3:tm vecval] [x4:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (vector_eq num eq_arith) (@ vecval vecval vecval_deref x3)) (@ vecval vecval vecval_deref x4)) V1 V2 p1) (def2_e vecval vecval ([x3:tm vecval] [x4:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (vector_eq num eq_arith) (@ vecval vecval vecval_deref x3)) (@ vecval vecval vecval_deref x4)) V2 V3 p2)).
valideqv_vecval_eq : pf (@ (eqrel vecval) form (valideqv vecval) vecval_eq) = valideqv_i vecval vecval_eq (reflexive_i vecval vecval_eq ([x3:tm vecval] vecval_eq_refl x3)) (symmetric_i vecval vecval_eq ([x3:tm vecval] [x4:tm vecval] [x5:pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq x3) x4)] vecval_eq_symm x3 x4 x5)) (transitive_i vecval vecval_eq ([x3:tm vecval] [x4:tm vecval] [x5:tm vecval] [x6:pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq x3) x4)] [x7:pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq x4) x5)] vecval_eq_trans x3 x4 x5 x6 x7)).
vecval_eq_snd : {V:tm vecval} {V':tm vecval} {X1:tp} {S:tm X1} {X2:tp} {S':tm X2} pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V) V') -> pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq (@ (pair X1 vecval) vecval (snd X1 vecval) (@ vecval (pair X1 vecval) (@ X1 (vecval arrow pair X1 vecval) (mkpair X1 vecval) S) V))) (@ (pair X2 vecval) vecval (snd X2 vecval) (@ vecval (pair X2 vecval) (@ X2 (vecval arrow pair X2 vecval) (mkpair X2 vecval) S') V'))) = [V:tm vecval] [V':tm vecval] [X1:tp] [S:tm X1] [X2:tp] [S':tm X2] [x3:pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V) V')] congr2 vecval vecval (@ (pair X1 vecval) vecval (snd X1 vecval) (@ vecval (pair X1 vecval) (@ X1 (vecval arrow pair X1 vecval) (mkpair X1 vecval) S) V)) V (@ (pair X2 vecval) vecval (snd X2 vecval) (@ vecval (pair X2 vecval) (@ X2 (vecval arrow pair X2 vecval) (mkpair X2 vecval) S') V')) V' ([y:tm vecval] [z1:tm vecval] @ vecval form (@ vecval (shadowed_0 vecval) vecval_eq y) z1) (sndpair vecval V X1 S) (sndpair vecval V' X2 S') x3.
vecval_slot_valid_i : {V:tm (rel num num)} {I:tm num} pf (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) I) -> ({x3:tm num} {x4:tm num} pf (@ num form (@ num (shadowed_0 num) V I) x3) -> pf (@ num form (@ num (shadowed_0 num) V I) x4) -> pf (eq num x3 x4)) -> pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) = [V:tm (rel num num)] [I:tm num] [p0:pf (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) I)] [q1:{x5:tm num} {x6:tm num} pf (@ num form (@ num (shadowed_0 num) V I) x5) -> pf (@ num form (@ num (shadowed_0 num) V I) x6) -> pf (eq num x5 x6)] def2_i num vecval ([x3:tm num] [x4:tm vecval] @ (set num) form (@ (eqrel num) (shadowed_0 (set num)) (is_singleton num) eq_arith) (@ num (set num) x4 x3) and @ num form (@ (rel num num) (shadowed_0 num) (domain num num) x4) x3) I V (and_i (@ (set num) form (@ (eqrel num) (shadowed_0 (set num)) (is_singleton num) eq_arith) (@ num (shadowed_0 num) V I)) (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) I) (is_singleton_i num (@ num (shadowed_0 num) V I) eq_arith ([x7:tm num] [x8:tm num] [p3:pf (@ num form (@ num (shadowed_0 num) V I) x7)] [p4:pf (@ num form (@ num (shadowed_0 num) V I) x8)] eq_arith_i x7 x8 (q1 x7 x8 p3 p4))) p0).
vecval_slot_valid_e1 : {I:tm num} {V:tm vecval} {X1:tm num} {X2:tm num} pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) -> pf (@ num form (@ num (shadowed_0 num) V I) X1) -> pf (@ num form (@ num (shadowed_0 num) V I) X2) -> pf (eq num X1 X2) = [I:tm num] [V:tm vecval] [X1:tm num] [X2:tm num] [p1:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)] [p2:pf (@ num form (@ num (shadowed_0 num) V I) X1)] [p3:pf (@ num form (@ num (shadowed_0 num) V I) X2)] eq_arith_e X1 X2 (is_singleton_e num eq_arith (@ num (set num) V I) X1 X2 (and_e1 (@ (set num) form (@ (eqrel num) (shadowed_0 (set num)) (is_singleton num) eq_arith) (@ num (set num) V I)) (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) I) (def2_e vecval num ([x3:tm num] [x4:tm vecval] @ (set num) form (@ (eqrel num) (shadowed_0 (set num)) (is_singleton num) eq_arith) (@ num (set num) x4 x3) and @ num form (@ (rel num num) (shadowed_0 num) (domain num num) x4) x3) I V p1)) p2 p3).
vecval_slot_valid_e2 : {I:tm num} {V:tm vecval} pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) -> pf (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) I) = [I:tm num] [V:tm vecval] [p1:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)] and_e2 (@ (set num) form (@ (eqrel num) (shadowed_0 (set num)) (is_singleton num) eq_arith) (@ num (set num) V I)) (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) I) (def2_e vecval num ([x3:tm num] [x4:tm vecval] @ (set num) form (@ (eqrel num) (shadowed_0 (set num)) (is_singleton num) eq_arith) (@ num (set num) x4 x3) and @ num form (@ (rel num num) (shadowed_0 num) (domain num num) x4) x3) I V p1).
vecval_mkconst_slot_valid : {I:tm num} {X:tm num} pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) (@ num (vector num) (vector_mkconst num) X)) = [I:tm num] [X:tm num] vecval_slot_valid_i (@ num (vector num) (vector_mkconst num) X) I (domain_i num num (@ num (vector num) (vector_mkconst num) X) I X (vector_mkconst_i num X X I (refl num X))) ([a:tm num] [b:tm num] [p3:pf (@ num form (@ num (shadowed_0 num) (@ num (vector num) (vector_mkconst num) X) I) a)] [p4:pf (@ num form (@ num (shadowed_0 num) (@ num (vector num) (vector_mkconst num) X) I) b)] trans num a X b (symm num X a (vector_mkconst_e num X I a p3)) (vector_mkconst_e num X I b p4)).
vecval_deref_total : {V:tm vecval} {I:tm num} pf (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) (@ vecval vecval vecval_deref V)) I) = [V:tm vecval] [I:tm num] or_e (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)) (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) (@ vecval (num arrow num arrow form) (lam3 vecval num num form ([x3:tm vecval] [x4:tm num] [x5:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x4) x3) (@ num form (@ num (shadowed_0 num) x3 x4) x5) (eq num x5 zero))) V)) I) (excluded_middle (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)) ([p11:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)] domain_e num num V I (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) (@ vecval (num arrow num arrow form) (lam3 vecval num num form ([x3:tm vecval] [x4:tm num] [x5:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x4) x3) (@ num form (@ num (shadowed_0 num) x3 x4) x5) (eq num x5 zero))) V)) I) (vecval_slot_valid_e2 I V p11) ([y:tm num] [p12:pf (@ num form (@ num (shadowed_0 num) V I) y)] domain_i num num (@ vecval (num arrow num arrow form) (lam3 vecval num num form ([x3:tm vecval] [x4:tm num] [x5:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x4) x3) (@ num form (@ num (shadowed_0 num) x3 x4) x5) (eq num x5 zero))) V) I y (def3_i vecval num num ([x3:tm vecval] [x4:tm num] [x5:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x4) x3) (@ num form (@ num (shadowed_0 num) x3 x4) x5) (eq num x5 zero)) V I y (if_i1 (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) (@ num form (@ num (shadowed_0 num) V I) y) (eq num y zero) p11 p12)))) ([p14:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V))] domain_i num num (@ vecval (num arrow num arrow form) (lam3 vecval num num form ([x3:tm vecval] [x4:tm num] [x5:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x4) x3) (@ num form (@ num (shadowed_0 num) x3 x4) x5) (eq num x5 zero))) V) I zero (def3_i vecval num num ([x3:tm vecval] [x4:tm num] [x5:tm num] if (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid x4) x3) (@ num form (@ num (shadowed_0 num) x3 x4) x5) (eq num x5 zero)) V I zero (if_i2 (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V) (== num zero zero) (@ num form (@ num (shadowed_0 num) V I) zero) p14 (refl num zero)))).
vecval_deref_slot_valid : {I:tm num} {V:tm vecval} pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) (@ vecval vecval vecval_deref V)) = [I:tm num] [V:tm vecval] vecval_slot_valid_i (@ vecval vecval vecval_deref V) I (vecval_deref_total V I) ([a:tm num] [b:tm num] [p3:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) a)] [p4:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) b)] vecval_deref_e V I a (eq num a b) p3 ([p11:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V)] [p13:pf (@ num form (@ num (shadowed_0 num) V I) a)] vecval_slot_valid_e1 I V a b p11 p13 (vecval_deref_e1 V I b p4 p11)) ([p21:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) V))] [p22:pf (eq num a zero)] trans num a zero b p22 (symm num b zero (vecval_deref_e2 V I b p4 p21)))).
vecval_deref_squeeze : {V:tm vecval} {I:tm num} {X1:tm num} {X2:tm num} pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X1) -> pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X2) -> pf (eq num X1 X2) = [V:tm vecval] [I:tm num] [X1:tm num] [X2:tm num] [x3:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X1)] [x4:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X2)] vecval_slot_valid_e1 I (@ vecval vecval vecval_deref V) X1 X2 (vecval_deref_slot_valid I V) x3 x4.
vecval_upd_i1 : {I:tm num} {J:tm num} {X:tm num} {Y:tm num} {V:tm vecval} pf (eq num I J) -> pf (eq num X Y) -> pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) J) Y) = [I:tm num] [J:tm num] [X:tm num] [Y:tm num] [V:tm vecval] [p1:pf (eq num I J)] [p2:pf (eq num X Y)] vector_upd_i1 I J num eq_arith X Y V p1 (eq_arith_i X Y p2).
vecval_upd_i2 : {I:tm num} {J:tm num} {V:tm (num arrow num arrow form)} {Y:tm num} {X:tm num} pf (neq num I J) -> pf (@ num form (@ num (num arrow form) V J) Y) -> pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) J) Y) = [I:tm num] [J:tm num] [V:tm (num arrow num arrow form)] [Y:tm num] [X:tm num] [x3:pf (neq num I J)] [x4:pf (@ num form (@ num (num arrow form) V J) Y)] vector_upd_i2 I J num V Y eq_arith X x3 x4.
vecval_upd_e1 : {V:tm vecval} {I:tm num} {X:tm num} {J:tm num} {Y:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) J) Y) -> pf (eq num I J) -> pf (eq num X Y) = [V:tm vecval] [I:tm num] [X:tm num] [J:tm num] [Y:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) J) Y)] [p2:pf (eq num I J)] eq_arith_e X Y (vector_upd_e1 num eq_arith V I X J Y p1 p2).
vecval_upd_e2 : {V:tm vecval} {I:tm num} {X:tm num} {J:tm num} {Y:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) J) Y) -> pf (neq num I J) -> pf (@ num form (@ num (shadowed_0 num) V J) Y) = [V:tm vecval] [I:tm num] [X:tm num] [J:tm num] [Y:tm num] [x3:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) J) Y)] [x4:pf (neq num I J)] vector_upd_e2 num eq_arith V I X J Y x3 x4.
vecval_upd_dom : {I:tm num} {J:tm num} {V:tm (rel num num)} {X:tm num} pf (neq num I J) -> pf (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) J equiv @ num form (@ (rel num num) (shadowed_0 num) (domain num num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) J) = [I:tm num] [J:tm num] [V:tm (rel num num)] [X:tm num] [p1:pf (neq num I J)] gdef2_i2 form form (rel num num) num ([x3:tm (rel num num)] [x4:tm num] exists num ([y:tm num] @ num form (@ num (num arrow form) x3 x4) y)) V J (rel num num) num ([x3:tm (rel num num)] [x4:tm num] exists num ([y:tm num] @ num form (@ num (num arrow form) x3 x4) y)) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) J ([y:tm form] [z1:tm form] y equiv z1) (equiv_exists num ([x3:tm num] @ num form (@ num (shadowed_0 num) V J) x3) ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (@ vecval (num arrow num arrow num arrow num arrow form) (@ (eqrel num) (vecval arrow num arrow num arrow num arrow num arrow form) (lam6 (eqrel num) vecval num num num num form ([x4:tm (eqrel num)] [x5:tm vecval] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] if (eq num x6 x8) (@ num form (@ num (shadowed_0 num) x4 x7) x9) (@ num form (@ num (shadowed_0 num) x5 x8) x9))) eq_arith) V) I) X) J) x3) ([x3:tm num] congr2 form form (@ num form (@ num (shadowed_0 num) V J) x3) (@ num form (@ num (shadowed_0 num) V J) x3) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (@ vecval (num arrow num arrow num arrow num arrow form) (@ (eqrel num) (vecval arrow num arrow num arrow num arrow num arrow form) (lam6 (eqrel num) vecval num num num num form ([x4:tm (eqrel num)] [x5:tm vecval] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] if (eq num x6 x8) (@ num form (@ num (shadowed_0 num) x4 x7) x9) (@ num form (@ num (shadowed_0 num) x5 x8) x9))) eq_arith) V) I) X) J) x3) (if (eq num I J) (@ num form (@ num (shadowed_0 num) eq_arith X) x3) (@ num form (@ num (shadowed_0 num) V J) x3)) ([y:tm form] [z2:tm form] y equiv z2) (refl form (@ num form (@ num (shadowed_0 num) V J) x3)) (beta6 form num num num num vecval (eqrel num) ([x4:tm (eqrel num)] [x5:tm vecval] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] if (eq num x6 x8) (@ num form (@ num (shadowed_0 num) x4 x7) x9) (@ num form (@ num (shadowed_0 num) x5 x8) x9)) eq_arith V I X J x3) (equiv_symm (if (eq num I J) (@ num form (@ num (shadowed_0 num) eq_arith X) x3) (@ num form (@ num (shadowed_0 num) V J) x3)) (@ num form (@ num (shadowed_0 num) V J) x3) (if_equiv2 (eq num I J) (@ num form (@ num (shadowed_0 num) eq_arith X) x3) (@ num form (@ num (shadowed_0 num) V J) x3) p1)))).
vecval_upd_slot_valid' : {I:tm num} {J:tm num} {V:tm vecval} {X:tm num} pf (neq num I J) -> pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid J) V) -> pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid J) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) = [I:tm num] [J:tm num] [V:tm vecval] [X:tm num] [p0:pf (neq num I J)] [p1:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid J) V)] cut (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) J) (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid J) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (equiv_e1 (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) J) (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) J) (vecval_upd_dom I J V X p0) (vecval_slot_valid_e2 J V p1)) ([p5:pf (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) J)] vecval_slot_valid_i (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) J p5 ([y1:tm num] [y2:tm num] [p15:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) J) y1)] [p16:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) J) y2)] or_e (eq num I J) (not (eq num I J)) (== num y1 y2) (excluded_middle (eq num I J)) ([p11:pf (eq num I J)] trans num y1 X y2 (symm num X y1 (vecval_upd_e1 V I X J y1 p15 p11)) (vecval_upd_e1 V I X J y2 p16 p11)) ([p21:pf (neq num I J)] vecval_slot_valid_e1 J V y1 y2 p1 (vecval_upd_e2 V I X J y1 p15 p21) (vecval_upd_e2 V I X J y2 p16 p21)))).
vecval_unupd_slot_valid : {I:tm num} {J:tm num} {V:tm vecval} {X:tm num} pf (neq num I J) -> pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid J) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) -> pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid J) V) = [I:tm num] [J:tm num] [V:tm vecval] [X:tm num] [p0:pf (neq num I J)] [p1:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid J) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))] cut (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) J) (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid J) V) (equiv_e2 (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) J) (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) J) (vecval_upd_dom I J V X p0) (vecval_slot_valid_e2 J (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) p1)) ([p5:pf (@ num form (@ (rel num num) (shadowed_0 num) (domain num num) V) J)] vecval_slot_valid_i V J p5 ([y1:tm num] [y2:tm num] [p15:pf (@ num form (@ num (shadowed_0 num) V J) y1)] [p16:pf (@ num form (@ num (shadowed_0 num) V J) y2)] vecval_slot_valid_e1 J (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) y1 y2 p1 (vecval_upd_i2 I J V y1 X p0 p15) (vecval_upd_i2 I J V y2 X p0 p16))).
vecval_upd_slot_valid : {I:tm num} {V:tm vecval} {X:tm num} pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid I) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) = [I:tm num] [V:tm vecval] [X:tm num] vecval_slot_valid_i (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) I (domain_i num num (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) I X (vecval_upd_i1 I I X X V (refl num I) (refl num X))) ([a:tm num] [b:tm num] [p3:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) I) a)] [p4:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) I) b)] trans num a X b (symm num X a (vecval_upd_e1 V I X I a p3 (refl num I))) (vecval_upd_e1 V I X I b p4 (refl num I))).
vecval_upd_sub : {V:tm vecval} {V':tm vecval} {I:tm num} {X:tm num} pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V) V') -> pf (@ (rel num num) form (@ (rel num num) (shadowed_0 (rel num num)) (subrel num num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X))) = [V:tm vecval] [V':tm vecval] [I:tm num] [X:tm num] [p1:pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V) V')] subrel_i num num (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) ([j:tm num] [y:tm num] [p3:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j) y)] or_e (eq num I j) (not (eq num I j)) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) (excluded_middle (eq num I j)) ([p11:pf (eq num I j)] cut (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) (congr num j I ([z1:tm num] @ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid z1) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (symm num I j p11) (vecval_upd_slot_valid I V X)) ([p14:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))] cut (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) j) y) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) (vecval_deref_e1 (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) j y p3 p14) ([p16:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) j) y)] cut (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X) j) y) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) (vecval_upd_i1 I j X y V' p11 (vecval_upd_e1 V I X j y p16 p11)) ([p17:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X) j) y)] cut (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) (congr num j I ([z2:tm num] @ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid z2) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) (symm num I j p11) (vecval_upd_slot_valid I V' X)) ([p18:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X))] vecval_deref_i1 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X) y p18 p17))))) ([p20:pf (neq num I j)] vecval_deref_e (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) j y (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) p3 ([p11:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))] [p13:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) j) y)] cut (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V') j) y) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) (vecval_eq_e V V' j y p1 (vecval_deref_i1 j V y (vecval_unupd_slot_valid I j V X p20 p11) (vecval_upd_e2 V I X j y p13 p20))) ([p14:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V') j) y)] vecval_deref_e V' j y (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) p14 ([q11:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V')] [q13:pf (@ num form (@ num (shadowed_0 num) V' j) y)] vecval_deref_i1 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X) y (vecval_upd_slot_valid' I j V' X p20 q11) (vecval_upd_i2 I j V' y X p20 q13)) ([q21:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V'))] [q22:pf (eq num y zero)] cut (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X))) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) (not_i (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) ([q23:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X))] not_e (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V') q21 (vecval_unupd_slot_valid I j V' X p20 q23))) ([q24:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)))] vecval_deref_i2 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X) y q24 q22)))) ([p21:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)))] [p22:pf (eq num y zero)] cut (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V)) (@1 num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) (not_i (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V) ([p23:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V)] not_e (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) p21 (vecval_upd_slot_valid' I j V X p20 p23))) ([p24:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V))] cut (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V') j) y) (@1 num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y) (vecval_eq_e V V' j y p1 (vecval_deref_i2 j V y p24 p22)) ([p25:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V') j) y)] congr2 (num arrow form) num (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) y zero ([x3:tm (num arrow form)] [x4:tm num] @1 num form x3 x4) (refl (num arrow form) (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j)) p22 (vecval_deref_e V' j zero (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) zero) (congr2 (num arrow form) num (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V') j) (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V') j) zero y ([x3:tm (num arrow form)] [x4:tm num] @1 num form x3 x4) (refl (num arrow form) (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V') j)) (symm num y zero p22) p25) ([q11:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V')] [q13:pf (@ num form (@ num (shadowed_0 num) V' j) zero)] vecval_deref_i1 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X) zero (vecval_upd_slot_valid' I j V' X p20 q11) (vecval_upd_i2 I j V' zero X p20 q13)) ([q21:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V'))] [x3:pf (eq num zero zero)] cut (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X))) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) j) zero) (not_i (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)) ([q23:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X))] not_e (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V') q21 (vecval_unupd_slot_valid I j V' X p20 q23))) ([q24:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X)))] vecval_deref_i2 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X) zero q24 (refl num zero))))))))).
vecval_upd_eq : {V:tm vecval} {V':tm vecval} {X:tm num} {X':tm num} {I:tm num} pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V) V') -> pf (eq num X X') -> pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X')) = [V:tm vecval] [V':tm vecval] [X:tm num] [X':tm num] [I:tm num] [p1:pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq V) V')] [p2:pf (eq num X X')] congr num X X' ([z1:tm num] @ vecval form (@ vecval (shadowed_0 vecval) vecval_eq (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) z1)) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X')) p2 (vecval_eq_i (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X') (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V') I) X') (vecval_upd_sub V V' I X' p1) (vecval_upd_sub V' V I X' (vecval_eq_symm V V' p1))).
vecval_upd_refl : {V:tm vecval} {I:tm num} {X:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) I) X) = [V:tm vecval] [I:tm num] [X:tm num] vector_upd_refl num eq_arith V I X valideqv_eq_arith.
vecval_deref_upd_refl : {V:tm vecval} {I:tm num} {X:tm num} pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) I) X) = [V:tm vecval] [I:tm num] [X:tm num] vecval_deref_i1 I (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) X (vecval_upd_slot_valid I V X) (vecval_upd_refl V I X).
vecval_upd_idempotent : {V:tm vecval} {I:tm num} {X:tm num} pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X) -> pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) V) = [V:tm vecval] [I:tm num] [X:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) I) X)] vecval_eq_i (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) V (subrel_i num num (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (@ vecval vecval vecval_deref V) ([j:tm num] [y:tm num] [p5:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j) y)] or_e (eq num I j) (not (eq num I j)) (@2 num num form (@ vecval vecval vecval_deref V) j y) (excluded_middle (eq num I j)) ([p10:pf (eq num I j)] cut (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) I) y) (@2 num num form (@ vecval vecval vecval_deref V) j y) (vecval_deref_e1 (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) I y (congr3 (num arrow num arrow form) num num (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) I j y y ([x3:tm (num arrow num arrow form)] [x4:tm num] [x5:tm num] @2 num num form x3 x4 x5) (refl (num arrow num arrow form) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))) p10 (refl num y) p5) (vecval_upd_slot_valid I V X)) ([p11:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) I) y)] congr3 (num arrow num arrow form) num num (@ vecval vecval vecval_deref V) (@ vecval vecval vecval_deref V) j I y X ([x3:tm (num arrow num arrow form)] [x4:tm num] [x5:tm num] @2 num num form x3 x4 x5) (refl (num arrow num arrow form) (@ vecval vecval vecval_deref V)) (symm num I j p10) (symm num X y (vecval_upd_e1 V I X I y p11 (refl num I))) p1)) ([p20:pf (neq num I j)] vecval_deref_e (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) j y (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) j) y) p5 ([p21:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))] [p22:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) j) y)] vecval_deref_i1 j V y (vecval_unupd_slot_valid I j V X p20 p21) (vecval_upd_e2 V I X j y p22 p20)) ([p31:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)))] [p32:pf (eq num y zero)] cut (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V)) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) j) y) (not_i (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V) ([p33:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V)] not_e (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) p31 (vecval_upd_slot_valid' I j V X p20 p33))) ([p34:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V))] vecval_deref_i2 j V y p34 p32))))) (subrel_i num num (@ vecval vecval vecval_deref V) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) ([j:tm num] [y:tm num] [p41:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) j) y)] or_e (eq num I j) (not (eq num I j)) (@2 num num form (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j y) (excluded_middle (eq num I j)) ([p51:pf (eq num I j)] cut (eq num X y) (@2 num num form (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j y) (vecval_deref_squeeze V I X y p1 (congr num I j ([z1:tm num] @ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref V) z1) y) p51 p41)) ([p52:pf (eq num X y)] congr3 (num arrow num arrow form) num num (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j I y y ([x3:tm (num arrow num arrow form)] [x4:tm num] [x5:tm num] @2 num num form x3 x4 x5) (refl (num arrow num arrow form) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))) (symm num I j p51) (refl num y) (vecval_deref_i1 I (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) y (vecval_upd_slot_valid I V X) (vecval_upd_i1 I I X y V (refl num I) p52)))) ([p60:pf (neq num I j)] vecval_deref_e V j y (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j) y) p41 ([p61:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V)] [p62:pf (@ num form (@ num (shadowed_0 num) V j) y)] vecval_deref_i1 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) y (vecval_upd_slot_valid' I j V X p60 p61) (vecval_upd_i2 I j V y X p60 p62)) ([p71:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V))] [p72:pf (eq num y zero)] cut (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j) y) (not_i (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) ([p73:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))] not_e (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) V) p71 (vecval_unupd_slot_valid I j V X p60 p73))) ([p74:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)))] vecval_deref_i2 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) y p74 p72))))).
vecval_upd_supersede : {V:tm vecval} {I:tm num} {Y:tm num} {X:tm num} pf (@ vecval form (@ vecval (shadowed_0 vecval) vecval_eq (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) = [V:tm vecval] [I:tm num] [Y:tm num] [X:tm num] vecval_eq_i (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) (subrel_i num num (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) ([j:tm num] [y:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) j) y)] or_e (eq num I j) (not (eq num I j)) (@2 num num form (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j y) (excluded_middle (eq num I j)) ([p10:pf (eq num I j)] cut (@2 num num form (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) I y) (@2 num num form (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j y) (congr3 (num arrow num arrow form) num num (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) I j y y ([x3:tm (num arrow num arrow form)] [x4:tm num] [x5:tm num] @2 num num form x3 x4 x5) (refl (num arrow num arrow form) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X))) p10 (refl num y) p2) ([p12:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) I) y)] congr3 (num arrow num arrow form) num num (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j I y y ([x3:tm (num arrow num arrow form)] [x4:tm num] [x5:tm num] @2 num num form x3 x4 x5) (refl (num arrow num arrow form) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))) (symm num I j p10) (refl num y) (vecval_deref_i1 I (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) y (vecval_upd_slot_valid I V X) (vecval_upd_i1 I I X y V (refl num I) (vecval_upd_e1 (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y) I X I y (vecval_deref_e1 (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X) I y p12 (vecval_upd_slot_valid I (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y) X)) (refl num I)))))) ([p20:pf (neq num I j)] vecval_deref_e (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X) j y (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j) y) p2 ([p21:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X))] [p22:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X) j) y)] vecval_deref_i1 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) y (vecval_upd_slot_valid' I j V X p20 (vecval_unupd_slot_valid I j V Y p20 (vecval_unupd_slot_valid I j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y) X p20 p21))) (vecval_upd_i2 I j V y X p20 (vecval_upd_e2 V I Y j y (vecval_upd_e2 (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y) I X j y p22 p20) p20))) ([p31:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)))] [p32:pf (eq num y zero)] cut (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j) y) (not_i (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) ([p33:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))] not_e (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) p31 (vecval_upd_slot_valid' I j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y) X p20 (vecval_upd_slot_valid' I j V Y p20 (vecval_unupd_slot_valid I j V X p20 p33))))) ([p34:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)))] vecval_deref_i2 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) y p34 p32))))) (subrel_i num num (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) ([j:tm num] [y:tm num] [p42:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) j) y)] or_e (eq num I j) (not (eq num I j)) (@2 num num form (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) j y) (excluded_middle (eq num I j)) ([p50:pf (eq num I j)] cut (@2 num num form (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) I y) (@2 num num form (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) j y) (congr3 (num arrow num arrow form) num num (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) I j y y ([x3:tm (num arrow num arrow form)] [x4:tm num] [x5:tm num] @2 num num form x3 x4 x5) (refl (num arrow num arrow form) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))) p50 (refl num y) p42) ([p52:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) I) y)] congr3 (num arrow num arrow form) num num (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) j I y y ([x3:tm (num arrow num arrow form)] [x4:tm num] [x5:tm num] @2 num num form x3 x4 x5) (refl (num arrow num arrow form) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X))) (symm num I j p50) (refl num y) (vecval_deref_i1 I (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X) y (vecval_upd_slot_valid I (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y) X) (vecval_upd_i1 I I X y (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y) (refl num I) (vecval_upd_e1 V I X I y (vecval_deref_e1 (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) I y p52 (vecval_upd_slot_valid I V X)) (refl num I)))))) ([p60:pf (neq num I j)] vecval_deref_e (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) j y (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) j) y) p42 ([p61:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X))] [p62:pf (@ num form (@ num (shadowed_0 num) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X) j) y)] vecval_deref_i1 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X) y (vecval_upd_slot_valid' I j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y) X p60 (vecval_upd_slot_valid' I j V Y p60 (vecval_unupd_slot_valid I j V X p60 p61))) (vecval_upd_i2 I j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y) y X p60 (vecval_upd_i2 I j V y Y p60 (vecval_upd_e2 V I X j y p62 p60)))) ([p71:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)))] [p72:pf (eq num y zero)] cut (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X))) (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) j) y) (not_i (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)) ([p73:pf (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X))] not_e (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) X)) p71 (vecval_upd_slot_valid' I j V X p60 (vecval_unupd_slot_valid I j V Y p60 (vecval_unupd_slot_valid I j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y) X p60 p73))))) ([p74:pf (not (@ vecval form (@ num (shadowed_0 vecval) vecval_slot_valid j) (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X)))] vecval_deref_i2 j (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd (@ num vecval (@ num (num arrow vecval) (@ vecval (num arrow num arrow vecval) vecval_upd V) I) Y)) I) X) y p74 p72))))).
vecval_aeq_i : {I:tm num} {Vec1:tm vecval} {Vec2:tm vecval} ({j:tm num} {x3:tm num} pf (neq num I j) -> pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref Vec1) j) x3 equiv @ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref Vec2) j) x3)) -> pf (@ vecval form (@ vecval (shadowed_0 vecval) (@ num (eqrel vecval) vecval_aeq I) Vec1) Vec2) = [I:tm num] [Vec1:tm vecval] [Vec2:tm vecval] [p1:{j:tm num} {x4:tm num} pf (neq num I j) -> pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref Vec1) j) x4 equiv @ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref Vec2) j) x4)] def3_i num vecval vecval ([x3:tm num] [x4:tm vecval] [x5:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x5)) I Vec1 Vec2 (vector_aeq_i num eq_arith I (@ vecval vecval vecval_deref Vec1) (@ vecval vecval vecval_deref Vec2) valideqv_eq_arith ([j:tm num] [x5:tm num] [x3:pf (neq num I j)] p1 j x5 x3)).
vecval_aeq_e : {I:tm num} {Vec1:tm vecval} {Vec2:tm vecval} {J:tm num} {X:tm num} pf (@ vecval form (@ vecval (shadowed_0 vecval) (@ num (eqrel vecval) vecval_aeq I) Vec1) Vec2) -> pf (neq num I J) -> pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref Vec1) J) X) -> pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref Vec2) J) X) = [I:tm num] [Vec1:tm vecval] [Vec2:tm vecval] [J:tm num] [X:tm num] [p1:pf (@ vecval form (@ vecval (shadowed_0 vecval) (@ num (eqrel vecval) vecval_aeq I) Vec1) Vec2)] [p2:pf (neq num I J)] [p3:pf (@ num form (@ num (shadowed_0 num) (@ vecval vecval vecval_deref Vec1) J) X)] vector_aeq_e num eq_arith I (@ vecval vecval vecval_deref Vec1) (@ vecval vecval vecval_deref Vec2) J X valideqv_eq_arith (def3_e vecval vecval num ([x3:tm num] [x4:tm vecval] [x5:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x5)) I Vec1 Vec2 p1) p2 p3.
valideqv_vecval_aeq : {I:tm num} pf (@ (eqrel vecval) form (valideqv vecval) (@ num (eqrel vecval) vecval_aeq I)) = [I:tm num] cut (@ (eqrel (vector num)) form (valideqv (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) I)) (@ (eqrel vecval) form (valideqv vecval) (@ num (vecval arrow vecval arrow form) (lam3 num vecval vecval form ([x3:tm num] [x4:tm vecval] [x5:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x5))) I)) (valideqv_vector_aeq num eq_arith I valideqv_eq_arith) ([p1:pf (@ (eqrel (vector num)) form (valideqv (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) I))] valideqv_i vecval (@ num (vecval arrow vecval arrow form) (lam3 num vecval vecval form ([x3:tm num] [x4:tm vecval] [x5:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x5))) I) (reflexive_i vecval (@ num (vecval arrow vecval arrow form) (lam3 num vecval vecval form ([x3:tm num] [x4:tm vecval] [x5:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x5))) I) ([x3:tm vecval] def3_i num vecval vecval ([x4:tm num] [x5:tm vecval] [x6:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x4) (@ vecval vecval vecval_deref x5)) (@ vecval vecval vecval_deref x6)) I x3 x3 (eqv_refl (vector num) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) I) (@ vecval vecval vecval_deref x3) p1))) (symmetric_i vecval (@ num (vecval arrow vecval arrow form) (lam3 num vecval vecval form ([x3:tm num] [x4:tm vecval] [x5:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x5))) I) ([x4:tm vecval] [y:tm vecval] [p3:pf (@ vecval form (@ vecval (shadowed_0 vecval) (@ num (vecval arrow vecval arrow form) (lam3 num vecval vecval form ([x3:tm num] [x5:tm vecval] [x6:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x5)) (@ vecval vecval vecval_deref x6))) I) x4) y)] def3_i num vecval vecval ([x3:tm num] [x5:tm vecval] [x6:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x5)) (@ vecval vecval vecval_deref x6)) I y x4 (eqv_symm (vector num) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) I) (@ vecval vecval vecval_deref x4) (@ vecval vecval vecval_deref y) p1 (def3_e vecval vecval num ([x3:tm num] [x5:tm vecval] [x6:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x5)) (@ vecval vecval vecval_deref x6)) I x4 y p3)))) (transitive_i vecval (@ num (vecval arrow vecval arrow form) (lam3 num vecval vecval form ([x3:tm num] [x4:tm vecval] [x5:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x5))) I) ([x5:tm vecval] [y:tm vecval] [z1:tm vecval] [p5:pf (@ vecval form (@ vecval (shadowed_0 vecval) (@ num (vecval arrow vecval arrow form) (lam3 num vecval vecval form ([x3:tm num] [x4:tm vecval] [x6:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x6))) I) x5) y)] [p6:pf (@ vecval form (@ vecval (shadowed_0 vecval) (@ num (vecval arrow vecval arrow form) (lam3 num vecval vecval form ([x3:tm num] [x4:tm vecval] [x6:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x6))) I) y) z1)] def3_i num vecval vecval ([x3:tm num] [x4:tm vecval] [x6:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x6)) I x5 z1 (eqv_trans (vector num) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) I) (@ vecval vecval vecval_deref x5) (@ vecval vecval vecval_deref y) (@ vecval vecval vecval_deref z1) p1 (def3_e vecval vecval num ([x3:tm num] [x4:tm vecval] [x6:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x6)) I x5 y p5) (def3_e vecval vecval num ([x3:tm num] [x4:tm vecval] [x6:tm vecval] @ (vector num) form (@ (vector num) (shadowed_0 (vector num)) (@ num (eqrel (vector num)) (vector_aeq num eq_arith) x3) (@ vecval vecval vecval_deref x4)) (@ vecval vecval vecval_deref x6)) I y z1 p6))))).
list_cons : {T:tp} tm (eqrel T arrow T arrow list T arrow list T) = [T:tp] _list_cons T.
list_nil : {T:tp} tm (list T) = [T:tp] _list_nil T.
list_valid : {T:tp} tm (eqrel T arrow list T arrow form) = [T:tp] lam2 (per T) (num arrow T arrow form) form ([Eq:tm (per T)] [l:tm (num arrow T arrow form)] @ (per T) form (validper T) Eq and exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) Eq x3) x3 and forall T ([y:tm T] @ T form (@ T (shadowed_0 T) Eq x3) y equiv @ T form (@ num (T arrow form) l i1) y))) (forall T ([y:tm T] not (@ T form (@ num (T arrow form) l i1) y)))))).
list_length : {T:tp} tm (list T arrow num arrow form) = [T:tp] lam2 (rel num T) num form ([L:tm (rel num T)] [N:tm num] isNat N and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num T) (shadowed_0 num) (domain num T) L) I)).
list_hd : {T:tp} tm (rel (list T) T) = [T:tp] lam2 (num arrow T arrow form) T form ([L:tm (num arrow T arrow form)] [X:tm T] @ T form (@ num (T arrow form) L zero) X).
list_nth : {T:tp} tm (list T arrow num arrow T arrow form) = [T:tp] lam3 (num arrow T arrow form) num T form ([L:tm (num arrow T arrow form)] [N:tm num] [X:tm T] @ T form (@ num (T arrow form) L N) X).
list_cat : {T:tp} tm (list T arrow list T arrow list T) = [T:tp] lam4 (list T) (num arrow T arrow form) num T form ([L1:tm (list T)] [L2:tm (num arrow T arrow form)] [I:tm num] [X:tm T] exists num ([N:tm num] @ num form (@ (list T) (num arrow form) (list_length T) L1) N and if (lt I N) (@ T form (@ num (shadowed_0 T) L1 I) X) (@ T form (@ num (T arrow form) L2 (minus I N)) X))).
list_member : {T:tp} tm (list T arrow set T) = [T:tp] lam2 (num arrow T arrow form) T form ([L:tm (num arrow T arrow form)] [X:tm T] exists num ([I:tm num] @ T form (@ num (T arrow form) L I) X)).
list_eq : {T:tp} tm (eqrel T arrow list T arrow list T arrow form) = [T:tp] lam3 (per T) (rel num T) (rel num T) form ([Eq:tm (per T)] [l8:tm (rel num T)] [l9:tm (rel num T)] @ (rel num T) form (@ (rel num T) (shadowed_0 (rel num T)) (@ (per T) (per (rel num T)) (@ (per num) (per T arrow per (rel num T)) (per_rel num T) eq_arith) Eq) l8) l9 and @ (list T) form (@ (eqrel T) (list T arrow form) (list_valid T) Eq) l8).
list_last : {T:tp} tm (rel (list T) T) = [T:tp] lam2 (list T) T form ([L:tm (list T)] [X:tm T] exists num ([N:tm num] @ num form (@ (list T) (num arrow form) (list_length T) L) N and @ T form (@ num (T arrow form) (@ (list T) (num arrow T arrow form) (list_nth T) L) (pred N)) X)).
list_droplast : {T:tp} tm (list T arrow list T) = [T:tp] lam3 (num arrow T arrow form) num T form ([L:tm (num arrow T arrow form)] [I:tm num] [X:tm T] @ T form (@ num (T arrow form) L I) X and not (@ num form (@ (list T) (num arrow form) (list_length T) L) (succ I))).
sublist : {T:tp} tm (num arrow num arrow list T arrow list T) = [T:tp] lam5 num num (num arrow T arrow form) num T form ([First:tm num] [Length:tm num] [L:tm (num arrow T arrow form)] [I:tm num] [X:tm T] @ num form (@ num (shadowed_0 num) inrange Length) I and @ T form (@ num (T arrow form) L (plus I First)) X).
list_is_nil : {T:tp} tm (list T arrow form) = [T:tp] lam (num arrow T arrow form) form ([l:tm (num arrow T arrow form)] forall2 num T ([i1:tm num] [x3:tm T] not (@ T form (@ num (T arrow form) l i1) x3))).
list_is_not_nil : {T:tp} tm (list T arrow form) = [T:tp] lam (list T) form ([l:tm (list T)] not (@ (list T) form (list_is_nil T) l)).
list_tl : {T:tp} tm (list T arrow list T) = [T:tp] lam3 (num arrow T arrow form) num T form ([l:tm (num arrow T arrow form)] [i1:tm num] [x3:tm T] @ T form (@ num (T arrow form) l (succ i1)) x3 and not (eq num (succ i1) zero)).
list_append : {T:tp} tm (eqrel T arrow list T arrow T arrow list T arrow form) = [T:tp] lam4 (T arrow T arrow form) (list T) T (list T) form ([Eq:tm (T arrow T arrow form)] [l8:tm (list T)] [x3:tm T] [l9:tm (list T)] exists num ([n:tm num] @ num form (@ (list T) (num arrow form) (list_length T) l8) n and @ num form (@ (list T) (num arrow form) (list_length T) l9) (succ n) and forall num ([i1:tm num] if (eq num i1 n) (@ T form (@ T (T arrow form) Eq x3) x3 and forall T ([y:tm T] @ T form (@ T (T arrow form) Eq x3) y equiv @ T form (@ num (shadowed_0 T) l9 i1) y)) (forall T ([y:tm T] @ T form (@ num (shadowed_0 T) l8 i1) y equiv @ T form (@ num (shadowed_0 T) l9 i1) y))))).
list_addlast : {T:tp} tm (eqrel T arrow list T arrow T arrow list T) = [T:tp] lam5 (T arrow T arrow form) (num arrow T arrow form) T num T form ([Eq:tm (T arrow T arrow form)] [l:tm (num arrow T arrow form)] [y:tm T] [i1:tm num] [x3:tm T] @ T form (@ num (T arrow form) l i1) x3 or @ num form (@ (list T) (num arrow form) (list_length T) l) i1 and @ T form (@ T (T arrow form) Eq y) x3).
list_singleton : {T:tp} tm (eqrel T) -> tm T -> tm (list T) = [T:tp] [Eq:tm (eqrel T)] [x3:tm T] @ (list T) (list T) (@ T (list T arrow list T) (@ (eqrel T) (T arrow list T arrow list T) (list_cons T) Eq) x3) (list_nil T).
list_pair : {T:tp} tm (eqrel T) -> tm T -> tm T -> tm (list T) = [T:tp] [Eq:tm (eqrel T)] [x3:tm T] [x4:tm T] @ (list T) (list T) (@ T (list T arrow list T) (@ (eqrel T) (T arrow list T arrow list T) (list_cons T) Eq) x3) (list_singleton T Eq x4).
sublist_proper_range : {T:tp} tm (list T arrow num arrow num arrow form) = [T:tp] lam3 (list T) num num form ([Lst:tm (list T)] [F:tm num] [L:tm num] isNat L and exists num ([n:tm num] @ num form (@ (list T) (num arrow form) (list_length T) Lst) n and @ num form (@ num (shadowed_0 num) inrange n) F and leq (plus F L) n)).
list_member_i : {X1:tp} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L) X) = [X1:tp] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] exists num ([I1:tm num] @ X1 form (@ num (X1 arrow form) x3 I1) x4)) L X (exists_i num ([x3:tm num] @ X1 form (@ num (X1 arrow form) L x3) X) I (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p1)).
list_member_i' : {X1:tp} {L:tm (num arrow X1 arrow form)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) L I) X) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L) X) = [X1:tp] [L:tm (num arrow X1 arrow form)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) L I) X)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] exists num ([I1:tm num] @ X1 form (@ num (X1 arrow form) x3 I1) x4)) L X (exists_i num ([x3:tm num] @ X1 form (@ num (X1 arrow form) L x3) X) I p1).
list_member_e : {X1:tp} {L:tm (list X1)} {X:tm X1} pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L) X) -> pf (exists num ([i1:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i1) X)) = [X1:tp] [L:tm (list X1)] [X:tm X1] [p1:pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L) X)] exists_e num ([x3:tm num] @ X1 form (@ num (X1 arrow form) L x3) X) (exists num ([x3:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) L) x3) X)) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4)) L X p1) ([I:tm num] [p2:pf (@ X1 form (@ num (shadowed_0 X1) L I) X)] exists_i num ([x3:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) L) x3) X) I (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p2)).
list_nth_i : {X1:tp} {L:tm (num arrow X1 arrow form)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) L I) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) = [X1:tp] [L:tm (num arrow X1 arrow form)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) L I) X)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p1.
list_nth_e : {X1:tp} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (@ X1 form (@ num (shadowed_0 X1) L I) X) = [X1:tp] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p1.
list_nth_hd : {X1:tp} {L:tm (list X1)} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) zero) X) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X) = [X1:tp] [L:tm (list X1)] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) zero) X)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L X (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L zero X p1).
list_hd_i : {X1:tp} {L:tm (num arrow X1 arrow form)} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) L zero) X) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X) = [X1:tp] [L:tm (num arrow X1 arrow form)] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) L zero) X)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L X p1.
list_hd_e : {X1:tp} {L:tm (list X1)} {X:tm X1} pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X) -> pf (@ X1 form (@ num (shadowed_0 X1) L zero) X) = [X1:tp] [L:tm (list X1)] [X:tm X1] [p1:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X)] def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L X p1.
list_hd_nth : {X1:tp} {L:tm (list X1)} {X:tm X1} pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) zero) X) = [X1:tp] [L:tm (list X1)] [X:tm X1] [p1:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L zero X (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L X p1).
list_hd_member : {X1:tp} {L:tm (list X1)} {X:tm X1} pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L) X) = [X1:tp] [L:tm (list X1)] [X:tm X1] [p1:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4)) L X (exists_i num ([x3:tm num] @ X1 form (@ num (X1 arrow form) L x3) X) zero (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L X p1)).
list_nil_e : {X1:tp} {X:tm num} {Y:tm X1} {A:tform} pf (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) X) Y) -> pf A = [X1:tp] [X:tm num] [Y:tm X1] [A:tform] [p2:pf (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) X) Y)] false_e A (def2_e X1 num ([x3:tm num] [x4:tm X1] false) X Y p2).
list_cons_i1 : {I:tm num} {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} {Hd:tm X1} {Tl:tm (list X1)} pf (eq num I zero) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq X) Hd) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) I) X) = [I:tm num] [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [Hd:tm X1] [Tl:tm (list X1)] [p1:pf (eq num I zero)] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) Hd)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl I X (if_i1 (eq num I zero) (@ X1 form (@ X1 (X1 arrow form) Eq X) Hd) (_@2 num X1 form Tl (pred I) X) p1 p2).
list_cons_i2 : {I:tm num} {X1:tp} {Tl:tm (num arrow X1 arrow form)} {X:tm X1} {Eq:tm (eqrel X1)} {Hd:tm X1} pf (not (eq num I zero)) -> pf (@ X1 form (@ num (X1 arrow form) Tl (pred I)) X) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) I) X) = [I:tm num] [X1:tp] [Tl:tm (num arrow X1 arrow form)] [X:tm X1] [Eq:tm (eqrel X1)] [Hd:tm X1] [p1:pf (not (eq num I zero))] [p2:pf (@ X1 form (@ num (X1 arrow form) Tl (pred I)) X)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl I X (if_i2 (eq num I zero) (@ X1 form (@ num (X1 arrow form) Tl (pred I)) X) (_@2 X1 X1 form Eq X Hd) p1 p2).
list_cons_e1 : {X1:tp} {Eq:tm (eqrel X1)} {Hd:tm X1} {Tl:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) I) X) -> pf (eq num I zero) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) = [X1:tp] [Eq:tm (eqrel X1)] [Hd:tm X1] [Tl:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) I) X)] [p2:pf (eq num I zero)] if_e1 (_eq num I zero) (_@2 X1 X1 form Eq X Hd) (_@2 num X1 form Tl (pred I) X) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl I X p1) p2.
list_cons_e2 : {X1:tp} {Eq:tm (eqrel X1)} {Hd:tm X1} {Tl:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) I) X) -> pf (not (eq num I zero)) -> pf (@ X1 form (@ num (shadowed_0 X1) Tl (pred I)) X) = [X1:tp] [Eq:tm (eqrel X1)] [Hd:tm X1] [Tl:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) I) X)] [p2:pf (not (eq num I zero))] if_e2 (_eq num I zero) (_@2 X1 X1 form Eq X Hd) (_@2 num X1 form Tl (pred I) X) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl I X p1) p2.
list_cons_e : {X1:tp} {Eq:tm (eqrel X1)} {Hd:tm X1} {Tl:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) I) X) -> pf (eq num I zero and @ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd or not (eq num I zero) and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) Tl) (pred I)) X) = [X1:tp] [Eq:tm (eqrel X1)] [Hd:tm X1] [Tl:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) I) X)] or_e (eq num I zero) (not (eq num I zero)) (eq num I zero and @ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd or not (eq num I zero) and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) Tl) (pred I)) X) (excluded_middle (eq num I zero)) ([q1:pf (eq num I zero)] or_i1 (eq num I zero and @ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) (not (eq num I zero) and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) Tl) (pred I)) X) (and_i (eq num I zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) q1 (list_cons_e1 X1 Eq Hd Tl I X (list_nth_e X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) I X p1) q1))) ([q2:pf (not (eq num I zero))] or_i2 (not (eq num I zero) and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) Tl) (pred I)) X) (eq num I zero and @ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) (and_i (not (eq num I zero)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) Tl) (pred I)) X) q2 (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) Tl (pred I) X (list_cons_e2 X1 Eq Hd Tl I X (list_nth_e X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) I X p1) q2)))).
list_is_nil_i : {X1:tp} {L:tm (list X1)} pf (not (@ (list X1) form (list_is_not_nil X1) L)) -> pf (@ (list X1) form (list_is_nil X1) L) = [X1:tp] [L:tm (list X1)] [p1:pf (not (@ (list X1) form (list_is_not_nil X1) L))] def1_i (list X1) ([x3:tm (list X1)] forall2 num X1 ([i1:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i1) x4))) L (forall2_i num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) x4)) ([i2:tm num] [x5:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) L i2) x5) ([p2:pf (@ X1 form (@ num (shadowed_0 X1) L i2) x5)] not_e (@ (list X1) form (list_is_not_nil X1) L) p1 (def1_i (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) L (not_i (@ (list X1) form (list_is_nil X1) L) ([p3:pf (@ (list X1) form (list_is_nil X1) L)] cut (not (@ X1 form (@ num (X1 arrow form) L i2) x5)) false (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) x4)) (def1_e (list X1) ([x3:tm (list X1)] forall2 num X1 ([i3:tm num] [x6:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i3) x6))) L p3) i2 x5) ([p4:pf (not (@ X1 form (@ num (shadowed_0 X1) L i2) x5))] not_e (@ X1 form (@ num (shadowed_0 X1) L i2) x5) p4 p2))))))).
list_is_not_nil_i : {X1:tp} {L:tm (list X1)} pf (not (@ (list X1) form (list_is_nil X1) L)) -> pf (@ (list X1) form (list_is_not_nil X1) L) = [X1:tp] [L:tm (list X1)] [p1:pf (not (@ (list X1) form (list_is_nil X1) L))] def1_i (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) L (not_i (@ (list X1) form (list_is_nil X1) L) ([p2:pf (@ (list X1) form (list_is_nil X1) L)] not_e (@ (list X1) form (list_is_nil X1) L) p1 p2)).
list_is_not_nil_e : {X1:tp} {L:tm (list X1)} pf (@ (list X1) form (list_is_not_nil X1) L) -> pf (not (@ (list X1) form (list_is_nil X1) L)) = [X1:tp] [L:tm (list X1)] [p1:pf (@ (list X1) form (list_is_not_nil X1) L)] not_i (@ (list X1) form (list_is_nil X1) L) ([p2:pf (@ (list X1) form (list_is_nil X1) L)] not_e (@ (list X1) form (list_is_nil X1) L) (def1_e (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) L p1) p2).
list_is_nil_nil : {X1:tp} pf (@ (list X1) form (list_is_nil X1) (list_nil X1)) = [X1:tp] def1_i (list X1) ([x3:tm (list X1)] forall2 num X1 ([i1:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i1) x4))) (list_nil X1) (forall2_i num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) x3) x4)) ([i2:tm num] [x5:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) i2) x5) ([p1:pf (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) i2) x5)] def2_e X1 num ([x3:tm num] [x4:tm X1] false) i2 x5 p1))).
list_nil_false : {X1:tp} {L:tm (list X1)} pf (@ (list X1) form (list_is_nil X1) L) -> pf (@ (list X1) form (list_is_not_nil X1) L) -> pf false = [X1:tp] [L:tm (list X1)] [p1:pf (@ (list X1) form (list_is_nil X1) L)] [p2:pf (@ (list X1) form (list_is_not_nil X1) L)] not_e (@ (list X1) form (list_is_nil X1) L) (def1_e (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) L p2) p1.
list_nil_no_elem : {X1:tp} {L:tm (list X1)} pf (@ (list X1) form (list_is_nil X1) L) -> pf (forall2 num X1 ([i1:tm num] [x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i1) x3))) = [X1:tp] [L:tm (list X1)] [p1:pf (@ (list X1) form (list_is_nil X1) L)] forall2_i num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) x4)) ([i2:tm num] [x4:tm X1] forall2_e num X1 ([x3:tm num] [x5:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) x5)) (def1_e (list X1) ([x3:tm (list X1)] forall2 num X1 ([i3:tm num] [x5:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i3) x5))) L p1) i2 x4).
list_nil_no_member : {X1:tp} {L:tm (list X1)} pf (@ (list X1) form (list_is_nil X1) L) -> pf (forall X1 ([x3:tm X1] not (@ X1 form (@ (list X1) (set X1) (list_member X1) L) x3))) = [X1:tp] [L:tm (list X1)] [p1:pf (@ (list X1) form (list_is_nil X1) L)] forall_i X1 ([x3:tm X1] not (@ X1 form (@ (list X1) (set X1) (list_member X1) L) x3)) ([x4:tm X1] not_i (@ X1 form (@ (list X1) (set X1) (list_member X1) L) x4) ([q1:pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L) x4)] exists_e num ([x3:tm num] @ X1 form (@ num (X1 arrow form) L x3) x4) false (def2_e X1 (list X1) ([x3:tm (list X1)] [x5:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x5)) L x4 q1) ([i1:tm num] [q2:pf (@ X1 form (@ num (shadowed_0 X1) L i1) x4)] cut (forall2 num X1 ([i2:tm num] [x5:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i2) x5))) false (list_nil_no_elem X1 L p1) ([q3:pf (forall2 num X1 ([i3:tm num] [x6:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i3) x6)))] false_e false (not_e (@ X1 form (@ num (shadowed_0 X1) L i1) x4) (forall2_e num X1 ([x3:tm num] [x5:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) x5)) q3 i1 x4) q2))))).
list_length_e1 : {X1:tp} {L:tm (list X1)} {N:tm num} {I:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) = [X1:tp] [L:tm (list X1)] [N:tm num] [I:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N) I) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange N) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I2 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I2)) L N p1)) I) p2.
list_length_e2 : {X1:tp} {L:tm (list X1)} {N:tm num} {I:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) = [X1:tp] [L:tm (list X1)] [N:tm num] [I:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)] equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) I) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange N) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I2 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I2)) L N p1)) I) p2.
list_length_uniq : {X1:tp} {L:tm (list X1)} {N:tm num} {M:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) M) -> pf (eq num N M) = [X1:tp] [L:tm (list X1)] [N:tm num] [M:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) M)] and_l (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (eq num N M) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1) ([p11:pf (isNat N)] [p12:pf (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I))] and_l (isNat M) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange M) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (eq num N M) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L M p2) ([p21:pf (isNat M)] [p22:pf (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange M) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I))] or3_e (> N M) (== num N M) (< N M) (eq num N M) (gt_eq_lt N M) ([p3:pf (gt N M)] false_e (eq num N M) (not_e (eq num M M) (lt->neq M M (and_e2 (geq M zero) (lt M M) (and_e2 (isInt M) (geq M zero and lt M M) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) M M (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange M) M) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) M) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange M) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) p22 M) (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N) M) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) M) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) p12 M) (def2_i num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N M (and3_i (isInt M) (>= M zero) (gt N M) (isNat->isInt M p21) (isNat->geq_zero M p21) p3)))))))) (refl num M))) ([p4:pf (eq num N M)] p4) ([p5:pf (gt M N)] false_e (eq num N M) (not_e (eq num N N) (lt->neq N N (and_e2 (geq N zero) (lt N N) (and_e2 (isInt N) (geq N zero and lt N N) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N N (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) N) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) N) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) p12 N) (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange M) N) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) N) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange M) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) p22 N) (def2_i num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) M N (and3_i (isInt N) (>= N zero) (gt M N) (isNat->isInt N p11) (isNat->geq_zero N p11) p5)))))))) (refl num N))))).
list_length_uniq' : {X1:tp} {L:tm (list X1)} {N:tm num} {M:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) M)) -> pf (not (eq num N M)) = [X1:tp] [L:tm (list X1)] [N:tm num] [M:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) M))] not_i (eq num N M) ([q1:pf (eq num N M)] cut (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)) false (congr num N M ([z1:tm num] not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) z1)) q1 p2) ([q2:pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N))] not_e (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) q2 p1)).
list_length_isNat : {X1:tp} {L:tm (list X1)} {N:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (isNat N) = [X1:tp] [L:tm (list X1)] [N:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] and_e1 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1).
list_length_nil : {X1:tp} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (list_nil X1)) zero) = [X1:tp] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) (list_nil X1) zero (and_i (isInt zero and geq zero zero) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange zero) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (list_nil X1)) x3)) (and_i (isInt zero) (geq zero zero) p_zero (ord_reflexivity zero)) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange zero) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (list_nil X1)) x3) ([i1:tm num] equiv_i (@ num form (@ num (shadowed_0 num) inrange zero) i1) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (list_nil X1)) i1) (imp_i (@ num form (@ num (shadowed_0 num) inrange zero) i1) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (list_nil X1)) i1) ([p1:pf (@ num form (@ num (shadowed_0 num) inrange zero) i1)] and3_l (isInt i1) (geq i1 zero) (lt i1 zero) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (list_nil X1)) i1) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) zero i1 p1) ([p11:pf (isInt i1)] [p12:pf (geq i1 zero)] [p13:pf (lt i1 zero)] false_e (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (list_nil X1)) i1) (not_e (geq i1 zero) p13 p12)))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (list_nil X1)) i1) (@ num form (@ num (shadowed_0 num) inrange zero) i1) ([p2:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (list_nil X1)) i1)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (list_nil X1) i1) x3) (@ num form (@ num (shadowed_0 num) inrange zero) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (list_nil X1) i1 p2) ([y:tm X1] [p3:pf (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) i1) y)] false_e (@ num form (@ num (shadowed_0 num) inrange zero) i1) (def2_e X1 num ([x3:tm num] [x4:tm X1] false) i1 y p3))))))).
list_length_nil' : {X1:tp} {L:tm (list X1)} pf (@ (list X1) form (list_is_nil X1) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) zero) = [X1:tp] [L:tm (list X1)] [p1:pf (@ (list X1) form (list_is_nil X1) L)] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L zero (and_i (isNat zero) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange zero) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3)) n_zero (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange zero) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) ([i1:tm num] equiv_false (@ num form (@ num (shadowed_0 num) inrange zero) i1) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i1) (not_inrange_zero i1) (not_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i1) ([p2:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i1)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i1) x3) false (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L i1 p2) ([x3:tm X1] [p3:pf (@ X1 form (@ num (shadowed_0 X1) L i1) x3)] cut (not (@ X1 form (@ num (X1 arrow form) L i1) x3)) false (forall2_e num X1 ([x4:tm num] [x5:tm X1] not (@ X1 form (@ num (X1 arrow form) L x4) x5)) (def1_e (list X1) ([x4:tm (list X1)] forall2 num X1 ([i2:tm num] [x5:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) x5))) L p1) i1 x3) ([p4:pf (not (@ X1 form (@ num (shadowed_0 X1) L i1) x3))] not_e (@ X1 form (@ num (shadowed_0 X1) L i1) x3) p4 p3))))))).
list_length_nil_e : {X1:tp} {L:tm (list X1)} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) zero) -> pf (@ (list X1) form (list_is_nil X1) L) = [X1:tp] [L:tm (list X1)] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) zero)] def1_i (list X1) ([x3:tm (list X1)] forall2 num X1 ([i1:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i1) x4))) L (forall2_i num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) x4)) ([i2:tm num] [x5:tm X1] cut (not (@ num form (@ num (shadowed_0 num) inrange zero) i2) equiv not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2)) (not (@ X1 form (@ num (shadowed_0 X1) L i2) x5)) (equiv_not_i (@ num form (@ num (shadowed_0 num) inrange zero) i2) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange zero) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat zero) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange zero) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L zero p1)) i2)) ([p3:pf (not (@ num form (@ num (shadowed_0 num) inrange zero) i2) equiv not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2))] cut (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2)) (not (@ X1 form (@ num (shadowed_0 X1) L i2) x5)) (equiv_e1 (not (@ num form (@ num (shadowed_0 num) inrange zero) i2)) (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2)) p3 (not_inrange_zero i2)) ([p4:pf (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2))] cut (not (exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) L i2) y))) (not (@ X1 form (@ num (shadowed_0 X1) L i2) x5)) (gdef2_e form num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L i2 ([z1:tm form] not z1) p4) ([p5:pf (not (exists X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L i2) y)))] cut (forall X1 ([X:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i2) X))) (not (@ X1 form (@ num (shadowed_0 X1) L i2) x5)) (not_EA_not X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) L i2) x3) p5) ([p6:pf (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i2) y)))] forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i2) x3)) p6 x5)))))).
list_length_not_nil : {X1:tp} {L:tm (list X1)} {N:tm num} pf (@ (list X1) form (list_is_not_nil X1) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (gt N zero) = [X1:tp] [L:tm (list X1)] [N:tm num] [p1:pf (@ (list X1) form (list_is_not_nil X1) L)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] cut (not (@ (list X1) form (list_is_nil X1) L)) (gt N zero) (def1_e (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) L p1) ([p3:pf (not (@ (list X1) form (list_is_nil X1) L))] cut (not (forall2 num X1 ([i1:tm num] [x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) x3)))) (gt N zero) (gdef1_e form (list X1) ([x3:tm (list X1)] forall2 num X1 ([i2:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i2) x4))) L ([z1:tm form] not z1) p3) ([p4:pf (not (forall2 num X1 ([i3:tm num] [x5:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i3) x5))))] cut (exists2 num X1 ([X:tm num] [Y:tm X1] not (not (@ X1 form (@ num (shadowed_0 X1) L X) Y)))) (gt N zero) (not_AE_not2 num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) x4)) p4) ([p5:pf (exists2 num X1 ([i4:tm num] [x6:tm X1] not (not (@ X1 form (@ num (shadowed_0 X1) L i4) x6))))] exists2_e num X1 ([x3:tm num] [x4:tm X1] not (not (@ X1 form (@ num (shadowed_0 X1) L x3) x4))) (gt N zero) p5 ([i5:tm num] [x7:tm X1] [p6:pf (not (not (@ X1 form (@ num (shadowed_0 X1) L i5) x7)))] cut (@ X1 form (@ num (shadowed_0 X1) L i5) x7) (gt N zero) (not_not_e (@ X1 form (@ num (shadowed_0 X1) L i5) x7) p6) ([p7:pf (@ X1 form (@ num (shadowed_0 X1) L i5) x7)] cut (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i5) (gt N zero) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L i5 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i5) x3) x7 p7)) ([p8:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i5)] cut (@ num form (@ num (shadowed_0 num) inrange N) i5 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i5) (gt N zero) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p2)) i5) ([p9:pf (@ num form (@ num (shadowed_0 num) inrange N) i5 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i5)] cut (@ num form (@ num (shadowed_0 num) inrange N) i5) (gt N zero) (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) i5) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i5) p9 p8) ([pp:pf (@ num form (@ num (shadowed_0 num) inrange N) i5)] or3_e (> N zero) (== num N zero) (< N zero) (gt N zero) (gt_eq_lt N zero) ([p10:pf (gt N zero)] p10) ([p11:pf (eq num N zero)] false_e (gt N zero) (not_e (@ num form (@ num (shadowed_0 num) inrange zero) i5) (not_inrange_zero i5) (congr num zero N ([z2:tm num] @ num form (@ num (shadowed_0 num) inrange z2) i5) (symm num N zero p11) pp))) ([p12:pf (lt N zero)] false_e (gt N zero) (not_e (geq N zero) p12 (isNat->geq_zero N (list_length_isNat X1 L N p2)))))))))))).
list_length_exists : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) n)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (exists num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (lam2 (list X1) num form ([x4:tm (list X1)] [x5:tm num] isNat x5 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x5) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x4) I))) L) x3)) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i3) y)))))) Eq L p1)) ([n:tm num] [p2:pf (isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y)))))] exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (lam2 (list X1) num form ([x4:tm (list X1)] [x5:tm num] isNat x5 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x5) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x4) I))) L) x3) n (def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L n (and_i (isNat n) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) L) x3)) (and_e1 (isNat n) (forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y))))) p2) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) L) x3) ([i6:tm num] equiv_i (@ num form (@ num (shadowed_0 num) inrange n) i6) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i6) (imp_i (@ num form (@ num (shadowed_0 num) inrange n) i6) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i6) ([p3:pf (@ num form (@ num (shadowed_0 num) inrange n) i6)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i6) y)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i6) (imp_e (@ num form (@ num (shadowed_0 num) inrange n) i6) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L i6) y))) (and_e1 (@ num form (@ num (shadowed_0 num) inrange n) i6 imp exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L i6) y))) (not (@ num form (@ num (shadowed_0 num) inrange n) i6) imp forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i6) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n) (forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i7) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (X1 arrow form) L i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i7) y))))) p2) i6)) p3) ([x13:tm X1] [p31:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) Y equiv @ X1 form (@ num (shadowed_0 X1) L i6) Y))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 equiv @ X1 form (@ num (shadowed_0 X1) L i6) x13) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i6) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i6) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13) (forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) Y equiv @ X1 form (@ num (shadowed_0 X1) L i6) Y)) p31) x13) ([p32:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 equiv @ X1 form (@ num (shadowed_0 X1) L i6) x13)] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L i6 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i6) x3) x13 (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13) (@ X1 form (@ num (shadowed_0 X1) L i6) x13) p32 (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13) (forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) Y equiv @ X1 form (@ num (shadowed_0 X1) L i6) Y)) p31))))))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i6) (@ num form (@ num (shadowed_0 num) inrange n) i6) ([p4:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i6)] suppose_not (@ num form (@ num (shadowed_0 num) inrange n) i6) ([p5:pf (not (@ num form (@ num (shadowed_0 num) inrange n) i6))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i6) x3) false (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L i6 p4) ([y:tm X1] [p51:pf (@ X1 form (@ num (shadowed_0 X1) L i6) y)] cut (not (@ num form (@ num (shadowed_0 num) inrange n) i6) imp forall X1 ([y1:tm X1] not (@ X1 form (@ num (X1 arrow form) L i6) y1))) false (and_e2 (@ num form (@ num (shadowed_0 num) inrange n) i6 imp exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y2 equiv @ X1 form (@ num (X1 arrow form) L i6) y2))) (not (@ num form (@ num (shadowed_0 num) inrange n) i6) imp forall X1 ([y3:tm X1] not (@ X1 form (@ num (X1 arrow form) L i6) y3))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y4 equiv @ X1 form (@ num (X1 arrow form) L x3) y4))) (forall X1 ([y5:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y5)))) (and_e2 (isNat n) (forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i8) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y6 equiv @ X1 form (@ num (X1 arrow form) L i8) y6))) (forall X1 ([y7:tm X1] not (@ X1 form (@ num (X1 arrow form) L i8) y7))))) p2) i6)) ([p52:pf (not (@ num form (@ num (shadowed_0 num) inrange n) i6) imp forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i6) Y)))] false_e false (not_e (@ X1 form (@ num (shadowed_0 X1) L i6) y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i6) x3)) (imp_e (not (@ num form (@ num (shadowed_0 num) inrange n) i6)) (forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i6) Y))) p52 p5) y) p51))))))))))).
list_length_succ : {N:tm num} {I:tnum} {X1:tp} {L:tm (rel num X1)} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I) equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred I)) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X) -> pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) I) = [N:tm num] [I:tnum] [X1:tp] [L:tm (rel num X1)] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I) equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred I))] [p2:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] [p3:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X)] or_e (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) (not (@ num form (@ num (shadowed_0 num) inrange N) (pred I))) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) I) (excluded_middle (@ num form (@ num (shadowed_0 num) inrange N) (pred I))) ([p4:pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L (pred I)) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) I) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L (pred I) (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred I)) p1 p4)) ([ya:tm X1] [p5:pf (@ X1 form (@ num (shadowed_0 X1) L (pred I)) ya)] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) I (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) I) x3) ya (def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq X L I ya (and_i (eq num I zero imp _@2 X1 X1 form Eq ya X) (not (eq num I zero) imp @ X1 form (@ num (shadowed_0 X1) L (pred I)) ya) (imp_i (eq num I zero) (_@2 X1 X1 form Eq ya X) ([p6:pf (eq num I zero)] cut (>= (+ (pred I) one) (+ zero one)) (_@2 X1 X1 form Eq ya X) (greatereq_plus_cong2 (pred I) zero one (inrange_e2 N (pred I) p4)) ([p61:pf (geq (plus (minus I one) one) (plus zero one))] cut (geq I (plus zero one)) (_@2 X1 X1 form Eq ya X) (congr num I (+ (- I one) one) ([Z:tm num] geq Z (plus zero one)) (symm num (+ (- I one) one) I (cancel_a-b+b I one)) p61) ([p62:pf (geq I (plus zero one))] cut (gt I zero) (_@2 X1 X1 form Eq ya X) (congr num zero (pred (succ zero)) ([Z:tm num] gt I Z) (symm num (pred (succ zero)) zero (predsucc zero)) (greater_minus1_i I (plus zero one) p62)) ([p63:pf (gt I zero)] false_e (_@2 X1 X1 form Eq ya X) (not_e (eq num I zero) (gt->neq I zero p63) p6)))))) (imp_i (not (eq num I zero)) (@ X1 form (@ num (shadowed_0 X1) L (pred I)) ya) ([p7:pf (not (eq num I zero))] p5))))))) ([p8:pf (not (@ num form (@ num (shadowed_0 num) inrange N) (pred I)))] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) I (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) I) x3) X (def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq X L I X (and_i (eq num I zero imp @ X1 form (@ X1 (X1 arrow form) Eq X) X) (not (eq num I zero) imp _@2 num X1 form L (pred I) X) (imp_i (eq num I zero) (@ X1 form (@ X1 (X1 arrow form) Eq X) X) ([p9:pf (eq num I zero)] p3)) (imp_i (not (eq num I zero)) (_@2 num X1 form L (pred I) X) ([p10:pf (not (eq num I zero))] false_e (_@2 num X1 form L (pred I) X) (not_e (eq num I zero) p10 (inrange_succ_not_inrange_pred N I p2 p8)))))))).
list_length_succ1 : {N:tnum} {I:tnum} {X1:tp} {L:tm (rel num X1)} {Eq:tm (eqrel X1)} {X:tm X1} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I) equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred I)) -> pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) = [N:tnum] [I:tnum] [X1:tp] [L:tm (rel num X1)] [Eq:tm (eqrel X1)] [X:tm X1] [p1:pf (isNat N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I) equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred I))] [p3:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) I)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) I) x3) (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) I p3) ([ya:tm X1] [p4:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) I) ya)] or_e (eq num I zero) (not (eq num I zero)) (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) (excluded_middle (eq num I zero)) ([p5:pf (eq num I zero)] cut (> (succ N) zero) (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) (greater_plus1_i N zero (and_e2 (isInt N) (geq N zero) p1)) ([p51:pf (gt (succ N) zero)] inrange_i I (succ N) (congr num I zero ([Z:tm num] isInt Z) p5 p_zero) (congr num I zero ([Z:tm num] geq Z zero) p5 (ord_reflexivity zero)) (congr num I zero ([Z:tm num] lt Z (succ N)) p5 (gt_not_lt_eq (succ N) zero p51)))) ([p6:pf (not (eq num I zero))] cut (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred I)) p2 (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L (pred I) (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L (pred I)) x3) ya (imp_e (not (_eq num I zero)) (_@2 num X1 form L (pred I) ya) (and_e2 (_eq num I zero imp _@2 X1 X1 form Eq ya X) (not (_eq num I zero) imp _@2 num X1 form L (pred I) ya) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq X L I ya p4)) p6)))) ([p61:pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I))] cut (@ num form (@ num (shadowed_0 num) inrange (succ N)) (succ (pred I))) (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) (inrange_expand' N (pred I) p61) ([p62:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) (succ (pred I)))] congr num I (succ (pred I)) ([Z:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) Z) (symm num (succ (pred I)) I (succpred I)) p62)))).
list_length_no_elem : {X1:tp} {L:tm (list X1)} {N:tm num} {I:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) -> pf (not (exists X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) x3))) = [X1:tp] [L:tm (list X1)] [N:tm num] [I:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (not (@ num form (@ num (shadowed_0 num) inrange N) I))] not_i (exists X1 ([x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) x4)) ([q1:pf (exists X1 ([x5:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) x5))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) x3) false q1 ([x6:tm X1] [q2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) x6)] cut (@ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) false (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange N) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I2 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I2)) L N p1)) I) ([q3:pf (@ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)] cut (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) false (equiv_e1 (not (@ num form (@ num (shadowed_0 num) inrange N) I)) (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (equiv_not_i (@ num form (@ num (shadowed_0 num) inrange N) I) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) q3) p2) ([q4:pf (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I))] cut (not (exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) L I) y))) false (gdef2_e form num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L I ([z1:tm form] not z1) q4) ([q5:pf (not (exists X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L I) y)))] cut (forall X1 ([X:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) X))) false (not_EA_not X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) L I) x3) q5) ([q6:pf (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) y)))] not_e (@ X1 form (@ num (shadowed_0 X1) L I) x6) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) x3)) q6 x6) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I x6 q2))))))).
list_index_inrange_below : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (geq I zero) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) x3) (geq I zero) (list_length_exists X1 Eq L p1) ([N:tm num] [p3:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] and_e1 (geq I zero) (lt I N) (and_e2 (isInt I) (geq I zero and lt I N) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) I) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange N) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I2 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I2)) L N p3)) I) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L I (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L I) x3) X (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p2))))))).
list_index_inrange : {X1:tp} {L:tm (list X1)} {N:tm num} {I:tm num} {X:tm X1} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) = [X1:tp] [L:tm (list X1)] [N:tm num] [I:tm num] [X:tm X1] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) I) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange N) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I2 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I2)) L N p1)) I) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L I (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L I) x3) X (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p2))).
list_index_less_zero : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (lt I zero) -> pf false = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] [p3:pf (lt I zero)] not_e (< I zero) (greatereq_not_lt I zero (list_index_inrange_below X1 Eq L I X p1 p2)) p3.
list_index_isNat : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (isNat I) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) x3) (isInt I and geq I zero) (list_length_exists X1 Eq L p1) ([N:tm num] [p3:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] cut (@ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) (isInt I and geq I zero) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange N) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I2 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I2)) L N p3)) I) ([p4:pf (@ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)] cut (@ num form (@ num (shadowed_0 num) inrange N) I) (isInt I and geq I zero) (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) I) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) p4 (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L I (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L I) x3) X (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p2)))) ([p5:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and_i (isInt I) (geq I zero) (inrange_e1 N I p5) (inrange_e2 N I p5)))).
list_length_cons : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} {L:tm (list X1)} {N:tm num} pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) (succ N)) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [L:tm (list X1)] [N:tm num] [p0:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X)] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) (succ N) (and_i (isNat (succ N)) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) x3)) (isNat_succ_i N (and_e1 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1))) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) x3) ([i1:tm num] cut (@ num form (@ num (shadowed_0 num) inrange N) (pred i1) equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred i1)) (@ num form (@ num (shadowed_0 num) inrange (succ N)) i1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i1) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) (pred i1)) ([p2:pf (@ num form (@ num (shadowed_0 num) inrange N) (pred i1) equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred i1))] equiv_i (@ num form (@ num (shadowed_0 num) inrange (succ N)) i1) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i1) (imp_i (@ num form (@ num (shadowed_0 num) inrange (succ N)) i1) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i1) ([p3:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) i1)] list_length_succ N i1 X1 L Eq X p2 p3 p0)) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i1) (@ num form (@ num (shadowed_0 num) inrange (succ N)) i1) ([p4:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i1)] list_length_succ1 N i1 X1 L Eq X (and_e1 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) p2 p4)))))).
list_length_cons_gt_zero : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {Hd:tm X1} {L:tm (list X1)} {N:tm num} pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) N) -> pf (gt N zero) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [Hd:tm X1] [L:tm (list X1)] [N:tm num] [p0:pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd)] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) N)] cut (isNat N) (gt N zero) (list_length_isNat X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L) N p1) ([p11:pf (isNat N)] suppose_not (gt N zero) ([q11:pf (not (gt N zero))] cut (== num N zero or < N zero) false (or_e2 (> N zero) (== num N zero or < N zero) (gt_eq_lt N zero) q11) ([q12:pf (eq num N zero or gt zero N)] cut (eq num N zero) false (or_e1 (eq num N zero) (gt zero N) q12 (greatereq_not_lt N zero (isNat->geq_zero N p11))) ([q13:pf (eq num N zero)] cut (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) zero) false (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L) zero (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L) zero) x3) Hd (list_cons_i1 zero X1 Eq Hd Hd L (refl num zero) p0))) ([q3:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) zero)] cut (@ num form (@ num (shadowed_0 num) inrange N) zero) false (list_length_e2 X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L) N zero p1 q3) ([q4:pf (@ num form (@ num (shadowed_0 num) inrange N) zero)] not_e (eq num N zero) (gt->neq N zero (inrange_e3 N zero q4)) q13)))))).
list_length_cons_e : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {Hd:tm X1} {Tl:tm (list X1)} {N:tm num} pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) N) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Tl) (pred N)) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [Hd:tm X1] [Tl:tm (list X1)] [N:tm num] [p0:pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl)] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) N)] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) Tl (pred N) (and_i (isNat (pred N)) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (pred N)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) Tl) x3)) (isNat_pred_i N (list_length_isNat X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) N p1) (list_length_cons_gt_zero X1 Eq Hd Tl N p0 p1)) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (pred N)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) Tl) x3) ([i1:tm num] equiv_i (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) Tl) i1) (imp_i (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) Tl) i1) ([q2:pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1)] cut (@ num form (@ num (shadowed_0 num) inrange (succ (pred N))) (succ i1)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) Tl) i1) (inrange_expand' (pred N) i1 q2) ([q21:pf (@ num form (@ num (shadowed_0 num) inrange (succ (pred N))) (succ i1))] cut (@ num form (@ num (shadowed_0 num) inrange N) (succ i1)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) Tl) i1) (congr num N (succ (pred N)) ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange z1) (succ i1)) (symm num (succ (pred N)) N (succpred N)) q21) ([q22:pf (@ num form (@ num (shadowed_0 num) inrange N) (succ i1))] cut (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) (succ i1)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) Tl) i1) (list_length_e1 X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) N (succ i1) p1 q22) ([q23:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) (succ i1))] cut (> (succ i1) zero) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) Tl) i1) (trans_gt_geq (succ i1) i1 zero (succ_gt i1) (inrange_e2 (pred N) i1 q2)) ([q24:pf (gt (succ i1) zero)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) (succ i1)) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) Tl) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) (succ i1) q23) ([x3:tm X1] [q25:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) (succ i1)) x3)] cut (@ X1 form (@ num (shadowed_0 X1) Tl (pred (succ i1))) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) Tl) i1) (list_cons_e2 X1 Eq Hd Tl (succ i1) x3 q25 (gt->neq (succ i1) zero q24)) ([q26:pf (@ X1 form (@ num (shadowed_0 X1) Tl (pred (succ i1))) x3)] def2_i (rel num X1) num ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y)) Tl i1 (exists_i X1 ([x4:tm X1] @ X1 form (@ num (X1 arrow form) Tl i1) x4) x3 (congr num i1 (pred (succ i1)) ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) Tl z2) x3) (symm num (pred (succ i1)) i1 (predsucc i1)) q26)))))))))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) Tl) i1) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) ([q3:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) Tl) i1)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) Tl i1) x3) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) Tl i1 q3) ([x4:tm X1] [q31:pf (@ X1 form (@ num (shadowed_0 X1) Tl i1) x4)] cut (isNat i1) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (list_index_isNat X1 Eq Tl i1 x4 p2 (list_nth_i X1 Tl i1 x4 q31)) ([q32:pf (isNat i1)] cut (> (succ i1) zero) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (trans_gt_geq (succ i1) i1 zero (succ_gt i1) (isNat->geq_zero i1 q32)) ([q33:pf (gt (succ i1) zero)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) (succ i1)) x4) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (list_cons_i2 (succ i1) X1 Tl x4 Eq Hd (gt->neq (succ i1) zero q33) (congr num (pred (succ i1)) i1 ([z3:tm num] @ X1 form (@ num (shadowed_0 X1) Tl z3) x4) (predsucc i1) q31)) ([q34:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) (succ i1)) x4)] cut (@ num form (@ num (shadowed_0 num) inrange N) (succ i1)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (list_length_e2 X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) N (succ i1) p1 (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x5) y)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) (succ i1) (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) (succ i1)) x3) x4 q34))) ([q35:pf (@ num form (@ num (shadowed_0 num) inrange N) (succ i1))] cut (@ num form (@ num (shadowed_0 num) inrange (succ (pred N))) (succ i1)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (congr num (succ (pred N)) N ([z4:tm num] @ num form (@ num (shadowed_0 num) inrange z4) (succ i1)) (succpred N) q35) ([q36:pf (@ num form (@ num (shadowed_0 num) inrange (succ (pred N))) (succ i1))] cut (@ num form (@ num (shadowed_0 num) inrange (pred N)) (pred (succ i1))) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (inrange_shift (pred N) (succ i1) q36 (gt->neq (succ i1) zero q33)) ([q37:pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) (pred (succ i1)))] congr num i1 (pred (succ i1)) ([z5:tm num] @ num form (@ num (shadowed_0 num) inrange (pred N)) z5) (symm num (pred (succ i1)) i1 (predsucc i1)) q37)))))))))))).
list_length_tl : {X1:tp} {L:tm (list X1)} {N:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ (list X1) form (list_is_not_nil X1) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred N)) = [X1:tp] [L:tm (list X1)] [N:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (@ (list X1) form (list_is_not_nil X1) L)] cut (gt N zero) (@ num form (@ (list X1) (num arrow form) (lam2 (list X1) num form ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I))) (@ (list X1) (list X1) (list_tl X1) L)) (pred N)) (list_length_not_nil X1 L N p2 p1) ([p11:pf (gt N zero)] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) (@ (list X1) (list X1) (list_tl X1) L) (pred N) (and_i (isNat (pred N)) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (pred N)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ (list X1) (list X1) (list_tl X1) L)) x3)) (isNat_pred_i N (and_e1 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) p11) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (pred N)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ (list X1) (list X1) (list_tl X1) L)) x3) ([i1:tm num] cut (@ num form (@ num (shadowed_0 num) inrange N) (succ i1) equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (succ i1)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (list_tl X1) L)) i1) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) (succ i1)) ([p12:pf (@ num form (@ num (shadowed_0 num) inrange N) (succ i1) equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (succ i1))] equiv_i (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (list_tl X1) L)) i1) (imp_i (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (list_tl X1) L)) i1) ([p3:pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L (succ i1)) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (list_tl X1) L)) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L (succ i1) (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N) (succ i1)) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (succ i1)) p12 (inrange_shift2 N i1 p3))) ([x3:tm X1] [p33:pf (@ X1 form (@ num (shadowed_0 X1) L (succ i1)) x3)] cut (> (succ i1) zero) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ (list X1) (list X1) (list_tl X1) L)) i1) (trans_gt_geq (succ i1) i1 zero (succ_gt i1) (inrange_e2 (pred N) i1 p3)) ([p34:pf (gt (succ i1) zero)] def2_i (rel num X1) num ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y)) (@ (list X1) (list X1) (list_tl X1) L) i1 (exists_i X1 ([x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_tl X1) L) i1) x4) x3 (def3_i (list X1) num X1 ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero)) L i1 x3 (and_i (@ X1 form (@ num (shadowed_0 X1) L (succ i1)) x3) (!= num (succ i1) zero) p33 (gt->neq (succ i1) zero p34)))))))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) i1) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) ([p4:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) i1)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_tl X1) L) i1) x3) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ (list X1) (list X1) (list_tl X1) L) i1 p4) ([x4:tm X1] [p41:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i1) x4)] cut (@ X1 form (@ num (X1 arrow form) L (succ i1)) x4 and not (eq num (succ i1) zero)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x5)) x6 and not (eq num (succ x5) zero)) L i1 x4 p41) ([p42:pf (@ X1 form (@ num (shadowed_0 X1) L (succ i1)) x4 and not (eq num (succ i1) zero))] cut (@ num form (@ num (shadowed_0 num) inrange N) (succ i1)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) (succ i1)) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (succ i1)) p12 (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x5) y)) L (succ i1) (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L (succ i1)) x3) x4 (and_e1 (@ X1 form (@ num (shadowed_0 X1) L (succ i1)) x4) (not (eq num (succ i1) zero)) p42)))) ([p43:pf (@ num form (@ num (shadowed_0 num) inrange N) (succ i1))] cut (@ num form (@ num (shadowed_0 num) inrange (succ (pred N))) (succ i1)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (congr num (succ (pred N)) N ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange z1) (succ i1)) (succpred N) p43) ([p44:pf (@ num form (@ num (shadowed_0 num) inrange (succ (pred N))) (succ i1))] cut (@ num form (@ num (shadowed_0 num) inrange (pred N)) (pred (succ i1))) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (inrange_shift (pred N) (succ i1) p44 (and_e2 (@ X1 form (@ num (shadowed_0 X1) L (succ i1)) x4) (not (eq num (succ i1) zero)) p42)) ([p45:pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) (pred (succ i1)))] congr num i1 (pred (succ i1)) ([z2:tm num] @ num form (@ num (shadowed_0 num) inrange (pred N)) z2) (symm num (pred (succ i1)) i1 (predsucc i1)) p45)))))))))))).
list_length_tl_e : {X1:tp} {L:tm (list X1)} {N:tm num} pf (exists X1 ([hd:tm X1] @ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) hd)) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) N) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ N)) = [X1:tp] [L:tm (list X1)] [N:tm num] [p1:pf (exists X1 ([hd:tm X1] @ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) hd))] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) N)] and_l (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) I)) (@ num form (@ (list X1) (num arrow form) (lam2 (list X1) num form ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I))) L) (succ N)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) (@ (list X1) (list X1) (list_tl X1) L) N p2) ([p21:pf (isNat N)] [p22:pf (forall num ([i1:tm num] @ num form (@ num (shadowed_0 num) inrange N) i1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) i1))] exists_e X1 ([x3:tm X1] @ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) x3) (@ num form (@ (list X1) (num arrow form) (lam2 (list X1) num form ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I))) L) (succ N)) p1 ([hd:tm X1] [q1:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) hd)] cut (@ X1 form (@ num (X1 arrow form) L zero) hd) (@ num form (@ (list X1) (num arrow form) (lam2 (list X1) num form ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I))) L) (succ N)) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L hd q1) ([q11:pf (@ X1 form (@ num (shadowed_0 X1) L zero) hd)] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L (succ N) (and_i (isNat (succ N)) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) L) x3)) (isNat_succ_i N p21) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) L) x3) ([i2:tm num] equiv_i (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i2) (imp_i (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i2) ([q2:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2)] or_e (eq num i2 zero) (not (eq num i2 zero)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i2) (excluded_middle (eq num i2 zero)) ([q3:pf (eq num i2 zero)] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L i2 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i2) x3) hd (congr num i2 zero ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L z1) hd) q3 q11))) ([q4:pf (not (eq num i2 zero))] cut (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred i2)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i2) (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N) (pred i2)) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred i2)) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) x3) p22 (pred i2)) (inrange_shift N i2 q2 q4)) ([q41:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred i2))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_tl X1) L) (pred i2)) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i2) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ (list X1) (list X1) (list_tl X1) L) (pred i2) q41) ([x3:tm X1] [q42:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred i2)) x3)] cut (@ X1 form (@ num (X1 arrow form) L (succ (pred i2))) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) L) i2) (and_e1 (@ X1 form (@ num (X1 arrow form) L (succ (pred i2))) x3) (not (eq num (succ (pred i2)) zero)) (def3_e X1 num (list X1) ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero)) L (pred i2) x3 q42)) ([q43:pf (@ X1 form (@ num (shadowed_0 X1) L (succ (pred i2))) x3)] def2_i (rel num X1) num ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y)) L i2 (exists_i X1 ([x4:tm X1] @ X1 form (@ num (X1 arrow form) L i2) x4) x3 (congr num i2 (succ (pred i2)) ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) L z2) x3) (symm num (succ (pred i2)) i2 (succpred i2)) q43)))))))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2) (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) ([q2:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2)] or_e (eq num i2 zero) (not (eq num i2 zero)) (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) (excluded_middle (eq num i2 zero)) ([q3:pf (eq num i2 zero)] cut (@ num form (@ num (shadowed_0 num) inrange (succ N)) zero) (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) (inrange_zero (succ N) (trans_gt_geq (succ N) N zero (succ_gt N) (isNat->geq_zero N p21))) ([q31:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) zero)] congr num i2 zero ([z3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) z3) q3 q31)) ([q4:pf (not (eq num i2 zero))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i2) x3) (@ num form (@ num (shadowed_0 num) inrange (plus N one)) i2) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L i2 q2) ([x4:tm X1] [q21:pf (@ X1 form (@ num (shadowed_0 X1) L i2) x4)] cut (@ X1 form (@ num (shadowed_0 X1) L (succ (pred i2))) x4) (@ num form (@ num (shadowed_0 num) inrange (plus N one)) i2) (congr num (succ (pred i2)) i2 ([z4:tm num] @ X1 form (@ num (shadowed_0 X1) L z4) x4) (succpred i2) q21) ([q22:pf (@ X1 form (@ num (shadowed_0 X1) L (succ (pred i2))) x4)] cut (not (eq num (succ (pred i2)) zero)) (@ num form (@ num (shadowed_0 num) inrange (plus N one)) i2) (congr num (succ (pred i2)) i2 ([z5:tm num] not (eq num z5 zero)) (succpred i2) q4) ([q23:pf (not (eq num (succ (pred i2)) zero))] cut (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x5) y))) (@ (list X1) (list X1) (list_tl X1) L)) (pred i2)) (@ num form (@ num (shadowed_0 num) inrange (plus N one)) i2) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x5) y)) (@ (list X1) (list X1) (list_tl X1) L) (pred i2) (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_tl X1) L) (pred i2)) x3) x4 (def3_i (list X1) num X1 ([x3:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x5)) x6 and not (eq num (succ x5) zero)) L (pred i2) x4 (and_i (@ X1 form (@ num (shadowed_0 X1) L (succ (pred i2))) x4) (not (eq num (succ (pred i2)) zero)) q22 q23)))) ([q41:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred i2))] cut (@ num form (@ num (shadowed_0 num) inrange N) (pred i2)) (@ num form (@ num (shadowed_0 num) inrange (plus N one)) i2) (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) (pred i2)) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred i2)) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_tl X1) L)) x3) p22 (pred i2)) q41) ([q42:pf (@ num form (@ num (shadowed_0 num) inrange N) (pred i2))] inrange_shift' one N i2 n_one q42)))))))))))))).
list_valid_per : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (per X1) form (validper X1) Eq) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] and_e1 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y)))))) Eq L p1).
list_valid_nil : {X1:tp} {Eq:tm (per X1)} pf (@ (per X1) form (validper X1) Eq) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (list_nil X1)) = [X1:tp] [Eq:tm (per X1)] [p1:pf (@ (per X1) form (validper X1) Eq)] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i1) y)))))) Eq (list_nil X1) (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i2) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) (list_nil X1) i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (list_nil X1) i2) y)))))) p1 (exists_i num ([x3:tm num] isNat x3 and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i3) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) (list_nil X1) i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (list_nil X1) i3) y))))) zero (and_i (isInt zero and geq zero zero) (forall num ([x3:tm num] (@ num form (@ num (shadowed_0 num) inrange zero) x3 imp exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) (list_nil X1) x3) y))) and (not (@ num form (@ num (shadowed_0 num) inrange zero) x3) imp forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) x3) x4))))) (and_i (isInt zero) (geq zero zero) p_zero (ord_reflexivity zero)) (forall_i num ([x3:tm num] (@ num form (@ num (shadowed_0 num) inrange zero) x3 imp exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) (list_nil X1) x3) y))) and (not (@ num form (@ num (shadowed_0 num) inrange zero) x3) imp forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) x3) x4)))) ([i4:tm num] and_i (@ num form (@ num (shadowed_0 num) inrange zero) i4 imp exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) (list_nil X1) i4) y))) (not (@ num form (@ num (shadowed_0 num) inrange zero) i4) imp forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) i4) x3))) (imp_i (@ num form (@ num (shadowed_0 num) inrange zero) i4) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) (list_nil X1) i4) y))) ([p2:pf (@ num form (@ num (shadowed_0 num) inrange zero) i4)] and_l (geq i4 zero) (lt i4 zero) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (X1 arrow form) (list_nil X1) i4) y))) (and_e2 (isInt i4) (geq i4 zero and lt i4 zero) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) zero i4 p2)) ([p11:pf (geq i4 zero)] [p12:pf (lt i4 zero)] false_e (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) (list_nil X1) i4) y))) (not_e (geq i4 zero) p12 p11)))) (imp_i (not (@ num form (@ num (shadowed_0 num) inrange zero) i4)) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) i4) x3))) ([p2:pf (not (@ num form (@ num (shadowed_0 num) inrange zero) i4))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) i4) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) i4) y) ([p21:pf (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) i4) y)] def2_e X1 num ([x3:tm num] [x4:tm X1] false) i4 y p21))))))))).
list_valid_nil' : {X1:tp} {Eq:tm (per X1)} {L:tm (list X1)} pf (@ (per X1) form (validper X1) Eq) -> pf (@ (list X1) form (list_is_nil X1) L) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) = [X1:tp] [Eq:tm (per X1)] [L:tm (list X1)] [p1:pf (@ (per X1) form (validper X1) Eq)] [p2:pf (@ (list X1) form (list_is_nil X1) L)] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i1) y)))))) Eq L (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i2) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))) p1 (exists_i num ([x3:tm num] isNat x3 and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i3) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i3) y))))) zero (and_i (isNat zero) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange zero) x3) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) x4))))) n_zero (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange zero) x3) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) x4)))) ([i4:tm num] if_i2 (@ num form (@ num (shadowed_0 num) inrange zero) i4) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) x3))) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (not_inrange_zero i4) (forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) x3)) ([y:tm X1] forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) x4)) (def1_e (list X1) ([x3:tm (list X1)] forall2 num X1 ([i5:tm num] [x11:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i5) x11))) L p2) i4 y))))))).
list_valid_implies_length : {N:tnum} {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {L:tm (num arrow X1 arrow form)} pf (isNat N and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i1) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) = [N:tnum] [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [L:tm (num arrow X1 arrow form)] [p1:pf (isNat N and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i2) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N (and_i (isNat N) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) L) x3)) (and_e1 (isNat N) (forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i3) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i3) y))))) p1) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) L) x3) ([i4:tm num] equiv_i (@ num form (@ num (shadowed_0 num) inrange N) i4) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i4) (imp_i (@ num form (@ num (shadowed_0 num) inrange N) i4) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i4) ([p2:pf (@ num form (@ num (shadowed_0 num) inrange N) i4)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i4) y)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i4) (if_e1 (@ num form (@ num (shadowed_0 num) inrange N) i4) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) x3) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat N) (forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i5) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y))))) p1) i4) p2) ([x9:tm X1] [p21:pf (@ X1 form (@ X1 (X1 arrow form) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))] cut (@ X1 form (@ num (X1 arrow form) L i4) x9) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L) i4) (equiv_e1 (@ X1 form (@ X1 (X1 arrow form) Eq x9) x9) (@ X1 form (@ num (X1 arrow form) L i4) x9) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x9) x3 equiv @ X1 form (@ num (X1 arrow form) L i4) x3) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eq x9) x9) (forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L i4) y)) p21) x9) (and_e1 (@ X1 form (@ X1 (X1 arrow form) Eq x9) x9) (forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L i4) y)) p21)) ([p22:pf (@ X1 form (@ num (X1 arrow form) L i4) x9)] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L i4 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i4) x3) x9 p22))))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i4) (@ num form (@ num (shadowed_0 num) inrange N) i4) ([p3:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i4)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i4) x3) (@ num form (@ num (shadowed_0 num) inrange N) i4) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L i4 p3) ([y:tm X1] [p31:pf (@ X1 form (@ num (X1 arrow form) L i4) y)] suppose_not (@ num form (@ num (shadowed_0 num) inrange N) i4) ([p32:pf (not (@ num form (@ num (shadowed_0 num) inrange N) i4))] cut (not (@ X1 form (@ num (X1 arrow form) L i4) y)) false (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) x3)) (if_e2 (@ num form (@ num (shadowed_0 num) inrange N) i4) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x10) x10 and forall X1 ([y1:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x10) y1 equiv @ X1 form (@ num (X1 arrow form) L i4) y1))) (forall X1 ([y2:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y2))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) x3) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x11) x11 and forall X1 ([y3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x11) y3 equiv @ X1 form (@ num (X1 arrow form) L x3) y3))) (forall X1 ([y4:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y4)))) (and_e2 (isNat N) (forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i6) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x12) x12 and forall X1 ([y5:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x12) y5 equiv @ X1 form (@ num (X1 arrow form) L i6) y5))) (forall X1 ([y6:tm X1] not (@ X1 form (@ num (X1 arrow form) L i6) y6))))) p1) i4) p32) y) ([p33:pf (not (@ X1 form (@ num (X1 arrow form) L i4) y))] not_e (@ X1 form (@ num (X1 arrow form) L i4) y) p33 p31)))))))).
list_valid_eqv_class : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {I:tm num} {X:tm X1} {X':tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (shadowed_0 X1) L I) X) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X') -> pf (@ X1 form (@ num (shadowed_0 X1) L I) X') = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [I:tm num] [X:tm X1] [X':tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ num (shadowed_0 X1) L I) X)] [p3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X')] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ num (shadowed_0 X1) L I) X') (list_valid_per X1 Eq L p1) ([p0:pf (@ (per X1) form (validper X1) Eq)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (@ X1 form (@ num (shadowed_0 X1) L I) X') (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i3) y)))))) Eq L p1)) ([n:tm num] [q1:pf (isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y)))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n) (@ X1 form (@ num (shadowed_0 X1) L I) X') (list_valid_implies_length n X1 Eq L q1) ([q2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] cut (@ num form (@ num (shadowed_0 num) inrange n) I) (@ X1 form (@ num (shadowed_0 X1) L I) X') (list_index_inrange X1 L n I X q2 (list_nth_i X1 L I X p2)) ([q3:pf (@ num form (@ num (shadowed_0 num) inrange n) I)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L I) y)) (@ X1 form (@ num (shadowed_0 X1) L I) X') (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) I) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L I) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L I) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n) (forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y))))) q1) I) q3) ([x11:tm X1] [q4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) L I) y))] and_l (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) L I) y)) (@ X1 form (@ num (shadowed_0 X1) L I) X') q4 ([q41:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11)] [q42:pf (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) X) (@ X1 form (@ num (shadowed_0 X1) L I) X') (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) X) (@ X1 form (@ num (shadowed_0 X1) L I) X) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L I) x3) q42 X) p2) ([q5:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) X)] equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) X') (@ X1 form (@ num (shadowed_0 X1) L I) X') (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L I) x3) q42 X') (per_trans X1 Eq x11 X X' p0 q5 p3)))))))).
list_valid_equiv : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {X:tm X1} {X':tm X1} {I:tm num} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X') -> pf (@ X1 form (@ num (shadowed_0 X1) L I) X equiv @ X1 form (@ num (shadowed_0 X1) L I) X') = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [X:tm X1] [X':tm X1] [I:tm num] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X')] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ num (shadowed_0 X1) L I) X equiv @ X1 form (@ num (shadowed_0 X1) L I) X') (and_e1 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y)))))) Eq L p1)) ([p4:pf (@ (per X1) form (validper X1) Eq)] equiv_i2 (@ X1 form (@ num (shadowed_0 X1) L I) X) (@ X1 form (@ num (shadowed_0 X1) L I) X') ([p3:pf (@ X1 form (@ num (shadowed_0 X1) L I) X)] list_valid_eqv_class X1 Eq L I X X' p1 p3 p2) ([p5:pf (@ X1 form (@ num (shadowed_0 X1) L I) X')] list_valid_eqv_class X1 Eq L I X' X p1 p5 (per_symm X1 Eq X X' p4 p2))).
list_valid_cons : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {Hd:tm X1} {Tl:tm (list X1)} pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [Hd:tm X1] [Tl:tm (list X1)] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i1) y))))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) (list_valid_per X1 Eq Tl p2) ([p21:pf (@ (per X1) form (validper X1) Eq)] exists_e num ([x3:tm num] isNat x3 and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i2) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) Tl i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl i2) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ num (X1 arrow form) x4 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i3) y))))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) Tl i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl i4) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) y equiv @ X1 form (@ num (X1 arrow form) x4 i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i5) y)))))) Eq Tl p2)) ([n:tm num] [p3:pf (isNat n and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i6) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) Tl i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl i6) y)))))] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n1:tm num] isNat n1 and forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i7) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x11) y equiv @ X1 form (@ num (X1 arrow form) x4 i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i7) y)))))) Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i8) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i8) y)))))) p21 (exists_i num ([x3:tm num] isNat x3 and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i9) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i9) y))))) (succ n) (and_i (isNat (succ n)) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (succ n)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x4) x5 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x6:tm (eqrel X1)] [x7:tm X1] [x8:tm (list X1)] [x9:tm num] [x10:tm X1] if (_eq num x9 zero) (_@2 X1 X1 form x6 x10 x7) (_@2 num X1 form x8 (pred x9) x10))) Eq) Hd) Tl) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) x3) x4))))) (isNat_succ_i n (and_e1 (isNat n) (forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i10) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y equiv @ X1 form (@ num (X1 arrow form) Tl i10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl i10) y))))) p3)) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (succ n)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x4) x5 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x6:tm (eqrel X1)] [x7:tm X1] [x8:tm (list X1)] [x9:tm num] [x10:tm X1] if (_eq num x9 zero) (_@2 X1 X1 form x6 x10 x7) (_@2 num X1 form x8 (pred x9) x10))) Eq) Hd) Tl) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) x3) x4)))) ([i11:tm num] if_i (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] if (_eq num x8 zero) (_@2 X1 X1 form x5 x9 x6) (_@2 num X1 form x7 (pred x8) x9))) Eq) Hd) Tl) i11) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i11) x3))) ([p4:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11)] or_e (eq num i11 zero) (not (eq num i11 zero)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] if (_eq num x8 zero) (_@2 X1 X1 form x5 x9 x6) (_@2 num X1 form x7 (pred x8) x9))) Eq) Hd) Tl) i11) x4))) (excluded_middle (eq num i11 zero)) ([p41:pf (eq num i11 zero)] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] if (_eq num x8 zero) (_@2 X1 X1 form x5 x9 x6) (_@2 num X1 form x7 (pred x8) x9))) Eq) Hd) Tl) i11) x4)) Hd (and_i (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Hd) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) Hd) Tl) i11) x3)) p1 (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Hd) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) Hd) Tl) i11) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (X1 arrow form) Eq Hd) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) Tl) i11) y) (imp_i (@ X1 form (@ X1 (X1 arrow form) Eq Hd) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) Tl) i11) y) ([p42:pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) y)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl i11 y (if_i1 (eq num i11 zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) Hd) (_@2 num X1 form Tl (pred i11) y) p41 (per_symm X1 Eq Hd y p21 p42)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i11) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq Hd) y) ([p43:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i11) y)] per_symm X1 Eq y Hd p21 (if_e1 (_eq num i11 zero) (_@2 X1 X1 form Eq y Hd) (_@2 num X1 form Tl (pred i11) y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl i11 y p43) p41))))))) ([p42:pf (not (eq num i11 zero))] cut (@ num form (@ num (shadowed_0 num) inrange n) (pred i11)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] if (_eq num x8 zero) (_@2 X1 X1 form x5 x9 x6) (_@2 num X1 form x7 (pred x8) x9))) Eq) Hd) Tl) i11) x4))) (inrange_shift n i11 p4 p42) ([p43:pf (@ num form (@ num (shadowed_0 num) inrange n) (pred i11))] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) Tl (pred i11)) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] if (_eq num x8 zero) (_@2 X1 X1 form x5 x9 x6) (_@2 num X1 form x7 (pred x8) x9))) Eq) Hd) Tl) i11) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) (pred i11)) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (X1 arrow form) Tl (pred i11)) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl (pred i11)) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ num (X1 arrow form) Tl x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl x3) y)))) (and_e2 (isNat n) (forall num ([i12:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (X1 arrow form) Tl i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl i12) y))))) p3) (pred i11)) p43) ([x18:tm X1] [p44:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y equiv @ X1 form (@ num (X1 arrow form) Tl (pred i11)) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] if (_eq num x8 zero) (_@2 X1 X1 form x5 x9 x6) (_@2 num X1 form x7 (pred x8) x9))) Eq) Hd) Tl) i11) x4)) x18 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x18) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) Hd) Tl) i11) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y equiv @ X1 form (@ num (X1 arrow form) Tl (pred i11)) y)) p44) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x18) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) Hd) Tl) i11) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (X1 arrow form) Eq x18) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) Tl) i11) y) (imp_i (@ X1 form (@ X1 (X1 arrow form) Eq x18) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) Tl) i11) y) ([p45:pf (@ X1 form (@ X1 (X1 arrow form) Eq x18) y)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl i11 y (if_i2 (eq num i11 zero) (@ X1 form (@ num (X1 arrow form) Tl (pred i11)) y) (_@2 X1 X1 form Eq y Hd) p42 (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x18) y) (@ X1 form (@ num (X1 arrow form) Tl (pred i11)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x3 equiv @ X1 form (@ num (X1 arrow form) Tl (pred i11)) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y1 equiv @ X1 form (@ num (X1 arrow form) Tl (pred i11)) y1)) p44) y) p45)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i11) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x18) y) ([p46:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i11) y)] cut (_@2 num X1 form Tl (pred i11) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x18) y) (if_e2 (_eq num i11 zero) (_@2 X1 X1 form Eq y Hd) (_@2 num X1 form Tl (pred i11) y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl i11 y p46) p42) ([p47:pf (@ X1 form (@ num (shadowed_0 X1) Tl (pred i11)) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x18) y) (@ X1 form (@ num (X1 arrow form) Tl (pred i11)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x3 equiv @ X1 form (@ num (X1 arrow form) Tl (pred i11)) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18) (forall X1 ([y2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y2 equiv @ X1 form (@ num (X1 arrow form) Tl (pred i11)) y2)) p44) y) p47)))))))))) ([p5:pf (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i11) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i11) y) ([p51:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i11) y)] cut (not (eq num i11 zero)) false (not_inrange_zero2 n i11 (and_e1 (isNat n) (forall num ([i13:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i13) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) x19 and forall X1 ([y3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) y3 equiv @ X1 form (@ num (X1 arrow form) Tl i13) y3))) (forall X1 ([y4:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl i13) y4))))) p3) p5) ([p53:pf (not (eq num i11 zero))] cut (_@2 num X1 form Tl (pred i11) y) false (if_e2 (_eq num i11 zero) (_@2 X1 X1 form Eq y Hd) (_@2 num X1 form Tl (pred i11) y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl i11 y p51) p53) ([p54:pf (@ X1 form (@ num (shadowed_0 X1) Tl (pred i11)) y)] cut (forall X1 ([y5:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl (pred i11)) y5))) false (if_e2 (@ num form (@ num (shadowed_0 num) inrange n) (pred i11)) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) x20 and forall X1 ([y6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) y6 equiv @ X1 form (@ num (X1 arrow form) Tl (pred i11)) y6))) (forall X1 ([y7:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl (pred i11)) y7))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x21:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21 and forall X1 ([y8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y8 equiv @ X1 form (@ num (X1 arrow form) Tl x3) y8))) (forall X1 ([y9:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl x3) y9)))) (and_e2 (isNat n) (forall num ([i14:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i14) (exists X1 ([x22:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) x22 and forall X1 ([y10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) y10 equiv @ X1 form (@ num (X1 arrow form) Tl i14) y10))) (forall X1 ([y11:tm X1] not (@ X1 form (@ num (X1 arrow form) Tl i14) y11))))) p3) (pred i11)) (not_ei (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11) (@ num form (@ num (shadowed_0 num) inrange n) (pred i11)) p5 ([p55a:pf (@ num form (@ num (shadowed_0 num) inrange n) (pred i11))] cut (@ num form (@ num (shadowed_0 num) inrange (succ n)) (succ (pred i11))) (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11) (inrange_expand' n (pred i11) p55a) ([p55b:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) (succ (pred i11)))] congr num i11 (succ (pred i11)) ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) z1) (symm num (succ (pred i11)) i11 (succpred i11)) p55b)))) ([p55:pf (forall X1 ([y12:tm X1] not (@ X1 form (@ num (shadowed_0 X1) Tl (pred i11)) y12)))] false_e false (not_e (@ X1 form (@ num (shadowed_0 X1) Tl (pred i11)) y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) Tl (pred i11)) x3)) p55 y) p54)))))))))))))).
list_valid_tl : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {N:tm num} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (gt N zero) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_tl X1) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [N:tm num] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p3:pf (gt N zero)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y))))))) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i3) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ num (X1 arrow form) x4 i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i4) y)))))) Eq L p1)) ([n:tm num] [p4:pf (isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y)))))] or_e (gt n zero) (not (gt n zero)) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n1:tm num] isNat n1 and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i6) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) y equiv @ X1 form (@ num (X1 arrow form) x4 i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i6) y))))))) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (excluded_middle (gt n zero)) ([p5:pf (gt n zero)] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n2:tm num] isNat n2 and forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n2) i7) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x10) y equiv @ X1 form (@ num (X1 arrow form) x4 i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i7) y)))))) Eq (@ (list X1) (list X1) (list_tl X1) L) (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i8) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_tl X1) L) i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_tl X1) L) i8) y)))))) (list_valid_per X1 Eq L p1) (exists_i num ([x3:tm num] isNat x3 and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i9) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_tl X1) L) i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_tl X1) L) i9) y))))) (pred n) (and_i (isNat (pred n)) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (pred n)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ X1 form (@ num (X1 arrow form) x6 (succ x7)) x8 and not (eq num (succ x7) zero))) L) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) x3) x4))))) (isNat_pred_i n (and_e1 (isNat n) (forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i10) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) L i10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i10) y))))) p4) p5) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (pred n)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ X1 form (@ num (X1 arrow form) x6 (succ x7)) x8 and not (eq num (succ x7) zero))) L) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) x3) x4)))) ([i11:tm num] if_i (@ num form (@ num (shadowed_0 num) inrange (pred n)) i11) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 (succ x6)) x7 and not (eq num (succ x6) zero))) L) i11) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) x3))) ([p51:pf (@ num form (@ num (shadowed_0 num) inrange (pred n)) i11)] cut (@ num form (@ num (shadowed_0 num) inrange n) (succ i11)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 (succ x6)) x7 and not (eq num (succ x6) zero))) L) i11) x4))) (congr num n (succ (pred n)) ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange z1) (succ i11)) (symm num (succ (pred n)) n (succpred n)) (inrange_expand' (pred n) i11 p51)) ([p51a:pf (@ num form (@ num (shadowed_0 num) inrange n) (succ i11))] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L (succ i11)) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 (succ x6)) x7 and not (eq num (succ x6) zero))) L) i11) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) (succ i11)) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y equiv @ X1 form (@ num (X1 arrow form) L (succ i11)) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L (succ i11)) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n) (forall num ([i12:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ num (X1 arrow form) L i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i12) y))))) p4) (succ i11)) p51a) ([x17:tm X1] [p52:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i11)) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 (succ x6)) x7 and not (eq num (succ x6) zero))) L) i11) x4)) x17 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i11) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i11)) y)) p52) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i11) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L) i11) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L) i11) y) ([p53:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y)] cut (> (succ i11) zero) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L) i11) y) (trans_gt_geq (succ i11) i11 zero (succ_gt i11) (inrange_e2 (pred n) i11 p51)) ([p54:pf (gt (succ i11) zero)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L i11 y (and_i (@ X1 form (@ num (shadowed_0 X1) L (succ i11)) y) (!= num (succ i11) zero) (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) (@ X1 form (@ num (shadowed_0 X1) L (succ i11)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x3 equiv @ X1 form (@ num (shadowed_0 X1) L (succ i11)) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y1 equiv @ X1 form (@ num (shadowed_0 X1) L (succ i11)) y1)) p52) y) p53) (gt->neq (succ i11) zero p54))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) ([p55:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) (@ X1 form (@ num (shadowed_0 X1) L (succ i11)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x3 equiv @ X1 form (@ num (shadowed_0 X1) L (succ i11)) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17) (forall X1 ([y2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y2 equiv @ X1 form (@ num (shadowed_0 X1) L (succ i11)) y2)) p52) y) (and_e1 (@ X1 form (@ num (X1 arrow form) L (succ i11)) y) (not (eq num (succ i11) zero)) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L i11 y p55)))))))))) ([p56:pf (not (@ num form (@ num (shadowed_0 num) inrange (pred n)) i11))] or_e (eq num (succ i11) zero) (not (eq num (succ i11) zero)) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) x3))) (excluded_middle (eq num (succ i11) zero)) ([p57:pf (eq num (succ i11) zero)] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) y) ([p57a:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) y)] not_e (eq num (succ i11) zero) (and_e2 (@ X1 form (@ num (X1 arrow form) L (succ i11)) y) (not (eq num (succ i11) zero)) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L i11 y p57a)) p57))) ([p58:pf (not (eq num (succ i11) zero))] cut (not (@ num form (@ num (shadowed_0 num) inrange n) (succ i11))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) x3))) (congr num n (succ (pred n)) ([z2:tm num] not (@ num form (@ num (shadowed_0 num) inrange z2) (succ i11))) (symm num (succ (pred n)) n (succpred n)) (inrange_expand'_not (pred n) i11 p56 p58)) ([p58b:pf (not (@ num form (@ num (shadowed_0 num) inrange n) (succ i11)))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) y) ([p59:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i11) y)] not_e (@ X1 form (@ num (X1 arrow form) L (succ i11)) y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L (succ i11)) x3)) (if_e2 (@ num form (@ num (shadowed_0 num) inrange n) (succ i11)) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18 and forall X1 ([y3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y3 equiv @ X1 form (@ num (X1 arrow form) L (succ i11)) y3))) (forall X1 ([y4:tm X1] not (@ X1 form (@ num (X1 arrow form) L (succ i11)) y4))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) x19 and forall X1 ([y5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) y5 equiv @ X1 form (@ num (X1 arrow form) L x3) y5))) (forall X1 ([y6:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y6)))) (and_e2 (isNat n) (forall num ([i13:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i13) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) x20 and forall X1 ([y7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) y7 equiv @ X1 form (@ num (X1 arrow form) L i13) y7))) (forall X1 ([y8:tm X1] not (@ X1 form (@ num (X1 arrow form) L i13) y8))))) p4) (succ i11)) p58b) y) (and_e1 (@ X1 form (@ num (X1 arrow form) L (succ i11)) y) (not (eq num (succ i11) zero)) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L i11 y p59))))))))))))) ([p6:pf (not (gt n zero))] cut (geq zero n) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n3:tm num] isNat n3 and forall num ([i14:tm num] if (@ num form (@ num (shadowed_0 num) inrange n3) i14) (exists X1 ([x21:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x21) x21 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x21) y equiv @ X1 form (@ num (X1 arrow form) x4 i14) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i14) y))))))) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (equiv_e2 (geq zero n) (not (not (geq zero n))) (equiv_not_not (geq zero n)) p6) ([p6a:pf (geq zero n)] cut (not (@ num form (@ num (shadowed_0 num) inrange n) zero)) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n4:tm num] isNat n4 and forall num ([i15:tm num] if (@ num form (@ num (shadowed_0 num) inrange n4) i15) (exists X1 ([x22:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x22) x22 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x22) y equiv @ X1 form (@ num (X1 arrow form) x4 i15) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i15) y))))))) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (forall_e num ([x3:tm num] not (@ num form (@ num (shadowed_0 num) inrange n) x3)) (not_inrange_zero1 n p6a) zero) ([p61:pf (not (@ num form (@ num (shadowed_0 num) inrange n) zero))] cut (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L zero) y))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n5:tm num] isNat n5 and forall num ([i16:tm num] if (@ num form (@ num (shadowed_0 num) inrange n5) i16) (exists X1 ([x23:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x23) x23 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x23) y equiv @ X1 form (@ num (X1 arrow form) x4 i16) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i16) y))))))) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (if_e2 (@ num form (@ num (shadowed_0 num) inrange n) zero) (exists X1 ([x24:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) x24 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) y equiv @ X1 form (@ num (X1 arrow form) L zero) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L zero) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x25:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x25) x25 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x25) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n) (forall num ([i17:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i17) (exists X1 ([x26:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x26) x26 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x26) y equiv @ X1 form (@ num (X1 arrow form) L i17) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i17) y))))) p4) zero) p61) ([p62:pf (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L zero) y)))] cut (@ num form (@ num (shadowed_0 num) inrange N) zero equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) zero) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n6:tm num] isNat n6 and forall num ([i18:tm num] if (@ num form (@ num (shadowed_0 num) inrange n6) i18) (exists X1 ([x27:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x27) x27 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x27) y equiv @ X1 form (@ num (X1 arrow form) x4 i18) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i18) y))))))) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p2)) zero) ([p63:pf (@ num form (@ num (shadowed_0 num) inrange N) zero equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) zero)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L zero) x3) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n7:tm num] isNat n7 and forall num ([i19:tm num] if (@ num form (@ num (shadowed_0 num) inrange n7) i19) (exists X1 ([x28:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x28) x28 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x28) y equiv @ X1 form (@ num (X1 arrow form) x4 i19) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i19) y))))))) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L zero (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N) zero) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) zero) p63 (inrange_zero N p3))) ([y:tm X1] [p64:pf (@ X1 form (@ num (shadowed_0 X1) L zero) y)] false_e (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n8:tm num] isNat n8 and forall num ([i20:tm num] if (@ num form (@ num (shadowed_0 num) inrange n8) i20) (exists X1 ([x29:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x29) x29 and forall X1 ([y9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x29) y9 equiv @ X1 form (@ num (X1 arrow form) x4 i20) y9))) (forall X1 ([y10:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i20) y10))))))) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (not_e (@ X1 form (@ num (shadowed_0 X1) L zero) y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L zero) x3)) p62 y) p64)))))))).
list_valid_tl'' : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (list_is_not_nil X1) L) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_tl X1) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ (list X1) form (list_is_not_nil X1) L)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) x3) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (list_length_exists X1 Eq L p1) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] cut (gt n zero) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (list_length_not_nil X1 L n p2 q1) ([q2:pf (gt n zero)] list_valid_tl X1 Eq L n p1 q1 q2)).
list_hd_cons : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} {L:tm (list X1)} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq X) Y) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [L:tm (list X1)] [Y:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p3:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) Y)] cut (if (_eq num zero zero) (_@2 X1 X1 form Eq Y X) (_@2 num X1 form L (pred zero) Y)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq X L zero Y (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) Y p3)) ([p31:pf (if (eq num zero zero) (@ X1 form (@ X1 (X1 arrow form) Eq Y) X) (@ X1 form (@ num (shadowed_0 X1) L (pred zero)) Y))] cut (eq num zero zero imp @ X1 form (@ X1 (X1 arrow form) Eq Y) X) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (and_e1 (eq num zero zero imp @ X1 form (@ X1 (X1 arrow form) Eq Y) X) (not (eq num zero zero) imp @ X1 form (@ num (shadowed_0 X1) L (pred zero)) Y) p31) ([p32:pf (eq num zero zero imp @ X1 form (@ X1 (X1 arrow form) Eq Y) X)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (list_valid_cons X1 Eq X L p1 p2) ([p4:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L))] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (and_e1 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i1) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y)))))) Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) p4)) ([p40:pf (@ (per X1) form (validper X1) Eq)] exists_e num ([x3:tm num] isNat x3 and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i3) y))))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i4) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x8) y equiv @ X1 form (@ num (X1 arrow form) x4 i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i5) y)))))) Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) p4)) ([n:tm num] [p41:pf (isNat n and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i6) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i6) y)))))] cut (if (@ num form (@ num (shadowed_0 num) inrange n) zero) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y)))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) x3) y)))) (and_e2 (isNat n) (forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i7) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i7) y))))) p41) zero) ([p42:pf (if (@ num form (@ num (shadowed_0 num) inrange n) zero) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))))] or_e (@ num form (@ num (shadowed_0 num) inrange n) zero) (not (@ num form (@ num (shadowed_0 num) inrange n) zero)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (excluded_middle (@ num form (@ num (shadowed_0 num) inrange n) zero)) ([p5:pf (@ num form (@ num (shadowed_0 num) inrange n) zero)] cut (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (imp_e (@ num form (@ num (shadowed_0 num) inrange n) zero) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))) (and_e1 (@ num form (@ num (shadowed_0 num) inrange n) zero imp exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))) (not (@ num form (@ num (shadowed_0 num) inrange n) zero) imp forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))) p42) p5) ([p51:pf (exists X1 ([x17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y)))] per_symm X1 Eq Y X p40 (imp_e (eq num zero zero) (@ X1 form (@ X1 (X1 arrow form) Eq Y) X) p32 (refl num zero)))) ([p6:pf (not (@ num form (@ num (shadowed_0 num) inrange n) zero))] cut (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (imp_e (not (@ num form (@ num (shadowed_0 num) inrange n) zero)) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))) (and_e2 (@ num form (@ num (shadowed_0 num) inrange n) zero imp exists X1 ([x18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))) (not (@ num form (@ num (shadowed_0 num) inrange n) zero) imp forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y))) p42) p6) ([p61:pf (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) y)))] cut (not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) X)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) x3)) p61 X) ([p62:pf (not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) X))] false_e (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (not_e (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) zero) X) p62 (def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq X L zero X (and_i (eq num zero zero imp @ X1 form (@ X1 (X1 arrow form) Eq X) X) (not (eq num zero zero) imp _@2 num X1 form L (pred zero) X) (imp_i (eq num zero zero) (@ X1 form (@ X1 (X1 arrow form) Eq X) X) ([p63:pf (eq num zero zero)] p1)) (imp_i (not (eq num zero zero)) (_@2 num X1 form L (pred zero) X) ([p64:pf (not (eq num zero zero))] false_e (_@2 num X1 form L (pred zero) X) (not_e (eq num zero zero) p64 (refl num zero)))))))))))))))).
list_hd_cons' : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {Y:tm X1} {Hd:tm X1} {L:tm (list X1)} pf (@ X1 form (@ X1 (X1 arrow form) Eq Y) Hd) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) Y) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [Y:tm X1] [Hd:tm X1] [L:tm (list X1)] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq Y) Hd)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L) Y (def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L zero Y (if_i1 (== num zero zero) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Hd) (_@2 num X1 form L (pred zero) Y) (refl num zero) p1)).
list_member_valid : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {X:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L) X) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [X:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L) X)] exists_e num ([x3:tm num] @ X1 form (@ num (X1 arrow form) L x3) X) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4)) L X p2) ([I:tm num] [p3:pf (@ X1 form (@ num (shadowed_0 X1) L I) X)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i3) y)))))) Eq L p1)) ([N:tm num] [p4:pf (isNat N and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y)))))] and_l (isNat N) (forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i5) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y))))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) p4 ([p5:pf (isNat N)] [p6:pf (forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i6) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (shadowed_0 X1) L i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i6) y)))))] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) (list_valid_per X1 Eq L p1) ([p7:pf (@ (per X1) form (validper X1) Eq)] cut (@ num form (@ num (shadowed_0 num) inrange N) I or not (@ num form (@ num (shadowed_0 num) inrange N) I)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) (excluded_middle (@ num form (@ num (shadowed_0 num) inrange N) I)) ([p8:pf (@ num form (@ num (shadowed_0 num) inrange N) I or not (@ num form (@ num (shadowed_0 num) inrange N) I))] or_e (@ num form (@ num (shadowed_0 num) inrange N) I) (not (@ num form (@ num (shadowed_0 num) inrange N) I)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) p8 ([p11:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) (if_e1 (@ num form (@ num (shadowed_0 num) inrange N) I) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) x3) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) y)))) p6 I) p11) ([Y:tm X1] [p9:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Y and forall X1 ([X2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq Y) X2 equiv @ X1 form (@ num (shadowed_0 X1) L I) X2))] per_refl X1 Eq X Y (list_valid_per X1 Eq L p1) (per_symm X1 Eq Y X p7 (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) X) (@ X1 form (@ num (shadowed_0 X1) L I) X) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq Y) x3 equiv @ X1 form (@ num (shadowed_0 X1) L I) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Y) (forall X1 ([X3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq Y) X3 equiv @ X1 form (@ num (shadowed_0 X1) L I) X3)) p9) X) p3)))) ([p12:pf (not (@ num form (@ num (shadowed_0 num) inrange N) I))] false_e (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) (not_e (@ X1 form (@ num (shadowed_0 X1) L I) X) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) x3)) (if_e2 (@ num form (@ num (shadowed_0 num) inrange N) I) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) x3) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) y)))) p6 I) p12) X) p3))))))).
list_member_cons_i : {X1:tp} {Eq:tm (eqrel X1)} {Tl:tm (list X1)} {X:tm X1} {Hd:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) Tl) X) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) X) = [X1:tp] [Eq:tm (eqrel X1)] [Tl:tm (list X1)] [X:tm X1] [Hd:tm X1] [p0:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl)] [p1:pf (@ X1 form (@ (list X1) (set X1) (list_member X1) Tl) X)] exists_e num ([x3:tm num] @ X1 form (@ num (X1 arrow form) Tl x3) X) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) X) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4)) Tl X p1) ([i1:tm num] [q1:pf (@ X1 form (@ num (shadowed_0 X1) Tl i1) X)] cut (isNat i1) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) X) (list_index_isNat X1 Eq Tl i1 X p0 (list_nth_i X1 Tl i1 X q1)) ([q21:pf (isNat i1)] cut (>= i1 zero) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) X) (isNat->geq_zero i1 q21) ([q22:pf (geq i1 zero)] cut (> (succ i1) zero) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) X) (trans_gt_geq (succ i1) i1 zero (succ_gt i1) q22) ([q23:pf (gt (succ i1) zero)] cut (!= num (succ i1) zero) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) X) (gt->neq (succ i1) zero q23) ([q24:pf (not (eq num (succ i1) zero))] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) X (exists_i num ([x3:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) x3) X) (succ i1) (def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl (succ i1) X (if_i2 (eq num (succ i1) zero) (@ X1 form (@ num (shadowed_0 X1) Tl (pred (succ i1))) X) (_@2 X1 X1 form Eq X Hd) q24 (congr num (pred (succ i1)) i1 ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) Tl z1) X) (predsucc i1) q1))))))))).
list_member_cons_e : {X1:tp} {Eq:tm (eqrel X1)} {Hd:tm X1} {Tl:tm (list X1)} {X:tm X1} pf (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) X) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) Tl) X or @ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) = [X1:tp] [Eq:tm (eqrel X1)] [Hd:tm X1] [Tl:tm (list X1)] [X:tm X1] [p3:pf (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) X)] exists_e num ([x3:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) x3) X) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) Tl) X or @ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) X p3) ([i1:tm num] [q1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i1) X)] or_e (eq num i1 zero) (not (eq num i1 zero)) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) Tl) X or @ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) (excluded_middle (eq num i1 zero)) ([q3:pf (eq num i1 zero)] cut (_@2 X1 X1 form Eq X Hd) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) Tl) X or @ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) (if_e1 (_eq num i1 zero) (_@2 X1 X1 form Eq X Hd) (_@2 num X1 form Tl (pred i1) X) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl i1 X q1) q3) ([q31:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd)] or_i2 (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) Tl) X) q31)) ([q4:pf (not (eq num i1 zero))] cut (_@2 num X1 form Tl (pred i1) X) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) Tl) X or @ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) (if_e2 (_eq num i1 zero) (_@2 X1 X1 form Eq X Hd) (_@2 num X1 form Tl (pred i1) X) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl i1 X q1) q4) ([q41:pf (@ X1 form (@ num (shadowed_0 X1) Tl (pred i1)) X)] or_i1 (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) Tl) X) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Hd) (def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4)) Tl X (exists_i num ([x3:tm num] @ X1 form (@ num (X1 arrow form) Tl x3) X) (pred i1) q41))))).
list_nth_exists : {X1:tp} {L:tm (list X1)} {N:tm num} {I:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (exists X1 ([X:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)) = [X1:tp] [L:tm (list X1)] [N:tm num] [I:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L I) x3) (exists X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) L) I) x3)) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L I (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N) I) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange N) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I2 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I2)) L N p1)) I) p2)) ([X:tm X1] [p5:pf (@ X1 form (@ num (shadowed_0 X1) L I) X)] exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) L) I) x3) X (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p5)).
list_nth_eq : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {I:tm num} {X:tm X1} {Y:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [I:tm num] [X:tm X1] [Y:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] [p3:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) Y)] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (and_e1 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y)))))) Eq L p1)) ([p41:pf (@ (per X1) form (validper X1) Eq)] cut (exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i3) y)))))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x8) y equiv @ X1 form (@ num (X1 arrow form) x4 i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i5) y)))))) Eq L p1)) ([p42:pf (exists num ([N:tm num] isNat N and forall num ([I1:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) I1) (exists X1 ([X2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X2) X2 and forall X1 ([Y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X2) Y1 equiv @ X1 form (@ num (shadowed_0 X1) L I1) Y1))) (forall X1 ([Y2:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I1) Y2))))))] cut (@ X1 form (@ num (X1 arrow form) L I) X) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p2) ([p21:pf (@ X1 form (@ num (shadowed_0 X1) L I) X)] cut (@ X1 form (@ num (X1 arrow form) L I) Y) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I Y p3) ([p31:pf (@ X1 form (@ num (shadowed_0 X1) L I) Y)] exists_e num ([x3:tm num] isNat x3 and forall num ([I2:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) I2) (exists X1 ([X3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X3) X3 and forall X1 ([Y3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X3) Y3 equiv @ X1 form (@ num (shadowed_0 X1) L I2) Y3))) (forall X1 ([Y4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I2) Y4))))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) p42 ([n:tm num] [p5:pf (isNat n and forall num ([I3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) I3) (exists X1 ([X4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X4) X4 and forall X1 ([Y5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X4) Y5 equiv @ X1 form (@ num (shadowed_0 X1) L I3) Y5))) (forall X1 ([Y6:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I3) Y6)))))] or_e (@ num form (@ num (shadowed_0 num) inrange n) I) (not (@ num form (@ num (shadowed_0 num) inrange n) I)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (excluded_middle (@ num form (@ num (shadowed_0 num) inrange n) I)) ([p6:pf (@ num form (@ num (shadowed_0 num) inrange n) I)] cut (exists X1 ([X5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X5) X5 and forall X1 ([Y7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X5) Y7 equiv @ X1 form (@ num (shadowed_0 X1) L I) Y7))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (imp_e (@ num form (@ num (shadowed_0 num) inrange n) I) (exists X1 ([X6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X6) X6 and forall X1 ([Y8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X6) Y8 equiv @ X1 form (@ num (shadowed_0 X1) L I) Y8))) (and_e1 (@ num form (@ num (shadowed_0 num) inrange n) I imp exists X1 ([X7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X7) X7 and forall X1 ([Y9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X7) Y9 equiv @ X1 form (@ num (shadowed_0 X1) L I) Y9))) (not (@ num form (@ num (shadowed_0 num) inrange n) I) imp forall X1 ([Y10:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) Y10))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([X8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X8) X8 and forall X1 ([Y11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X8) Y11 equiv @ X1 form (@ num (shadowed_0 X1) L x3) Y11))) (forall X1 ([Y12:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) Y12)))) (and_e2 (isNat n) (forall num ([I4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) I4) (exists X1 ([X9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X9) X9 and forall X1 ([Y13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X9) Y13 equiv @ X1 form (@ num (shadowed_0 X1) L I4) Y13))) (forall X1 ([Y14:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I4) Y14))))) p5) I)) p6) ([p61:pf (exists X1 ([X10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X10) X10 and forall X1 ([Y15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X10) Y15 equiv @ X1 form (@ num (shadowed_0 X1) L I) Y15)))] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([Y16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) Y16 equiv @ X1 form (@ num (shadowed_0 X1) L I) Y16)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) p61 ([xc:tm X1] [p62:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) xc and forall X1 ([Y17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) Y17 equiv @ X1 form (@ num (shadowed_0 X1) L I) Y17))] cut (forall X1 ([Y18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) Y18 equiv @ X1 form (@ num (shadowed_0 X1) L I) Y18)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) xc) (forall X1 ([Y19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) Y19 equiv @ X1 form (@ num (shadowed_0 X1) L I) Y19)) p62) ([p63:pf (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) X) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) X) (@ X1 form (@ num (shadowed_0 X1) L I) X) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) x3 equiv @ X1 form (@ num (shadowed_0 X1) L I) x3) p63 X) p21) ([p64:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) X)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) Y) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) Y) (@ X1 form (@ num (shadowed_0 X1) L I) Y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) x3 equiv @ X1 form (@ num (shadowed_0 X1) L I) x3) p63 Y) p31) ([p65:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) Y)] per_trans X1 Eq X xc Y p41 (per_symm X1 Eq xc X p41 p64) p65)))))) ([p7:pf (not (@ num form (@ num (shadowed_0 num) inrange n) I))] cut (forall X1 ([Y20:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) Y20))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (imp_e (not (@ num form (@ num (shadowed_0 num) inrange n) I)) (forall X1 ([Y21:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) Y21))) (and_e2 (@ num form (@ num (shadowed_0 num) inrange n) I imp exists X1 ([X11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X11) X11 and forall X1 ([Y22:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X11) Y22 equiv @ X1 form (@ num (shadowed_0 X1) L I) Y22))) (not (@ num form (@ num (shadowed_0 num) inrange n) I) imp forall X1 ([Y23:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) Y23))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([X12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X12) X12 and forall X1 ([Y24:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X12) Y24 equiv @ X1 form (@ num (shadowed_0 X1) L x3) Y24))) (forall X1 ([Y25:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) Y25)))) (and_e2 (isNat n) (forall num ([I5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) I5) (exists X1 ([X13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X13) X13 and forall X1 ([Y26:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X13) Y26 equiv @ X1 form (@ num (shadowed_0 X1) L I5) Y26))) (forall X1 ([Y27:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I5) Y27))))) p5) I)) p7) ([p71:pf (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) y)))] false_e (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (not_e (@ X1 form (@ num (shadowed_0 X1) L I) Y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) x3)) p71 Y) p31)))))))).
list_nth_cons_i : {I:tnum} {X1:tp} {Tl:tm (list X1)} {X:tm X1} {Eq:tm (eqrel X1)} {Hd:tm X1} pf (isNat I) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) Tl) I) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl)) (succ I)) X) = [I:tnum] [X1:tp] [Tl:tm (list X1)] [X:tm X1] [Eq:tm (eqrel X1)] [Hd:tm X1] [p0:pf (isNat I)] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) Tl) I) X)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) (succ I) X (def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd Tl (succ I) X (if_i2 (eq num (succ I) zero) (@ X1 form (@ num (shadowed_0 X1) Tl (pred (succ I))) X) (_@2 X1 X1 form Eq X Hd) (gt->neq (succ I) zero (trans_gt_geq (succ I) I zero (succ_gt I) (isNat->geq_zero I p0))) (congr num (pred (succ I)) I ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) Tl z1) X) (predsucc I) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) Tl I X p1)))).
list_nth_cons_i' : {I:tm num} {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {Hd:tm X1} {TL:tm (list X1)} pf (eq num I zero) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) TL)) I) Hd) = [I:tm num] [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [Hd:tm X1] [TL:tm (list X1)] [p1:pf (eq num I zero)] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) TL) I Hd (congr num I zero ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) TL) z1) Hd) p1 (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) TL) Hd (list_hd_cons' X1 Eq Hd Hd TL p2))).
list_nth_tl_i : {X1:tp} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (gt I zero) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred I)) X) = [X1:tp] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] [p2:pf (gt I zero)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (list_tl X1) L) (pred I) X (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L (pred I) X (and_i (@ X1 form (@ num (shadowed_0 X1) L (succ (pred I))) X) (not (eq num (succ (pred I)) zero)) (congr num (succ (pred I)) I ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L z1) X) (succpred I) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p1)) (congr num (succ (pred I)) I ([z2:tm num] not (eq num z2 zero)) (succpred I) (gt->neq I zero p2)))).
list_nth_tl_e : {X1:tp} {L:tm (list X1)} {I:tnum} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred I)) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) = [X1:tp] [L:tm (list X1)] [I:tnum] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred I)) X)] cut (@ X1 form (@ num (X1 arrow form) L (succ (pred I))) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) L) I) X) (and_e1 (@ X1 form (@ num (X1 arrow form) L (succ (pred I))) X) (not (eq num (succ (pred I)) zero)) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L (pred I) X (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (list_tl X1) L) (pred I) X p1))) ([p2:pf (@ X1 form (@ num (shadowed_0 X1) L (succ (pred I))) X)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X (congr num I (succ (pred I)) ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L z1) X) (symm num (succ (pred I)) I (succpred I)) p2)).
list_nth_valid : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] list_member_valid X1 Eq L X p1 (list_member_i X1 L I X p2).
list_nth_below_index : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {I:tm num} {X:tm X1} {J:tm num} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (@ num form (@ num (shadowed_0 num) inrange I) J) -> pf (exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) J) y)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [I:tm num] [X:tm X1] [J:tm num] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] [p3:pf (@ num form (@ num (shadowed_0 num) inrange I) J)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (exists X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) L) J) x3)) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i3) y)))))) Eq L p1)) ([n:tm num] [q1:pf (isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y)))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n) (exists X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) L) J) x3)) (list_valid_implies_length n X1 Eq L q1) ([q2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] cut (@ num form (@ num (shadowed_0 num) inrange n) I) (exists X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) L) J) x3)) (list_index_inrange X1 L n I X q2 p2) ([q3:pf (@ num form (@ num (shadowed_0 num) inrange n) I)] cut (@ num form (@ num (shadowed_0 num) inrange n) J) (exists X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) L) J) x3)) (inrange_trans n I J q3 p3) ([q4:pf (@ num form (@ num (shadowed_0 num) inrange n) J)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L J) y)) (exists X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) L) J) x3)) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) J) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L J) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L J) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n) (forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y))))) q1) J) q4) ([x11:tm X1] [q5:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (shadowed_0 X1) L J) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) L) J) x3) x11 (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L J x11 (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11) (@ X1 form (@ num (shadowed_0 X1) L J) x11) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L J) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (shadowed_0 X1) L J) y)) q5) x11) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (shadowed_0 X1) L J) y)) q5)))))))).
list_congr : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {B:tm num} {B':tm X1} {A:tm num} {A':tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (shadowed_0 X1) L B) B') -> pf (@ num form (@ num (shadowed_0 num) eq_nat B) A) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq B') A') -> pf (@ X1 form (@ num (shadowed_0 X1) L A) A') = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [B:tm num] [B':tm X1] [A:tm num] [A':tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ num (shadowed_0 X1) L B) B')] [p3:pf (@ num form (@ num (shadowed_0 num) eq_nat B) A)] [p4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq B') A')] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ num (shadowed_0 X1) L A) A') (and_e1 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y)))))) Eq L p1)) ([p10:pf (@ (per X1) form (validper X1) Eq)] cut (eq num B A) (@ X1 form (@ num (shadowed_0 X1) L A) A') (eq_nat_e1 B A p3) ([p31:pf (eq num B A)] exists_e num ([x3:tm num] isNat x3 and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i3) y))))) (@ X1 form (@ num (shadowed_0 X1) L A) A') (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x8) y equiv @ X1 form (@ num (X1 arrow form) x4 i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i5) y)))))) Eq L p1)) ([n:tm num] [p11:pf (isNat n and forall num ([I:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) I) (exists X1 ([X:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y equiv @ X1 form (@ num (shadowed_0 X1) L I) Y))) (forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) Y)))))] or_e (@ num form (@ num (shadowed_0 num) inrange n) B) (not (@ num form (@ num (shadowed_0 num) inrange n) B)) (@ X1 form (@ num (shadowed_0 X1) L A) A') (excluded_middle (@ num form (@ num (shadowed_0 num) inrange n) B)) ([p5:pf (@ num form (@ num (shadowed_0 num) inrange n) B)] cut (exists X1 ([X:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y equiv @ X1 form (@ num (shadowed_0 X1) L B) Y))) (@ X1 form (@ num (shadowed_0 X1) L A) A') (imp_e (@ num form (@ num (shadowed_0 num) inrange n) B) (exists X1 ([X:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y equiv @ X1 form (@ num (shadowed_0 X1) L B) Y))) (and_e1 (@ num form (@ num (shadowed_0 num) inrange n) B imp exists X1 ([X:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y equiv @ X1 form (@ num (shadowed_0 X1) L B) Y))) (not (@ num form (@ num (shadowed_0 num) inrange n) B) imp forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L B) Y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([X:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y equiv @ X1 form (@ num (shadowed_0 X1) L x3) Y))) (forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) Y)))) (and_e2 (isNat n) (forall num ([I:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) I) (exists X1 ([X:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y equiv @ X1 form (@ num (shadowed_0 X1) L I) Y))) (forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) Y))))) p11) B)) p5) ([p50:pf (exists X1 ([X:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y equiv @ X1 form (@ num (shadowed_0 X1) L B) Y)))] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) Y equiv @ X1 form (@ num (shadowed_0 X1) L B) Y)) (@ X1 form (@ num (shadowed_0 X1) L A) A') p50 ([Xc:tm X1] [p51:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Xc) Xc and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq Xc) Y equiv @ X1 form (@ num (shadowed_0 X1) L B) Y))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq Xc) B') (@ X1 form (@ num (shadowed_0 X1) L A) A') (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq Xc) B') (@ X1 form (@ num (shadowed_0 X1) L B) B') (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq Xc) x3 equiv @ X1 form (@ num (shadowed_0 X1) L B) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq Xc) Xc) (forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq Xc) Y equiv @ X1 form (@ num (shadowed_0 X1) L B) Y)) p51) B') p2) ([p52:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Xc) B')] cut (@ X1 form (@ num (shadowed_0 X1) L B) A') (@ X1 form (@ num (shadowed_0 X1) L A) A') (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq Xc) A') (@ X1 form (@ num (shadowed_0 X1) L B) A') (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq Xc) x3 equiv @ X1 form (@ num (shadowed_0 X1) L B) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq Xc) Xc) (forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq Xc) Y equiv @ X1 form (@ num (shadowed_0 X1) L B) Y)) p51) A') (per_trans X1 Eq Xc B' A' p10 p52 p4)) ([p53:pf (@ X1 form (@ num (shadowed_0 X1) L B) A')] congr num A B ([Z:tm num] @ X1 form (@ num (shadowed_0 X1) L Z) A') (symm num B A p31) p53))))) ([p6:pf (not (@ num form (@ num (shadowed_0 num) inrange n) B))] cut (forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L B) Y))) (@ X1 form (@ num (shadowed_0 X1) L A) A') (imp_e (not (@ num form (@ num (shadowed_0 num) inrange n) B)) (forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L B) Y))) (and_e2 (@ num form (@ num (shadowed_0 num) inrange n) B imp exists X1 ([X:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y equiv @ X1 form (@ num (shadowed_0 X1) L B) Y))) (not (@ num form (@ num (shadowed_0 num) inrange n) B) imp forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L B) Y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([X:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y equiv @ X1 form (@ num (shadowed_0 X1) L x3) Y))) (forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) Y)))) (and_e2 (isNat n) (forall num ([I:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) I) (exists X1 ([X:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([Y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y equiv @ X1 form (@ num (shadowed_0 X1) L I) Y))) (forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L I) Y))))) p11) B)) p6) ([p61:pf (forall X1 ([Y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L B) Y)))] false_e (@ X1 form (@ num (shadowed_0 X1) L A) A') (not_e (@ X1 form (@ num (shadowed_0 X1) L B) B') (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L B) x3)) p61 B') p2)))))).
list_congr' : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {I1:tm num} {X:tm X1} {I2:tm num} {Y:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (shadowed_0 X1) L I1) X) -> pf (@ X1 form (@ num (shadowed_0 X1) L I2) Y) -> pf (@ num form (@ num (shadowed_0 num) eq_nat I1) I2) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [I1:tm num] [X:tm X1] [I2:tm num] [Y:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ num (shadowed_0 X1) L I1) X)] [p3:pf (@ X1 form (@ num (shadowed_0 X1) L I2) Y)] [p4:pf (@ num form (@ num (shadowed_0 num) eq_nat I1) I2)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i3) y)))))) Eq L p1)) ([n:tm num] [p11:pf (isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y)))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (list_valid_implies_length n X1 Eq L p11) ([p12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] cut (@ num form (@ num (shadowed_0 num) inrange n) I1) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange n) I1) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat n) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange n) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L n p12)) I1) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L I1 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L I1) x3) X p2))) ([p5:pf (@ num form (@ num (shadowed_0 num) inrange n) I1)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L I1) y)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) I1) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L I1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L I1) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n) (forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y))))) p11) I1) p5) ([xc:tm X1] [p6:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) xc and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) y equiv @ X1 form (@ num (X1 arrow form) L I1) y))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) X) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) X) (@ X1 form (@ num (X1 arrow form) L I1) X) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) x3 equiv @ X1 form (@ num (X1 arrow form) L I1) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) xc) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) y equiv @ X1 form (@ num (X1 arrow form) L I1) y)) p6) X) p2) ([p61:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) X)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) Y) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) Y) (@ X1 form (@ num (X1 arrow form) L I1) Y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) x3 equiv @ X1 form (@ num (X1 arrow form) L I1) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) xc) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq xc) y equiv @ X1 form (@ num (X1 arrow form) L I1) y)) p6) Y) (congr num I1 I2 ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L z1) Y) (eq_nat_e1 I1 I2 p4) p3)) ([p62:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq xc) Y)] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (list_valid_per X1 Eq L p1) ([p63:pf (@ (per X1) form (validper X1) Eq)] per_trans X1 Eq X xc Y p63 (per_symm X1 Eq xc X p63 p61) p62))))))).
list_cons_equiv : {X1:tp} {L1:tm (num arrow X1 arrow form)} {I:tnum} {L2:tm (num arrow X1 arrow form)} {Eq:tm (eqrel X1)} {Hd:tm X1} pf (forall X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) L1 (pred I)) y equiv @ X1 form (@ num (X1 arrow form) L2 (pred I)) y)) -> pf (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L1) I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L2) I) y)) = [X1:tp] [L1:tm (num arrow X1 arrow form)] [I:tnum] [L2:tm (num arrow X1 arrow form)] [Eq:tm (eqrel X1)] [Hd:tm X1] [p2:pf (forall X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) L1 (pred I)) y equiv @ X1 form (@ num (X1 arrow form) L2 (pred I)) y))] forall_i X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L1) I) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) Hd) L2) I) x3) ([y:tm X1] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L1) I) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L2) I) y) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L1) I) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L2) I) y) ([q1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L1) I) y)] or_e (eq num I zero) (not (eq num I zero)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L2) I) y) (excluded_middle (eq num I zero)) ([q3:pf (eq num I zero)] cut (_@2 X1 X1 form Eq y Hd) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L2) I) y) (if_e1 (_eq num I zero) (_@2 X1 X1 form Eq y Hd) (_@2 num X1 form L1 (pred I) y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L1 I y q1) q3) ([q31:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq y) Hd)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L2 I y (if_i1 (eq num I zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) Hd) (_@2 num X1 form L2 (pred I) y) q3 q31))) ([q4:pf (not (eq num I zero))] cut (_@2 num X1 form L1 (pred I) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L2) I) y) (if_e2 (_eq num I zero) (_@2 X1 X1 form Eq y Hd) (_@2 num X1 form L1 (pred I) y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L1 I y q1) q4) ([q41:pf (@ X1 form (@ num (X1 arrow form) L1 (pred I)) y)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L2 I y (if_i2 (eq num I zero) (@ X1 form (@ num (X1 arrow form) L2 (pred I)) y) (_@2 X1 X1 form Eq y Hd) q4 (equiv_e1 (@ X1 form (@ num (X1 arrow form) L1 (pred I)) y) (@ X1 form (@ num (X1 arrow form) L2 (pred I)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L1 (pred I)) x3 equiv @ X1 form (@ num (X1 arrow form) L2 (pred I)) x3) p2 y) q41)))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L2) I) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L1) I) y) ([q2:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L2) I) y)] or_e (eq num I zero) (not (eq num I zero)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L1) I) y) (excluded_middle (eq num I zero)) ([q5:pf (eq num I zero)] cut (_@2 X1 X1 form Eq y Hd) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L1) I) y) (if_e1 (_eq num I zero) (_@2 X1 X1 form Eq y Hd) (_@2 num X1 form L2 (pred I) y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L2 I y q2) q5) ([q51:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq y) Hd)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L1 I y (if_i1 (eq num I zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) Hd) (_@2 num X1 form L1 (pred I) y) q5 q51))) ([q6:pf (not (eq num I zero))] cut (_@2 num X1 form L2 (pred I) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L1) I) y) (if_e2 (_eq num I zero) (_@2 X1 X1 form Eq y Hd) (_@2 num X1 form L2 (pred I) y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L2 I y q2) q6) ([q61:pf (@ X1 form (@ num (X1 arrow form) L2 (pred I)) y)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L1 I y (if_i2 (eq num I zero) (@ X1 form (@ num (X1 arrow form) L1 (pred I)) y) (_@2 X1 X1 form Eq y Hd) q6 (equiv_e2 (@ X1 form (@ num (X1 arrow form) L1 (pred I)) y) (@ X1 form (@ num (X1 arrow form) L2 (pred I)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L1 (pred I)) x3 equiv @ X1 form (@ num (X1 arrow form) L2 (pred I)) x3) p2 y) q61))))))).
list_tl_e1 : {X1:tp} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) I) X) -> pf (@ X1 form (@ num (shadowed_0 X1) L (succ I)) X) = [X1:tp] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) I) X)] and_e1 (@ X1 form (@ num (X1 arrow form) L (succ I)) X) (not (eq num (succ I) zero)) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L I X p1).
list_tl_e2 : {X1:tp} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) I) X) -> pf (not (eq num (succ I) zero)) = [X1:tp] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) I) X)] and_e2 (@ X1 form (@ num (X1 arrow form) L (succ I)) X) (not (eq num (succ I) zero)) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L I X p1).
list_cons->not_nil : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {I:tm X1} {P:tm (list X1)} pf (@ X1 form (@ X1 (X1 arrow form) Eq I) I) -> pf (not (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) I) P))) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [I:tm X1] [P:tm (list X1)] [p0:pf (@ X1 form (@ X1 (X1 arrow form) Eq I) I)] not_i (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) I) P)) ([p1:pf (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) I) P))] cut (not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) I) P) zero) I)) false (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) I) P) x3) x4)) (def1_e (list X1) ([x3:tm (list X1)] forall2 num X1 ([i1:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i1) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) I) P) p1) zero I) ([p2:pf (not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) I) P) zero) I))] not_e (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) I) P) zero) I) p2 (def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq I P zero I (if_i1 (== num zero zero) (@ X1 form (@ X1 (X1 arrow form) Eq I) I) (_@2 num X1 form P (pred zero) I) (refl num zero) p0)))).
list_nth->not_nil : {X1:tp} {L:tm (list X1)} {N:tm num} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) N) X) -> pf (not (@ (list X1) form (list_is_nil X1) L)) = [X1:tp] [L:tm (list X1)] [N:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) N) X)] not_i (@ (list X1) form (list_is_nil X1) L) ([p2:pf (@ (list X1) form (list_is_nil X1) L)] not_e (@ X1 form (@ num (X1 arrow form) L N) X) (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) x4)) (def1_e (list X1) ([x3:tm (list X1)] forall2 num X1 ([i1:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i1) x4))) L p2) N X) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L N X p1)).
list_tl_not_nil->not_nil : {X1:tp} {L:tm (list X1)} pf (@ (list X1) form (list_is_not_nil X1) (@ (list X1) (list X1) (list_tl X1) L)) -> pf (@ (list X1) form (list_is_not_nil X1) L) = [X1:tp] [L:tm (list X1)] [p1:pf (@ (list X1) form (list_is_not_nil X1) (@ (list X1) (list X1) (list_tl X1) L))] def1_i (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) L (not_i (@ (list X1) form (list_is_nil X1) L) ([p2:pf (@ (list X1) form (list_is_nil X1) L)] not_e (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (list_tl X1) L)) (def1_e (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) (@ (list X1) (list X1) (list_tl X1) L) p1) (def1_i (list X1) ([x3:tm (list X1)] forall2 num X1 ([i1:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i1) x4))) (@ (list X1) (list X1) (list_tl X1) L) (forall2_i num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) x3) x4)) ([i2:tm num] [x5:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i2) x5) ([p3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i2) x5)] cut (@ X1 form (@ num (X1 arrow form) L (succ i2)) x5) false (and_e1 (@ X1 form (@ num (X1 arrow form) L (succ i2)) x5) (not (eq num (succ i2) zero)) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x6 and not (eq num (succ x4) zero)) L i2 x5 p3)) ([p4:pf (@ X1 form (@ num (shadowed_0 X1) L (succ i2)) x5)] cut (not (@ X1 form (@ num (X1 arrow form) L (succ i2)) x5)) false (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) x4)) (def1_e (list X1) ([x3:tm (list X1)] forall2 num X1 ([i3:tm num] [x6:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i3) x6))) L p2) (succ i2) x5) ([p5:pf (not (@ X1 form (@ num (shadowed_0 X1) L (succ i2)) x5))] not_e (@ X1 form (@ num (shadowed_0 X1) L (succ i2)) x5) p5 p4)))))))).
list_length->not_nil : {X1:tp} {L:tm (list X1)} {N:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (gt N zero) -> pf (@ (list X1) form (list_is_not_nil X1) L) = [X1:tp] [L:tm (list X1)] [N:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (gt N zero)] def1_i (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) L (not_i (@ (list X1) form (list_is_nil X1) L) ([q1:pf (@ (list X1) form (list_is_nil X1) L)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) zero) false (list_length_nil' X1 L q1) ([q2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) zero)] cut (eq num N zero) false (list_length_uniq X1 L N zero p1 q2) ([q3:pf (eq num N zero)] not_e (eq num N zero) (gt->neq N zero p2) q3)))).
list_singleton_i : {N:tm num} {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {Y:tm X1} {X:tm X1} pf (eq num N zero) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq Y) X) -> pf (@ X1 form (@ num (shadowed_0 X1) (list_singleton X1 Eq X) N) Y) = [N:tm num] [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [Y:tm X1] [X:tm X1] [p2:pf (eq num N zero)] [p4:pf (@ X1 form (@ X1 (X1 arrow form) Eq Y) X)] list_cons_i1 N X1 Eq Y X (list_nil X1) p2 p4.
list_singleton_e : {X1:tp} {Eq:tm (eqrel X1)} {X:tm X1} {N:tm num} {Y:tm X1} {A:tform} pf (@ X1 form (@ num (shadowed_0 X1) (list_singleton X1 Eq X) N) Y) -> (pf (eq num N zero) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) X) -> pf A) -> pf A = [X1:tp] [Eq:tm (eqrel X1)] [X:tm X1] [N:tm num] [Y:tm X1] [A:tform] [p2:pf (@ X1 form (@ num (shadowed_0 X1) (list_singleton X1 Eq X) N) Y)] [p4:pf (eq num N zero) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) X) -> pf A] cut2 (@ X1 form (@ num (shadowed_0 X1) (list_singleton X1 Eq X) N) Y) (eq num N zero imp @ X1 form (@ X1 (shadowed_0 X1) Eq Y) X imp A) A p2 (imp2_i (eq num N zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) X) A ([x3:pf (eq num N zero)] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) X)] p4 x3 x4)) ([x3:pf (@ X1 form (@ num (shadowed_0 X1) (list_singleton X1 Eq X) N) Y)] [x4:pf (eq num N zero imp @ X1 form (@ X1 (shadowed_0 X1) Eq Y) X imp A)] or_e (eq num N zero and @ X1 form (@ X1 (shadowed_0 X1) Eq Y) X) (not (eq num N zero) and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (list_nil X1)) (pred N)) Y) A (list_cons_e X1 Eq X (list_nil X1) N Y (list_nth_i X1 (list_singleton X1 Eq X) N Y p2)) ([p6:pf (eq num N zero and @ X1 form (@ X1 (shadowed_0 X1) Eq Y) X)] and_l (eq num N zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) X) A p6 ([x5:pf (eq num N zero)] [x6:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) X)] p4 x5 x6)) ([p6:pf (not (eq num N zero) and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (list_nil X1)) (pred N)) Y)] and_l (eq num N zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) X) A (list_nil_e X1 (pred N) Y (eq num N zero and @ X1 form (@ X1 (shadowed_0 X1) Eq Y) X) (list_nth_e X1 (list_nil X1) (pred N) Y (and_e2 (not (eq num N zero)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (list_nil X1)) (pred N)) Y) p6))) ([x5:pf (eq num N zero)] [x6:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) X)] p4 x5 x6))).
list_singleton_hd : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) X) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X)] list_hd_i X1 (list_singleton X1 Eq X) X (list_singleton_i zero X1 Eq X X (refl num zero) p1).
list_singleton_0th : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (list_singleton X1 Eq X)) zero) X) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X)] list_hd_nth X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) X (list_singleton_hd X1 Eq X p2).
list_singleton_length : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) one) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) (succ zero)) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) one) (list_length_cons X1 Eq X (list_nil X1) zero p1 (list_length_nil X1)) ([q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) (succ zero))] congr num one (+ zero one) ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) z1) (symm num (+ zero one) one (zero_plus one)) q1).
list_valid_singleton : {X1:tp} {Eq:tm (per X1)} {X:tm X1} pf (@ (per X1) form (validper X1) Eq) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (list_singleton X1 Eq X)) = [X1:tp] [Eq:tm (per X1)] [X:tm X1] [p2:pf (@ (per X1) form (validper X1) Eq)] [p4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) p2 ([x3:pf (@ (per X1) form (validper X1) Eq)] list_valid_cons X1 Eq X (list_nil X1) p4 (list_valid_nil X1 Eq p2)).
list_pair_0th : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} {X0:tm X1} {X2:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X0) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (list_pair X1 Eq X0 X2)) zero) X) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [X0:tm X1] [X2:tm X1] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X0)] list_nth_i X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X0) (list_singleton X1 Eq X2)) zero X (list_cons_i1 zero X1 Eq X X0 (list_singleton X1 Eq X2) (refl num zero) p2).
list_pair_1th : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X2:tm X1} {X0:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) Eq X2) X2) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (list_pair X1 Eq X0 X2)) one) X2) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X2:tm X1] [X0:tm X1] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq X2) X2)] def3_congr3 num one (+ zero one) X1 (list X1) (list_nth X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X0) (list_singleton X1 Eq X2)) X2 (symm num (+ zero one) one (zero_plus one)) (list_nth_cons_i zero X1 (list_singleton X1 Eq X2) X2 Eq X0 n_zero (list_singleton_0th X1 Eq X2 p2)).
list_pair_length : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X2:tm X1} {X3:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) Eq X2) X2) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq X3) X3) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (list_pair X1 Eq X2 X3)) two) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X2:tm X1] [X3:tm X1] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq X2) X2)] [p4:pf (@ X1 form (@ X1 (X1 arrow form) Eq X3) X3)] cut2 (@ X1 form (@ X1 (X1 arrow form) Eq X2) X2) (@ X1 form (@ X1 (X1 arrow form) Eq X3) X3) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X2) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X3) (list_nil X1)))) (shadowed_2 2)) p2 p4 ([x3:pf (@ X1 form (@ X1 (X1 arrow form) Eq X2) X2)] [x4:pf (@ X1 form (@ X1 (X1 arrow form) Eq X3) X3)] def2_congr3 num (shadowed_2 2) (+ (shadowed_2 1) (shadowed_2 1)) (list X1) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X2) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X3) (list_nil X1))) (symm num (+ (shadowed_2 1) (shadowed_2 1)) (shadowed_2 2) (eval_plus 1 1 2 1+1=2)) (list_length_cons X1 Eq X2 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X3) (list_nil X1)) one p2 (list_singleton_length X1 Eq X3 p4))).
list_valid_pair : {X1:tp} {Eq:tm (per X1)} {X:tm X1} {Y:tm X1} pf (@ (per X1) form (validper X1) Eq) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Y) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (list_pair X1 Eq X Y)) = [X1:tp] [Eq:tm (per X1)] [X:tm X1] [Y:tm X1] [p2:pf (@ (per X1) form (validper X1) Eq)] [p4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X)] [p6:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Y)] cut3 (@ (per X1) form (validper X1) Eq) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Y) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_singleton X1 Eq Y))) p2 p4 p6 ([x3:pf (@ (per X1) form (validper X1) Eq)] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X)] [x5:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Y)] list_valid_cons X1 Eq X (list_singleton X1 Eq Y) p4 (list_valid_singleton X1 Eq Y p2 p6)).
list_not_nil_hd_exists : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (list_is_not_nil X1) L) -> pf (exists X1 ([x3:tm X1] @ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) x3)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ (list X1) form (list_is_not_nil X1) L)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (exists X1 ([x3:tm X1] @ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x4:tm (list X1)] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x4 zero) x5)) L) x3)) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i3) y)))))) Eq L p1)) ([n:tm num] [p3:pf (isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y)))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n) (exists X1 ([x3:tm X1] @ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x4:tm (list X1)] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x4 zero) x5)) L) x3)) (list_valid_implies_length n X1 Eq L p3) ([p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] cut (gt n zero) (exists X1 ([x3:tm X1] @ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x4:tm (list X1)] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x4 zero) x5)) L) x3)) (list_length_not_nil X1 L n p2 p4) ([p5:pf (gt n zero)] cut (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L zero) y))) (exists X1 ([x3:tm X1] @ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x4:tm (list X1)] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x4 zero) x5)) L) x3)) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) zero) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L zero) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L zero) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n) (forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y))))) p3) zero) (inrange_zero n p5)) ([p6:pf (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)))] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) (exists X1 ([x3:tm X1] @ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x4:tm (list X1)] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x4 zero) x5)) L) x3)) p6 ([x13:tm X1] [p7:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x4:tm (list X1)] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x4 zero) x5)) L) x3) x13 (def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L x13 (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13) (@ X1 form (@ num (shadowed_0 X1) L zero) x13) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x3 equiv @ X1 form (@ num (shadowed_0 X1) L zero) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) p7) x13) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) p7)))))))).
list_inrange_not_length : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {L:tm (num arrow X1 arrow form)} {I:tm num} pf (exists X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L I) y))) -> pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I)) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [L:tm (num arrow X1 arrow form)] [I:tm num] [p2:pf (exists X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L I) y)))] suppose_not (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I)) ([p3:pf (not (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I)))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I) false (equiv_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I) (not (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I))) (equiv_not_not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I)) p3) ([p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I)] cut (forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange I) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1)) false (and_e2 (isNat I) (forall num ([I2:tm num] @ num form (@ num (shadowed_0 num) inrange I) I2 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I2)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I3:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I3)) L I p4)) ([p5:pf (forall num ([i1:tm num] @ num form (@ num (shadowed_0 num) inrange I) i1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i1))] cut (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) false (equiv_e1 (not (@ num form (@ num (shadowed_0 num) inrange I) I)) (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (equiv_not_i (@ num form (@ num (shadowed_0 num) inrange I) I) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange I) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) p5 I)) (not_inrange_n I I (refl num I))) ([p6:pf (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I))] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L I) y)) false p2 ([x5:tm X1] [p7:pf (@ X1 form (@ X1 (X1 arrow form) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L I) y))] cut (@ X1 form (@ num (X1 arrow form) L I) x5) false (equiv_e1 (@ X1 form (@ X1 (X1 arrow form) Eq x5) x5) (@ X1 form (@ num (X1 arrow form) L I) x5) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x5) x3 equiv @ X1 form (@ num (X1 arrow form) L I) x3) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eq x5) x5) (forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L I) y)) p7) x5) (and_e1 (@ X1 form (@ X1 (X1 arrow form) Eq x5) x5) (forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L I) y)) p7)) ([p8:pf (@ X1 form (@ num (X1 arrow form) L I) x5)] not_e (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I) p6 (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L I (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L I) x3) x5 p8)))))))).
list_not_inrange_not_length : {N:tnum} {I:tm num} {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {L:tm (num arrow X1 arrow form)} pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) -> pf (isNat N) -> pf (forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i1) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) -> pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I)) = [N:tnum] [I:tm num] [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [L:tm (num arrow X1 arrow form)] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))] [p11:pf (isNat N)] [p2:pf (forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i2) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))] suppose_not (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I)) ([p3:pf (not (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I)))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I) false (equiv_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I) (not (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I))) (equiv_not_not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I)) p3) ([p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I)] cut (isNat I) false (and_e1 (isNat I) (forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange I) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I2 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I2)) L I p4)) ([p41:pf (isNat I)] cut (forall num ([I3:tm num] @ num form (@ num (shadowed_0 num) inrange I) I3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I3)) false (and_e2 (isNat I) (forall num ([I4:tm num] @ num form (@ num (shadowed_0 num) inrange I) I4 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I4)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I5:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I5 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I5)) L I p4)) ([p5:pf (forall num ([i3:tm num] @ num form (@ num (shadowed_0 num) inrange I) i3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i3))] cut (geq I (succ N)) false (not_inrange_geq (succ N) I p1 p41) ([p10:pf (geq I (succ N))] cut (> (succ N) zero) false (trans_gt_geq (succ N) N zero (succ_greater N) (and_e2 (isInt N) (geq N zero) p11)) ([p12:pf (gt (succ N) zero)] cut (> I zero) false (trans_geq_gt I (succ N) zero p10 p12) ([p13:pf (gt I zero)] cut (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred I)) false (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange I) (pred I)) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred I)) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange I) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) p5 (pred I)) (inrange_pred_n I p41 p13)) ([p6:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred I))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L (pred I)) x3) false (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L (pred I) p6) ([x5:tm X1] [p7:pf (@ X1 form (@ num (X1 arrow form) L (pred I)) x5)] cut (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L (pred I)) y))) false (imp_e (not (@ num form (@ num (shadowed_0 num) inrange N) (pred I))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L (pred I)) y))) (and_e2 (@ num form (@ num (shadowed_0 num) inrange N) (pred I) imp exists X1 ([x6:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L (pred I)) y))) (not (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) imp forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L (pred I)) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) x3) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) p2 (pred I))) (not_i (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) ([p14:pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I))] cut (lt (pred I) N) false (inrange_e3 N (pred I) p14) ([p15:pf (lt (pred I) N)] cut (> (+ N one) (+ (pred I) one)) false (greater_add_closure N (pred I) one p15) ([p16:pf (gt (succ N) (succ (pred I)))] cut (gt (succ N) I) false (congr num I (succ (pred I)) ([z1:tm num] gt (succ N) z1) (symm num (succ (pred I)) I (succpred I)) p16) ([p17:pf (gt (succ N) I)] pf_greater_and_greatereq I (succ N) false p10 p17)))))) ([p8:pf (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L (pred I)) y)))] cut (not (@ X1 form (@ num (X1 arrow form) L (pred I)) x5)) false (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L (pred I)) x3)) p8 x5) ([p9:pf (not (@ X1 form (@ num (X1 arrow form) L (pred I)) x5))] not_e (@ X1 form (@ num (X1 arrow form) L (pred I)) x5) p9 p7))))))))))).
list_size_big : {X1:tp} {L:tm (list X1)} {N:tm num} {X:tm num} {Y:tm X1} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) one)) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) X) Y) -> pf (gt N one) = [X1:tp] [L:tm (list X1)] [N:tm num] [X:tm num] [Y:tm X1] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) one))] [p3:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) X) Y)] or3_e (> N one) (== num N one) (< N one) (gt N one) (gt_eq_lt N one) ([p4:pf (gt N one)] p4) ([p5:pf (eq num N one)] false_e (gt N one) (not_e (@ num form (@ (list X1) (num arrow form) (list_length X1) L) one) p2 (imp_e (_@_f num (@ (list X1) (num arrow form) (list_length X1) L) N) (_@_f num (@ (list X1) (num arrow form) (list_length X1) L) one) (forall_e (num arrow form) ([x3:tm (num arrow form)] _@_f num x3 N imp _@_f num x3 one) (symm num N one p5) (@ (list X1) (num arrow form) (list_length X1) L)) p1))) ([p6:pf (gt one N)] and3_l (isInt X) (geq X zero) (lt X N) (gt N one) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N X (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) X) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) X) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) X) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L X (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L X) x3) Y (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L X Y p3))))) ([p7:pf (isInt X)] [p8:pf (geq X zero)] [p9:pf (lt X N)] false_e (gt N one) (not_e (< X zero) (greatereq_not_lt X zero p8) (trans_lt_leq X N zero p9 (less_plus1_e N zero (isNat->isInt N (and_e1 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1))) p_zero (cut (== num (+ zero one) one) (not (<= (plus zero one) N)) (zero_plus one) ([pp:pf (eq num (plus zero one) one)] gt_not_lt_eq (plus zero one) N (trans_geq_gt (plus zero one) one N (eq->geq (plus zero one) one pp) p6)))))))).
list_valid_subset : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {L:tm (list X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) (@ (set X1) (per X1) (set2per X1) S1)) L) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) (@ (set X1) (per X1) (set2per X1) S2)) L) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [L:tm (list X1)] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) (@ (set X1) (per X1) (set2per X1) S1)) L)] exists_and_e num ([x3:tm num] isNat x3) ([x3:tm num] forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y))))))) (@ (set X1) (per X1) (set2per X1) S2)) L) (and_e2 (@ (per X1) form (validper X1) (@ (set X1) (per X1) (set2per X1) S1)) (exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) x6) y equiv @ X1 form (@ num (X1 arrow form) L i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i3) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ num (X1 arrow form) x4 i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i4) y)))))) (@ (set X1) (per X1) (set2per X1) S1) L p2)) ([n:tm num] [p3:pf (isNat n)] [p4:pf (forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([a:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) a and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i5) y)))))] cut (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x4) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n1:tm num] isNat n1 and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i6) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x8) y equiv @ X1 form (@ num (X1 arrow form) x4 i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i6) y))))))) (@ (set X1) (per X1) (set2per X1) S2)) L) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x4) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) y)))) ([i7:tm num] if_i (@ num form (@ num (shadowed_0 num) inrange n) i7) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i7) y))) ([p11:pf (@ num form (@ num (shadowed_0 num) inrange n) i7)] exists_and_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) x3) x3) ([x3:tm X1] forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) x3) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) i7) (exists X1 ([a:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) a and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i7) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([a:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) a and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) y)))) p4 i7) p11) ([a:tm X1] [p12:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) a)] [p13:pf (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y))] cut (@ X1 form S2 a) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y))) (subset_e X1 S1 S2 a p1 (and_e2 (eq X1 a a) (@ X1 form S1 a) (def3_e X1 X1 (set X1) ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4) S1 a a p12))) ([p12b:pf (@ X1 form S2 a)] cut (@ X1 form (@ X1 (X1 arrow form) (@ (set X1) (X1 arrow X1 arrow form) (lam3 (set X1) X1 X1 form ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4)) S2) a) a) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y))) (def3_i (set X1) X1 X1 ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4) S2 a a (and_i (== X1 a a) (@ X1 form S2 a) (refl X1 a) p12b)) ([p14:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) a)] cut (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i7) x3)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y))) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i7) x3) ([y:tm X1] equiv_i2 (@ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) y) (@ X1 form (@ num (shadowed_0 X1) L i7) y) ([p16:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) y)] cut (eq X1 a y) (@ X1 form (@ num (shadowed_0 X1) L i7) y) (and_e1 (eq X1 a y) (@ X1 form S2 a) (def3_e X1 X1 (set X1) ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4) S2 a y p16)) ([p17a:pf (eq X1 a y)] equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) y) (@ X1 form (@ num (shadowed_0 X1) L i7) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i7) x3) p13 y) (congr X1 y a ([z1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) z1) (symm X1 a y p17a) p12))) ([p18:pf (@ X1 form (@ num (shadowed_0 X1) L i7) y)] and_l (eq X1 a y) (@ X1 form S1 a) (@ X1 form (@ X1 (X1 arrow form) (@ (set X1) (X1 arrow X1 arrow form) (lam3 (set X1) X1 X1 form ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4)) S2) a) y) (def3_e X1 X1 (set X1) ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4) S1 a y (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) y) (@ X1 form (@ num (shadowed_0 X1) L i7) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i7) x3) p13 y) p18)) ([p19:pf (eq X1 a y)] [p20:pf (@ X1 form S1 a)] def3_i (set X1) X1 X1 ([x3:tm (set X1)] [x4:tm X1] [x5:tm X1] eq X1 x4 x5 and @ X1 form x3 x4) S2 a y (and_i (eq X1 a y) (@ X1 form S2 a) p19 (subset_e X1 S1 S2 a p1 p20)))))) ([p15:pf (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x3) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y)) a (and_i (@ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) a) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y)) p14 p15)))))) ([p21:pf (not (@ num form (@ num (shadowed_0 num) inrange n) i7))] if_e2 (@ num form (@ num (shadowed_0 num) inrange n) i7) (exists X1 ([a:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) a and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i7) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([a:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) a and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S1) a) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) y)))) p4 i7) p21))) ([p25:pf (forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i8) (exists X1 ([a:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) a and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) y equiv @ X1 form (@ num (shadowed_0 X1) L i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i8) y)))))] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n2:tm num] isNat n2 and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange n2) i9) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) y equiv @ X1 form (@ num (X1 arrow form) x4 i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i9) y)))))) (@ (set X1) (per X1) (set2per X1) S2) L (and_i (@ (per X1) form (validper X1) (@ (set X1) (per X1) (set2per X1) S2)) (exists num ([x3:tm num] isNat x3 and forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i10) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x10) y equiv @ X1 form (@ num (X1 arrow form) L i10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i10) y)))))) (validper_set2per X1 S2) (exists_i num ([x3:tm num] isNat x3 and forall num ([i11:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i11) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) x11) y equiv @ X1 form (@ num (X1 arrow form) L i11) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i11) y))))) n (and_i (isNat n) (forall num ([i12:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([a:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) a and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) (@ (set X1) (per X1) (set2per X1) S2) a) y equiv @ X1 form (@ num (shadowed_0 X1) L i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i12) y))))) p3 p25))))).
list_eq_i : {X1:tp} {Eq:tm (per X1)} {L1:tm (rel num X1)} {L2:tm (rel num X1)} pf (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq) L1) L2) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) = [X1:tp] [Eq:tm (per X1)] [L1:tm (rel num X1)] [L2:tm (rel num X1)] [p1:pf (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq) L1) L2)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1)] def3_i (eqrel X1) (list X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm (list X1)] @ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) x3) x4) x5 and @ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) x3) x4) Eq L1 L2 (and_i (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq) L1) L2) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) p1 p2).
list_eq_e : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq) L1) L2) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] and_e1 (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq) L1) L2) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) (def3_e (list X1) (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm (list X1)] @ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) x3) x4) x5 and @ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) x3) x4) Eq L1 L2 p1).
list_eq_nth : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} {I:tm num} {I':tm num} {X:tm X1} {X':tm X1} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ num form (@ num (shadowed_0 num) eq_arith I) I') -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X') -> pf (@ X1 form (@ num (shadowed_0 X1) L1 I) X equiv @ X1 form (@ num (shadowed_0 X1) L2 I') X') = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [I:tm num] [I':tm num] [X:tm X1] [X':tm X1] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p2:pf (@ num form (@ num (shadowed_0 num) eq_arith I) I')] [p3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X')] per_rel_e1 num X1 eq_arith Eq L1 L2 I I' X X' (list_eq_e X1 Eq L1 L2 p1) p2 p3.
list_eq_nth_valid : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ X1 form (@ num (shadowed_0 X1) L1 I) X) -> pf (@ num form (@ num (shadowed_0 num) eq_arith I) I and @ X1 form (@ X1 (shadowed_0 X1) Eq X) X) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p2:pf (@ X1 form (@ num (shadowed_0 X1) L1 I) X)] per_rel_e2 num X1 eq_arith Eq L1 L2 I X (list_eq_e X1 Eq L1 L2 p1) p2.
list_eq_nth_valid' : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ X1 form (@ num (shadowed_0 X1) L2 I) X) -> pf (@ num form (@ num (shadowed_0 num) eq_arith I) I and @ X1 form (@ X1 (shadowed_0 X1) Eq X) X) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p2:pf (@ X1 form (@ num (shadowed_0 X1) L2 I) X)] per_rel_e3 num X1 eq_arith Eq L1 L2 I X (list_eq_e X1 Eq L1 L2 p1) p2.
list_eq_nth' : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (forall2 num X1 ([i1:tm num] [x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i1) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i1) x3)) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] forall2_i num X1 ([x3:tm num] [x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) x3) x4) ([i2:tm num] [x4:tm X1] equiv_i (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i2) x4) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i2) x4) (imp_i (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i2) x4) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i2) x4) ([q1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i2) x4)] cut (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i2) x4) (list_eq_nth_valid X1 Eq L1 L2 i2 x4 p1 (list_nth_e X1 L1 i2 x4 q1)) ([q11:pf (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i2) x4) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i2) x4) (list_eq_nth X1 Eq L1 L2 i2 i2 x4 x4 p1 (and_e1 (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) q11) (and_e2 (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) q11)) ([q12:pf (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i2) x4)] list_nth_i X1 L2 i2 x4 (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (shadowed_0 X1) L2 i2) x4) q12 (list_nth_e X1 L1 i2 x4 q1)))))) (imp_i (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i2) x4) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i2) x4) ([q2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i2) x4)] cut (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i2) x4) (list_eq_nth_valid' X1 Eq L1 L2 i2 x4 p1 (list_nth_e X1 L2 i2 x4 q2)) ([q21:pf (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i2) x4) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i2) x4) (list_eq_nth X1 Eq L1 L2 i2 i2 x4 x4 p1 (and_e1 (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) q21) (and_e2 (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) q21)) ([q22:pf (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i2) x4)] list_nth_i X1 L1 i2 x4 (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (shadowed_0 X1) L2 i2) x4) q22 (list_nth_e X1 L2 i2 x4 q2))))))).
list_eq_nth_e1 : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ X1 form (@ num (shadowed_0 X1) L1 I) X) -> pf (@ X1 form (@ num (shadowed_0 X1) L2 I) X) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p2:pf (@ X1 form (@ num (shadowed_0 X1) L1 I) X)] list_nth_e X1 L2 I X (equiv_e1 (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) I) X) (forall2_e num X1 ([x3:tm num] [x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) x3) x4) (list_eq_nth' X1 Eq L1 L2 p1) I X) (list_nth_i X1 L1 I X p2)).
list_eq_nth_e2 : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ X1 form (@ num (shadowed_0 X1) L2 I) X) -> pf (@ X1 form (@ num (shadowed_0 X1) L1 I) X) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p2:pf (@ X1 form (@ num (shadowed_0 X1) L2 I) X)] list_nth_e X1 L1 I X (equiv_e2 (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) I) X) (forall2_e num X1 ([x3:tm num] [x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) x3) x4) (list_eq_nth' X1 Eq L1 L2 p1) I X) (list_nth_i X1 L2 I X p2)).
list_eq_valid : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] and_e2 (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq) L1) L2) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) (def3_e (list X1) (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm (list X1)] @ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) x3) x4) x5 and @ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) x3) x4) Eq L1 L2 p1).
list_eq_valid' : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i1) y))))))) Eq) L2) (list_eq_valid X1 Eq L1 L2 p1) ([p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y))))))) Eq) L2) (list_valid_per X1 Eq L1 p2) ([p3:pf (@ (per X1) form (validper X1) Eq)] exists_e num ([x3:tm num] isNat x3 and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i3) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L1 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i3) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x8) y equiv @ X1 form (@ num (X1 arrow form) x4 i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i4) y))))))) Eq) L2) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L1 i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i5) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i6) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x10) y equiv @ X1 form (@ num (X1 arrow form) x4 i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i6) y)))))) Eq L1 p2)) ([n:tm num] [q1:pf (isNat n and forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i7) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) L1 i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i7) y)))))] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n1:tm num] isNat n1 and forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i8) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x12) y equiv @ X1 form (@ num (X1 arrow form) x4 i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i8) y)))))) Eq L2 (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i9) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) L2 i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i9) y)))))) (list_valid_per X1 Eq L1 p2) (exists_i num ([x3:tm num] isNat x3 and forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i10) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y equiv @ X1 form (@ num (X1 arrow form) L2 i10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i10) y))))) n (and_i (isNat n) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) L2 x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 x3) x4))))) (and_e1 (isNat n) (forall num ([i11:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i11) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (X1 arrow form) L1 i11) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i11) y))))) q1) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) L2 x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 x3) x4)))) ([i12:tm num] cut (if (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ num (X1 arrow form) L1 i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i12) y)))) (if (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i12) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 i12) x3)))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (X1 arrow form) L1 x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 x3) y)))) (and_e2 (isNat n) (forall num ([i13:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i13) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y equiv @ X1 form (@ num (X1 arrow form) L1 i13) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i13) y))))) q1) i12) ([q11:pf (if (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) x19 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) y equiv @ X1 form (@ num (X1 arrow form) L1 i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i12) y))))] if_i (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i12) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 i12) x3))) ([q2:pf (@ num form (@ num (shadowed_0 num) inrange n) i12)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L1 i12) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i12) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) x20 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) y equiv @ X1 form (@ num (X1 arrow form) L1 i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i12) y))) q11 q2) ([x21:tm X1] [q21:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) L1 i12) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i12) x4)) x21 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i12) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) L1 i12) y)) q21) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i12) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (shadowed_0 X1) L2 i12) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (shadowed_0 X1) L2 i12) y) ([q4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y)] cut (@ X1 form (@ num (X1 arrow form) L1 i12) y) (@ X1 form (@ num (shadowed_0 X1) L2 i12) y) (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (X1 arrow form) L1 i12) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (X1 arrow form) L1 i12) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y1 equiv @ X1 form (@ num (X1 arrow form) L1 i12) y1)) q21) y) q4) ([q41:pf (@ X1 form (@ num (shadowed_0 X1) L1 i12) y)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y) (@ X1 form (@ num (shadowed_0 X1) L2 i12) y) (per_refl X1 Eq y x21 p3 (per_symm X1 Eq x21 y p3 q4)) ([q42:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y)] equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L1 i12) y) (@ X1 form (@ num (shadowed_0 X1) L2 i12) y) (list_eq_nth X1 Eq L1 L2 i12 i12 y y p1 (eqv_refl num eq_arith i12 valideqv_eq_arith) q42) q41)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) L2 i12) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) ([q5:pf (@ X1 form (@ num (shadowed_0 X1) L2 i12) y)] cut (@ num form (@ num (shadowed_0 num) eq_arith i12) i12 and @ X1 form (@ X1 (shadowed_0 X1) Eq y) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (list_eq_nth_valid' X1 Eq L1 L2 i12 y p1 q5) ([q52:pf (@ num form (@ num (shadowed_0 num) eq_arith i12) i12 and @ X1 form (@ X1 (shadowed_0 X1) Eq y) y)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i12) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L1 i12) y) (@ X1 form (@ num (shadowed_0 X1) L2 i12) y) (list_eq_nth X1 Eq L1 L2 i12 i12 y y p1 (eqv_refl num eq_arith i12 valideqv_eq_arith) (and_e2 (@ num form (@ num (shadowed_0 num) eq_arith i12) i12) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y) q52)) q5) ([q53:pf (@ X1 form (@ num (shadowed_0 X1) L1 i12) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (X1 arrow form) L1 i12) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (X1 arrow form) L1 i12) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21) (forall X1 ([y2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y2 equiv @ X1 form (@ num (X1 arrow form) L1 i12) y2)) q21) y) q53))))))))) ([q3:pf (not (@ num form (@ num (shadowed_0 num) inrange n) i12))] cut (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i12) y))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 i12) x3))) (if_e2 (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x22:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) x22 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) y equiv @ X1 form (@ num (X1 arrow form) L1 i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i12) y))) q11 q3) ([q31:pf (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L1 i12) y)))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 i12) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) L2 i12) y) ([q32:pf (@ X1 form (@ num (shadowed_0 X1) L2 i12) y)] cut (@ num form (@ num (shadowed_0 num) eq_arith i12) i12 and @ X1 form (@ X1 (shadowed_0 X1) Eq y) y) false (list_eq_nth_valid' X1 Eq L1 L2 i12 y p1 q32) ([q33:pf (@ num form (@ num (shadowed_0 num) eq_arith i12) i12 and @ X1 form (@ X1 (shadowed_0 X1) Eq y) y)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i12) y) false (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L1 i12) y) (@ X1 form (@ num (shadowed_0 X1) L2 i12) y) (list_eq_nth X1 Eq L1 L2 i12 i12 y y p1 (and_e1 (@ num form (@ num (shadowed_0 num) eq_arith i12) i12) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y) q33) (and_e2 (@ num form (@ num (shadowed_0 num) eq_arith i12) i12) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y) q33)) q32) ([q34:pf (@ X1 form (@ num (shadowed_0 X1) L1 i12) y)] not_e (@ X1 form (@ num (shadowed_0 X1) L1 i12) y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L1 i12) x3)) q31 y) q34))))))))))))))).
list_eq_validper : {X1:tp} {Eq:tm (per X1)} pf (@ (per X1) form (validper X1) Eq) -> pf (@ (per (list X1)) form (validper (list X1)) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq)) = [X1:tp] [Eq:tm (per X1)] [p1:pf (@ (per X1) form (validper X1) Eq)] cut (@ (per (rel num X1)) form (validper (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq)) (@ (per (list X1)) form (lam (per (list X1)) form ([x3:tm (per (list X1))] @ (rel (list X1) (list X1)) form (symmetric (list X1)) x3 and @ (rel (list X1) (list X1)) form (transitive (list X1)) x3)) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq)) (validper_per_rel num eq_arith X1 Eq (valideqv->validper num eq_arith valideqv_eq_arith) p1) ([p3:pf (@ (per (rel num X1)) form (validper (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq))] def1_i (per (list X1)) ([x3:tm (per (list X1))] @ (rel (list X1) (list X1)) form (symmetric (list X1)) x3 and @ (rel (list X1) (list X1)) form (transitive (list X1)) x3) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (and_i (@ (rel (list X1) (list X1)) form (lam (rel (list X1) (list X1)) form ([x3:tm (rel (list X1) (list X1))] forall2 (list X1) (list X1) ([x4:tm (list X1)] [y:tm (list X1)] @ (list X1) form (@ (list X1) (list X1 arrow form) x3 x4) y imp @ (list X1) form (@ (list X1) (list X1 arrow form) x3 y) x4))) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq)) (@ (rel (list X1) (list X1)) form (lam (rel (list X1) (list X1)) form ([x3:tm (rel (list X1) (list X1))] forall3 (list X1) (list X1) (list X1) ([x5:tm (list X1)] [y:tm (list X1)] [z1:tm (list X1)] @ (list X1) form (@ (list X1) (list X1 arrow form) x3 x5) y imp @ (list X1) form (@ (list X1) (list X1 arrow form) x3 y) z1 imp @ (list X1) form (@ (list X1) (list X1 arrow form) x3 x5) z1))) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq)) (def1_i (rel (list X1) (list X1)) ([x3:tm (rel (list X1) (list X1))] forall2 (list X1) (list X1) ([x6:tm (list X1)] [y:tm (list X1)] @ (list X1) form (@ (list X1) (list X1 arrow form) x3 x6) y imp @ (list X1) form (@ (list X1) (list X1 arrow form) x3 y) x6)) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (forall2_i (list X1) (list X1) ([x3:tm (list X1)] [x4:tm (list X1)] @ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) x3) x4 imp @ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) x4) x3) ([x7:tm (list X1)] [y:tm (list X1)] imp_i (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) x7) y) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) y) x7) ([q1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) x7) y)] list_eq_i X1 Eq y x7 (per_symm (rel num X1) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq) x7 y p3 (list_eq_e X1 Eq x7 y q1)) (list_eq_valid' X1 Eq x7 y q1))))) (def1_i (rel (list X1) (list X1)) ([x3:tm (rel (list X1) (list X1))] forall3 (list X1) (list X1) (list X1) ([x8:tm (list X1)] [y:tm (list X1)] [z2:tm (list X1)] @ (list X1) form (@ (list X1) (list X1 arrow form) x3 x8) y imp @ (list X1) form (@ (list X1) (list X1 arrow form) x3 y) z2 imp @ (list X1) form (@ (list X1) (list X1 arrow form) x3 x8) z2)) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (forall3_i (list X1) (list X1) (list X1) ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm (list X1)] @ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) x3) x4 imp @ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) x4) x5 imp @ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) x3) x5) ([x9:tm (list X1)] [y:tm (list X1)] [z3:tm (list X1)] imp2_i (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) x9) y) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) y) z3) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) x9) z3) ([q2:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) x9) y)] [q3:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) y) z3)] list_eq_i X1 Eq x9 z3 (per_trans (rel num X1) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq) x9 y z3 p3 (list_eq_e X1 Eq x9 y q2) (list_eq_e X1 Eq y z3 q3)) (list_eq_valid X1 Eq x9 y q2))))))).
list_eq_trans : {X1:tp} {Eq:tm (per X1)} {L1:tm (list X1)} {L2:tm (list X1)} {L3:tm (list X1)} pf (@ (per X1) form (validper X1) Eq) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L2) L3) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L3) = [X1:tp] [Eq:tm (per X1)] [L1:tm (list X1)] [L2:tm (list X1)] [L3:tm (list X1)] [p1:pf (@ (per X1) form (validper X1) Eq)] [p2:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p3:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L2) L3)] per_trans (list X1) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1 L2 L3 (list_eq_validper X1 Eq p1) p2 p3.
list_eq_symm : {X1:tp} {Eq:tm (per X1)} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (per X1) form (validper X1) Eq) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L2) L1) = [X1:tp] [Eq:tm (per X1)] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ (per X1) form (validper X1) Eq)] [p2:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] per_symm (list X1) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1 L2 (list_eq_validper X1 Eq p1) p2.
list_eq_refl : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L) (list_valid_per X1 Eq L p1) ([p0:pf (@ (per X1) form (validper X1) Eq)] list_eq_i X1 Eq L L (per_rel_i num X1 eq_arith Eq L L ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q11:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q12:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] equiv_i (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') ([q4:pf (@ X1 form (@ num (shadowed_0 X1) L i1) x3)] cut (@ X1 form (@ num (shadowed_0 X1) L i') x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (congr num i' i1 ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L z1) x3) (symm num i1 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q11)) q4) ([q41:pf (@ X1 form (@ num (shadowed_0 X1) L i') x3)] list_valid_eqv_class X1 Eq L i' x3 x' p1 q41 q12))) (imp_i (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (shadowed_0 X1) L i1) x3) ([q5:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] cut (@ X1 form (@ num (shadowed_0 X1) L i1) x') (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (congr num i1 i' ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) L z2) x') (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q11) q5) ([q51:pf (@ X1 form (@ num (shadowed_0 X1) L i1) x')] list_valid_eqv_class X1 Eq L i1 x' x3 p1 q51 (per_symm X1 Eq x3 x' p0 q12))))) ([i2:tm num] [x4:tm X1] [q2:pf (@ X1 form (@ num (shadowed_0 X1) L i2) x4)] and_i (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (eqv_refl num eq_arith i2 valideqv_eq_arith) (list_nth_valid X1 Eq L i2 x4 p1 (list_nth_i X1 L i2 x4 q2))) ([i':tm num] [x':tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] and_i (@ num form (@ num (shadowed_0 num) eq_arith i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (eqv_refl num eq_arith i' valideqv_eq_arith) (list_nth_valid X1 Eq L i' x' p1 (list_nth_i X1 L i' x' q3)))) p1).
list_eq_length : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} {N:tm num} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) N) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [N:tm num] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N)] cut (forall2 num X1 ([i1:tm num] [x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i1) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i1) x3)) (@ num form (@ (list X1) (num arrow form) (lam2 (list X1) num form ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I))) L2) N) (list_eq_nth' X1 Eq L1 L2 p1) ([p3:pf (forall2 num X1 ([i2:tm num] [x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i2) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i2) x4))] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L2 N (and_i (isNat N) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) L2) x3)) (list_length_isNat X1 L1 N p2) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) L2) x3) ([i3:tm num] cut (@ num form (@ num (shadowed_0 num) inrange N) i3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i3) (@ num form (@ num (shadowed_0 num) inrange N) i3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L2) i3) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) x3) (and_e2 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L1 N p2)) i3) ([q3:pf (@ num form (@ num (shadowed_0 num) inrange N) i3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i3)] equiv_i (@ num form (@ num (shadowed_0 num) inrange N) i3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L2) i3) (imp_i (@ num form (@ num (shadowed_0 num) inrange N) i3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L2) i3) ([q1:pf (@ num form (@ num (shadowed_0 num) inrange N) i3)] cut (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L2) i3) (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N) i3) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i3) q3 q1) ([q11:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i3)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L1 i3) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L2) i3) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L1 i3 q11) ([x5:tm X1] [q12:pf (@ X1 form (@ num (shadowed_0 X1) L1 i3) x5)] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L2 i3 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L2 i3) x3) x5 (list_nth_e X1 L2 i3 x5 (equiv_e1 (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i3) x5) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i3) x5) (forall2_e num X1 ([x3:tm num] [x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) x3) x4) p3 i3 x5) (list_nth_i X1 L1 i3 x5 q12)))))))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) i3) (@ num form (@ num (shadowed_0 num) inrange N) i3) ([q2:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) i3)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L2 i3) x3) (@ num form (@ num (shadowed_0 num) inrange N) i3) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L2 i3 q2) ([x6:tm X1] [q21:pf (@ X1 form (@ num (shadowed_0 X1) L2 i3) x6)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i3) x6) (@ num form (@ num (shadowed_0 num) inrange N) i3) (list_nth_e X1 L1 i3 x6 (equiv_e2 (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i3) x6) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i3) x6) (forall2_e num X1 ([x3:tm num] [x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) x3) x4) p3 i3 x6) (list_nth_i X1 L2 i3 x6 q21))) ([q22:pf (@ X1 form (@ num (shadowed_0 X1) L1 i3) x6)] cut (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) L1) i3) (@ num form (@ num (shadowed_0 num) inrange N) i3) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L1 i3 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L1 i3) x3) x6 q22)) ([q23:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i3)] equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) i3) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i3) q3 q23)))))))))).
list_eq_nil : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ (list X1) form (list_is_nil X1) L1) -> pf (@ (list X1) form (list_is_nil X1) L2) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p2:pf (@ (list X1) form (list_is_nil X1) L1)] cut (forall2 num X1 ([i1:tm num] [x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i1) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i1) x3)) (@ (list X1) form (lam (list X1) form ([x3:tm (list X1)] forall2 num X1 ([i2:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i2) x4)))) L2) (list_eq_nth' X1 Eq L1 L2 p1) ([p3:pf (forall2 num X1 ([i3:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i3) x5 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i3) x5))] def1_i (list X1) ([x3:tm (list X1)] forall2 num X1 ([i4:tm num] [x6:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i4) x6))) L2 (forall2_i num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 x3) x4)) ([i5:tm num] [x7:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) L2 i5) x7) ([q1:pf (@ X1 form (@ num (shadowed_0 X1) L2 i5) x7)] not_e (@ X1 form (@ num (X1 arrow form) L1 i5) x7) (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 x3) x4)) (def1_e (list X1) ([x3:tm (list X1)] forall2 num X1 ([i6:tm num] [x8:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i6) x8))) L1 p2) i5 x7) (list_nth_e X1 L1 i5 x7 (equiv_e2 (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) i5) x7) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i5) x7) (forall2_e num X1 ([x3:tm num] [x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) x3) x4) p3 i5 x7) (list_nth_i X1 L2 i5 x7 q1))))))).
list_eq_cons_nth : {X1:tp} {Eq:tm (eqrel X1)} {Tl1:tm (list X1)} {Tl2:tm (list X1)} {Hd1:tm X1} {Hd2:tm X1} {i1:tm num} {i':tm num} {x3:tm X1} {x':tm X1} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) Tl1) Tl2) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Hd1) Hd2) -> pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i') -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x') -> pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i1) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') = [X1:tp] [Eq:tm (eqrel X1)] [Tl1:tm (list X1)] [Tl2:tm (list X1)] [Hd1:tm X1] [Hd2:tm X1] [i2:tm num] [i':tm num] [x4:tm X1] [x':tm X1] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) Tl1) Tl2)] [p2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Hd1) Hd2)] [p3:pf (@ num form (@ num (shadowed_0 num) eq_arith i2) i')] [p4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x')] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl1) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (list_eq_valid X1 Eq Tl1 Tl2 p1) ([p11:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl1)] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (list_valid_per X1 Eq Tl1 p11) ([p0:pf (@ (per X1) form (validper X1) Eq)] cut (_eq num i2 i') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (def2_e num num ([x3:tm num] [x5:tm num] _eq num x3 x5) i2 i' p3) ([p31:pf (eq num i2 i')] or_e (eq num i2 zero) (not (eq num i2 zero)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (excluded_middle (eq num i2 zero)) ([q1:pf (eq num i2 zero)] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') ([q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) Hd1) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (list_cons_e1 X1 Eq Hd1 Tl1 i2 x4 q3 q1) ([q31:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) Hd1)] list_cons_i1 i' X1 Eq x' Hd2 Tl2 (trans num i' i2 zero (symm num i2 i' p31) q1) (per_trans X1 Eq x' Hd1 Hd2 p0 (per_trans X1 Eq x' x4 Hd1 p0 (per_symm X1 Eq x4 x' p0 p4) q31) p2)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4) ([q4:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x')] cut (eq num i' zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4) (congr num i' i2 ([z1:tm num] eq num z1 zero) (symm num i2 i' p31) q1) ([q40:pf (eq num i' zero)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x') Hd2) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4) (list_cons_e1 X1 Eq Hd2 Tl2 i' x' q4 q40) ([q41:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x') Hd2)] list_cons_i1 i2 X1 Eq x4 Hd1 Tl1 q1 (per_trans X1 Eq x4 x' Hd1 p0 p4 (per_trans X1 Eq x' Hd2 Hd1 p0 q41 (per_symm X1 Eq Hd1 Hd2 p0 p2)))))))) ([q2:pf (not (eq num i2 zero))] cut (@ num form (@ num (shadowed_0 num) eq_arith (pred i2)) (pred i')) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (congr num i' i2 ([z2:tm num] @ num form (@ num (shadowed_0 num) eq_arith (pred i2)) (pred z2)) (symm num i2 i' p31) (eqv_refl num eq_arith (pred i2) valideqv_eq_arith)) ([q21:pf (@ num form (@ num (shadowed_0 num) eq_arith (pred i2)) (pred i'))] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') ([q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4)] cut (@ X1 form (@ num (shadowed_0 X1) Tl1 (pred i2)) x4) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (list_cons_e2 X1 Eq Hd1 Tl1 i2 x4 q3 q2) ([q31:pf (@ X1 form (@ num (shadowed_0 X1) Tl1 (pred i2)) x4)] cut (@ X1 form (@ num (shadowed_0 X1) Tl2 (pred i')) x') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) Tl1 (pred i2)) x4) (@ X1 form (@ num (shadowed_0 X1) Tl2 (pred i')) x') (list_eq_nth X1 Eq Tl1 Tl2 (pred i2) (pred i') x4 x' p1 q21 p4) q31) ([q32:pf (@ X1 form (@ num (shadowed_0 X1) Tl2 (pred i')) x')] list_cons_i2 i' X1 Tl2 x' Eq Hd2 (congr num i' i2 ([z3:tm num] not (eq num z3 zero)) (symm num i2 i' p31) q2) q32)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4) ([q4:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x')] cut (@ X1 form (@ num (shadowed_0 X1) Tl2 (pred i')) x') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4) (list_cons_e2 X1 Eq Hd2 Tl2 i' x' q4 (congr num i' i2 ([z4:tm num] not (eq num z4 zero)) (symm num i2 i' p31) q2)) ([q41:pf (@ X1 form (@ num (shadowed_0 X1) Tl2 (pred i')) x')] cut (@ X1 form (@ num (shadowed_0 X1) Tl1 (pred i2)) x4) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4) (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) Tl1 (pred i2)) x4) (@ X1 form (@ num (shadowed_0 X1) Tl2 (pred i')) x') (list_eq_nth X1 Eq Tl1 Tl2 (pred i2) (pred i') x4 x' p1 q21 p4) q41) ([q42:pf (@ X1 form (@ num (shadowed_0 X1) Tl1 (pred i2)) x4)] list_cons_i2 i2 X1 Tl1 x4 Eq Hd1 q2 q42))))))))).
list_eq_cons_valid : {X1:tp} {Eq:tm (eqrel X1)} {Tl:tm (list X1)} {Hd:tm X1} {i1:tm num} {x3:tm X1} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) Tl) Tl) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i1) x3) -> pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i1 and @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3) = [X1:tp] [Eq:tm (eqrel X1)] [Tl:tm (list X1)] [Hd:tm X1] [i2:tm num] [x4:tm X1] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) Tl) Tl)] [p3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) Tl) i2) x4)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_eq_valid X1 Eq Tl Tl p1) ([p11:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl)] cut (@ (per X1) form (validper X1) Eq) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_valid_per X1 Eq Tl p11) ([p2:pf (@ (per X1) form (validper X1) Eq)] or_e (eq num i2 zero) (not (eq num i2 zero)) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (excluded_middle (eq num i2 zero)) ([q1:pf (eq num i2 zero)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) Hd) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_cons_e1 X1 Eq Hd Tl i2 x4 p3 q1) ([q11:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) Hd)] and_i (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (eqv_refl num eq_arith i2 valideqv_eq_arith) (per_refl X1 Eq x4 Hd p2 q11))) ([q2:pf (not (eq num i2 zero))] cut (@ X1 form (@ num (shadowed_0 X1) Tl (pred i2)) x4) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_cons_e2 X1 Eq Hd Tl i2 x4 p3 q2) ([q21:pf (@ X1 form (@ num (shadowed_0 X1) Tl (pred i2)) x4)] cut (@ num form (@ num (shadowed_0 num) eq_arith (pred i2)) (pred i2) and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_eq_nth_valid X1 Eq Tl Tl (pred i2) x4 p1 q21) ([q22:pf (@ num form (@ num (shadowed_0 num) eq_arith (pred i2)) (pred i2) and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4)] and_i (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (eqv_refl num eq_arith i2 valideqv_eq_arith) (and_e2 (@ num form (@ num (shadowed_0 num) eq_arith (pred i2)) (pred i2)) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) q22)))))).
list_eq_cons : {X1:tp} {Eq:tm (eqrel X1)} {Tl1:tm (list X1)} {Tl2:tm (list X1)} {Hd1:tm X1} {Hd2:tm X1} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) Tl1) Tl2) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Hd1) Hd2) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2)) = [X1:tp] [Eq:tm (eqrel X1)] [Tl1:tm (list X1)] [Tl2:tm (list X1)] [Hd1:tm X1] [Hd2:tm X1] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) Tl1) Tl2)] [p2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Hd1) Hd2)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl1) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2)) (list_eq_valid X1 Eq Tl1 Tl2 p1) ([p3:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl1)] cut (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) Tl1) Tl1) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2)) (list_eq_refl X1 Eq Tl1 p3) ([p31:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) Tl1) Tl1)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl2) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2)) (list_eq_valid' X1 Eq Tl1 Tl2 p1) ([p32:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Tl2)] cut (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) Tl2) Tl2) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2)) (list_eq_refl X1 Eq Tl2 p32) ([p33:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) Tl2) Tl2)] list_eq_i X1 Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) (per_rel_i num X1 eq_arith Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q11:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q12:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] list_eq_cons_nth X1 Eq Tl1 Tl2 Hd1 Hd2 i1 i' x3 x' p1 p2 q11 q12) ([i2:tm num] [x4:tm X1] [q2:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd1) Tl1) i2) x4)] list_eq_cons_valid X1 Eq Tl1 Hd1 i2 x4 p31 q2) ([i':tm num] [x':tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd2) Tl2) i') x')] list_eq_cons_valid X1 Eq Tl2 Hd2 i' x' p33 q3)) (list_valid_cons X1 Eq Hd1 Tl1 (per_refl X1 Eq Hd1 Hd2 (list_valid_per X1 Eq Tl1 p3) p2) p3))))).
list_eq_tl_cons' : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {X:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) (@ (list X1) (list X1) (list_tl X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L))) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [X:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L))) (list_valid_per X1 Eq L p1) ([p0:pf (@ (per X1) form (validper X1) Eq)] cut (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L))) (list_eq_refl X1 Eq L p1) ([p11:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L)] list_eq_i X1 Eq L (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) (per_rel_i num X1 eq_arith Eq L (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q1:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] equiv_i (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i') x') ([q6:pf (@ X1 form (@ num (shadowed_0 X1) L i1) x3)] cut (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i') x') (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (list_eq_nth X1 Eq L L i1 i' x3 x' p11 q1 q2) q6) ([q61:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] cut (isNat i') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i') x') (list_index_isNat X1 Eq L i' x' p1 (list_nth_i X1 L i' x' q61)) ([q62:pf (isNat i')] cut (> (succ i') zero) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i') x') (trans_gt_geq (succ i') i' zero (succ_gt i') (isNat->geq_zero i' q62)) ([q63:pf (gt (succ i') zero)] cut (!= num (succ i') zero) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i') x') (gt->neq (succ i') zero q63) ([q64:pf (not (eq num (succ i') zero))] def3_i (list X1) num X1 ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i' x' (and_i (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) X) L) (succ i')) x') (not (eq num (succ i') zero)) (def5_i (eqrel X1) X1 (list X1) num X1 ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8)) Eq X L (succ i') x' (if_i2 (eq num (succ i') zero) (@ X1 form (@ num (shadowed_0 X1) L (pred (succ i'))) x') (_@2 X1 X1 form Eq x' X) q64 (congr num (pred (succ i')) i' ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L z1) x') (predsucc i') q61))) q64))))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i') x') (@ X1 form (@ num (shadowed_0 X1) L i1) x3) ([q5:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i') x')] and_l (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) (succ i')) x') (not (eq num (succ i') zero)) (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (def3_e X1 num (list X1) ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i' x' q5) ([q51:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) (succ i')) x')] [q52:pf (not (eq num (succ i') zero))] cut (_@2 num X1 form L (pred (succ i')) x') (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (if_e2 (_eq num (succ i') zero) (_@2 X1 X1 form Eq x' X) (_@2 num X1 form L (pred (succ i')) x') (def5_e X1 num (list X1) X1 (eqrel X1) ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8)) Eq X L (succ i') x' q51) q52) ([q53:pf (@ X1 form (@ num (shadowed_0 X1) L (pred (succ i'))) x')] cut (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (congr num i' (pred (succ i')) ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) L z2) x') (symm num (pred (succ i')) i' (predsucc i')) q53) ([q54:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (list_eq_nth X1 Eq L L i1 i' x3 x' p11 q1 q2) q54)))))) ([i':tm num] [x':tm X1] [q4:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] list_eq_nth_valid X1 Eq L L i' x' p11 q4) ([i2:tm num] [x4:tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) i2) x4)] and_l (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) (succ i2)) x4) (not (eq num (succ i2) zero)) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x5)) x6 and not (eq num (succ x5) zero)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) i2 x4 q3) ([q31:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L) (succ i2)) x4)] [q32:pf (not (eq num (succ i2) zero))] cut (_@2 num X1 form L (pred (succ i2)) x4) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (if_e2 (_eq num (succ i2) zero) (_@2 X1 X1 form Eq x4 X) (_@2 num X1 form L (pred (succ i2)) x4) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x3 x8 x5) (_@2 num X1 form x6 (pred x7) x8)) Eq X L (succ i2) x4 q31) q32) ([q33:pf (@ X1 form (@ num (shadowed_0 X1) L (pred (succ i2))) x4)] cut (@ X1 form (@ num (shadowed_0 X1) L i2) x4) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (congr num i2 (pred (succ i2)) ([z3:tm num] @ X1 form (@ num (shadowed_0 X1) L z3) x4) (symm num (pred (succ i2)) i2 (predsucc i2)) q33) ([q34:pf (@ X1 form (@ num (shadowed_0 X1) L i2) x4)] list_eq_nth_valid X1 Eq L L i2 x4 p11 q34))))) p1)).
list_eq_tl_cons : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {X:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (list_tl X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L))) L) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [X:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] per_symm (list X1) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L (@ (list X1) (list X1) (list_tl X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) L)) (list_eq_validper X1 Eq (list_valid_per X1 Eq L p1)) (list_eq_tl_cons' X1 Eq L X p1).
list_eq_tl : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ (list X1) form (list_is_not_nil X1) L1) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (list_tl X1) L1)) (@ (list X1) (list X1) (list_tl X1) L2)) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p2:pf (@ (list X1) form (list_is_not_nil X1) L1)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (list_tl X1) L1)) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L2)) (list_eq_valid X1 Eq L1 L2 p1) ([p11:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1)] list_eq_i X1 Eq (@ (list X1) (list X1) (list_tl X1) L1) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L2) (per_rel_i num X1 eq_arith Eq (@ (list X1) (list X1) (list_tl X1) L1) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L2) ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q1:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] cut (@ num form (@ num (num arrow form) (lam2 num num form ([x4:tm num] [x5:tm num] _eq num x4 x5)) (succ i1)) (succ i')) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L1) i1) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L2) i') x') (def2_i num num ([x4:tm num] [x5:tm num] _eq num x4 x5) (succ i1) (succ i') (eq_plus i1 i' one (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1))) ([q11:pf (@ num form (@ num (shadowed_0 num) eq_arith (succ i1)) (succ i'))] cut (@ X1 form (@ num (shadowed_0 X1) L1 (succ i1)) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 (succ i')) x') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L1) i1) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L2) i') x') (list_eq_nth X1 Eq L1 L2 (succ i1) (succ i') x3 x' p1 q11 q2) ([q12:pf (@ X1 form (@ num (shadowed_0 X1) L1 (succ i1)) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 (succ i')) x')] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L1) i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L2) i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L1) i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L2) i') x') ([q5:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L1) i1) x3)] and_l (@ X1 form (@ num (X1 arrow form) L1 (succ i1)) x3) (not (eq num (succ i1) zero)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L2) i') x') (def3_e X1 num (list X1) ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero)) L1 i1 x3 q5) ([q51:pf (@ X1 form (@ num (shadowed_0 X1) L1 (succ i1)) x3)] [q52:pf (not (eq num (succ i1) zero))] def3_i (list X1) num X1 ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero)) L2 i' x' (and_i (@ X1 form (@ num (shadowed_0 X1) L2 (succ i')) x') (not (eq num (succ i') zero)) (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L1 (succ i1)) x3) (@ X1 form (@ num (shadowed_0 X1) L2 (succ i')) x') q12 q51) (congr num i' i1 ([z1:tm num] not (eq num (succ z1) zero)) (symm num i1 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1)) q52))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L2) i') x') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L1) i1) x3) ([q6:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L2) i') x')] and_l (@ X1 form (@ num (X1 arrow form) L2 (succ i')) x') (not (eq num (succ i') zero)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L1) i1) x3) (def3_e X1 num (list X1) ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero)) L2 i' x' q6) ([q61:pf (@ X1 form (@ num (shadowed_0 X1) L2 (succ i')) x')] [q62:pf (not (eq num (succ i') zero))] def3_i (list X1) num X1 ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero)) L1 i1 x3 (and_i (@ X1 form (@ num (shadowed_0 X1) L1 (succ i1)) x3) (not (eq num (succ i1) zero)) (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L1 (succ i1)) x3) (@ X1 form (@ num (shadowed_0 X1) L2 (succ i')) x') q12 q61) (congr num i1 i' ([z2:tm num] not (eq num (succ z2) zero)) (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1) q62)))))))) ([i2:tm num] [x4:tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L1) i2) x4)] and_l (@ X1 form (@ num (X1 arrow form) L1 (succ i2)) x4) (not (eq num (succ i2) zero)) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x5)) x6 and not (eq num (succ x5) zero)) L1 i2 x4 q3) ([q31:pf (@ X1 form (@ num (shadowed_0 X1) L1 (succ i2)) x4)] [q32:pf (not (eq num (succ i2) zero))] cut (@ num form (@ num (shadowed_0 num) eq_arith (succ i2)) (succ i2) and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_eq_nth_valid X1 Eq L1 L2 (succ i2) x4 p1 q31) ([q33:pf (@ num form (@ num (shadowed_0 num) eq_arith (succ i2)) (succ i2) and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4)] and_i (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (eqv_refl num eq_arith i2 valideqv_eq_arith) (and_e2 (@ num form (@ num (shadowed_0 num) eq_arith (succ i2)) (succ i2)) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) q33)))) ([i':tm num] [x':tm X1] [q4:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L2) i') x')] and_l (@ X1 form (@ num (X1 arrow form) L2 (succ i')) x') (not (eq num (succ i') zero)) (@ num form (@ num (shadowed_0 num) eq_arith i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L2 i' x' q4) ([q41:pf (@ X1 form (@ num (shadowed_0 X1) L2 (succ i')) x')] [q42:pf (not (eq num (succ i') zero))] cut (@ (list X1) form (@ (list X1) (shadowed_0 (list X1)) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L2) L1) (@ num form (@ num (shadowed_0 num) eq_arith i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (per_symm (list X1) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1 L2 (list_eq_validper X1 Eq (list_valid_per X1 Eq L1 p11)) p1) ([q43:pf (@ (list X1) form (@ (list X1) (shadowed_0 (list X1)) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L2) L1)] cut (@ num form (@ num (shadowed_0 num) eq_arith (succ i')) (succ i') and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (@ num form (@ num (shadowed_0 num) eq_arith i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (list_eq_nth_valid X1 Eq L2 L1 (succ i') x' q43 q41) ([q1:pf (@ num form (@ num (shadowed_0 num) eq_arith (succ i')) (succ i') and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x')] and_i (@ num form (@ num (shadowed_0 num) eq_arith i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (eqv_refl num eq_arith i' valideqv_eq_arith) (and_e2 (@ num form (@ num (shadowed_0 num) eq_arith (succ i')) (succ i')) (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') q1)))))) (list_valid_tl'' X1 Eq L1 p11 p2)).
list_eq_not_nil : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (not (@ (list X1) form (list_is_nil X1) L2)) -> pf (not (@ (list X1) form (list_is_nil X1) L1)) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p2:pf (not (@ (list X1) form (list_is_nil X1) L2))] not_i (@ (list X1) form (list_is_nil X1) L1) ([q1:pf (@ (list X1) form (list_is_nil X1) L1)] not_e (@ (list X1) form (list_is_nil X1) L2) p2 (list_eq_nil X1 Eq L1 L2 p1 q1)).
list_eq_singleton_hd : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} {L:tm (list X1)} pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [L:tm (list X1)] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X)] [p2:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)))] cut (@ X1 form (@ num (shadowed_0 X1) L zero) X equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) zero) X) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) X) (list_eq_nth X1 Eq L (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) zero zero X X p2 (eqv_refl num eq_arith zero valideqv_eq_arith) p1) ([q1:pf (@ X1 form (@ num (shadowed_0 X1) L zero) X equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) zero) X)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L X (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L zero) X) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) zero) X) q1 (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) X (list_hd_cons' X1 Eq X X (list_nil X1) p1)))).
list_eq_singleton_tl : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {X:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) -> pf (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (list_tl X1) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [X:tm X1] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)))] def1_i (list X1) ([x3:tm (list X1)] forall2 num X1 ([i1:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i1) x4))) (@ (list X1) (list X1) (list_tl X1) L) (forall2_i num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) x3) x4)) ([i2:tm num] [x5:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i2) x5) ([q1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i2) x5)] cut (@ X1 form (@ num (X1 arrow form) L (succ i2)) x5 and not (eq num (succ i2) zero)) false (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x6 and not (eq num (succ x4) zero)) L i2 x5 q1) ([q2:pf (@ X1 form (@ num (shadowed_0 X1) L (succ i2)) x5 and not (eq num (succ i2) zero))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5) false (list_nth_valid X1 Eq L (succ i2) x5 p2 (list_nth_i X1 L (succ i2) x5 (and_e1 (@ X1 form (@ num (shadowed_0 X1) L (succ i2)) x5) (not (eq num (succ i2) zero)) q2))) ([q4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5)] cut (@ X1 form (@ num (shadowed_0 X1) L (succ i2)) x5 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) (succ i2)) x5) false (list_eq_nth X1 Eq L (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) (succ i2) (succ i2) x5 x5 p1 (eqv_refl num eq_arith (succ i2) valideqv_eq_arith) q4) ([q5:pf (@ X1 form (@ num (shadowed_0 X1) L (succ i2)) x5 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) (succ i2)) x5)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) (succ i2)) x5) false (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L (succ i2)) x5) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) (succ i2)) x5) q5 (and_e1 (@ X1 form (@ num (shadowed_0 X1) L (succ i2)) x5) (not (eq num (succ i2) zero)) q2)) ([q6:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) (succ i2)) x5)] cut (_@2 num X1 form (list_nil X1) (pred (succ i2)) x5) false (if_e2 (_eq num (succ i2) zero) (_@2 X1 X1 form Eq x5 X) (_@2 num X1 form (list_nil X1) (pred (succ i2)) x5) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x3 x8 x4) (_@2 num X1 form x6 (pred x7) x8)) Eq X (list_nil X1) (succ i2) x5 q6) (and_e2 (@ X1 form (@ num (shadowed_0 X1) L (succ i2)) x5) (not (eq num (succ i2) zero)) q2)) ([q7:pf (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) (pred (succ i2))) x5)] def2_e X1 num ([x3:tm num] [x4:tm X1] false) (pred (succ i2)) x5 q7)))))))).
list_nil_eq_i : {X1:tp} {Eq:tm (per X1)} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (per X1) form (validper X1) Eq) -> pf (@ (list X1) form (list_is_nil X1) L1) -> pf (@ (list X1) form (list_is_nil X1) L2) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) = [X1:tp] [Eq:tm (per X1)] [L1:tm (list X1)] [L2:tm (list X1)] [p0:pf (@ (per X1) form (validper X1) Eq)] [p1:pf (@ (list X1) form (list_is_nil X1) L1)] [p2:pf (@ (list X1) form (list_is_nil X1) L2)] cut (forall2 num X1 ([i1:tm num] [x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L1 i1) x3))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) (list_nil_no_elem X1 L1 p1) ([p11:pf (forall2 num X1 ([i2:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4)))] cut (forall2 num X1 ([i3:tm num] [x5:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 i3) x5))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) (list_nil_no_elem X1 L2 p2) ([p21:pf (forall2 num X1 ([i4:tm num] [x6:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 i4) x6)))] list_eq_i X1 Eq L1 L2 (per_rel_i num X1 eq_arith Eq L1 L2 ([i5:tm num] [i':tm num] [x7:tm X1] [x':tm X1] [q1:pf (@ num form (@ num (shadowed_0 num) eq_arith i5) i')] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x')] equiv_false (@ X1 form (@ num (shadowed_0 X1) L1 i5) x7) (@ X1 form (@ num (shadowed_0 X1) L2 i') x') (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L1 x3) x4)) p11 i5 x7) (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 x3) x4)) p21 i' x')) ([i6:tm num] [x8:tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) L1 i6) x8)] false_e (@ num form (@ num (num arrow form) eq_arith i6) i6 and @ X1 form (@ X1 (X1 arrow form) Eq x8) x8) (not_e (@ X1 form (@ num (shadowed_0 X1) L1 i6) x8) (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L1 x3) x4)) p11 i6 x8) q3)) ([i':tm num] [x':tm X1] [q4:pf (@ X1 form (@ num (shadowed_0 X1) L2 i') x')] false_e (@ num form (@ num (num arrow form) eq_arith i') i' and @ X1 form (@ X1 (X1 arrow form) Eq x') x') (not_e (@ X1 form (@ num (shadowed_0 X1) L2 i') x') (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L2 x3) x4)) p21 i' x') q4))) (list_valid_nil' X1 Eq L1 p0 p1))).
list_nth_congr : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} {I1:tm num} {I2:tm num} {X:tm X1} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (@ num form (@ num (shadowed_0 num) eq_nat I1) I2) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I1) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) I2) X) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [I1:tm num] [I2:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p2:pf (@ num form (@ num (shadowed_0 num) eq_nat I1) I2)] [p4:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I1) X)] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) I1) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) I2) X) (equiv_e1 (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I1) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) I1) X) (forall2_e num X1 ([x3:tm num] [x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) x3) x4) (list_eq_nth' X1 Eq L1 L2 p1) I1 X) p4) ([p5:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) I1) X)] congr num I2 I1 ([z1:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) z1) X) (symm num I1 I2 (eq_nat_e1 I1 I2 p2)) p5).
list_addlast_length : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} {L:tm (list X1)} {N:tm num} pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) (succ N)) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [L:tm (list X1)] [N:tm num] [p0:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X)] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] cut (isNat N) (@ num form (@ (list X1) (num arrow form) (lam2 (list X1) num form ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I))) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) (succ N)) (and_e1 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) ([p21:pf (isNat N)] cut (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (@ num form (@ (list X1) (num arrow form) (lam2 (list X1) num form ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I))) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) (succ N)) (and_e2 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) ([p22:pf (forall num ([i1:tm num] @ num form (@ num (shadowed_0 num) inrange N) i1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i1))] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X) (succ N) (and_i (isNat (succ N)) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) x3)) (isNat_succ_i N p21) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) x3) ([i2:tm num] equiv_i (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) i2) (imp_i (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) i2) ([p3:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2)] or_e (eq num i2 N) (@ num form (@ num (shadowed_0 num) inrange N) i2) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) i2) (inrange_step N i2 (and_e1 (isInt N) (geq N zero) p21) p3) ([p4:pf (eq num i2 N)] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X) i2 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X) i2) x3) X (def5_i (eqrel X1) (list X1) X1 num X1 ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7) Eq L X i2 X (or_i2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i2 and @ X1 form (@ X1 (X1 arrow form) Eq X) X) (@ X1 form (@ num (X1 arrow form) L i2) X) (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i2) (@ X1 form (@ X1 (X1 arrow form) Eq X) X) (congr num i2 N ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) z1) p4 p1) p0))))) ([p5:pf (@ num form (@ num (shadowed_0 num) inrange N) i2)] cut (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) i2) (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N) i2) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) p22 i2) p5) ([p51:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i2) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) i2) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L i2 p51) ([x3:tm X1] [p52:pf (@ X1 form (@ num (shadowed_0 X1) L i2) x3)] def2_i (rel num X1) num ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y)) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X) i2 (exists_i X1 ([x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X) i2) x4) x3 (def5_i (eqrel X1) (list X1) X1 num X1 ([x4:tm (eqrel X1)] [x5:tm (list X1)] [x6:tm X1] [x7:tm num] [x8:tm X1] @ X1 form (@ num (X1 arrow form) x5 x7) x8 or @ num form (@ (list X1) (num arrow form) (list_length X1) x5) x7 and @ X1 form (@ X1 (X1 arrow form) x4 x6) x8) Eq L X i2 x3 (or_i1 (@ X1 form (@ num (shadowed_0 X1) L i2) x3) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i2 and @ X1 form (@ X1 (X1 arrow form) Eq X) x3) p52)))))))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) i2) (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) ([p6:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) i2)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X) i2) x3) (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X) i2 p6) ([x4:tm X1] [p7:pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X) i2) x4)] or_e (@ X1 form (@ num (X1 arrow form) L i2) x4) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i2 and @ X1 form (@ X1 (X1 arrow form) Eq X) x4) (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) (def5_e X1 num X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x5:tm (list X1)] [x6:tm X1] [x7:tm num] [x8:tm X1] @ X1 form (@ num (X1 arrow form) x5 x7) x8 or @ num form (@ (list X1) (num arrow form) (list_length X1) x5) x7 and @ X1 form (@ X1 (X1 arrow form) x3 x6) x8) Eq L X i2 x4 p7) ([p8:pf (@ X1 form (@ num (shadowed_0 X1) L i2) x4)] cut (@ num form (@ num (shadowed_0 num) inrange N) i2) (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) i2) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i2) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) p22 i2) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x5) y)) L i2 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i2) x3) x4 p8))) ([p81:pf (@ num form (@ num (shadowed_0 num) inrange N) i2)] inrange_expand N i2 p81)) ([p9:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i2 and @ X1 form (@ X1 (X1 arrow form) Eq X) x4)] cut (eq num i2 N) (@ num form (@ num (shadowed_0 num) inrange (succ N)) i2) (list_length_uniq X1 L i2 N (and_e1 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i2) (@ X1 form (@ X1 (X1 arrow form) Eq X) x4) p9) p1) ([p91:pf (eq num i2 N)] congr num i2 N ([z2:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) z2) p91 (inrange_succ_n N p21))))))))))).
list_addlast_lastelem_valid : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {Last:tm X1} {N:tnum} {L:tm (num arrow X1 arrow form)} {I:tm num} pf (@ X1 form (@ X1 (X1 arrow form) Eq Last) Last) -> pf (isNat N and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i1) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) -> pf (eq num I N) -> pf (exists X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x4) y equiv @ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) I) y))) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [Last:tm X1] [N:tnum] [L:tm (num arrow X1 arrow form)] [I:tm num] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq Last) Last)] [p2:pf (isNat N and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))] [p3:pf (eq num I N)] cut (isNat N) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) y equiv @ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) I) y))) (and_e1 (isNat N) (forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i3) y))))) p2) ([p31:pf (isNat N)] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) y equiv @ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) I) y)) Last (and_i (@ X1 form (@ X1 (X1 arrow form) Eq Last) Last) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Last) x3 equiv @ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x4:tm (eqrel X1)] [x5:tm (list X1)] [x6:tm X1] [x7:tm num] [x8:tm X1] @ X1 form (@ num (X1 arrow form) x5 x7) x8 or @ num form (@ (list X1) (num arrow form) (list_length X1) x5) x7 and @ X1 form (@ X1 (X1 arrow form) x4 x6) x8)) Eq) L) Last) I) x3)) p1 (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Last) x3 equiv @ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x4:tm (eqrel X1)] [x5:tm (list X1)] [x6:tm X1] [x7:tm num] [x8:tm X1] @ X1 form (@ num (X1 arrow form) x5 x7) x8 or @ num form (@ (list X1) (num arrow form) (list_length X1) x5) x7 and @ X1 form (@ X1 (X1 arrow form) x4 x6) x8)) Eq) L) Last) I) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (X1 arrow form) Eq Last) y) (@ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7)) Eq) L) Last) I) y) (imp_i (@ X1 form (@ X1 (X1 arrow form) Eq Last) y) (@ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7)) Eq) L) Last) I) y) ([p51:pf (@ X1 form (@ X1 (X1 arrow form) Eq Last) y)] def5_i (eqrel X1) (list X1) X1 num X1 ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7) Eq L Last I y (or_i2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I and @ X1 form (@ X1 (X1 arrow form) Eq Last) y) (@ X1 form (@ num (X1 arrow form) L I) y) (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I) (@ X1 form (@ X1 (X1 arrow form) Eq Last) y) (congr num I N ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) z1) p3 (def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I1)) L N (and_i (isNat N) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y1:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y1))) L) x3)) p31 (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y2:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y2))) L) x3) ([i':tm num] equiv_i (@ num form (@ num (shadowed_0 num) inrange N) i') (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y3:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y3))) L) i') (imp_i (@ num form (@ num (shadowed_0 num) inrange N) i') (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y4:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y4))) L) i') ([p32:pf (@ num form (@ num (shadowed_0 num) inrange N) i')] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([y5:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) y5 equiv @ X1 form (@ num (X1 arrow form) L i') y5)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y6:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y6))) L) i') (imp_e (@ num form (@ num (shadowed_0 num) inrange N) i') (exists X1 ([x7:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x7) x7 and forall X1 ([y7:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x7) y7 equiv @ X1 form (@ num (X1 arrow form) L i') y7))) (and_e1 (@ num form (@ num (shadowed_0 num) inrange N) i' imp exists X1 ([x8:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x8) x8 and forall X1 ([y8:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x8) y8 equiv @ X1 form (@ num (X1 arrow form) L i') y8))) (not (@ num form (@ num (shadowed_0 num) inrange N) i') imp forall X1 ([y9:tm X1] not (@ X1 form (@ num (X1 arrow form) L i') y9))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) x3) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x9) x9 and forall X1 ([y10:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x9) y10 equiv @ X1 form (@ num (X1 arrow form) L x3) y10))) (forall X1 ([y11:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y11)))) (and_e2 (isNat N) (forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i4) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x10) x10 and forall X1 ([y12:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x10) y12 equiv @ X1 form (@ num (X1 arrow form) L i4) y12))) (forall X1 ([y13:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y13))))) p2) i')) p32) ([x11:tm X1] [p33:pf (@ X1 form (@ X1 (X1 arrow form) Eq x11) x11 and forall X1 ([y14:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x11) y14 equiv @ X1 form (@ num (X1 arrow form) L i') y14))] cut (@ X1 form (@ num (X1 arrow form) L i') x11) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y15:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y15))) L) i') (equiv_e1 (@ X1 form (@ X1 (X1 arrow form) Eq x11) x11) (@ X1 form (@ num (X1 arrow form) L i') x11) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x11) x3 equiv @ X1 form (@ num (X1 arrow form) L i') x3) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eq x11) x11) (forall X1 ([y16:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x11) y16 equiv @ X1 form (@ num (X1 arrow form) L i') y16)) p33) x11) (and_e1 (@ X1 form (@ X1 (X1 arrow form) Eq x11) x11) (forall X1 ([y17:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x11) y17 equiv @ X1 form (@ num (X1 arrow form) L i') y17)) p33)) ([p34:pf (@ X1 form (@ num (X1 arrow form) L i') x11)] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y18:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y18)) L i' (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i') x3) x11 p34))))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i') (@ num form (@ num (shadowed_0 num) inrange N) i') ([p35:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i')] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i') x3) (@ num form (@ num (shadowed_0 num) inrange N) i') (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y19:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y19)) L i' p35) ([x12:tm X1] [p36:pf (@ X1 form (@ num (X1 arrow form) L i') x12)] suppose_not (@ num form (@ num (shadowed_0 num) inrange N) i') ([p37:pf (not (@ num form (@ num (shadowed_0 num) inrange N) i'))] cut (forall X1 ([y20:tm X1] not (@ X1 form (@ num (X1 arrow form) L i') y20))) false (imp_e (not (@ num form (@ num (shadowed_0 num) inrange N) i')) (forall X1 ([y21:tm X1] not (@ X1 form (@ num (X1 arrow form) L i') y21))) (and_e2 (@ num form (@ num (shadowed_0 num) inrange N) i' imp exists X1 ([x13:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x13) x13 and forall X1 ([y22:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x13) y22 equiv @ X1 form (@ num (X1 arrow form) L i') y22))) (not (@ num form (@ num (shadowed_0 num) inrange N) i') imp forall X1 ([y23:tm X1] not (@ X1 form (@ num (X1 arrow form) L i') y23))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) x3) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x14) x14 and forall X1 ([y24:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x14) y24 equiv @ X1 form (@ num (X1 arrow form) L x3) y24))) (forall X1 ([y25:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y25)))) (and_e2 (isNat N) (forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i5) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x15) x15 and forall X1 ([y26:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x15) y26 equiv @ X1 form (@ num (X1 arrow form) L i5) y26))) (forall X1 ([y27:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y27))))) p2) i')) p37) ([p38:pf (forall X1 ([y28:tm X1] not (@ X1 form (@ num (X1 arrow form) L i') y28)))] cut (not (@ X1 form (@ num (X1 arrow form) L i') x12)) false (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L i') x3)) p38 x12) ([p4:pf (not (@ X1 form (@ num (X1 arrow form) L i') x12))] not_e (@ X1 form (@ num (X1 arrow form) L i') x12) p4 p36))))))))))) p51)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) I) y) (@ X1 form (@ X1 (X1 arrow form) Eq Last) y) ([p52:pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) I) y)] cut (@ X1 form (@ num (X1 arrow form) L I) y or @ num form (@ (list X1) (num arrow form) (list_length X1) L) I and @ X1 form (@ X1 (X1 arrow form) Eq Last) y) (@ X1 form (@ X1 (X1 arrow form) Eq Last) y) (def5_e X1 num X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7) Eq L Last I y p52) ([p53:pf (@ X1 form (@ num (X1 arrow form) L I) y or @ num form (@ (list X1) (num arrow form) (list_length X1) L) I and @ X1 form (@ X1 (X1 arrow form) Eq Last) y)] cut (forall X1 ([y29:tm X1] not (@ X1 form (@ num (X1 arrow form) L I) y29))) (@ X1 form (@ X1 (X1 arrow form) Eq Last) y) (imp_e (not (@ num form (@ num (shadowed_0 num) inrange N) I)) (forall X1 ([y30:tm X1] not (@ X1 form (@ num (X1 arrow form) L I) y30))) (and_e2 (@ num form (@ num (shadowed_0 num) inrange N) I imp exists X1 ([x16:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x16) x16 and forall X1 ([y31:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x16) y31 equiv @ X1 form (@ num (X1 arrow form) L I) y31))) (not (@ num form (@ num (shadowed_0 num) inrange N) I) imp forall X1 ([y32:tm X1] not (@ X1 form (@ num (X1 arrow form) L I) y32))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) x3) (exists X1 ([x17:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x17) x17 and forall X1 ([y33:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x17) y33 equiv @ X1 form (@ num (X1 arrow form) L x3) y33))) (forall X1 ([y34:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y34)))) (and_e2 (isNat N) (forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange N) i6) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x18) x18 and forall X1 ([y35:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x18) y35 equiv @ X1 form (@ num (X1 arrow form) L i6) y35))) (forall X1 ([y36:tm X1] not (@ X1 form (@ num (X1 arrow form) L i6) y36))))) p2) I)) (not_inrange_n I N p3)) ([p54:pf (forall X1 ([y37:tm X1] not (@ X1 form (@ num (X1 arrow form) L I) y37)))] and_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I) (@ X1 form (@ X1 (X1 arrow form) Eq Last) y) (or_e2 (@ X1 form (@ num (X1 arrow form) L I) y) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I and @ X1 form (@ X1 (X1 arrow form) Eq Last) y) p53 (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L I) x3)) p54 y)))))))))).
list_valid_addlast : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {Last:tm X1} {L:tm (list X1)} pf (@ X1 form (@ X1 (X1 arrow form) Eq Last) Last) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last)) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [Last:tm X1] [L:tm (list X1)] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq Last) Last)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y))))))) Eq) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last)) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i3) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ num (X1 arrow form) x4 i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i4) y)))))) Eq L p2)) ([n:tm num] [p3:pf (isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y)))))] cut (isNat n) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n1:tm num] isNat n1 and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i6) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) y equiv @ X1 form (@ num (X1 arrow form) x4 i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i6) y))))))) Eq) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last)) (and_e1 (isNat n) (forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i7) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i7) y))))) p3) ([p31:pf (isNat n)] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n2:tm num] isNat n2 and forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange n2) i8) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x11) y equiv @ X1 form (@ num (X1 arrow form) x4 i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i8) y)))))) Eq (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i9) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (X1 arrow form) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i9) y)))))) (list_valid_per X1 Eq L p2) (exists_i num ([x3:tm num] isNat x3 and forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i10) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i10) y))))) (succ n) (and_i (isNat (succ n)) (forall num ([x3:tm num] (@ num form (@ num (shadowed_0 num) inrange (succ n)) x3 imp exists X1 ([x14:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x14) y equiv @ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) x3) y))) and (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) x3) imp forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) x3) x4))))) (isNat_succ_i n (and_e1 (isNat n) (forall num ([i11:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i11) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (X1 arrow form) L i11) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i11) y))))) p3)) (forall_i num ([x3:tm num] (@ num form (@ num (shadowed_0 num) inrange (succ n)) x3 imp exists X1 ([x16:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x16) y equiv @ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) x3) y))) and (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) x3) imp forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) x3) x4)))) ([i12:tm num] and_i (@ num form (@ num (shadowed_0 num) inrange (succ n)) i12 imp exists X1 ([x17:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x17) y equiv @ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i12) y))) (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) i12) imp forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i12) x3))) (imp_i (@ num form (@ num (shadowed_0 num) inrange (succ n)) i12) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x18) x18 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x18) y equiv @ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i12) y))) ([p4:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) i12)] or_e (eq num i12 n) (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x19) x19 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x19) y equiv @ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i12) y))) (inrange_step n i12 (and_e1 (isInt n) (geq n zero) p31) p4) ([p5:pf (eq num i12 n)] list_addlast_lastelem_valid X1 Eq Last n L i12 p1 p3 p5) ([p6:pf (@ num form (@ num (shadowed_0 num) inrange n) i12)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i12) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x5:tm (eqrel X1)] [x6:tm (list X1)] [x7:tm X1] [x8:tm num] [x9:tm X1] @ X1 form (@ num (X1 arrow form) x6 x8) x9 or @ num form (@ (list X1) (num arrow form) (list_length X1) x6) x8 and @ X1 form (@ X1 (X1 arrow form) x5 x7) x9)) Eq) L) Last) i12) x4))) (imp_e (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) x20 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) y equiv @ X1 form (@ num (X1 arrow form) L i12) y))) (and_e1 (@ num form (@ num (shadowed_0 num) inrange n) i12 imp exists X1 ([x21:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) L i12) y))) (not (@ num form (@ num (shadowed_0 num) inrange n) i12) imp forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i12) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x22:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) x22 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n) (forall num ([i13:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i13) (exists X1 ([x23:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) x23 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) y equiv @ X1 form (@ num (X1 arrow form) L i13) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i13) y))))) p3) i12)) p6) ([x24:tm X1] [p61:pf (@ X1 form (@ X1 (X1 arrow form) Eq x24) x24 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x24) y equiv @ X1 form (@ num (shadowed_0 X1) L i12) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x5:tm (eqrel X1)] [x6:tm (list X1)] [x7:tm X1] [x8:tm num] [x9:tm X1] @ X1 form (@ num (X1 arrow form) x6 x8) x9 or @ num form (@ (list X1) (num arrow form) (list_length X1) x6) x8 and @ X1 form (@ X1 (X1 arrow form) x5 x7) x9)) Eq) L) Last) i12) x4)) x24 (and_i (@ X1 form (@ X1 (X1 arrow form) Eq x24) x24) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x24) x3 equiv @ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x4:tm (eqrel X1)] [x5:tm (list X1)] [x6:tm X1] [x7:tm num] [x8:tm X1] @ X1 form (@ num (X1 arrow form) x5 x7) x8 or @ num form (@ (list X1) (num arrow form) (list_length X1) x5) x7 and @ X1 form (@ X1 (X1 arrow form) x4 x6) x8)) Eq) L) Last) i12) x3)) (and_e1 (@ X1 form (@ X1 (X1 arrow form) Eq x24) x24) (forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x24) y equiv @ X1 form (@ num (shadowed_0 X1) L i12) y)) p61) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x24) x3 equiv @ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x4:tm (eqrel X1)] [x5:tm (list X1)] [x6:tm X1] [x7:tm num] [x8:tm X1] @ X1 form (@ num (X1 arrow form) x5 x7) x8 or @ num form (@ (list X1) (num arrow form) (list_length X1) x5) x7 and @ X1 form (@ X1 (X1 arrow form) x4 x6) x8)) Eq) L) Last) i12) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (X1 arrow form) Eq x24) y) (@ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7)) Eq) L) Last) i12) y) (imp_i (@ X1 form (@ X1 (X1 arrow form) Eq x24) y) (@ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7)) Eq) L) Last) i12) y) ([p62:pf (@ X1 form (@ X1 (X1 arrow form) Eq x24) y)] cut (@ X1 form (@ num (shadowed_0 X1) L i12) y) (@ X1 form (@ num (X1 arrow form) (@ X1 (num arrow X1 arrow form) (@ (list X1) (X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) (list X1) X1 num X1 form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7)) Eq) L) Last) i12) y) (equiv_e1 (@ X1 form (@ X1 (X1 arrow form) Eq x24) y) (@ X1 form (@ num (shadowed_0 X1) L i12) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x24) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i12) x3) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eq x24) x24) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x24) y1 equiv @ X1 form (@ num (shadowed_0 X1) L i12) y1)) p61) y) p62) ([p63:pf (@ X1 form (@ num (shadowed_0 X1) L i12) y)] def5_i (eqrel X1) (list X1) X1 num X1 ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7) Eq L Last i12 y (or_i1 (@ X1 form (@ num (shadowed_0 X1) L i12) y) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y) p63)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i12) y) (@ X1 form (@ X1 (X1 arrow form) Eq x24) y) ([p64:pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i12) y)] cut (@ X1 form (@ num (X1 arrow form) L i12) y or @ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y) (@ X1 form (@ X1 (X1 arrow form) Eq x24) y) (def5_e X1 num X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7) Eq L Last i12 y p64) ([p65:pf (@ X1 form (@ num (shadowed_0 X1) L i12) y or @ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y)] cut (@ X1 form (@ num (shadowed_0 X1) L i12) y) (@ X1 form (@ X1 (X1 arrow form) Eq x24) y) (or_e1 (@ X1 form (@ num (shadowed_0 X1) L i12) y) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y) p65 (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y) ([p65a:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y)] cut (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12)) false (list_inrange_not_length X1 Eq L i12 (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x25:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x25) x25 and forall X1 ([y2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x25) y2 equiv @ X1 form (@ num (X1 arrow form) L i12) y2))) (forall X1 ([y3:tm X1] not (@ X1 form (@ num (X1 arrow form) L i12) y3))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x26:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x26) x26 and forall X1 ([y4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x26) y4 equiv @ X1 form (@ num (X1 arrow form) L x3) y4))) (forall X1 ([y5:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y5)))) (and_e2 (isNat n) (forall num ([i14:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i14) (exists X1 ([x27:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) x27 and forall X1 ([y6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) y6 equiv @ X1 form (@ num (X1 arrow form) L i14) y6))) (forall X1 ([y7:tm X1] not (@ X1 form (@ num (X1 arrow form) L i14) y7))))) p3) i12) p6)) ([p65b:pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12))] not_e (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12) p65b (and_e1 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12) (@ X1 form (@ X1 (X1 arrow form) Eq Last) y) p65a))))) ([p66:pf (@ X1 form (@ num (shadowed_0 X1) L i12) y)] equiv_e2 (@ X1 form (@ X1 (X1 arrow form) Eq x24) y) (@ X1 form (@ num (shadowed_0 X1) L i12) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x24) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i12) x3) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eq x24) x24) (forall X1 ([y8:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq x24) y8 equiv @ X1 form (@ num (shadowed_0 X1) L i12) y8)) p61) y) p66))))))))))) (imp_i (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) i12)) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i12) x3))) ([p10:pf (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) i12))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i12) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i12) y) ([p11:pf (@ X1 form (@ num (shadowed_0 X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Last) i12) y)] cut (@ X1 form (@ num (X1 arrow form) L i12) y or @ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y) false (def5_e X1 num X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7) Eq L Last i12 y p11) ([p12:pf (@ X1 form (@ num (shadowed_0 X1) L i12) y or @ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y)] cut (@ X1 form (@ num (shadowed_0 X1) L i12) y) false (or_e1 (@ X1 form (@ num (shadowed_0 X1) L i12) y) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y) p12 (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y) ([p12a:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12 and @ X1 form (@ X1 (X1 arrow form) Eq Last) y)] cut (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12)) false (list_not_inrange_not_length n i12 X1 Eq L p10 p31 (and_e2 (isNat n) (forall num ([i15:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i15) (exists X1 ([x28:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x28) x28 and forall X1 ([y9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x28) y9 equiv @ X1 form (@ num (X1 arrow form) L i15) y9))) (forall X1 ([y10:tm X1] not (@ X1 form (@ num (X1 arrow form) L i15) y10))))) p3)) ([p12b:pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12))] not_e (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12) p12b (and_e1 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) i12) (@ X1 form (@ X1 (X1 arrow form) Eq Last) y) p12a))))) ([p13:pf (@ X1 form (@ num (shadowed_0 X1) L i12) y)] cut (forall X1 ([y11:tm X1] not (@ X1 form (@ num (X1 arrow form) L i12) y11))) false (imp_e (not (@ num form (@ num (shadowed_0 num) inrange n) i12)) (forall X1 ([y12:tm X1] not (@ X1 form (@ num (X1 arrow form) L i12) y12))) (and_e2 (@ num form (@ num (shadowed_0 num) inrange n) i12 imp exists X1 ([x29:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) x29 and forall X1 ([y13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) y13 equiv @ X1 form (@ num (X1 arrow form) L i12) y13))) (not (@ num form (@ num (shadowed_0 num) inrange n) i12) imp forall X1 ([y14:tm X1] not (@ X1 form (@ num (X1 arrow form) L i12) y14))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x30:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x30) x30 and forall X1 ([y15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x30) y15 equiv @ X1 form (@ num (X1 arrow form) L x3) y15))) (forall X1 ([y16:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y16)))) (and_e2 (isNat n) (forall num ([i16:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i16) (exists X1 ([x31:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x31) x31 and forall X1 ([y17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x31) y17 equiv @ X1 form (@ num (X1 arrow form) L i16) y17))) (forall X1 ([y18:tm X1] not (@ X1 form (@ num (X1 arrow form) L i16) y18))))) p3) i12)) (inrange_expand_not n i12 p10)) ([p20:pf (forall X1 ([y19:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i12) y19)))] not_e (@ X1 form (@ num (shadowed_0 X1) L i12) y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i12) x3)) p20 y) p13)))))))))))))).
list_addlast_hd : {X1:tp} {L:tm (list X1)} {X:tm X1} {Eq:tm (eqrel X1)} {Y:tm X1} pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Y)) X) = [X1:tp] [L:tm (list X1)] [X:tm X1] [Eq:tm (eqrel X1)] [Y:tm X1] [p1:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) X)] cut (@ X1 form (@ num (X1 arrow form) L zero) X) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Y)) X) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L X p1) ([p2:pf (@ X1 form (@ num (shadowed_0 X1) L zero) X)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Y) X (def5_i (eqrel X1) (list X1) X1 num X1 ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7) Eq L Y zero X (or_i1 (@ X1 form (@ num (shadowed_0 X1) L zero) X) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) zero and @ X1 form (@ X1 (X1 arrow form) Eq Y) X) p2))).
list_addlast_nth : {X1:tp} {L:tm (list X1)} {I:tm num} {X:tm X1} {Eq:tm (eqrel X1)} {Z:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Z)) I) X) = [X1:tp] [L:tm (list X1)] [I:tm num] [X:tm X1] [Eq:tm (eqrel X1)] [Z:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] cut (@ X1 form (@ num (X1 arrow form) L I) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Z)) I) X) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p1) ([p2:pf (@ X1 form (@ num (shadowed_0 X1) L I) X)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) Z) I X (def5_i (eqrel X1) (list X1) X1 num X1 ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7) Eq L Z I X (or_i1 (@ X1 form (@ num (shadowed_0 X1) L I) X) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I and @ X1 form (@ X1 (X1 arrow form) Eq Z) X) p2))).
list_addlast_nth' : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {X:tm X1} {I:tm num} {Y:tm X1} {N:tm num} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) I) Y) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (lt I N) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) Y) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [X:tm X1] [I:tm num] [Y:tm X1] [N:tm num] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) I) Y)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p3:pf (lt I N)] cut (@ X1 form (@ num (X1 arrow form) L I) Y or @ num form (@ (list X1) (num arrow form) (list_length X1) L) I and @ X1 form (@ X1 (X1 arrow form) Eq X) Y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) L) I) Y) (def5_e X1 num X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7) Eq L X I Y (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X) I Y p1)) ([p4:pf (@ X1 form (@ num (shadowed_0 X1) L I) Y or @ num form (@ (list X1) (num arrow form) (list_length X1) L) I and @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I Y (or_e1 (@ X1 form (@ num (shadowed_0 X1) L I) Y) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I and @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) p4 (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I and @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) ([p5:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I and @ X1 form (@ X1 (shadowed_0 X1) Eq X) Y)] cut (eq num I N) false (list_length_uniq X1 L I N (and_e1 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) I) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) p5) p2) ([p6:pf (eq num I N)] cut (!= num I N) false (lt->neq I N p3) ([p7:pf (not (eq num I N))] not_e (eq num I N) p7 p6)))))).
list_addlast_getlast : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} {L:tm (list X1)} {N:tm num} pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X)) N) X) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [L:tm (list X1)] [N:tm num] [p0:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X)] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ X1 (list X1) (@ (list X1) (X1 arrow list X1) (@ (eqrel X1) (list X1 arrow X1 arrow list X1) (list_addlast X1) Eq) L) X) N X (def5_i (eqrel X1) (list X1) X1 num X1 ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x4 x6) x7 or @ num form (@ (list X1) (num arrow form) (list_length X1) x4) x6 and @ X1 form (@ X1 (X1 arrow form) x3 x5) x7) Eq L X N X (or_i2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N and @ X1 form (@ X1 (X1 arrow form) Eq X) X) (@ X1 form (@ num (X1 arrow form) L N) X) (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) (@ X1 form (@ X1 (X1 arrow form) Eq X) X) p1 p0))).
list_length_droplast_i : {X1:tp} {L:tm (list X1)} {N:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (gt N zero) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_droplast X1) L)) (pred N)) = [X1:tp] [L:tm (list X1)] [N:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (gt N zero)] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) (@ (list X1) (list X1) (list_droplast X1) L) (pred N) (and_i (isNat (pred N)) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (pred N)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ (list X1) (list X1) (list_droplast X1) L)) x3)) (isNat_pred_i N (and_e1 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) p2) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (pred N)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ (list X1) (list X1) (list_droplast X1) L)) x3) ([i1:tm num] equiv_i2 (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (list_droplast X1) L)) i1) ([p3:pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1)] cut (@ num form (@ num (shadowed_0 num) inrange (succ (pred N))) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (list_droplast X1) L)) i1) (inrange_expand (pred N) i1 p3) ([p3a:pf (@ num form (@ num (shadowed_0 num) inrange (succ (pred N))) i1)] cut (@ num form (@ num (shadowed_0 num) inrange N) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (list_droplast X1) L)) i1) (congr num N (succ (pred N)) ([Z:tm num] @ num form (@ num (shadowed_0 num) inrange Z) i1) (symm num (succ (pred N)) N (succpred N)) p3a) ([p3b:pf (@ num form (@ num (shadowed_0 num) inrange N) i1)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i1) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (list_droplast X1) L)) i1) (list_nth_exists X1 L N i1 p1 p3b) ([y:tm X1] [p30:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i1) y)] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y1:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y1)) (@ (list X1) (list X1) (list_droplast X1) L) i1 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i1) x3) y (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) L i1 y (and_i (@ X1 form (@ num (X1 arrow form) L i1) y) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1))) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L i1 y p30) (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1)) ([p31:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1))] not_e (eq num i1 (pred N)) (lt->neq i1 (pred N) (inrange_e3 (pred N) i1 p3)) (trans num i1 (pred (succ i1)) (+ N (neg one)) (symm num (pred (succ i1)) i1 (predsucc i1)) (eq_plus (succ i1) N (neg one) (list_length_uniq X1 L (succ i1) N p31 p1)))))))))))) ([p4:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (list_droplast X1) L)) i1)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i1) x3) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ (list X1) (list X1) (list_droplast X1) L) i1 p4) ([y:tm X1] [p40:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i1) y)] cut (@ X1 form (@ num (X1 arrow form) L i1) y and not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1))) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) L i1 y p40) ([p41:pf (@ X1 form (@ num (X1 arrow form) L i1) y and not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1)))] and_l (@ X1 form (@ num (X1 arrow form) L i1) y) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1))) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) p41 ([p42:pf (@ X1 form (@ num (shadowed_0 X1) L i1) y)] [p43:pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1)))] cut (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y2:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y2))) L) i1) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y3:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y3)) L i1 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L i1) x3) y p42)) ([p44:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i1)] cut (@ num form (@ num (shadowed_0 num) inrange N) i1) (@ num form (@ num (shadowed_0 num) inrange (pred N)) i1) (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) i1) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) i1) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) i1) p44) ([p45:pf (@ num form (@ num (shadowed_0 num) inrange N) i1)] inrange_i i1 (pred N) (inrange_e1 N i1 p45) (inrange_e2 N i1 p45) (or3_e (> i1 (pred N)) (== num i1 (pred N)) (< i1 (pred N)) (lt i1 (pred N)) (gt_eq_lt i1 (pred N)) ([p46:pf (gt i1 (pred N))] false_e (lt i1 (pred N)) (not_e (< i1 N) (greatereq_not_lt i1 N (congr num N (succ (pred N)) ([z1:tm num] geq i1 z1) (symm num (succ (pred N)) N (succpred N)) (greatereq_plus1_i i1 (pred N) (inrange_e1 N i1 p45) (isNat->isInt (pred N) (isNat_pred_i N (and_e1 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) p2)) p46))) (inrange_e3 N i1 p45))) ([p47:pf (eq num i1 (pred N))] false_e (lt i1 (pred N)) (not_e (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1)) p43 (congr num (+ i1 one) N ([z2:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) z2) (trans num (+ i1 one) (+ (pred N) one) N (eq_plus i1 (pred N) one p47) (succpred N)) p1))) ([p48:pf (lt i1 (pred N))] p48))))))))))).
list_droplast_prop2 : {X1:tp} {L:tm (list X1)} {N:tm num} {I:tm num} {X:tm X1} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (lt I (pred N)) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (list_droplast X1) L)) I) X) = [X1:tp] [L:tm (list X1)] [N:tm num] [I:tm num] [X:tm X1] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] [p3:pf (lt I (pred N))] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (list_droplast X1) L) I X (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) L I X (and_i (@ X1 form (@ num (X1 arrow form) L I) X) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ I))) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p2) (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ I)) ([p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ I))] cut (> (pred N) (pred N) imp false) false (not_refl_gt (pred N) false) ([p5:pf (gt (pred N) (pred N) imp false)] imp_e (gt (pred N) (pred N)) false p5 (trans_geq_gt (pred N) (succ I) (pred N) (lesseq_plus1_i I (pred N) (congr num I (pred (succ I)) ([z1:tm num] isInt z1) (symm num (pred (succ I)) I (predsucc I)) (isInt_pred_i (succ I) (isNat->isInt (succ I) (and_e1 (isNat (succ I)) (forall num ([I1:tm num] @ num form (@ num (shadowed_0 num) inrange (succ I)) I1 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I1)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I2 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I2)) L (succ I) p4))))) (isInt_pred_i N (isNat->isInt N (and_e1 (isNat N) (forall num ([I3:tm num] @ num form (@ num (shadowed_0 num) inrange N) I3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I3)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I4:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I4 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I4)) L N p1)))) p3) (trans_geq_gt (succ I) N (pred N) (eq->geq (succ I) N (list_length_uniq X1 L (succ I) N p4 p1)) (pred_lt N)))))))).
list_droplast_valid_i : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_droplast X1) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y))))))) Eq) (@ (list X1) (list X1) (list_droplast X1) L)) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i3) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ num (X1 arrow form) x4 i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i4) y)))))) Eq L p1)) ([n:tm num] [p2:pf (isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i5) y)))))] or_e (eq num n zero) (not (eq num n zero)) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n1:tm num] isNat n1 and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i6) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) y equiv @ X1 form (@ num (X1 arrow form) x4 i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i6) y))))))) Eq) (@ (list X1) (list X1) (list_droplast X1) L)) (excluded_middle (eq num n zero)) ([p3:pf (eq num n zero)] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n2:tm num] isNat n2 and forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n2) i7) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x10) y equiv @ X1 form (@ num (X1 arrow form) x4 i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i7) y)))))) Eq (@ (list X1) (list X1) (list_droplast X1) L) (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i8) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i8) y)))))) (list_valid_per X1 Eq L p1) (exists_i num ([x3:tm num] isNat x3 and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i9) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i9) y))))) n (and_i (isNat n) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) x3) y))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) x3) x4))))) (congr num n zero ([z1:tm num] isNat z1) p3 n_zero) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) x3) y))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) x3) x4)))) ([i10:tm num] cut (not (@ num form (@ num (shadowed_0 num) inrange n) i10)) (if (@ num form (@ num (shadowed_0 num) inrange n) i10) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i10) y))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i10) x3)))) (congr num n zero ([z2:tm num] not (@ num form (@ num (shadowed_0 num) inrange z2) i10)) p3 (not_inrange_zero i10)) ([p4:pf (not (@ num form (@ num (shadowed_0 num) inrange n) i10))] if_i2 (@ num form (@ num (shadowed_0 num) inrange n) i10) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i10) x3))) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i10) y))) p4 (forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i10) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i10) y) ([p5:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i10) y)] cut (@ X1 form (@ num (X1 arrow form) L i10) y) false (and_e1 (@ X1 form (@ num (X1 arrow form) L i10) y) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i10))) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) L i10 y p5)) ([p51:pf (@ X1 form (@ num (shadowed_0 X1) L i10) y)] cut (not (@ X1 form (@ num (shadowed_0 X1) L i10) y)) false (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i10) x3)) (if_e2 (@ num form (@ num (shadowed_0 num) inrange n) i10) (exists X1 ([x17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y1 equiv @ X1 form (@ num (shadowed_0 X1) L i10) y1))) (forall X1 ([y2:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i10) y2))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18 and forall X1 ([y3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y3 equiv @ X1 form (@ num (shadowed_0 X1) L x3) y3))) (forall X1 ([y4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) y4)))) (and_e2 (isNat n) (forall num ([i11:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i11) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) x19 and forall X1 ([y5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) y5 equiv @ X1 form (@ num (shadowed_0 X1) L i11) y5))) (forall X1 ([y6:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i11) y6))))) p2) i10) p4) y) ([p6:pf (not (@ X1 form (@ num (shadowed_0 X1) L i10) y))] not_e (@ X1 form (@ num (shadowed_0 X1) L i10) y) p6 p51)))))))))))) ([p7:pf (not (eq num n zero))] cut (> n zero) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n3:tm num] isNat n3 and forall num ([i12:tm num] if (@ num form (@ num (shadowed_0 num) inrange n3) i12) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x20) x20 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x20) y equiv @ X1 form (@ num (X1 arrow form) x4 i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i12) y))))))) Eq) (@ (list X1) (list X1) (list_droplast X1) L)) (neq->geq->gt n zero p7 (isNat->geq_zero n (and_e1 (isNat n) (forall num ([i13:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i13) (exists X1 ([x21:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (shadowed_0 X1) L i13) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i13) y))))) p2))) ([p71:pf (gt n zero)] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n4:tm num] isNat n4 and forall num ([i14:tm num] if (@ num form (@ num (shadowed_0 num) inrange n4) i14) (exists X1 ([x22:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x22) x22 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x22) y equiv @ X1 form (@ num (X1 arrow form) x4 i14) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i14) y)))))) Eq (@ (list X1) (list X1) (list_droplast X1) L) (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i15:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i15) (exists X1 ([x23:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) x23 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i15) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i15) y)))))) (list_valid_per X1 Eq L p1) (exists_i num ([x3:tm num] isNat x3 and forall num ([i16:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i16) (exists X1 ([x24:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) x24 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i16) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) i16) y))))) (pred n) (and_i (isNat (pred n)) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (pred n)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ X1 form (@ num (X1 arrow form) x6 x7) x8 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ x7)))) L) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) x3) x4))))) (isNat_pred_i n (and_e1 (isNat n) (forall num ([i17:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i17) (exists X1 ([x25:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x25) x25 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x25) y equiv @ X1 form (@ num (shadowed_0 X1) L i17) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i17) y))))) p2) p71) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (pred n)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ X1 form (@ num (X1 arrow form) x6 x7) x8 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ x7)))) L) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) x3) x4)))) ([i18:tm num] if_i (@ num form (@ num (shadowed_0 num) inrange (pred n)) i18) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 x6) x7 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x5) (succ x6)))) L) i18) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i18) x3))) ([p8:pf (@ num form (@ num (shadowed_0 num) inrange (pred n)) i18)] cut (@ num form (@ num (shadowed_0 num) inrange n) i18) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 x6) x7 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x5) (succ x6)))) L) i18) x4))) (congr num n (succ (pred n)) ([z3:tm num] @ num form (@ num (shadowed_0 num) inrange z3) i18) (symm num (succ (pred n)) n (succpred n)) (inrange_expand (pred n) i18 p8)) ([p81:pf (@ num form (@ num (shadowed_0 num) inrange n) i18)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (shadowed_0 X1) L i18) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 x6) x7 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x5) (succ x6)))) L) i18) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) i18) (exists X1 ([x26:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x26) x26 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x26) y equiv @ X1 form (@ num (shadowed_0 X1) L i18) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i18) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x27:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) x27 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) y)))) (and_e2 (isNat n) (forall num ([i19:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i19) (exists X1 ([x28:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x28) x28 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x28) y equiv @ X1 form (@ num (shadowed_0 X1) L i19) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i19) y))))) p2) i18) p81) ([x29:tm X1] [p82:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) x29 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) y equiv @ X1 form (@ num (shadowed_0 X1) L i18) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 x6) x7 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x5) (succ x6)))) L) i18) x4)) x29 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) x29) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) L) i18) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) x29) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) y equiv @ X1 form (@ num (shadowed_0 X1) L i18) y)) p82) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) L) i18) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) L) i18) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) L) i18) y) ([p3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) y)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) L i18 y (and_i (@ X1 form (@ num (shadowed_0 X1) L i18) y) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i18))) (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) y) (@ X1 form (@ num (shadowed_0 X1) L i18) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i18) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) x29) (forall X1 ([y7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) y7 equiv @ X1 form (@ num (shadowed_0 X1) L i18) y7)) p82) y) p3) (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i18)) ([p83a:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i18))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n) false (list_valid_implies_length n X1 Eq L p2) ([p83b:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] cut (eq num (succ i18) n) false (list_length_uniq X1 L (succ i18) n p83a p83b) ([p83c:pf (eq num (succ i18) n)] cut (> (+ (pred n) one) (+ i18 one)) false (lt_add_closure (pred n) i18 one (inrange_e3 (pred n) i18 p8)) ([p83d:pf (lt (succ i18) (succ (pred n)))] cut (lt (succ i18) n) false (congr num n (succ (pred n)) ([z4:tm num] lt (succ i18) z4) (symm num (succ (pred n)) n (succpred n)) p83d) ([p83e:pf (lt (succ i18) n)] not_e (eq num (succ i18) n) (lt->neq (succ i18) n p83e) p83c))))))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i18) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) y) ([p84:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i18) y)] cut (@ X1 form (@ num (X1 arrow form) L i18) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) y) (and_e1 (@ X1 form (@ num (X1 arrow form) L i18) y) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i18))) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) L i18 y p84)) ([p84a:pf (@ X1 form (@ num (shadowed_0 X1) L i18) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) y) (@ X1 form (@ num (shadowed_0 X1) L i18) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i18) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x29) x29) (forall X1 ([y8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) y8 equiv @ X1 form (@ num (shadowed_0 X1) L i18) y8)) p82) y) p84a))))))))) ([p9:pf (not (@ num form (@ num (shadowed_0 num) inrange (pred n)) i18))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i18) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i18) y) ([p91:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i18) y)] cut (@ X1 form (@ num (X1 arrow form) L i18) y and not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i18))) false (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) L i18 y p91) ([p91a:pf (@ X1 form (@ num (shadowed_0 X1) L i18) y and not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i18)))] or_e (eq num i18 (pred n)) (not (eq num i18 (pred n))) false (excluded_middle (eq num i18 (pred n))) ([p92:pf (eq num i18 (pred n))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n) false (list_valid_implies_length n X1 Eq L p2) ([p92a:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] not_e (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i18)) (and_e2 (@ X1 form (@ num (shadowed_0 X1) L i18) y) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i18))) p91a) (congr num (succ i18) n ([z5:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) z5) (congr num n (succ (pred n)) ([z6:tm num] eq num (succ i18) z6) (symm num (succ (pred n)) n (succpred n)) (eq_plus i18 (pred n) one p92)) p92a))) ([p93:pf (not (eq num i18 (pred n)))] cut (not (@ num form (@ num (shadowed_0 num) inrange n) i18)) false (inrange_shrink_not n i18 (isNat->isInt n (and_e1 (isNat n) (forall num ([i20:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i20) (exists X1 ([x30:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x30) x30 and forall X1 ([y9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x30) y9 equiv @ X1 form (@ num (shadowed_0 X1) L i20) y9))) (forall X1 ([y10:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i20) y10))))) p2)) p93 p9) ([p93a:pf (not (@ num form (@ num (shadowed_0 num) inrange n) i18))] cut (not (@ X1 form (@ num (shadowed_0 X1) L i18) y)) false (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i18) x3)) (if_e2 (@ num form (@ num (shadowed_0 num) inrange n) i18) (exists X1 ([x31:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x31) x31 and forall X1 ([y11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x31) y11 equiv @ X1 form (@ num (shadowed_0 X1) L i18) y11))) (forall X1 ([y12:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i18) y12))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x32:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x32) x32 and forall X1 ([y13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x32) y13 equiv @ X1 form (@ num (shadowed_0 X1) L x3) y13))) (forall X1 ([y14:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L x3) y14)))) (and_e2 (isNat n) (forall num ([i21:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i21) (exists X1 ([x33:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x33) x33 and forall X1 ([y15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x33) y15 equiv @ X1 form (@ num (shadowed_0 X1) L i21) y15))) (forall X1 ([y16:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L i21) y16))))) p2) i18) p93a) y) ([p93b:pf (not (@ X1 form (@ num (shadowed_0 X1) L i18) y))] not_e (@ X1 form (@ num (shadowed_0 X1) L i18) y) p93b (and_e1 (@ X1 form (@ num (shadowed_0 X1) L i18) y) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i18))) p91a)))))))))))))))).
list_length_droplast_uniq : {X1:tp} {L:tm (list X1)} {N:tm num} {N':tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_droplast X1) L)) N) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N') -> pf (exists X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) L (pred N')) x3)) -> pf (eq num N (pred N')) = [X1:tp] [L:tm (list X1)] [N:tm num] [N':tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_droplast X1) L)) N)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N')] [p3:pf (exists X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) L (pred N')) x4))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) L (pred N')) x3) (eq num N (pred N')) p3 ([x5:tm X1] [p31:pf (@ X1 form (@ num (shadowed_0 X1) L (pred N')) x5)] cut (@ (list X1) form (lam (list X1) form ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3))) L) (eq num N (pred N')) (def1_i (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) L (not_i (@ (list X1) form (list_is_nil X1) L) ([p41:pf (@ (list X1) form (list_is_nil X1) L)] not_e (@ X1 form (@ num (X1 arrow form) L (pred N')) x5) (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) x4)) (def1_e (list X1) ([x3:tm (list X1)] forall2 num X1 ([i1:tm num] [x6:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i1) x6))) L p41) (pred N') x5) p31))) ([p4:pf (@ (list X1) form (list_is_not_nil X1) L)] cut (gt N' zero) (eq num N (pred N')) (list_length_not_nil X1 L N' p4 p2) ([p5:pf (gt N' zero)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_droplast X1) L)) (pred N')) (eq num N (pred N')) (list_length_droplast_i X1 L N' p2 p5) ([p6:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_droplast X1) L)) (pred N'))] list_length_uniq X1 (@ (list X1) (list X1) (list_droplast X1) L) N (pred N') p1 p6)))).
list_drop_invariant : {X1:tp} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (list_droplast X1) L)) I) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) = [X1:tp] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (list_droplast X1) L)) I) X)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X (and_e1 (@ X1 form (@ num (X1 arrow form) L I) X) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ I))) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) L I X (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (list_droplast X1) L) I X p1))).
list_eq_droplast : {X1:tp} {Eq:tm (eqrel X1)} {A:tm (list X1)} {B:tm (list X1)} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) A) B) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (list_droplast X1) A)) (@ (list X1) (list X1) (list_droplast X1) B)) = [X1:tp] [Eq:tm (eqrel X1)] [A:tm (list X1)] [B:tm (list X1)] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) A) B)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) A) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (list_droplast X1) A)) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) B)) (list_eq_valid X1 Eq A B p1) ([p21:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) A)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) B) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (list_droplast X1) A)) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) B)) (list_eq_valid' X1 Eq A B p1) ([p22:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) B)] cut (@ (list X1) form (@ (list X1) (shadowed_0 (list X1)) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) B) A) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (list_droplast X1) A)) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) B)) (per_symm (list X1) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) A B (list_eq_validper X1 Eq (list_valid_per X1 Eq A p21)) p1) ([p3:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) B) A)] list_eq_i X1 Eq (@ (list X1) (list X1) (list_droplast X1) A) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) B) (per_rel_i num X1 eq_arith Eq (@ (list X1) (list X1) (list_droplast X1) A) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) B) ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q11:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q12:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) A) i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) B) i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) A) i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) B) i') x') ([q4:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) A) i1) x3)] and_l (@ X1 form (@ num (X1 arrow form) A i1) x3) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i1))) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) B) i') x') (def3_e X1 num (list X1) ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5))) A i1 x3 q4) ([q41:pf (@ X1 form (@ num (shadowed_0 X1) A i1) x3)] [q48:pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i1)))] def3_i (list X1) num X1 ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5))) B i' x' (and_i (@ X1 form (@ num (shadowed_0 X1) B i') x') (not (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i'))) (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) A i1) x3) (@ X1 form (@ num (shadowed_0 X1) B i') x') (list_eq_nth X1 Eq A B i1 i' x3 x' p1 q11 q12) q41) (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i')) ([q42:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i'))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i')) false (list_eq_length X1 Eq B A (succ i') p3 q42) ([q43:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i'))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i1)) false (congr num i1 i' ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ z1)) (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q11) q43) ([q44:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i1))] not_e (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i1)) q48 q44)))))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) B) i') x') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) A) i1) x3) ([q5:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) B) i') x')] and_l (@ X1 form (@ num (X1 arrow form) B i') x') (not (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i'))) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) A) i1) x3) (def3_e X1 num (list X1) ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5))) B i' x' q5) ([q51:pf (@ X1 form (@ num (shadowed_0 X1) B i') x')] [q52:pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i')))] def3_i (list X1) num X1 ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5))) A i1 x3 (and_i (@ X1 form (@ num (shadowed_0 X1) A i1) x3) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i1))) (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) A i1) x3) (@ X1 form (@ num (shadowed_0 X1) B i') x') (list_eq_nth X1 Eq A B i1 i' x3 x' p1 q11 q12) q51) (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i1)) ([q53:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i1))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i1)) false (list_eq_length X1 Eq A B (succ i1) p1 q53) ([q54:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i1))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i')) false (congr num i' i1 ([z2:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ z2)) (symm num i1 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q11)) q54) ([q55:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i'))] not_e (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i')) q52 q55))))))))) ([i2:tm num] [x4:tm X1] [q2:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) A) i2) x4)] cut (@ X1 form (@ num (X1 arrow form) A i2) x4) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (and_e1 (@ X1 form (@ num (X1 arrow form) A i2) x4) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) A) (succ i2))) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x3 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x5))) A i2 x4 q2)) ([q21:pf (@ X1 form (@ num (shadowed_0 X1) A i2) x4)] list_eq_nth_valid X1 Eq A B i2 x4 p1 q21)) ([i':tm num] [x':tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) B) i') x')] cut (@ X1 form (@ num (X1 arrow form) B i') x') (@ num form (@ num (shadowed_0 num) eq_arith i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (and_e1 (@ X1 form (@ num (X1 arrow form) B i') x') (not (@ num form (@ (list X1) (num arrow form) (list_length X1) B) (succ i'))) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) B i' x' q3)) ([q31:pf (@ X1 form (@ num (shadowed_0 X1) B i') x')] list_eq_nth_valid' X1 Eq A B i' x' p1 q31))) (list_droplast_valid_i X1 Eq A p21)))).
list_last_is_pred_n : {X1:tp} {L:tm (list X1)} {X:tm X1} {N:tm num} pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) X) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred N)) X) = [X1:tp] [L:tm (list X1)] [X:tm X1] [N:tm num] [p1:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) X)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred x3)) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred N)) X) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] exists num ([N1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N1 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N1)) x4)) L X p1) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred n)) X)] and_l (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred n)) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred N)) X) q1 ([q2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] [q3:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred n)) X)] cut (eq num N n) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred N)) X) (list_length_uniq X1 L N n p2 q2) ([q4:pf (eq num N n)] congr num N n ([z1:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred z1)) X) q4 q3))).
list_last_exists : {X1:tp} {L:tm (list X1)} {N:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (gt N zero) -> pf (exists X1 ([x3:tm X1] @ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) x3)) = [X1:tp] [L:tm (list X1)] [N:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (gt N zero)] cut (@ num form (@ num (shadowed_0 num) inrange N) (pred N) equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred N)) (exists X1 ([x3:tm X1] @ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x4:tm (list X1)] [x5:tm X1] exists num ([N1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) N1 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x4) (pred N1)) x5))) L) x3)) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) x3) (and_e2 (isNat N) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L N p1)) (pred N)) ([p3:pf (@ num form (@ num (shadowed_0 num) inrange N) (pred N) equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred N))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L (pred N)) x3) (exists X1 ([x3:tm X1] @ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x4:tm (list X1)] [x5:tm X1] exists num ([N2:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) N2 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x4) (pred N2)) x5))) L) x3)) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L (pred N) (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L) (pred N)) p3 (inrange_pred_n N (list_length_isNat X1 L N p1) p2))) ([x4:tm X1] [p4:pf (@ X1 form (@ num (shadowed_0 X1) L (pred N)) x4)] exists_i X1 ([x3:tm X1] @ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x5:tm (list X1)] [x6:tm X1] exists num ([N3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x5) N3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x5) (pred N3)) x6))) L) x3) x4 (def2_i (list X1) X1 ([x3:tm (list X1)] [x5:tm X1] exists num ([N4:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N4 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N4)) x5)) L x4 (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred x3)) x4) N (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x3 x5) x6)) L) (pred N)) x4) p1 (def3_i (list X1) num X1 ([x3:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x3 x5) x6) L (pred N) x4 p4)))))).
list_last_uniq : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {X:tm X1} {Y:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) X) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) X)] [p3:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) Y)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) x3) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (list_length_exists X1 Eq L p1) ([n:tm num] [p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] list_nth_eq X1 Eq L (pred n) X Y p1 (list_last_is_pred_n X1 L X n p2 p4) (list_last_is_pred_n X1 L Y n p3 p4)).
list_last_singleton : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) X) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) X (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) (pred x3)) X) one (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) one) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) (- one one)) X) (list_singleton_length X1 Eq X p1) (congr num (- one one) zero ([z1:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1))) z1) X) (symm num zero (- one one) (inv_add2 one)) (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) zero X (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) X) (list_nil X1)) X (list_singleton_hd X1 Eq X p1)))))).
list_last_cons : {X1:tp} {L:tm (list X1)} {X:tm X1} {Eq:tm (X1 arrow X1 arrow form)} {Hd:tm X1} pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) X) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) X) = [X1:tp] [L:tm (list X1)] [X:tm X1] [Eq:tm (X1 arrow X1 arrow form)] [Hd:tm X1] [p1:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) X)] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred x3)) X) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) X) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4)) L X p1) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred n)) X)] and_l (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred n)) X) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) X) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] [q12:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred n)) X)] cut (geq (pred n) zero) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) X) (inrange_e2 n (pred n) (list_index_inrange X1 L n (pred n) X q11 q12)) ([q2:pf (geq (pred n) zero)] cut (> n (const 0)) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) X) (trans_geq_gt n one (const 0) (congr2 num num n (succ (pred n)) one (+ zero one) ([z1:tm num] [z2:tm num] geq z1 z2) (symm num (succ (pred n)) n (succpred n)) (symm num (+ zero one) one (zero_plus one)) (greatereq_plus_cong2 (pred n) zero one q2)) greater1_0) ([q3:pf (gt n zero)] cut (!= num n zero) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4))) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) X) (gt->neq n zero q3) ([q4:pf (not (eq num n zero))] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L) X (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) (pred x3)) X) (succ n) (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) (succ n)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L)) (pred (succ n))) X) (list_length_cons X1 Eq Hd L n p2 q11) (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L) (pred (succ n)) X (congr num (pred (succ n)) n ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L) z1) X) (predsucc n) (def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L n X (if_i2 (eq num n zero) (@ X1 form (@ num (X1 arrow form) L (pred n)) X) (_@2 X1 X1 form Eq X Hd) q4 (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L (pred n) X q12)))))))))))).
list_eq_last : {X1:tp} {A:tm (list X1)} {X:tm X1} {Eq:tm (eqrel X1)} {B:tm (list X1)} pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) A) X) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) A) B) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) B) X) = [X1:tp] [A:tm (list X1)] [X:tm X1] [Eq:tm (eqrel X1)] [B:tm (list X1)] [p1:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) A) X)] [p3:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) A) B)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) A) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4))) B) X) (list_eq_valid X1 Eq A B p3) ([p21:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) A)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) B) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4))) B) X) (list_eq_valid' X1 Eq A B p3) ([p22:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) B)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) A) x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) A) (pred x3)) X) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4))) B) X) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4)) A X p1) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) A) n and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) A) (pred n)) X)] and_l (@ num form (@ (list X1) (num arrow form) (list_length X1) A) n) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) A) (pred n)) X) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4))) B) X) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) A) n)] [q12:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) A) (pred n)) X)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) x3) (pred N)) x4)) B X (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) B) x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) B) (pred x3)) X) n (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) B) n) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) B) (pred n)) X) (list_eq_length X1 Eq A B n p3 q11) (list_nth_i X1 B (pred n) X (list_eq_nth_e1 X1 Eq A B (pred n) X p3 (list_nth_e X1 A (pred n) X q12))))))))).
list_valid_append : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {X:tm X1} {L2:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) L1) X) L2) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [X:tm X1] [L2:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1)] [p3:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) L1) X) L2)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L2) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq X) X and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq X) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 i1) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i1) y)))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y))))))) Eq) L2) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i3) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i3) y))))) Eq L1 X L2 p3) ([n:tm num] [p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L2) (succ n) and forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq X) X and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq X) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 i4) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i4) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) (succ n)) (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq X) X and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq X) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 i5) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i5) y)))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n1:tm num] isNat n1 and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i6) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i6) y))))))) Eq) L2) p4 ([p5:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n)] [p6:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) (succ n))] [p7:pf (forall num ([i7:tm num] if (eq num i7 n) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i7) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 i7) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i7) y))))] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n2:tm num] isNat n2 and forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange n2) i8) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ num (X1 arrow form) x4 i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i8) y)))))) Eq L2 (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i9) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L2 i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i9) y)))))) (list_valid_per X1 Eq L1 p1) (exists_i num ([x3:tm num] isNat x3 and forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i10) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L2 i10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i10) y))))) (succ n) (and_i (isNat (succ n)) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (succ n)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) L2 x3) x5))) (forall X1 ([X2:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 x3) X2))))) (and_e1 (isNat (succ n)) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L2 (succ n) p6)) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (succ n)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) L2 x3) x5))) (forall X1 ([X3:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 x3) X3)))) ([i11:tm num] if_i (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4))) (forall X1 ([X4:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i11) X4))) ([p8:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11)] or_e (eq num i11 n) (@ num form (@ num (shadowed_0 num) inrange n) i11) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4))) (inrange_step n i11 (and_e1 (isInt n) (geq n zero) (and_e1 (isNat n) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange n) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L1 n p5))) p8) ([p81:pf (eq num i11 n)] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4)) X (if_e1 (eq num i11 n) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 i11) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) y equiv @ X1 form (@ num (shadowed_0 X1) L2 x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 x3) y equiv @ X1 form (@ num (shadowed_0 X1) L2 x3) y))) p7 i11) p81)) ([p82:pf (@ num form (@ num (shadowed_0 num) inrange n) i11)] cut (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 i11) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4))) (if_e2 (eq num i11 n) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 i11) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) y equiv @ X1 form (@ num (shadowed_0 X1) L2 x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 x3) y equiv @ X1 form (@ num (shadowed_0 X1) L2 x3) y))) p7 i11) (lt->neq i11 n (inrange_e3 n i11 p82))) ([p82b:pf (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 i11) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) y))] exists_e num ([x3:tm num] isNat x3 and forall num ([i12:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i12) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L1 i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i12) y))))) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4))) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n3:tm num] isNat n3 and forall num ([i13:tm num] if (@ num form (@ num (shadowed_0 num) inrange n3) i13) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) L1 i13) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i13) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n4:tm num] isNat n4 and forall num ([i14:tm num] if (@ num form (@ num (shadowed_0 num) inrange n4) i14) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x12) y equiv @ X1 form (@ num (X1 arrow form) x4 i14) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i14) y)))))) Eq L1 p1)) ([n':tm num] [p2:pf (isNat n' and forall num ([i15:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i15) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) L1 i15) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i15) y)))))] or_e (@ num form (@ num (shadowed_0 num) inrange n') i11) (not (@ num form (@ num (shadowed_0 num) inrange n') i11)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4))) (excluded_middle (@ num form (@ num (shadowed_0 num) inrange n') i11)) ([p84:pf (@ num form (@ num (shadowed_0 num) inrange n') i11)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L1 i11) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n') i11) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y equiv @ X1 form (@ num (X1 arrow form) L1 i11) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i11) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') x3) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (X1 arrow form) L1 x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 x3) y)))) (and_e2 (isNat n') (forall num ([i16:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i16) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ num (X1 arrow form) L1 i16) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i16) y))))) p2) i11) p84) ([x17:tm X1] [p84a:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4)) x17 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) y)) p84a) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) (@ X1 form (@ num (shadowed_0 X1) L2 i11) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) (@ X1 form (@ num (shadowed_0 X1) L2 i11) y) ([p84b:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i11) y) (@ X1 form (@ num (shadowed_0 X1) L2 i11) y) (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) (@ X1 form (@ num (shadowed_0 X1) L1 i11) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x3 equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y1 equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) y1)) p84a) y) p84b) ([p84d:pf (@ X1 form (@ num (shadowed_0 X1) L1 i11) y)] equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L1 i11) y) (@ X1 form (@ num (shadowed_0 X1) L2 i11) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x3) p82b y) p84d))) (imp_i (@ X1 form (@ num (shadowed_0 X1) L2 i11) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) ([p84e:pf (@ X1 form (@ num (shadowed_0 X1) L2 i11) y)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i11) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L1 i11) y) (@ X1 form (@ num (shadowed_0 X1) L2 i11) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x3) p82b y) p84e) ([p84f:pf (@ X1 form (@ num (shadowed_0 X1) L1 i11) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) y) (@ X1 form (@ num (shadowed_0 X1) L1 i11) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x3 equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17) (forall X1 ([y2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y2 equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) y2)) p84a) y) p84f)))))))) ([p85:pf (not (@ num form (@ num (shadowed_0 num) inrange n') i11))] cut (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i11) y))) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4))) (if_e2 (@ num form (@ num (shadowed_0 num) inrange n') i11) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y equiv @ X1 form (@ num (X1 arrow form) L1 i11) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i11) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') x3) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) x19 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) y equiv @ X1 form (@ num (X1 arrow form) L1 x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 x3) y)))) (and_e2 (isNat n') (forall num ([i17:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i17) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) x20 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) y equiv @ X1 form (@ num (X1 arrow form) L1 i17) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i17) y))))) p2) i11) p85) ([p85a:pf (forall X1 ([y:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L1 i11) y)))] cut (@ num form (@ num (shadowed_0 num) inrange n) i11 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i11) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4))) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) x3) (and_e2 (isNat n) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange n) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L1 n p5)) i11) ([p85b:pf (@ num form (@ num (shadowed_0 num) inrange n) i11 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i11)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L1 i11) x3) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4))) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L1 i11 (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange n) i11) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i11) p85b p82)) ([x21:tm X1] [p85c:pf (@ X1 form (@ num (shadowed_0 X1) L1 i11) x21)] false_e (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i11) x4))) (not_e (@ X1 form (@ num (shadowed_0 X1) L1 i11) x21) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3)) p85a x21) p85c))))))))) ([p9:pf (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11))] cut (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) i11) (forall X1 ([X5:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i11) X5))) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) x3) (and_e2 (isNat (succ n)) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L2 (succ n) p6)) i11) ([p91:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) i11)] cut (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) i11)) (forall X1 ([X6:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i11) X6))) (equiv_e1 (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11)) (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) i11)) (equiv_not_i (@ num form (@ num (shadowed_0 num) inrange (succ n)) i11) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) i11) p91) p9) ([p93:pf (not (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) i11))] not_EA_not X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L2 i11) x3) (gdef2_e form num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L2 i11 ([z1:tm form] not z1) p93))))))))))).
list_append_not_nil : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (list_is_not_nil X1) L) -> pf (exists2 (list X1) X1 ([p1:tm (list X1)] [i1:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) p1) i1) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ (list X1) form (list_is_not_nil X1) L)] cut (@ (per X1) form (validper X1) Eq) (exists2 (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L)) (list_valid_per X1 Eq L p1) ([p10:pf (@ (per X1) form (validper X1) Eq)] exists_e num ([x3:tm num] isNat x3 and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i2) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y))))) (exists2 (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L)) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i3) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i4) y)))))) Eq L p1)) ([n:tm num] [p3:pf (isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y)))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n) (exists2 (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L)) (list_valid_implies_length n X1 Eq L p3) ([p31:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n)] cut (gt n zero) (exists2 (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L)) (list_length_not_nil X1 L n p2 p31) ([p32:pf (gt n zero)] exists_e X1 ([x3:tm X1] @ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) x3) (exists2 (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L)) (list_last_exists X1 L n p31 p32) ([y:tm X1] [p4:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_last X1) L) y)] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred n)) y) (exists2 (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L)) (list_last_is_pred_n X1 L y n p4 p31) ([p41:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) (pred n)) y)] exists2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L) (@ (list X1) (list X1) (list_droplast X1) L) y (def4_i (eqrel X1) (list X1) X1 (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n1 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n1) and forall num ([i6:tm num] if (eq num i6 n1) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y1:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y1 equiv @ X1 form (@ num (shadowed_0 X1) x6 i6) y1)) (forall X1 ([y2:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i6) y2 equiv @ X1 form (@ num (shadowed_0 X1) x6 i6) y2))))) Eq (@ (list X1) (list X1) (list_droplast X1) L) y L (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_droplast X1) L)) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i7:tm num] if (eq num i7 x3) (@ X1 form (@ X1 (X1 arrow form) Eq y) y and forall X1 ([y3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq y) y3 equiv @ X1 form (@ num (shadowed_0 X1) L i7) y3)) (forall X1 ([y4:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i7) y4 equiv @ X1 form (@ num (shadowed_0 X1) L i7) y4)))) (pred n) (and3_i (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_droplast X1) L)) (pred n)) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ (pred n))) (forall num ([x3:tm num] if (eq num x3 (pred n)) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq y) x4 equiv @ X1 form (@ num (X1 arrow form) L x3) x4)) (forall X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) x3) x4 equiv @ X1 form (@ num (X1 arrow form) L x3) x4)))) (list_length_droplast_i X1 L n p31 p32) (congr num (succ (pred n)) n ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) z1) (succpred n) p31) (forall_i num ([x3:tm num] if (eq num x3 (pred n)) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq y) x4 equiv @ X1 form (@ num (X1 arrow form) L x3) x4)) (forall X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) x3) x4 equiv @ X1 form (@ num (X1 arrow form) L x3) x4))) ([i8:tm num] if_i (eq num i8 (pred n)) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y and forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq y) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3)) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i8) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3)) ([p5:pf (eq num i8 (pred n))] cut (@ num form (@ num (shadowed_0 num) inrange n) i8) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y and forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq y) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3)) (congr num i8 (pred n) ([z2:tm num] @ num form (@ num (shadowed_0 num) inrange n) z2) p5 (inrange_pred_n n (and_e1 (isNat n) (forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i9) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y5 equiv @ X1 form (@ num (X1 arrow form) L i9) y5))) (forall X1 ([y6:tm X1] not (@ X1 form (@ num (X1 arrow form) L i9) y6))))) p3) p32)) ([p50:pf (@ num form (@ num (shadowed_0 num) inrange n) i8)] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i8) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y and forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq y) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3)) (congr num i8 (pred n) ([z3:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) z3) y) p5 p41) ([p51:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i8) y)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y7 equiv @ X1 form (@ num (X1 arrow form) L i8) y7)) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y and forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq y) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3)) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) i8) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y8 equiv @ X1 form (@ num (X1 arrow form) L i8) y8))) (forall X1 ([y9:tm X1] not (@ X1 form (@ num (X1 arrow form) L i8) y9))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y10 equiv @ X1 form (@ num (X1 arrow form) L x3) y10))) (forall X1 ([y11:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y11)))) (and_e2 (isNat n) (forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i10) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y12 equiv @ X1 form (@ num (X1 arrow form) L i10) y12))) (forall X1 ([y13:tm X1] not (@ X1 form (@ num (X1 arrow form) L i10) y13))))) p3) i8) p50) ([x12:tm X1] [p53:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y14 equiv @ X1 form (@ num (X1 arrow form) L i8) y14))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y and forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq y) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3)) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) y) (@ X1 form (@ num (X1 arrow form) L i8) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12) (forall X1 ([y15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y15 equiv @ X1 form (@ num (X1 arrow form) L i8) y15)) p53) y) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L i8 y p51)) ([p54:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) y)] and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq y) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3)) (list_nth_eq X1 Eq L (pred n) y y p1 p41 p41) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq y) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3) ([y':tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y') (@ X1 form (@ num (X1 arrow form) L i8) y') (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y') (@ X1 form (@ num (X1 arrow form) L i8) y') ([p52:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y')] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) y') (@ X1 form (@ num (X1 arrow form) L i8) y') (per_trans X1 Eq x12 y y' p10 p54 p52) ([p55:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) y')] equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) y') (@ X1 form (@ num (X1 arrow form) L i8) y') (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12) (forall X1 ([y16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y16 equiv @ X1 form (@ num (X1 arrow form) L i8) y16)) p53) y') p55))) (imp_i (@ X1 form (@ num (shadowed_0 X1) L i8) y') (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y') ([p56:pf (@ X1 form (@ num (shadowed_0 X1) L i8) y')] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) y') (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y') (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) y') (@ X1 form (@ num (X1 arrow form) L i8) y') (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12) (forall X1 ([y17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y17 equiv @ X1 form (@ num (X1 arrow form) L i8) y17)) p53) y') p56) ([p57:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x12) y')] per_trans X1 Eq y x12 y' p10 (per_symm X1 Eq x12 y p10 p54) p57)))))))))) ([p6:pf (not (eq num i8 (pred n)))] forall_i X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i8) x3 equiv @ X1 form (@ num (X1 arrow form) L i8) x3) ([y':tm X1] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i8) y') (@ X1 form (@ num (X1 arrow form) L i8) y') (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i8) y') (@ X1 form (@ num (X1 arrow form) L i8) y') ([p61:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i8) y')] and_e1 (@ X1 form (@ num (X1 arrow form) L i8) y') (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i8))) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) L i8 y' p61))) (imp_i (@ X1 form (@ num (shadowed_0 X1) L i8) y') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) L) i8) y') ([p66:pf (@ X1 form (@ num (shadowed_0 X1) L i8) y')] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4))) L i8 y' (and_i (@ X1 form (@ num (shadowed_0 X1) L i8) y') (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i8))) p66 (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i8)) ([p67:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i8))] cut (eq num n (succ i8)) false (list_length_uniq X1 L n (succ i8) p31 p67) ([p68:pf (eq num n (succ i8))] cut (== num (+ (succ i8) (neg one)) (+ n (neg one))) false (symm num (+ n (neg one)) (+ (succ i8) (neg one)) (eq_plus n (succ i8) (neg one) p68)) ([p69:pf (eq num (pred (succ i8)) (pred n))] not_e (eq num i8 (pred n)) p6 (congr num i8 (pred (succ i8)) ([z4:tm num] eq num z4 (pred n)) (symm num (pred (succ i8)) i8 (predsucc i8)) p69))))))))))))))))))))).
list_append_not_nil_i : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} pf (exists2 (list X1) X1 ([p1:tm (list X1)] [i1:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) p1) i1) L)) -> pf (@ (list X1) form (list_is_not_nil X1) L) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [p2:pf (exists2 (list X1) X1 ([p2:tm (list X1)] [i2:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) p2) i2) L))] exists2_e (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L) (@ (list X1) form (list_is_not_nil X1) L) p2 ([p3:tm (list X1)] [i3:tm X1] [p4:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) p3) i3) L)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) p3) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i4:tm num] if (eq num i4 x3) (@ X1 form (@ X1 (X1 arrow form) Eq i3) i3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) p3 i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) (@ (list X1) form (list_is_not_nil X1) L) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i5) y))))) Eq p3 i3 L p4) ([n:tm num] [p5:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) p3) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i6:tm num] if (eq num i6 n) (@ X1 form (@ X1 (X1 arrow form) Eq i3) i3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i6) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) p3 i6) y equiv @ X1 form (@ num (shadowed_0 X1) L i6) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) p3) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i7:tm num] if (eq num i7 n) (@ X1 form (@ X1 (X1 arrow form) Eq i3) i3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) p3 i7) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y)))) (@ (list X1) form (list_is_not_nil X1) L) p5 ([p41:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) p3) n)] [p42:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [p43:pf (forall num ([i8:tm num] if (eq num i8 n) (@ X1 form (@ X1 (X1 arrow form) Eq i3) i3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i8) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) p3 i8) y equiv @ X1 form (@ num (shadowed_0 X1) L i8) y))))] suppose_not (@ (list X1) form (list_is_not_nil X1) L) ([p6:pf (not (@ (list X1) form (list_is_not_nil X1) L))] cut (@ (list X1) form (list_is_nil X1) L) false (list_is_nil_i X1 L p6) ([p7:pf (@ (list X1) form (list_is_nil X1) L)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) zero) false (list_length_nil' X1 L p7) ([p61:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) zero)] cut (eq num (succ n) zero) false (list_length_uniq X1 L (succ n) zero p42 p61) ([p62:pf (eq num (succ n) zero)] cut (>= n zero) false (isNat->geq_zero n (list_length_isNat X1 p3 n p41)) ([p64:pf (geq n zero)] cut (> (succ n) zero) false (trans_gt_geq (succ n) n zero (succ_gt n) p64) ([p65:pf (gt (succ n) zero)] cut (gt zero zero) false (congr num zero (succ n) ([z1:tm num] gt z1 zero) (symm num (succ n) zero p62) p65) ([p66:pf (gt zero zero)] imp_e (> zero zero) false (not_refl_gt zero false) p66)))))))))).
list_append_cons_aux1 : {N:tnum} {I':tm num} {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {I:tm X1} {L:tm (list X1)} pf (gt (succ N) zero) -> pf (eq num I' (succ N)) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) y)) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L I') y)) = [N:tnum] [I':tm num] [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [I:tm X1] [L:tm (list X1)] [q22:pf (gt (succ N) zero)] [q5:pf (eq num I' (succ N))] [q51:pf (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) y))] and_i (@ X1 form (@ X1 (X1 arrow form) Eq I) I) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) x3 equiv @ X1 form (@ num (X1 arrow form) L I') x3)) (and_e1 (@ X1 form (@ X1 (X1 arrow form) Eq I) I) (forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) y)) q51) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) x3 equiv @ X1 form (@ num (X1 arrow form) L I') x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (X1 arrow form) Eq I) y) (@ X1 form (@ num (X1 arrow form) L I') y) (imp_i (@ X1 form (@ X1 (X1 arrow form) Eq I) y) (@ X1 form (@ num (X1 arrow form) L I') y) ([q7:pf (@ X1 form (@ X1 (X1 arrow form) Eq I) y)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) y) (@ X1 form (@ num (X1 arrow form) L I') y) (equiv_e1 (@ X1 form (@ X1 (X1 arrow form) Eq I) y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) x3) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eq I) I) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y1 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) y1)) q51) y) q7) ([q71:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) y)] def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I' y (list_nth_tl_e X1 L I' y (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (list_tl X1) L) (pred I') y q71))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) L I') y) (@ X1 form (@ X1 (X1 arrow form) Eq I) y) ([q8:pf (@ X1 form (@ num (shadowed_0 X1) L I') y)] equiv_e2 (@ X1 form (@ X1 (X1 arrow form) Eq I) y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) x3) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eq I) I) (forall X1 ([y2:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y2 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) y2)) q51) y) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (list_tl X1) L) (pred I') y (list_nth_tl_i X1 L I' y (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I' y q8) (congr num I' (succ N) ([z1:tm num] gt z1 zero) q5 q22))))))).
list_append_cons_aux2 : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {Hd:tm X1} {N:tnum} {PP:tm (num arrow X1 arrow form)} {I':tnum} {Y:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (shadowed_0 X1) L zero) Hd) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ (succ N))) -> pf (gt (succ N) zero) -> pf (@ X1 form (@ num (X1 arrow form) PP (pred I')) Y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) Y) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I') Y equiv @ X1 form (@ num (shadowed_0 X1) L I') Y) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [Hd:tm X1] [N:tnum] [PP:tm (num arrow X1 arrow form)] [I':tnum] [Y:tm X1] [p0:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p11:pf (@ X1 form (@ num (shadowed_0 X1) L zero) Hd)] [q31:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ (succ N)))] [q22:pf (gt (succ N) zero)] [q63:pf (@ X1 form (@ num (X1 arrow form) PP (pred I')) Y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) Y)] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I') Y equiv @ X1 form (@ num (shadowed_0 X1) L I') Y) (list_valid_per X1 Eq L p0) ([p01:pf (@ (per X1) form (validper X1) Eq)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i1) y))))) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I') Y equiv @ X1 form (@ num (shadowed_0 X1) L I') Y) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i3) y)))))) Eq L p0)) ([n':tm num] [q93:pf (isNat n' and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y)))))] cut (eq num n' (succ (succ N))) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I') Y equiv @ X1 form (@ num (shadowed_0 X1) L I') Y) (list_length_uniq X1 L n' (succ (succ N)) (list_valid_implies_length n' X1 Eq L q93) q31) ([q93a:pf (eq num n' (succ (succ N)))] cut (> (+ (succ N) (const 1)) zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I') Y equiv @ X1 form (@ num (shadowed_0 X1) L I') Y) (greater_inc (succ N) zero (const 1) q22 greater1_0) ([q93b:pf (gt (succ (succ N)) zero)] cut (gt n' zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I') Y equiv @ X1 form (@ num (shadowed_0 X1) L I') Y) (congr num n' (succ (succ N)) ([z1:tm num] gt z1 zero) q93a q93b) ([q93c:pf (gt n' zero)] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I') Y) (@ X1 form (@ num (shadowed_0 X1) L I') Y) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I') Y) (@ X1 form (@ num (shadowed_0 X1) L I') Y) ([q9:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I') Y)] or_e (eq num I' zero) (not (eq num I' zero)) (@ X1 form (@ num (shadowed_0 X1) L I') Y) (excluded_middle (eq num I' zero)) ([q91:pf (eq num I' zero)] cut (_@2 X1 X1 form Eq Y Hd) (@ X1 form (@ num (shadowed_0 X1) L I') Y) (if_e1 (_eq num I' zero) (_@2 X1 X1 form Eq Y Hd) (_@2 num X1 form PP (pred I') Y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd PP I' Y q9) q91) ([q92:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Hd)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L zero) y)) (@ X1 form (@ num (shadowed_0 X1) L I') Y) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n') zero) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L zero) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L zero) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') x3) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n') (forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i5) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i5) y))))) q93) zero) (inrange_zero n' q93c)) ([x11:tm X1] [q94:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) Hd) (@ X1 form (@ num (shadowed_0 X1) L I') Y) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) Hd) (@ X1 form (@ num (shadowed_0 X1) L zero) Hd) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L zero) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) q94) Hd) p11) ([q94a:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) Hd)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) Y) (@ X1 form (@ num (shadowed_0 X1) L I') Y) (per_trans X1 Eq x11 Hd Y p01 q94a (per_symm X1 Eq Y Hd p01 q92)) ([q94b:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) Y)] congr num I' zero ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) L z2) Y) q91 (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) Y) (@ X1 form (@ num (shadowed_0 X1) L zero) Y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L zero) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) q94) Y) q94b)))))) ([q95:pf (not (eq num I' zero))] cut (_@2 num X1 form PP (pred I') Y) (@ X1 form (@ num (X1 arrow form) L I') Y) (if_e2 (_eq num I' zero) (_@2 X1 X1 form Eq Y Hd) (_@2 num X1 form PP (pred I') Y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd PP I' Y q9) q95) ([q96:pf (@ X1 form (@ num (X1 arrow form) PP (pred I')) Y)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) Y) (@ X1 form (@ num (X1 arrow form) L I') Y) (equiv_e1 (@ X1 form (@ num (X1 arrow form) PP (pred I')) Y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) Y) q63 q96) ([q97:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) Y)] def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I' Y (list_nth_tl_e X1 L I' Y (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (list_tl X1) L) (pred I') Y q97))))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) L I') Y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) PP) I') Y) ([q10:pf (@ X1 form (@ num (shadowed_0 X1) L I') Y)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd PP I' Y (if_i (eq num I' zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Hd) (@ X1 form (@ num (X1 arrow form) PP (pred I')) Y) ([q11:pf (eq num I' zero)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L zero) y)) (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Hd) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n') zero) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (X1 arrow form) L zero) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L zero) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') x3) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n') (forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i6) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y equiv @ X1 form (@ num (X1 arrow form) L i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i6) y))))) q93) zero) (inrange_zero n' q93c)) ([x15:tm X1] [q111:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x15) Hd) (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Hd) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x15) Hd) (@ X1 form (@ num (shadowed_0 X1) L zero) Hd) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x3 equiv @ X1 form (@ num (shadowed_0 X1) L zero) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) q111) Hd) p11) ([q112:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x15) Hd)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x15) Y) (@ X1 form (@ X1 (shadowed_0 X1) Eq Y) Hd) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x15) Y) (@ X1 form (@ num (shadowed_0 X1) L zero) Y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x3 equiv @ X1 form (@ num (shadowed_0 X1) L zero) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) q111) Y) (congr num zero I' ([z3:tm num] @ X1 form (@ num (shadowed_0 X1) L z3) Y) (symm num I' zero q11) q10)) ([q113:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x15) Y)] per_trans X1 Eq Y x15 Hd p01 (per_symm X1 Eq x15 Y p01 q113) q112)))) ([q12:pf (not (eq num I' zero))] cut (geq I' zero) (@ X1 form (@ num (X1 arrow form) PP (pred I')) Y) (list_index_inrange_below X1 Eq L I' Y p0 (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I' Y q10)) ([q121:pf (geq I' zero)] cut (> I' zero) (@ X1 form (@ num (X1 arrow form) PP (pred I')) Y) (neq->geq->gt I' zero q12 q121) ([q122:pf (gt I' zero)] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) Y) (@ X1 form (@ num (X1 arrow form) PP (pred I')) Y) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (list_tl X1) L) (pred I') Y (list_nth_tl_i X1 L I' Y (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I' Y q10) q122)) ([q123:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) Y)] equiv_e2 (@ X1 form (@ num (X1 arrow form) PP (pred I')) Y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred I')) Y) q63 q123)))))))))))).
list_append_cons : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {Hd:tm X1} {PP:tm (list X1)} {I:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) (@ (list X1) (list X1) (list_tl X1) L)) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) I) L) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [Hd:tm X1] [PP:tm (list X1)] [I:tm X1] [p0:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p1:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd)] [p2:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) (@ (list X1) (list X1) (list_tl X1) L))] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i1:tm num] if (eq num i1 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i1) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i1) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) I) L) (list_valid_per X1 Eq L p0) ([p01:pf (@ (per X1) form (validper X1) Eq)] cut (@ X1 form (@ num (X1 arrow form) L zero) Hd) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) I) L) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L Hd p1) ([p11:pf (@ X1 form (@ num (shadowed_0 X1) L zero) Hd)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (succ x3) and forall num ([i3:tm num] if (eq num i3 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i3) y)))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i4) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i4) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) I) L) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i5) y))))) Eq PP I (@ (list X1) (list X1) (list_tl X1) L) p2) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (succ n) and forall num ([i6:tm num] if (eq num i6 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i6) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i6) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i6) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (succ n)) (forall num ([i7:tm num] if (eq num i7 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i7) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i7) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i7) y)))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n1 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n1) and forall num ([i8:tm num] if (eq num i8 n1) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i8) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i8) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i8) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) I) L) q1 ([q2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q3:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (succ n))] [q4:pf (forall num ([i9:tm num] if (eq num i9 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i9) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i9) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i9) y))))] cut (>= n zero) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n2:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n2 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n2) and forall num ([i10:tm num] if (eq num i10 n2) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i10) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i10) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i10) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) I) L) (isNat->geq_zero n (list_length_isNat X1 PP n q2)) ([q21:pf (geq n zero)] cut (> (succ n) zero) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n3 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n3) and forall num ([i11:tm num] if (eq num i11 n3) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i11) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i11) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i11) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) I) L) (trans_gt_geq (succ n) n zero (succ_gt n) q21) ([q22:pf (gt (succ n) zero)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ (succ n))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n4:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n4 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n4) and forall num ([i12:tm num] if (eq num i12 n4) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i12) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i12) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i12) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) I) L) (list_length_tl_e X1 L (succ n) (exists_i X1 ([x3:tm X1] @ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) x3) Hd p1) q3) ([q31:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ (succ n)))] def4_i (eqrel X1) (list X1) X1 (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n5:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n5 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n5) and forall num ([i13:tm num] if (eq num i13 n5) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i13) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i13) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i13) y))))) Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I L (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i14:tm num] if (eq num i14 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i14) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i14) y equiv @ X1 form (@ num (shadowed_0 X1) L i14) y)))) (succ n) (and3_i (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) (succ n)) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ (succ n))) (forall num ([x3:tm num] if (eq num x3 (succ n)) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L x3) x4)))) (list_length_cons X1 Eq Hd PP n (list_nth_eq X1 Eq L zero Hd Hd p0 (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L zero Hd p11) (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L zero Hd p11)) q2) q31 (forall_i num ([x3:tm num] if (eq num x3 (succ n)) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L x3) x4))) ([i15:tm num] if_i (eq num i15 (succ n)) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i15) y)) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i15) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i15) x3)) ([q5:pf (eq num i15 (succ n))] cut (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred i15)) y)) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i15) y)) (if_e1 (eq num (pred i15) n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred i15)) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (pred i15)) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred i15)) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) x3) y))) q4 (pred i15)) (congr num n (pred (succ n)) ([z1:tm num] eq num (pred i15) z1) (symm num (pred (succ n)) n (predsucc n)) (eq_plus i15 (succ n) (neg one) q5))) ([q51:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred i15)) y))] list_append_cons_aux1 n i15 X1 Eq I L q22 q5 q51)) ([q6:pf (not (eq num i15 (succ n)))] cut (!= num (+ i15 (neg one)) (+ (succ n) (neg one))) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i15) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i15) x3)) (not_eq->plus_not_eq i15 (succ n) (neg one) q6) ([q61:pf (not (eq num (pred i15) (pred (succ n))))] cut (not (eq num (pred i15) n)) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i15) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i15) x3)) (congr num n (pred (succ n)) ([z2:tm num] not (eq num (pred i15) z2)) (symm num (pred (succ n)) n (predsucc n)) q61) ([q62:pf (not (eq num (pred i15) n))] forall_i X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i15) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i15) x3) ([y:tm X1] cut (@ X1 form (@ num (shadowed_0 X1) PP (pred i15)) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred i15)) y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i15) y equiv @ X1 form (@ num (shadowed_0 X1) L i15) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (pred i15)) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred i15)) x3) (if_e2 (eq num (pred i15) n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y1:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y1 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred i15)) y1)) (forall X1 ([y2:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (pred i15)) y2 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred i15)) y2)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) x3) y3)) (forall X1 ([y4:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) x3) y4))) q4 (pred i15)) q62) y) ([q63:pf (@ X1 form (@ num (shadowed_0 X1) PP (pred i15)) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) (pred i15)) y)] list_append_cons_aux2 X1 Eq L Hd n PP i15 y p0 p11 q31 q22 q63)))))))))))))))).
list_valid_append' : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {PP:tm (list X1)} {I:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [PP:tm (list X1)] [I:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i1) y))))))) Eq) PP) (list_valid_per X1 Eq L p1) ([p11:pf (@ (per X1) form (validper X1) Eq)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i2:tm num] if (eq num i2 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i2) y equiv @ X1 form (@ num (shadowed_0 X1) L i2) y)))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ num (X1 arrow form) x4 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i3) y))))))) Eq) PP) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i4) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i4) y))))) Eq PP I L p2) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i6:tm num] if (eq num i6 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i6) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i6) y equiv @ X1 form (@ num (shadowed_0 X1) L i6) y)))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n1:tm num] isNat n1 and forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i7) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ num (X1 arrow form) x4 i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i7) y))))))) Eq) PP) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q13:pf (forall num ([i8:tm num] if (eq num i8 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i8) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i8) y equiv @ X1 form (@ num (shadowed_0 X1) L i8) y))))] exists_e num ([x3:tm num] isNat x3 and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i9) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i9) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n2:tm num] isNat n2 and forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange n2) i10) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) y equiv @ X1 form (@ num (X1 arrow form) x4 i10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i10) y))))))) Eq) PP) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n3:tm num] isNat n3 and forall num ([i11:tm num] if (@ num form (@ num (shadowed_0 num) inrange n3) i11) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L i11) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i11) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n4:tm num] isNat n4 and forall num ([i12:tm num] if (@ num form (@ num (shadowed_0 num) inrange n4) i12) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x11) y equiv @ X1 form (@ num (X1 arrow form) x4 i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i12) y)))))) Eq L p1)) ([n':tm num] [q2:pf (isNat n' and forall num ([i13:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i13) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (X1 arrow form) L i13) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i13) y)))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n') (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n5:tm num] isNat n5 and forall num ([i14:tm num] if (@ num form (@ num (shadowed_0 num) inrange n5) i14) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x13) y equiv @ X1 form (@ num (X1 arrow form) x4 i14) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i14) y))))))) Eq) PP) (list_valid_implies_length n' X1 Eq L q2) ([q21:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n')] cut (eq num n' (succ n)) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n6:tm num] isNat n6 and forall num ([i15:tm num] if (@ num form (@ num (shadowed_0 num) inrange n6) i15) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x14) y equiv @ X1 form (@ num (X1 arrow form) x4 i15) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i15) y))))))) Eq) PP) (list_length_uniq X1 L n' (succ n) q21 q12) ([q22:pf (eq num n' (succ n))] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n7:tm num] isNat n7 and forall num ([i16:tm num] if (@ num form (@ num (shadowed_0 num) inrange n7) i16) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x15) y equiv @ X1 form (@ num (X1 arrow form) x4 i16) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i16) y)))))) Eq PP (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i17:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i17) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ num (X1 arrow form) PP i17) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) PP i17) y)))))) p11 (exists_i num ([x3:tm num] isNat x3 and forall num ([i18:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i18) (exists X1 ([x17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (X1 arrow form) PP i18) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) PP i18) y))))) n (and_i (isNat n) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) PP x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) PP x3) x4))))) (list_length_isNat X1 PP n q11) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) PP x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) PP x3) x4)))) ([i19:tm num] cut (if (eq num i19 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i19) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i19) y equiv @ X1 form (@ num (shadowed_0 X1) L i19) y))) (if (@ num form (@ num (shadowed_0 num) inrange n) i19) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) PP i19) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) PP i19) x3)))) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) q13 i19) ([q14:pf (if (eq num i19 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i19) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i19) y equiv @ X1 form (@ num (shadowed_0 X1) L i19) y)))] cut (if (@ num form (@ num (shadowed_0 num) inrange n') i19) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y equiv @ X1 form (@ num (X1 arrow form) L i19) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i19) y)))) (if (@ num form (@ num (shadowed_0 num) inrange n) i19) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) PP i19) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) PP i19) x3)))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') x3) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) x19 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n') (forall num ([i20:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i20) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) x20 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) y equiv @ X1 form (@ num (X1 arrow form) L i20) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i20) y))))) q2) i19) ([q20:pf (if (@ num form (@ num (shadowed_0 num) inrange n') i19) (exists X1 ([x21:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) L i19) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i19) y))))] if_i (@ num form (@ num (shadowed_0 num) inrange n) i19) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) PP i19) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) PP i19) x3))) ([q3:pf (@ num form (@ num (shadowed_0 num) inrange n) i19)] cut (!= num i19 n) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) PP i19) x4))) (lt->neq i19 n (inrange_e3 n i19 q3)) ([q30:pf (not (eq num i19 n))] cut (@ num form (@ num (shadowed_0 num) inrange (succ n)) i19) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) PP i19) x4))) (inrange_expand n i19 q3) ([q31:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) i19)] cut (@ num form (@ num (shadowed_0 num) inrange n') i19) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) PP i19) x4))) (congr num n' (succ n) ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange z1) i19) q22 q31) ([q32:pf (@ num form (@ num (shadowed_0 num) inrange n') i19)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i19) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) PP i19) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n') i19) (exists X1 ([x22:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) x22 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) y equiv @ X1 form (@ num (X1 arrow form) L i19) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i19) y))) q20 q32) ([x23:tm X1] [q33:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) x23 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) y equiv @ X1 form (@ num (shadowed_0 X1) L i19) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) PP i19) x4)) x23 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) x23) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) x3 equiv @ X1 form (@ num (shadowed_0 X1) PP i19) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) x23) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) y equiv @ X1 form (@ num (shadowed_0 X1) L i19) y)) q33) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) x3 equiv @ X1 form (@ num (shadowed_0 X1) PP i19) x3) ([y:tm X1] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) y equiv @ X1 form (@ num (shadowed_0 X1) L i19) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) y equiv @ X1 form (@ num (shadowed_0 X1) PP i19) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i19) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) x23) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) y1 equiv @ X1 form (@ num (shadowed_0 X1) L i19) y1)) q33) y) ([q34:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) y equiv @ X1 form (@ num (shadowed_0 X1) L i19) y)] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) y) (@ X1 form (@ num (shadowed_0 X1) PP i19) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) y) (@ X1 form (@ num (shadowed_0 X1) PP i19) y) ([q5:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) y)] cut (@ X1 form (@ num (shadowed_0 X1) L i19) y) (@ X1 form (@ num (shadowed_0 X1) PP i19) y) (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) y) (@ X1 form (@ num (shadowed_0 X1) L i19) y) q34 q5) ([q51:pf (@ X1 form (@ num (shadowed_0 X1) L i19) y)] equiv_e2 (@ X1 form (@ num (shadowed_0 X1) PP i19) y) (@ X1 form (@ num (shadowed_0 X1) L i19) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i19) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i19) x3) (if_e2 (eq num i19 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y2:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y2 equiv @ X1 form (@ num (shadowed_0 X1) L i19) y2)) (forall X1 ([y3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i19) y3 equiv @ X1 form (@ num (shadowed_0 X1) L i19) y3)) q14 q30) y) q51))) (imp_i (@ X1 form (@ num (shadowed_0 X1) PP i19) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) y) ([q6:pf (@ X1 form (@ num (shadowed_0 X1) PP i19) y)] cut (@ X1 form (@ num (shadowed_0 X1) L i19) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) y) (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) PP i19) y) (@ X1 form (@ num (shadowed_0 X1) L i19) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i19) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i19) x3) (if_e2 (eq num i19 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y4 equiv @ X1 form (@ num (shadowed_0 X1) L i19) y4)) (forall X1 ([y5:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i19) y5 equiv @ X1 form (@ num (shadowed_0 X1) L i19) y5)) q14 q30) y) q6) ([q61:pf (@ X1 form (@ num (shadowed_0 X1) L i19) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x23) y) (@ X1 form (@ num (shadowed_0 X1) L i19) y) q34 q61)))))))))))) ([q4:pf (not (@ num form (@ num (shadowed_0 num) inrange n) i19))] cut (not (exists X1 ([x24:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) i19) x24))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) PP i19) x3))) (list_length_no_elem X1 PP n i19 q11 q4) ([q41:pf (not (exists X1 ([x25:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) i19) x25)))] cut (forall X1 ([X:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) i19) X))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) PP i19) x3))) (not_EA_not X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) i19) x3) q41) ([q42:pf (forall X1 ([x26:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) i19) x26)))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) PP i19) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) PP i19) y) ([q43:pf (@ X1 form (@ num (shadowed_0 X1) PP i19) y)] not_e (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) i19) y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) i19) x3)) q42 y) (def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) PP i19 y q43))))))))))))))))))).
list_valid_append'' : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {PP:tm (list X1)} {I:tm X1} {J:tm X1} {L':tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) J) L') -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L') = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [PP:tm (list X1)] [I:tm X1] [J:tm X1] [L':tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] [p3:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) J) L')] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i1) y))))))) Eq) L') (list_valid_per X1 Eq L p1) ([p0:pf (@ (per X1) form (validper X1) Eq)] exists_e num ([x3:tm num] isNat x3 and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i2) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i2) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ num (X1 arrow form) x4 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i3) y))))))) Eq) L') (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i4) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) y equiv @ X1 form (@ num (X1 arrow form) x4 i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i5) y)))))) Eq L p1)) ([n'':tm num] [q0:pf (isNat n'' and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n'') i6) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) L i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i6) y)))))] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i7:tm num] if (eq num i7 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i7) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y)))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i8) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x11) y equiv @ X1 form (@ num (X1 arrow form) x4 i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i8) y))))))) Eq) L') (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i9:tm num] if (eq num i9 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i9) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i9) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i9) y))))) Eq PP I L p2) ([n':tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n' and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n') and forall num ([i10:tm num] if (eq num i10 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i10) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i10) y equiv @ X1 form (@ num (shadowed_0 X1) L i10) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n') (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n')) (forall num ([i11:tm num] if (eq num i11 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i11) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i11) y equiv @ X1 form (@ num (shadowed_0 X1) L i11) y)))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i12:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i12) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x12) y equiv @ X1 form (@ num (X1 arrow form) x4 i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i12) y))))))) Eq) L') q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n')] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n'))] [q13:pf (forall num ([i13:tm num] if (eq num i13 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i13) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i13) y equiv @ X1 form (@ num (shadowed_0 X1) L i13) y))))] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L') (succ x3) and forall num ([i14:tm num] if (eq num i14 x3) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i14) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i14) y equiv @ X1 form (@ num (shadowed_0 X1) L' i14) y)))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i15:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i15) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x13) y equiv @ X1 form (@ num (X1 arrow form) x4 i15) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i15) y))))))) Eq) L') (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i16:tm num] if (eq num i16 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i16) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i16) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i16) y))))) Eq PP J L' p3) ([n:tm num] [q2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L') (succ n) and forall num ([i17:tm num] if (eq num i17 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i17) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i17) y equiv @ X1 form (@ num (shadowed_0 X1) L' i17) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L') (succ n)) (forall num ([i18:tm num] if (eq num i18 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i18) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i18) y equiv @ X1 form (@ num (shadowed_0 X1) L' i18) y)))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n1:tm num] isNat n1 and forall num ([i19:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i19) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x14) y equiv @ X1 form (@ num (X1 arrow form) x4 i19) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i19) y))))))) Eq) L') q2 ([q21:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q22:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L') (succ n))] [q23:pf (forall num ([i20:tm num] if (eq num i20 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i20) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i20) y equiv @ X1 form (@ num (shadowed_0 X1) L' i20) y))))] cut (eq num n' n) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n2:tm num] isNat n2 and forall num ([i21:tm num] if (@ num form (@ num (shadowed_0 num) inrange n2) i21) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x15) y equiv @ X1 form (@ num (X1 arrow form) x4 i21) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i21) y))))))) Eq) L') (list_length_uniq X1 PP n' n q11 q21) ([q71:pf (eq num n' n)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n'') (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n3:tm num] isNat n3 and forall num ([i22:tm num] if (@ num form (@ num (shadowed_0 num) inrange n3) i22) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x16) y equiv @ X1 form (@ num (X1 arrow form) x4 i22) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i22) y))))))) Eq) L') (list_valid_implies_length n'' X1 Eq L q0) ([q72:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) n'')] cut (eq num n'' (succ n')) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n4:tm num] isNat n4 and forall num ([i23:tm num] if (@ num form (@ num (shadowed_0 num) inrange n4) i23) (exists X1 ([x17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x17) y equiv @ X1 form (@ num (X1 arrow form) x4 i23) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i23) y))))))) Eq) L') (list_length_uniq X1 L n'' (succ n') q72 q12) ([q73:pf (eq num n'' (succ n'))] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n5:tm num] isNat n5 and forall num ([i24:tm num] if (@ num form (@ num (shadowed_0 num) inrange n5) i24) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x18) x18 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x18) y equiv @ X1 form (@ num (X1 arrow form) x4 i24) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i24) y)))))) Eq L' (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i25:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i25) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) x19 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) y equiv @ X1 form (@ num (X1 arrow form) L' i25) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L' i25) y)))))) p0 (exists_i num ([x3:tm num] isNat x3 and forall num ([i26:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i26) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) x20 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) y equiv @ X1 form (@ num (X1 arrow form) L' i26) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L' i26) y))))) (succ n) (and_i (isNat (succ n)) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (succ n)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) L' x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L' x3) x4))))) (list_length_isNat X1 L' (succ n) q22) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (succ n)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) L' x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L' x3) x4)))) ([i27:tm num] if_i (@ num form (@ num (shadowed_0 num) inrange (succ n)) i27) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L' i27) x3))) ([q3:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) i27)] cut (@ num form (@ num (shadowed_0 num) inrange (succ n')) i27) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4))) (congr num n' n ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange (succ z1)) i27) q71 q3) ([q31:pf (@ num form (@ num (shadowed_0 num) inrange (succ n')) i27)] cut (@ num form (@ num (shadowed_0 num) inrange n'') i27) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4))) (congr num n'' (succ n') ([z2:tm num] @ num form (@ num (shadowed_0 num) inrange z2) i27) q73 q31) ([q32:pf (@ num form (@ num (shadowed_0 num) inrange n'') i27)] or_e (eq num i27 n) (not (eq num i27 n)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4))) (excluded_middle (eq num i27 n)) ([q5:pf (eq num i27 n)] cut (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4))) (if_e1 (eq num i27 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L' x3) y))) q23 i27) q5) ([q51:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4)) J q51)) ([q6:pf (not (eq num i27 n))] cut (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4))) (if_e2 (eq num i27 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L' x3) y))) q23 i27) q6) ([q61:pf (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y))] cut (not (eq num i27 n')) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4))) (congr num n' n ([z3:tm num] not (eq num i27 z3)) q71 q6) ([q62:pf (not (eq num i27 n'))] cut (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L i27) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4))) (if_e2 (eq num i27 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i27) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L i27) y)) (forall_e num ([x3:tm num] if (eq num x3 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) q13 i27) q62) ([q63:pf (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L i27) y))] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L i27) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n'') i27) (exists X1 ([x21:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) L i27) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i27) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n'') x3) (exists X1 ([x22:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) x22 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) y equiv @ X1 form (@ num (X1 arrow form) L x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y)))) (and_e2 (isNat n'') (forall num ([i28:tm num] if (@ num form (@ num (shadowed_0 num) inrange n'') i28) (exists X1 ([x23:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) x23 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) y equiv @ X1 form (@ num (X1 arrow form) L i28) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L i28) y))))) q0) i27) q32) ([x24:tm X1] [q64:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) x24 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) y equiv @ X1 form (@ num (shadowed_0 X1) L i27) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x4)) x24 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) x24) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) x3 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) x24) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) y equiv @ X1 form (@ num (shadowed_0 X1) L i27) y)) q64) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) x3 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x3) ([y:tm X1] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) y equiv @ X1 form (@ num (shadowed_0 X1) L i27) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i27) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) x24) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) y1 equiv @ X1 form (@ num (shadowed_0 X1) L i27) y1)) q64) y) ([q65:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) y equiv @ X1 form (@ num (shadowed_0 X1) L i27) y)] cut (@ X1 form (@ num (shadowed_0 X1) L i27) y equiv @ X1 form (@ num (shadowed_0 X1) PP i27) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y) (equiv_symm (@ X1 form (@ num (shadowed_0 X1) PP i27) y) (@ X1 form (@ num (shadowed_0 X1) L i27) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i27) x3) q63 y)) ([q66:pf (@ X1 form (@ num (shadowed_0 X1) L i27) y equiv @ X1 form (@ num (shadowed_0 X1) PP i27) y)] cut (@ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) x3 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x3) q61 y) ([q67:pf (@ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y)] equiv_trans (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) y) (@ X1 form (@ num (shadowed_0 X1) PP i27) y) (@ X1 form (@ num (shadowed_0 X1) L' i27) y) (equiv_trans (@ X1 form (@ X1 (shadowed_0 X1) Eq x24) y) (@ X1 form (@ num (shadowed_0 X1) L i27) y) (@ X1 form (@ num (shadowed_0 X1) PP i27) y) q65 q66) q67)))))))))))))) ([q4:pf (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) i27))] cut (not (@ num form (@ num (shadowed_0 num) inrange (succ n')) i27)) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L' i27) x3))) (congr num n' n ([z4:tm num] not (@ num form (@ num (shadowed_0 num) inrange (succ z4)) i27)) q71 q4) ([q41:pf (not (@ num form (@ num (shadowed_0 num) inrange (succ n')) i27))] cut (not (@ num form (@ num (shadowed_0 num) inrange n'') i27)) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L' i27) x3))) (congr num n'' (succ n') ([z5:tm num] not (@ num form (@ num (shadowed_0 num) inrange z5) i27)) q73 q41) ([q42:pf (not (@ num form (@ num (shadowed_0 num) inrange n'') i27))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) L' i27) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) L' i27) y) ([q7:pf (@ X1 form (@ num (shadowed_0 X1) L' i27) y)] or_e (eq num i27 n) (not (eq num i27 n)) false (excluded_middle (eq num i27 n)) ([q8:pf (eq num i27 n)] cut (isNat (succ n)) false (list_length_isNat X1 L' (succ n) q22) ([q81:pf (isNat (succ n))] cut (@ (list X1) form (list_is_not_nil X1) L') false (list_append_not_nil_i X1 Eq L' (exists2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L') PP J p3)) ([q82:pf (@ (list X1) form (list_is_not_nil X1) L')] cut (gt (succ n) zero) false (list_length_not_nil X1 L' (succ n) q82 q22) ([q83:pf (gt (succ n) zero)] cut (isNat (pred (succ n))) false (isNat_pred_i (succ n) q81 q83) ([q84:pf (isNat (pred (succ n)))] cut (isNat n) false (congr num n (pred (succ n)) ([z6:tm num] isNat z6) (symm num (pred (succ n)) n (predsucc n)) q84) ([q85:pf (isNat n)] cut (@ num form (@ num (shadowed_0 num) inrange (succ n)) n) false (inrange_succ_n n q85) ([q86:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) n)] cut (@ num form (@ num (shadowed_0 num) inrange (succ n)) i27) false (congr num i27 n ([z7:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) z7) q8 q86) ([q87:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) i27)] not_e (@ num form (@ num (shadowed_0 num) inrange (succ n)) i27) q4 q87)))))))) ([q9:pf (not (eq num i27 n))] cut (not (eq num i27 n')) false (congr num n' n ([z8:tm num] not (eq num i27 z8)) q71 q9) ([q91:pf (not (eq num i27 n'))] cut (@ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y) false (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) x3 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) x3) (if_e2 (eq num i27 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y2:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y2 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y2)) (forall X1 ([y3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) y3 equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y3)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y4 equiv @ X1 form (@ num (shadowed_0 X1) L' x3) y4)) (forall X1 ([y5:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y5 equiv @ X1 form (@ num (shadowed_0 X1) L' x3) y5))) q23 i27) q9) y) ([q82:pf (@ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L' i27) y)] cut (@ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L i27) y) false (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i27) x3) (if_e2 (eq num i27 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y6:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y6 equiv @ X1 form (@ num (shadowed_0 X1) L i27) y6)) (forall X1 ([y7:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i27) y7 equiv @ X1 form (@ num (shadowed_0 X1) L i27) y7)) (forall_e num ([x3:tm num] if (eq num x3 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y8:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y8 equiv @ X1 form (@ num (shadowed_0 X1) L x3) y8)) (forall X1 ([y9:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y9 equiv @ X1 form (@ num (shadowed_0 X1) L x3) y9))) q13 i27) q91) y) ([q83:pf (@ X1 form (@ num (shadowed_0 X1) PP i27) y equiv @ X1 form (@ num (shadowed_0 X1) L i27) y)] not_e (@ X1 form (@ num (X1 arrow form) L i27) y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L i27) x3)) (if_e2 (@ num form (@ num (shadowed_0 num) inrange n'') i27) (exists X1 ([x25:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x25) x25 and forall X1 ([y10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x25) y10 equiv @ X1 form (@ num (X1 arrow form) L i27) y10))) (forall X1 ([y11:tm X1] not (@ X1 form (@ num (X1 arrow form) L i27) y11))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n'') x3) (exists X1 ([x26:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x26) x26 and forall X1 ([y12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x26) y12 equiv @ X1 form (@ num (X1 arrow form) L x3) y12))) (forall X1 ([y13:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) y13)))) (and_e2 (isNat n'') (forall num ([i29:tm num] if (@ num form (@ num (shadowed_0 num) inrange n'') i29) (exists X1 ([x27:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) x27 and forall X1 ([y14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) y14 equiv @ X1 form (@ num (X1 arrow form) L i29) y14))) (forall X1 ([y15:tm X1] not (@ X1 form (@ num (X1 arrow form) L i29) y15))))) q0) i27) q42) y) (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) PP i27) y) (@ X1 form (@ num (shadowed_0 X1) L i27) y) q83 (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) PP i27) y) (@ X1 form (@ num (shadowed_0 X1) L' i27) y) q82 q7))))))))))))))))))))))))).
list_append_hd_pp_nil : {X1:tp} {Eq:tm (eqrel X1)} {PP:tm (list X1)} {I:tm X1} {L:tm (list X1)} pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (list_is_nil X1) PP) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) I) = [X1:tp] [Eq:tm (eqrel X1)] [PP:tm (list X1)] [I:tm X1] [L:tm (list X1)] [p1:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] [p2:pf (@ (list X1) form (list_is_nil X1) PP)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) I) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP I L p1) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) I) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q13:pf (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) zero) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) I) (list_length_nil' X1 PP p2) ([q2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) zero)] cut (eq num zero n) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) I) (list_length_uniq X1 PP zero n q2 q11) ([q3:pf (eq num zero n)] cut (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) I) (if_e1 (eq num zero n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP zero) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) q13 zero) q3) ([q4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y))] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L I (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I) (@ X1 form (@ num (shadowed_0 X1) L zero) I) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ num (shadowed_0 X1) L zero) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) q4) I) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) q4))))))).
list_append_singleton' : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {Hd:tm X1} {PP:tm (list X1)} {I:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (list_tl X1) L)) -> pf (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [Hd:tm X1] [PP:tm (list X1)] [I:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd)] [p3:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] [p4:pf (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (list_tl X1) L))] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP I L p3) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q13:pf (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))))] cut (not (@ (list X1) form (list_is_nil X1) L)) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) (list_nth->not_nil X1 L zero Hd (list_hd_nth X1 L Hd p2)) ([q21:pf (not (@ (list X1) form (list_is_nil X1) L))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred (succ n))) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) (list_length_tl X1 L (succ n) q12 (list_is_not_nil_i X1 L q21)) ([q22:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred (succ n)))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) n) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) (congr num n (pred (succ n)) ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) z1) (symm num (pred (succ n)) n (predsucc n)) q22) ([q23:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) n)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) zero) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) (list_length_nil' X1 (@ (list X1) (list X1) (list_tl X1) L) p4) ([q24:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) zero)] cut (eq num zero n) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) (list_length_uniq X1 (@ (list X1) (list X1) (list_tl X1) L) zero n q24 q23) ([q25:pf (eq num zero n)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) zero) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) (congr num zero n ([z2:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) z2) q25 q11) ([q26:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) zero)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) (list_valid_append' X1 Eq L PP I p1 p3) ([q27:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP)] cut (@ (list X1) form (list_is_nil X1) PP) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) (list_length_nil_e X1 PP q26) ([q3:pf (@ (list X1) form (list_is_nil X1) PP)] cut (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) I) (@ (list X1) form (list_is_nil X1) PP and @ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) (list_append_hd_pp_nil X1 Eq PP I L p3 q3) ([q4:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) I)] and_i (@ (list X1) form (list_is_nil X1) PP) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) Hd) q3 (list_nth_eq X1 Eq L zero I Hd p1 (list_hd_nth X1 L I q4) (list_hd_nth X1 L Hd p2))))))))))))).
list_append_singleton'' : {X1:tp} {Eq:tm (per X1)} {J:tm X1} {PP:tm (list X1)} pf (@ (per X1) form (validper X1) Eq) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq J) J) -> pf (@ (list X1) form (list_is_nil X1) PP) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1))) = [X1:tp] [Eq:tm (per X1)] [J:tm X1] [PP:tm (list X1)] [p0:pf (@ (per X1) form (validper X1) Eq)] [p1:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq J) J)] [p2:pf (@ (list X1) form (list_is_nil X1) PP)] def4_i (eqrel X1) (list X1) X1 (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i1:tm num] if (eq num i1 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i1) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i1) y))))) Eq PP J (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1))) (succ x3) and forall num ([i2:tm num] if (eq num i2 x3) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i2) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i2) y)))) zero (and3_i (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) zero) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1))) (succ zero)) (forall num ([x3:tm num] if (eq num x3 zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq J) J and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq J) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] if (_eq num x8 zero) (_@2 X1 X1 form x5 x9 x6) (_@2 num X1 form x7 (pred x8) x9))) Eq) J) (list_nil X1)) x3) x4)) (forall X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) x3) x4)))) (list_length_nil' X1 PP p2) (list_length_cons X1 Eq J (list_nil X1) zero p1 (list_length_nil X1)) (forall_i num ([x3:tm num] if (eq num x3 zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq J) J and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq J) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] if (_eq num x8 zero) (_@2 X1 X1 form x5 x9 x6) (_@2 num X1 form x7 (pred x8) x9))) Eq) J) (list_nil X1)) x3) x4)) (forall X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) x3) x4))) ([i3:tm num] if_i (eq num i3 zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq J) J and forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq J) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) J) (list_nil X1)) i3) x3)) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i3) x3)) ([q1:pf (eq num i3 zero)] and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq J) J) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq J) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) J) (list_nil X1)) i3) x3)) p1 (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq J) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) J) (list_nil X1)) i3) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq J) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) J) (list_nil X1)) i3) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq J) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) J) (list_nil X1)) i3) y) ([q3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq J) y)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq J (list_nil X1) i3 y (if_i1 (eq num i3 zero) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) J) (_@2 num X1 form (list_nil X1) (pred i3) y) q1 (per_symm X1 Eq J y p0 q3)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i3) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq J) y) ([q4:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i3) y)] per_symm X1 Eq y J p0 (if_e1 (_eq num i3 zero) (_@2 X1 X1 form Eq y J) (_@2 num X1 form (list_nil X1) (pred i3) y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq J (list_nil X1) i3 y q4) q1)))))) ([q2:pf (not (eq num i3 zero))] forall_i X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i3) x3) ([y:tm X1] equiv_i (@ X1 form (@ num (shadowed_0 X1) PP i3) y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i3) y) (imp_i (@ X1 form (@ num (shadowed_0 X1) PP i3) y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i3) y) ([q5:pf (@ X1 form (@ num (shadowed_0 X1) PP i3) y)] cut (not (@ X1 form (@ num (shadowed_0 X1) PP i3) y)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i3) y) (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) PP x3) x4)) (list_nil_no_elem X1 PP p2) i3 y) ([q51:pf (not (@ X1 form (@ num (shadowed_0 X1) PP i3) y))] false_e (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i3) y) (not_e (@ X1 form (@ num (shadowed_0 X1) PP i3) y) q51 q5)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i3) y) (@ X1 form (@ num (shadowed_0 X1) PP i3) y) ([q6:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) J) (list_nil X1)) i3) y)] cut (_@2 num X1 form (list_nil X1) (pred i3) y) (@ X1 form (@ num (shadowed_0 X1) PP i3) y) (if_e2 (_eq num i3 zero) (_@2 X1 X1 form Eq y J) (_@2 num X1 form (list_nil X1) (pred i3) y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq J (list_nil X1) i3 y q6) q2) ([q61:pf (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) (pred i3)) y)] false_e (@ X1 form (@ num (shadowed_0 X1) PP i3) y) (def2_e X1 num ([x3:tm num] [x4:tm X1] false) (pred i3) y q61)))))))))).
list_append_hd : {X1:tp} {Eq:tm (eqrel X1)} {PP:tm (list X1)} {I:tm X1} {L:tm (list X1)} {Hd:tm X1} pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (list_is_not_nil X1) PP) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) PP) Hd) = [X1:tp] [Eq:tm (eqrel X1)] [PP:tm (list X1)] [I:tm X1] [L:tm (list X1)] [Hd:tm X1] [p2:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] [p3:pf (@ (list X1) form (list_is_not_nil X1) PP)] [p4:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) PP) Hd) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP I L p2) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) PP) Hd) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q13:pf (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))))] cut (gt n zero) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) PP) Hd) (list_length_not_nil X1 PP n p3 q11) ([q21:pf (gt n zero)] cut (!= num zero n) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) PP) Hd) (lt->neq zero n (gt_not_lt_eq n zero q21)) ([q22:pf (not (eq num zero n))] cut (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP zero) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) PP) Hd) (if_e2 (eq num zero n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP zero) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) q13 zero) q22) ([q3:pf (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP zero) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y))] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) PP Hd (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) PP zero) Hd) (@ X1 form (@ num (shadowed_0 X1) L zero) Hd) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP zero) x3 equiv @ X1 form (@ num (shadowed_0 X1) L zero) x3) q3 Hd) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L Hd p4))))))).
list_append_hd' : {X1:tp} {Eq:tm (eqrel X1)} {PP:tm (list X1)} {I:tm X1} {L:tm (list X1)} {Hd:tm X1} pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (list_is_not_nil X1) PP) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) PP) Hd) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd) = [X1:tp] [Eq:tm (eqrel X1)] [PP:tm (list X1)] [I:tm X1] [L:tm (list X1)] [Hd:tm X1] [p2:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] [p3:pf (@ (list X1) form (list_is_not_nil X1) PP)] [p4:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) PP) Hd)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) Hd) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP I L p2) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) Hd) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q13:pf (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))))] cut (gt n zero) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) Hd) (list_length_not_nil X1 PP n p3 q11) ([q21:pf (gt n zero)] cut (!= num zero n) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) Hd) (lt->neq zero n (gt_not_lt_eq n zero q21)) ([q22:pf (not (eq num zero n))] cut (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP zero) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4)) L) Hd) (if_e2 (eq num zero n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP zero) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) q13 zero) q22) ([q3:pf (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP zero) y equiv @ X1 form (@ num (shadowed_0 X1) L zero) y))] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) L Hd (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) PP zero) Hd) (@ X1 form (@ num (shadowed_0 X1) L zero) Hd) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP zero) x3 equiv @ X1 form (@ num (shadowed_0 X1) L zero) x3) q3 Hd) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] @ X1 form (@ num (X1 arrow form) x3 zero) x4) PP Hd p4))))))).
list_append_hd'' : {X1:tp} {Eq:tm (eqrel X1)} {PP:tm (list X1)} {I:tm X1} {L:tm (list X1)} {J:tm X1} {L':tm (list X1)} {Hd:tm X1} pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) J) L') -> pf (@ (list X1) form (list_is_not_nil X1) PP) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L') Hd) = [X1:tp] [Eq:tm (eqrel X1)] [PP:tm (list X1)] [I:tm X1] [L:tm (list X1)] [J:tm X1] [L':tm (list X1)] [Hd:tm X1] [p1:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] [p2:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) J) L')] [p3:pf (@ (list X1) form (list_is_not_nil X1) PP)] [p4:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd)] cut (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) PP) Hd) (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L') Hd) (list_append_hd X1 Eq PP I L Hd p1 p3 p4) ([q2:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) PP) Hd)] list_append_hd' X1 Eq PP J L' Hd p2 p3 q2).
list_append_tl : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {PP:tm (list X1)} {I:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (list_is_not_nil X1) (@ (list X1) (list X1) (list_tl X1) L)) -> pf (@ (list X1) form (list_is_not_nil X1) PP) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [PP:tm (list X1)] [I:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] [p3:pf (@ (list X1) form (list_is_not_nil X1) (@ (list X1) (list X1) (list_tl X1) L))] cut (@ (list X1) form (list_is_not_nil X1) L) (@ (list X1) form (lam (list X1) form ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3))) PP) (list_append_not_nil_i X1 Eq L (exists2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L) PP I p2)) ([p21:pf (@ (list X1) form (list_is_not_nil X1) L)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (@ (list X1) form (lam (list X1) form ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3))) PP) (list_valid_tl'' X1 Eq L p1 p21) ([p31:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_tl X1) L))] def1_i (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) PP (not_i (@ (list X1) form (list_is_nil X1) PP) ([q1:pf (@ (list X1) form (list_is_nil X1) PP)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) false (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP I L p2) ([n:tm num] [q2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) false q2 ([q21:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q22:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q23:pf (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) zero) false (list_length_nil' X1 PP q1) ([q31:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) zero)] cut (eq num n zero) false (list_length_uniq X1 PP n zero q21 q31) ([q4:pf (eq num n zero)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred (succ n))) false (list_length_tl X1 L (succ n) q22 p21) ([q51:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (pred (succ n)))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) n) false (congr num n (pred (succ n)) ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) z1) (symm num (pred (succ n)) n (predsucc n)) q51) ([q52:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) n)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) zero) false (congr num zero n ([z2:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) z2) (symm num n zero q4) q52) ([q53:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) zero)] not_e (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (list_tl X1) L)) (def1_e (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) (@ (list X1) (list X1) (list_tl X1) L) p3) (list_length_nil_e X1 (@ (list X1) (list X1) (list_tl X1) L) q53)))))))))))).
list_append_tl_i : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {PP:tm (list X1)} {I:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (list_is_not_nil X1) PP) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [PP:tm (list X1)] [I:tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ (list X1) form (list_is_not_nil X1) PP)] [p3:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] cut (@ (list X1) form (list_is_not_nil X1) L) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i1:tm num] if (eq num i1 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i1) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i1) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) (list_append_not_nil_i X1 Eq L (exists2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] @ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) x3) x4) L) PP I p3)) ([p11:pf (@ (list X1) form (list_is_not_nil X1) L)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_tl X1) L)) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) (list_valid_tl'' X1 Eq L p1 p11) ([p12:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_tl X1) L))] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i3) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i3) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) (list_valid_append' X1 Eq L PP I p1 p3) ([p21:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i4) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i4) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) (list_valid_tl'' X1 Eq PP p21 p2) ([p22:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_tl X1) PP))] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i5:tm num] if (eq num i5 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i6:tm num] if (eq num i6 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i6) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i6) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i6) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i7:tm num] if (eq num i7 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i7) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i7) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i7) y))))) Eq PP I L p3) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i8:tm num] if (eq num i8 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i8) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i8) y equiv @ X1 form (@ num (shadowed_0 X1) L i8) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i9:tm num] if (eq num i9 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i9) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i9) y equiv @ X1 form (@ num (shadowed_0 X1) L i9) y)))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n1 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n1) and forall num ([i10:tm num] if (eq num i10 n1) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i10) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i10) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i10) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q13:pf (forall num ([i11:tm num] if (eq num i11 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i11) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i11) y equiv @ X1 form (@ num (shadowed_0 X1) L i11) y))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) PP)) (pred n)) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n2:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n2 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n2) and forall num ([i12:tm num] if (eq num i12 n2) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i12) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i12) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i12) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) (list_length_tl X1 PP n q11 p2) ([q61:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) PP)) (pred n))] cut (isNat (pred n)) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n3 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n3) and forall num ([i13:tm num] if (eq num i13 n3) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i13) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i13) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i13) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) (list_length_isNat X1 (@ (list X1) (list X1) (list_tl X1) PP) (pred n) q61) ([q62:pf (isNat (pred n))] cut (>= (pred n) zero) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n4:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n4 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n4) and forall num ([i14:tm num] if (eq num i14 n4) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i14) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i14) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i14) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) (isNat->geq_zero (pred n) q62) ([q63:pf (geq (pred n) zero)] cut (> (succ (pred n)) zero) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n5:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n5 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n5) and forall num ([i15:tm num] if (eq num i15 n5) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i15) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i15) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i15) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) (trans_gt_geq (succ (pred n)) (pred n) zero (succ_gt (pred n)) q63) ([q64:pf (gt (succ (pred n)) zero)] cut (!= num (succ (pred n)) zero) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n6:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n6 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n6) and forall num ([i16:tm num] if (eq num i16 n6) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i16) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i16) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i16) y)))))) Eq) (@ (list X1) (list X1) (list_tl X1) PP)) I) (@ (list X1) (list X1) (list_tl X1) L)) (gt->neq (succ (pred n)) zero q64) ([q65:pf (not (eq num (succ (pred n)) zero))] def4_i (eqrel X1) (list X1) X1 (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n7:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n7 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n7) and forall num ([i17:tm num] if (eq num i17 n7) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i17) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i17) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i17) y))))) Eq (@ (list X1) (list X1) (list_tl X1) PP) I (@ (list X1) (list X1) (list_tl X1) L) (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) PP)) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (succ x3) and forall num ([i18:tm num] if (eq num i18 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i18) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) i18) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i18) y)))) (pred n) (and3_i (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) PP)) (pred n)) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) (succ (pred n))) (forall num ([x3:tm num] if (eq num x3 (pred n)) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 (succ x6)) x7 and not (eq num (succ x6) zero))) L) x3) x4)) (forall X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 (succ x6)) x7 and not (eq num (succ x6) zero))) L) x3) x4)))) q61 (congr num (succ (pred n)) n ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) z1) (succpred n) (congr num n (pred (succ n)) ([z2:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (list_tl X1) L)) z2) (symm num (pred (succ n)) n (predsucc n)) (list_length_tl X1 L (succ n) q12 p11))) (forall_i num ([x3:tm num] if (eq num x3 (pred n)) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 (succ x6)) x7 and not (eq num (succ x6) zero))) L) x3) x4)) (forall X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 (succ x6)) x7 and not (eq num (succ x6) zero))) L) x3) x4))) ([i19:tm num] if_i (eq num i19 (pred n)) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I and forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3)) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) i19) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3)) ([q2:pf (eq num i19 (pred n))] cut (== num (+ i19 one) (+ (pred n) one)) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I and forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3)) (eq_plus i19 (pred n) one q2) ([q21:pf (eq num (succ i19) (succ (pred n)))] cut (eq num (succ i19) n) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I and forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3)) (congr num n (succ (pred n)) ([z3:tm num] eq num (succ i19) z3) (symm num (succ (pred n)) n (succpred n)) q21) ([q22:pf (eq num (succ i19) n)] cut (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y)) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I and forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3)) (if_e1 (eq num (succ i19) n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (succ i19)) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) q13 (succ i19)) q22) ([q23:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y))] and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y)) q23) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq I) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L) i19) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq I) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L) i19) y) ([q4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq I) y)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L i19 y (and_i (@ X1 form (@ num (shadowed_0 X1) L (succ i19)) y) (not (eq num (succ i19) zero)) (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq I) y) (@ X1 form (@ num (shadowed_0 X1) L (succ i19)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) y1 equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y1)) q23) y) q4) (congr num i19 (pred n) ([z4:tm num] not (eq num (succ z4) zero)) q2 q65)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i19) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) y) ([q5:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i19) y)] cut (@ X1 form (@ num (X1 arrow form) L (succ i19)) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) y) (and_e1 (@ X1 form (@ num (X1 arrow form) L (succ i19)) y) (not (eq num (succ i19) zero)) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L i19 y q5)) ([q51:pf (@ X1 form (@ num (shadowed_0 X1) L (succ i19)) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq I) y) (@ X1 form (@ num (shadowed_0 X1) L (succ i19)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq I) I) (forall X1 ([y2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq I) y2 equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y2)) q23) y) q51))))))))) ([q3:pf (not (eq num i19 (pred n)))] cut (!= num (+ i19 one) (+ (pred n) one)) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) i19) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3)) (not_eq->plus_not_eq i19 (pred n) one q3) ([q31:pf (not (eq num (succ i19) (succ (pred n))))] cut (not (eq num (succ i19) n)) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) i19) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3)) (congr num n (succ (pred n)) ([z5:tm num] not (eq num (succ i19) z5)) (symm num (succ (pred n)) n (succpred n)) q31) ([q32:pf (not (eq num (succ i19) n))] cut (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (succ i19)) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y)) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) i19) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3)) (if_e2 (eq num (succ i19) n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (succ i19)) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) q13 (succ i19)) q32) ([q33:pf (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (succ i19)) y equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) y))] forall_i X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) i19) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 (succ x5)) x6 and not (eq num (succ x5) zero))) L) i19) x3) ([y:tm X1] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) i19) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L) i19) y) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) i19) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L) i19) y) ([q6:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) PP) i19) y)] and_l (@ X1 form (@ num (X1 arrow form) PP (succ i19)) y) (not (eq num (succ i19) zero)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) L) i19) y) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) PP i19 y q6) ([q2:pf (@ X1 form (@ num (X1 arrow form) PP (succ i19)) y)] [q4:pf (not (eq num (succ i19) zero))] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L i19 y (and_i (@ X1 form (@ num (shadowed_0 X1) L (succ i19)) y) (not (eq num (succ i19) zero)) (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) PP (succ i19)) y) (@ X1 form (@ num (shadowed_0 X1) L (succ i19)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (succ i19)) x3 equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) x3) q33 y) q2) q4)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i19) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) PP) i19) y) ([q7:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_tl X1) L) i19) y)] and_l (@ X1 form (@ num (X1 arrow form) L (succ i19)) y) (not (eq num (succ i19) zero)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero))) PP) i19) y) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) L i19 y q7) ([q71:pf (@ X1 form (@ num (X1 arrow form) L (succ i19)) y)] [q72:pf (not (eq num (succ i19) zero))] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 (succ x4)) x5 and not (eq num (succ x4) zero)) PP i19 y (and_i (@ X1 form (@ num (shadowed_0 X1) PP (succ i19)) y) (not (eq num (succ i19) zero)) (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) PP (succ i19)) y) (@ X1 form (@ num (shadowed_0 X1) L (succ i19)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (succ i19)) x3 equiv @ X1 form (@ num (shadowed_0 X1) L (succ i19)) x3) q33 y) q71) q72)))))))))))))))))))))))).
list_append_index_last : {X1:tp} {Eq:tm (eqrel X1)} {PP:tm (list X1)} {Y:tm X1} {L:tm (list X1)} {N:tnum} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) Y) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ N)) -> pf (@ X1 form (@ num (shadowed_0 X1) PP I) X) -> pf (not (eq num I N)) = [X1:tp] [Eq:tm (eqrel X1)] [PP:tm (list X1)] [Y:tm X1] [L:tm (list X1)] [N:tnum] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) Y) L)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ N))] [p3:pf (@ X1 form (@ num (shadowed_0 X1) PP I) X)] not_i (eq num I N) ([p4:pf (eq num I N)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) false (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP Y L p1) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) false q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q13:pf (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))))] cut (eq num (succ n) (succ N)) false (list_length_uniq X1 L (succ n) (succ N) q12 p2) ([q21:pf (eq num (succ n) (succ N))] cut (== num n N) false (plus_eq1 n one N q21) ([q22:pf (eq num n N)] cut (eq num I n) false (congr num n N ([z1:tm num] eq num I z1) q22 p4) ([p41:pf (eq num I n)] cut (not (exists X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) I) x3))) false (list_length_no_elem X1 PP n I q11 (not_inrange_n I n p41)) ([q3:pf (not (exists X1 ([x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) I) x4)))] not_e (exists X1 ([x5:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) I) x5)) q3 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) PP) I) x3) X (list_nth_i X1 PP I X p3))))))))).
list_append_member : {X1:tp} {Eq:tm (eqrel X1)} {PP:tm (list X1)} {Y:tm X1} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) Y) L) -> pf (@ X1 form (@ num (shadowed_0 X1) PP I) X) -> pf (@ X1 form (@ num (shadowed_0 X1) L I) X) = [X1:tp] [Eq:tm (eqrel X1)] [PP:tm (list X1)] [Y:tm X1] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) Y) L)] [p2:pf (@ X1 form (@ num (shadowed_0 X1) PP I) X)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) (@ X1 form (@ num (shadowed_0 X1) L I) X) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP Y L p1) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) (@ X1 form (@ num (shadowed_0 X1) L I) X) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q13:pf (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))))] cut (not (eq num I n)) (@ X1 form (@ num (shadowed_0 X1) L I) X) (list_append_index_last X1 Eq PP Y L n I X p1 q12 p2) ([q2:pf (not (eq num I n))] cut (@ X1 form (@ num (shadowed_0 X1) PP I) X equiv @ X1 form (@ num (shadowed_0 X1) L I) X) (@ X1 form (@ num (shadowed_0 X1) L I) X) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP I) x3 equiv @ X1 form (@ num (shadowed_0 X1) L I) x3) (if_e2 (eq num I n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP I) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) q13 I) q2) X) ([q3:pf (@ X1 form (@ num (shadowed_0 X1) PP I) X equiv @ X1 form (@ num (shadowed_0 X1) L I) X)] equiv_e1 (@ X1 form (@ num (shadowed_0 X1) PP I) X) (@ X1 form (@ num (shadowed_0 X1) L I) X) q3 p2)))).
list_append_e2 : {X1:tp} {Eq:tm (eqrel X1)} {PP:tm (list X1)} {I:tm X1} {L:tm (list X1)} pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))) = [X1:tp] [Eq:tm (eqrel X1)] [PP:tm (list X1)] [I:tm X1] [L:tm (list X1)] [p1:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) (exists num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3))) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP I L p1) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y))))] exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3)) n (and_e1 (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) (and_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)))) q1))).
list_append_member' : {X1:tp} {Eq:tm (eqrel X1)} {PP:tm (list X1)} {Y:tm X1} {L:tm (list X1)} {N:tnum} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) Y) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ N)) -> pf (@ X1 form (@ num (shadowed_0 X1) L I) X) -> pf (not (eq num I N)) -> pf (@ X1 form (@ num (shadowed_0 X1) PP I) X) = [X1:tp] [Eq:tm (eqrel X1)] [PP:tm (list X1)] [Y:tm X1] [L:tm (list X1)] [N:tnum] [I:tm num] [X:tm X1] [p1:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) Y) L)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ N))] [p3:pf (@ X1 form (@ num (shadowed_0 X1) L I) X)] [p4:pf (not (eq num I N))] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) (@ X1 form (@ num (shadowed_0 X1) PP I) X) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP Y L p1) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) (@ X1 form (@ num (shadowed_0 X1) PP I) X) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q13:pf (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))))] cut (== num n N) (@ X1 form (@ num (shadowed_0 X1) PP I) X) (plus_eq1 n one N (list_length_uniq X1 L (succ n) (succ N) q12 p2)) ([q2:pf (eq num n N)] cut (not (eq num I n)) (@ X1 form (@ num (shadowed_0 X1) PP I) X) (congr num n N ([z1:tm num] not (eq num I z1)) q2 p4) ([p41:pf (not (eq num I n))] cut (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP I) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y)) (@ X1 form (@ num (shadowed_0 X1) PP I) X) (if_e2 (eq num I n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP I) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y)) (forall_e num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq Y) Y and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq Y) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x3) y))) q13 I) p41) ([q3:pf (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP I) y equiv @ X1 form (@ num (shadowed_0 X1) L I) y))] equiv_e2 (@ X1 form (@ num (shadowed_0 X1) PP I) X) (@ X1 form (@ num (shadowed_0 X1) L I) X) (forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) PP I) x3 equiv @ X1 form (@ num (shadowed_0 X1) L I) x3) q3 X) p3))))).
list_append_prefix_eq_per_i : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {PP:tm (list X1)} {I:tm X1} {PP':tm (list X1)} {I':tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP') I') L) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP') = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [PP:tm (list X1)] [I:tm X1] [PP':tm (list X1)] [I':tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] [p3:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP') I') L)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP') (list_valid_per X1 Eq L p1) ([p0:pf (@ (per X1) form (validper X1) Eq)] cut (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP') (list_eq_refl X1 Eq L p1) ([p4:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP') (list_valid_append' X1 Eq L PP I p1 p2) ([p21:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP') (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP I L p2) ([n:tm num] [p5:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L i3) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP') p5 ([p51:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [p52:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [p53:pf (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y))))] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP') x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i6:tm num] if (eq num i6 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I') I' and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I') y equiv @ X1 form (@ num (shadowed_0 X1) L i6) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP' i6) y equiv @ X1 form (@ num (shadowed_0 X1) L i6) y)))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP') (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n1 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n1) and forall num ([i7:tm num] if (eq num i7 n1) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i7) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i7) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i7) y))))) Eq PP' I' L p3) ([n':tm num] [p6:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP') n' and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n') and forall num ([i8:tm num] if (eq num i8 n') (@ X1 form (@ X1 (X1 arrow form) Eq I') I' and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I') y equiv @ X1 form (@ num (shadowed_0 X1) L i8) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP' i8) y equiv @ X1 form (@ num (shadowed_0 X1) L i8) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP') n') (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n')) (forall num ([i9:tm num] if (eq num i9 n') (@ X1 form (@ X1 (X1 arrow form) Eq I') I' and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I') y equiv @ X1 form (@ num (shadowed_0 X1) L i9) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP' i9) y equiv @ X1 form (@ num (shadowed_0 X1) L i9) y)))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP') p6 ([p61:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP') n')] [p62:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n'))] [p63:pf (forall num ([i10:tm num] if (eq num i10 n') (@ X1 form (@ X1 (X1 arrow form) Eq I') I' and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I') y equiv @ X1 form (@ num (shadowed_0 X1) L i10) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP' i10) y equiv @ X1 form (@ num (shadowed_0 X1) L i10) y))))] cut (eq num (succ n) (succ n')) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP') (list_length_uniq X1 L (succ n) (succ n') p52 p62) ([p71:pf (eq num (succ n) (succ n'))] cut (== num n n') (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP') (plus_eq1 n one n' p71) ([p72:pf (eq num n n')] list_eq_i X1 Eq PP PP' (per_rel_i num X1 eq_arith Eq PP PP' ([i11:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q1:pf (@ num form (@ num (shadowed_0 num) eq_arith i11) i')] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] equiv_i (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (@ X1 form (@ num (shadowed_0 X1) PP' i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (@ X1 form (@ num (shadowed_0 X1) PP' i') x') ([q5:pf (@ X1 form (@ num (shadowed_0 X1) PP i11) x3)] cut (not (eq num i11 n)) (@ X1 form (@ num (shadowed_0 X1) PP' i') x') (list_append_index_last X1 Eq PP I L n i11 x3 p2 p52 q5) ([q51:pf (not (eq num i11 n))] cut (not (eq num i' n')) (@ X1 form (@ num (shadowed_0 X1) PP' i') x') (congr2 num num i' i11 n' n ([z1:tm num] [z2:tm num] not (eq num z1 z2)) (symm num i11 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i11 i' q1)) (symm num n n' p72) q51) ([q52:pf (not (eq num i' n'))] cut (@ X1 form (@ num (shadowed_0 X1) PP i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i11) x3) (@ X1 form (@ num (shadowed_0 X1) PP' i') x') (forall_e X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i11) x4 equiv @ X1 form (@ num (shadowed_0 X1) L i11) x4) (if_e2 (eq num i11 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i11) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i11) y equiv @ X1 form (@ num (shadowed_0 X1) L i11) y)) (forall_e num ([x4:tm num] if (eq num x4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x4) y equiv @ X1 form (@ num (shadowed_0 X1) L x4) y))) p53 i11) q51) x3) ([q53:pf (@ X1 form (@ num (shadowed_0 X1) PP i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i11) x3)] cut (@ X1 form (@ num (shadowed_0 X1) PP' i') x' equiv @ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (shadowed_0 X1) PP' i') x') (forall_e X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) PP' i') x4 equiv @ X1 form (@ num (shadowed_0 X1) L i') x4) (if_e2 (eq num i' n') (@ X1 form (@ X1 (X1 arrow form) Eq I') I' and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I') y equiv @ X1 form (@ num (shadowed_0 X1) L i') y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP' i') y equiv @ X1 form (@ num (shadowed_0 X1) L i') y)) (forall_e num ([x4:tm num] if (eq num x4 n') (@ X1 form (@ X1 (X1 arrow form) Eq I') I' and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I') y equiv @ X1 form (@ num (shadowed_0 X1) L x4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP' x4) y equiv @ X1 form (@ num (shadowed_0 X1) L x4) y))) p63 i') q52) x') ([q54:pf (@ X1 form (@ num (shadowed_0 X1) PP' i') x' equiv @ X1 form (@ num (shadowed_0 X1) L i') x')] cut (@ X1 form (@ num (shadowed_0 X1) L i11) x3) (@ X1 form (@ num (shadowed_0 X1) PP' i') x') (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (@ X1 form (@ num (shadowed_0 X1) L i11) x3) q53 q5) ([q55:pf (@ X1 form (@ num (shadowed_0 X1) L i11) x3)] cut (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (shadowed_0 X1) PP' i') x') (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L i11) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (list_eq_nth X1 Eq L L i11 i' x3 x' p4 q1 q2) q55) ([q56:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] equiv_e2 (@ X1 form (@ num (shadowed_0 X1) PP' i') x') (@ X1 form (@ num (shadowed_0 X1) L i') x') q54 q56)))))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) PP' i') x') (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) ([q6:pf (@ X1 form (@ num (shadowed_0 X1) PP' i') x')] cut (not (eq num i' n')) (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (list_append_index_last X1 Eq PP' I' L n' i' x' p3 p62 q6) ([q61:pf (not (eq num i' n'))] cut (not (eq num i11 n)) (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (congr2 num num i11 i' n n' ([z1:tm num] [z2:tm num] not (eq num z1 z2)) (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i11 i' q1) p72 q61) ([q62:pf (not (eq num i11 n))] cut (@ X1 form (@ num (shadowed_0 X1) PP i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i11) x3) (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (forall_e X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i11) x4 equiv @ X1 form (@ num (shadowed_0 X1) L i11) x4) (if_e2 (eq num i11 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i11) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i11) y equiv @ X1 form (@ num (shadowed_0 X1) L i11) y)) (forall_e num ([x4:tm num] if (eq num x4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L x4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x4) y equiv @ X1 form (@ num (shadowed_0 X1) L x4) y))) p53 i11) q62) x3) ([q63:pf (@ X1 form (@ num (shadowed_0 X1) PP i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L i11) x3)] cut (@ X1 form (@ num (shadowed_0 X1) PP' i') x' equiv @ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (forall_e X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) PP' i') x4 equiv @ X1 form (@ num (shadowed_0 X1) L i') x4) (if_e2 (eq num i' n') (@ X1 form (@ X1 (X1 arrow form) Eq I') I' and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I') y equiv @ X1 form (@ num (shadowed_0 X1) L i') y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP' i') y equiv @ X1 form (@ num (shadowed_0 X1) L i') y)) (forall_e num ([x4:tm num] if (eq num x4 n') (@ X1 form (@ X1 (X1 arrow form) Eq I') I' and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I') y equiv @ X1 form (@ num (shadowed_0 X1) L x4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP' x4) y equiv @ X1 form (@ num (shadowed_0 X1) L x4) y))) p63 i') q61) x') ([q64:pf (@ X1 form (@ num (shadowed_0 X1) PP' i') x' equiv @ X1 form (@ num (shadowed_0 X1) L i') x')] cut (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) PP' i') x') (@ X1 form (@ num (shadowed_0 X1) L i') x') q64 q6) ([q65:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] cut (@ X1 form (@ num (shadowed_0 X1) L i11) x3) (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L i11) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (list_eq_nth X1 Eq L L i11 i' x3 x' p4 q1 q2) q65) ([q66:pf (@ X1 form (@ num (shadowed_0 X1) L i11) x3)] equiv_e2 (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (@ X1 form (@ num (shadowed_0 X1) L i11) x3) q63 q66))))))))) ([i12:tm num] [x4:tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) PP i12) x4)] cut (@ X1 form (@ num (shadowed_0 X1) L i12) x4) (@ num form (@ num (shadowed_0 num) eq_arith i12) i12 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_append_member X1 Eq PP I L i12 x4 p2 q3) ([q31:pf (@ X1 form (@ num (shadowed_0 X1) L i12) x4)] and_i (@ num form (@ num (shadowed_0 num) eq_arith i12) i12) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (eqv_refl num eq_arith i12 valideqv_eq_arith) (list_nth_valid X1 Eq L i12 x4 p1 (list_nth_i X1 L i12 x4 q31)))) ([i':tm num] [x':tm X1] [q4:pf (@ X1 form (@ num (shadowed_0 X1) PP' i') x')] cut (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ num form (@ num (shadowed_0 num) eq_arith i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (list_append_member X1 Eq PP' I' L i' x' p3 q4) ([q41:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] and_i (@ num form (@ num (shadowed_0 num) eq_arith i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (eqv_refl num eq_arith i' valideqv_eq_arith) (list_nth_valid X1 Eq L i' x' p1 (list_nth_i X1 L i' x' q41))))) p21))))))))).
list_append_pp_cons : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {Hd:tm X1} {PP:tm (list X1)} {I:tm X1} {PP':tm (list X1)} {I':tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP') I') (@ (list X1) (list X1) (list_tl X1) L)) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP')) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [Hd:tm X1] [PP:tm (list X1)] [I:tm X1] [PP':tm (list X1)] [I':tm X1] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ X1 form (@ (list X1) (shadowed_0 X1) (list_hd X1) L) Hd)] [p3:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] [p4:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP') I') (@ (list X1) (list X1) (list_tl X1) L))] cut (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP')) I') L) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP')) (list_append_cons X1 Eq L Hd PP' I' p1 p2 p4) ([q1:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP')) I') L)] list_append_prefix_eq_per_i X1 Eq L PP I (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP') I' p1 p3 q1).
list_append_eq_per_i : {X1:tp} {Eq:tm (eqrel X1)} {PP:tm (list X1)} {I:tm X1} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L1) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L2) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) = [X1:tp] [Eq:tm (eqrel X1)] [PP:tm (list X1)] [I:tm X1] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L1)] [p2:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L2)] [p3:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) (list_valid_per X1 Eq PP p3) ([p0:pf (@ (per X1) form (validper X1) Eq)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) (list_valid_append X1 Eq PP I L1 p3 p1) ([p31:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) (list_valid_append X1 Eq PP I L2 p3 p2) ([p32:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L1) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i1) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i1) y)))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y))))) Eq PP I L1 p1) ([n:tm num] [q5:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L1) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i3) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i3) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) (succ n)) (forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i4) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i4) y)))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) q5 ([q51:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n)] [q52:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) (succ n))] [q53:pf (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i5) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i5) y))))] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L2) (succ x3) and forall num ([i6:tm num] if (eq num i6 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i6) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i6) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i6) y)))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n1 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n1) and forall num ([i7:tm num] if (eq num i7 n1) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i7) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i7) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i7) y))))) Eq PP I L2 p2) ([n':tm num] [q6:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n' and @ num form (@ (list X1) (num arrow form) (list_length X1) L2) (succ n') and forall num ([i8:tm num] if (eq num i8 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i8) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i8) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i8) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n') (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) (succ n')) (forall num ([i9:tm num] if (eq num i9 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i9) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i9) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i9) y)))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) q6 ([q61:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n')] [q62:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) (succ n'))] [q63:pf (forall num ([i10:tm num] if (eq num i10 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i10) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i10) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i10) y))))] cut (eq num n' n) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) (list_length_uniq X1 PP n' n q61 q51) ([q7:pf (eq num n' n)] list_eq_i X1 Eq L1 L2 (per_rel_i num X1 eq_arith Eq L1 L2 ([i11:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q1:pf (@ num form (@ num (shadowed_0 num) eq_arith i11) i')] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] or_e (eq num i11 n) (not (eq num i11 n)) (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (excluded_middle (eq num i11 n)) ([q8:pf (eq num i11 n)] cut (eq num i' n') (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (congr2 num num i' i11 n' n ([z1:tm num] [z2:tm num] eq num z1 z2) (symm num i11 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i11 i' q1)) q7 q8) ([q81:pf (eq num i' n')] cut (@ X1 form (@ X1 (X1 arrow form) Eq I) x3 equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) x3) (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (forall_e X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) x4 equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) x4) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eq I) I) (forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) y)) (if_e1 (eq num i11 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i11) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) y)) (forall_e num ([x4:tm num] if (eq num x4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L1 x4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x4) y equiv @ X1 form (@ num (shadowed_0 X1) L1 x4) y))) q53 i11) q8)) x3) ([q82:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) x3)] cut (@ X1 form (@ X1 (X1 arrow form) Eq I) x' equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (forall_e X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x4) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eq I) I) (forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i') y)) (if_e1 (eq num i' n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i') y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i') y equiv @ X1 form (@ num (shadowed_0 X1) L2 i') y)) (forall_e num ([x4:tm num] if (eq num x4 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L2 x4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x4) y equiv @ X1 form (@ num (shadowed_0 X1) L2 x4) y))) q63 i') q81)) x') ([q83:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq I) x' equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x')] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ X1 (shadowed_0 X1) Eq I) x') (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (validper_trans_equiv X1 Eq x3 x' I p0 q2) ([q84:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq I) x3 equiv @ X1 form (@ X1 (shadowed_0 X1) Eq I) x')] equiv_trans (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) x') (@ X1 form (@ num (shadowed_0 X1) L2 i') x') (equiv_trans (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) x3) (@ X1 form (@ X1 (shadowed_0 X1) Eq I) x') (equiv_symm (@ X1 form (@ X1 (shadowed_0 X1) Eq I) x3) (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3) q82) q84) q83))))) ([q9:pf (not (eq num i11 n))] cut (not (eq num i' n')) (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (congr2 num num i' i11 n' n ([z1:tm num] [z2:tm num] not (eq num z1 z2)) (symm num i11 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i11 i' q1)) q7 q9) ([q91:pf (not (eq num i' n'))] cut (@ X1 form (@ num (shadowed_0 X1) PP i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) x3) (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (forall_e X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i11) x4 equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) x4) (if_e2 (eq num i11 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i11) y equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) y)) (forall_e num ([x4:tm num] if (eq num x4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L1 x4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x4) y equiv @ X1 form (@ num (shadowed_0 X1) L1 x4) y))) q53 i11) q9) x3) ([q92:pf (@ X1 form (@ num (shadowed_0 X1) PP i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L1 i11) x3)] cut (@ X1 form (@ num (shadowed_0 X1) PP i') x' equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (forall_e X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i') x4 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x4) (if_e2 (eq num i' n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L2 i') y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i') y equiv @ X1 form (@ num (shadowed_0 X1) L2 i') y)) (forall_e num ([x4:tm num] if (eq num x4 n') (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L2 x4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x4) y equiv @ X1 form (@ num (shadowed_0 X1) L2 x4) y))) q63 i') q91) x') ([q93:pf (@ X1 form (@ num (shadowed_0 X1) PP i') x' equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x')] cut (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP) (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (list_eq_refl X1 Eq PP p3) ([q94:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) PP)] cut (@ X1 form (@ num (shadowed_0 X1) PP i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) PP i') x') (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 i') x') (list_eq_nth X1 Eq PP PP i11 i' x3 x' q94 q1 q2) ([q95:pf (@ X1 form (@ num (shadowed_0 X1) PP i11) x3 equiv @ X1 form (@ num (shadowed_0 X1) PP i') x')] equiv_trans (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3) (@ X1 form (@ num (shadowed_0 X1) PP i') x') (@ X1 form (@ num (shadowed_0 X1) L2 i') x') (equiv_trans (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3) (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (@ X1 form (@ num (shadowed_0 X1) PP i') x') (equiv_symm (@ X1 form (@ num (shadowed_0 X1) PP i11) x3) (@ X1 form (@ num (shadowed_0 X1) L1 i11) x3) q92) q95) q93))))))) ([i12:tm num] [x4:tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) L1 i12) x4)] and_i (@ num form (@ num (shadowed_0 num) eq_arith i12) i12) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (eqv_refl num eq_arith i12 valideqv_eq_arith) (list_nth_valid X1 Eq L1 i12 x4 p31 (list_nth_i X1 L1 i12 x4 q3))) ([i':tm num] [x':tm X1] [q4:pf (@ X1 form (@ num (shadowed_0 X1) L2 i') x')] and_i (@ num form (@ num (shadowed_0 num) eq_arith i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (eqv_refl num eq_arith i' valideqv_eq_arith) (list_nth_valid X1 Eq L2 i' x' p32 (list_nth_i X1 L2 i' x' q4)))) p31)))))))).
list_append_change_last : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {Hd:tm X1} {PP:tm (list X1)} {I:tm X1} {L:tm (list X1)} {J:tm X1} {L':tm (list X1)} pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) I) L) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq J) J) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) J) L') -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [Hd:tm X1] [PP:tm (list X1)] [I:tm X1] [L:tm (list X1)] [J:tm X1] [L':tm (list X1)] [p3:pf (@ X1 form (@ X1 (X1 arrow form) Eq Hd) Hd)] [p4:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) PP)] [p1:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) I) L)] [p5:pf (@ X1 form (@ X1 (X1 arrow form) Eq J) J)] [p2:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) J) L')] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3) and forall num ([i1:tm num] if (eq num i1 x3) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i1) y equiv @ X1 form (@ num (shadowed_0 X1) L i1) y)))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i2:tm num] if (eq num i2 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i2) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i2) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n) and forall num ([i3:tm num] if (eq num i3 n) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i3) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i3) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i3) y))))) Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) I L p1) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) n and @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n) and forall num ([i4:tm num] if (eq num i4 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i4) y equiv @ X1 form (@ num (shadowed_0 X1) L i4) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n)) (forall num ([i5:tm num] if (eq num i5 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i5) y equiv @ X1 form (@ num (shadowed_0 X1) L i5) y)))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n1 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n1) and forall num ([i6:tm num] if (eq num i6 n1) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i6) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i6) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i6) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) n)] [q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] [q13:pf (forall num ([i7:tm num] if (eq num i7 n) (@ X1 form (@ X1 (X1 arrow form) Eq I) I and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq I) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i7) y equiv @ X1 form (@ num (shadowed_0 X1) L i7) y))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) (pred n)) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n2:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n2 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n2) and forall num ([i8:tm num] if (eq num i8 n2) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i8) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i8) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i8) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (list_length_cons_e X1 Eq Hd PP n p3 p4 q11) ([q14:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) (pred n))] cut (gt n zero) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n3 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n3) and forall num ([i9:tm num] if (eq num i9 n3) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i9) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i9) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i9) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (list_length_not_nil X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) n (list_is_not_nil_i X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) (list_cons->not_nil X1 Eq Hd PP p3)) q11) ([q15:pf (gt n zero)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) PP) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) L') (succ x3) and forall num ([i10:tm num] if (eq num i10 x3) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i10) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i10) y equiv @ X1 form (@ num (shadowed_0 X1) L' i10) y)))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n4:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n4 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n4) and forall num ([i11:tm num] if (eq num i11 n4) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i11) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i11) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i11) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (def4_e (list X1) X1 (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n5:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n5 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n5) and forall num ([i12:tm num] if (eq num i12 n5) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i12) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i12) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i12) y))))) Eq PP J L' p2) ([n':tm num] [q2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n' and @ num form (@ (list X1) (num arrow form) (list_length X1) L') (succ n') and forall num ([i13:tm num] if (eq num i13 n') (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i13) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i13) y equiv @ X1 form (@ num (shadowed_0 X1) L' i13) y))))] and3_l (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n') (@ num form (@ (list X1) (num arrow form) (list_length X1) L') (succ n')) (forall num ([i14:tm num] if (eq num i14 n') (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i14) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i14) y equiv @ X1 form (@ num (shadowed_0 X1) L' i14) y)))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n6:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n6 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n6) and forall num ([i15:tm num] if (eq num i15 n6) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i15) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i15) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i15) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) q2 ([q21:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) PP) n')] [q22:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L') (succ n'))] [q23:pf (forall num ([i16:tm num] if (eq num i16 n') (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) L' i16) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) PP i16) y equiv @ X1 form (@ num (shadowed_0 X1) L' i16) y))))] cut (eq num (pred n) n') (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n7:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n7 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n7) and forall num ([i17:tm num] if (eq num i17 n7) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i17) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i17) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i17) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (list_length_uniq X1 PP (pred n) n' q14 q21) ([q24:pf (eq num (pred n) n')] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (succ (succ n'))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n8:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n8 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n8) and forall num ([i18:tm num] if (eq num i18 n8) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i18) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i18) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i18) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (list_length_cons X1 Eq Hd L' (succ n') p3 q22) ([q25:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (succ (succ n')))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (succ (succ (pred n)))) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n9:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n9 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n9) and forall num ([i19:tm num] if (eq num i19 n9) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i19) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i19) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i19) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (congr num (pred n) n' ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (succ (succ z1))) q24 q25) ([q26:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (succ (succ (pred n))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (succ n)) (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (lam4 (eqrel X1) (list X1) X1 (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n10:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n10 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n10) and forall num ([i20:tm num] if (eq num i20 n10) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i20) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i20) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i20) y)))))) Eq) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) J) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (congr num n (succ (pred n)) ([z2:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (succ z2)) (symm num (succ (pred n)) n (succpred n)) q26) ([q27:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (succ n))] def4_i (eqrel X1) (list X1) X1 (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] [x5:tm X1] [x6:tm (list X1)] exists num ([n11:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n11 and @ num form (@ (list X1) (num arrow form) (list_length X1) x6) (succ n11) and forall num ([i21:tm num] if (eq num i21 n11) (@ X1 form (@ X1 (X1 arrow form) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x5) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i21) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) x4 i21) y equiv @ X1 form (@ num (shadowed_0 X1) x6 i21) y))))) Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) J (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) x3 and @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (succ x3) and forall num ([i22:tm num] if (eq num i22 x3) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') i22) y)) (forall X1 ([y:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i22) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') i22) y)))) n (and3_i (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP)) n) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L')) (succ n)) (forall num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] if (_eq num x8 zero) (_@2 X1 X1 form x5 x9 x6) (_@2 num X1 form x7 (pred x8) x9))) Eq) Hd) L') x3) x4)) (forall X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') x3) x4)))) q11 q27 (forall_i num ([x3:tm num] if (eq num x3 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] if (_eq num x8 zero) (_@2 X1 X1 form x5 x9 x6) (_@2 num X1 form x7 (pred x8) x9))) Eq) Hd) L') x3) x4)) (forall X1 ([x4:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') x3) x4))) ([i23:tm num] if_i (eq num i23 n) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) Hd) L') i23) x3)) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i23) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') i23) x3)) ([q3:pf (eq num i23 n)] cut (== num (+ i23 (neg one)) (+ n (neg one))) (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) Hd) L') i23) x3)) (eq_plus i23 n (neg one) q3) ([q31:pf (eq num (pred i23) (pred n))] cut (eq num (pred i23) n') (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) Hd) L') i23) x3)) (congr num n' (pred n) ([z3:tm num] eq num (pred i23) z3) (symm num (pred n) n' q24) q31) ([q32:pf (eq num (pred i23) n')] and_i (@ X1 form (@ X1 (X1 arrow form) Eq J) J) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) Hd) L') i23) x3)) p5 (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] if (_eq num x7 zero) (_@2 X1 X1 form x4 x8 x5) (_@2 num X1 form x6 (pred x7) x8))) Eq) Hd) L') i23) x3) ([y:tm X1] cut (forall X1 ([y1:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y1 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y1)) (@ X1 form (@ X1 (X1 arrow form) Eq J) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L') i23) y) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Eq J) J) (forall X1 ([y2:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y2 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y2)) (if_e1 (eq num (pred i23) n') (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y3 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y3)) (forall X1 ([y4:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (pred i23)) y4 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y4)) (forall_e num ([x3:tm num] if (eq num x3 n') (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y5:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y5 equiv @ X1 form (@ num (shadowed_0 X1) L' x3) y5)) (forall X1 ([y6:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y6 equiv @ X1 form (@ num (shadowed_0 X1) L' x3) y6))) q23 (pred i23)) q32)) ([q51:pf (forall X1 ([y7:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y7 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y7))] equiv_i (@ X1 form (@ X1 (X1 arrow form) Eq J) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L') i23) y) (imp_i (@ X1 form (@ X1 (X1 arrow form) Eq J) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ X1 (list X1 arrow num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list X1 arrow num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list X1) num X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7))) Eq) Hd) L') i23) y) ([q5:pf (@ X1 form (@ X1 (X1 arrow form) Eq J) y)] def5_i (eqrel X1) X1 (list X1) num X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L' i23 y (if_i2 (eq num i23 zero) (@ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y) (_@2 X1 X1 form Eq y Hd) (congr num i23 n ([z4:tm num] not (eq num z4 zero)) q3 (gt->neq n zero q15)) (equiv_e1 (@ X1 form (@ X1 (X1 arrow form) Eq J) y) (@ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) x3 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) x3) q51 y) q5)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') i23) y) (@ X1 form (@ X1 (X1 arrow form) Eq J) y) ([q6:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') i23) y)] cut (_@2 num X1 form L' (pred i23) y) (@ X1 form (@ X1 (X1 arrow form) Eq J) y) (if_e2 (_eq num i23 zero) (_@2 X1 X1 form Eq y Hd) (_@2 num X1 form L' (pred i23) y) (def5_e X1 num (list X1) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] if (_eq num x6 zero) (_@2 X1 X1 form x3 x7 x4) (_@2 num X1 form x5 (pred x6) x7)) Eq Hd L' i23 y q6) (congr num i23 n ([z5:tm num] not (eq num z5 zero)) q3 (gt->neq n zero q15))) ([q61:pf (@ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y)] equiv_e2 (@ X1 form (@ X1 (X1 arrow form) Eq J) y) (@ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) x3 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) x3) q51 y) q61))))))))) ([q4:pf (not (eq num i23 n))] cut (!= num (+ i23 (neg one)) (+ n (neg one))) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i23) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') i23) x3)) (not_eq->plus_not_eq i23 n (neg one) q4) ([q41:pf (not (eq num (pred i23) (pred n)))] cut (not (eq num (pred i23) n')) (forall X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i23) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') i23) x3)) (congr num n' (pred n) ([z6:tm num] not (eq num (pred i23) z6)) (symm num (pred n) n' q24) q41) ([q42:pf (not (eq num (pred i23) n'))] forall_i X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i23) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') i23) x3) ([y:tm X1] cut (forall X1 ([y8:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (pred i23)) y8 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y8)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i23) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') i23) y) (if_e2 (eq num (pred i23) n') (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y9:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y9 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y9)) (forall X1 ([y10:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (pred i23)) y10 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y10)) (forall_e num ([x3:tm num] if (eq num x3 n') (@ X1 form (@ X1 (X1 arrow form) Eq J) J and forall X1 ([y11:tm X1] @ X1 form (@ X1 (X1 arrow form) Eq J) y11 equiv @ X1 form (@ num (shadowed_0 X1) L' x3) y11)) (forall X1 ([y12:tm X1] @ X1 form (@ num (shadowed_0 X1) PP x3) y12 equiv @ X1 form (@ num (shadowed_0 X1) L' x3) y12))) q23 (pred i23)) q42) ([q43:pf (forall X1 ([y13:tm X1] @ X1 form (@ num (shadowed_0 X1) PP (pred i23)) y13 equiv @ X1 form (@ num (shadowed_0 X1) L' (pred i23)) y13))] forall_e X1 ([x3:tm X1] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) PP) i23) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) Hd) L') i23) x3) (list_cons_equiv X1 PP i23 L' Eq Hd q43) y))))))))))))))))))).
list_droplast_append_eq : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {PP:tm (list X1)} {I:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) (@ (list X1) (list X1) (list_droplast X1) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [PP:tm (list X1)] [I:tm X1] [p0:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p1:pf (@ (list X1) form (@ X1 (list X1 arrow form) (@ (list X1) (X1 arrow list X1 arrow form) (@ (eqrel X1) (list X1 arrow X1 arrow list X1 arrow form) (list_append X1) Eq) PP) I) L)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) L)) (list_valid_per X1 Eq L p0) ([p10:pf (@ (per X1) form (validper X1) Eq)] cut (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) L)) (list_eq_refl X1 Eq L p0) ([p2:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ x3)) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) PP) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) L)) (list_append_e2 X1 Eq PP I L p1) ([n:tm num] [p22:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ n))] list_eq_i X1 Eq PP (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) L) (per_rel_i num X1 eq_arith Eq PP (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x3) (succ x4)))) L) ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q1:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] equiv_i (@ X1 form (@ num (shadowed_0 X1) PP i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) L) i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) PP i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) L) i') x') ([q5:pf (@ X1 form (@ num (shadowed_0 X1) PP i1) x3)] cut (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) L) i') x') (list_append_member X1 Eq PP I L i1 x3 p1 q5) ([q51:pf (@ X1 form (@ num (shadowed_0 X1) L i1) x3)] cut (not (eq num i1 n)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5)))) L) i') x') (list_append_index_last X1 Eq PP I L n i1 x3 p1 p22 q5) ([q73:pf (not (eq num i1 n))] def3_i (list X1) num X1 ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5))) L i' x' (and_i (@ X1 form (@ num (shadowed_0 X1) L i') x') (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i'))) (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (list_eq_nth X1 Eq L L i1 i' x3 x' p2 q1 q2) q51) (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i')) ([q7:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i'))] cut (== num i' n) false (plus_eq1 i' one n (list_length_uniq X1 L (succ i') (succ n) q7 p22)) ([q71:pf (eq num i' n)] cut (eq num i1 n) false (congr num i1 i' ([z1:tm num] eq num z1 n) (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1) q71) ([q72:pf (eq num i1 n)] not_e (eq num i1 n) q73 q72))))))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i') x') (@ X1 form (@ num (shadowed_0 X1) PP i1) x3) ([q6:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i') x')] and_l (@ X1 form (@ num (X1 arrow form) L i') x') (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i'))) (@ X1 form (@ num (shadowed_0 X1) PP i1) x3) (def3_e X1 num (list X1) ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5))) L i' x' q6) ([q61:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] [q62:pf (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i')))] cut (not (eq num (succ n) (succ i'))) (@ X1 form (@ num (shadowed_0 X1) PP i1) x3) (list_length_uniq' X1 L (succ n) (succ i') p22 q62) ([q63:pf (not (eq num (succ n) (succ i')))] cut (!= num (+ (succ n) (neg one)) (+ (succ i') (neg one))) (@ X1 form (@ num (shadowed_0 X1) PP i1) x3) (not_eq->plus_not_eq (succ n) (succ i') (neg one) q63) ([q64:pf (not (eq num (pred (succ n)) (pred (succ i'))))] cut (not (eq num n i')) (@ X1 form (@ num (shadowed_0 X1) PP i1) x3) (congr2 num num n (pred (succ n)) i' (pred (succ i')) ([z1:tm num] [z2:tm num] not (eq num z1 z2)) (symm num (pred (succ n)) n (predsucc n)) (symm num (pred (succ i')) i' (predsucc i')) q64) ([q65:pf (not (eq num n i'))] cut (not (== num i1 n)) (@ X1 form (@ num (shadowed_0 X1) PP i1) x3) (neq_symm num n i1 (congr num i1 i' ([z2:tm num] not (eq num n z2)) (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1) q65)) ([q66:pf (not (eq num i1 n))] cut (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) PP i1) x3) (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (list_eq_nth X1 Eq L L i1 i' x3 x' p2 q1 q2) q61) ([q68:pf (@ X1 form (@ num (shadowed_0 X1) L i1) x3)] list_append_member' X1 Eq PP I L n i1 x3 p1 p22 q68 q66))))))))) ([i2:tm num] [x4:tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) PP i2) x4)] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i2) x4) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_nth_i X1 L i2 x4 (list_append_member X1 Eq PP I L i2 x4 p1 q3)) ([q31:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i2) x4)] and_i (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (eqv_refl num eq_arith i2 valideqv_eq_arith) (list_nth_valid X1 Eq L i2 x4 p0 q31))) ([i':tm num] [x':tm X1] [q4:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i') x')] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i') x') (@ num form (@ num (shadowed_0 num) eq_arith i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (list_drop_invariant X1 L i' x' (list_nth_i X1 (@ (list X1) (list X1) (list_droplast X1) L) i' x' q4)) ([q41:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i') x')] and_i (@ num form (@ num (shadowed_0 num) eq_arith i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (eqv_refl num eq_arith i' valideqv_eq_arith) (list_nth_valid X1 Eq L i' x' p0 q41)))) (list_valid_append' X1 Eq L PP I p0 p1)))).
list_cat_i1 : {X1:tp} {L1:tm (list X1)} {N:tm num} {I:tnum} {X:tm X1} {L2:tm (list X1)} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) -> pf (lt I N) -> pf (@ X1 form (@ num (shadowed_0 X1) L1 I) X) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) I) X) = [X1:tp] [L1:tm (list X1)] [N:tm num] [I:tnum] [X:tm X1] [L2:tm (list X1)] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N)] [p2:pf (lt I N)] [p3:pf (@ X1 form (@ num (shadowed_0 X1) L1 I) X)] def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N1 and if (lt x5 N1) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N1)) x6))) L1 L2 I X (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt I x3) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I x3)) X)) N (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) (if (lt I N) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I N)) X)) p1 (if_i1 (lt I N) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I N)) X) p2 p3))).
list_cat_i2 : {X1:tp} {L1:tm (list X1)} {N:tm num} {I:tnum} {L2:tm (num arrow X1 arrow form)} {X:tm X1} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) -> pf (geq I N) -> pf (@ X1 form (@ num (X1 arrow form) L2 (minus I N)) X) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) I) X) = [X1:tp] [L1:tm (list X1)] [N:tm num] [I:tnum] [L2:tm (num arrow X1 arrow form)] [X:tm X1] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N)] [p2:pf (geq I N)] [p3:pf (@ X1 form (@ num (X1 arrow form) L2 (minus I N)) X)] def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N1 and if (lt x5 N1) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N1)) x6))) L1 L2 I X (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt I x3) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I x3)) X)) N (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) (if (not (geq I N)) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I N)) X)) p1 (if_i2 (not (geq I N)) (@ X1 form (@ num (X1 arrow form) L2 (minus I N)) X) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (not_not_i (geq I N) p2) p3))).
list_cat_e : {X1:tp} {L1:tm (list X1)} {L2:tm (list X1)} {I:tm num} {X:tm X1} {A:tform} pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) I) X) -> ({n:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) -> pf (if (lt I n) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I n)) X)) -> pf A) -> pf A = [X1:tp] [L1:tm (list X1)] [L2:tm (list X1)] [I:tm num] [X:tm X1] [A:tform] [p1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) I) X)] [p2:{n:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) -> pf (if (lt I n) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I n)) X)) -> pf A] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt I x3) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I x3)) X)) A (def4_e X1 num (list X1) (list X1) ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 I X p1) ([n:tm num] [p3:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n and if (lt I n) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I n)) X))] and_l (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt I n) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I n)) X)) A p3 ([p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n)] [p5:pf (if (lt I n) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I n)) X))] p2 n p4 p5)).
list_cat_e1 : {X1:tp} {L1:tm (list X1)} {L2:tm (list X1)} {I:tm num} {X:tm X1} {N:tm num} pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) I) X) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) -> pf (lt I N) -> pf (@ X1 form (@ num (shadowed_0 X1) L1 I) X) = [X1:tp] [L1:tm (list X1)] [L2:tm (list X1)] [I:tm num] [X:tm X1] [N:tm num] [p3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) I) X)] [p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N)] [p5:pf (lt I N)] list_cat_e X1 L1 L2 I X (@ X1 form (@ num (shadowed_0 X1) L1 I) X) p3 ([n':tm num] [p6:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n')] [p7:pf (if (lt I n') (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I n')) X))] cut (if (lt I N) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I N)) X)) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (congr num N n' ([z1:tm num] if (lt I z1) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I z1)) X)) (list_length_uniq X1 L1 N n' p4 p6) p7) ([p8:pf (if (lt I N) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I N)) X))] if_e1 (lt I N) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I N)) X) p8 p5)).
list_cat_e2 : {X1:tp} {L1:tm (list X1)} {L2:tm (list X1)} {I:tm num} {X:tm X1} {N:tm num} pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) I) X) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) -> pf (geq I N) -> pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus I N)) X) = [X1:tp] [L1:tm (list X1)] [L2:tm (list X1)] [I:tm num] [X:tm X1] [N:tm num] [p3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) I) X)] [p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N)] [p5:pf (geq I N)] list_cat_e X1 L1 L2 I X (@ X1 form (@ num (shadowed_0 X1) L2 (minus I N)) X) p3 ([n':tm num] [p6:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n')] [p7:pf (if (lt I n') (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I n')) X))] cut (if (lt I N) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I N)) X)) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I N)) X) (congr num N n' ([z1:tm num] if (lt I z1) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I z1)) X)) (list_length_uniq X1 L1 N n' p4 p6) p7) ([p8:pf (if (lt I N) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I N)) X))] if_e2 (lt I N) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus I N)) X) p8 (not_not_i (geq I N) p5))).
list_length_cat : {X1:tp} {L1:tm (list X1)} {N1:tm num} {L2:tm (list X1)} {N2:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N1) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) N2) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (plus N1 N2)) = [X1:tp] [L1:tm (list X1)] [N1:tm num] [L2:tm (list X1)] [N2:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N1)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) N2)] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (plus N1 N2) (and_i (isNat (+ N1 N2)) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (plus N1 N2)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) x3)) (nat_sum N1 N2 (and_e1 (isNat N1) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N1) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L1 N1 p1)) (and_e1 (isNat N2) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N2) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L2 N2 p2))) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (plus N1 N2)) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) x3) ([i1:tm num] equiv_i (@ num form (@ num (shadowed_0 num) inrange (plus N1 N2)) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1) (imp_i (@ num form (@ num (shadowed_0 num) inrange (plus N1 N2)) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1) ([p3:pf (@ num form (@ num (shadowed_0 num) inrange (plus N1 N2)) i1)] or_e (lt i1 N1) (not (lt i1 N1)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1) (excluded_middle (lt i1 N1)) ([p4:pf (lt i1 N1)] cut (@ num form (@ num (shadowed_0 num) inrange N1) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1) (inrange_i i1 N1 (inrange_e1 (plus N1 N2) i1 p3) (inrange_e2 (plus N1 N2) i1 p3) p4) ([p41:pf (@ num form (@ num (shadowed_0 num) inrange N1) i1)] cut (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1) (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N1) i1) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i1) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N1) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) x3) (and_e2 (isNat N1) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N1) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L1 N1 p1)) i1) p41) ([p42:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i1)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L1 i1) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L1 i1 p42) ([y:tm X1] [p43:pf (@ X1 form (@ num (shadowed_0 X1) L1 i1) y)] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y1:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y1)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3) y (def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 i1 y (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i1 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 x3)) y)) N1 (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N1) (if (lt i1 N1) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 N1)) y)) p1 (if_i1 (lt i1 N1) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 N1)) y) p4 p43))))))))) ([p5:pf (not (lt i1 N1))] cut (@ num form (@ num (shadowed_0 num) inrange N2) (minus i1 N1)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1) (inrange_shrink' N1 i1 N2 (and_e1 (isNat N1) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N1) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L1 N1 p1)) p5 p3) ([p55:pf (@ num form (@ num (shadowed_0 num) inrange N2) (minus i1 N1))] cut (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) (minus i1 N1)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1) (equiv_e1 (@ num form (@ num (shadowed_0 num) inrange N2) (minus i1 N1)) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) (minus i1 N1)) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N2) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) x3) (and_e2 (isNat N2) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N2) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L2 N2 p2)) (minus i1 N1)) p55) ([p56:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) (minus i1 N1))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L2 (minus i1 N1)) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) L2 (minus i1 N1) p56) ([y:tm X1] [p57:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 N1)) y)] def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y2:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y2)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3) y (def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 i1 y (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i1 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 x3)) y)) N1 (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N1) (if (lt i1 N1) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 N1)) y)) p1 (if_i2 (lt i1 N1) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 N1)) y) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) p5 p57))))))))))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1) (@ num form (@ num (shadowed_0 num) inrange (+ N1 N2)) i1) ([p6:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i1)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3) (@ num form (@ num (shadowed_0 num) inrange (+ N1 N2)) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1 p6) ([y:tm X1] [p61:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) y)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i1 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 x3)) y)) (@ num form (@ num (shadowed_0 num) inrange (+ N1 N2)) i1) (def4_e X1 num (list X1) (list X1) ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 i1 y p61) ([n:tm num] [p62:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n and if (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n)) y))] cut (eq num n N1) (@ num form (@ num (shadowed_0 num) inrange (+ N1 N2)) i1) (list_length_uniq X1 L1 n N1 (and_e1 (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n)) y)) p62) p1) ([p63:pf (eq num n N1)] or_e (lt i1 N1) (not (lt i1 N1)) (@ num form (@ num (shadowed_0 num) inrange (+ N1 N2)) i1) (excluded_middle (lt i1 N1)) ([p7:pf (lt i1 N1)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ num form (@ num (shadowed_0 num) inrange (+ N1 N2)) i1) (if_e1 (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n)) y) (and_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n)) y)) p62) (congr num n N1 ([z1:tm num] lt i1 z1) p63 p7)) ([p71:pf (@ X1 form (@ num (shadowed_0 X1) L1 i1) y)] cut (@ num form (@ num (shadowed_0 num) inrange N1) i1) (@ num form (@ num (shadowed_0 num) inrange (+ N1 N2)) i1) (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N1) i1) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) i1) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N1) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) x3) (and_e2 (isNat N1) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N1) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L1 N1 p1)) i1) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y3:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y3)) L1 i1 (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L1 i1) x3) y p71))) ([p72:pf (@ num form (@ num (shadowed_0 num) inrange N1) i1)] inrange_expand2 N1 i1 (+ N1 N2) p72 (trans_geq (+ N1 N2) (+ N1 zero) N1 (geq_plus_cong2 N2 zero N1 (isNat->geq_zero N2 (list_length_isNat X1 L2 N2 p2))) (greatereq_cong N1 (+ N1 zero) N1 N1 (symm num (+ N1 zero) N1 (plus_zero N1)) (refl num N1) (ord_reflexivity N1)))))) ([p8:pf (not (lt i1 N1))] cut (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n)) y) (@ num form (@ num (shadowed_0 num) inrange (plus N1 N2)) i1) (if_e2 (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n)) y) (and_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) y) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n)) y)) p62) (congr num n N1 ([z2:tm num] not (lt i1 z2)) p63 p8)) ([p81:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n)) y)] cut (@ num form (@ num (shadowed_0 num) inrange N2) (minus i1 n)) (@ num form (@ num (shadowed_0 num) inrange (plus N1 N2)) i1) (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N2) (minus i1 n)) (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) (minus i1 n)) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange N2) x3 equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) x3) (and_e2 (isNat N2) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N2) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L2) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L2 N2 p2)) (minus i1 n)) (def2_i (rel num X1) num ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y4:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y4)) L2 (minus i1 n) (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) L2 (minus i1 n)) x3) y p81))) ([p82:pf (@ num form (@ num (shadowed_0 num) inrange N2) (minus i1 n))] cut (@ num form (@ num (shadowed_0 num) inrange (plus N2 N1)) i1) (@ num form (@ num (shadowed_0 num) inrange (plus N1 N2)) i1) (inrange_shift' N1 N2 i1 (and_e1 (isNat N1) (forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange N1) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) L1) I)) (def2_e num (list X1) ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) L1 N1 p1)) (congr num N1 n ([z3:tm num] @ num form (@ num (shadowed_0 num) inrange N2) (minus i1 z3)) (symm num n N1 p63) p82)) ([p3:pf (@ num form (@ num (shadowed_0 num) inrange (plus N2 N1)) i1)] congr num (plus N1 N2) (plus N2 N1) ([z4:tm num] @ num form (@ num (shadowed_0 num) inrange z4) i1) (comm_add N1 N2) p3)))))))))))).
list_valid_cat : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2)] exists_e num ([x3:tm num] isNat x3 and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i1) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ num (X1 arrow form) L1 i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i1) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y))))))) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i3) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) L1 i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i3) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i4) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ num (X1 arrow form) x4 i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i4) y)))))) Eq L1 p1)) ([n0:tm num] [p3:pf (isNat n0 and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n0) i5) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) L1 i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i5) y)))))] exists_e num ([x3:tm num] isNat x3 and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i6) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) L2 i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i6) y))))) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (lam2 (eqrel X1) (list X1) form ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i7) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x10) y equiv @ X1 form (@ num (X1 arrow form) x4 i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i7) y))))))) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i8) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) L2 i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i8) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i9) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x12) y equiv @ X1 form (@ num (X1 arrow form) x4 i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i9) y)))))) Eq L2 p2)) ([n1:tm num] [p4:pf (isNat n1 and forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i10) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) L2 i10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i10) y)))))] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i11:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i11) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x14) y equiv @ X1 form (@ num (X1 arrow form) x4 i11) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i11) y)))))) Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i12:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i12) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i12) y)))))) (list_valid_per X1 Eq L1 p1) (exists_i num ([x3:tm num] isNat x3 and forall num ([i13:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i13) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i13) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i13) y))))) (plus n0 n1) (and_i (isNat (+ n0 n1)) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (plus n0 n1)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x6:tm (list X1)] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x6) N and if (lt x8 N) (@ X1 form (@ num (shadowed_0 X1) x6 x8) x9) (@ X1 form (@ num (X1 arrow form) x7 (minus x8 N)) x9)))) L1) L2) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) x3) x4))))) (nat_sum n0 n1 (and_e1 (isNat n0) (forall num ([i14:tm num] if (@ num form (@ num (shadowed_0 num) inrange n0) i14) (exists X1 ([x17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (X1 arrow form) L1 i14) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i14) y))))) p3) (and_e1 (isNat n1) (forall num ([i15:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i15) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y equiv @ X1 form (@ num (X1 arrow form) L2 i15) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i15) y))))) p4)) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (plus n0 n1)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x6:tm (list X1)] [x7:tm (list X1)] [x8:tm num] [x9:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x6) N and if (lt x8 N) (@ X1 form (@ num (shadowed_0 X1) x6 x8) x9) (@ X1 form (@ num (X1 arrow form) x7 (minus x8 N)) x9)))) L1) L2) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) x3) x4)))) ([i16:tm num] if_i (@ num form (@ num (shadowed_0 num) inrange (plus n0 n1)) i16) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x5:tm (list X1)] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x5) N and if (lt x7 N) (@ X1 form (@ num (shadowed_0 X1) x5 x7) x8) (@ X1 form (@ num (X1 arrow form) x6 (minus x7 N)) x8)))) L1) L2) i16) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i16) x3))) ([p5:pf (@ num form (@ num (shadowed_0 num) inrange (plus n0 n1)) i16)] or_e (lt i16 n0) (not (lt i16 n0)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x5:tm (list X1)] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x5) N and if (lt x7 N) (@ X1 form (@ num (shadowed_0 X1) x5 x7) x8) (@ X1 form (@ num (X1 arrow form) x6 (minus x7 N)) x8)))) L1) L2) i16) x4))) (excluded_middle (lt i16 n0)) ([p51:pf (lt i16 n0)] cut (@ num form (@ num (shadowed_0 num) inrange n0) i16) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x5:tm (list X1)] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x5) N and if (lt x7 N) (@ X1 form (@ num (shadowed_0 X1) x5 x7) x8) (@ X1 form (@ num (X1 arrow form) x6 (minus x7 N)) x8)))) L1) L2) i16) x4))) (inrange_i i16 n0 (inrange_e1 (plus n0 n1) i16 p5) (inrange_e2 (plus n0 n1) i16 p5) p51) ([p52:pf (@ num form (@ num (shadowed_0 num) inrange n0) i16)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L1 i16) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x5:tm (list X1)] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x5) N and if (lt x7 N) (@ X1 form (@ num (shadowed_0 X1) x5 x7) x8) (@ X1 form (@ num (X1 arrow form) x6 (minus x7 N)) x8)))) L1) L2) i16) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n0) i16) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) x19 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) y equiv @ X1 form (@ num (X1 arrow form) L1 i16) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i16) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n0) x3) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) x20 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) y equiv @ X1 form (@ num (X1 arrow form) L1 x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 x3) y)))) (and_e2 (isNat n0) (forall num ([i17:tm num] if (@ num form (@ num (shadowed_0 num) inrange n0) i17) (exists X1 ([x21:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) L1 i17) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i17) y))))) p3) i16) p52) ([x22:tm X1] [p53:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) x22 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) y equiv @ X1 form (@ num (X1 arrow form) L1 i16) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x5:tm (list X1)] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x5) N and if (lt x7 N) (@ X1 form (@ num (shadowed_0 X1) x5 x7) x8) (@ X1 form (@ num (X1 arrow form) x6 (minus x7 N)) x8)))) L1) L2) i16) x4)) x22 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) x22) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x4:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x4 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) L1) L2) i16) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) x22) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) y equiv @ X1 form (@ num (X1 arrow form) L1 i16) y)) p53) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x4:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x4 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) L1) L2) i16) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6)))) L1) L2) i16) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6)))) L1) L2) i16) y) ([p54:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) y)] def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 i16 y (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i16 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 x3)) y)) n0 (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n0) (if (lt i16 n0) (@ X1 form (@ num (X1 arrow form) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y)) (list_valid_implies_length n0 X1 Eq L1 p3) (if_i1 (lt i16 n0) (@ X1 form (@ num (X1 arrow form) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y) p51 (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) y) (@ X1 form (@ num (X1 arrow form) L1 i16) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) x3 equiv @ X1 form (@ num (X1 arrow form) L1 i16) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) x22) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) y1 equiv @ X1 form (@ num (X1 arrow form) L1 i16) y1)) p53) y) p54)))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i16) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) y) ([p55:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i16) y)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i16 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 x3)) y)) (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) y) (def4_e X1 num (list X1) (list X1) ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 i16 y p55) ([n2:tm num] [p55a:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n2 and if (lt i16 n2) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n2)) y))] cut (eq num n2 n0) (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) y) (list_length_uniq X1 L1 n2 n0 (and_e1 (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n2) (if (lt i16 n2) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n2)) y)) p55a) (list_valid_implies_length n0 X1 Eq L1 p3)) ([p55b:pf (eq num n2 n0)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) y) (@ X1 form (@ num (X1 arrow form) L1 i16) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) x3 equiv @ X1 form (@ num (X1 arrow form) L1 i16) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x22) x22) (forall X1 ([y2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x22) y2 equiv @ X1 form (@ num (X1 arrow form) L1 i16) y2)) p53) y) (if_e1 (lt i16 n2) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n2)) y) (and_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n2) (if (lt i16 n2) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n2)) y)) p55a) (congr num n2 n0 ([z1:tm num] lt i16 z1) p55b p51)))))))))))) ([p56:pf (not (lt i16 n0))] cut (@ num form (@ num (shadowed_0 num) inrange n1) (minus i16 n0)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x5:tm (list X1)] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x5) N and if (lt x7 N) (@ X1 form (@ num (shadowed_0 X1) x5 x7) x8) (@ X1 form (@ num (X1 arrow form) x6 (minus x7 N)) x8)))) L1) L2) i16) x4))) (inrange_shrink' n0 i16 n1 (and_e1 (isNat n0) (forall num ([i18:tm num] if (@ num form (@ num (shadowed_0 num) inrange n0) i18) (exists X1 ([x23:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) x23 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x23) y equiv @ X1 form (@ num (X1 arrow form) L1 i18) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i18) y))))) p3) p56 p5) ([p57:pf (@ num form (@ num (shadowed_0 num) inrange n1) (minus i16 n0))] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x5:tm (list X1)] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x5) N and if (lt x7 N) (@ X1 form (@ num (shadowed_0 X1) x5 x7) x8) (@ X1 form (@ num (X1 arrow form) x6 (minus x7 N)) x8)))) L1) L2) i16) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n1) (minus i16 n0)) (exists X1 ([x24:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) x24 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x24) y equiv @ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) x3) (exists X1 ([x25:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x25) x25 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x25) y equiv @ X1 form (@ num (X1 arrow form) L2 x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 x3) y)))) (and_e2 (isNat n1) (forall num ([i19:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i19) (exists X1 ([x26:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x26) x26 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x26) y equiv @ X1 form (@ num (X1 arrow form) L2 i19) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i19) y))))) p4) (minus i16 n0)) p57) ([x27:tm X1] [p58:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) x27 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) y equiv @ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x5:tm (list X1)] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x5) N and if (lt x7 N) (@ X1 form (@ num (shadowed_0 X1) x5 x7) x8) (@ X1 form (@ num (X1 arrow form) x6 (minus x7 N)) x8)))) L1) L2) i16) x4)) x27 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) x27) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x4:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x4 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) L1) L2) i16) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) x27) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) y equiv @ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y)) p58) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) x3 equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x4:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x4 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) L1) L2) i16) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6)))) L1) L2) i16) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) y) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6)))) L1) L2) i16) y) ([p59:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) y)] def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 i16 y (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i16 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 x3)) y)) n0 (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n0) (if (lt i16 n0) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y)) (list_valid_implies_length n0 X1 Eq L1 p3) (if_i2 (lt i16 n0) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) p56 (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) x3 equiv @ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) x27) (forall X1 ([y3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) y3 equiv @ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y3)) p58) y) p59)))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i16) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) y) ([p510:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i16) y)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i16 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 x3)) y)) (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) y) (def4_e X1 num (list X1) (list X1) ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 i16 y p510) ([n3:tm num] [p510a:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n3 and if (lt i16 n3) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n3)) y))] cut (eq num n3 n0) (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) y) (list_length_uniq X1 L1 n3 n0 (and_e1 (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n3) (if (lt i16 n3) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n3)) y)) p510a) (list_valid_implies_length n0 X1 Eq L1 p3)) ([p510b:pf (eq num n3 n0)] cut (@ X1 form (@ num (shadowed_0 X1) L2 (minus i16 n0)) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) y) (congr num n0 n3 ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) L2 (minus i16 z2)) y) (symm num n3 n0 p510b) (if_e2 (lt i16 n3) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n3)) y) (and_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n3) (if (lt i16 n3) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n3)) y)) p510a) (congr num n3 n0 ([z3:tm num] not (lt i16 z3)) p510b p56))) ([p510e:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus i16 n0)) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) x3 equiv @ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x27) x27) (forall X1 ([y4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x27) y4 equiv @ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y4)) p58) y) p510e)))))))))))) ([p6:pf (not (@ num form (@ num (shadowed_0 num) inrange (plus n0 n1)) i16))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i16) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i16) y) ([p61:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i16) y)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i16 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 x3)) y)) false (def4_e X1 num (list X1) (list X1) ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 i16 y p61) ([n:tm num] [p62:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n and if (lt i16 n) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n)) y))] cut (eq num n n0) false (list_length_uniq X1 L1 n n0 (and_e1 (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt i16 n) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n)) y)) p62) (list_valid_implies_length n0 X1 Eq L1 p3)) ([p63:pf (eq num n n0)] or_e (lt i16 n) (not (lt i16 n)) false (excluded_middle (lt i16 n)) ([p64:pf (lt i16 n)] cut (not (@ num form (@ num (shadowed_0 num) inrange n0) i16)) false (inrange_plus_not n1 n0 i16 (and_e2 (isInt n1) (geq n1 zero) (and_e1 (isNat n1) (forall num ([i20:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i20) (exists X1 ([x28:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x28) x28 and forall X1 ([y5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x28) y5 equiv @ X1 form (@ num (X1 arrow form) L2 i20) y5))) (forall X1 ([y6:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i20) y6))))) p4)) p6) ([p64b:pf (not (@ num form (@ num (shadowed_0 num) inrange n0) i16))] not_e (@ X1 form (@ num (X1 arrow form) L1 i16) y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i16) x3)) (if_e2 (@ num form (@ num (shadowed_0 num) inrange n0) i16) (exists X1 ([x29:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) x29 and forall X1 ([y7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x29) y7 equiv @ X1 form (@ num (X1 arrow form) L1 i16) y7))) (forall X1 ([y8:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i16) y8))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n0) x3) (exists X1 ([x30:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x30) x30 and forall X1 ([y9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x30) y9 equiv @ X1 form (@ num (X1 arrow form) L1 x3) y9))) (forall X1 ([y10:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 x3) y10)))) (and_e2 (isNat n0) (forall num ([i21:tm num] if (@ num form (@ num (shadowed_0 num) inrange n0) i21) (exists X1 ([x31:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x31) x31 and forall X1 ([y11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x31) y11 equiv @ X1 form (@ num (X1 arrow form) L1 i21) y11))) (forall X1 ([y12:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i21) y12))))) p3) i16) p64b) y) (if_e1 (lt i16 n) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n)) y) (and_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt i16 n) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n)) y)) p62) p64))) ([p65:pf (not (lt i16 n))] cut (not (@ num form (@ num (shadowed_0 num) inrange (plus n1 n0)) i16)) false (congr num (plus n1 n0) (plus n0 n1) ([z4:tm num] not (@ num form (@ num (shadowed_0 num) inrange z4) i16)) (comm_add n1 n0) p6) ([p65a:pf (not (@ num form (@ num (shadowed_0 num) inrange (plus n1 n0)) i16))] cut (not (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y)) false (forall_e X1 ([x3:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) x3)) (if_e2 (@ num form (@ num (shadowed_0 num) inrange n1) (minus i16 n0)) (exists X1 ([x32:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x32) x32 and forall X1 ([y13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x32) y13 equiv @ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y13))) (forall X1 ([y14:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n0)) y14))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) x3) (exists X1 ([x33:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x33) x33 and forall X1 ([y15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x33) y15 equiv @ X1 form (@ num (X1 arrow form) L2 x3) y15))) (forall X1 ([y16:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 x3) y16)))) (and_e2 (isNat n1) (forall num ([i22:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i22) (exists X1 ([x34:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x34) x34 and forall X1 ([y17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x34) y17 equiv @ X1 form (@ num (X1 arrow form) L2 i22) y17))) (forall X1 ([y18:tm X1] not (@ X1 form (@ num (X1 arrow form) L2 i22) y18))))) p4) (minus i16 n0)) (inrange_shift'_not n0 n1 i16 (and_e1 (isNat n0) (forall num ([i23:tm num] if (@ num form (@ num (shadowed_0 num) inrange n0) i23) (exists X1 ([x35:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x35) x35 and forall X1 ([y19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x35) y19 equiv @ X1 form (@ num (X1 arrow form) L1 i23) y19))) (forall X1 ([y20:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i23) y20))))) p3) p65a)) y) ([p65c:pf (not (@ X1 form (@ num (shadowed_0 X1) L2 (minus i16 n0)) y))] not_e (@ X1 form (@ num (shadowed_0 X1) L2 (minus i16 n)) y) (congr num n n0 ([z5:tm num] not (@ X1 form (@ num (shadowed_0 X1) L2 (minus i16 z5)) y)) p63 p65c) (if_e2 (lt i16 n) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n)) y) (and_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt i16 n) (@ X1 form (@ num (shadowed_0 X1) L1 i16) y) (@ X1 form (@ num (X1 arrow form) L2 (minus i16 n)) y)) p62) p65)))))))))))))))).
list_cat_nil2 : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) I) X equiv @ X1 form (@ num (shadowed_0 X1) L I) X) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [I:tm num] [X:tm X1] [p0:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) I) X equiv @ X1 form (@ num (shadowed_0 X1) L I) X) p0 ([p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] equiv_i2 (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) I) X) (@ X1 form (@ num (shadowed_0 X1) L I) X) ([p2:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) I) X)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (list_nil X1)) x3 and if (lt I x3) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (@ X1 form (@ num (X1 arrow form) L (minus I x3)) X)) (@ X1 form (@ num (shadowed_0 X1) L I) X) (def4_e X1 num (list X1) (list X1) ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) (list_nil X1) L I X p2) ([n:tm num] [p3:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (list_nil X1)) n and if (lt I n) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (@ X1 form (@ num (shadowed_0 X1) L (minus I n)) X))] and_l (@ num form (@ (list X1) (num arrow form) (list_length X1) (list_nil X1)) n) (if (lt I n) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (@ X1 form (@ num (shadowed_0 X1) L (minus I n)) X)) (@ X1 form (@ num (shadowed_0 X1) L I) X) p3 ([p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (list_nil X1)) n)] [p5:pf (if (lt I n) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (@ X1 form (@ num (shadowed_0 X1) L (minus I n)) X))] cut (eq num n zero) (@ X1 form (@ num (shadowed_0 X1) L I) X) (list_length_uniq X1 (list_nil X1) n zero p4 (list_length_nil X1)) ([p6:pf (eq num n zero)] cut (@ X1 form (@ num (shadowed_0 X1) L (minus I n)) X) (@ X1 form (@ num (shadowed_0 X1) L I) X) (or_e (geq I n) (not (geq I n)) (@ X1 form (@ num (shadowed_0 X1) L (minus I n)) X) (ord_excluded_middle I n) ([p7:pf (geq I n)] if_e2 (lt I n) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (@ X1 form (@ num (shadowed_0 X1) L (minus I n)) X) p5 (greatereq_not_lt I n p7)) ([p8:pf (lt I n)] false_e (@ X1 form (@ num (shadowed_0 X1) L (minus I n)) X) (def2_e X1 num ([x3:tm num] [x4:tm X1] false) I X (if_e1 (lt I n) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (@ X1 form (@ num (shadowed_0 X1) L (minus I n)) X) p5 p8)))) ([p11:pf (@ X1 form (@ num (shadowed_0 X1) L (minus I n)) X)] congr num I (+ I (neg zero)) ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L z1) X) (symm num (+ I (neg zero)) I (minus_zero I)) (congr num zero n ([y:tm num] @ X1 form (@ num (shadowed_0 X1) L (minus I y)) X) (symm num n zero p6) p11)))))) ([p2:pf (@ X1 form (@ num (shadowed_0 X1) L I) X)] def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) (list_nil X1) L I X (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (list_nil X1)) x3 and if (lt I x3) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (@ X1 form (@ num (X1 arrow form) L (minus I x3)) X)) zero (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) (list_nil X1)) zero) (if (< I zero) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (@ X1 form (@ num (shadowed_0 X1) L (+ I (neg zero))) X)) (list_length_nil X1) (or_e (geq I zero) (not (geq I zero)) (if (< I zero) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (@ X1 form (@ num (shadowed_0 X1) L (+ I (neg zero))) X)) (ord_excluded_middle I zero) ([p21:pf (geq I zero)] if_i2 (< I zero) (@ X1 form (@ num (shadowed_0 X1) L (+ I (neg zero))) X) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (greatereq_not_lt I zero p21) (congr num (+ I (neg zero)) I ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) L z2) X) (minus_zero I) p2)) ([p31:pf (lt I zero)] false_e (if (< I zero) (@ X1 form (@ num (shadowed_0 X1) (list_nil X1) I) X) (@ X1 form (@ num (shadowed_0 X1) L (+ I (neg zero))) X)) (list_index_less_zero X1 Eq L I X p1 (list_nth_i X1 L I X p2) p31))))))).
list_cat_nil_eq : {X1:tp} {Eq:tm (per X1)} {L:tm (list X1)} pf (@ (per X1) form (validper X1) Eq) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L)) L) = [X1:tp] [Eq:tm (per X1)] [L:tm (list X1)] [p1:pf (@ (per X1) form (validper X1) Eq)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] cut (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq) L) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L)) (@ (list X1) form (@ (list X1) (shadowed_0 (list X1)) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L)) L) (per_rel_i num X1 eq_arith Eq L (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) ([x3:tm num] [x':tm num] [y:tm X1] [y':tm X1] [p11:pf (@ num form (@ num (shadowed_0 num) eq_arith x3) x')] [p12:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y')] cut (@ X1 form (@ num (shadowed_0 X1) L x') y' equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) x') y') (@ X1 form (@ num (shadowed_0 X1) L x3) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) x') y') (equiv_symm (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) x') y') (@ X1 form (@ num (shadowed_0 X1) L x') y') (list_cat_nil2 X1 Eq L x' y' p2)) ([p13:pf (@ X1 form (@ num (shadowed_0 X1) L x') y' equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) x') y')] cut (@ X1 form (@ num (shadowed_0 X1) L x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x') y') (@ X1 form (@ num (shadowed_0 X1) L x3) y equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) x') y') (equiv_i2 (@ X1 form (@ num (shadowed_0 X1) L x3) y) (@ X1 form (@ num (shadowed_0 X1) L x') y') ([p14:pf (@ X1 form (@ num (shadowed_0 X1) L x3) y)] cut (@ num form (@ num (shadowed_0 num) eq_nat x3) x') (@ X1 form (@ num (shadowed_0 X1) L x') y') (eq_nat_i x3 x' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) x3 x' p11) (list_index_isNat X1 Eq L x3 y p2 (list_nth_i X1 L x3 y p14))) ([q1:pf (@ num form (@ num (shadowed_0 num) eq_nat x3) x')] list_congr X1 Eq L x3 y x' y' p2 p14 q1 p12)) ([p15:pf (@ X1 form (@ num (shadowed_0 X1) L x') y')] cut (@ num form (@ num (shadowed_0 num) eq_nat x') x3) (@ X1 form (@ num (shadowed_0 X1) L x3) y) (eq_nat_i x' x3 (symm num x3 x' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) x3 x' p11)) (list_index_isNat X1 Eq L x' y' p2 (list_nth_i X1 L x' y' p15))) ([q2:pf (@ num form (@ num (shadowed_0 num) eq_nat x') x3)] list_congr X1 Eq L x' y' x3 y p2 p15 q2 (per_symm X1 Eq y y' p1 p12)))) ([p16:pf (@ X1 form (@ num (shadowed_0 X1) L x3) y equiv @ X1 form (@ num (shadowed_0 X1) L x') y')] equiv_trans (@ X1 form (@ num (shadowed_0 X1) L x3) y) (@ X1 form (@ num (shadowed_0 X1) L x') y') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) x') y') p16 p13))) ([x4:tm num] [y:tm X1] [p21:pf (@ X1 form (@ num (shadowed_0 X1) L x4) y)] and_i (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x5:tm num] _eq num x3 x5)) x4) x4) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y) (def2_i num num ([x3:tm num] [x5:tm num] _eq num x3 x5) x4 x4 (refl num x4)) (list_member_valid X1 Eq L y p2 (list_member_i X1 L x4 y (list_nth_i X1 L x4 y p21)))) ([x5:tm num] [y:tm X1] [p31:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) x5) y)] and_i (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x4:tm num] _eq num x3 x4)) x5) x5) (@ X1 form (@ X1 (shadowed_0 X1) Eq y) y) (def2_i num num ([x3:tm num] [x4:tm num] _eq num x3 x4) x5 x5 (refl num x5)) (list_member_valid X1 Eq L y p2 (list_member_i X1 L x5 y (list_nth_i X1 L x5 y (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) x5) y) (@ X1 form (@ num (shadowed_0 X1) L x5) y) (list_cat_nil2 X1 Eq L x5 y p2) p31)))))) ([p4:pf (@ (rel num X1) form (@ (rel num X1) (shadowed_0 (rel num X1)) (@ (per X1) (per (rel num X1)) (@ (per num) (per X1 arrow per (rel num X1)) (per_rel num X1) eq_arith) Eq) L) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L))] per_symm (list X1) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) (list_eq_validper X1 Eq p1) (list_eq_i X1 Eq L (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (list_nil X1)) L) p4 p2)).
list_nth_cat_i1 : {X1:tp} {L1:tm (list X1)} {N:tm num} {I:tm num} {X:tm X1} {L2:tm (list X1)} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) I) X) = [X1:tp] [L1:tm (list X1)] [N:tm num] [I:tm num] [X:tm X1] [L2:tm (list X1)] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N)] [p2:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) I) X) p1 ([x3:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N)] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) I) X) p2 ([x4:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X)] cut (lt I N) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 x6) x7)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) I) X) (inrange_e3 N I (list_index_inrange X1 L1 N I X p1 p2)) ([p3:pf (lt I N)] def3_i (list X1) num X1 ([x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ X1 form (@ num (X1 arrow form) x5 x6) x7) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) I X (def4_i (list X1) (list X1) num X1 ([x5:tm (list X1)] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] exists num ([N1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x5) N1 and if (lt x7 N1) (@ X1 form (@ num (shadowed_0 X1) x5 x7) x8) (@ X1 form (@ num (X1 arrow form) x6 (minus x7 N1)) x8))) L1 L2 I X (exists_i num ([x5:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x5 and if (lt I x5) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I x5)) X)) N (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) (if (lt I N) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I N)) X)) p1 (if_i1 (lt I N) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I N)) X) p3 (list_nth_e X1 L1 I X p2)))))))).
list_nth_cat_i2 : {X1:tp} {L1:tm (list X1)} {N:tm num} {I:tnum} {L2:tm (list X1)} {X:tm X1} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) -> pf (geq I zero) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) I) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (plus I N)) X) = [X1:tp] [L1:tm (list X1)] [N:tm num] [I:tnum] [L2:tm (list X1)] [X:tm X1] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N)] [p2:pf (geq I zero)] [p3:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) I) X)] cut (not (< (plus I N) N)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (plus I N)) X) (greatereq_not_lt (plus I N) N (congr num N (+ zero N) ([x3:tm num] geq (plus I N) x3) (symm num (+ zero N) N (zero_plus N)) (geq_geq_plus I zero N N p2 (eq->geq N N (refl num N))))) ([p4:pf (not (lt (plus I N) N))] cut (@ X1 form (@ num (shadowed_0 X1) L2 (- (+ I N) N)) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (lam3 (list X1) num X1 form ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (plus I N)) X) (congr num (- (+ I N) N) I ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L2 z1) X) (cancel_a+b-b I N) (list_nth_e X1 L2 I X p3)) ([p7:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus (plus I N) N)) X)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (plus I N) X (def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N1 and if (lt x5 N1) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N1)) x6))) L1 L2 (plus I N) X (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt (plus I N) x3) (@ X1 form (@ num (shadowed_0 X1) L1 (plus I N)) X) (@ X1 form (@ num (X1 arrow form) L2 (minus (plus I N) x3)) X)) N (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N) (if (lt (plus I N) N) (@ X1 form (@ num (shadowed_0 X1) L1 (plus I N)) X) (@ X1 form (@ num (shadowed_0 X1) L2 (minus (plus I N) N)) X)) p1 (if_i2 (lt (plus I N) N) (@ X1 form (@ num (shadowed_0 X1) L2 (minus (plus I N) N)) X) (@ X1 form (@ num (shadowed_0 X1) L1 (plus I N)) X) p4 p7)))))).
list_member_cat_e : {X1:tp} {L1:tm (list X1)} {L2:tm (list X1)} {X:tm X1} pf (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X or @ X1 form (@ (list X1) (set X1) (list_member X1) L2) X) = [X1:tp] [L1:tm (list X1)] [L2:tm (list X1)] [X:tm X1] [p1:pf (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X)] exists_e num ([x3:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) x3) X) (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X or @ X1 form (@ (list X1) (set X1) (list_member X1) L2) X) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) X p1) ([i1:tm num] [q1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) X)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i1 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i1) X) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 x3)) X)) (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X or @ X1 form (@ (list X1) (set X1) (list_member X1) L2) X) (def4_e X1 num (list X1) (list X1) ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 i1 X q1) ([n:tm num] [q2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n and if (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) X) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 n)) X))] and_l (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) X) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 n)) X)) (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X or @ X1 form (@ (list X1) (set X1) (list_member X1) L2) X) q2 ([q21:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n)] [q22:pf (if (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) X) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 n)) X))] or_e (lt i1 n) (not (lt i1 n)) (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X or @ X1 form (@ (list X1) (set X1) (list_member X1) L2) X) (excluded_middle (lt i1 n)) ([q3:pf (lt i1 n)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i1) X) (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X or @ X1 form (@ (list X1) (set X1) (list_member X1) L2) X) (if_e1 (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) X) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 n)) X) q22 q3) ([q31:pf (@ X1 form (@ num (shadowed_0 X1) L1 i1) X)] or_i1 (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X) (@ X1 form (@ (list X1) (set X1) (list_member X1) L2) X) (list_member_i' X1 L1 i1 X q31))) ([q4:pf (not (lt i1 n))] cut (@ X1 form (@ num (X1 arrow form) L2 (minus i1 n)) X) (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X or @ X1 form (@ (list X1) (set X1) (list_member X1) L2) X) (if_e2 (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) X) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 n)) X) q22 q4) ([q41:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n)) X)] or_i2 (@ X1 form (@ (list X1) (set X1) (list_member X1) L2) X) (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X) (list_member_i' X1 L2 (minus i1 n) X q41)))))).
list_member_cat_i1 : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {X:tm X1} {L2:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [X:tm X1] [L2:tm (list X1)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1)] [p1:pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L1) X)] exists_e num ([x3:tm num] @ X1 form (@ num (X1 arrow form) L1 x3) X) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) (def2_e X1 (list X1) ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4)) L1 X p1) ([i1:tm num] [q1:pf (@ X1 form (@ num (shadowed_0 X1) L1 i1) X)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) (list_length_exists X1 Eq L1 p2) ([n:tm num] [p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n)] cut (@ num form (@ num (shadowed_0 num) inrange n) i1) (@ X1 form (@ (list X1) (X1 arrow form) (lam2 (list X1) X1 form ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4))) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) (list_index_inrange X1 L1 n i1 X p4 (list_nth_i X1 L1 i1 X q1)) ([p6:pf (@ num form (@ num (shadowed_0 num) inrange n) i1)] def2_i (list X1) X1 ([x3:tm (list X1)] [x4:tm X1] exists num ([I:tm num] @ X1 form (@ num (X1 arrow form) x3 I) x4)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) X (exists_i num ([x3:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) x3) X) i1 (def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 i1 X (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i1 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i1) X) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 x3)) X)) n (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) X) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 n)) X)) p4 (if_i1 (lt i1 n) (@ X1 form (@ num (shadowed_0 X1) L1 i1) X) (@ X1 form (@ num (X1 arrow form) L2 (minus i1 n)) X) (inrange_e3 n i1 p6) q1)))))))).
list_member_cat_i2 : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} {X:tm X1} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L2) X) -> pf (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [X:tm X1] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1)] [p4:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2)] [p6:pf (@ X1 form (@ (list X1) (set X1) (list_member X1) L2) X)] exists_e num ([x3:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) x3) X) (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) (list_member_e X1 L2 X p6) ([i1:tm num] [q1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) i1) X)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3) (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) (list_length_exists X1 Eq L1 p2) ([n1:tm num] [p8:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n1)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L2) x3) (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) (list_length_exists X1 Eq L2 p4) ([n2:tm num] [p10:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) n2)] cut (@ num form (@ num (shadowed_0 num) inrange n2) i1) (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) (list_index_inrange X1 L2 n2 i1 X p10 q1) ([p12:pf (@ num form (@ num (shadowed_0 num) inrange n2) i1)] cut (>= (+ i1 n1) (+ zero n1)) (@ X1 form (@ (list X1) (set X1) (list_member X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) X) (geq_geq_plus i1 zero n1 n1 (inrange_e2 n2 i1 p12) (ord_reflexivity n1)) ([q3:pf (geq (plus i1 n1) (plus zero n1))] list_member_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (plus i1 n1) X (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (plus i1 n1) X (list_cat_i2 X1 L1 n1 (plus i1 n1) L2 X p8 (congr num n1 (+ zero n1) ([z1:tm num] geq (plus i1 n1) z1) (symm num (+ zero n1) n1 (zero_plus n1)) q3) (congr num (- (+ i1 n1) n1) i1 ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) L2 z2) X) (cancel_a+b-b i1 n1) (list_nth_e X1 L2 i1 X q1))))))))).
list_nth_cat_e : {X1:tp} {L1:tm (list X1)} {L2:tm (list X1)} {I:tm num} {X:tm X1} {N1:tm num} {N2:tm num} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) I) X) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N1) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) N2) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) = [X1:tp] [L1:tm (list X1)] [L2:tm (list X1)] [I:tm num] [X:tm X1] [N1:tm num] [N2:tm num] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) I) X)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) N1)] [p3:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) N2)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt I x3) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I x3)) X)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (def4_e X1 num (list X1) (list X1) ([x3:tm (list X1)] [x4:tm (list X1)] [x5:tm num] [x6:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x5 N) (@ X1 form (@ num (shadowed_0 X1) x3 x5) x6) (@ X1 form (@ num (X1 arrow form) x4 (minus x5 N)) x6))) L1 L2 I X (list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) I X p1)) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n and if (lt I n) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I n)) X))] and_l (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt I n) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I n)) X)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) q1 ([q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n)] [q12:pf (if (lt I n) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I n)) X))] cut (eq num N1 n) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (list_length_uniq X1 L1 N1 n p2 q11) ([q13:pf (eq num N1 n)] or_e (lt I n) (not (lt I n)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (excluded_middle (lt I n)) ([q2:pf (lt I n)] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (list_nth_i X1 L1 I X (if_e1 (lt I n) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I n)) X) q12 q2)) ([q21:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X)] cut (@ num form (@ num (shadowed_0 num) inrange n) I) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (list_index_inrange X1 L1 n I X q11 q21) ([q22:pf (@ num form (@ num (shadowed_0 num) inrange n) I)] or_i1 (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (and_i (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X) (@ num form (@ num (shadowed_0 num) inrange N1) I) q21 (congr num N1 n ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange z1) I) q13 q22))))) ([q3:pf (not (lt I n))] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I n)) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (list_nth_i X1 L2 (minus I n) X (if_e2 (lt I n) (@ X1 form (@ num (shadowed_0 X1) L1 I) X) (@ X1 form (@ num (X1 arrow form) L2 (minus I n)) X) q12 q3)) ([q31:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I n)) X)] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (congr num N1 n ([z2:tm num] @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I z2)) X) q13 q31) ([q31a:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X)] cut (@ num form (@ num (shadowed_0 num) inrange N2) (minus I N1)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (list_index_inrange X1 L2 N2 (minus I N1) X p3 q31a) ([q32a:pf (@ num form (@ num (shadowed_0 num) inrange N2) (minus I N1))] cut (isNat (minus I N1)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (inrange_isNat N2 (minus I N1) q32a) ([q34:pf (isNat (minus I N1))] cut (isNat N1) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (list_length_isNat X1 L1 N1 p2) ([q35:pf (isNat N1)] cut (isNat (+ (minus I N1) N1)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (nat_sum (minus I N1) N1 q34 q35) ([q36:pf (isNat (plus (minus I N1) N1))] cut (isNat I) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (congr num I (+ (- I N1) N1) ([z3:tm num] isNat z3) (symm num (+ (- I N1) N1) I (cancel_a-b+b I N1)) q36) ([q37:pf (isNat I)] cut (geq I n) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (equiv_e2 (geq I n) (not (not (geq I n))) (equiv_not_not (geq I n)) q3) ([q30:pf (geq I n)] cut (lt (minus I N1) N2) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (inrange_e3 N2 (minus I N1) q32a) ([q39:pf (lt (minus I N1) N2)] cut (> (+ N1 N2) (+ N1 (minus I N1))) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (gt_plus_cong2 N2 (minus I N1) N1 q39) ([q41:pf (gt (plus N1 N2) (plus N1 (minus I N1)))] cut (gt (plus N1 N2) (plus (minus I N1) N1)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (congr num (plus (minus I N1) N1) (plus N1 (minus I N1)) ([z4:tm num] gt (plus N1 N2) z4) (comm_add (minus I N1) N1) q41) ([q42:pf (gt (plus N1 N2) (plus (minus I N1) N1))] cut (gt (plus N1 N2) I) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I or @ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (congr num I (+ (- I N1) N1) ([z5:tm num] gt (plus N1 N2) z5) (symm num (+ (- I N1) N1) I (cancel_a-b+b I N1)) q42) ([q43:pf (gt (plus N1 N2) I)] or_i2 (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X and @ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L1) I) X and @ num form (@ num (shadowed_0 num) inrange N1) I) (and_i (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L2) (minus I N1)) X) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 N1) (plus N1 N2)) I) q31a (inrange2_i I N1 (plus N1 N2) (isNat->isInt I q37) (congr num N1 n ([z6:tm num] geq I z6) q13 q30) (gt_not_lt_eq (plus N1 N2) I q43))))))))))))))))))).
list_eq_cat_nth : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {M1:tm (list X1)} {L2:tm (list X1)} {M2:tm (list X1)} {i1:tm num} {i':tm num} {x3:tm X1} {x':tm X1} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) M1) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L2) M2) -> pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i') -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x') -> pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2) i') x') = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [M1:tm (list X1)] [L2:tm (list X1)] [M2:tm (list X1)] [i2:tm num] [i':tm num] [x4:tm X1] [x':tm X1] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) M1)] [p2:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L2) M2)] [p3:pf (@ num form (@ num (shadowed_0 num) eq_arith i2) i')] [p4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x')] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i2) x4) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) M1) M2) i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i2) x4) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) M1) M2) i') x') ([q1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i2) x4)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i2 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (X1 arrow form) L2 (minus i2 x3)) x4)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) M1) M2) i') x') (def4_e X1 num (list X1) (list X1) ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7))) L1 L2 i2 x4 q1) ([n:tm num] [q11:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n and if (lt i2 n) (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (X1 arrow form) L2 (minus i2 n)) x4))] and_l (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt i2 n) (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (X1 arrow form) L2 (minus i2 n)) x4)) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) M1) M2) i') x') q11 ([q12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n)] [q13:pf (if (lt i2 n) (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (X1 arrow form) L2 (minus i2 n)) x4))] def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7))) M1 M2 i' x' (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) M1) x3 and if (lt i' x3) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (@ X1 form (@ num (X1 arrow form) M2 (minus i' x3)) x')) n (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) M1) n) (if (lt i' n) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (@ X1 form (@ num (shadowed_0 X1) M2 (minus i' n)) x')) (list_eq_length X1 Eq L1 M1 n p1 q12) (if_i (lt i' n) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (@ X1 form (@ num (shadowed_0 X1) M2 (minus i' n)) x') ([q3:pf (lt i' n)] cut (lt i2 n) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (congr num i2 i' ([z1:tm num] lt z1 n) (def2_e num num ([x3:tm num] [x5:tm num] _eq num x3 x5) i2 i' p3) q3) ([q31:pf (lt i2 n)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (if_e1 (lt i2 n) (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (X1 arrow form) L2 (minus i2 n)) x4) q13 q31) ([q32:pf (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4)] equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (list_eq_nth X1 Eq L1 M1 i2 i' x4 x' p1 p3 p4) q32))) ([q4:pf (not (lt i' n))] cut (not (lt i2 n)) (@ X1 form (@ num (shadowed_0 X1) M2 (minus i' n)) x') (congr num i2 i' ([z2:tm num] not (lt z2 n)) (def2_e num num ([x3:tm num] [x5:tm num] _eq num x3 x5) i2 i' p3) q4) ([q41:pf (not (lt i2 n))] cut (@ X1 form (@ num (X1 arrow form) L2 (minus i2 n)) x4) (@ X1 form (@ num (shadowed_0 X1) M2 (minus i' n)) x') (if_e2 (lt i2 n) (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (X1 arrow form) L2 (minus i2 n)) x4) q13 q41) ([q42:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus i2 n)) x4)] cut (== num (+ i2 (neg n)) (+ i' (neg n))) (@ X1 form (@ num (shadowed_0 X1) M2 (minus i' n)) x') (eq_plus i2 i' (neg n) (def2_e num num ([x3:tm num] [x5:tm num] _eq num x3 x5) i2 i' p3)) ([q43:pf (eq num (minus i2 n) (minus i' n))] equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L2 (minus i2 n)) x4) (@ X1 form (@ num (shadowed_0 X1) M2 (minus i' n)) x') (list_eq_nth X1 Eq L2 M2 (minus i2 n) (minus i' n) x4 x' p2 (def2_i num num ([x3:tm num] [x5:tm num] _eq num x3 x5) (minus i2 n) (minus i' n) q43) p4) q42))))))))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2) i') x') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) L1) L2) i2) x4) ([q2:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2) i') x')] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) M1) x3 and if (lt i' x3) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (@ X1 form (@ num (X1 arrow form) M2 (minus i' x3)) x')) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) L1) L2) i2) x4) (def4_e X1 num (list X1) (list X1) ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7))) M1 M2 i' x' q2) ([n:tm num] [q21:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) M1) n and if (lt i' n) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (@ X1 form (@ num (X1 arrow form) M2 (minus i' n)) x'))] and_l (@ num form (@ (list X1) (num arrow form) (list_length X1) M1) n) (if (lt i' n) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (@ X1 form (@ num (X1 arrow form) M2 (minus i' n)) x')) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) L1) L2) i2) x4) q21 ([q22:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) M1) n)] [q23:pf (if (lt i' n) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (@ X1 form (@ num (X1 arrow form) M2 (minus i' n)) x'))] cut (@ (list X1) form (@ (list X1) (shadowed_0 (list X1)) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) M1) L1) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) L1) L2) i2) x4) (per_symm (list X1) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1 M1 (list_eq_validper X1 Eq (list_valid_per X1 Eq L1 (list_eq_valid X1 Eq L1 M1 p1))) p1) ([p11:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) M1) L1)] cut (@ (list X1) form (@ (list X1) (shadowed_0 (list X1)) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) M2) L2) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ (list X1) (list X1 arrow num arrow X1 arrow form) (lam4 (list X1) (list X1) num X1 form ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7)))) L1) L2) i2) x4) (per_symm (list X1) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L2 M2 (list_eq_validper X1 Eq (list_valid_per X1 Eq L2 (list_eq_valid X1 Eq L2 M2 p2))) p2) ([p21:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) M2) L2)] def4_i (list X1) (list X1) num X1 ([x3:tm (list X1)] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] exists num ([N:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) N and if (lt x6 N) (@ X1 form (@ num (shadowed_0 X1) x3 x6) x7) (@ X1 form (@ num (X1 arrow form) x5 (minus x6 N)) x7))) L1 L2 i2 x4 (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3 and if (lt i2 x3) (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (X1 arrow form) L2 (minus i2 x3)) x4)) n (and_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n) (if (lt i2 n) (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i2 n)) x4)) (list_eq_length X1 Eq M1 L1 n p11 q22) (if_i (lt i2 n) (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i2 n)) x4) ([q5:pf (lt i2 n)] cut (lt i' n) (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (congr num i' i2 ([z3:tm num] lt z3 n) (symm num i2 i' (def2_e num num ([x3:tm num] [x5:tm num] _eq num x3 x5) i2 i' p3)) q5) ([q51:pf (lt i' n)] cut (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (if_e1 (lt i' n) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (@ X1 form (@ num (X1 arrow form) M2 (minus i' n)) x') q23 q51) ([q52:pf (@ X1 form (@ num (shadowed_0 X1) M1 i') x')] equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L1 i2) x4) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (list_eq_nth X1 Eq L1 M1 i2 i' x4 x' p1 p3 p4) q52))) ([q6:pf (not (lt i2 n))] cut (not (lt i' n)) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i2 n)) x4) (congr num i' i2 ([z4:tm num] not (lt z4 n)) (symm num i2 i' (def2_e num num ([x3:tm num] [x5:tm num] _eq num x3 x5) i2 i' p3)) q6) ([q61:pf (not (lt i' n))] cut (@ X1 form (@ num (X1 arrow form) M2 (minus i' n)) x') (@ X1 form (@ num (shadowed_0 X1) L2 (minus i2 n)) x4) (if_e2 (lt i' n) (@ X1 form (@ num (shadowed_0 X1) M1 i') x') (@ X1 form (@ num (X1 arrow form) M2 (minus i' n)) x') q23 q61) ([q62:pf (@ X1 form (@ num (shadowed_0 X1) M2 (minus i' n)) x')] cut (== num (+ i2 (neg n)) (+ i' (neg n))) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i2 n)) x4) (eq_plus i2 i' (neg n) (def2_e num num ([x3:tm num] [x5:tm num] _eq num x3 x5) i2 i' p3)) ([q63:pf (eq num (minus i2 n) (minus i' n))] equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L2 (minus i2 n)) x4) (@ X1 form (@ num (shadowed_0 X1) M2 (minus i' n)) x') (list_eq_nth X1 Eq L2 M2 (minus i2 n) (minus i' n) x4 x' p2 (def2_i num num ([x3:tm num] [x5:tm num] _eq num x3 x5) (minus i2 n) (minus i' n) q63) p4) q62))))))))))))).
list_eq_cat : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {M1:tm (list X1)} {L2:tm (list X1)} {M2:tm (list X1)} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) M1) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L2) M2) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2)) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [M1:tm (list X1)] [L2:tm (list X1)] [M2:tm (list X1)] [p1:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) M1)] [p2:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L2) M2)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2)) (list_valid_cat X1 Eq L1 L2 (list_eq_valid X1 Eq L1 M1 p1) (list_eq_valid X1 Eq L2 M2 p2)) ([p3:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2))] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2)) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2)) (list_valid_cat X1 Eq M1 M2 (list_eq_valid' X1 Eq L1 M1 p1) (list_eq_valid' X1 Eq L2 M2 p2)) ([p4:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2))] list_eq_i X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2) (per_rel_i num X1 eq_arith Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2) ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q11:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q12:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] list_eq_cat_nth X1 Eq L1 M1 L2 M2 i1 i' x3 x' p1 p2 q11 q12) ([i2:tm num] [x4:tm X1] [q2:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i2) x4)] and_i (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x5:tm num] _eq num x3 x5)) i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (def2_i num num ([x3:tm num] [x5:tm num] _eq num x3 x5) i2 i2 (refl num i2)) (list_nth_valid X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i2 x4 p3 (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i2 x4 q2))) ([i':tm num] [x':tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2) i') x')] and_i (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x4:tm num] _eq num x3 x4)) i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (def2_i num num ([x3:tm num] [x4:tm num] _eq num x3 x4) i' i' (refl num i')) (list_nth_valid X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2) i' x' p4 (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) M1) M2) i' x' q3)))) p3)).
list_cat_assoc_aux : {N12:tm num} {N1:tnum} {N2:tnum} {I:tnum} pf (eq num N12 (plus N1 N2)) -> pf (eq num (plus (minus I N12) N2) (minus I N1)) = [N12:tm num] [N1:tnum] [N2:tnum] [I:tnum] [p1:pf (eq num N12 (plus N1 N2))] cut (eq num (plus (minus I N12) N2) (plus (minus I (plus N1 N2)) N2)) (== num (plus (minus I N12) N2) (minus I N1)) (congr num (plus N1 N2) N12 ([z1:tm num] eq num (plus (minus I N12) N2) (plus (minus I z1) N2)) (symm num N12 (plus N1 N2) p1) (refl num (plus (minus I N12) N2))) ([p2:pf (eq num (plus (minus I N12) N2) (plus (plus I (neg (plus N1 N2))) N2))] cut (eq num (plus (minus I N12) N2) (plus (plus I (+ (neg N1) (neg N2))) N2)) (== num (plus (minus I N12) N2) (minus I N1)) (congr num (+ (neg N1) (neg N2)) (neg (+ N1 N2)) ([z2:tm num] eq num (plus (minus I N12) N2) (plus (plus I z2) N2)) (symm num (neg (+ N1 N2)) (+ (neg N1) (neg N2)) (pf_neg_sum_sum_negs N1 N2)) p2) ([p3:pf (eq num (plus (minus I N12) N2) (plus (plus I (plus (neg N1) (neg N2))) N2))] cut (eq num (plus (minus I N12) N2) (plus (plus (plus I (neg N1)) (neg N2)) N2)) (== num (plus (minus I N12) N2) (minus I N1)) (congr num (plus (plus I (neg N1)) (neg N2)) (plus I (plus (neg N1) (neg N2))) ([z3:tm num] eq num (plus (minus I N12) N2) (plus z3 N2)) (assoc_add I (neg N1) (neg N2)) p3) ([p4:pf (eq num (plus (minus I N12) N2) (plus (minus (minus I N1) N2) N2))] cut (== num (+ (- (minus I N1) N2) N2) (minus I N1)) (== num (plus (minus I N12) N2) (minus I N1)) (cancel_a-b+b (minus I N1) N2) ([p5:pf (eq num (plus (minus (minus I N1) N2) N2) (minus I N1))] trans num (plus (minus I N12) N2) (plus (minus (minus I N1) N2) N2) (minus I N1) p4 p5)))).
list_cat_assoc_aux1 : {I:tnum} {A:tnum} {B:tnum} pf (eq num (plus (minus (minus I A) B) (plus A B)) I) = [I:tnum] [A:tnum] [B:tnum] cut (eqn (plus (plus I (neg A)) (neg B)) (plus I (plus (neg A) (neg B)))) (eq num (plus (minus (minus I A) B) (plus A B)) I) (assoc_add I (neg A) (neg B)) ([p1:pf (eq num (minus (minus I A) B) (plus I (plus (neg A) (neg B))))] cut (eq num (minus (minus I A) B) (plus I (neg (+ A B)))) (eq num (plus (minus (minus I A) B) (plus A B)) I) (congr num (neg (+ A B)) (+ (neg A) (neg B)) ([z1:tm num] eq num (minus (minus I A) B) (plus I z1)) (pf_neg_sum_sum_negs A B) p1) ([p2:pf (eq num (minus (minus I A) B) (minus I (plus A B)))] congr num (minus (minus I A) B) (minus I (plus A B)) ([z2:tm num] eq num (plus z2 (plus A B)) I) p2 (cancel_a-b+b I (plus A B)))).
list_cat_assoc : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} {L3:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L3) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3))) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [L3:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2)] [p3:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L3)] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3)) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3))) (list_valid_cat X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) L3 (list_valid_cat X1 Eq L1 L2 p1 p2) p3) ([p21:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3))] cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3))) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3))) (list_valid_cat X1 Eq L1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) p1 (list_valid_cat X1 Eq L2 L3 p2 p3)) ([p22:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)))] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L2) x3) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3)) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3))) (list_length_exists X1 Eq L2 p2) ([n2:tm num] [q15:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) n2)] list_eq_i X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) (per_rel_i num X1 eq_arith Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q11:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q12:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] equiv_i2 (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i') x') ([p31:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3)] list_cat_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) L3 i1 x3 (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i') x') p31 ([n12:tm num] [p32:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) n12)] [p33:pf (if (lt i1 n12) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3) (@ X1 form (@ num (shadowed_0 X1) L3 (minus i1 n12)) x3))] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i') x') (or_e (geq i1 n12) (not (geq i1 n12)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (ord_excluded_middle i1 n12) ([p41:pf (geq i1 n12)] cut (@ X1 form (@ num (shadowed_0 X1) L3 (minus i1 n12)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (if_e2 (lt i1 n12) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3) (@ X1 form (@ num (shadowed_0 X1) L3 (minus i1 n12)) x3) p33 (greatereq_not_lt i1 n12 p41)) ([p42:pf (@ X1 form (@ num (shadowed_0 X1) L3 (minus i1 n12)) x3)] cut (geq (minus i1 n12) zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (list_index_inrange_below X1 Eq L3 (minus i1 n12) x3 p3 (list_nth_i X1 L3 (minus i1 n12) x3 p42)) ([p43:pf (geq (minus i1 n12) zero)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (plus (minus i1 n12) n2)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (plus (minus i1 n12) n2) x3 (list_nth_cat_i2 X1 L2 n2 (minus i1 n12) L3 x3 q15 p43 (list_nth_i X1 L3 (minus i1 n12) x3 p42))) ([p44:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (plus (minus i1 n12) n2)) x3)] exists_e num ([x4:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x4) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (list_length_exists X1 Eq L1 p1) ([n1:tm num] [p45:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n1)] cut (eq num n12 (plus n1 n2)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (list_length_uniq X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) n12 (plus n1 n2) p32 (list_length_cat X1 L1 n1 L2 n2 p45 q15)) ([p46:pf (eq num n12 (plus n1 n2))] cut (eq num (plus (minus i1 n12) n2) (minus i1 n1)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (list_cat_assoc_aux n12 n1 n2 i1 p46) ([p47:pf (eq num (plus (minus i1 n12) n2) (minus i1 n1))] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (congr num (minus i1 n1) (plus (minus i1 n12) n2) ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) z1) x3) (symm num (plus (minus i1 n12) n2) (minus i1 n1) p47) p44) ([p48:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1)) x3)] cut (geq (plus (minus i1 n12) n2) zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (list_index_inrange_below X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (plus (minus i1 n12) n2) x3 (list_valid_cat X1 Eq L2 L3 p2 p3) (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (plus (minus i1 n12) n2) x3 p44)) ([p48a:pf (geq (plus (minus i1 n12) n2) zero)] cut (>= (minus i1 n1) zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (trans_geq (minus i1 n1) (plus (minus i1 n12) n2) zero (eq->geq (minus i1 n1) (plus (minus i1 n12) n2) (symm num (plus (minus i1 n12) n2) (minus i1 n1) p47)) p48a) ([p49:pf (geq (minus i1 n1) zero)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) (plus (minus i1 n1) n1)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) (plus (minus i1 n1) n1) x3 (list_nth_cat_i2 X1 L1 n1 (minus i1 n1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) x3 p45 p49 (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1) x3 p48))) ([p50:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) (plus (minus i1 n1) n1)) x3)] congr num i1 (+ (- i1 n1) n1) ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) z2) x3) (symm num (+ (- i1 n1) n1) i1 (cancel_a-b+b i1 n1)) p50))))))))))) ([p51:pf (lt i1 n12)] list_cat_e X1 L1 L2 i1 x3 (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (if_e1 (lt i1 n12) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3) (@ X1 form (@ num (shadowed_0 X1) L3 (minus i1 n12)) x3) p33 p51) ([n1:tm num] [p52:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n1)] [p53:pf (if (lt i1 n1) (@ X1 form (@ num (shadowed_0 X1) L1 i1) x3) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n1)) x3))] cut (eq num n12 (plus n1 n2)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (list_length_uniq X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) n12 (plus n1 n2) p32 (list_length_cat X1 L1 n1 L2 n2 p52 q15)) ([q16:pf (eq num n12 (plus n1 n2))] or_e (geq i1 n1) (not (geq i1 n1)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (ord_excluded_middle i1 n1) ([p54:pf (geq i1 n1)] cut (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n1)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (if_e2 (lt i1 n1) (@ X1 form (@ num (shadowed_0 X1) L1 i1) x3) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n1)) x3) p53 (greatereq_not_lt i1 n1 p54)) ([p55:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n1)) x3)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1) x3 (list_nth_cat_i1 X1 L2 n2 (minus i1 n1) x3 L3 q15 (list_nth_i X1 L2 (minus i1 n1) x3 p55))) ([p56:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1)) x3)] cut (>= (plus i1 (neg n1)) zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (trans_geq (plus i1 (neg n1)) (plus n1 (neg n1)) zero (ord_add_closure i1 n1 (neg n1) p54) (eq->geq (plus n1 (neg n1)) zero (inv_add n1))) ([p57:pf (geq (minus i1 n1) zero)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) (plus (minus i1 n1) n1)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) (plus (minus i1 n1) n1) x3 (list_nth_cat_i2 X1 L1 n1 (minus i1 n1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) x3 p52 p57 (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1) x3 p56))) ([p58:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) (plus (minus i1 n1) n1)) x3)] congr num i1 (+ (- i1 n1) n1) ([z3:tm num] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) z3) x3) (symm num (+ (- i1 n1) n1) i1 (cancel_a-b+b i1 n1)) p58))))) ([p63:pf (lt i1 n1)] list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1 x3 (list_nth_cat_i1 X1 L1 n1 i1 x3 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) p52 (list_nth_i X1 L1 i1 x3 (if_e1 (lt i1 n1) (@ X1 form (@ num (shadowed_0 X1) L1 i1) x3) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n1)) x3) p53 p63)))))))) ([p68:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3)] cut (@ num form (@ num (shadowed_0 num) eq_nat i1) i') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i') x') (eq_nat_i i1 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q11) (list_index_isNat X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1 x3 p22 (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1 x3 p68))) ([p69:pf (@ num form (@ num (shadowed_0 num) eq_nat i1) i')] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i') x') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i') x') (list_congr X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1 x3 i' x' p22 p68 p69 q12) ([p70:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i') x')] p70))))) ([p71:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i') x')] cut (@ num form (@ num (shadowed_0 num) eq_nat i') i1) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (eq_nat_i i' i1 (symm num i1 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q11)) (list_index_isNat X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i' x' p22 (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i' x' p71))) ([p71a:pf (@ num form (@ num (shadowed_0 num) eq_nat i') i1)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (per_symm X1 Eq x3 x' (list_valid_per X1 Eq L1 p1) q12) ([p71b:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x3)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (list_congr X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i' x' i1 x3 p22 p71 p71a p71b) ([p71c:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i1) x3)] list_cat_e X1 L1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) i1 x3 (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) p71c ([n1:tm num] [p72:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n1)] [p73:pf (if (lt i1 n1) (@ X1 form (@ num (shadowed_0 X1) L1 i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1)) x3))] or_e (geq i1 n1) (not (geq i1 n1)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (ord_excluded_middle i1 n1) ([p81:pf (geq i1 n1)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (if_e2 (lt i1 n1) (@ X1 form (@ num (shadowed_0 X1) L1 i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1)) x3) p73 (greatereq_not_lt i1 n1 p81)) ([p82:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1)) x3)] list_cat_e X1 L2 L3 (minus i1 n1) x3 (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) p82 ([n3:tm num] [p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) n3)] [p84:pf (if (lt (minus i1 n1) n3) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n1)) x3) (@ X1 form (@ num (shadowed_0 X1) L3 (minus (minus i1 n1) n3)) x3))] or_e (geq (minus i1 n1) n3) (not (geq (minus i1 n1) n3)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (ord_excluded_middle (minus i1 n1) n3) ([p91:pf (geq (minus i1 n1) n3)] cut (>= i1 (plus n1 n3)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (trans_geq i1 (+ (- i1 n1) n1) (plus n1 n3) (eq->geq i1 (+ (- i1 n1) n1) (symm num (+ (- i1 n1) n1) i1 (cancel_a-b+b i1 n1))) (trans_geq (+ (minus i1 n1) n1) (+ n3 n1) (plus n1 n3) (greatereq_plus_cong2 (minus i1 n1) n3 n1 p91) (eq->geq (plus n3 n1) (plus n1 n3) (comm_add n3 n1)))) ([p92:pf (geq i1 (plus n1 n3))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (plus n1 n3)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (list_length_cat X1 L1 n1 L2 n3 p72 p4) ([p93:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (plus n1 n3))] cut (>= (plus i1 (neg (plus n1 n3))) zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (trans_geq (plus i1 (neg (plus n1 n3))) (plus (plus n1 n3) (neg (plus n1 n3))) zero (ord_add_closure i1 (plus n1 n3) (neg (plus n1 n3)) p92) (eq->geq (plus (plus n1 n3) (neg (plus n1 n3))) zero (inv_add (plus n1 n3)))) ([p5:pf (geq (minus i1 (plus n1 n3)) zero)] cut (@ X1 form (@ num (shadowed_0 X1) L3 (minus (minus i1 n1) n3)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (if_e2 (lt (minus i1 n1) n3) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n1)) x3) (@ X1 form (@ num (shadowed_0 X1) L3 (minus (minus i1 n1) n3)) x3) p84 (greatereq_not_lt (minus i1 n1) n3 p91)) ([p6:pf (@ X1 form (@ num (shadowed_0 X1) L3 (minus (minus i1 n1) n3)) x3)] cut (geq (minus (minus i1 n1) n3) zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (list_index_inrange_below X1 Eq L3 (minus (minus i1 n1) n3) x3 p3 (list_nth_i X1 L3 (minus (minus i1 n1) n3) x3 p6)) ([p96:pf (geq (minus (minus i1 n1) n3) zero)] cut (eq num (plus (minus (minus i1 n1) n3) (plus n1 n3)) i1) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (list_cat_assoc_aux1 i1 n1 n3) ([p97:pf (eq num (plus (minus (minus i1 n1) n3) (plus n1 n3)) i1)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (congr num i1 (plus (minus (minus i1 n1) n3) (plus n1 n3)) ([z4:tm num] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) z4) x3) (symm num (plus (minus (minus i1 n1) n3) (plus n1 n3)) i1 p97) (list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) (plus (minus (minus i1 n1) n3) (plus n1 n3)) x3 (list_nth_cat_i2 X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (plus n1 n3) (minus (minus i1 n1) n3) L3 x3 p93 p96 (list_nth_i X1 L3 (minus (minus i1 n1) n3) x3 p6)))) ([p100:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3)] p100)))))))) ([p101:pf (lt (minus i1 n1) n3)] cut (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n1)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (if_e1 (lt (minus i1 n1) n3) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n1)) x3) (@ X1 form (@ num (shadowed_0 X1) L3 (minus (minus i1 n1) n3)) x3) p84 p101) ([p102:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus i1 n1)) x3)] cut (geq (minus i1 n1) zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (list_index_inrange_below X1 Eq L2 (minus i1 n1) x3 p2 (list_nth_i X1 L2 (minus i1 n1) x3 p102)) ([p103:pf (geq (minus i1 n1) zero)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (plus (minus i1 n1) n1)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (plus (minus i1 n1) n1) x3 (list_nth_cat_i2 X1 L1 n1 (minus i1 n1) L2 x3 p72 p103 (list_nth_i X1 L2 (minus i1 n1) x3 p102))) ([p104:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (plus (minus i1 n1) n1)) x3)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (congr num i1 (+ (- i1 n1) n1) ([z5:tm num] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) z5) x3) (symm num (+ (- i1 n1) n1) i1 (cancel_a-b+b i1 n1)) p104) ([p105:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1 x3 (list_nth_cat_i1 X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (plus n1 n3) i1 x3 L3 (list_length_cat X1 L1 n1 L2 n3 p72 p4) (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1 x3 p105))) ([p106:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3)] p106))))))))) ([p131:pf (lt i1 n1)] cut (@ X1 form (@ num (shadowed_0 X1) L1 i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (if_e1 (lt i1 n1) (@ X1 form (@ num (shadowed_0 X1) L1 i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3) (minus i1 n1)) x3) p73 p131) ([p132:pf (@ X1 form (@ num (shadowed_0 X1) L1 i1) x3)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1 x3 (list_nth_cat_i1 X1 L1 n1 i1 x3 L2 p72 (list_nth_i X1 L1 i1 x3 p132))) ([p133:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1) x3)] exists_e num ([x4:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L2) x4) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (list_length_exists X1 Eq L2 p2) ([n4:tm num] [p134:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L2) n4)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3) (list_nth_e X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1 x3 (list_nth_cat_i1 X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (plus n1 n4) i1 x3 L3 (list_length_cat X1 L1 n1 L2 n4 p72 p134) (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i1 x3 p133))) ([p136:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i1) x3)] p136))))))))))) ([i2:tm num] [x4:tm X1] [q2:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i2) x4)] and_i (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x5:tm num] _eq num x3 x5)) i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (def2_i num num ([x3:tm num] [x5:tm num] _eq num x3 x5) i2 i2 (refl num i2)) (list_member_valid X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) x4 p21 (list_member_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i2 x4 (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) L3) i2 x4 q2)))) ([i':tm num] [x':tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i') x')] and_i (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x4:tm num] _eq num x3 x4)) i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (def2_i num num ([x3:tm num] [x4:tm num] _eq num x3 x4) i' i' (refl num i')) (list_member_valid X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) x' p22 (list_member_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i' x' (list_nth_i X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L2) L3)) i' x' q3))))) p21))).
list_cat_cons : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {A:tm X1} {L1:tm (list X1)} {L2:tm (list X1)} pf (@ X1 form (@ X1 (X1 arrow form) Eq A) A) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2))) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [A:tm X1] [L1:tm (list X1)] [L2:tm (list X1)] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq A) A)] [p2:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L1)] [p3:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L2)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2))) (and_e1 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) L1 i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) L1 i1) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i2) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i2) y)))))) Eq L1 p2)) ([p4:pf (@ (per X1) form (validper X1) Eq)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L1) x3) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2))) (list_length_exists X1 Eq L1 p2) ([n:tm num] [p6:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L1) n)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) (succ n)) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2)) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2))) (list_length_cons X1 Eq A L1 n p1 p6) ([p7:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) (succ n))] list_eq_i X1 Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) (per_rel_i num X1 eq_arith Eq (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) ([i3:tm num] [i':tm num] [x6:tm X1] [x':tm X1] [q11:pf (@ num form (@ num (shadowed_0 num) eq_arith i3) i')] [q12:pf (@ X1 form (@ X1 (X1 arrow form) Eq x6) x')] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i') x') (equiv_i2 (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) ([p11:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6)] list_cat_e X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) L2 i3 x6 (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) p11 ([n':tm num] [p12:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) n')] [p13:pf (if (lt i3 n') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i3) x6) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i3 n')) x6))] or_e (geq i3 (succ n)) (not (geq i3 (succ n))) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (excluded_middle (geq i3 (succ n))) ([p14:pf (geq i3 (succ n))] cut (>= (plus i3 (neg one)) n) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (trans_geq (plus i3 (neg one)) (plus (succ n) (neg one)) n (ord_add_closure i3 (succ n) (neg one) p14) (eq->geq (pred (succ n)) n (predsucc n))) ([p14b:pf (geq (pred i3) n)] cut (@ X1 form (@ num (shadowed_0 X1) L2 (minus i3 (succ n))) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (list_cat_e2 X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) L2 i3 x6 (succ n) p11 p7 p14) ([p14d:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus i3 (succ n))) x6)] cut (== num (+ i3 (neg (plus n one))) (- (- i3 one) n)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (trans num (+ i3 (neg (plus n one))) (+ i3 (neg (plus one n))) (- (- i3 one) n) (minus_cong i3 i3 (plus n one) (plus one n) (refl num i3) (comm_add n one)) (symm num (- (- i3 one) n) (- i3 (+ one n)) (minus_assoc3 i3 one n))) ([p14e:pf (eq num (minus i3 (succ n)) (minus (pred i3) n))] cut (@ X1 form (@ num (shadowed_0 X1) L2 (minus (pred i3) n)) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (congr num (minus (pred i3) n) (minus i3 (succ n)) ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L2 z1) x6) (symm num (minus i3 (succ n)) (minus (pred i3) n) p14e) p14d) ([p14f:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus (pred i3) n)) x6)] list_cons_i2 i3 X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) x6 Eq A (gt->neq i3 zero (trans_geq_gt i3 (succ n) zero p14 (trans_gt_geq (succ n) n zero (succ_greater n) (isNat->geq_zero n (list_length_isNat X1 L1 n p6))))) (list_cat_i2 X1 L1 n (pred i3) L2 x6 p6 p14b p14f)))))) ([p15:pf (lt i3 (succ n))] cut (< (+ i3 (neg one)) n) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (trans_lt_leq (+ i3 (neg one)) (+ (succ n) (neg one)) n (lt_plus_cong1 (succ n) i3 (neg one) p15) (eq->leq (pred (succ n)) n (predsucc n))) ([p15b:pf (lt (pred i3) n)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i3) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (list_cat_e1 X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) L2 i3 x6 (succ n) p11 p7 p15) ([p15c:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i3) x6)] or_e (eq num i3 zero) (not (eq num i3 zero)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (excluded_middle (eq num i3 zero)) ([p41:pf (eq num i3 zero)] list_cons_i1 i3 X1 Eq x6 A (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) p41 (list_cons_e1 X1 Eq A L1 i3 x6 p15c p41)) ([p51:pf (neq num i3 zero)] cut (@ X1 form (@ num (shadowed_0 X1) L1 (pred i3)) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (list_cons_e2 X1 Eq A L1 i3 x6 p15c p51) ([p52:pf (@ X1 form (@ num (shadowed_0 X1) L1 (pred i3)) x6)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (pred i3)) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (list_cat_i1 X1 L1 n (pred i3) x6 L2 p6 p15b p52) ([p53:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (pred i3)) x6)] list_cons_i2 i3 X1 (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) x6 Eq A p51 p53)))))))) ([p16:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6)] or_e (geq i3 (succ n)) (not (geq i3 (succ n))) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6) (excluded_middle (geq i3 (succ n))) ([p31:pf (geq i3 (succ n))] cut (>= (plus i3 (neg one)) n) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6) (trans_geq (plus i3 (neg one)) (plus (succ n) (neg one)) n (ord_add_closure i3 (succ n) (neg one) p31) (eq->geq (pred (succ n)) n (predsucc n))) ([p31b:pf (geq (pred i3) n)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (pred i3)) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6) (list_cons_e2 X1 Eq A (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i3 x6 p16 (gt->neq i3 zero (trans_geq_gt i3 (succ n) zero p31 (trans_gt_geq (succ n) n zero (succ_greater n) (isNat->geq_zero n (list_length_isNat X1 L1 n p6)))))) ([p32:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (pred i3)) x6)] cut (@ X1 form (@ num (shadowed_0 X1) L2 (minus (pred i3) n)) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6) (list_cat_e2 X1 L1 L2 (pred i3) x6 n p32 p6 p31b) ([p33:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus (pred i3) n)) x6)] cut (== num (+ i3 (neg (plus n one))) (- (- i3 one) n)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6) (trans num (+ i3 (neg (plus n one))) (+ i3 (neg (plus one n))) (- (- i3 one) n) (minus_cong i3 i3 (plus n one) (plus one n) (refl num i3) (comm_add n one)) (symm num (- (- i3 one) n) (- i3 (+ one n)) (minus_assoc3 i3 one n))) ([p34:pf (eq num (minus i3 (succ n)) (minus (pred i3) n))] cut (@ X1 form (@ num (shadowed_0 X1) L2 (minus i3 (succ n))) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6) (congr num (minus i3 (succ n)) (minus (pred i3) n) ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) L2 z2) x6) p34 p33) ([p35:pf (@ X1 form (@ num (shadowed_0 X1) L2 (minus i3 (succ n))) x6)] list_cat_i2 X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) (succ n) i3 L2 x6 p7 p31 p35)))))) ([p17:pf (lt i3 (succ n))] cut (< (+ i3 (neg one)) n) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6) (trans_lt_leq (+ i3 (neg one)) (+ (succ n) (neg one)) n (lt_plus_cong1 (succ n) i3 (neg one) p17) (eq->leq (pred (succ n)) n (predsucc n))) ([p17b:pf (lt (pred i3) n)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i3) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6) (or_e (eq num i3 zero) (not (eq num i3 zero)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i3) x6) (excluded_middle (eq num i3 zero)) ([p18a:pf (eq num i3 zero)] list_cons_i1 i3 X1 Eq x6 A L1 p18a (list_cons_e1 X1 Eq A (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i3 x6 p16 p18a)) ([p19a:pf (neq num i3 zero)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (pred i3)) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i3) x6) (list_cons_e2 X1 Eq A (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) i3 x6 p16 p19a) ([p19d:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) (pred i3)) x6)] cut (@ X1 form (@ num (shadowed_0 X1) L1 (pred i3)) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i3) x6) (list_cat_e1 X1 L1 L2 (pred i3) x6 n p19d p6 p17b) ([p19e:pf (@ X1 form (@ num (shadowed_0 X1) L1 (pred i3)) x6)] list_cons_i2 i3 X1 L1 x6 Eq A p19a p19e)))) ([p19z:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i3) x6)] list_cat_i1 X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) (succ n) i3 x6 L2 p7 p17 p19z))))) ([p20:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6)] congr num i' i3 ([z3:tm num] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) z3) x') (symm num i3 i' (eq_arith_e i3 i' q11)) (equiv_trans (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i3) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x6) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i3) x') p20 (list_valid_equiv X1 Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) x6 x' i3 (list_valid_cons X1 Eq A (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) p1 (list_valid_cat X1 Eq L1 L2 p2 p3)) q12)))) ([i4:tm num] [x7:tm X1] [q2:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) L2) i4) x7)] and_i (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x4:tm num] _eq num x3 x4)) i4) i4) (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7) (def2_i num num ([x3:tm num] [x4:tm num] _eq num x3 x4) i4 i4 (refl num i4)) (list_cat_e X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) L2 i4 x7 (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7) q2 ([n':tm num] [p21:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1)) n')] [p22:pf (if (lt i4 n') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i4) x7) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i4 n')) x7))] or_e (lt i4 n') (not (lt i4 n')) (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7) (excluded_middle (lt i4 n')) ([p23:pf (lt i4 n')] list_nth_valid X1 Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i4 x7 (list_valid_cons X1 Eq A L1 p1 p2) (list_nth_i X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i4 x7 (if_e1 (lt i4 n') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i4) x7) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i4 n')) x7) p22 p23))) ([p25:pf (not (lt i4 n'))] list_nth_valid X1 Eq L2 (minus i4 n') x7 p3 (list_nth_i X1 L2 (minus i4 n') x7 (if_e2 (lt i4 n') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) i4) x7) (@ X1 form (@ num (shadowed_0 X1) L2 (minus i4 n')) x7) p22 p25)))))) ([i':tm num] [x':tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i') x')] and_i (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x4:tm num] _eq num x3 x4)) i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (def2_i num num ([x3:tm num] [x4:tm num] _eq num x3 x4) i' i' (refl num i')) (list_nth_valid X1 Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i' x' (list_valid_cons X1 Eq A (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2) p1 (list_valid_cat X1 Eq L1 L2 p2 p3)) (list_nth_i X1 (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) (@ (list X1) (list X1) (@ (list X1) (list X1 arrow list X1) (list_cat X1) L1) L2)) i' x' q3)))) (list_valid_cat X1 Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L1) L2 (list_valid_cons X1 Eq A L1 p1 p2) p3)))).
sublist_i : {L:tm num} {I:tm num} {X1:tp} {Lst:tm (num arrow X1 arrow form)} {F:tnum} {X:tm X1} pf (@ num form (@ num (shadowed_0 num) inrange L) I) -> pf (@ X1 form (@ num (X1 arrow form) Lst (plus I F)) X) -> pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) I) X) = [L:tm num] [I:tm num] [X1:tp] [Lst:tm (num arrow X1 arrow form)] [F:tnum] [X:tm X1] [p1:pf (@ num form (@ num (shadowed_0 num) inrange L) I)] [p2:pf (@ X1 form (@ num (X1 arrow form) Lst (plus I F)) X)] def5_i num num (list X1) num X1 ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7) F L Lst I X (and_i (@ num form (@ num (shadowed_0 num) inrange L) I) (@ X1 form (@ num (X1 arrow form) Lst (plus I F)) X) p1 p2).
sublist_e : {X1:tp} {F:tm num} {L:tm num} {Lst:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) I) X) -> pf (@ num form (@ num (shadowed_0 num) inrange L) I and @ X1 form (@ num (shadowed_0 X1) Lst (plus I F)) X) = [X1:tp] [F:tm num] [L:tm num] [Lst:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) I) X)] def5_e X1 num (list X1) num num ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7) F L Lst I X p1.
sublist_e1 : {X1:tp} {F:tm num} {L:tm num} {Lst:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) I) X) -> pf (@ num form (@ num (shadowed_0 num) inrange L) I) = [X1:tp] [F:tm num] [L:tm num] [Lst:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) I) X)] and_e1 (@ num form (@ num (shadowed_0 num) inrange L) I) (@ X1 form (@ num (X1 arrow form) Lst (plus I F)) X) (def5_e X1 num (list X1) num num ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7) F L Lst I X p1).
sublist_e2 : {X1:tp} {F:tm num} {L:tm num} {Lst:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) I) X) -> pf (@ X1 form (@ num (shadowed_0 X1) Lst (plus I F)) X) = [X1:tp] [F:tm num] [L:tm num] [Lst:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) I) X)] and_e2 (@ num form (@ num (shadowed_0 num) inrange L) I) (@ X1 form (@ num (X1 arrow form) Lst (plus I F)) X) (def5_e X1 num (list X1) num num ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7) F L Lst I X p1).
sublist_nil' : {X1:tp} {Lst:tm (list X1)} {N:tm num} {F:tnum} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) N) -> pf (geq F N) -> pf (forall num ([l:tm num] @ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) l) Lst))) = [X1:tp] [Lst:tm (list X1)] [N:tm num] [F:tnum] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) N)] [p3:pf (geq F N)] forall_i num ([x3:tm num] @ (list X1) form (lam (list X1) form ([x4:tm (list X1)] forall2 num X1 ([i1:tm num] [x5:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i1) x5)))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) x3) Lst)) ([l:tm num] def1_i (list X1) ([x3:tm (list X1)] forall2 num X1 ([i2:tm num] [x6:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i2) x6))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) l) Lst) (forall2_i num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) l) Lst) x3) x4)) ([i3:tm num] [x7:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) l) Lst) i3) x7) ([q1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) l) Lst) i3) x7)] and_l (@ num form (@ num (shadowed_0 num) inrange l) i3) (@ X1 form (@ num (shadowed_0 X1) Lst (plus i3 F)) x7) false (sublist_e X1 F l Lst i3 x7 q1) ([q2:pf (@ num form (@ num (shadowed_0 num) inrange l) i3)] [q3:pf (@ X1 form (@ num (shadowed_0 X1) Lst (plus i3 F)) x7)] cut (@ num form (@ num (shadowed_0 num) inrange N) (plus i3 F)) false (list_index_inrange X1 Lst N (plus i3 F) x7 p2 (list_nth_i X1 Lst (plus i3 F) x7 q3)) ([q4:pf (@ num form (@ num (shadowed_0 num) inrange N) (plus i3 F))] cut (>= (+ i3 F) (+ zero N)) false (geq_geq_plus i3 zero F N (inrange_e2 l i3 q2) p3) ([q5:pf (>= (+ i3 F) (+ zero N))] cut (geq (plus i3 F) N) false (congr num N (+ zero N) ([z1:tm num] geq (plus i3 F) z1) (symm num (+ zero N) N (zero_plus N)) q5) ([q6:pf (geq (plus i3 F) N)] not_e (geq (plus i3 F) N) (inrange_e3 N (plus i3 F) q4) q6)))))))).
sublist_nil'' : {X1:tp} {L:tm (list X1)} pf (@ (list X1) form (list_is_nil X1) L) -> pf (forall2 num num ([f:tm num] [l:tm num] @ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) f) l) L))) = [X1:tp] [L:tm (list X1)] [p1:pf (@ (list X1) form (list_is_nil X1) L)] forall2_i num num ([x3:tm num] [x4:tm num] @ (list X1) form (lam (list X1) form ([x5:tm (list X1)] forall2 num X1 ([i1:tm num] [x6:tm X1] not (@ X1 form (@ num (X1 arrow form) x5 i1) x6)))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) x3) x4) L)) ([f:tm num] [l:tm num] def1_i (list X1) ([x3:tm (list X1)] forall2 num X1 ([i2:tm num] [x7:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i2) x7))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) f) l) L) (forall2_i num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) f) l) L) x3) x4)) ([i3:tm num] [x8:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) f) l) L) i3) x8) ([p2:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) f) l) L) i3) x8)] cut (@ X1 form (@ num (shadowed_0 X1) L (plus i3 f)) x8) false (sublist_e2 X1 f l L i3 x8 p2) ([p3:pf (@ X1 form (@ num (shadowed_0 X1) L (plus i3 f)) x8)] not_e (@ X1 form (@ num (X1 arrow form) L (plus i3 f)) x8) (forall2_e num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) L x3) x4)) (def1_e (list X1) ([x3:tm (list X1)] forall2 num X1 ([i4:tm num] [x9:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i4) x9))) L p1) (plus i3 f) x8) p3))))).
sublist_proper_range_i : {L:tnum} {X1:tp} {Lst:tm (list X1)} {N:tm num} {F:tm num} pf (isNat L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) F) -> pf (leq (plus F L) N) -> pf (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L) = [L:tnum] [X1:tp] [Lst:tm (list X1)] [N:tm num] [F:tm num] [p1:pf (isNat L)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) N)] [p3:pf (@ num form (@ num (shadowed_0 num) inrange N) F)] [p4:pf (leq (plus F L) N)] def3_i (list X1) num num ([x3:tm (list X1)] [x4:tm num] [x5:tm num] isNat x5 and exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) n and @ num form (@ num (shadowed_0 num) inrange n) x4 and leq (plus x4 x5) n)) Lst F L (and_i (isNat L) (exists num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) Lst) x3 and @ num form (@ num (shadowed_0 num) inrange x3) F and leq (plus F L) x3)) p1 (exists_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) Lst) x3 and @ num form (@ num (shadowed_0 num) inrange x3) F and leq (plus F L) x3) N (and3_i (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) N) (@ num form (@ num (shadowed_0 num) inrange N) F) (leq (plus F L) N) p2 p3 p4))).
sublist_proper_range_e1 : {X1:tp} {Lst:tm (list X1)} {F:tm num} {L:tm num} pf (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L) -> pf (isNat L) = [X1:tp] [Lst:tm (list X1)] [F:tm num] [L:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L)] and_e1 (isNat L) (exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n and @ num form (@ num (shadowed_0 num) inrange n) F and leq (plus F L) n)) (def3_e num num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm num] isNat x5 and exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x3) n and @ num form (@ num (shadowed_0 num) inrange n) x4 and leq (plus x4 x5) n)) Lst F L p1).
sublist_proper_range_e2 : {X1:tp} {Lst:tm (list X1)} {F:tm num} {L:tm num} {C:tform} pf (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L) -> ({n:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n) -> pf (@ num form (@ num (shadowed_0 num) inrange n) F) -> pf (leq (plus F L) n) -> pf C) -> pf C = [X1:tp] [Lst:tm (list X1)] [F:tm num] [L:tm num] [C:tform] [p1:pf (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L)] [p2:{n:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n) -> pf (@ num form (@ num (shadowed_0 num) inrange n) F) -> pf (leq (plus F L) n) -> pf C] cut (forall num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) Lst) x3 imp @ num form (@ num (shadowed_0 num) inrange x3) F imp leq (plus F L) x3 imp C)) C (forall_imp3_i num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) Lst) x3) ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange x3) F) ([x3:tm num] leq (plus F L) x3) ([x3:tm num] C) ([x3:tm num] [x4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) x3)] [x5:pf (@ num form (@ num (shadowed_0 num) inrange x3) F)] [x6:pf (leq (plus F L) x3)] p2 x3 x4 x5 x6)) ([x3:pf (forall num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) Lst) x3 imp @ num form (@ num (shadowed_0 num) inrange x3) F imp leq (plus F L) x3 imp C))] exists_e num ([x4:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) Lst) x4 and @ num form (@ num (shadowed_0 num) inrange x4) F and leq (plus F L) x4) C (and_e2 (isNat L) (exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n and @ num form (@ num (shadowed_0 num) inrange n) F and leq (plus F L) n)) (def3_e num num (list X1) ([x4:tm (list X1)] [x5:tm num] [x6:tm num] isNat x6 and exists num ([n:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) x4) n and @ num form (@ num (shadowed_0 num) inrange n) x5 and leq (plus x5 x6) n)) Lst F L p1)) ([n:tm num] [q1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n and @ num form (@ num (shadowed_0 num) inrange n) F and leq (plus F L) n)] p2 n (and3_e1 (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n) (@ num form (@ num (shadowed_0 num) inrange n) F) (leq (plus F L) n) q1) (and3_e2 (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n) (@ num form (@ num (shadowed_0 num) inrange n) F) (leq (plus F L) n) q1) (and3_e3 (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n) (@ num form (@ num (shadowed_0 num) inrange n) F) (leq (plus F L) n) q1))).
sublist_proper_range_prp1 : {N:tm num} {F:tm num} {L:tnum} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) F) -> pf (leq (plus F L) N) -> pf (@ num form (@ num (shadowed_0 num) inrange L) I) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (plus I F)) = [N:tm num] [F:tm num] [L:tnum] [I:tm num] [p11:pf (@ num form (@ num (shadowed_0 num) inrange N) F)] [q2:pf (leq (plus F L) N)] [p3:pf (@ num form (@ num (shadowed_0 num) inrange L) I)] cut (isInt F and geq F zero) (@ num form (@ num (shadowed_0 num) inrange N) (plus I F)) (and_i (isInt F) (geq F zero) (inrange_e1 N F p11) (inrange_e2 N F p11)) ([p1:pf (isNat F)] inrange_i (plus I F) N (closure_add I F (inrange_e1 L I p3) (and_e1 (isInt F) (geq F zero) p1)) (cut (>= (+ I F) (+ zero zero)) (geq (plus I F) zero) (geq_geq_plus I zero F zero (inrange_e2 L I p3) (and_e2 (isInt F) (geq F zero) p1)) ([q1:pf (geq (plus I F) (plus zero zero))] congr num zero (+ zero zero) ([z1:tm num] geq (plus I F) z1) (symm num (+ zero zero) zero (plus_zero zero)) q1)) (cut (geq (plus N (neg F)) (plus (plus F L) (neg F))) (lt (plus I F) N) (ord_add_closure N (plus F L) (neg F) q2) ([q3:pf (geq (plus N (neg F)) (plus (plus F L) (neg F)))] cut (geq (minus N F) L) (lt (plus I F) N) (congr num L (- (+ F L) F) ([z2:tm num] geq (minus N F) z2) (symm num (- (+ F L) F) L (cancel_a+b-a F L)) q3) ([q4:pf (geq (minus N F) L)] cut (< I (minus N F)) (lt (plus I F) N) (trans_lt_leq I L (minus N F) (inrange_e3 L I p3) q4) ([q5:pf (lt I (minus N F))] cut (> (+ (minus N F) F) (+ I F)) (lt (plus I F) N) (lt_add_closure (minus N F) I F q5) ([q6:pf (lt (plus I F) (plus (minus N F) F))] congr num N (+ (- N F) F) ([z3:tm num] lt (plus I F) z3) (symm num (+ (- N F) F) N (cancel_a-b+b N F)) q6)))))).
sublist_proper_range_prp2 : {F:tnum} {L:tnum} {N:tnum} pf (not (leq (plus F L) N)) -> pf (lt (minus N F) L) = [F:tnum] [L:tnum] [N:tnum] [p1:pf (not (leq (plus F L) N))] cut (> (+ (plus F L) (neg F)) (+ N (neg F))) (lt (minus N F) L) (lt_add_closure (plus F L) N (neg F) p1) ([q2:pf (lt (minus N F) (minus (plus F L) F))] congr num L (- (+ F L) F) ([z1:tm num] lt (minus N F) z1) (symm num (- (+ F L) F) L (cancel_a+b-a F L)) q2).
sublist_valid_proper_length : {X1:tp} {Eq:tm (eqrel X1)} {Lst:tm (list X1)} {F:tm num} {L:tm num} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Lst) -> pf (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) = [X1:tp] [Eq:tm (eqrel X1)] [Lst:tm (list X1)] [F:tm num] [L:tm num] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Lst)] [p3:pf (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L)] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i1) y)))))) Eq (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i2) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i2) y)))))) (list_valid_per X1 Eq Lst p1) (sublist_proper_range_e2 X1 Lst F L (exists num ([x3:tm num] isNat x3 and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i3) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i3) y)))))) p3 ([n:tm num] [q13:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n)] [q13a:pf (@ num form (@ num (shadowed_0 num) inrange n) F)] [q13b:pf (leq (plus F L) n)] cut (isNat n) (exists num ([x3:tm num] isNat x3 and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i4) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i4) y)))))) (list_length_isNat X1 Lst n q13) ([q15:pf (isNat n)] exists_e num ([x3:tm num] isNat x3 and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i5) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) Lst i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst i5) y))))) (exists num ([x3:tm num] isNat x3 and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i6) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i6) y)))))) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n1:tm num] isNat n1 and forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n1) i7) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) Lst i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst i7) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n2:tm num] isNat n2 and forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange n2) i8) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x12) y equiv @ X1 form (@ num (X1 arrow form) x4 i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i8) y)))))) Eq Lst p1)) ([n':tm num] [q1:pf (isNat n' and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i9) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) Lst i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst i9) y)))))] and_l (isNat n') (forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i10) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y equiv @ X1 form (@ num (X1 arrow form) Lst i10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst i10) y))))) (exists num ([x3:tm num] isNat x3 and forall num ([i11:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i11) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i11) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i11) y)))))) q1 ([q11:pf (isNat n')] [q12:pf (forall num ([i12:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') i12) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ num (X1 arrow form) Lst i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst i12) y)))))] cut (eq num n' n) (exists num ([x3:tm num] isNat x3 and forall num ([i13:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i13) (exists X1 ([x17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i13) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i13) y)))))) (list_length_uniq X1 Lst n' n (list_valid_implies_length n' X1 Eq Lst q1) q13) ([q14:pf (eq num n' n)] exists_i num ([x3:tm num] isNat x3 and forall num ([i14:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i14) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i14) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i14) y))))) L (and_i (isNat L) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange L) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) x3) x4))))) (sublist_proper_range_e1 X1 Lst F L p3) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange L) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) x3) x4)))) ([i15:tm num] if_i (@ num form (@ num (shadowed_0 num) inrange L) i15) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x3))) ([q2:pf (@ num form (@ num (shadowed_0 num) inrange L) i15)] cut (@ num form (@ num (shadowed_0 num) inrange n) (plus i15 F)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (sublist_proper_range_prp1 n F L i15 q13a q13b q2) ([q22:pf (@ num form (@ num (shadowed_0 num) inrange n) (plus i15 F))] cut (@ num form (@ num (shadowed_0 num) inrange n') (plus i15 F)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (congr num n' n ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange z1) (plus i15 F)) q14 q22) ([q23:pf (@ num form (@ num (shadowed_0 num) inrange n') (plus i15 F))] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n') (plus i15 F)) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) x19 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) y equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n') x3) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) x20 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) y equiv @ X1 form (@ num (X1 arrow form) Lst x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst x3) y)))) q12 (plus i15 F)) q23) ([x21:tm X1] [q21:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4)) x21 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x3)) (and_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y)) q21) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y) ([q4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y)] sublist_i L i15 X1 Lst F y q2 (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21) (forall X1 ([y1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y1 equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y1)) q21) y) q4))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) ([q5:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y)] and_l (@ num form (@ num (shadowed_0 num) inrange L) i15) (@ X1 form (@ num (shadowed_0 X1) Lst (plus i15 F)) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (sublist_e X1 F L Lst i15 y q5) ([q51:pf (@ num form (@ num (shadowed_0 num) inrange L) i15)] [q52:pf (@ X1 form (@ num (shadowed_0 X1) Lst (plus i15 F)) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21) (forall X1 ([y2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y2 equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y2)) q21) y) q52)))))))))) ([q3:pf (not (@ num form (@ num (shadowed_0 num) inrange L) i15))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y) ([q31:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y)] and_l (@ num form (@ num (shadowed_0 num) inrange L) i15) (@ X1 form (@ num (shadowed_0 X1) Lst (plus i15 F)) y) false (sublist_e X1 F L Lst i15 y q31) ([q32:pf (@ num form (@ num (shadowed_0 num) inrange L) i15)] [q33:pf (@ X1 form (@ num (shadowed_0 X1) Lst (plus i15 F)) y)] not_e (@ num form (@ num (shadowed_0 num) inrange L) i15) q3 q32)))))))))))))).
sublist_valid_long_length : {X1:tp} {Eq:tm (eqrel X1)} {Lst:tm (list X1)} {N:tm num} {F:tm num} {L:tnum} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Lst) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) F) -> pf (not (leq (plus F L) N)) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) = [X1:tp] [Eq:tm (eqrel X1)] [Lst:tm (list X1)] [N:tm num] [F:tm num] [L:tnum] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Lst)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) N)] [p3:pf (@ num form (@ num (shadowed_0 num) inrange N) F)] [p4:pf (not (leq (plus F L) N))] def2_i (eqrel X1) (list X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i1:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i1) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ num (X1 arrow form) x4 i1) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i1) y)))))) Eq (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) (and_i (@ (per X1) form (validper X1) Eq) (exists num ([x3:tm num] isNat x3 and forall num ([i2:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i2) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i2) y)))))) (list_valid_per X1 Eq Lst p1) (exists_e num ([x3:tm num] isNat x3 and forall num ([i3:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i3) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ num (X1 arrow form) Lst i3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst i3) y))))) (exists num ([x3:tm num] isNat x3 and forall num ([i4:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i4) (exists X1 ([x8:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i4) y)))))) (and_e2 (@ (per X1) form (validper X1) Eq) (exists num ([n:tm num] isNat n and forall num ([i5:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i5) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x9) y equiv @ X1 form (@ num (X1 arrow form) Lst i5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst i5) y)))))) (def2_e (list X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list X1)] @ (per X1) form (validper X1) x3 and exists num ([n:tm num] isNat n and forall num ([i6:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i6) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x10) y equiv @ X1 form (@ num (X1 arrow form) x4 i6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) x4 i6) y)))))) Eq Lst p1)) ([n:tm num] [q1:pf (isNat n and forall num ([i7:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i7) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ num (X1 arrow form) Lst i7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst i7) y)))))] and_l (isNat n) (forall num ([i8:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i8) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ num (X1 arrow form) Lst i8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst i8) y))))) (exists num ([x3:tm num] isNat x3 and forall num ([i9:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i9) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x13) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i9) y)))))) q1 ([q11:pf (isNat n)] [q12:pf (forall num ([i10:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) i10) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y equiv @ X1 form (@ num (X1 arrow form) Lst i10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst i10) y)))))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n) (exists num ([x3:tm num] isNat x3 and forall num ([i11:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i11) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i11) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i11) y)))))) (list_valid_implies_length n X1 Eq Lst q1) ([q13:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n)] cut (eq num n N) (exists num ([x3:tm num] isNat x3 and forall num ([i12:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i12) (exists X1 ([x16:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i12) y)))))) (list_length_uniq X1 Lst n N q13 p2) ([q14:pf (eq num n N)] cut (isNat N) (exists num ([x3:tm num] isNat x3 and forall num ([i13:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i13) (exists X1 ([x17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i13) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i13) y)))))) (list_length_isNat X1 Lst N p2) ([q15:pf (isNat N)] exists_i num ([x3:tm num] isNat x3 and forall num ([i14:tm num] if (@ num form (@ num (shadowed_0 num) inrange x3) i14) (exists X1 ([x18:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) x18 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x18) y equiv @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i14) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i14) y))))) (minus n F) (and_i (isNat (minus n F)) (forall num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (minus n F)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) x3) x4))))) (congr num n N ([z1:tm num] isNat (minus z1 F)) q14 (inrange_isNat' N F q15 p3)) (forall_i num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange (minus n F)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) x3) x4)))) ([i15:tm num] if_i (@ num form (@ num (shadowed_0 num) inrange (minus n F)) i15) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x3))) ([q4:pf (@ num form (@ num (shadowed_0 num) inrange (minus n F)) i15)] cut (lt (minus N F) L) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (sublist_proper_range_prp2 F L N p4) ([q41a:pf (lt (minus N F) L)] cut (lt (minus n F) L) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (congr num n N ([z2:tm num] lt (minus z2 F) L) q14 q41a) ([q41b:pf (lt (minus n F) L)] cut (isInt (plus i15 F)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (closure_add i15 F (inrange_e1 (minus n F) i15 q4) (inrange_e1 N F p3)) ([q41c:pf (isInt (plus i15 F))] cut (>= (+ i15 F) zero) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (geq_zero_plus i15 F (inrange_e2 (minus n F) i15 q4) (inrange_e2 N F p3)) ([q41d:pf (geq (plus i15 F) zero)] cut (> (+ (minus n F) F) (+ i15 F)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (gt_plus_cong1 (minus n F) i15 F (inrange_e3 (minus n F) i15 q4)) ([q41e:pf (lt (plus i15 F) (plus (minus n F) F))] cut (lt (plus i15 F) n) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (congr num n (+ (- n F) F) ([z3:tm num] lt (plus i15 F) z3) (symm num (+ (- n F) F) n (cancel_a-b+b n F)) q41e) ([q41f:pf (lt (plus i15 F) n)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) (if_e1 (@ num form (@ num (shadowed_0 num) inrange n) (plus i15 F)) (exists X1 ([x19:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) x19 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x19) y equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y))) (forall_e num ([x3:tm num] if (@ num form (@ num (shadowed_0 num) inrange n) x3) (exists X1 ([x20:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) x20 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x20) y equiv @ X1 form (@ num (X1 arrow form) Lst x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ num (X1 arrow form) Lst x3) y)))) q12 (plus i15 F)) (inrange_i (plus i15 F) n q41c q41d q41f)) ([x21:tm X1] [q42:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y))] and_l (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4))) q42 ([q42a:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21)] [q42b:pf (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) y equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x4)) x21 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) x21) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x3)) q42a (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y) ([q46:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y)] sublist_i L i15 X1 Lst F y (inrange_i i15 L (inrange_e1 (minus n F) i15 q4) (inrange_e2 (minus n F) i15 q4) (trans_lt i15 (minus n F) L (inrange_e3 (minus n F) i15 q4) q41b)) (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) x3) q42b y) q46))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) ([q47:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y)] and_l (@ num form (@ num (shadowed_0 num) inrange L) i15) (@ X1 form (@ num (shadowed_0 X1) Lst (plus i15 F)) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (sublist_e X1 F L Lst i15 y q47) ([q47a:pf (@ num form (@ num (shadowed_0 num) inrange L) i15)] [q47b:pf (@ X1 form (@ num (shadowed_0 X1) Lst (plus i15 F)) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x21) y) (@ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x21) x3 equiv @ X1 form (@ num (X1 arrow form) Lst (plus i15 F)) x3) q42b y) q47b))))))))))))))) ([q5:pf (not (@ num form (@ num (shadowed_0 num) inrange (minus n F)) i15))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) x3)) ([y:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y) ([q51:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i15) y)] and_l (@ num form (@ num (shadowed_0 num) inrange L) i15) (@ X1 form (@ num (shadowed_0 X1) Lst (plus i15 F)) y) false (sublist_e X1 F L Lst i15 y q51) ([q52:pf (@ num form (@ num (shadowed_0 num) inrange L) i15)] [q53:pf (@ X1 form (@ num (shadowed_0 X1) Lst (plus i15 F)) y)] cut (@ num form (@ num (shadowed_0 num) inrange n) (plus i15 F)) false (list_index_inrange X1 Lst n (plus i15 F) y q13 (list_nth_i X1 Lst (plus i15 F) y q53)) ([q54:pf (@ num form (@ num (shadowed_0 num) inrange n) (plus i15 F))] not_e (@ num form (@ num (shadowed_0 num) inrange (minus n F)) i15) q5 (inrange_i i15 (minus n F) (inrange_e1 L i15 q52) (inrange_e2 L i15 q52) (cut (> (+ n (neg F)) (+ (plus i15 F) (neg F))) (lt i15 (minus n F)) (gt_plus_cong1 n (plus i15 F) (neg F) (inrange_e3 n (plus i15 F) q54)) ([q55:pf (lt (minus (plus i15 F) F) (minus n F))] congr num i15 (- (+ i15 F) F) ([z4:tm num] lt z4 (minus n F)) (symm num (- (+ i15 F) F) i15 (cancel_a+b-b i15 F)) q55)))))))))))))))))).
sublist_valid : {X1:tp} {Eq:tm (eqrel X1)} {Lst:tm (list X1)} {F:tnum} {L:tnum} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Lst) -> pf (isNat F) -> pf (isNat L) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) = [X1:tp] [Eq:tm (eqrel X1)] [Lst:tm (list X1)] [F:tnum] [L:tnum] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) Lst)] [p2:pf (isNat F)] [p3:pf (isNat L)] exists_e num ([x3:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) Lst) x3) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) (list_length_exists X1 Eq Lst p1) ([n:tm num] [p4:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n)] or_e (lt F n) (not (lt F n)) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) (excluded_middle (lt F n)) ([q3:pf (lt F n)] cut (@ num form (@ num (shadowed_0 num) inrange n) F) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) (inrange_i F n (and_e1 (isInt F) (geq F zero) p2) (and_e2 (isInt F) (geq F zero) p2) q3) ([q31:pf (@ num form (@ num (shadowed_0 num) inrange n) F)] or_e (leq (plus F L) n) (not (leq (plus F L) n)) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) (excluded_middle (leq (plus F L) n)) ([q1:pf (leq (plus F L) n)] cut (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) (sublist_proper_range_i L X1 Lst n F p3 p4 q31 q1) ([q12:pf (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L)] sublist_valid_proper_length X1 Eq Lst F L p1 q12)) ([q2:pf (not (leq (plus F L) n))] sublist_valid_long_length X1 Eq Lst n F L p1 p4 q31 q2))) ([q4:pf (not (lt F n))] cut (geq F n) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) (equiv_e2 (geq F n) (not (not (geq F n))) (equiv_not_not (geq F n)) q4) ([q41:pf (geq F n)] cut (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) (forall_e num ([x3:tm num] @ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) x3) Lst)) (sublist_nil' X1 Lst n F p4 q41) L) ([q42:pf (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst))] list_valid_nil' X1 Eq (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) (list_valid_per X1 Eq Lst p1) q42)))).
sublist_length : {X1:tp} {Lst:tm (list X1)} {F:tm num} {L:tm num} pf (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) L) = [X1:tp] [Lst:tm (list X1)] [F:tm num] [L:tm num] [p5:pf (@ num form (@ num (num arrow form) (@ (list X1) (num arrow num arrow form) (sublist_proper_range X1) Lst) F) L)] sublist_proper_range_e2 X1 Lst F L (@ num form (@ (list X1) (num arrow form) (lam2 (list X1) num form ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) L) p5 ([n:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) Lst) n)] [p11:pf (@ num form (@ num (shadowed_0 num) inrange n) F)] [p12:pf (leq (plus F L) n)] def2_i (list X1) num ([x3:tm (list X1)] [x4:tm num] isNat x4 and forall num ([I:tm num] @ num form (@ num (shadowed_0 num) inrange x4) I equiv @ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) x3) I)) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) L (and_i (isNat L) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange L) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) x3)) (sublist_proper_range_e1 X1 Lst F L p5) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange L) x3 equiv @ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) x3) ([i1:tm num] equiv_i (@ num form (@ num (shadowed_0 num) inrange L) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) i1) (imp_i (@ num form (@ num (shadowed_0 num) inrange L) i1) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) i1) ([q1:pf (@ num form (@ num (shadowed_0 num) inrange L) i1)] cut (@ num form (@ num (shadowed_0 num) inrange n) (plus i1 F)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) i1) (sublist_proper_range_prp1 n F L i1 p11 p12 q1) ([q11:pf (@ num form (@ num (shadowed_0 num) inrange n) (plus i1 F))] cut (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) Lst) (plus i1 F)) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) i1) (list_length_e1 X1 Lst n (plus i1 F) p1 q11) ([q12:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) Lst) (plus i1 F))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) Lst (plus i1 F)) x3) (@ num form (@ (rel num X1) (num arrow form) (lam2 (rel num X1) num form ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) Lst (plus i1 F) q12) ([x3:tm X1] [q13:pf (@ X1 form (@ num (shadowed_0 X1) Lst (plus i1 F)) x3)] def2_i (rel num X1) num ([x4:tm (rel num X1)] [x5:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) y)) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i1 (exists_i X1 ([x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i1) x4) x3 (sublist_i L i1 X1 Lst F x3 q1 q13))))))) (imp_i (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) i1) (@ num form (@ num (shadowed_0 num) inrange L) i1) ([q2:pf (@ num form (@ (rel num X1) (shadowed_0 num) (domain num X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst)) i1)] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i1) x3) (@ num form (@ num (shadowed_0 num) inrange L) i1) (def2_e num (rel num X1) ([x3:tm (rel num X1)] [x4:tm num] exists X1 ([y:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) y)) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i1 q2) ([x4:tm X1] [q21:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) Lst) i1) x4)] sublist_e1 X1 F L Lst i1 x4 q21))))))).
list_eq_sublist : {X1:tp} {Eq:tm (eqrel X1)} {L1:tm (list X1)} {L2:tm (list X1)} {F:tnum} {L:tnum} pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2) -> pf (isNat F) -> pf (isNat L) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1)) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2)) = [X1:tp] [Eq:tm (eqrel X1)] [L1:tm (list X1)] [L2:tm (list X1)] [F:tnum] [L:tnum] [p2:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L1) L2)] [p3:pf (isNat F)] [p4:pf (isNat L)] list_eq_i X1 Eq (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2) (per_rel_i num X1 eq_arith Eq (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2) ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q1:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] cut (@ num form (@ num (num arrow form) (lam2 num num form ([x4:tm num] [x5:tm num] _eq num x4 x5)) (plus i1 F)) (plus i' F)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1) i1) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2) i') x') (def2_i num num ([x4:tm num] [x5:tm num] _eq num x4 x5) (plus i1 F) (plus i' F) (eq_plus i1 i' F (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1))) ([q14:pf (@ num form (@ num (shadowed_0 num) eq_arith (plus i1 F)) (plus i' F))] cut (@ X1 form (@ num (shadowed_0 X1) L1 (plus i1 F)) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 (plus i' F)) x') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1) i1) x3 equiv @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2) i') x') (list_eq_nth X1 Eq L1 L2 (plus i1 F) (plus i' F) x3 x' p2 q14 q2) ([q15:pf (@ X1 form (@ num (shadowed_0 X1) L1 (plus i1 F)) x3 equiv @ X1 form (@ num (shadowed_0 X1) L2 (plus i' F)) x')] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1) i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2) i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1) i1) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2) i') x') ([q11:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1) i1) x3)] and_l (@ num form (@ num (shadowed_0 num) inrange L) i1) (@ X1 form (@ num (shadowed_0 X1) L1 (plus i1 F)) x3) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2) i') x') (sublist_e X1 F L L1 i1 x3 q11) ([q12:pf (@ num form (@ num (shadowed_0 num) inrange L) i1)] [q13:pf (@ X1 form (@ num (shadowed_0 X1) L1 (plus i1 F)) x3)] sublist_i L i' X1 L2 F x' (congr num i' i1 ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange L) z1) (symm num i1 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1)) q12) (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L1 (plus i1 F)) x3) (@ X1 form (@ num (shadowed_0 X1) L2 (plus i' F)) x') q15 q13)))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2) i') x') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1) i1) x3) ([q21:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2) i') x')] and_l (@ num form (@ num (shadowed_0 num) inrange L) i') (@ X1 form (@ num (shadowed_0 X1) L2 (plus i' F)) x') (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1) i1) x3) (sublist_e X1 F L L2 i' x' q21) ([q22:pf (@ num form (@ num (shadowed_0 num) inrange L) i')] [q23:pf (@ X1 form (@ num (shadowed_0 X1) L2 (plus i' F)) x')] sublist_i L i1 X1 L1 F x3 (congr num i1 i' ([z2:tm num] @ num form (@ num (shadowed_0 num) inrange L) z2) (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1) q22) (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L1 (plus i1 F)) x3) (@ X1 form (@ num (shadowed_0 X1) L2 (plus i' F)) x') q15 q23))))))) ([i2:tm num] [x4:tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L1) i2) x4)] cut (@ X1 form (@ num (shadowed_0 X1) L1 (plus i2 F)) x4) (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x5:tm num] _eq num x3 x5)) i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (sublist_e2 X1 F L L1 i2 x4 q3) ([q31:pf (@ X1 form (@ num (shadowed_0 X1) L1 (plus i2 F)) x4)] cut (@ num form (@ num (shadowed_0 num) eq_arith (plus i2 F)) (plus i2 F) and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x5:tm num] _eq num x3 x5)) i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_eq_nth_valid X1 Eq L1 L2 (plus i2 F) x4 p2 q31) ([q32:pf (@ num form (@ num (shadowed_0 num) eq_arith (plus i2 F)) (plus i2 F) and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4)] and_i (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x5:tm num] _eq num x3 x5)) i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (def2_i num num ([x3:tm num] [x5:tm num] _eq num x3 x5) i2 i2 (refl num i2)) (and_e2 (@ num form (@ num (shadowed_0 num) eq_arith (plus i2 F)) (plus i2 F)) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) q32)))) ([i':tm num] [x':tm X1] [q4:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) F) L) L2) i') x')] cut (@ X1 form (@ num (shadowed_0 X1) L2 (plus i' F)) x') (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x4:tm num] _eq num x3 x4)) i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (sublist_e2 X1 F L L2 i' x' q4) ([q41:pf (@ X1 form (@ num (shadowed_0 X1) L2 (plus i' F)) x')] cut (@ num form (@ num (shadowed_0 num) eq_arith (plus i' F)) (plus i' F) and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x4:tm num] _eq num x3 x4)) i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (list_eq_nth_valid' X1 Eq L1 L2 (plus i' F) x' p2 q41) ([q42:pf (@ num form (@ num (shadowed_0 num) eq_arith (plus i' F)) (plus i' F) and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x')] and_i (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x4:tm num] _eq num x3 x4)) i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (def2_i num num ([x3:tm num] [x4:tm num] _eq num x3 x4) i' i' (refl num i')) (and_e2 (@ num form (@ num (shadowed_0 num) eq_arith (plus i' F)) (plus i' F)) (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') q42))))) (sublist_valid X1 Eq L1 F L (list_eq_valid X1 Eq L1 L2 p2) p3 p4).
sublist_zero_nth : {X1:tp} {L:tm (list X1)} {I:tm num} {X:tm X1} {K:tm num} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) -> pf (@ num form (@ num (shadowed_0 num) inrange K) I) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) I) X) = [X1:tp] [L:tm (list X1)] [I:tm num] [X:tm X1] [K:tm num] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange K) I)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L) I X (def5_i num num (list X1) num X1 ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7) zero K L I X (and_i (@ num form (@ num (shadowed_0 num) inrange K) I) (@ X1 form (@ num (shadowed_0 X1) L (+ I zero)) X) p2 (congr num (+ I zero) I ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L z1) X) (plus_zero I) (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X p1)))).
sublist_zero_nth' : {X1:tp} {K:tm num} {L:tm (list X1)} {I:tm num} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) I) X) -> pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) I) X) = [X1:tp] [K:tm num] [L:tm (list X1)] [I:tm num] [X:tm X1] [p1:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) I) X)] def3_i (list X1) num X1 ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) L I X (congr num I (+ I zero) ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L z1) X) (symm num (+ I zero) I (plus_zero I)) (and_e2 (@ num form (@ num (shadowed_0 num) inrange K) I) (@ X1 form (@ num (X1 arrow form) L (plus I zero)) X) (def5_e X1 num (list X1) num num ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7) zero K L I X (def3_e X1 num (list X1) ([x3:tm (list X1)] [x4:tm num] [x5:tm X1] @ X1 form (@ num (X1 arrow form) x3 x4) x5) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L) I X p1)))).
sublist_zero_nil : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) zero) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] def1_i (list X1) ([x3:tm (list X1)] forall2 num X1 ([i1:tm num] [x4:tm X1] not (@ X1 form (@ num (X1 arrow form) x3 i1) x4))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) zero) L) (forall2_i num X1 ([x3:tm num] [x4:tm X1] not (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) zero) L) x3) x4)) ([i2:tm num] [x5:tm X1] not_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) zero) L) i2) x5) ([q1:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) zero) L) i2) x5)] and_l (@ num form (@ num (shadowed_0 num) inrange zero) i2) (@ X1 form (@ num (X1 arrow form) L (plus i2 zero)) x5) false (def5_e X1 num (list X1) num num ([x3:tm num] [x4:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x3)) x8) zero zero L i2 x5 q1) ([q2:pf (@ num form (@ num (shadowed_0 num) inrange zero) i2)] [q3:pf (@ X1 form (@ num (shadowed_0 X1) L (plus i2 zero)) x5)] cut (@ X1 form (@ num (shadowed_0 X1) L i2) x5) false (congr num i2 (+ i2 zero) ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) L z1) x5) (symm num (+ i2 zero) i2 (plus_zero i2)) q3) ([q4:pf (@ X1 form (@ num (shadowed_0 X1) L i2) x5)] cut (isNat i2) false (list_index_isNat X1 Eq L i2 x5 p1 (list_nth_i X1 L i2 x5 q4)) ([q5:pf (isNat i2)] pf_greater_and_greatereq i2 zero false (isNat->geq_zero i2 q5) (inrange_e3 zero i2 q2))))))).
valid_sublist_zero : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {K:tnum} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (isNat K) -> pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [K:tnum] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (isNat K)] sublist_valid X1 Eq L zero K p1 n_zero p2.
sublist_zero_length : {X1:tp} {L:tm (list X1)} {N:tm num} {K:tm num} pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) K) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) = [X1:tp] [L:tm (list X1)] [N:tm num] [K:tm num] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) K)] or_e (@ (list X1) form (list_is_not_nil X1) L) (not (@ (list X1) form (list_is_not_nil X1) L)) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (excluded_middle (@ (list X1) form (list_is_not_nil X1) L)) ([q1:pf (@ (list X1) form (list_is_not_nil X1) L)] cut (gt N zero) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (list_length_not_nil X1 L N q1 p1) ([q11:pf (gt N zero)] sublist_length X1 L zero K (sublist_proper_range_i K X1 L N zero (and_i (isInt K) (geq K zero) (inrange_e1 (succ N) K p2) (inrange_e2 (succ N) K p2)) p1 (inrange_i zero N p_zero (eq->geq zero zero (refl num zero)) (gt_not_lt_eq N zero q11)) (congr num (+ zero K) K ([z1:tm num] leq z1 N) (zero_plus K) (or_e (eq num K N) (@ num form (@ num (shadowed_0 num) inrange N) K) (<= K N) (inrange_step N K (and_e1 (isInt N) (geq N zero) (list_length_isNat X1 L N p1)) p2) ([q3:pf (eq num K N)] eq->leq K N q3) ([q4:pf (@ num form (@ num (shadowed_0 num) inrange N) K)] lt->leq K N (inrange_e3 N K q4))))))) ([q2:pf (not (@ (list X1) form (list_is_not_nil X1) L))] cut (not (not (@ (list X1) form (list_is_nil X1) L))) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (gdef1_e form (list X1) ([x3:tm (list X1)] not (@ (list X1) form (list_is_nil X1) x3)) L ([z2:tm form] not z2) q2) ([q21:pf (not (not (@ (list X1) form (list_is_nil X1) L)))] cut (@ (list X1) form (list_is_nil X1) L) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (equiv_e2 (@ (list X1) form (list_is_nil X1) L) (not (not (@ (list X1) form (list_is_nil X1) L))) (equiv_not_not (@ (list X1) form (list_is_nil X1) L)) q21) ([q22:pf (@ (list X1) form (list_is_nil X1) L)] cut (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (forall2_e num num ([x3:tm num] [x4:tm num] @ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) x3) x4) L)) (sublist_nil'' X1 L q22) zero K) ([q23:pf (@ (list X1) form (list_is_nil X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L))] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) L) zero) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (list_length_nil' X1 L q22) ([q24:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) zero)] cut (eq num N zero) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (list_length_uniq X1 L N zero p1 q24) ([q25:pf (eq num N zero)] cut (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) zero) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (list_length_nil' X1 (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L) q23) ([q26:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) zero)] cut (@ num form (@ num (shadowed_0 num) inrange (succ zero)) K) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (congr num zero N ([z3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ z3)) K) (symm num N zero q25) p2) ([q27:pf (@ num form (@ num (shadowed_0 num) inrange (succ zero)) K)] cut (@ num form (@ num (shadowed_0 num) inrange one) K) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (congr num one (+ zero one) ([z4:tm num] @ num form (@ num (shadowed_0 num) inrange z4) K) (symm num (+ zero one) one (zero_plus one)) q27) ([q28:pf (@ num form (@ num (shadowed_0 num) inrange one) K)] cut (eq num K zero) (@ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) K) (inrange_one K q28) ([q29:pf (eq num K zero)] congr num K zero ([z5:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) K) L)) z5) q29 q26)))))))))).
sublist_zero_all' : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {N:tm num} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) N) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [N:tm num] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7)) zero) N) L)) (list_valid_per X1 Eq L p1) ([p0:pf (@ (per X1) form (validper X1) Eq)] cut (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7)) zero) N) L)) (list_eq_refl X1 Eq L p1) ([q52:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L)] list_eq_i X1 Eq L (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7)) zero) N) L) (per_rel_i num X1 eq_arith Eq L (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7)) zero) N) L) ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q1:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] equiv_i (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) N) L) i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) N) L) i') x') ([q5:pf (@ X1 form (@ num (shadowed_0 X1) L i1) x3)] cut (@ num form (@ num (shadowed_0 num) inrange N) i1) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) N) L) i') x') (list_index_inrange X1 L N i1 x3 p2 (list_nth_i X1 L i1 x3 q5)) ([q51:pf (@ num form (@ num (shadowed_0 num) inrange N) i1)] cut (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) N) L) i') x') (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (list_eq_nth X1 Eq L L i1 i' x3 x' q52 q1 q2) q5) ([q53:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] def5_i num num (list X1) num X1 ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8) zero N L i' x' (and_i (@ num form (@ num (shadowed_0 num) inrange N) i') (@ X1 form (@ num (shadowed_0 X1) L (+ i' zero)) x') (congr num i' i1 ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange N) z1) (symm num i1 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1)) q51) (congr num (+ i' zero) i' ([z2:tm num] @ X1 form (@ num (shadowed_0 X1) L z2) x') (plus_zero i') q53)))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) N) L) i') x') (@ X1 form (@ num (shadowed_0 X1) L i1) x3) ([q6:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) N) L) i') x')] and_l (@ num form (@ num (shadowed_0 num) inrange N) i') (@ X1 form (@ num (X1 arrow form) L (plus i' zero)) x') (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (def5_e X1 num (list X1) num num ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8) zero N L i' x' q6) ([q61:pf (@ num form (@ num (shadowed_0 num) inrange N) i')] [q62:pf (@ X1 form (@ num (shadowed_0 X1) L (plus i' zero)) x')] cut (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (congr num i' (+ i' zero) ([z3:tm num] @ X1 form (@ num (shadowed_0 X1) L z3) x') (symm num (+ i' zero) i' (plus_zero i')) q62) ([q63:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (list_eq_nth X1 Eq L L i1 i' x3 x' q52 q1 q2) q63))))) ([i2:tm num] [x4:tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) L i2) x4)] and_i (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (eqv_refl num eq_arith i2 valideqv_eq_arith) (list_nth_valid X1 Eq L i2 x4 p1 (list_nth_i X1 L i2 x4 q3))) ([i':tm num] [x':tm X1] [q4:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) N) L) i') x')] and_l (@ num form (@ num (shadowed_0 num) inrange N) i') (@ X1 form (@ num (X1 arrow form) L (plus i' zero)) x') (@ num form (@ num (shadowed_0 num) eq_arith i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (def5_e X1 num (list X1) num num ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7) zero N L i' x' q4) ([q41:pf (@ num form (@ num (shadowed_0 num) inrange N) i')] [q42:pf (@ X1 form (@ num (shadowed_0 X1) L (plus i' zero)) x')] cut (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ num form (@ num (shadowed_0 num) eq_arith i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (congr num i' (+ i' zero) ([z4:tm num] @ X1 form (@ num (shadowed_0 X1) L z4) x') (symm num (+ i' zero) i' (plus_zero i')) q42) ([q43:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] and_i (@ num form (@ num (shadowed_0 num) eq_arith i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (eqv_refl num eq_arith i' valideqv_eq_arith) (list_nth_valid X1 Eq L i' x' p1 (list_nth_i X1 L i' x' q43)))))) p1)).
list_droplast_sublist_eq : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {N:tnum} {I:tm num} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ N)) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L))) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [N:tnum] [I:tm num] [p0:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p1:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ N))] [p2:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] cut (@ (per X1) form (validper X1) Eq) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L))) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7)) zero) I) L)) (list_valid_per X1 Eq L p0) ([p10:pf (@ (per X1) form (validper X1) Eq)] cut (isNat (succ N)) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L))) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7)) zero) I) L)) (list_length_isNat X1 L (succ N) p1) ([p11:pf (isNat (succ N))] cut (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L) (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L))) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7)) zero) I) L)) (list_eq_refl X1 Eq L p0) ([p12:pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) L) L)] list_eq_i X1 Eq (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7)) zero) I) L) (per_rel_i num X1 eq_arith Eq (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x3:tm num] [x4:tm num] [x5:tm (list X1)] [x6:tm num] [x7:tm X1] @ num form (@ num (shadowed_0 num) inrange x4) x6 and @ X1 form (@ num (X1 arrow form) x5 (plus x6 x3)) x7)) zero) I) L) ([i1:tm num] [i':tm num] [x3:tm X1] [x':tm X1] [q1:pf (@ num form (@ num (shadowed_0 num) eq_arith i1) i')] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x3) x')] equiv_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) L) i') x') (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) L) i') x') ([q5:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) i1) x3)] and_l (@ num form (@ num (shadowed_0 num) inrange I) i1) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (list_droplast X1) L) (plus i1 zero)) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) L) i') x') (def5_e X1 num (list X1) num num ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8) zero I (@ (list X1) (list X1) (list_droplast X1) L) i1 x3 q5) ([q51:pf (@ num form (@ num (shadowed_0 num) inrange I) i1)] [q52:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) (plus i1 zero)) x3)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) L) i') x') (congr num i1 (+ i1 zero) ([z1:tm num] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) z1) x3) (symm num (+ i1 zero) i1 (plus_zero i1)) q52) ([q53:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i1) x3)] cut (@ X1 form (@ num (X1 arrow form) L i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) L) i') x') (and_e1 (@ X1 form (@ num (X1 arrow form) L i1) x3) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1))) (def3_e X1 num (list X1) ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5))) L i1 x3 q53)) ([q54:pf (@ X1 form (@ num (shadowed_0 X1) L i1) x3)] cut (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) L) i') x') (equiv_e1 (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (list_eq_nth X1 Eq L L i1 i' x3 x' p12 q1 q2) q54) ([q55:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] def5_i num num (list X1) num X1 ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8) zero I L i' x' (and_i (@ num form (@ num (shadowed_0 num) inrange I) i') (@ X1 form (@ num (shadowed_0 X1) L (+ i' zero)) x') (congr num i' i1 ([z2:tm num] @ num form (@ num (shadowed_0 num) inrange I) z2) (symm num i1 i' (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1)) q51) (congr num (+ i' zero) i' ([z3:tm num] @ X1 form (@ num (shadowed_0 X1) L z3) x') (plus_zero i') q55)))))))) (imp_i (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) L) i') x') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) i1) x3) ([q6:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) L) i') x')] and_l (@ num form (@ num (shadowed_0 num) inrange I) i') (@ X1 form (@ num (X1 arrow form) L (plus i' zero)) x') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) i1) x3) (def5_e X1 num (list X1) num num ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8) zero I L i' x' q6) ([q61:pf (@ num form (@ num (shadowed_0 num) inrange I) i')] [q62:pf (@ X1 form (@ num (shadowed_0 X1) L (plus i' zero)) x')] cut (@ num form (@ num (shadowed_0 num) inrange I) i1) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) i1) x3) (congr num i1 i' ([z4:tm num] @ num form (@ num (shadowed_0 num) inrange I) z4) (def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) i1 i' q1) q61) ([q60:pf (@ num form (@ num (shadowed_0 num) inrange I) i1)] cut (@ X1 form (@ num (shadowed_0 X1) L i') x') (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) i1) x3) (congr num i' (+ i' zero) ([z5:tm num] @ X1 form (@ num (shadowed_0 X1) L z5) x') (symm num (+ i' zero) i' (plus_zero i')) q62) ([q63:pf (@ X1 form (@ num (shadowed_0 X1) L i') x')] cut (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (@ num (list X1 arrow num arrow X1 arrow form) (@ num (num arrow list X1 arrow num arrow X1 arrow form) (lam5 num num (list X1) num X1 form ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8)) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) i1) x3) (equiv_e2 (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (@ X1 form (@ num (shadowed_0 X1) L i') x') (list_eq_nth X1 Eq L L i1 i' x3 x' p12 q1 q2) q63) ([q64:pf (@ X1 form (@ num (shadowed_0 X1) L i1) x3)] def5_i num num (list X1) num X1 ([x4:tm num] [x5:tm num] [x6:tm (list X1)] [x7:tm num] [x8:tm X1] @ num form (@ num (shadowed_0 num) inrange x5) x7 and @ X1 form (@ num (X1 arrow form) x6 (plus x7 x4)) x8) zero I (@ (list X1) (list X1) (list_droplast X1) L) i1 x3 (and_i (@ num form (@ num (shadowed_0 num) inrange I) i1) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) (+ i1 zero)) x3) q60 (congr num (+ i1 zero) i1 ([z6:tm num] @ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) z6) x3) (plus_zero i1) (def3_i (list X1) num X1 ([x4:tm (list X1)] [x5:tm num] [x6:tm X1] @ X1 form (@ num (X1 arrow form) x4 x5) x6 and not (@ num form (@ (list X1) (num arrow form) (list_length X1) x4) (succ x5))) L i1 x3 (and_i (@ X1 form (@ num (shadowed_0 X1) L i1) x3) (not (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1))) q64 (not_i (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1)) ([q7:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (succ i1))] cut (== num i1 N) false (plus_eq1 i1 one N (list_length_uniq X1 L (succ i1) (succ N) q7 p1)) ([q72:pf (eq num i1 N)] cut (lt I (succ N)) false (inrange_e3 (succ N) I p2) ([q73:pf (lt I (succ N))] cut (<= I N) false (less_plus1_e I N (inrange_e1 (succ N) I p2) (isInt_succ_e N (isNat->isInt (succ N) p11)) q73) ([q74:pf (leq I N)] cut (< i1 N) false (trans_lt_leq i1 I N (inrange_e3 I i1 q60) q74) ([q75:pf (lt i1 N)] not_e (eq num i1 N) (lt->neq i1 N q75) q72))))))))))))))))) ([i2:tm num] [x4:tm X1] [q3:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) i2) x4)] cut (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i2) x4) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_nth_e X1 (@ (list X1) (list X1) (list_droplast X1) L) i2 x4 (sublist_zero_nth' X1 I (@ (list X1) (list X1) (list_droplast X1) L) i2 x4 (list_nth_i X1 (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L)) i2 x4 q3))) ([q31:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (list_droplast X1) L) i2) x4)] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i2) x4) (@ num form (@ num (shadowed_0 num) eq_arith i2) i2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (list_drop_invariant X1 L i2 x4 (list_nth_i X1 (@ (list X1) (list X1) (list_droplast X1) L) i2 x4 q31)) ([q32:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i2) x4)] and_i (@ num form (@ num (shadowed_0 num) eq_arith i2) i2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4) (eqv_refl num eq_arith i2 valideqv_eq_arith) (list_nth_valid X1 Eq L i2 x4 p0 q32)))) ([i':tm num] [x':tm X1] [q4:pf (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) L) i') x')] cut (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i') x') (@ num form (@ num (shadowed_0 num) eq_arith i') i' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (sublist_zero_nth' X1 I L i' x' (list_nth_i X1 (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) L) i' x' q4)) ([q41:pf (@ X1 form (@ num (X1 arrow form) (@ (list X1) (num arrow X1 arrow form) (list_nth X1) L) i') x')] and_i (@ num form (@ num (shadowed_0 num) eq_arith i') i') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (eqv_refl num eq_arith i' valideqv_eq_arith) (list_nth_valid X1 Eq L i' x' p0 q41)))) (cut (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_droplast X1) L)) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L))) (list_droplast_valid_i X1 Eq L p0) ([q51:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (list_droplast X1) L))] cut (isInt I and geq I zero) (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) I) (@ (list X1) (list X1) (list_droplast X1) L))) (and_i (isInt I) (geq I zero) (inrange_e1 (succ N) I p2) (inrange_e2 (succ N) I p2)) ([q52:pf (isNat I)] valid_sublist_zero X1 Eq (@ (list X1) (list X1) (list_droplast X1) L) I q51 q52)))))).
sublist_zero_droplast : {X1:tp} {Eq:tm (eqrel X1)} {L:tm (list X1)} {N:tm num} pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N) -> pf (gt N zero) -> pf (@ (list X1) form (@ (list X1) (list X1 arrow form) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (list_droplast X1) L)) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) (pred N)) L)) = [X1:tp] [Eq:tm (eqrel X1)] [L:tm (list X1)] [N:tm num] [p1:pf (@ (list X1) form (@ (eqrel X1) (list X1 arrow form) (list_valid X1) Eq) L)] [p2:pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) N)] [p3:pf (gt N zero)] per_trans (list X1) (@ (eqrel X1) (list X1 arrow list X1 arrow form) (list_eq X1) Eq) (@ (list X1) (list X1) (list_droplast X1) L) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) (pred N)) (@ (list X1) (list X1) (list_droplast X1) L)) (@ (list X1) (list X1) (@ num (list X1 arrow list X1) (@ num (num arrow list X1 arrow list X1) (sublist X1) zero) (pred N)) L) (list_eq_validper X1 Eq (list_valid_per X1 Eq L p1)) (sublist_zero_all' X1 Eq (@ (list X1) (list X1) (list_droplast X1) L) (pred N) (list_droplast_valid_i X1 Eq L p1) (list_length_droplast_i X1 L N p2 p3)) (list_droplast_sublist_eq X1 Eq L (pred N) (pred N) p1 (congr num (succ (pred N)) N ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) z1) (succpred N) p2) (congr num (succ (pred N)) N ([z2:tm num] @ num form (@ num (shadowed_0 num) inrange z2) (pred N)) (succpred N) (inrange_pred_n N (list_length_isNat X1 L N p2) p3))).
prove_member : {X1:tp} tm (X1 arrow X1 arrow form) -> tm (num arrow X1 arrow form) -> tm X1 -> type = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [l:tm (num arrow X1 arrow form)] [x3:tm X1] pf (@ X1 form (@ X1 (X1 arrow form) Eq x3) x3 imp exists num ([i1:tm num] isNat i1 and @ X1 form (@ num (X1 arrow form) l i1) x3)).
prove_member1 : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {A:tm X1} {L:tm (list X1)} prove_member X1 Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L) A = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [A:tm X1] [L:tm (list X1)] imp_i (@ X1 form (@ X1 (X1 arrow form) Eq A) A) (exists num ([x3:tm num] isNat x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L) x3) A)) ([p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq A) A)] exists_i num ([x3:tm num] isNat x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L) x3) A) zero (and_i (isNat zero) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) A) L) zero) A) n_zero (list_cons_i1 zero X1 Eq A A L (refl num zero) p1))).
prove_member2 : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {L:tm (num arrow X1 arrow form)} {A:tm X1} {B:tm X1} prove_member X1 Eq L A -> prove_member X1 Eq (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) B) L) A = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [L:tm (num arrow X1 arrow form)] [A:tm X1] [B:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq A) A imp exists num ([i1:tm num] isNat i1 and @ X1 form (@ num (X1 arrow form) L i1) A))] imp_i (@ X1 form (@ X1 (X1 arrow form) Eq A) A) (exists num ([x3:tm num] isNat x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) B) L) x3) A)) ([p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq A) A)] exists_and_e num ([x3:tm num] isNat x3) ([x3:tm num] @ X1 form (@ num (X1 arrow form) L x3) A) (exists num ([x3:tm num] isNat x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) B) L) x3) A)) (imp_e (@ X1 form (@ X1 (X1 arrow form) Eq A) A) (exists num ([i2:tm num] isNat i2 and @ X1 form (@ num (X1 arrow form) L i2) A)) p1 p2) ([i3:tm num] [p3:pf (isNat i3)] [p4:pf (@ X1 form (@ num (X1 arrow form) L i3) A)] exists_i num ([x3:tm num] isNat x3 and @ X1 form (@ num (X1 arrow form) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) B) L) x3) A) (succ i3) (and_i (isNat (succ i3)) (@ X1 form (@ num (shadowed_0 X1) (@ (list X1) (list X1) (@ X1 (list X1 arrow list X1) (@ (eqrel X1) (X1 arrow list X1 arrow list X1) (list_cons X1) Eq) B) L) (succ i3)) A) (isNat_succ_i i3 p3) (list_cons_i2 (succ i3) X1 L A Eq B (gt->neq (succ i3) zero (trans_gt_geq (succ i3) i3 zero (succ_greater i3) (isNat->geq_zero i3 p3))) (congr num (pred (succ i3)) i3 ([z1:tm num] @ X1 form (@ num (X1 arrow form) L z1) A) (predsucc i3) p4))))).
shadowed_3 : tp = list num.
tree : tp -> tp = [T:tp] rel shadowed_3 T.
path_valid : tm (shadowed_3 arrow form) = @ (eqrel num) (list num arrow form) (list_valid num) eq_nat.
path_eq : tm (eqrel shadowed_3) = @ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat.
mktree : {T:tp} tm (eqrel T arrow T arrow list (tree T) arrow tree T) = [T:tp] lam3 (T arrow T arrow form) T (num arrow (list num arrow T arrow form) arrow form) (shadowed_3 arrow T arrow form) ([Eq:tm (T arrow T arrow form)] [V1:tm T] [TrLst:tm (num arrow (list num arrow T arrow form) arrow form)] lam2 shadowed_3 T form ([p1:tm shadowed_3] [V2:tm T] @ shadowed_3 form path_valid p1 and if (@ (list num) form (list_is_nil num) p1) (@ T form (@ T (T arrow form) Eq V1) V2) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p1) hd imp exists (list num arrow T arrow form) ([sbtr:tm (list num arrow T arrow form)] @ (list num arrow T arrow form) form (@ num ((list num arrow T arrow form) arrow form) TrLst hd) sbtr and @ T form (@ (list num) (T arrow form) sbtr (@ (list num) (list num) (list_tl num) p1)) V2))))).
tree_node : {T:tp} tm (rel (tree T) shadowed_3) = [T:tp] lam2 (shadowed_3 arrow T arrow form) shadowed_3 form ([tr:tm (shadowed_3 arrow T arrow form)] [p1:tm shadowed_3] exists T ([x3:tm T] @ T form (@ shadowed_3 (T arrow form) tr p1) x3)).
tree_is_not_empty : {T:tp} tm (tree T arrow form) = [T:tp] lam (tree T) form ([tr:tm (tree T)] exists shadowed_3 ([p1:tm shadowed_3] @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_node T) tr) p1)).
tree_root : {T:tp} tm (tree T arrow T arrow form) = [T:tp] lam2 (list num arrow T arrow form) T form ([tr:tm (list num arrow T arrow form)] [v1:tm T] forall (list num) ([p1:tm (list num)] @ (list num) form (list_is_nil num) p1 imp @ T form (@ (list num) (T arrow form) tr p1) v1)).
tree_eq : {T:tp} tm (eqrel T arrow eqrel (tree T)) = [T:tp] lam (per T) (per (rel shadowed_3 T)) ([Eq:tm (per T)] @ (per T) (per (rel shadowed_3 T)) (@ (per shadowed_3) (per T arrow per (rel shadowed_3 T)) (per_rel shadowed_3 T) path_eq) Eq).
tree_height : {T:tp} tm (rel (tree T) num) = [T:tp] lam2 (tree T) num form ([tr:tm (tree T)] [d:tm num] isNat d and exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_node T) tr) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred d) and forall shadowed_3 ([p1:tm shadowed_3] @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_node T) tr) p1 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p1) n and @ num form (@ num (shadowed_0 num) inrange d) n)))).
tree_has_parent : {T:tp} tm (rel (tree T) shadowed_3) = [T:tp] lam2 (tree T) (list num) form ([tr:tm (tree T)] [p1:tm (list num)] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) p1 imp @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_node T) tr) p1 imp @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_node T) tr) pp)).
tree_has_siblings : {T:tp} tm (rel (tree T) shadowed_3) = [T:tp] lam2 (tree T) (list num) form ([tr:tm (tree T)] [p1:tm (list num)] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) p1 imp @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_node T) tr) p1 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_node T) tr) p')))).
tree_has_finite_siblings : {T:tp} tm (rel (tree T) shadowed_3) = [T:tp] lam2 (tree T) (list num) form ([tr:tm (tree T)] [p1:tm (list num)] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) p1 imp @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_node T) tr) p1 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_node T) tr) p')))))).
tree_path_congr : {T:tp} tm (rel (tree T) shadowed_3) = [T:tp] lam2 (shadowed_3 arrow T arrow form) shadowed_3 form ([tr:tm (shadowed_3 arrow T arrow form)] [p1:tm shadowed_3] forall T ([x3:tm T] @ T form (@ shadowed_3 (T arrow form) tr p1) x3 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p1) p' imp @ shadowed_3 form path_valid p' imp @ T form (@ shadowed_3 (T arrow form) tr p') x3))).
tree_valid_path : {T:tp} tm (rel (tree T) shadowed_3) = [T:tp] lam2 (tree T) shadowed_3 form ([tr:tm (tree T)] [p1:tm shadowed_3] @ (tree T) form (tree_is_not_empty T) tr and @ shadowed_3 form path_valid p1 and @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_node T) tr) p1 and @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_path_congr T) tr) p1 and (@ (list num) form (list_is_not_nil num) p1 imp @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_has_parent T) tr) p1 and @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_has_siblings T) tr) p1 and @ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_has_finite_siblings T) tr) p1)).
tree_valid_node : {T:tp} tm (rel (eqrel T) (tree T)) = [T:tp] lam2 (per T) (tree T) form ([Eq:tm (per T)] [tr:tm (tree T)] @ (per T) form (validper T) Eq and forall shadowed_3 ([p1:tm shadowed_3] if (@ shadowed_3 form (@ (tree T) (shadowed_0 shadowed_3) (tree_valid_path T) tr) p1) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) Eq x3) x3 and forall T ([y:tm T] @ T form (@ T (shadowed_0 T) Eq x3) y equiv @ T form (@ shadowed_3 (shadowed_0 T) tr p1) y))) (forall T ([y:tm T] not (@ T form (@ shadowed_3 (shadowed_0 T) tr p1) y))))).
tree_valid : {T:tp} tm (rel (eqrel T) (tree T)) = [T:tp] lam2 (eqrel T) (tree T) form ([Eq:tm (eqrel T)] [tr:tm (tree T)] exists num ([d:tm num] @ num form (@ (tree T) (shadowed_0 num) (tree_height T) tr) d) and @ (tree T) form (tree_is_not_empty T) tr and @ (tree T) form (@ (eqrel T) (shadowed_0 (tree T)) (tree_valid_node T) Eq) tr).
tree_subtrees_max_height : {T:tp} tm (eqrel T arrow list (tree T) arrow num arrow form) = [T:tp] lam3 (eqrel T) (list (tree T)) num form ([Eq:tm (eqrel T)] [l:tm (list (tree T))] [d:tm num] if (@ (list (tree T)) form (list_is_nil (tree T)) l) (eq num d zero) (exists (tree T) ([tr0:tm (tree T)] @ (tree T) form (@ (list (tree T)) (set (tree T)) (list_member (tree T)) l) tr0 and @ num form (@ (tree T) (shadowed_0 num) (tree_height T) tr0) d and forall (tree T) ([tr:tm (tree T)] @ (tree T) form (@ (list (tree T)) (set (tree T)) (list_member (tree T)) l) tr imp @ (tree T) form (@ (eqrel T) (shadowed_0 (tree T)) (tree_valid T) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree T) (shadowed_0 num) (tree_height T) tr) d' and geq d d'))))).
tree_subtrees_have_finite_heights : {T:tp} tm (eqrel T arrow list (tree T) arrow form) = [T:tp] lam2 (eqrel T) (list (tree T)) form ([Eq:tm (eqrel T)] [l:tm (list (tree T))] exists num ([d:tm num] @ num form (@ (list (tree T)) (num arrow form) (@ (eqrel T) (list (tree T) arrow num arrow form) (tree_subtrees_max_height T) Eq) l) d)).
tree_valid_subtrees : {T:tp} tm (eqrel T arrow list (tree T) arrow form) = [T:tp] lam2 (eqrel T) (list (tree T)) form ([Eq:tm (eqrel T)] [l:tm (list (tree T))] @ (list (tree T)) form (@ (eqrel (tree T)) (list (tree T) arrow form) (list_valid (tree T)) (@ (eqrel T) (eqrel (tree T)) (tree_eq T) Eq)) l and forall (tree T) ([tr:tm (tree T)] @ (tree T) form (@ (list (tree T)) (set (tree T)) (list_member (tree T)) l) tr imp @ (tree T) form (@ (eqrel T) (shadowed_0 (tree T)) (tree_valid T) Eq) tr and @ (tree T) form (tree_is_not_empty T) tr)).
path_eq_validper : pf (@ (per shadowed_3) form (validper shadowed_3) path_eq) = list_eq_validper num eq_nat eq_nat_validper.
tree_node_i : {X1:tp} {Tr:tm (shadowed_3 arrow X1 arrow form)} {P:tm shadowed_3} {V:tm X1} pf (@ X1 form (@ shadowed_3 (X1 arrow form) Tr P) V) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) = [X1:tp] [Tr:tm (shadowed_3 arrow X1 arrow form)] [P:tm shadowed_3] [V:tm X1] [p1:pf (@ X1 form (@ shadowed_3 (X1 arrow form) Tr P) V)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) Tr P (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr P) x3) V p1).
tree_valid_node_per : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) -> pf (@ (per X1) form (validper X1) Eq) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr)] and_e1 (@ (per X1) form (validper X1) Eq) (forall shadowed_3 ([p2:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p2) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) y))))) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p3) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p3) y))))) Eq Tr p1).
tree_valid_per : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (per X1) form (validper X1) Eq) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] tree_valid_node_per X1 Eq Tr (and_e2 (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (and_e2 (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) d)) (@ (tree X1) form (tree_is_not_empty X1) Tr and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x4) d) and @ (tree X1) form (tree_is_not_empty X1) x4 and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) x3) x4) Eq Tr p1))).
tree_node_is_not_empty : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) -> pf (@ (tree X1) form (tree_is_not_empty X1) Tr) = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P)] def1_i (tree X1) ([x3:tm (tree X1)] exists shadowed_3 ([p2:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p2)) Tr (exists_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3) P p1).
tree_valid_path->not_empty : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ (tree X1) form (tree_is_not_empty X1) Tr) = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] and_e1 (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ shadowed_3 form path_valid P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) Tr P p1).
tree_valid_path->path_valid : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ shadowed_3 form path_valid P) = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] and_e1 (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ shadowed_3 form path_valid P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) Tr P p1)).
tree_valid_path->node_exists : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] and_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ shadowed_3 form path_valid P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) Tr P p1))).
tree_valid_path->path_congr : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P) = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] and_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P) (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ shadowed_3 form path_valid P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) Tr P p1)))).
tree_valid_path->has_parent : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P) = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] and_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (imp_e (@ (list num) form (list_is_not_nil num) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P) (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ shadowed_3 form path_valid P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) Tr P p1))))) p2).
tree_valid_path->has_siblings : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P) = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] and_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (imp_e (@ (list num) form (list_is_not_nil num) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P) (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ shadowed_3 form path_valid P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) Tr P p1))))) p2)).
tree_valid_path->has_finite_siblings : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (imp_e (@ (list num) form (list_is_not_nil num) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P) (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P) (and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (and_e2 (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ shadowed_3 form path_valid P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P and (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) P)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) Tr P p1))))) p2)).
tree_valid_not_empty : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (tree X1) form (tree_is_not_empty X1) Tr) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] and_e1 (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (and_e2 (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) d)) (@ (tree X1) form (tree_is_not_empty X1) Tr and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x4) d) and @ (tree X1) form (tree_is_not_empty X1) x4 and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) x3) x4) Eq Tr p1)).
tree_valid_finite_height : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) d)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] and_e1 (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) d)) (@ (tree X1) form (tree_is_not_empty X1) Tr and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x4) d) and @ (tree X1) form (tree_is_not_empty X1) x4 and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) x3) x4) Eq Tr p1).
tree_valid->valid_node : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] and_e2 (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (and_e2 (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) d)) (@ (tree X1) form (tree_is_not_empty X1) Tr and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x4) d) and @ (tree X1) form (tree_is_not_empty X1) x4 and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) x3) x4) Eq Tr p1)).
tree_valid_node_path_exists : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm shadowed_3} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr)] [p2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P)] suppose_not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) ([p3:pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P))] cut (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))) false (if_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))) (forall_e shadowed_3 ([x3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) y)))) (and_e2 (@ (per X1) form (validper X1) Eq) (forall shadowed_3 ([p4:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p4) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p4) y))))) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p5:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p5) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p5) y))))) Eq Tr p1)) P) p3) ([p4:pf (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y)))] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr P) x3) false (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x7:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x7)) Tr P p2) ([x8:tm X1] [p5:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) x8)] not_e (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) x8) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) x3)) p4 x8) p5))).
tree_valid_path_exists : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm shadowed_3} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P)] tree_valid_node_path_exists X1 Eq Tr P (tree_valid->valid_node X1 Eq Tr p1) p2.
tree_path_congr_e : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} {X:tm X1} {P':tm shadowed_3} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) X) -> pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) P') -> pf (@ shadowed_3 form path_valid P') -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P') X) = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [X:tm X1] [P':tm shadowed_3] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) P)] [p2:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) X)] [p3:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) P')] [p4:pf (@ shadowed_3 form path_valid P')] imp2_e (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) P') (@ shadowed_3 form path_valid P') (@ X1 form (@ shadowed_3 (X1 arrow form) Tr P') X) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (X1 arrow form) Tr x3) X) (imp_e (@ X1 form (@ shadowed_3 (X1 arrow form) Tr P) X) (forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) Tr p') X)) (forall_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr P) x3 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) Tr p') x3)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x5))) Tr P p1) X) p2) P') p3 p4.
tree_valid_path_congr : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {L1:tm shadowed_3} {X:tm X1} {L2:tm shadowed_3} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr L1) X) -> pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq L1) L2) -> pf (@ shadowed_3 form path_valid L2) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr L2) X) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [L1:tm shadowed_3] [X:tm X1] [L2:tm shadowed_3] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p2:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr L1) X)] [p3:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq L1) L2)] [p4:pf (@ shadowed_3 form path_valid L2)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) L1) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr L2) X) (tree_valid_path_exists X1 Eq Tr L1 p1 (tree_node_i X1 Tr L1 X p2)) ([q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) L1)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) L1) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr L2) X) (tree_valid_path->path_congr X1 Tr L1 q2) ([q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) L1)] tree_path_congr_e X1 Tr L1 X L2 q3 p2 p3 p4)).
tree_valid_path_congr' : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {L1:tm shadowed_3} {L2:tm shadowed_3} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) L1) -> pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq L1) L2) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) L2) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [L1:tm shadowed_3] [L2:tm shadowed_3] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) L1)] [p3:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq L1) L2)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) L1) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) L2) (tree_valid_path_exists X1 Eq Tr L1 p1 p2) ([q1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) L1)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) L1) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) L2) (tree_valid_path->path_congr X1 Tr L1 q1) ([q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) L1)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) L2) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) L2) (list_eq_valid' num eq_nat L1 L2 p3) ([q4:pf (@ shadowed_3 form path_valid L2)] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr L1) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) L2) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) Tr L1 p2) ([x6:tm X1] [q5:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr L1) x6)] tree_node_i X1 Tr L2 x6 (tree_path_congr_e X1 Tr L1 x6 L2 q2 q5 p3 q4))))).
tree_valid_node->node_valid : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm shadowed_3} {V:tm X1} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) V) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm shadowed_3] [V:tm X1] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr)] [p2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] [p3:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) V)] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) (tree_valid_node_per X1 Eq Tr p1) ([p0:pf (@ (per X1) form (validper X1) Eq)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y)) (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) (if_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))) (forall_e shadowed_3 ([x3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) y)))) (and_e2 (@ (per X1) form (validper X1) Eq) (forall shadowed_3 ([p4:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p4) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p4) y))))) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p5:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p5) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p5) y))))) Eq Tr p1)) P) p2) ([x7:tm X1] [q1:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) V) (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) V) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) V) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) x3) (and_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y)) q1) V) p3) ([q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) V)] per_refl X1 Eq V x7 p0 (per_symm X1 Eq x7 V p0 q2)))).
tree_valid_node_valid : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm shadowed_3} {V:tm X1} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) V) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm shadowed_3] [V:tm X1] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p2:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) V)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) (tree_valid_path_exists X1 Eq Tr P p1 (def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) Tr P (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr P) x3) V p2))) ([p3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] tree_valid_node->node_valid X1 Eq Tr P V (tree_valid->valid_node X1 Eq Tr p1) p3 p2).
tree_valid_node_congr : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm shadowed_3} {X:tm X1} {Y:tm X1} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) X) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm shadowed_3] [X:tm X1] [Y:tm X1] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p2:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) X)] [p3:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y)] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (tree_valid_per X1 Eq Tr p1) ([p11:pf (@ (per X1) form (validper X1) Eq)] cut (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (tree_node_is_not_empty X1 Tr P (tree_node_i X1 Tr P X p2)) ([q1:pf (@ (tree X1) form (tree_is_not_empty X1) Tr)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (tree_valid_path_exists X1 Eq Tr P p1 (tree_node_i X1 Tr P X p2)) ([q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (tree_valid->valid_node X1 Eq Tr p1) ([q3:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (if_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))) (forall_e shadowed_3 ([x3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) y)))) (and_e2 (@ (per X1) form (validper X1) Eq) (forall shadowed_3 ([p4:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p4) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p4) y))))) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p5:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p5) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p5) y))))) Eq Tr q3)) P) q2) ([x7:tm X1] [q4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))] and_l (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y)) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) q4 ([q41:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7)] [q42:pf (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) X) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) X) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) X) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) x3) q42 X) p2) ([q43:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) X)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) Y) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) Y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) x3) q42 Y) p3) ([q44:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) Y)] per_trans X1 Eq X x7 Y p11 (per_symm X1 Eq x7 X p11 q43) q44)))))))).
tree_valid_node_congr' : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm shadowed_3} {X:tm X1} {Y:tm X1} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) X) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm shadowed_3] [X:tm X1] [Y:tm X1] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p2:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) X)] [p3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y)] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) (tree_valid_per X1 Eq Tr p1) ([p11:pf (@ (per X1) form (validper X1) Eq)] cut (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) (tree_node_is_not_empty X1 Tr P (tree_node_i X1 Tr P X p2)) ([q1:pf (@ (tree X1) form (tree_is_not_empty X1) Tr)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) (tree_valid_path_exists X1 Eq Tr P p1 (tree_node_i X1 Tr P X p2)) ([q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) (tree_valid->valid_node X1 Eq Tr p1) ([q3:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y)) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) (if_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))) (forall_e shadowed_3 ([x3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) y)))) (and_e2 (@ (per X1) form (validper X1) Eq) (forall shadowed_3 ([p4:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p4) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p4) y))))) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p5:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p5) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p5) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p5) y))))) Eq Tr q3)) P) q2) ([x7:tm X1] [q4:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))] and_l (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y)) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) q4 ([q41:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7)] [q42:pf (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) y))] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) X) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) (equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) X) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) X) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) x3) q42 X) p2) ([q43:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) X)] cut (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) Y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) (per_trans X1 Eq x7 X Y p11 q43 p3) ([q44:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) Y)] equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x7) Y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) Y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) x3) q42 Y) q44)))))))).
tree_has_parent_e : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} {PP:tm (list num)} {I:tm num} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P) -> pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) PP) = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [PP:tm (list num)] [I:tm num] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P)] [p2:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P)] [p3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P)] imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) PP) (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp)) Tr P p1) PP I) p2 p3.
tree_has_siblings_e : {X1:tp} {Tr:tm (tree X1)} {P:tm shadowed_3} {PP:tm (list num)} {I:tm num} {J:tm num} {P':tm (list num)} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P) -> pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) -> pf (@ num form (@ num (shadowed_0 num) inrange I) J) -> pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) P') -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P') = [X1:tp] [Tr:tm (tree X1)] [P:tm shadowed_3] [PP:tm (list num)] [I:tm num] [J:tm num] [P':tm (list num)] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) P)] [p2:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P)] [p3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P)] [p4:pf (@ num form (@ num (shadowed_0 num) inrange I) J)] [p5:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) P')] imp_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) P') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P') (forall_e (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3) (imp_e (@ num form (@ num (shadowed_0 num) inrange I) J) (forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange I) x3 imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x3) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) (forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange I) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p'))) (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x4) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p'))) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))) Tr P p1) PP I) p2 p3) J) p4) P') p5.
tree_valid_path_droplast_tr_node : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm (list num)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm (list num)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] [p3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (tree_valid_path->node_exists X1 Tr P p3) ([p31:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P)] cut (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (tree_valid_path->path_valid X1 Tr P p3) ([p32:pf (@ shadowed_3 form path_valid P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (tree_valid_path->has_parent X1 Tr P p3 p2) ([p33:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P)] exists2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (list_append_not_nil num eq_nat P p32 p2) ([pp:tm (list num)] [i1:tm num] [q1:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (tree_has_parent_e X1 Tr P pp i1 p33 q1 p31) ([q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp)] tree_valid_path_congr' X1 Eq Tr pp (@ (list num) (list num) (list_droplast num) P) p1 q2 (list_droplast_append_eq num eq_nat P pp i1 p32 q1)))))).
tree_valid_path_droplast_path_congr : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm (list num)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) (@ (list num) (list num) (list_droplast num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm (list num)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] [p3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x5)))) Tr) (@ (list num) (list num) (list_droplast num) P)) (tree_valid_path->node_exists X1 Tr P p3) ([p31:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) P)] cut (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x6:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x6 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x6)))) Tr) (@ (list num) (list num) (list_droplast num) P)) (tree_valid_path->path_valid X1 Tr P p3) ([p32:pf (@ shadowed_3 form path_valid P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x7:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x7 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x7)))) Tr) (@ (list num) (list num) (list_droplast num) P)) (tree_valid_path->has_parent X1 Tr P p3 p2) ([p33:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) P)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x8:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x8 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x8))) Tr (@ (list num) (list num) (list_droplast num) P) (forall_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_droplast num) P)) x3 imp forall shadowed_3 ([x4:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq (@ (list num) (list num) (list_droplast num) P)) x4 imp @ shadowed_3 form path_valid x4 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x4) x3)) ([x9:tm X1] imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_droplast num) P)) x9) (forall shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq (@ (list num) (list num) (list_droplast num) P)) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) x9)) ([q1:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_droplast num) P)) x9)] forall_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq (@ (list num) (list num) (list_droplast num) P)) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) x9) ([p':tm shadowed_3] imp2_i (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq (@ (list num) (list num) (list_droplast num) P)) p') (@ shadowed_3 form path_valid p') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x9) ([q2:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq (@ (list num) (list num) (list_droplast num) P)) p')] [q3:pf (@ shadowed_3 form path_valid p')] tree_valid_path_congr X1 Eq Tr (@ (list num) (list num) (list_droplast num) P) x9 p' p1 q1 q2 q3)))))))).
tree_valid_path_droplast_has_parent : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm (list num)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_droplast num) P)) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) (@ (list num) (list num) (list_droplast num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm (list num)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p4:pf (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_droplast num) P))] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp)) Tr (@ (list num) (list num) (list_droplast num) P) (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_droplast num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3) ([pp:tm (list num)] [i2:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) ([q1:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) (@ (list num) (list num) (list_droplast num) P))] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (tree_valid_path_exists X1 Eq Tr (@ (list num) (list num) (list_droplast num) P) p1 q2) ([q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_droplast num) P))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (tree_valid_path->has_parent X1 Tr (@ (list num) (list num) (list_droplast num) P) q3 p4) ([q31:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) (@ (list num) (list num) (list_droplast num) P))] tree_has_parent_e X1 Tr (@ (list num) (list num) (list_droplast num) P) pp i2 q31 q1 q2))))).
tree_valid_path_droplast_has_siblings : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm (list num)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_droplast num) P)) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm (list num)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p4:pf (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_droplast num) P))] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))) Tr (@ (list num) (list num) (list_droplast num) P) (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_droplast num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P) imp forall num ([x5:tm num] @ num form (@ num (shadowed_0 num) inrange x4) x5 imp forall (list num) ([x6:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x5) x6 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x6))) ([pp:tm (list num)] [i2:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i2) x3 imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x4))) ([q1:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) (@ (list num) (list num) (list_droplast num) P))] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P))] forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i2) x3 imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x4)) ([j:tm num] imp_i (@ num form (@ num (shadowed_0 num) inrange i2) j) (forall (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3)) ([q3:pf (@ num form (@ num (shadowed_0 num) inrange i2) j)] forall_i (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3) ([p':tm (list num)] imp_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') ([q4:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p')] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (tree_valid_path_exists X1 Eq Tr (@ (list num) (list num) (list_droplast num) P) p1 q2) ([q5:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_droplast num) P))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (tree_valid_path->has_siblings X1 Tr (@ (list num) (list num) (list_droplast num) P) q5 p4) ([q51:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P))] tree_has_siblings_e X1 Tr (@ (list num) (list num) (list_droplast num) P) pp i2 j p' q51 q1 q2 q3 q4))))))))).
tree_valid_path_droplast_has_finite_siblings : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm (list num)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_droplast num) P)) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm (list num)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p4:pf (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_droplast num) P))] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))))) Tr (@ (list num) (list num) (list_droplast num) P) (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_droplast num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P) imp exists num ([x5:tm num] forall num ([x6:tm num] isNat x6 and geq x6 x5 imp forall (list num) ([x7:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x6) x7 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x7))))) ([pp:tm (list num)] [i2:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x5))))) ([q1:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) (@ (list num) (list num) (list_droplast num) P))] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x5))))) (tree_valid_path_exists X1 Eq Tr (@ (list num) (list num) (list_droplast num) P) p1 q2) ([q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_droplast num) P))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x5))))) (tree_valid_path->has_finite_siblings X1 Tr (@ (list num) (list num) (list_droplast num) P) q3 p4) ([q31:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P))] exists_e num ([x3:tm num] forall num ([j:tm num] isNat j and geq j x3 imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')))) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x5))))) (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p'))))) (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_droplast num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P) imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p'))))) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp1:tm (list num)] [i3:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) i3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))))) Tr (@ (list num) (list num) (list_droplast num) P) q31) pp i2) q1 q2) ([n:tm num] [q4:pf (forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p'))))] exists_i num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x5)))) n (forall_i num ([x3:tm num] isNat x3 and geq x3 n imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x4))) ([j:tm num] imp_i (isNat j and geq j n) (forall (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3))) ([q5:pf (isNat j and geq j n)] forall_i (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3)) ([p':tm (list num)] imp_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) ([q6:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p')] not_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') ([q7:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')] not_e (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (imp_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) (forall_e (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3)) (imp_e (isNat j and geq j n) (forall (list num) ([p'1:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p'1 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p'1))) (forall_e num ([x3:tm num] isNat x3 and geq x3 n imp forall (list num) ([p'2:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) p'2 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p'2))) q4 j) q5) p') q6) q7)))))))))))).
tree_valid_path_droplast : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm (list num)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_droplast num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm (list num)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] [p3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] cut (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4))) Tr) (@ (list num) (list num) (list_droplast num) P)) (tree_valid_path->path_valid X1 Tr P p3) ([p31:pf (@ shadowed_3 form path_valid P)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4))) Tr) (@ (list num) (list num) (list_droplast num) P)) (list_droplast_valid_i num eq_nat P p31) ([q32:pf (@ shadowed_3 form path_valid (@ (list num) (list num) (list_droplast num) P))] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) Tr (@ (list num) (list num) (list_droplast num) P) (and5_i (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ shadowed_3 form path_valid (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_droplast num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) (@ (list num) (list num) (list_droplast num) P) and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P) and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (tree_valid_not_empty X1 Eq Tr p1) q32 (tree_valid_path_droplast_tr_node X1 Eq Tr P p1 p2 p3) (tree_valid_path_droplast_path_congr X1 Eq Tr P p1 p2 p3) (imp_i (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) (@ (list num) (list num) (list_droplast num) P) and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P) and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P)) ([q1:pf (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_droplast num) P))] and3_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) (@ (list num) (list num) (list_droplast num) P)) (tree_valid_path_droplast_has_parent X1 Eq Tr P p1 q1) (tree_valid_path_droplast_has_siblings X1 Eq Tr P p1 q1) (tree_valid_path_droplast_has_finite_siblings X1 Eq Tr P p1 q1)))))).
tree_valid_path_prefix_step : {X1:tp} {Eq:tm (eqrel X1)} tm num -> tform = [X1:tp] [Eq:tm (eqrel X1)] [n:tm num] forall2 (tree X1) shadowed_3 ([tr:tm (tree X1)] [p1:tm shadowed_3] @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) p1 imp @ num form (@ (list num) (num arrow form) (list_length num) p1) n imp forall num ([i1:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) i1 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p1))).
tree_valid_path_prefix_zero : {X1:tp} {Eq:tm (eqrel X1)} pf (tree_valid_path_prefix_step X1 Eq zero) = [X1:tp] [Eq:tm (eqrel X1)] forall2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x3) x4 imp @ num form (@ (list num) (num arrow form) (list_length num) x4) zero imp forall num ([x5:tm num] @ num form (@ num (shadowed_0 num) inrange (succ zero)) x5 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) x5) x4))) ([tr:tm (tree X1)] [p1:tm shadowed_3] imp3_i (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) p1) (@ num form (@ (list num) (num arrow form) (list_length num) p1) zero) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) x3) p1))) ([p2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr)] [p3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) p1)] [p4:pf (@ num form (@ (list num) (num arrow form) (list_length num) p1) zero)] forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) x3) p1)) ([i1:tm num] imp_i (@ num form (@ num (shadowed_0 num) inrange (succ zero)) i1) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p1)) ([p5:pf (@ num form (@ num (shadowed_0 num) inrange (succ zero)) i1)] cut (eq num i1 zero) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p1)) (or_e1 (eq num i1 zero) (@ num form (@ num (shadowed_0 num) inrange zero) i1) (inrange_step zero i1 p_zero p5) (not_inrange_zero i1)) ([p6:pf (eq num i1 zero)] cut (@ shadowed_3 form path_valid p1) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p1)) (tree_valid_path->path_valid X1 tr p1 p3) ([p21:pf (@ shadowed_3 form path_valid p1)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) p1) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p1)) (tree_valid_path->node_exists X1 tr p1 p3) ([p22:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) p1)] cut (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p1) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p1)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p1)) (sublist_zero_all' num eq_nat p1 zero p21 p4) ([p7:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p1) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p1))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p1)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p1)) (tree_valid_path_congr' X1 Eq tr p1 (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p1) p2 p22 p7) ([p8:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p1))] congr num i1 zero ([z1:tm num] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) z1) p1)) p6 p8))))))))).
tree_valid_path_prefix_incr : {X1:tp} {Eq:tm (eqrel X1)} {n:tnum} pf (isNat n) -> pf (tree_valid_path_prefix_step X1 Eq n) -> pf (tree_valid_path_prefix_step X1 Eq (plus n one)) = [X1:tp] [Eq:tm (eqrel X1)] [n:tnum] [p1:pf (isNat n)] [p2:pf (tree_valid_path_prefix_step X1 Eq n)] cut (> (succ n) zero) (forall2 (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x3) x4 imp @ num form (@ (list num) (num arrow form) (list_length num) x4) (succ n) imp forall num ([x5:tm num] @ num form (@ num (shadowed_0 num) inrange (succ (succ n))) x5 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) x5) x4)))) (trans_gt_geq (succ n) n zero (succ_gt n) (isNat->geq_zero n p1)) ([p11:pf (gt (succ n) zero)] forall2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x3) x4 imp @ num form (@ (list num) (num arrow form) (list_length num) x4) (succ n) imp forall num ([x5:tm num] @ num form (@ num (shadowed_0 num) inrange (succ (succ n))) x5 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) x5) x4))) ([tr:tm (tree X1)] [p3:tm shadowed_3] imp3_i (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) p3) (@ num form (@ (list num) (num arrow form) (list_length num) p3) (succ n)) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ (succ n))) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) x3) p3))) ([q1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr)] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) p3)] [q3:pf (@ num form (@ (list num) (num arrow form) (list_length num) p3) (succ n))] cut (@ shadowed_3 form path_valid p3) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ (succ n))) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) x3) p3))) (tree_valid_path->path_valid X1 tr p3 q2) ([q22:pf (@ shadowed_3 form path_valid p3)] forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ (succ n))) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) x3) p3)) ([i1:tm num] imp_i (@ num form (@ num (shadowed_0 num) inrange (succ (succ n))) i1) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) ([q4:pf (@ num form (@ num (shadowed_0 num) inrange (succ (succ n))) i1)] or_e (eq num i1 (succ n)) (@ num form (@ num (shadowed_0 num) inrange (succ n)) i1) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (inrange_step (succ n) i1 (isNat->isInt (succ n) (list_length_isNat num p3 (succ n) q3)) q4) ([q5:pf (eq num i1 (succ n))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) p3) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (tree_valid_path->node_exists X1 tr p3 q2) ([q51:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) p3)] cut (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p3) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) (succ n)) p3)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (sublist_zero_all' num eq_nat p3 (succ n) q22 q3) ([q52:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p3) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) (succ n)) p3))] cut (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p3) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (congr num i1 (succ n) ([z1:tm num] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p3) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) z1) p3)) q5 q52) ([q53:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p3) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3))] tree_valid_path_congr' X1 Eq tr p3 (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3) q1 q51 q53)))) ([q6:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) i1)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) (@ (list num) (list num) (list_droplast num) p3) imp @ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_droplast num) p3)) n imp forall num ([i2:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) i2 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i2) (@ (list num) (list num) (list_droplast num) p3)))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (forall2_e (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x3) x4 imp @ num form (@ (list num) (num arrow form) (list_length num) x4) n imp forall num ([i3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) i3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i3) x4))) p2 tr (@ (list num) (list num) (list_droplast num) p3)) ([p4:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) (@ (list num) (list num) (list_droplast num) p3) imp @ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_droplast num) p3)) n imp forall num ([i4:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) i4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i4) (@ (list num) (list num) (list_droplast num) p3))))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) (@ (list num) (list num) (list_droplast num) p3)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (tree_valid_path_droplast X1 Eq tr p3 q1 (list_length->not_nil num p3 (succ n) q3 p11) q2) ([q21:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) (@ (list num) (list num) (list_droplast num) p3))] cut (@ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_droplast num) p3)) (pred (succ n))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (list_length_droplast_i num p3 (succ n) q3 p11) ([q31:pf (@ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_droplast num) p3)) (pred (succ n)))] cut (@ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_droplast num) p3)) n) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (congr num n (pred (succ n)) ([z2:tm num] @ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_droplast num) p3)) z2) (symm num (pred (succ n)) n (predsucc n)) q31) ([q32:pf (@ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_droplast num) p3)) n)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) (@ (list num) (list num) (list_droplast num) p3))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (imp_e (@ num form (@ num (shadowed_0 num) inrange (succ n)) i1) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) (@ (list num) (list num) (list_droplast num) p3))) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) x3) (@ (list num) (list num) (list_droplast num) p3))) (imp3_e (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) (@ (list num) (list num) (list_droplast num) p3)) (@ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_droplast num) p3)) n) (forall num ([i5:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) i5 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i5) (@ (list num) (list num) (list_droplast num) p3)))) p4 q1 q21 q32) i1) q6) ([q61:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) (@ (list num) (list num) (list_droplast num) p3)))] cut (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) (@ (list num) (list num) (list_droplast num) p3))) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3)) (list_droplast_sublist_eq num eq_nat p3 n i1 q22 q3 q6) ([q62:pf (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) (@ (list num) (list num) (list_droplast num) p3))) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3))] tree_valid_path_congr' X1 Eq tr (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) (@ (list num) (list num) (list_droplast num) p3)) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p3) q1 q61 q62))))))))))))).
tree_valid_path_prefix : {X1:tp} {X2:tm (eqrel X1)} pf (forall num ([n:tm num] isNat n imp tree_valid_path_prefix_step X1 X2 n)) = [X1:tp] [X2:tm (eqrel X1)] induction ([x3:tnum] tree_valid_path_prefix_step X1 X2 x3) (tree_valid_path_prefix_zero X1 X2) ([n:tnum] [x3:pf (isNat n)] [x4:pf (tree_valid_path_prefix_step X1 X2 n)] tree_valid_path_prefix_incr X1 X2 n x3 x4).
tree_valid_root_node_exists : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (exists X1 ([rt:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (tree_root X1) Tr) rt)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] and3_l (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) d)) (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (exists X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p2:tm (list num)] @ (list num) form (list_is_nil num) p2 imp @ X1 form (@ (list num) (X1 arrow form) x4 p2) x5))) Tr) x3)) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x4) d) and @ (tree X1) form (tree_is_not_empty X1) x4 and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) x3) x4) Eq Tr p1) ([q11:pf (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) d))] [q12:pf (@ (tree X1) form (tree_is_not_empty X1) Tr)] [q13:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr)] exists_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3) (exists X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p3:tm (list num)] @ (list num) form (list_is_nil num) p3 imp @ X1 form (@ (list num) (X1 arrow form) x4 p3) x5))) Tr) x3)) (def1_e (tree X1) ([x3:tm (tree X1)] exists shadowed_3 ([p4:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p4)) Tr q12) ([p5:tm shadowed_3] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p5)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p5) (exists X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p6:tm (list num)] @ (list num) form (list_is_nil num) p6 imp @ X1 form (@ (list num) (X1 arrow form) x4 p6) x5))) Tr) x3)) (tree_valid_path_exists X1 Eq Tr p5 p1 q2) ([q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p5)] cut (@ shadowed_3 form path_valid p5) (exists X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p7:tm (list num)] @ (list num) form (list_is_nil num) p7 imp @ X1 form (@ (list num) (X1 arrow form) x4 p7) x5))) Tr) x3)) (tree_valid_path->path_valid X1 Tr p5 q3) ([q31:pf (@ shadowed_3 form path_valid p5)] exists_e num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p5) x3) (exists X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p8:tm (list num)] @ (list num) form (list_is_nil num) p8 imp @ X1 form (@ (list num) (X1 arrow form) x4 p8) x5))) Tr) x3)) (list_length_exists num eq_nat p5 q31) ([n:tm num] [q32:pf (@ num form (@ (list num) (num arrow form) (list_length num) p5) n)] cut (isNat n) (exists X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p9:tm (list num)] @ (list num) form (list_is_nil num) p9 imp @ X1 form (@ (list num) (X1 arrow form) x4 p9) x5))) Tr) x3)) (list_length_isNat num p5 n q32) ([q33:pf (isNat n)] cut (> (succ n) zero) (exists X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p10:tm (list num)] @ (list num) form (list_is_nil num) p10 imp @ X1 form (@ (list num) (X1 arrow form) x4 p10) x5))) Tr) x3)) (trans_gt_geq (succ n) n zero (succ_gt n) (isNat->geq_zero n q33)) ([q34:pf (gt (succ n) zero)] cut (forall num ([i1:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) i1 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i1) p5))) (exists X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p11:tm (list num)] @ (list num) form (list_is_nil num) p11 imp @ X1 form (@ (list num) (X1 arrow form) x4 p11) x5))) Tr) x3)) (imp3_e (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p5) (@ num form (@ (list num) (num arrow form) (list_length num) p5) n) (forall num ([i2:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) i2 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i2) p5))) (forall2_e (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x3) x4 imp @ num form (@ (list num) (num arrow form) (list_length num) x4) n imp forall num ([i3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) i3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i3) x4))) (imp_e (isNat n) (tree_valid_path_prefix_step X1 Eq n) (forall_e num ([x3:tm num] isNat x3 imp tree_valid_path_prefix_step X1 Eq x3) (tree_valid_path_prefix X1 Eq) n) q33) Tr p5) p1 q3 q32) ([q4:pf (forall num ([i4:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) i4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) i4) p5)))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p5)) (exists X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p12:tm (list num)] @ (list num) form (list_is_nil num) p12 imp @ X1 form (@ (list num) (X1 arrow form) x4 p12) x5))) Tr) x3)) (imp_e (@ num form (@ num (shadowed_0 num) inrange (succ n)) zero) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p5)) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) x3) p5)) q4 zero) (inrange_zero (succ n) q34)) ([q5:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p5))] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p5)) x3) (exists X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p13:tm (list num)] @ (list num) form (list_is_nil num) p13 imp @ X1 form (@ (list num) (X1 arrow form) x4 p13) x5))) Tr) x3)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) Tr (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p5) q5) ([x6:tm X1] [q51:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p5)) x6)] exists_i X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x4:tm (tree X1)] [x5:tm X1] forall (list num) ([p14:tm (list num)] @ (list num) form (list_is_nil num) p14 imp @ X1 form (@ (list num) (X1 arrow form) x4 p14) x5))) Tr) x3) x6 (def2_i (tree X1) X1 ([x3:tm (tree X1)] [x4:tm X1] forall (list num) ([p15:tm (list num)] @ (list num) form (list_is_nil num) p15 imp @ X1 form (@ (list num) (X1 arrow form) x3 p15) x4)) Tr x6 (forall_i (list num) ([x3:tm (list num)] @ (list num) form (list_is_nil num) x3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) x6) ([p':tm (list num)] imp_i (@ (list num) form (list_is_nil num) p') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x6) ([q6:pf (@ (list num) form (list_is_nil num) p')] tree_valid_path_congr X1 Eq Tr (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p5) x6 p' p1 q51 (list_nil_eq_i num eq_nat (@ (list num) (list num) (@ num (list num arrow list num) (@ num (num arrow list num arrow list num) (sublist num) zero) zero) p5) p' eq_nat_validper (sublist_zero_nil num eq_nat p5 q31) q6) (list_valid_nil' num eq_nat p' eq_nat_validper q6))))))))))))))).
tree_valid_subtrees_list_valid : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] and_e1 (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr and @ (tree X1) form (tree_is_not_empty X1) tr)) (def2_e (list (tree X1)) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] @ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) x3)) x4 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr and @ (tree X1) form (tree_is_not_empty X1) tr)) Eq Sbtrs p1).
tree_valid_subtrees_tr_valid : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {Tr:tm (tree X1)} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) Tr) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [Tr:tm (tree X1)] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p2:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) Tr)] and_e1 (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) (@ (tree X1) form (tree_is_not_empty X1) Tr) (imp_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) Tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr and @ (tree X1) form (tree_is_not_empty X1) Tr) (forall_e (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 and @ (tree X1) form (tree_is_not_empty X1) x3) (and_e2 (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr and @ (tree X1) form (tree_is_not_empty X1) tr)) (def2_e (list (tree X1)) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] @ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) x3)) x4 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr and @ (tree X1) form (tree_is_not_empty X1) tr)) Eq Sbtrs p1)) Tr) p2).
tree_valid_subtrees_tr_not_empty : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {Tr:tm (tree X1)} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) Tr) -> pf (@ (tree X1) form (tree_is_not_empty X1) Tr) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [Tr:tm (tree X1)] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p2:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) Tr)] and_e2 (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) (@ (tree X1) form (tree_is_not_empty X1) Tr) (imp_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) Tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr and @ (tree X1) form (tree_is_not_empty X1) Tr) (forall_e (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 and @ (tree X1) form (tree_is_not_empty X1) x3) (and_e2 (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr and @ (tree X1) form (tree_is_not_empty X1) tr)) (def2_e (list (tree X1)) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] @ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) x3)) x4 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr and @ (tree X1) form (tree_is_not_empty X1) tr)) Eq Sbtrs p1)) Tr) p2).
tree_height_isNat : {X1:tp} {Tr:tm (tree X1)} {N:tm num} pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) N) -> pf (isNat N) = [X1:tp] [Tr:tm (tree X1)] [N:tm num] [p1:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) N)] and_e1 (isNat N) (exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred N) and forall shadowed_3 ([p2:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p2 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p2) n and @ num form (@ num (shadowed_0 num) inrange N) n)))) (def2_e num (tree X1) ([x3:tm (tree X1)] [x4:tm num] isNat x4 and exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred x4) and forall shadowed_3 ([p3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p3 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p3) n and @ num form (@ num (shadowed_0 num) inrange x4) n)))) Tr N p1).
tree_valid_path_sbtr_exists : {X1:tp} {Eq:tm (eqrel X1)} {V:tm X1} {Sbtrs:tm (list (tree X1))} {P:tm shadowed_3} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (exists2 num (tree X1) ([hd:tm num] [tr:tm (tree X1)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) hd) tr)) = [X1:tp] [Eq:tm (eqrel X1)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [P:tm shadowed_3] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (exists2 num (list num arrow X1 arrow form) ([x3:tm num] [x4:tm (list num arrow X1 arrow form)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (lam3 (list (tree X1)) num (tree X1) form ([x5:tm (list (tree X1))] [x6:tm num] [x7:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x5 x6) x7)) Sbtrs) x3) x4)) (tree_valid_path->node_exists X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1) ([q1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] exists_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3) (exists2 num (list num arrow X1 arrow form) ([x3:tm num] [x4:tm (list num arrow X1 arrow form)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (lam3 (list (tree X1)) num (tree X1) form ([x5:tm (list (tree X1))] [x6:tm num] [x7:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x5 x6) x7)) Sbtrs) x3) x4)) (list_not_nil_hd_exists num eq_nat P (tree_valid_path->path_valid X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1) p2) ([hd:tm num] [q2:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd)] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3) (exists2 num (list num arrow X1 arrow form) ([x3:tm num] [x4:tm (list num arrow X1 arrow form)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (lam3 (list (tree X1)) num (tree X1) form ([x5:tm (list (tree X1))] [x6:tm num] [x7:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x5 x6) x7)) Sbtrs) x3) x4)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P q1) ([v1:tm X1] [q3:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) v1)] cut (forall num ([hd1:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd1 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd1) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1))) (exists2 num (list num arrow X1 arrow form) ([x3:tm num] [x4:tm (list num arrow X1 arrow form)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (lam3 (list (tree X1)) num (tree X1) form ([x5:tm (list (tree X1))] [x6:tm num] [x7:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x5 x6) x7)) Sbtrs) x3) x4)) (if_e2 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) v1) (forall num ([hd2:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd2 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd2) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1))) (and_e2 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) v1) (forall num ([hd3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd4:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd4 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd4) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P v1 q3)) (list_is_not_nil_e num P p2)) ([q4:pf (forall num ([hd5:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd5 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd5) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)))] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) v1) (exists2 num (list num arrow X1 arrow form) ([x3:tm num] [x4:tm (list num arrow X1 arrow form)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (lam3 (list (tree X1)) num (tree X1) form ([x5:tm (list (tree X1))] [x6:tm num] [x7:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x5 x6) x7)) Sbtrs) x3) x4)) (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)) q4 hd) q2) ([sbtr:tm (list num arrow X1 arrow form)] [q5:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)] exists2_i num (list num arrow X1 arrow form) ([x3:tm num] [x4:tm (list num arrow X1 arrow form)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (lam3 (list (tree X1)) num (tree X1) form ([x5:tm (list (tree X1))] [x6:tm num] [x7:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x5 x6) x7)) Sbtrs) x3) x4) hd sbtr (and_i (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd) (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (lam3 (list (tree X1)) num (tree X1) form ([x3:tm (list (tree X1))] [x4:tm num] [x5:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x3 x4) x5)) Sbtrs) hd) sbtr) q2 (def3_i (list (tree X1)) num (tree X1) ([x3:tm (list (tree X1))] [x4:tm num] [x5:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x3 x4) x5) Sbtrs hd sbtr (and_e1 (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1) q5)))))))).
tree_eq_validper : {X1:tp} {Eq:tm (per X1)} pf (@ (per X1) form (validper X1) Eq) -> pf (@ (per (tree X1)) form (validper (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) = [X1:tp] [Eq:tm (per X1)] [p1:pf (@ (per X1) form (validper X1) Eq)] cut (@ (per (rel (list num) X1)) form (validper (rel (list num) X1)) (@ (per X1) (per (rel (list num) X1)) (@ (per (list num)) (per X1 arrow per (rel (list num) X1)) (per_rel (list num) X1) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat)) Eq)) (@ (per (rel shadowed_3 X1)) form (validper (rel shadowed_3 X1)) (@ (eqrel X1) (per (rel shadowed_3 X1)) (lam (eqrel X1) (per (rel shadowed_3 X1)) ([x3:tm (eqrel X1)] @ (per X1) (per (rel shadowed_3 X1)) (@ (per shadowed_3) (per X1 arrow per (rel shadowed_3 X1)) (per_rel shadowed_3 X1) path_eq) x3)) Eq)) (validper_per_rel (list num) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) X1 Eq (list_eq_validper num eq_nat eq_nat_validper) p1) ([p2:pf (@ (per (rel shadowed_3 X1)) form (validper (rel shadowed_3 X1)) (@ (per X1) (per (rel shadowed_3 X1)) (@ (per shadowed_3) (per X1 arrow per (rel shadowed_3 X1)) (per_rel shadowed_3 X1) path_eq) Eq))] gdef1_i (per (rel shadowed_3 X1)) (eqrel X1) ([x3:tm (eqrel X1)] @ (per X1) (per (rel shadowed_3 X1)) (@ (per shadowed_3) (per X1 arrow per (rel shadowed_3 X1)) (per_rel shadowed_3 X1) path_eq) x3) Eq ([z1:tm (per (rel shadowed_3 X1))] @ (per (rel shadowed_3 X1)) form (validper (rel shadowed_3 X1)) z1) p2).
tree_eq_node : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (forall2 shadowed_3 X1 ([p1:tm shadowed_3] [v1:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p1) v1 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p1) v1)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [p2:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] cut (@ (tree X1) form (@ (tree X1) (tree X1 arrow form) (@ (per X1) (per (rel shadowed_3 X1)) (@ (per shadowed_3) (per X1 arrow per (rel shadowed_3 X1)) (per_rel shadowed_3 X1) path_eq) Eq) Tr1) Tr2) (forall2 shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4)) (gdef1_e (tree X1 arrow tree X1 arrow form) (eqrel X1) ([x3:tm (eqrel X1)] @ (per X1) (per (rel shadowed_3 X1)) (@ (per shadowed_3) (per X1 arrow per (rel shadowed_3 X1)) (per_rel shadowed_3 X1) path_eq) x3) Eq ([z1:tm (tree X1 arrow tree X1 arrow form)] @ (tree X1) form (@ (tree X1) (tree X1 arrow form) z1 Tr1) Tr2) p2) ([p3:pf (@ (tree X1) form (@ (tree X1) (tree X1 arrow form) (@ (per X1) (per (rel shadowed_3 X1)) (@ (per shadowed_3) (per X1 arrow per (rel shadowed_3 X1)) (per_rel shadowed_3 X1) path_eq) Eq) Tr1) Tr2)] forall2_i shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) ([p4:tm shadowed_3] [v2:tm X1] equiv_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2) (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2) ([q1:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2)] and_l (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p4) p4) (@ X1 form (@ X1 (shadowed_0 X1) Eq v2) v2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2) (per_rel_e2 shadowed_3 X1 path_eq Eq Tr1 Tr2 p4 v2 p3 q1) ([q12:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p4) p4)] [q13:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq v2) v2)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2) (per_rel_e1 shadowed_3 X1 path_eq Eq Tr1 Tr2 p4 p4 v2 v2 p3 q12 q13) ([q14:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2)] equiv_e1 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2) q14 q1)))) (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2) ([q2:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2)] and_l (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p4) p4) (@ X1 form (@ X1 (shadowed_0 X1) Eq v2) v2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2) (per_rel_e3 shadowed_3 X1 path_eq Eq Tr1 Tr2 p4 v2 p3 q2) ([q21:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p4) p4)] [q22:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq v2) v2)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2) (per_rel_e1 shadowed_3 X1 path_eq Eq Tr1 Tr2 p4 p4 v2 v2 p3 q21 q22) ([q23:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2)] equiv_e2 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) v2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) v2) q23 q2)))))).
tree_eq_e : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (forall shadowed_3 ([p1:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p1 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p1)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] cut (forall2 shadowed_3 X1 ([p2:tm shadowed_3] [v1:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p2) v1 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p2) v1)) (forall shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x4:tm (tree X1)] [x5:tm shadowed_3] exists X1 ([x6:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x4 x5) x6))) Tr2) x3)) (tree_eq_node X1 Eq Tr1 Tr2 p1) ([p3:pf (forall2 shadowed_3 X1 ([p3:tm shadowed_3] [x7:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p3) x7 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p3) x7))] forall_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x4:tm (tree X1)] [x5:tm shadowed_3] exists X1 ([x8:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x4 x5) x8))) Tr2) x3) ([p4:tm shadowed_3] equiv_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p4) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x9:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x9))) Tr2) p4) (imp_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p4) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x10:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x10))) Tr2) p4) ([q1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p4)] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr1 p4) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x11:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x11))) Tr2) p4) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x12:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x12)) Tr1 p4 q1) ([x13:tm X1] [q11:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) x13)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) x13) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x14:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x14))) Tr2) p4) (equiv_e1 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) x13) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) x13) (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) p3 p4 x13) q11) ([q12:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) x13)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x15:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x15)) Tr2 p4 (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr2 p4) x3) x13 q12))))) (imp_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p4) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x16:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x16))) Tr1) p4) ([q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p4)] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr2 p4) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x17:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x17))) Tr1) p4) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x18:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x18)) Tr2 p4 q2) ([x19:tm X1] [q21:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) x19)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) x19) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x20:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x20))) Tr1) p4) (equiv_e2 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) x19) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) x19) (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) p3 p4 x19) q21) ([q22:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) x19)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x21:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x21)) Tr1 p4 (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr1 p4) x3) x19 q22))))))).
tree_valid_path_tl_node : {X1:tp} {Eq:tm (eqrel X1)} {V:tm X1} {Sbtrs:tm (list (tree X1))} {P:tm shadowed_3} {I:tm num} {Tr:tm (tree X1)} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) I) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [P:tm shadowed_3] [I:tm num] [Tr:tm (tree X1)] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] [p3:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I)] [p6:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p4:pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) I) Tr)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path->node_exists X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1) ([q1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P q1) ([v1:tm X1] [q2:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) v1)] cut (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (if_e2 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) v1) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1))) (and_e2 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) v1) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P v1 q2)) (list_is_not_nil_e num P p2)) ([q3:pf (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)))] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) v1) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)) q3 I) p3) ([sbtr:tm (list num arrow X1 arrow form)] [q4:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) q4 ([q41:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs I) sbtr)] [q42:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) v1)] cut (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_subtrees_list_valid X1 Eq Sbtrs p6) ([q5:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) sbtr) Tr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (list_nth_eq (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs I sbtr Tr q5 (list_nth_i (tree X1) Sbtrs I sbtr q41) p4) ([q6:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) sbtr) Tr)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p6 (list_member_i' (tree X1) Sbtrs I sbtr q41)) ([q7:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] equiv_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3) (tree_eq_e X1 Eq sbtr Tr q6) (@ (list num) (list num) (list_tl num) P)) (tree_node_i X1 sbtr (@ (list num) (list num) (list_tl num) P) v1 q42))))))))).
tree_valid_path_tl_congr : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {P:tm (list num)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr) (@ (list num) (list num) (list_tl num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [P:tm (list num)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x5))) Tr (@ (list num) (list num) (list_tl num) P) (forall_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) x3 imp forall shadowed_3 ([x4:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq (@ (list num) (list num) (list_tl num) P)) x4 imp @ shadowed_3 form path_valid x4 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x4) x3)) ([x6:tm X1] imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) x6) (forall shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq (@ (list num) (list num) (list_tl num) P)) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) x6)) ([q1:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) x6)] forall_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq (@ (list num) (list num) (list_tl num) P)) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) x6) ([p':tm shadowed_3] imp2_i (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq (@ (list num) (list num) (list_tl num) P)) p') (@ shadowed_3 form path_valid p') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x6) ([q2:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq (@ (list num) (list num) (list_tl num) P)) p')] [q3:pf (@ shadowed_3 form path_valid p')] tree_valid_path_congr X1 Eq Tr (@ (list num) (list num) (list_tl num) P) x6 p' p1 q1 q2 q3))))).
tree_valid_path_tl_has_parent : {X1:tp} {Eq:tm (eqrel X1)} {V:tm X1} {Sbtrs:tm (list (tree X1))} {P:tm shadowed_3} {I:tm num} {Tr:tm (tree X1)} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) I) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr) (@ (list num) (list num) (list_tl num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [P:tm shadowed_3] [I:tm num] [Tr:tm (tree X1)] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] [p3:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I)] [p6:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p4:pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) I) Tr)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp))) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path->has_parent X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1 p2) ([q11:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] cut (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i2:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp))) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path->path_valid X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1) ([q12:pf (@ shadowed_3 form path_valid P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i3:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp))) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path->node_exists X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1) ([q13:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i4) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp)) Tr (@ (list num) (list num) (list_tl num) P) (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_tl num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3) ([pp:tm (list num)] [i5:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i5) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) ([q2:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i5) (@ (list num) (list num) (list_tl num) P))] [q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P))] cut (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i5) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (list_append_cons num eq_nat P I pp i5 q12 p3 q2) ([q41:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i5) P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i5) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp1:tm (list num)] [i6:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) i6) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp1)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P q11) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp) i5) q41 q13) ([q42:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp) q42) ([x6:tm X1] [q5:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) x6)] cut (@ num form (@ num (shadowed_0 num) eq_nat I) I) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (list_member_valid num eq_nat P I q12 (list_hd_member num P I p3)) ([q51:pf (@ num form (@ num (shadowed_0 num) eq_nat I) I)] cut (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (list_cons->not_nil num eq_nat I pp q51) ([q52:pf (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)))] cut (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) x6))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (if_e2 (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) x6))) (and_e2 (@ shadowed_3 form path_valid (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) (if (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) x6)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp) x6 q5)) q52) ([q53:pf (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) x6)))] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) x6) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) I) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) x6)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) x6)) q53 I) (list_hd_cons' num eq_nat I I pp q51)) ([sbtr:tm (list num arrow X1 arrow form)] [q6:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) x6)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) x6) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) q6 ([q61:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs I) sbtr)] [q62:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp))) x6)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p6 (list_member_i (tree X1) Sbtrs I sbtr (list_nth_i (tree X1) Sbtrs I sbtr q61))) ([q71:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) pp) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (list_valid_append' num eq_nat (@ (list num) (list num) (list_tl num) P) pp i5 (list_valid_tl'' num eq_nat P q12 p2) q2) ([q72:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) pp)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) sbtr pp) x6) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (tree_valid_path_congr X1 Eq sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) x6 pp q71 q62 (list_eq_tl_cons num eq_nat pp I q72) q72) ([q73:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr pp) x6)] cut (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (tree_valid_subtrees_list_valid X1 Eq Sbtrs p6) ([q74:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) sbtr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (list_nth_eq (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs I Tr sbtr q74 p4 (list_nth_i (tree X1) Sbtrs I sbtr q61)) ([q75:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) sbtr)] cut (forall shadowed_3 ([p5:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p5 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p5)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (tree_eq_e X1 Eq Tr sbtr q75) ([q65:pf (forall shadowed_3 ([p7:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p7 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p7))] equiv_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) pp) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) pp) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) x3) q65 pp) (tree_node_i X1 sbtr pp x6 q73))))))))))))))))))))).
tree_valid_path_tl_has_siblings : {X1:tp} {Eq:tm (eqrel X1)} {V:tm X1} {Sbtrs:tm (list (tree X1))} {P:tm shadowed_3} {I:tm num} {Tr:tm (tree X1)} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) I) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) (@ (list num) (list num) (list_tl num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [P:tm shadowed_3] [I:tm num] [Tr:tm (tree X1)] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] [p3:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I)] [p6:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p4:pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) I) Tr)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path->has_siblings X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1 p2) ([q11:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] cut (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i2:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i2) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path->path_valid X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1) ([q12:pf (@ shadowed_3 form path_valid P)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i3:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i3) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))) Tr) (@ (list num) (list num) (list_tl num) P)) (list_valid_tl'' num eq_nat P q12 p2) ([q14:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (list_tl num) P))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i4) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i4) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path->node_exists X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1) ([q13:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] cut (@ num form (@ num (shadowed_0 num) eq_nat I) I) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i5:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i5) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i5) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))) Tr) (@ (list num) (list num) (list_tl num) P)) (list_member_valid num eq_nat P I q12 (list_hd_member num P I p3)) ([q61:pf (@ num form (@ num (shadowed_0 num) eq_nat I) I)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i6:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i6) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i6) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))) Tr (@ (list num) (list num) (list_tl num) P) (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_tl num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P) imp forall num ([x5:tm num] @ num form (@ num (shadowed_0 num) inrange x4) x5 imp forall (list num) ([x6:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x5) x6 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x6))) ([pp:tm (list num)] [i7:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i7) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i7) x3 imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x4))) ([q2:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i7) (@ (list num) (list num) (list_tl num) P))] [q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P))] cut (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i7) P) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i7) x3 imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x4))) (list_append_cons num eq_nat P I pp i7 q12 p3 q2) ([q21:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i7) P)] forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i7) x3 imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x4)) ([j:tm num] imp_i (@ num form (@ num (shadowed_0 num) inrange i7) j) (forall (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3)) ([q4:pf (@ num form (@ num (shadowed_0 num) inrange i7) j)] cut (@ num form (@ num (shadowed_0 num) eq_nat j) j) (forall (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3)) (eq_nat_i j j (refl num j) (and_i (isInt j) (geq j zero) (inrange_e1 i7 j q4) (inrange_e2 i7 j q4))) ([q41:pf (@ num form (@ num (shadowed_0 num) eq_nat j) j)] forall_i (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3) ([p':tm (list num)] imp_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') ([q5:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p')] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) pp) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (list_valid_append' num eq_nat (@ (list num) (list num) (list_tl num) P) pp i7 q14 q2) ([q22:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) pp)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (list_valid_append num eq_nat pp j p' q22 q5) ([q55:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p')] cut (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i7) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P imp forall num ([j1:tm num] @ num form (@ num (shadowed_0 num) inrange i7) j1 imp forall (list num) ([p'1:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j1) p'1 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'1))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P imp forall num ([j2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) j2 imp forall (list num) ([p'2:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) j2) p'2 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'2))) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp1:tm (list num)] [i8:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) i8) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j3:tm num] @ num form (@ num (shadowed_0 num) inrange i8) j3 imp forall (list num) ([p'3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) j3) p'3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'3)))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P q11) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp) i7) ([q51:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i7) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P imp forall num ([j4:tm num] @ num form (@ num (shadowed_0 num) inrange i7) j4 imp forall (list num) ([p'4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j4) p'4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'4)))] cut (forall num ([j5:tm num] @ num form (@ num (shadowed_0 num) inrange i7) j5 imp forall (list num) ([p'5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j5) p'5 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'5))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i7) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (forall num ([j6:tm num] @ num form (@ num (shadowed_0 num) inrange i7) j6 imp forall (list num) ([p'6:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j6) p'6 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'6))) q51 q21 q13) ([q52:pf (forall num ([j7:tm num] @ num form (@ num (shadowed_0 num) inrange i7) j7 imp forall (list num) ([p'7:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j7) p'7 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'7)))] cut (forall (list num) ([p'8:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) p'8 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'8)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (imp_e (@ num form (@ num (shadowed_0 num) inrange i7) j) (forall (list num) ([p'9:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) p'9 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'9)) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i7) x3 imp forall (list num) ([p'10:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) x3) p'10 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'10)) q52 j) q4) ([q53:pf (forall (list num) ([p'11:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) p'11 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'11))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (imp_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (forall_e (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3) q53 (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (list_append_change_last num eq_nat I pp i7 P j p' q61 q22 q21 q41 q5)) ([q54:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p') q54) ([x6:tm X1] [q6:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) x6)] cut (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (list_cons->not_nil num eq_nat I p' q61) ([q62:pf (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')))] cut (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (if_e2 (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6))) (and_e2 (@ shadowed_3 form path_valid (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (if (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p') x6 q6)) q62) ([q63:pf (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6)))] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) I) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6)) q63 I) (list_hd_cons' num eq_nat I I p' q61)) ([sbtr:tm (list num arrow X1 arrow form)] [q7:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') q7 ([q71:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs I) sbtr)] [q72:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p6 (list_member_i (tree X1) Sbtrs I sbtr (list_nth_i (tree X1) Sbtrs I sbtr q71))) ([q81:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) sbtr p') x6) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (tree_valid_path_congr X1 Eq sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) x6 p' q81 q72 (list_eq_tl_cons num eq_nat p' I q55) q55) ([q82:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr p') x6)] cut (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (tree_valid_subtrees_list_valid X1 Eq Sbtrs p6) ([q83:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) sbtr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (list_nth_eq (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs I Tr sbtr q83 p4 (list_nth_i (tree X1) Sbtrs I sbtr q71)) ([q84:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) sbtr)] cut (forall shadowed_3 ([p5:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p5 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p5)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (tree_eq_e X1 Eq Tr sbtr q84) ([q85:pf (forall shadowed_3 ([p7:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p7 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p7))] equiv_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p') (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) x3) q85 p') (def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x7:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x7)) sbtr p' (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) sbtr p') x3) x6 q82)))))))))))))))))))))))))))))))).
tree_valid_path_tl_has_finite_siblings : {X1:tp} {Eq:tm (eqrel X1)} {V:tm X1} {Sbtrs:tm (list (tree X1))} {P:tm shadowed_3} {I:tm num} {Tr:tm (tree X1)} pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I) -> pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) I) Tr) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr) (@ (list num) (list num) (list_tl num) P)) = [X1:tp] [Eq:tm (eqrel X1)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [P:tm shadowed_3] [I:tm num] [Tr:tm (tree X1)] [p1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] [p2:pf (@ (list num) form (list_is_not_nil num) P)] [p3:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I)] [p4:pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) I) Tr)] [p5:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))))) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path->has_finite_siblings X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1 p2) ([q11:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] cut (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i2:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))))) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path->path_valid X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1) ([q12:pf (@ shadowed_3 form path_valid P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i3:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))))) Tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path->node_exists X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p1) ([q13:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i4) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))))) Tr) (@ (list num) (list num) (list_tl num) P)) (list_valid_tl'' num eq_nat P q12 p2) ([q14:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (list_tl num) P))] cut (@ num form (@ num (shadowed_0 num) eq_nat I) I) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i5:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i5) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))))) Tr) (@ (list num) (list num) (list_tl num) P)) (list_member_valid num eq_nat P I q12 (list_hd_member num P I p3)) ([q15:pf (@ num form (@ num (shadowed_0 num) eq_nat I) I)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i6:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i6) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))))) Tr (@ (list num) (list num) (list_tl num) P) (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_tl num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P) imp exists num ([x5:tm num] forall num ([x6:tm num] isNat x6 and geq x6 x5 imp forall (list num) ([x7:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x6) x7 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x7))))) ([pp:tm (list num)] [i7:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i7) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x5))))) ([q2:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i7) (@ (list num) (list num) (list_tl num) P))] [q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P))] cut (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i7) P) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x5))))) (list_append_cons num eq_nat P I pp i7 q12 p3 q2) ([q41:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i7) P)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) pp) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x5))))) (list_valid_append' num eq_nat (@ (list num) (list num) (list_tl num) P) pp i7 q14 q2) ([q42:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) pp)] exists_e num ([x3:tm num] forall num ([j:tm num] isNat j and geq j x3 imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p')))) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x5))))) (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) i7) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'))))) (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'))))) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp1:tm (list num)] [i8:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) i8) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P q11) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp) i7) q41 q13) ([n:tm num] [q5:pf (forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'))))] exists_i num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x5)))) n (forall_i num ([x3:tm num] isNat x3 and geq x3 n imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x4))) ([j:tm num] imp_i (isNat j and geq j n) (forall (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3))) ([q6:pf (isNat j and geq j n)] forall_i (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3)) ([p':tm (list num)] imp_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) ([q7:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p')] cut (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) (list_append_change_last num eq_nat I pp i7 P j p' q15 q42 q41 (eq_nat_i j j (refl num j) (and_e1 (isNat j) (geq j n) q6)) q7) ([q71:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))] cut (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) (imp_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) (forall_e (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (imp_e (isNat j and geq j n) (forall (list num) ([p'1:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) j) p'1 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'1))) (forall_e num ([x3:tm num] isNat x3 and geq x3 n imp forall (list num) ([p'2:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) pp)) x3) p'2 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'2))) q5 j) q6) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) q71) ([q72:pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')))] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p') (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) (list_valid_append num eq_nat pp j p' q42 q7) ([q73:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p')] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) (list_valid_cons num eq_nat I p' q15 q73) ([q74:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))] not_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p') ([q8:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr p') x3) false (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) Tr p' q8) ([x6:tm X1] [q81:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x6)] not_e (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) q72 (def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x7:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x7)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p') (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) x3) x6 (def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p') x6 (and_i (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (if (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6)))) q74 (if_i2 (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6))) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (list_cons->not_nil num eq_nat I p' q15) (forall_i num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6)) ([hd:tm num] imp_i (@ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) hd) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6)) ([q9:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) hd)] cut (@ num form (@ num (num arrow form) eq_nat I) hd) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6)) (list_hd_cons num eq_nat I p' hd q15 q73 q9) ([q91:pf (@ num form (@ num (shadowed_0 num) eq_nat I) hd)] exists_i (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6) Tr (and_i (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) Tr) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p'))) x6) (congr num hd I ([z1:tm num] @ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs z1) Tr) (symm num I hd (eq_nat_e1 I hd q91)) (def3_e (tree X1) num (list (tree X1)) ([x3:tm (list (tree X1))] [x4:tm num] [x5:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x3 x4) x5) Sbtrs I Tr p4)) (tree_valid_path_congr X1 Eq Tr p' x6 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) p5 q81 (per_symm shadowed_3 path_eq (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p')) p' path_eq_validper (list_eq_tl_cons num eq_nat p' I q73)) (list_valid_tl'' num eq_nat (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p') q74 (list_is_not_nil_i num (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) p') (list_cons->not_nil num eq_nat I p' q15)))))))))))))))))))))))))))))))))))).
tree_valid_path_tl : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {V:tm X1} {P:tm shadowed_3} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) -> pf (@ (list num) form (list_is_not_nil num) P) -> pf (exists2 num (tree X1) ([i1:tm num] [tr:tm (tree X1)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) i1 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) i1) tr and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) (@ (list num) (list num) (list_tl num) P))) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [V:tm X1] [P:tm shadowed_3] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] [p3:pf (@ (list num) form (list_is_not_nil num) P)] exists2_e num (tree X1) ([x3:tm num] [x4:tm (tree X1)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) x3) x4) (exists2 num (tree X1) ([x3:tm num] [x4:tm (tree X1)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x5:tm (tree X1)] [x6:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x5 and @ shadowed_3 form path_valid x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x5) x6 and (@ (list num) form (list_is_not_nil num) x6 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x5) x6))) x4) (@ (list num) (list num) (list_tl num) P))) (tree_valid_path_sbtr_exists X1 Eq V Sbtrs P p2 p3) ([i2:tm num] [tr:tm (tree X1)] [q1:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) i2 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) i2) tr)] and_l (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) i2) (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) i2) tr) (exists2 num (tree X1) ([x3:tm num] [x4:tm (tree X1)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x5:tm (tree X1)] [x6:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x5 and @ shadowed_3 form path_valid x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x5) x6 and (@ (list num) form (list_is_not_nil num) x6 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x5) x6))) x4) (@ (list num) (list num) (list_tl num) P))) q1 ([q11:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) i2)] [q12:pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) i2) tr)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (exists2 num (tree X1) ([x3:tm num] [x4:tm (tree X1)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x5:tm (tree X1)] [x6:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x5 and @ shadowed_3 form path_valid x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x5) x6 and (@ (list num) form (list_is_not_nil num) x6 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x5) x6))) x4) (@ (list num) (list num) (list_tl num) P))) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs tr p1 (list_member_i (tree X1) Sbtrs i2 tr q12)) ([q21:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr)] exists2_i num (tree X1) ([x3:tm num] [x4:tm (tree X1)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x5:tm (tree X1)] [x6:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x5 and @ shadowed_3 form path_valid x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x5) x6 and (@ (list num) form (list_is_not_nil num) x6 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x5) x6 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x5) x6))) x4) (@ (list num) (list num) (list_tl num) P)) i2 tr (and3_i (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) i2) (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) i2) tr) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4))) tr) (@ (list num) (list num) (list_tl num) P)) q11 q12 (def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) tr (@ (list num) (list num) (list_tl num) P) (and5_i (@ (tree X1) form (tree_is_not_empty X1) tr) (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) tr) (@ (list num) (list num) (list_tl num) P)) (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_tl num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) tr) (@ (list num) (list num) (list_tl num) P) and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) tr) (@ (list num) (list num) (list_tl num) P) and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_subtrees_tr_not_empty X1 Eq Sbtrs tr p1 (list_member_i (tree X1) Sbtrs i2 tr q12)) (list_valid_tl'' num eq_nat P (tree_valid_path->path_valid X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p2) p3) (tree_valid_path_tl_node X1 Eq V Sbtrs P i2 tr p2 p3 q11 p1 q12) (tree_valid_path_tl_congr X1 Eq tr P q21) (imp_i (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) tr) (@ (list num) (list num) (list_tl num) P) and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) tr) (@ (list num) (list num) (list_tl num) P) and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) tr) (@ (list num) (list num) (list_tl num) P)) ([q3:pf (@ (list num) form (list_is_not_nil num) (@ (list num) (list num) (list_tl num) P))] and3_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) tr) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) tr) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) tr) (@ (list num) (list num) (list_tl num) P)) (tree_valid_path_tl_has_parent X1 Eq V Sbtrs P i2 tr p2 p3 q11 p1 q12) (tree_valid_path_tl_has_siblings X1 Eq V Sbtrs P i2 tr p2 p3 q11 p1 q12) (tree_valid_path_tl_has_finite_siblings X1 Eq V Sbtrs P i2 tr p2 p3 q11 q12 q21))))))))).
mktree_i2 : {P:tm shadowed_3} {X1:tp} {TrLst:tm (num arrow (list num arrow X1 arrow form) arrow form)} {V2:tm X1} {Eq:tm (eqrel X1)} {V1:tm X1} pf (@ shadowed_3 form path_valid P) -> pf (not (@ (list num) form (list_is_nil num) P)) -> pf (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) TrLst hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) V2))) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V1) TrLst) P) V2) = [P:tm shadowed_3] [X1:tp] [TrLst:tm (num arrow (list num arrow X1 arrow form) arrow form)] [V2:tm X1] [Eq:tm (eqrel X1)] [V1:tm X1] [p1:pf (@ shadowed_3 form path_valid P)] [p2:pf (not (@ (list num) form (list_is_nil num) P))] [p3:pf (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) TrLst hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) V2)))] def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V1 TrLst P V2 (and_i (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V1) V2) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) TrLst hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) V2)))) p1 (if_i2 (@ (list num) form (list_is_nil num) P) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) TrLst hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) V2))) (@ X1 form (@ X1 (X1 arrow form) Eq V1) V2) p2 p3)).
mktree_i2' : {I:tm num} {P:tm shadowed_3} {X1:tp} {Sbtrs:tm (num arrow tree X1 arrow form)} {Sbtr:tm (tree X1)} {Eq:tm (eqrel X1)} {Y:tm X1} {V:tm X1} pf (@ num form (@ num (shadowed_0 num) eq_nat I) I) -> pf (@ shadowed_3 form path_valid P) -> pf (@ (tree X1) form (@ num (tree X1 arrow form) Sbtrs I) Sbtr) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Sbtr) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Sbtr P) Y) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) Y) = [I:tm num] [P:tm shadowed_3] [X1:tp] [Sbtrs:tm (num arrow tree X1 arrow form)] [Sbtr:tm (tree X1)] [Eq:tm (eqrel X1)] [Y:tm X1] [V:tm X1] [p5:pf (@ num form (@ num (shadowed_0 num) eq_nat I) I)] [p6:pf (@ shadowed_3 form path_valid P)] [p3:pf (@ (tree X1) form (@ num (tree X1 arrow form) Sbtrs I) Sbtr)] [p7:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Sbtr)] [p4:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Sbtr P) Y)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) Y) (list_valid_cons num eq_nat I P p5 p6) ([p1:pf (@ shadowed_3 form path_valid (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))] cut (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) Y) (list_cons->not_nil num eq_nat I P p5) ([p2:pf (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)))] def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P) Y (and_i (@ shadowed_3 form path_valid (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) (if (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) (@ X1 form (@ X1 (X1 arrow form) Eq V) Y) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) Y)))) p1 (if_i2 (@ (list num) form (list_is_nil num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) Y))) (@ X1 form (@ X1 (X1 arrow form) Eq V) Y) p2 (forall_i num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) Y)) ([hd:tm num] imp_i (@ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) hd) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) Y)) ([q1:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) hd)] cut (@ num form (@ num (num arrow form) eq_nat I) hd) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) Y)) (list_hd_cons num eq_nat I P hd p5 p6 q1) ([q11:pf (@ num form (@ num (shadowed_0 num) eq_nat I) hd)] cut (@ (list num) form (@ (list num) (shadowed_0 (list num)) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) P) (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) Y)) (per_symm (list num) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) P (list_eq_validper num eq_nat eq_nat_validper) (list_eq_tl_cons num eq_nat P I p6)) ([q2:pf (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) P) (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)))] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) Y)) (list_valid_tl'' num eq_nat (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P) (list_valid_cons num eq_nat I P p5 p6) (list_is_not_nil_i num (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P) p2)) ([q3:pf (@ shadowed_3 form path_valid (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)))] exists_i (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) Y) Sbtr (and_i (@ (tree X1) form (@ num (tree X1 arrow form) Sbtrs hd) Sbtr) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Sbtr (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P))) Y) (congr num hd I ([z1:tm num] @ (tree X1) form (@ num (tree X1 arrow form) Sbtrs z1) Sbtr) (symm num I hd (eq_nat_e1 I hd q11)) p3) (tree_valid_path_congr X1 Eq Sbtr P Y (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) I) P)) p7 p4 q2 q3)))))))))))).
tree_mktree_not_empty : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {V:tm X1} {Sbtrs:tm (list (tree X1))} pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V) -> pf (@ (tree X1) form (tree_is_not_empty X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V)] def1_i (tree X1) ([x3:tm (tree X1)] exists shadowed_3 ([p2:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p2)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (exists_i (list num) ([x3:tm (list num)] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3) (list_nil num) (def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (list_nil num) (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (list_nil num)) x3) V (def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs (list_nil num) V (and_i (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) (list_nil num)) (if (@ (list num) form (list_is_nil num) (list_nil num)) (@ X1 form (@ X1 (X1 arrow form) Eq V) V) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (list_nil num)) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (list_nil num))) V)))) (list_valid_nil num eq_nat eq_nat_validper) (if_i1 (@ (list num) form (list_is_nil num) (list_nil num)) (@ X1 form (@ X1 (X1 arrow form) Eq V) V) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) (list_nil num)) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) (list_nil num))) V))) (list_is_nil_nil num) p1)))))).
tree_mktree_root : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {V:tm X1} {Sbtrs:tm (list (tree X1))} pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V) -> pf (@ X1 form (@ (tree X1) (X1 arrow form) (tree_root X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) V) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V)] def2_i (tree X1) X1 ([x3:tm (tree X1)] [x4:tm X1] forall (list num) ([p2:tm (list num)] @ (list num) form (list_is_nil num) p2 imp @ X1 form (@ (list num) (X1 arrow form) x3 p2) x4)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) V (forall_i (list num) ([x3:tm (list num)] @ (list num) form (list_is_nil num) x3 imp @ X1 form (@ (list num) (X1 arrow form) (@ (list (tree X1)) (list num arrow X1 arrow form) (@ X1 (list (tree X1) arrow list num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow list num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) (list num) X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list (tree X1))] [x7:tm (list num)] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x4 x5) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x6 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8))))) Eq) V) Sbtrs) x3) V) ([p3:tm (list num)] imp_i (@ (list num) form (list_is_nil num) p3) (@ X1 form (@ (list num) (X1 arrow form) (@ (list (tree X1)) (list num arrow X1 arrow form) (@ X1 (list (tree X1) arrow list num arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow list num arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) (list num) X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm (list num)] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) p3) V) ([q1:pf (@ (list num) form (list_is_nil num) p3)] def5_i (eqrel X1) X1 (list (tree X1)) (list num) X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm (list num)] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs p3 V (and_i (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p3) (if (@ (list num) form (list_is_nil num) p3) (@ X1 form (@ X1 (X1 arrow form) Eq V) V) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p3) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p3)) V)))) (list_valid_nil' num eq_nat p3 eq_nat_validper q1) (if_i1 (@ (list num) form (list_is_nil num) p3) (@ X1 form (@ X1 (X1 arrow form) Eq V) V) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p3) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p3)) V))) q1 p1))))).
tree_mktree_root' : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {V:tm X1} {P:tm (list num)} {Sbtrs:tm (list (tree X1))} pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V) -> pf (@ (list num) form (list_is_nil num) P) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) V) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [V:tm X1] [P:tm (list num)] [Sbtrs:tm (list (tree X1))] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V)] [p2:pf (@ (list num) form (list_is_nil num) P)] def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P V (and_i (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) V) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) V)))) (list_valid_nil' num eq_nat P eq_nat_validper p2) (if_i1 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) V) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) V))) p2 p1)).
tree_mktree_nil_congr : {P:tm (list num)} {X1:tp} {Eq:tm (eqrel X1)} {V:tm X1} {Sbtrs:tm (list (tree X1))} pf (@ (list num) form (list_is_nil num) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) = [P:tm (list num)] [X1:tp] [Eq:tm (eqrel X1)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [p2:pf (@ (list num) form (list_is_nil num) P)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x5))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P (forall_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3 imp forall shadowed_3 ([x4:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) x4 imp @ shadowed_3 form path_valid x4 imp @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list (tree X1))] [x8:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x8 and if (@ (list num) form (list_is_nil num) x8) (@ X1 form (@ X1 (X1 arrow form) x5 x6) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x8) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x8)) x9))))) Eq) V) Sbtrs) x4) x3)) ([x6:tm X1] imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x6) (forall shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x7:tm (list (tree X1))] [x8:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x8 and if (@ (list num) form (list_is_nil num) x8) (@ X1 form (@ X1 (X1 arrow form) x4 x5) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x8) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x8)) x9))))) Eq) V) Sbtrs) x3) x6)) ([q1:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x6)] forall_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x7:tm (list (tree X1))] [x8:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x8 and if (@ (list num) form (list_is_nil num) x8) (@ X1 form (@ X1 (X1 arrow form) x4 x5) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x8) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x8)) x9))))) Eq) V) Sbtrs) x3) x6) ([p':tm shadowed_3] imp2_i (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) p') (@ shadowed_3 form path_valid p') (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8))))) Eq) V) Sbtrs) p') x6) ([q2:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) p')] [q3:pf (@ shadowed_3 form path_valid p')] cut (@ (list num) form (list_is_nil num) p') (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8))))) Eq) V) Sbtrs) p') x6) (list_eq_nil num eq_nat P p' q2 p2) ([q4:pf (@ (list num) form (list_is_nil num) p')] def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs p' x6 (and_i (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p') (if (@ (list num) form (list_is_nil num) p') (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p') hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p')) x6)))) (list_valid_nil' num eq_nat p' eq_nat_validper q4) (if_i1 (@ (list num) form (list_is_nil num) p') (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p') hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p')) x6))) q4 (if_e1 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6))) (and_e2 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs P x6 q1)) p2))))))))).
tree_mktree_valid_path_nil : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {V:tm X1} {P:tm (list num)} {Sbtrs:tm (list (tree X1))} pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V) -> pf (@ (list num) form (list_is_nil num) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [V:tm X1] [P:tm (list num)] [Sbtrs:tm (list (tree X1))] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V)] [p1:pf (@ (list num) form (list_is_nil num) P)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P (and5_i (@ (tree X1) form (tree_is_not_empty X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (tree_mktree_not_empty X1 Eq V Sbtrs p2) (list_valid_nil' num eq_nat P eq_nat_validper p1) (def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x6:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x6)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3) V (tree_mktree_root' X1 Eq V P Sbtrs p2 p1))) (tree_mktree_nil_congr P X1 Eq V Sbtrs p1) (imp_i (@ (list num) form (list_is_not_nil num) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) ([p5:pf (@ (list num) form (list_is_not_nil num) P)] false_e (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (list_nil_false num P p1 p5)))).
tree_valid_path_cons_congr : {P:tm (list num)} {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {Hd:tm num} {Tr:tm (tree X1)} {V:tm X1} pf (not (@ (list num) form (list_is_nil num) P)) -> pf (@ shadowed_3 form path_valid P) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) -> pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs Hd) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) = [P:tm (list num)] [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [Hd:tm num] [Tr:tm (tree X1)] [V:tm X1] [p1:pf (not (@ (list num) form (list_is_nil num) P))] [p2:pf (@ shadowed_3 form path_valid P)] [p8:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p3:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd)] [p4:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs Hd) Tr)] cut (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x5)))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (tree_valid_subtrees_list_valid X1 Eq Sbtrs p8) ([p6:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x6:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x6 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x6)))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs Tr p8 (list_member_i' (tree X1) Sbtrs Hd Tr p4)) ([p7:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] cut (@ (per X1) form (validper X1) Eq) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x7:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x7 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x7)))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (tree_valid_per X1 Eq Tr p7) ([p70:pf (@ (per X1) form (validper X1) Eq)] cut (@ num form (@ num (shadowed_0 num) eq_nat Hd) Hd) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x8:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x8 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x8)))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (list_member_valid num eq_nat P Hd p2 (list_hd_member num P Hd p3)) ([p30:pf (@ num form (@ num (shadowed_0 num) eq_nat Hd) Hd)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x9:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x9 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x9))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P (forall_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3 imp forall shadowed_3 ([x4:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) x4 imp @ shadowed_3 form path_valid x4 imp @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list (tree X1))] [x8:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x8 and if (@ (list num) form (list_is_nil num) x8) (@ X1 form (@ X1 (X1 arrow form) x5 x6) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x8) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x8)) x9))))) Eq) V) Sbtrs) x4) x3)) ([x10:tm X1] imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x10) (forall shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x4 x5) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x6 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8))))) Eq) V) Sbtrs) x3) x10)) ([q1:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x10)] forall_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x4 x5) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x6 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8))))) Eq) V) Sbtrs) x3) x10) ([p':tm shadowed_3] imp2_i (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) p') (@ shadowed_3 form path_valid p') (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) p') x10) ([q2:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) p')] [q3:pf (@ shadowed_3 form path_valid p')] cut (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p') P) (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) p') x10) (per_symm shadowed_3 path_eq P p' path_eq_validper q2) ([q21:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p') P)] cut (not (@ (list num) form (list_is_nil num) p')) (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) p') x10) (list_eq_not_nil num eq_nat p' P q21 p1) ([q20:pf (not (@ (list num) form (list_is_nil num) p'))] cut (@ (rel num num) form (@ (rel num num) (shadowed_0 (rel num num)) (@ (per num) (per (rel num num)) (@ (per num) (per num arrow per (rel num num)) (per_rel num num) eq_arith) eq_nat) P) p') (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) p') x10) (list_eq_e num eq_nat P p' q2) ([q22:pf (@ (rel num num) form (@ (rel num num) (shadowed_0 (rel num num)) (@ (per num) (per (rel num num)) (@ (per num) (per num arrow per (rel num num)) (per_rel num num) eq_arith) eq_nat) P) p')] def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs p' x10 (and_i (@ shadowed_3 form path_valid p') (if (@ (list num) form (list_is_nil num) p') (@ X1 form (@ X1 (X1 arrow form) Eq V) x10) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p') x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) p')) x10)))) q3 (if_i2 (@ (list num) form (list_is_nil num) p') (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p') x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) p')) x10))) (@ X1 form (@ X1 (X1 arrow form) Eq V) x10) q20 (forall_i num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p') x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) p')) x10)) ([hd:tm num] imp_i (@ num form (@ (list num) (shadowed_0 num) (list_hd num) p') hd) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) p')) x10)) ([q4:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) p') hd)] exists_i (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) p')) x10) Tr (and_i (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) Tr) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) p')) x10) (cut (@ num form (@ num (shadowed_0 num) p' zero) Hd) (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) Tr) (equiv_e1 (@ num form (@ num (shadowed_0 num) P zero) Hd) (@ num form (@ num (shadowed_0 num) p' zero) Hd) (per_rel_e1 num num eq_arith eq_nat P p' zero zero Hd Hd q22 (def2_i num num ([x3:tm num] [x4:tm num] _eq num x3 x4) zero zero (refl num zero)) p30) (list_hd_e num P Hd p3)) ([q42:pf (@ num form (@ num (shadowed_0 num) p' zero) Hd)] cut (@ num form (@ num (shadowed_0 num) eq_nat hd) Hd) (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) Tr) (list_nth_eq num eq_nat p' zero hd Hd q3 (list_hd_nth num p' hd q4) (list_nth_i num p' zero Hd q42)) ([q43:pf (@ num form (@ num (shadowed_0 num) eq_nat hd) Hd)] cut (eq num hd Hd) (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) Tr) (eq_nat_e1 hd Hd q43) ([q44:pf (eq num hd Hd)] congr num hd Hd ([z1:tm num] @ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs z1) Tr) q44 p4)))) (exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) x10) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) p')) x10) (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x10)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x10)) (if_e2 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) x10) (forall num ([hd1:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd1 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd1) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x10))) (and_e2 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) x10) (forall num ([hd2:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd2 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd2) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x10)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P x10 q1)) p1) Hd) p3) ([sbtr:tm (list num arrow X1 arrow form)] [q5:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x10)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x10) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) p')) x10) q5 ([q51:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs Hd) sbtr)] [q52:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x10)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) sbtr) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) p')) x10) (list_nth_eq (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs Hd Tr sbtr p6 (list_nth_i (tree X1) Sbtrs Hd Tr p4) (list_nth_i (tree X1) Sbtrs Hd sbtr q51)) ([q53:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) sbtr)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) p')) x10) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p8 (list_member_i' (tree X1) Sbtrs Hd sbtr q51)) ([q54:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) x10) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) p')) x10) (equiv_e2 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) x10) (@ X1 form (@ shadowed_3 (shadowed_0 X1) sbtr (@ (list num) (list num) (list_tl num) P)) x10) (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) sbtr x3) x4) (tree_eq_node X1 Eq Tr sbtr q53) (@ (list num) (list num) (list_tl num) P) x10) q52) ([q6:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) x10)] tree_valid_path_congr X1 Eq Tr (@ (list num) (list num) (list_tl num) P) x10 (@ (list num) (list num) (list_tl num) p') p7 q6 (list_eq_tl num eq_nat P p' q2 (list_is_not_nil_i num P p1)) (list_valid_tl'' num eq_nat p' q3 (list_is_not_nil_i num p' q20)))))))))))))))))))))))))).
tree_valid_path_cons_has_parent : {P:tm (list num)} {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {Hd:tm num} {V:tm X1} pf (not (@ (list num) form (list_is_nil num) P)) -> pf (@ shadowed_3 form path_valid P) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) = [P:tm (list num)] [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [Hd:tm num] [V:tm X1] [p1:pf (not (@ (list num) form (list_is_nil num) P))] [p2:pf (@ shadowed_3 form path_valid P)] [p3:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p4:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd)] [p6:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V)] cut (@ num form (@ num (shadowed_0 num) eq_nat Hd) Hd) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (list_member_valid num eq_nat P Hd p2 (list_hd_member num P Hd p4)) ([p41:pf (@ num form (@ num (shadowed_0 num) eq_nat Hd) Hd)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i2:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P imp @ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x5:tm (tree X1)] [x6:tm shadowed_3] exists X1 ([x7:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x5 x6) x7))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3) ([pp:tm (list num)] [i3:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x8:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x8))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) ([q1:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P)] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) pp) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x9:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x9))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (list_valid_append' num eq_nat P pp i3 p2 q1) ([q11:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) pp)] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x10:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x10))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x11:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x11)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P q2) ([y:tm X1] [q3:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) y)] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) y) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x12:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x12))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)) (if_e2 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y))) (and_e2 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P y q3)) p1) Hd) p4) ([sbtr:tm (list num arrow X1 arrow form)] [q4:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x13:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x13))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) q4 ([q41:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs Hd) sbtr)] [q42:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x14:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x14))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p3 (list_member_i' (tree X1) Sbtrs Hd sbtr q41)) ([q43:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) sbtr) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x15:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x15))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (tree_valid_path_exists X1 Eq sbtr (@ (list num) (list num) (list_tl num) P) q43 (tree_node_i X1 sbtr (@ (list num) (list num) (list_tl num) P) y q42)) ([q5:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) sbtr) (@ (list num) (list num) (list_tl num) P))] or_e (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P)) (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x16:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x16))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (excluded_middle (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))) ([q6:pf (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))] cut (@ (list num) form (list_is_nil num) pp and @ num form (@ num (shadowed_0 num) eq_nat i3) Hd) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x17:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x17))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (list_append_singleton' num eq_nat P Hd pp i3 p2 p4 q1 q6) ([q61:pf (@ (list num) form (list_is_nil num) pp and @ num form (@ num (shadowed_0 num) eq_nat i3) Hd)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x18:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x18)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) pp (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) pp) x3) V (def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr1:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr1 and @ X1 form (@ (list num) (X1 arrow form) sbtr1 (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs pp V (and_i (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) pp) (if (@ (list num) form (list_is_nil num) pp) (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) pp) hd imp exists (list num arrow X1 arrow form) ([sbtr2:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr2 and @ X1 form (@ (list num) (X1 arrow form) sbtr2 (@ (list num) (list num) (list_tl num) pp)) V)))) (list_valid_nil' num eq_nat pp eq_nat_validper (and_e1 (@ (list num) form (list_is_nil num) pp) (@ num form (@ num (shadowed_0 num) eq_nat i3) Hd) q61)) (if_i1 (@ (list num) form (list_is_nil num) pp) (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) pp) hd imp exists (list num arrow X1 arrow form) ([sbtr3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr3 and @ X1 form (@ (list num) (X1 arrow form) sbtr3 (@ (list num) (list num) (list_tl num) pp)) V))) (and_e1 (@ (list num) form (list_is_nil num) pp) (@ num form (@ num (shadowed_0 num) eq_nat i3) Hd) q61) p6)))))) ([q7:pf (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P)))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) sbtr) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x19:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x19))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (tree_valid_path->has_parent X1 sbtr (@ (list num) (list num) (list_tl num) P) q5 (list_is_not_nil_i num (@ (list num) (list num) (list_tl num) P) q7)) ([q71:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) sbtr) (@ (list num) (list num) (list_tl num) P))] cut (@ shadowed_3 form path_valid (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x20:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x20))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (tree_valid_path->path_valid X1 sbtr (@ (list num) (list num) (list_tl num) P) q5) ([q72:pf (@ shadowed_3 form path_valid (@ (list num) (list num) (list_tl num) P))] exists2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x21:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x21))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (list_append_not_nil num eq_nat (@ (list num) (list num) (list_tl num) P) q72 (list_is_not_nil_i num (@ (list num) (list num) (list_tl num) P) q7)) ([p':tm (list num)] [i':tm num] [q73:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) p') i') (@ (list num) (list num) (list_tl num) P))] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p') (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x22:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x22))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (list_valid_append' num eq_nat (@ (list num) (list num) (list_tl num) P) p' i' q72 q73) ([q74:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p')] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p') (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x23:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x23))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) p') i') (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p') (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_tl num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) (@ (list num) (list num) (list_tl num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) x3) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp1:tm (list num)] [i4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) i4) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp1)) sbtr (@ (list num) (list num) (list_tl num) P) q71) p' i') q73 (tree_node_i X1 sbtr (@ (list num) (list num) (list_tl num) P) y q42)) ([q8:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p')] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) sbtr p') x3) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x24:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x24))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x25:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x25)) sbtr p' q8) ([x26:tm X1] [q81:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr p') x26)] cut (@ (list num) form (list_is_not_nil num) pp) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x27:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x27))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) pp) (list_append_tl num eq_nat P pp i3 p2 q1 (list_is_not_nil_i num (@ (list num) (list num) (list_tl num) P) q7)) ([q82:pf (@ (list num) form (list_is_not_nil num) pp)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x28:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x28)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) pp (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) pp) x3) x26 (def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr4:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr4 and @ X1 form (@ (list num) (X1 arrow form) sbtr4 (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs pp x26 (and_i (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) pp) (if (@ (list num) form (list_is_nil num) pp) (@ X1 form (@ X1 (X1 arrow form) Eq V) x26) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) pp) x3 imp exists (list num arrow X1 arrow form) ([x4:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) pp)) x26)))) q11 (if_i2 (@ (list num) form (list_is_nil num) pp) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) pp) x3 imp exists (list num arrow X1 arrow form) ([x4:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) pp)) x26))) (@ X1 form (@ X1 (X1 arrow form) Eq V) x26) (list_is_not_nil_e num pp q82) (forall_i num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) pp) x3 imp exists (list num arrow X1 arrow form) ([x4:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) pp)) x26)) ([hd:tm num] imp_i (@ num form (@ (list num) (shadowed_0 num) (list_hd num) pp) hd) (exists (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) pp)) x26)) ([q9:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) pp) hd)] cut (@ num form (@ (list num) (shadowed_0 num) (list_hd num) pp) Hd) (exists (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) pp)) x26)) (list_append_hd num eq_nat pp i3 P Hd q1 q82 p4) ([q91:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) pp) Hd)] cut (@ num form (@ num (shadowed_0 num) eq_nat hd) Hd) (exists (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) pp)) x26)) (list_nth_eq num eq_nat pp zero hd Hd q11 (list_hd_nth num pp hd q9) (list_hd_nth num pp Hd q91)) ([q92:pf (@ num form (@ num (shadowed_0 num) eq_nat hd) Hd)] cut (eq num hd Hd) (exists (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) pp)) x26)) (eq_nat_e1 hd Hd q92) ([q93:pf (eq num hd Hd)] cut (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) pp) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) Hd) p')) (exists (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) pp)) x26)) (list_append_pp_cons num eq_nat P Hd pp i3 p' i' p2 p4 q1 q73) ([q94:pf (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) pp) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) Hd) p'))] cut (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) (@ (list num) (list num) (list_tl num) pp)) (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) Hd) p'))) (exists (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) pp)) x26)) (list_eq_tl num eq_nat pp (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) Hd) p') q94 q82) ([q95:pf (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) (@ (list num) (list num) (list_tl num) pp)) (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) Hd) p')))] cut (@ (list num) form (@ (list num) (shadowed_0 (list num)) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) (@ (list num) (list num) (list_tl num) pp)) p') (exists (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) pp)) x26)) (per_trans (list num) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) (@ (list num) (list num) (list_tl num) pp) (@ (list num) (list num) (list_tl num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) Hd) p')) p' (list_eq_validper num eq_nat eq_nat_validper) q95 (list_eq_tl_cons num eq_nat p' Hd q74)) ([q96:pf (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) (@ (list num) (list num) (list_tl num) pp)) p')] cut (@ (list num) form (@ (list num) (shadowed_0 (list num)) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p') (@ (list num) (list num) (list_tl num) pp)) (exists (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) pp)) x26)) (per_symm (list num) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) (@ (list num) (list num) (list_tl num) pp) p' (list_eq_validper num eq_nat eq_nat_validper) q96) ([q97:pf (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p') (@ (list num) (list num) (list_tl num) pp))] exists_i (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) pp)) x26) sbtr (and_i (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) sbtr) (@ X1 form (@ shadowed_3 (shadowed_0 X1) sbtr (@ (list num) (list num) (list_tl num) pp)) x26) (congr num hd Hd ([z1:tm num] @ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs z1) sbtr) q93 q41) (tree_valid_path_congr X1 Eq sbtr p' x26 (@ (list num) (list num) (list_tl num) pp) q43 q81 q97 (list_valid_tl'' num eq_nat pp q11 q82))))))))))))))))))))))))))))))))))).
tree_valid_path_cons_has_siblings_tl_nil : {P:tm shadowed_3} {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {Hd:tm num} {Tr:tm (tree X1)} {PP:tm (list num)} {I:tm num} {J:tm num} {P':tm (list num)} {V:tm X1} pf (@ shadowed_3 form path_valid P) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) -> pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs Hd) Tr) -> pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P) -> pf (@ num form (@ num (shadowed_0 num) inrange I) J) -> pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) P') -> pf (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P)) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') = [P:tm shadowed_3] [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [Hd:tm num] [Tr:tm (tree X1)] [PP:tm (list num)] [I:tm num] [J:tm num] [P':tm (list num)] [V:tm X1] [p1:pf (@ shadowed_3 form path_valid P)] [p2:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p3:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd)] [p10:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs Hd) Tr)] [p5:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P)] [p7:pf (@ num form (@ num (shadowed_0 num) inrange I) J)] [p8:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) P')] [p9:pf (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))] cut (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (tree_valid_subtrees_list_valid X1 Eq Sbtrs p2) ([p21:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) Tr) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x6:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x6))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_member_valid (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs Tr p21 (list_member_i' (tree X1) Sbtrs Hd Tr p10)) ([p11:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) Tr)] cut (@ (list num) form (list_is_nil num) PP and @ num form (@ num (shadowed_0 num) eq_nat I) Hd) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x7:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x7))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_append_singleton' num eq_nat P Hd PP I p1 p3 p5 p9) ([q11:pf (@ (list num) form (list_is_nil num) PP and @ num form (@ num (shadowed_0 num) eq_nat I) Hd)] cut (@ num form (@ num (shadowed_0 num) eq_nat J) J) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x8:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x8))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (eq_nat_i J J (refl num J) (and_i (isInt J) (geq J zero) (inrange_e1 I J p7) (inrange_e2 I J p7))) ([q12:pf (@ num form (@ num (shadowed_0 num) eq_nat J) J)] cut (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) J) (list_nil num))) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x9:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x9))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_append_singleton'' num eq_nat J PP eq_nat_validper q12 (and_e1 (@ (list num) form (list_is_nil num) PP) (@ num form (@ num (shadowed_0 num) eq_nat I) Hd) q11)) ([q13:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) J) (list_nil num)))] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) PP) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x10:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x10))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_valid_append' num eq_nat P PP I p1 p5) ([q21:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) PP)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) P') (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x11:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x11))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_valid_append num eq_nat PP J P' q21 p8) ([q22:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) P')] cut (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) P') (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) J) (list_nil num))) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x12:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x12))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_append_eq_per_i num eq_nat PP J P' (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) J) (list_nil num)) p8 q13 q21) ([q2:pf (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) P') (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) J) (list_nil num)))] exists_e (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) J) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x13:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x13))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_nth_below_index (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs I Tr J p21 (list_nth_i (tree X1) Sbtrs I Tr (list_congr (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs Hd Tr I Tr p21 p10 (per_symm num eq_nat I Hd eq_nat_validper (and_e2 (@ (list num) form (list_is_nil num) PP) (@ num form (@ num (shadowed_0 num) eq_nat I) Hd) q11)) p11)) p7) ([sbtr:tm (tree X1)] [q3:pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) J) sbtr)] cut (@ (tree X1) form (tree_is_not_empty X1) sbtr) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x14:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x14))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (tree_valid_subtrees_tr_not_empty X1 Eq Sbtrs sbtr p2 (list_member_i (tree X1) Sbtrs J sbtr q3)) ([q31:pf (@ (tree X1) form (tree_is_not_empty X1) sbtr)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x15:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x15))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p2 (list_member_i (tree X1) Sbtrs J sbtr q3)) ([q32:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] exists_e X1 ([x3:tm X1] @ X1 form (@ (tree X1) (X1 arrow form) (tree_root X1) sbtr) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x16:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x16))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (tree_valid_root_node_exists X1 Eq sbtr q32) ([rt:tm X1] [q4:pf (@ X1 form (@ (tree X1) (X1 arrow form) (tree_root X1) sbtr) rt)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x17:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x17)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P' (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P') x3) rt (def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr1:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr1 and @ X1 form (@ (list num) (X1 arrow form) sbtr1 (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P' rt (and_i (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) P') (if (@ (list num) form (list_is_nil num) P') (@ X1 form (@ X1 (X1 arrow form) Eq V) rt) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) P')) rt)))) q22 (if_i2 (@ (list num) form (list_is_nil num) P') (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) P')) rt))) (@ X1 form (@ X1 (X1 arrow form) Eq V) rt) (list_eq_not_nil num eq_nat P' (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) J) (list_nil num)) q2 (list_cons->not_nil num eq_nat J (list_nil num) q12)) (forall_i num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) P')) rt)) ([hd:tm num] imp_i (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P') hd) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) rt)) ([q5:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P') hd)] cut (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P') J) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) rt)) (list_eq_singleton_hd num eq_nat J P' q12 q2) ([q51:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P') J)] cut (@ num form (@ num (shadowed_0 num) eq_nat hd) J) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) rt)) (list_nth_eq num eq_nat P' zero hd J q22 (list_hd_nth num P' hd q5) (list_hd_nth num P' J q51)) ([q52:pf (@ num form (@ num (shadowed_0 num) eq_nat hd) J)] cut (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P')) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) rt)) (list_eq_singleton_tl num eq_nat P' J q22 q2) ([q53:pf (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P'))] cut (eq num hd J) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) rt)) (eq_nat_e1 hd J q52) ([q54:pf (eq num hd J)] exists_i (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) rt) sbtr (and_i (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) rt) (congr num hd J ([z1:tm num] @ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs z1) sbtr) q54 (list_nth_e (tree X1) Sbtrs J sbtr q3)) (imp_e (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P')) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) rt) (forall_e (list num) ([x3:tm (list num)] @ (list num) form (list_is_nil num) x3 imp @ X1 form (@ (list num) (X1 arrow form) sbtr x3) rt) (def2_e X1 (tree X1) ([x3:tm (tree X1)] [x4:tm X1] forall (list num) ([p4:tm (list num)] @ (list num) form (list_is_nil num) p4 imp @ X1 form (@ (list num) (X1 arrow form) x3 p4) x4)) sbtr rt q4) (@ (list num) (list num) (list_tl num) P')) q53))))))))))))))))))))))))).
tree_valid_path_cons_has_siblings_tl_not_nil : {P:tm shadowed_3} {Hd:tm num} {X1:tp} {Sbtrs:tm (num arrow tree X1 arrow form)} {Tr:tm (tree X1)} {PP:tm (list num)} {I:tm num} {J:tm num} {P':tm (list num)} {Eq:tm (eqrel X1)} {V:tm X1} pf (@ shadowed_3 form path_valid P) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) -> pf (@ (tree X1) form (@ num (tree X1 arrow form) Sbtrs Hd) Tr) -> pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P) -> pf (@ num form (@ num (shadowed_0 num) inrange I) J) -> pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) P') -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_tl num) P)) -> pf (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') = [P:tm shadowed_3] [Hd:tm num] [X1:tp] [Sbtrs:tm (num arrow tree X1 arrow form)] [Tr:tm (tree X1)] [PP:tm (list num)] [I:tm num] [J:tm num] [P':tm (list num)] [Eq:tm (eqrel X1)] [V:tm X1] [p1:pf (@ shadowed_3 form path_valid P)] [p3:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd)] [p4:pf (@ (tree X1) form (@ num (tree X1 arrow form) Sbtrs Hd) Tr)] [p5:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P)] [p6:pf (@ num form (@ num (shadowed_0 num) inrange I) J)] [p8:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) P')] [p9:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_tl num) P))] [p10:pf (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P)))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (tree_valid_path->has_siblings X1 Tr (@ (list num) (list num) (list_tl num) P) p9 (list_is_not_nil_i num (@ (list num) (list num) (list_tl num) P) p10)) ([p11:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr) (@ (list num) (list num) (list_tl num) P))] cut (@ (list num) form (list_is_not_nil num) PP) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x6:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x6))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_append_tl num eq_nat P PP I p1 p5 (list_is_not_nil_i num (@ (list num) (list num) (list_tl num) P) p10)) ([q1:pf (@ (list num) form (list_is_not_nil num) PP)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) PP) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x7:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x7))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_valid_append' num eq_nat P PP I p1 p5) ([q2:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) PP)] cut (@ num form (@ (list num) (shadowed_0 num) (list_hd num) PP) Hd) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x8:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x8))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_append_hd num eq_nat PP I P Hd p5 q1 p3) ([q21:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) PP) Hd)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) P') (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x9:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x9))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_valid_append num eq_nat PP J P' q2 p8) ([q3:pf (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) P')] cut (@ (list num) form (list_is_not_nil num) P') (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x10:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x10))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_append_not_nil_i num eq_nat P' (exists2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P') PP J p8)) ([q31:pf (@ (list num) form (list_is_not_nil num) P')] cut (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P') Hd) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x11:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x11))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (list_append_hd' num eq_nat PP J P' Hd p8 q1 q21) ([q32:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P') Hd)] cut (forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange I) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p'))) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x12:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x12))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) I) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P)) (forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange I) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p'))) (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_tl num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P) imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x4) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p'))) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))) Tr (@ (list num) (list num) (list_tl num) P) p11) (@ (list num) (list num) (list_tl num) PP) I) (list_append_tl_i num eq_nat P PP I p1 q1 p5) (tree_valid_path->node_exists X1 Tr (@ (list num) (list num) (list_tl num) P) p9)) ([q51:pf (forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange I) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')))] cut (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) J) (@ (list num) (list num) (list_tl num) P') imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P')) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x13:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x13))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (forall_e (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) J) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) x3) (imp_e (@ num form (@ num (shadowed_0 num) inrange I) J) (forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) J) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange I) x3 imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) x3) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) p')) q51 J) p6) (@ (list num) (list num) (list_tl num) P')) ([q52:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) J) (@ (list num) (list num) (list_tl num) P') imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P'))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P')) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x14:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x14))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (imp_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) J) (@ (list num) (list num) (list_tl num) P')) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P')) q52 (list_append_tl_i num eq_nat P' PP J q3 q1 p8)) ([q6:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr) (@ (list num) (list num) (list_tl num) P'))] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr (@ (list num) (list num) (list_tl num) P')) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x15:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x15))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x16:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x16)) Tr (@ (list num) (list num) (list_tl num) P') q6) ([x17:tm X1] [q61:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P')) x17)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x18:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x18)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P' (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P') x3) x17 (def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P' x17 (and_i (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) P') (if (@ (list num) form (list_is_nil num) P') (@ X1 form (@ X1 (X1 arrow form) Eq V) x17) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) P')) x17)))) q3 (if_i2 (@ (list num) form (list_is_nil num) P') (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) P')) x17))) (@ X1 form (@ X1 (X1 arrow form) Eq V) x17) (list_is_not_nil_e num P' q31) (forall_i num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) P')) x17)) ([hd:tm num] imp_i (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P') hd) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) x17)) ([q7:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P') hd)] cut (@ num form (@ num (shadowed_0 num) eq_nat hd) Hd) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) x17)) (list_nth_eq num eq_nat P' zero hd Hd q3 (list_hd_nth num P' hd q7) (list_hd_nth num P' Hd q32)) ([q71:pf (@ num form (@ num (shadowed_0 num) eq_nat hd) Hd)] cut (eq num hd Hd) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) x17)) (eq_nat_e1 hd Hd q71) ([q72:pf (eq num hd Hd)] exists_i (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) x17) Tr (and_i (@ (tree X1) form (@ num (tree X1 arrow form) Sbtrs hd) Tr) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P')) x17) (congr num hd Hd ([z1:tm num] @ (tree X1) form (@ num (tree X1 arrow form) Sbtrs z1) Tr) q72 p4) q61))))))))))))))))))))).
tree_valid_path_cons_has_siblings : {P:tm (list num)} {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {Hd:tm num} {V:tm X1} pf (not (@ (list num) form (list_is_nil num) P)) -> pf (@ shadowed_3 form path_valid P) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) = [P:tm (list num)] [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [Hd:tm num] [V:tm X1] [p1:pf (not (@ (list num) form (list_is_nil num) P))] [p2:pf (@ shadowed_3 form path_valid P)] [p3:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p4:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P imp forall num ([x5:tm num] @ num form (@ num (shadowed_0 num) inrange x4) x5 imp forall (list num) ([x6:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x5) x6 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x6))) ([pp:tm (list num)] [i2:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i2) x3 imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x4))) ([q1:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) P)] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i2) x3 imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x4)) ([j:tm num] imp_i (@ num form (@ num (shadowed_0 num) inrange i2) j) (forall (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) ([r8:pf (@ num form (@ num (shadowed_0 num) inrange i2) j)] forall_i (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3) ([p':tm (list num)] imp_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p') ([r9:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p')] cut (@ num form (@ num (shadowed_0 num) eq_nat j) j) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p') (eq_nat_i j j (refl num j) (and_i (isInt j) (geq j zero) (inrange_e1 i2 j r8) (inrange_e2 i2 j r8))) ([r11:pf (@ num form (@ num (shadowed_0 num) eq_nat j) j)] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p') (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P q2) ([y:tm X1] [q3:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) y)] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) y) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p') (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)) (if_e2 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y))) (and_e2 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P y q3)) p1) Hd) p4) ([sbtr:tm (list num arrow X1 arrow form)] [q4:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p') q4 ([q41:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs Hd) sbtr)] [q42:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p') (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p3 (list_member_i' (tree X1) Sbtrs Hd sbtr q41)) ([q43:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) sbtr) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p') (tree_valid_path_exists X1 Eq sbtr (@ (list num) (list num) (list_tl num) P) q43 (tree_node_i X1 sbtr (@ (list num) (list num) (list_tl num) P) y q42)) ([q5:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) sbtr) (@ (list num) (list num) (list_tl num) P))] or_e (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P)) (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p') (excluded_middle (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))) ([q6:pf (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))] tree_valid_path_cons_has_siblings_tl_nil P X1 Eq Sbtrs Hd sbtr pp i2 j p' V p2 p3 p4 q41 q1 r8 r9 q6) ([q7:pf (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P)))] tree_valid_path_cons_has_siblings_tl_not_nil P Hd X1 Sbtrs sbtr pp i2 j p' Eq V p2 p4 q41 q1 r8 r9 q5 q7)))))))))))))).
tree_valid_path_cons_has_finite_siblings_tl_nil : {P:tm shadowed_3} {Hd:tm num} {PP:tm (list num)} {I:tm num} {X1:tp} {Sbtrs:tm (list (tree X1))} {N:tm num} {J:tnum} {P':tm (list num)} {Eq:tm (eqrel X1)} {V:tm X1} pf (@ shadowed_3 form path_valid P) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) -> pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P) -> pf (@ num form (@ (list (tree X1)) (num arrow form) (list_length (tree X1)) Sbtrs) N) -> pf (isNat J and geq J N) -> pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) P') -> pf (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P)) -> pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P')) = [P:tm shadowed_3] [Hd:tm num] [PP:tm (list num)] [I:tm num] [X1:tp] [Sbtrs:tm (list (tree X1))] [N:tm num] [J:tnum] [P':tm (list num)] [Eq:tm (eqrel X1)] [V:tm X1] [p1:pf (@ shadowed_3 form path_valid P)] [p3:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd)] [p5:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P)] [p6:pf (@ num form (@ (list (tree X1)) (num arrow form) (list_length (tree X1)) Sbtrs) N)] [p7:pf (isNat J and geq J N)] [p8:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) J) P')] [p9:pf (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))] cut (@ (list num) form (list_is_nil num) PP and @ num form (@ num (shadowed_0 num) eq_nat I) Hd) (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P')) (list_append_singleton' num eq_nat P Hd PP I p1 p3 p5 p9) ([q4:pf (@ (list num) form (list_is_nil num) PP and @ num form (@ num (shadowed_0 num) eq_nat I) Hd)] not_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P') ([q1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P')] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P') x3) false (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P' q1) ([x6:tm X1] [q2:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P') x6)] cut (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) x6))) false (if_e2 (@ (list num) form (list_is_nil num) P') (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) x6))) (and_e2 (@ shadowed_3 form path_valid P') (if (@ (list num) form (list_is_nil num) P') (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) x6)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs P' x6 q2)) (list_is_not_nil_e num P' (list_append_not_nil_i num eq_nat P' (exists2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P') PP J p8)))) ([q31:pf (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) x6)))] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs J) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P')) x6) false (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P') J) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs J) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) x6)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P') x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) x6)) q31 J) (list_append_hd_pp_nil num eq_nat PP J P' p8 (and_e1 (@ (list num) form (list_is_nil num) PP) (@ num form (@ num (shadowed_0 num) eq_nat I) Hd) q4))) ([sbtr:tm (list num arrow X1 arrow form)] [q32:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs J) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) x6)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs J) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) x6) false q32 ([q33:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs J) sbtr)] [q34:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P')) x6)] cut (@ num form (@ num (shadowed_0 num) inrange N) J) false (list_index_inrange (tree X1) Sbtrs N J sbtr p6 (list_nth_i (tree X1) Sbtrs J sbtr q33)) ([q35:pf (@ num form (@ num (shadowed_0 num) inrange N) J)] cut (lt J N) false (inrange_e3 N J q35) ([q36:pf (lt J N)] pf_greater_and_greatereq J N false (and_e2 (isNat J) (geq J N) p7) q36)))))))).
tree_valid_path_cons_has_finite_siblings_tl_not_nil : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {P:tm (list num)} {Hd:tm num} {PP:tm (list num)} {I:tm num} {V:tm X1} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) -> pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) -> pf (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))) -> pf (exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p'))))) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [P:tm (list num)] [Hd:tm num] [PP:tm (list num)] [I:tm num] [V:tm X1] [p2:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p3:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd)] [p4:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) I) P)] [p5:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] [p6:pf (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P)))] cut (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (tree_valid_subtrees_list_valid X1 Eq Sbtrs p2) ([p21:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] cut (not (@ (list num) form (list_is_nil num) P)) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (list_is_not_nil_e num P (list_tl_not_nil->not_nil num P (list_is_not_nil_i num (@ (list num) (list num) (list_tl num) P) p6))) ([p0:pf (not (@ (list num) form (list_is_nil num) P))] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p5) ([x6:tm X1] [q1:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x6)] cut (@ shadowed_3 form path_valid P) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (and_e1 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs P x6 q1)) ([p1:pf (@ shadowed_3 form path_valid P)] cut (@ (list num) form (list_is_not_nil num) PP) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (list_append_tl num eq_nat P PP I p1 p4 (list_is_not_nil_i num (@ (list num) (list num) (list_tl num) P) p6)) ([p11:pf (@ (list num) form (list_is_not_nil num) PP)] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) x6) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)) (if_e2 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6))) (and_e2 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs P x6 q1)) p0) Hd) p3) ([sbtr:tm (list num arrow X1 arrow form)] [q2:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) q2 ([q21:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs Hd) sbtr)] [q22:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p2 (list_member_i' (tree X1) Sbtrs Hd sbtr q21)) ([q31:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] cut (@ (tree X1) form (tree_is_not_empty X1) sbtr) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (tree_valid_subtrees_tr_not_empty X1 Eq Sbtrs sbtr p2 (list_member_i' (tree X1) Sbtrs Hd sbtr q21)) ([q32:pf (@ (tree X1) form (tree_is_not_empty X1) sbtr)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) sbtr) (@ (list num) (list num) (list_tl num) P)) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (tree_valid_path_exists X1 Eq sbtr (@ (list num) (list num) (list_tl num) P) q31 (tree_node_i X1 sbtr (@ (list num) (list num) (list_tl num) P) x6 q22)) ([q4:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) sbtr) (@ (list num) (list num) (list_tl num) P))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) sbtr) (@ (list num) (list num) (list_tl num) P)) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (tree_valid_path->has_finite_siblings X1 sbtr (@ (list num) (list num) (list_tl num) P) q4 (list_is_not_nil_i num (@ (list num) (list num) (list_tl num) P) p6)) ([q5:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) sbtr) (@ (list num) (list num) (list_tl num) P))] exists_e num ([x3:tm num] forall num ([j:tm num] isNat j and geq j x3 imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p')))) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) I) (@ (list num) (list num) (list_tl num) P)) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) (@ (list num) (list num) (list_tl num) P)) (exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p'))))) (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) (@ (list num) (list num) (list_tl num) P) imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) (@ (list num) (list num) (list_tl num) P) imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p'))))) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))))) sbtr (@ (list num) (list num) (list_tl num) P) q5) (@ (list num) (list num) (list_tl num) PP) I) (list_append_tl_i num eq_nat P PP I p1 p11 p4) (tree_node_i X1 sbtr (@ (list num) (list num) (list_tl num) P) x6 q22)) ([n:tm num] [q6:pf (forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p'))))] exists_i num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5)))) n (forall_i num ([x3:tm num] isNat x3 and geq x3 n imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) x3) x4 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x4))) ([j:tm num] imp_i (isNat j and geq j n) (forall (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3))) ([q7:pf (isNat j and geq j n)] forall_i (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) ([p':tm (list num)] imp_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) j) p') (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p')) ([q8:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) PP) j) p')] cut (@ (list num) form (list_is_not_nil num) p') (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p')) (list_append_not_nil_i num eq_nat p' (exists2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) p') PP j q8)) ([q81:pf (@ (list num) form (list_is_not_nil num) p')] not_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p') ([q9:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p')] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p') x3) false (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x7:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x7)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p' q9) ([y:tm X1] [q91:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p') y)] cut (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p') hd imp exists (list num arrow X1 arrow form) ([sbtr1:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr1 and @ X1 form (@ (list num) (X1 arrow form) sbtr1 (@ (list num) (list num) (list_tl num) p')) y))) false (if_e2 (@ (list num) form (list_is_nil num) p') (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p') hd imp exists (list num arrow X1 arrow form) ([sbtr2:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr2 and @ X1 form (@ (list num) (X1 arrow form) sbtr2 (@ (list num) (list num) (list_tl num) p')) y))) (and_e2 (@ shadowed_3 form path_valid p') (if (@ (list num) form (list_is_nil num) p') (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p') hd imp exists (list num arrow X1 arrow form) ([sbtr3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr3 and @ X1 form (@ (list num) (X1 arrow form) sbtr3 (@ (list num) (list num) (list_tl num) p')) y)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr4:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr4 and @ X1 form (@ (list num) (X1 arrow form) sbtr4 (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs p' y q91)) (list_is_not_nil_e num p' q81)) ([q92:pf (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p') hd imp exists (list num arrow X1 arrow form) ([sbtr5:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr5 and @ X1 form (@ (list num) (X1 arrow form) sbtr5 (@ (list num) (list num) (list_tl num) p')) y)))] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) p')) y) false (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) p') Hd) (exists (list num arrow X1 arrow form) ([sbtr6:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) sbtr6 and @ X1 form (@ (list num) (X1 arrow form) sbtr6 (@ (list num) (list num) (list_tl num) p')) y)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p') x3 imp exists (list num arrow X1 arrow form) ([sbtr7:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr7 and @ X1 form (@ (list num) (X1 arrow form) sbtr7 (@ (list num) (list num) (list_tl num) p')) y)) q92 Hd) (list_append_hd'' num eq_nat PP I P j p' Hd p4 q8 p11 p3)) ([tr:tm (list num arrow X1 arrow form)] [q93:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) tr and @ X1 form (@ (list num) (X1 arrow form) tr (@ (list num) (list num) (list_tl num) p')) y)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs Hd) tr) (@ X1 form (@ (list num) (X1 arrow form) tr (@ (list num) (list num) (list_tl num) p')) y) false q93 ([q94:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs Hd) tr)] [q95:pf (@ X1 form (@ (list num) (X1 arrow form) tr (@ (list num) (list num) (list_tl num) p')) y)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) sbtr) tr) false (list_nth_eq (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs Hd sbtr tr p21 (list_nth_i (tree X1) Sbtrs Hd sbtr q21) (list_nth_i (tree X1) Sbtrs Hd tr q94)) ([q96:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) sbtr) tr)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) false (tree_valid_subtrees_tr_valid X1 Eq Sbtrs tr p2 (list_member_i' (tree X1) Sbtrs Hd tr q94)) ([q97:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr)] cut (forall2 shadowed_3 X1 ([p7:tm shadowed_3] [v1:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) sbtr p7) v1 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) tr p7) v1)) false (tree_eq_node X1 Eq sbtr tr q96) ([q98:pf (forall2 (list num) X1 ([p8:tm (list num)] [x8:tm X1] @ X1 form (@ (list num) (X1 arrow form) sbtr p8) x8 equiv @ X1 form (@ (list num) (X1 arrow form) tr p8) x8))] cut (forall (list num) ([p'1:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) p'1 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p'1))) false (imp_e (isNat j and geq j n) (forall (list num) ([p'2:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) p'2 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p'2))) (forall_e num ([x3:tm num] isNat x3 and geq x3 n imp forall (list num) ([p'3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) x3) p'3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p'3))) q6 j) q7) ([q10:pf (forall (list num) ([p'4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) p'4 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p'4)))] cut (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) (@ (list num) (list num) (list_tl num) p'))) false (imp_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) (@ (list num) (list num) (list_tl num) p')) (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) (@ (list num) (list num) (list_tl num) p'))) (forall_e (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) (@ (list num) (list num) (list_tl num) PP)) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) x3)) q10 (@ (list num) (list num) (list_tl num) p')) (list_append_tl_i num eq_nat p' PP j (list_valid_append'' num eq_nat P PP I j p' p1 p4 q8) p11 q8)) ([q101:pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) (@ (list num) (list num) (list_tl num) p')))] not_e (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) (@ (list num) (list num) (list_tl num) p')) q101 (def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x9:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x9)) sbtr (@ (list num) (list num) (list_tl num) p') (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p')) x3) y (equiv_e2 (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p')) y) (@ X1 form (@ (list num) (X1 arrow form) tr (@ (list num) (list num) (list_tl num) p')) y) (forall2_e (list num) X1 ([x3:tm (list num)] [x4:tm X1] @ X1 form (@ (list num) (X1 arrow form) sbtr x3) x4 equiv @ X1 form (@ (list num) (X1 arrow form) tr x3) x4) q98 (@ (list num) (list num) (list_tl num) p') y) q95))))))))))))))))))))))))))))))).
tree_valid_path_cons_has_finite_siblings : {P:tm shadowed_3} {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {Hd:tm num} {V:tm X1} pf (@ shadowed_3 form path_valid P) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) = [P:tm shadowed_3] [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [Hd:tm num] [V:tm X1] [p2:pf (@ shadowed_3 form path_valid P)] [p3:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p4:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) Hd)] cut (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (tree_valid_subtrees_list_valid X1 Eq Sbtrs p3) ([p31:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i2:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P imp exists num ([x5:tm num] forall num ([x6:tm num] isNat x6 and geq x6 x5 imp forall (list num) ([x7:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x6) x7 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x7))))) ([pp:tm (list num)] [i3:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) ([q1:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P)] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] or_e (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P)) (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (excluded_middle (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))) ([q6:pf (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P))] exists_e num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (list_length (tree X1)) Sbtrs) x3) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5))))) (list_length_exists (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs p31) ([n:tm num] [q3:pf (@ num form (@ (list (tree X1)) (num arrow form) (list_length (tree X1)) Sbtrs) n)] exists_i num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x5)))) n (forall_i num ([x3:tm num] isNat x3 and geq x3 n imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x4))) ([j:tm num] imp_i (isNat j and geq j n) (forall (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3))) ([q4:pf (isNat j and geq j n)] forall_i (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) ([p':tm (list num)] imp_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p')) ([q5:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p')] tree_valid_path_cons_has_finite_siblings_tl_nil P Hd pp i3 X1 Sbtrs n j p' Eq V p2 p4 q1 q3 q4 q5 q6))))))) ([q7:pf (not (@ (list num) form (list_is_nil num) (@ (list num) (list num) (list_tl num) P)))] tree_valid_path_cons_has_finite_siblings_tl_not_nil X1 Eq Sbtrs P Hd pp i3 V p3 p4 q1 q2 q7))))).
tree_eq_path_congr : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} {P:tm shadowed_3} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr1) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr2) P) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr1) P)] cut (forall2 shadowed_3 X1 ([p3:tm shadowed_3] [v1:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p3) v1 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p3) v1)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x5)))) Tr2) P) (tree_eq_node X1 Eq Tr1 Tr2 p1) ([p3:pf (forall2 shadowed_3 X1 ([p4:tm shadowed_3] [x6:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p4) x6 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p4) x6))] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall X1 ([x7:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x7 imp forall shadowed_3 ([p':tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x4) p' imp @ shadowed_3 form path_valid p' imp @ X1 form (@ shadowed_3 (X1 arrow form) x3 p') x7))) Tr2 P (forall_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P) x3 imp forall shadowed_3 ([x4:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) x4 imp @ shadowed_3 form path_valid x4 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x4) x3)) ([x8:tm X1] imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P) x8) (forall shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x8)) ([q1:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P) x8)] forall_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) x3 imp @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x8) ([p':tm shadowed_3] imp2_i (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) p') (@ shadowed_3 form path_valid p') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p') x8) ([q21:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) p')] [q22:pf (@ shadowed_3 form path_valid p')] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) x8) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p') x8) (equiv_e2 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) x8) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P) x8) (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) p3 P x8) q1) ([q3:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) x8)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p') x8) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p') x8) (tree_path_congr_e X1 Tr1 P x8 p' p2 q3 q21 q22) ([q4:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p') x8)] equiv_e1 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p') x8) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p') x8) (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) p3 p' x8) q4)))))))).
tree_eq_has_parent : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} {P:tm shadowed_3} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr1) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr2) P) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p4:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr1) P)] cut (forall shadowed_3 ([p2:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p2 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p2)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp))) Tr2) P) (tree_eq_e X1 Eq Tr1 Tr2 p1) ([p5:pf (forall shadowed_3 ([p3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p3))] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i2:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp)) Tr2 P (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) ([pp:tm (list num)] [i3:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) pp) ([q1:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P)] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) pp) (equiv_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) p5 P) q2) ([q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) pp) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) pp) (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) pp) (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp1:tm (list num)] [i4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) i4) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) pp1)) Tr1 P p4) pp i3) q1 q3) ([q4:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) pp)] equiv_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) pp) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) pp) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) p5 pp) q4)))))).
tree_eq_has_siblings : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} {P:tm shadowed_3} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr1) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr2) P) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p4:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr1) P)] cut (forall shadowed_3 ([p2:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p2 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p2)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))) Tr2) P) (tree_eq_e X1 Eq Tr1 Tr2 p1) ([p5:pf (forall shadowed_3 ([p3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p3))] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i2:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i2) j imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))) Tr2 P (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P imp forall num ([x5:tm num] @ num form (@ num (shadowed_0 num) inrange x4) x5 imp forall (list num) ([x6:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x5) x6 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x6))) ([pp:tm (list num)] [i3:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P) (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i3) x3 imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x4))) ([q1:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P)] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P)] forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i3) x3 imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x4)) ([j:tm num] imp_i (@ num form (@ num (shadowed_0 num) inrange i3) j) (forall (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3)) ([q3:pf (@ num form (@ num (shadowed_0 num) inrange i3) j)] forall_i (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) ([p':tm (list num)] imp_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p') ([q4:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p')] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p') (equiv_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) p5 P) q2) ([p3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p') (imp_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p') (forall_e (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3) (imp_e (@ num form (@ num (shadowed_0 num) inrange i3) j) (forall (list num) ([p'1:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p'1 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p'1)) (forall_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange i3) x3 imp forall (list num) ([p'2:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) p'2 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p'2)) (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (forall num ([j1:tm num] @ num form (@ num (shadowed_0 num) inrange i3) j1 imp forall (list num) ([p'3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j1) p'3 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p'3))) (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P imp forall num ([j2:tm num] @ num form (@ num (shadowed_0 num) inrange x4) j2 imp forall (list num) ([p'4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) j2) p'4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p'4))) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp1:tm (list num)] [i4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) i4) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp forall num ([j3:tm num] @ num form (@ num (shadowed_0 num) inrange i4) j3 imp forall (list num) ([p'5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) j3) p'5 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'5)))) Tr1 P p4) pp i3) q1 p3) j) q3) p') q4) ([q5:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p')] equiv_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p') (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) p5 p') q5)))))))))).
tree_eq_has_finite_siblings : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} {P:tm shadowed_3} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr1) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr2) P) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p4:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr1) P)] cut (forall shadowed_3 ([p2:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p2 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p2)) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i1:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i1) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p'))))))) Tr2) P) (tree_eq_e X1 Eq Tr1 Tr2 p1) ([p5:pf (forall shadowed_3 ([p3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p3))] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp:tm (list num)] [i2:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i2) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))))) Tr2 P (forall2_i (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P imp exists num ([x5:tm num] forall num ([x6:tm num] isNat x6 and geq x6 x5 imp forall (list num) ([x7:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x6) x7 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x7))))) ([pp:tm (list num)] [i3:tm num] imp2_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x5))))) ([q1:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P)] [q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x5))))) (equiv_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) p5 P) q2) ([p3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P)] exists_e num ([x3:tm num] forall num ([j:tm num] isNat j and geq j x3 imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p')))) (exists num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x5))))) (imp2_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) i3) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p'))))) (forall2_e (list num) num ([x3:tm (list num)] [x4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) x4) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) x3) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p'))))) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] forall2 (list num) num ([pp1:tm (list num)] [i4:tm num] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) i4) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 imp exists num ([n:tm num] forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp1) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p')))))) Tr1 P p4) pp i3) q1 p3) ([n:tm num] [q3:pf (forall num ([j:tm num] isNat j and geq j n imp forall (list num) ([p':tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p' imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p'))))] exists_i num ([x3:tm num] forall num ([x4:tm num] isNat x4 and geq x4 x3 imp forall (list num) ([x5:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x4) x5 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x5)))) n (forall_i num ([x3:tm num] isNat x3 and geq x3 n imp forall (list num) ([x4:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) x4 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x4))) ([j:tm num] imp_i (isNat j and geq j n) (forall (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3))) ([q4:pf (isNat j and geq j n)] forall_i (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3)) ([p':tm (list num)] imp_i (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p')) ([q5:pf (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p')] not_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p') ([q6:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p')] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) Tr2 p') x3) false (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) Tr2 p' q6) ([x6:tm X1] [q7:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p') x6)] not_e (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p') (imp_e (@ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p') (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p')) (forall_e (list num) ([x3:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) x3 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3)) (imp_e (isNat j and geq j n) (forall (list num) ([p'1:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) j) p'1 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p'1))) (forall_e num ([x3:tm num] isNat x3 and geq x3 n imp forall (list num) ([p'2:tm (list num)] @ (list num) form (@ num (list num arrow form) (@ (list num) (num arrow list num arrow form) (@ (eqrel num) (list num arrow num arrow list num arrow form) (list_append num) eq_nat) pp) x3) p'2 imp not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p'2))) q3 j) q4) p') q5) (equiv_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p') (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p') (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) p5 p') q6)))))))))))))).
tree_eq_not_empty : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (@ (tree X1) form (tree_is_not_empty X1) Tr1) -> pf (@ (tree X1) form (tree_is_not_empty X1) Tr2) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p3:pf (@ (tree X1) form (tree_is_not_empty X1) Tr1)] exists_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3) (@ (tree X1) form (lam (tree X1) form ([x3:tm (tree X1)] exists shadowed_3 ([p2:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p2))) Tr2) (def1_e (tree X1) ([x3:tm (tree X1)] exists shadowed_3 ([p4:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p4)) Tr1 p3) ([p5:tm shadowed_3] [q1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p5)] cut (forall shadowed_3 ([p6:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p6 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p6)) (@ (tree X1) form (lam (tree X1) form ([x3:tm (tree X1)] exists shadowed_3 ([p7:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p7))) Tr2) (tree_eq_e X1 Eq Tr1 Tr2 p1) ([q2:pf (forall shadowed_3 ([p8:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p8 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p8))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p5) (@ (tree X1) form (lam (tree X1) form ([x3:tm (tree X1)] exists shadowed_3 ([p9:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p9))) Tr2) (equiv_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p5) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p5) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) q2 p5) q1) ([q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p5)] def1_i (tree X1) ([x3:tm (tree X1)] exists shadowed_3 ([p10:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p10)) Tr2 (exists_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) p5 q3)))).
tree_eq_valid_path : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} {P:tm shadowed_3} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) P) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) P) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) P)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4))) Tr2) P) (tree_valid_path->node_exists X1 Tr1 P p3) ([p4:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P)] def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) Tr2 P (and5_i (@ (tree X1) form (tree_is_not_empty X1) Tr2) (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) Tr2) P) (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr2) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr2) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr2) P) (tree_eq_not_empty X1 Eq Tr1 Tr2 p1 (tree_valid_path->not_empty X1 Tr1 P p3)) (tree_valid_path->path_valid X1 Tr1 P p3) (equiv_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) P) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) (tree_eq_e X1 Eq Tr1 Tr2 p1) P) p4) (tree_eq_path_congr X1 Eq Tr1 Tr2 P p1 (tree_valid_path->path_congr X1 Tr1 P p3)) (imp_i (@ (list num) form (list_is_not_nil num) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr2) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr2) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr2) P) ([q1:pf (@ (list num) form (list_is_not_nil num) P)] and3_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) Tr2) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) Tr2) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) Tr2) P) (tree_eq_has_parent X1 Eq Tr1 Tr2 P p1 (tree_valid_path->has_parent X1 Tr1 P p3 q1)) (tree_eq_has_siblings X1 Eq Tr1 Tr2 P p1 (tree_valid_path->has_siblings X1 Tr1 P p3 q1)) (tree_eq_has_finite_siblings X1 Eq Tr1 Tr2 P p1 (tree_valid_path->has_finite_siblings X1 Tr1 P p3 q1)))))).
tree_eq_valid_path_not : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} {P:tm shadowed_3} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) P)) -> pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) P)) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [P:tm shadowed_3] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p4:pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) P))] not_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) P) ([q1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) P)] not_e (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) P) p4 (tree_eq_valid_path X1 Eq Tr1 Tr2 P p1 q1)).
tree_eq_height : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} {D:tm num} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr1) D) -> pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr2) D) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [D:tm num] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p2:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr1) D)] exists_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 and @ num form (@ (list num) (num arrow form) (list_length num) x3) (pred D) and forall shadowed_3 ([p3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p3 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p3) n and @ num form (@ num (shadowed_0 num) inrange D) n))) (@ num form (@ (tree X1) (num arrow form) (lam2 (tree X1) num form ([x3:tm (tree X1)] [x4:tm num] isNat x4 and exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred x4) and forall shadowed_3 ([p4:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p4 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p4) n and @ num form (@ num (shadowed_0 num) inrange x4) n))))) Tr2) D) (and_e2 (isNat D) (exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred D) and forall shadowed_3 ([p5:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p5 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p5) n and @ num form (@ num (shadowed_0 num) inrange D) n)))) (def2_e num (tree X1) ([x3:tm (tree X1)] [x4:tm num] isNat x4 and exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred x4) and forall shadowed_3 ([p6:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p6 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) n and @ num form (@ num (shadowed_0 num) inrange x4) n)))) Tr1 D p2)) ([lp:tm shadowed_3] [q5:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred D) and forall shadowed_3 ([p7:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p7 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p7) n and @ num form (@ num (shadowed_0 num) inrange D) n)))] and3_l (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) lp) (@ num form (@ (list num) (num arrow form) (list_length num) lp) (pred D)) (forall shadowed_3 ([p8:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p8 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p8) n and @ num form (@ num (shadowed_0 num) inrange D) n))) (@ num form (@ (tree X1) (num arrow form) (lam2 (tree X1) num form ([x3:tm (tree X1)] [x4:tm num] isNat x4 and exists shadowed_3 ([lp1:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) lp1 and @ num form (@ (list num) (num arrow form) (list_length num) lp1) (pred x4) and forall shadowed_3 ([p9:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p9 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p9) n and @ num form (@ num (shadowed_0 num) inrange x4) n))))) Tr2) D) q5 ([q51:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) lp)] [q52:pf (@ num form (@ (list num) (num arrow form) (list_length num) lp) (pred D))] [q53:pf (forall shadowed_3 ([p10:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p10 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p10) n and @ num form (@ num (shadowed_0 num) inrange D) n)))] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) lp) (@ num form (@ (tree X1) (num arrow form) (lam2 (tree X1) num form ([x3:tm (tree X1)] [x4:tm num] isNat x4 and exists shadowed_3 ([lp2:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) lp2 and @ num form (@ (list num) (num arrow form) (list_length num) lp2) (pred x4) and forall shadowed_3 ([p11:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p11 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p11) n and @ num form (@ num (shadowed_0 num) inrange x4) n))))) Tr2) D) (equiv_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) lp) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) lp) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) (tree_eq_e X1 Eq Tr1 Tr2 p1) lp) q51) ([q54:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) lp)] def2_i (tree X1) num ([x3:tm (tree X1)] [x4:tm num] isNat x4 and exists shadowed_3 ([lp3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) lp3 and @ num form (@ (list num) (num arrow form) (list_length num) lp3) (pred x4) and forall shadowed_3 ([p12:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p12 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p12) n and @ num form (@ num (shadowed_0 num) inrange x4) n)))) Tr2 D (and_i (isNat D) (exists shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3 and @ num form (@ (list num) (num arrow form) (list_length num) x3) (pred D) and forall shadowed_3 ([p13:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p13 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p13) n and @ num form (@ num (shadowed_0 num) inrange D) n)))) (tree_height_isNat X1 Tr1 D p2) (exists_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3 and @ num form (@ (list num) (num arrow form) (list_length num) x3) (pred D) and forall shadowed_3 ([p14:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p14 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p14) n and @ num form (@ num (shadowed_0 num) inrange D) n))) lp (and3_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) lp) (@ num form (@ (list num) (num arrow form) (list_length num) lp) (pred D)) (forall shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) x3) n and @ num form (@ num (shadowed_0 num) inrange D) n))) q54 q52 (forall_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) x3) n and @ num form (@ num (shadowed_0 num) inrange D) n)) ([p15:tm shadowed_3] imp_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p15) (exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p15) n and @ num form (@ num (shadowed_0 num) inrange D) n)) ([q1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p15)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p15) (exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p15) n and @ num form (@ num (shadowed_0 num) inrange D) n)) (equiv_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p15) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) p15) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 equiv @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr2) x3) (tree_eq_e X1 Eq Tr1 Tr2 p1) p15) q1) ([q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p15)] imp_e (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) p15) (exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p15) n and @ num form (@ num (shadowed_0 num) inrange D) n)) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) Tr1) x3 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) x3) n and @ num form (@ num (shadowed_0 num) inrange D) n)) q53 p15) q2)))))))))).
tree_eq_root : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} {V:tm X1} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (@ X1 form (@ (tree X1) (X1 arrow form) (tree_root X1) Tr1) V) -> pf (@ X1 form (@ (tree X1) (X1 arrow form) (tree_root X1) Tr2) V) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [V:tm X1] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p3:pf (@ X1 form (@ (tree X1) (X1 arrow form) (tree_root X1) Tr1) V)] cut (forall2 shadowed_3 X1 ([p2:tm shadowed_3] [v1:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p2) v1 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p2) v1)) (@ X1 form (@ (tree X1) (X1 arrow form) (lam2 (tree X1) X1 form ([x3:tm (tree X1)] [x4:tm X1] forall (list num) ([p4:tm (list num)] @ (list num) form (list_is_nil num) p4 imp @ X1 form (@ (list num) (X1 arrow form) x3 p4) x4))) Tr2) V) (tree_eq_node X1 Eq Tr1 Tr2 p1) ([p4:pf (forall2 shadowed_3 X1 ([p5:tm shadowed_3] [x3:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p5) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p5) x3))] def2_i (tree X1) X1 ([x3:tm (tree X1)] [x4:tm X1] forall (list num) ([p6:tm (list num)] @ (list num) form (list_is_nil num) p6 imp @ X1 form (@ (list num) (X1 arrow form) x3 p6) x4)) Tr2 V (forall_i (list num) ([x3:tm (list num)] @ (list num) form (list_is_nil num) x3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) V) ([p7:tm (list num)] imp_i (@ (list num) form (list_is_nil num) p7) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p7) V) ([q1:pf (@ (list num) form (list_is_nil num) p7)] cut (@ X1 form (@ (list num) (X1 arrow form) Tr1 p7) V) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p7) V) (imp_e (@ (list num) form (list_is_nil num) p7) (@ X1 form (@ (list num) (X1 arrow form) Tr1 p7) V) (forall_e (list num) ([x3:tm (list num)] @ (list num) form (list_is_nil num) x3 imp @ X1 form (@ (list num) (X1 arrow form) Tr1 x3) V) (def2_e X1 (tree X1) ([x3:tm (tree X1)] [x4:tm X1] forall (list num) ([p8:tm (list num)] @ (list num) form (list_is_nil num) p8 imp @ X1 form (@ (list num) (X1 arrow form) x3 p8) x4)) Tr1 V p3) p7) q1) ([q2:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p7) V)] equiv_e1 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p7) V) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p7) V) (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) p4 p7 V) q2))))).
tree_eq_valid_node : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr1) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr2) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr1)] cut (@ (per X1) form (validper X1) Eq) (@ (tree X1) form (@ (eqrel X1) (tree X1 arrow form) (lam2 (eqrel X1) (tree X1) form ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p3) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p3) y)))))) Eq) Tr2) (tree_valid_node_per X1 Eq Tr1 p2) ([p0:pf (@ (per X1) form (validper X1) Eq)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr2) Tr1) (@ (tree X1) form (@ (eqrel X1) (tree X1 arrow form) (lam2 (eqrel X1) (tree X1) form ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p4:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p4) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x6) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p4) y)))))) Eq) Tr2) (per_symm (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1 Tr2 (tree_eq_validper X1 Eq p0) p1) ([p11:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr2) Tr1)] cut (forall2 shadowed_3 X1 ([p5:tm shadowed_3] [v1:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p5) v1 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p5) v1)) (@ (tree X1) form (@ (eqrel X1) (tree X1 arrow form) (lam2 (eqrel X1) (tree X1) form ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p6:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p6) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p6) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p6) y)))))) Eq) Tr2) (tree_eq_node X1 Eq Tr1 Tr2 p1) ([p4:pf (forall2 shadowed_3 X1 ([p7:tm shadowed_3] [x8:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p7) x8 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p7) x8))] def2_i (eqrel X1) (tree X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p8:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p8) (exists X1 ([x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) x9 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x9) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p8) y))))) Eq Tr2 (and_i (@ (per X1) form (validper X1) Eq) (forall shadowed_3 ([x3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4))))) p0 (forall_i shadowed_3 ([x3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x5 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x5))) (forall X1 ([x4:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4)))) ([p9:tm shadowed_3] cut (if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) p9) (exists X1 ([x10:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) x10 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x10) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y)))) (if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) p9) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x3)))) (forall_e shadowed_3 ([x3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) x3) (exists X1 ([x11:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) x11 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x11) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) y)))) (and_e2 (@ (per X1) form (validper X1) Eq) (forall shadowed_3 ([p10:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) p10) (exists X1 ([x12:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) x12 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x12) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p10) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p10) y))))) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p12:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p12) (exists X1 ([x13:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x13) x13 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x13) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p12) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p12) y))))) Eq Tr1 p2)) p9) ([q5:pf (if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) p9) (exists X1 ([x14:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) x14 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x14) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y))))] if_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) p9) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x4))) (forall X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x3))) ([q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) p9)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) p9) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x4))) (tree_eq_valid_path X1 Eq Tr2 Tr1 p9 p11 q3) ([q31:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) p9)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x4))) (if_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) p9) (exists X1 ([x15:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) x15 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x15) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y))) q5 q31) ([x16:tm X1] [q32:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y))] and_l (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x4))) q32 ([q33:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16)] [q34:pf (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x4)) x16 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) x16) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x3)) q33 (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) y) ([q8:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) y)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) y) (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) x3) q34 y) q8) ([q81:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y)] equiv_e1 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) y) (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) p4 p9 y) q81))) (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) y) ([q9:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) y)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) y) (equiv_e2 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) y) (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) p4 p9 y) q9) ([q91:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x16) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x16) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) x3) q34 y) q91)))))))))) ([q4:pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) p9))] cut (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) p9)) (forall X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x3))) (tree_eq_valid_path_not X1 Eq Tr1 Tr2 p9 p1 q4) ([q41:pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) p9))] cut (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y))) (forall X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x3))) (if_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) p9) (exists X1 ([x17:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) x17 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x17) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y))) q5 q41) ([q42:pf (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y)))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) x3)) ([y:tm X1] not_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) y) ([q6:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) y)] not_e (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y) (forall_e X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) x3)) q42 y) (equiv_e2 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p9) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p9) y) (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) p4 p9 y) q6))))))))))))).
tree_eq_valid : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr1) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr2) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2)] [p2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr1)] cut (@ (per X1) form (validper X1) Eq) (@ (tree X1) form (@ (eqrel X1) (tree X1 arrow form) (lam2 (eqrel X1) (tree X1) form ([x3:tm (eqrel X1)] [x4:tm (tree X1)] exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x4) d) and @ (tree X1) form (tree_is_not_empty X1) x4 and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) x3) x4)) Eq) Tr2) (tree_valid_per X1 Eq Tr1 p2) ([p0:pf (@ (per X1) form (validper X1) Eq)] cut (@ (tree X1) form (tree_is_not_empty X1) Tr1) (@ (tree X1) form (@ (eqrel X1) (tree X1 arrow form) (lam2 (eqrel X1) (tree X1) form ([x3:tm (eqrel X1)] [x4:tm (tree X1)] exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x4) d) and @ (tree X1) form (tree_is_not_empty X1) x4 and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) x3) x4)) Eq) Tr2) (tree_valid_not_empty X1 Eq Tr1 p2) ([p31:pf (@ (tree X1) form (tree_is_not_empty X1) Tr1)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr1) (@ (tree X1) form (@ (eqrel X1) (tree X1 arrow form) (lam2 (eqrel X1) (tree X1) form ([x3:tm (eqrel X1)] [x4:tm (tree X1)] exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x4) d) and @ (tree X1) form (tree_is_not_empty X1) x4 and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) x3) x4)) Eq) Tr2) (tree_valid->valid_node X1 Eq Tr1 p2) ([p32:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr1)] def2_i (eqrel X1) (tree X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x4) d) and @ (tree X1) form (tree_is_not_empty X1) x4 and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) x3) x4) Eq Tr2 (and3_i (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr2) x3)) (@ (tree X1) form (tree_is_not_empty X1) Tr2) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr2) (exists_e num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr1) x3) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr2) x3)) (tree_valid_finite_height X1 Eq Tr1 p2) ([d:tm num] [q2:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr1) d)] exists_i num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr2) x3) d (tree_eq_height X1 Eq Tr1 Tr2 d p1 q2))) (tree_eq_not_empty X1 Eq Tr1 Tr2 p1 p31) (tree_eq_valid_node X1 Eq Tr1 Tr2 p1 p32))))).
tree_eq_refl : {X1:tp} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) Tr) = [X1:tp] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] cut (@ (per X1) form (validper X1) Eq) (@ (tree X1) form (@ (tree X1) (tree X1 arrow form) (@ (eqrel X1) (tree X1 arrow tree X1 arrow form) (lam (eqrel X1) (tree X1 arrow tree X1 arrow form) ([x3:tm (eqrel X1)] @ (per X1) (per (rel shadowed_3 X1)) (@ (per shadowed_3) (per X1 arrow per (rel shadowed_3 X1)) (per_rel shadowed_3 X1) path_eq) x3)) Eq) Tr) Tr) (tree_valid_per X1 Eq Tr p1) ([p0:pf (@ (per X1) form (validper X1) Eq)] gdef1_i (tree X1 arrow tree X1 arrow form) (eqrel X1) ([x3:tm (eqrel X1)] @ (per X1) (per (rel shadowed_3 X1)) (@ (per shadowed_3) (per X1 arrow per (rel shadowed_3 X1)) (per_rel shadowed_3 X1) path_eq) x3) Eq ([z1:tm (tree X1 arrow tree X1 arrow form)] @ (tree X1) form (@ (tree X1) (tree X1 arrow form) z1 Tr) Tr) (def4_i (per shadowed_3) (per X1) (tree X1) (tree X1) ([x3:tm (per shadowed_3)] [x4:tm (per X1)] [x5:tm (tree X1)] [x6:tm (tree X1)] forall4 shadowed_3 shadowed_3 X1 X1 ([x7:tm shadowed_3] [x':tm shadowed_3] [y:tm X1] [y':tm X1] (@ shadowed_3 form (@ shadowed_3 (shadowed_3 arrow form) x3 x7) x' imp @ X1 form (@ X1 (X1 arrow form) x4 y) y' imp @ X1 form (@ shadowed_3 (X1 arrow form) x5 x7) y equiv @ X1 form (@ shadowed_3 (X1 arrow form) x6 x') y') and (@ X1 form (@ shadowed_3 (X1 arrow form) x5 x7) y imp @ shadowed_3 form (@ shadowed_3 (shadowed_3 arrow form) x3 x7) x7 and @ X1 form (@ X1 (X1 arrow form) x4 y) y) and (@ X1 form (@ shadowed_3 (X1 arrow form) x6 x') y' imp @ shadowed_3 form (@ shadowed_3 (shadowed_3 arrow form) x3 x') x' and @ X1 form (@ X1 (X1 arrow form) x4 y') y'))) path_eq Eq Tr Tr (forall4_i shadowed_3 shadowed_3 X1 X1 ([x3:tm shadowed_3] [x4:tm shadowed_3] [x5:tm X1] [x6:tm X1] (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq x3) x4 imp @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x6 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) x5 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x4) x6) and (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) x5 imp @ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) x3) x3 and @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5) and (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x4) x6 imp @ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) x4) x4 and @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6)) ([p2:tm shadowed_3] [p':tm shadowed_3] [x8:tm X1] [x':tm X1] and3_i (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p2) p' imp @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x' imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8 imp @ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p2) p2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x' imp @ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p') p' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (imp2_i (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p2) p') (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) x') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x') ([q1:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq p2) p')] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) x')] equiv_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x') (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x') ([q5:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x') (tree_valid_path_exists X1 Eq Tr p2 p1 (tree_node_i X1 Tr p2 x8 q5)) ([q51:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p2)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x') (list_eq_valid' num eq_nat p2 p' q1) ([q54:pf (@ shadowed_3 form path_valid p')] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x8) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x') (tree_valid_path_congr X1 Eq Tr p2 x8 p' p1 q5 q1 q54) ([q55:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x8)] tree_valid_node_congr' X1 Eq Tr p' x8 x' p1 q55 q2))))) (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8) ([q6:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x')] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8) (tree_valid_path_exists X1 Eq Tr p' p1 (tree_node_i X1 Tr p' x' q6)) ([q61:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p')] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p2) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8) (list_eq_valid num eq_nat p2 p' q1) ([q64:pf (@ shadowed_3 form path_valid p2)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8) (tree_valid_path_congr X1 Eq Tr p' x' p2 p1 q6 (per_symm shadowed_3 path_eq p2 p' path_eq_validper q1) q64) ([q65:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x')] tree_valid_node_congr' X1 Eq Tr p2 x' x8 p1 q65 (per_symm X1 Eq x8 x' p0 q2)))))))) (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8) (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p2) p2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8) ([q3:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p2) x8)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p2) (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p2) p2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8) (tree_valid_path_exists X1 Eq Tr p2 p1 (tree_node_i X1 Tr p2 x8 q3)) ([q31:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p2)] cut (@ shadowed_3 form path_valid p2) (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p2) p2 and @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8) (tree_valid_path->path_valid X1 Tr p2 q31) ([q32:pf (@ shadowed_3 form path_valid p2)] and_i (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p2) p2) (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8) (list_eq_refl num eq_nat p2 q32) (tree_valid_node_valid X1 Eq Tr p2 x8 p1 q3))))) (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x') (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p') p' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') ([q4:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p') x')] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p') (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p') p' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (tree_valid_path_exists X1 Eq Tr p' p1 (tree_node_i X1 Tr p' x' q4)) ([q41:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p')] cut (@ shadowed_3 form path_valid p') (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p') p' and @ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (tree_valid_path->path_valid X1 Tr p' q41) ([q42:pf (@ shadowed_3 form path_valid p')] and_i (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) p') p') (@ X1 form (@ X1 (shadowed_0 X1) Eq x') x') (list_eq_refl num eq_nat p' q42) (tree_valid_node_valid X1 Eq Tr p' x' p1 q4))))))))).
tree_subtrees_max_height_nil : {X1:tp} {L:tm (list (tree X1))} {Eq:tm (eqrel X1)} pf (@ (list (tree X1)) form (list_is_nil (tree X1)) L) -> pf (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) L) zero) = [X1:tp] [L:tm (list (tree X1))] [Eq:tm (eqrel X1)] [p1:pf (@ (list (tree X1)) form (list_is_nil (tree X1)) L)] def3_i (eqrel X1) (list (tree X1)) num ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d'))))) Eq L zero (if_i1 (@ (list (tree X1)) form (list_is_nil (tree X1)) L) (== num zero zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) L) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) zero and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) L) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq zero d')))) p1 (refl num zero)).
tree_subtrees_max_height_cons_nil : {X1:tp} {Sbtrs:tm (list (tree X1))} {Eq:tm (eqrel X1)} {Tr:tm (tree X1)} {H':tm num} pf (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) H') -> pf (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H') = [X1:tp] [Sbtrs:tm (list (tree X1))] [Eq:tm (eqrel X1)] [Tr:tm (tree X1)] [H':tm num] [p1:pf (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)] [p2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p3:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) H')] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) Tr) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H') (tree_eq_refl X1 Eq Tr p2) ([p4:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) Tr)] cut (not (@ (list (tree X1)) form (list_is_nil (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs))) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H') (list_cons->not_nil (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr Sbtrs p4) ([p5:pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)))] def3_i (eqrel X1) (list (tree X1)) num ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d'))))) Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs) H' (if_i2 (@ (list (tree X1)) form (list_is_nil (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) (exists (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) H' and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H' d')))) (eq num H' zero) p5 (exists_i (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) H' and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H' d'))) Tr (and3_i (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) Tr) (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) H') (forall (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp exists num ([x4:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) x4 and geq H' x4))) (list_hd_member (tree X1) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs) Tr (list_hd_cons' (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr Tr Sbtrs p4)) p3 (forall_i (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp exists num ([x4:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) x4 and geq H' x4)) ([tr:tm (tree X1)] imp2_i (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3)) ([p6:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr)] [p7:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr)] or_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr) (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr) Tr) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3)) (list_member_cons_e (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr Sbtrs tr p6) ([p8:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr)] cut (not (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr)) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3)) (forall_e (tree X1) ([x3:tm (tree X1)] not (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) x3)) (list_nil_no_member (tree X1) Sbtrs p1) tr) ([p81:pf (not (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr))] false_e (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3)) (not_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr) p81 p8))) ([p9:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr) Tr)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) tr) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3)) (per_symm (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr Tr (tree_eq_validper X1 Eq (tree_valid_per X1 Eq Tr p2)) p9) ([p91:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) tr)] exists_i num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3) H' (and_i (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) H') (>= H' H') (tree_eq_height X1 Eq Tr tr H' p91 p3) (eq->geq H' H' (refl num H'))))))))))))).
tree_subtrees_max_height_cons_add_max : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {H:tm num} {Tr:tm (tree X1)} {H':tm num} pf (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) Sbtrs) H) -> pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) H') -> pf (geq H' H) -> pf (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H') = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [H:tm num] [Tr:tm (tree X1)] [H':tm num] [p1:pf (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) Sbtrs) H)] [p7:pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs))] [p2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p3:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) H')] [p4:pf (geq H' H)] cut (@ (per X1) form (validper X1) Eq) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H') (tree_valid_per X1 Eq Tr p2) ([p0:pf (@ (per X1) form (validper X1) Eq)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) Tr) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H') (tree_eq_refl X1 Eq Tr p2) ([p6:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) Tr)] cut (not (@ (list (tree X1)) form (list_is_nil (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs))) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H') (list_cons->not_nil (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr Sbtrs p6) ([p5:pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)))] exists_e (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) x3 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) H and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d'))) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H') (if_e2 (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs) (eq num H zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) H and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')))) (def3_e num (list (tree X1)) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d'))))) Eq Sbtrs H p1) p7) ([tr0:tm (tree X1)] [q5:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) H and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')))] and3_l (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr0) (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) H) (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d'))) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr1:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr1 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr1) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H') q5 ([q51:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr0)] [q52:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) H)] [q53:pf (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')))] def3_i (eqrel X1) (list (tree X1)) num ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr2:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr2 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr2) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d'))))) Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs) H' (if_i2 (@ (list (tree X1)) form (list_is_nil (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) (exists (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) H' and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H' d')))) (eq num H' zero) p5 (exists_i (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) H' and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H' d'))) Tr (and3_i (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) Tr) (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) H') (forall (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp exists num ([x4:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) x4 and geq H' x4))) (list_hd_member (tree X1) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs) Tr (list_hd_cons' (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr Tr Sbtrs p6)) p3 (forall_i (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp exists num ([x4:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) x4 and geq H' x4)) ([tr:tm (tree X1)] imp2_i (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3)) ([q1:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr)] [q2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr)] or_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr) (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr) Tr) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3)) (list_member_cons_e (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr Sbtrs tr q1) ([q3:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr)] exists_e num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H x3) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3)) (imp2_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')) (forall_e (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) d' and geq H d')) q53 tr) q3 q2) ([d':tm num] [q31:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')] exists_i num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3) d' (and_i (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d') (geq H' d') (and_e1 (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d') (geq H d') q31) (ord_transitivity H' H d' p4 (and_e2 (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d') (geq H d') q31))))) ([q4:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr) Tr)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) tr) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3)) (per_symm (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr Tr (tree_eq_validper X1 Eq p0) q4) ([q41:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) tr)] exists_i num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H' x3) H' (and_i (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) H') (>= H' H') (tree_eq_height X1 Eq Tr tr H' q41 p3) (eq->geq H' H' (refl num H')))))))))))))))).
tree_subtrees_max_height_cons_add_not_max : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {H:tm num} {Tr:tm (tree X1)} {H':tm num} pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) -> pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)) -> pf (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) Sbtrs) H) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) H') -> pf (not (geq H' H)) -> pf (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [H:tm num] [Tr:tm (tree X1)] [H':tm num] [p0:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] [p7:pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs))] [p1:pf (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) Sbtrs) H)] [p2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] [p3:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) H')] [p4:pf (not (geq H' H))] cut (@ (per X1) form (validper X1) Eq) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H) (tree_valid_per X1 Eq Tr p2) ([p21:pf (@ (per X1) form (validper X1) Eq)] cut (< H' H) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H) (not_greatereq_lt H' H p4) ([p41:pf (gt H H')] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) Tr) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H) (tree_eq_refl X1 Eq Tr p2) ([p5:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) Tr)] cut (not (@ (list (tree X1)) form (list_is_nil (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs))) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H) (list_cons->not_nil (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr Sbtrs p5) ([p6:pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)))] exists_e (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) x3 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) H and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d'))) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H) (if_e2 (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs) (eq num H zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) H and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')))) (def3_e num (list (tree X1)) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d'))))) Eq Sbtrs H p1) p7) ([tr0:tm (tree X1)] [q5:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) H and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')))] and3_l (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr0) (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) H) (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d'))) (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (lam3 (eqrel X1) (list (tree X1)) num form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr1:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr1 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr1) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d')))))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) H) q5 ([q51:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr0)] [q52:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) H)] [q53:pf (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')))] def3_i (eqrel X1) (list (tree X1)) num ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr2:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr2 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr2) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d'))))) Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs) H (if_i2 (@ (list (tree X1)) form (list_is_nil (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) (exists (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) H and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')))) (eq num H zero) p6 (exists_i (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) H and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d'))) tr0 (and3_i (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr0) (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) H) (forall (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp exists num ([x4:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) x4 and geq H x4))) (list_member_cons_i (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs tr0 Tr p0 q51) q52 (forall_i (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp exists num ([x4:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) x4 and geq H x4)) ([tr:tm (tree X1)] imp2_i (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H x3)) ([q1:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr)] [q2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr)] or_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr) (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr) Tr) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H x3)) (list_member_cons_e (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr Sbtrs tr q1) ([q3:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr)] exists_e num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H x3) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H x3)) (imp2_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')) (forall_e (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) d' and geq H d')) q53 tr) q3 q2) ([d':tm num] [q31:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq H d')] exists_i num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H x3) d' q31)) ([q4:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr) Tr)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) tr) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H x3)) (per_symm (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr Tr (tree_eq_validper X1 Eq p21) q4) ([q41:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) tr)] exists_i num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) x3 and geq H x3) H' (and_i (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) H') (>= H H') (tree_eq_height X1 Eq Tr tr H' q41 p3) (gt->geq H H' p41)))))))))))))))).
tree_subtrees_have_finite_heights_nil : {X1:tp} {Sbtrs:tm (list (tree X1))} {Eq:tm (eqrel X1)} pf (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) Sbtrs) = [X1:tp] [Sbtrs:tm (list (tree X1))] [Eq:tm (eqrel X1)] [p1:pf (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)] def2_i (eqrel X1) (list (tree X1)) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] exists num ([d:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) x3) x4) d)) Eq Sbtrs (exists_i num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) Sbtrs) x3) zero (tree_subtrees_max_height_nil X1 Sbtrs Eq p1)).
tree_subtrees_have_finite_heights_cons : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {Tr:tm (tree X1)} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) Sbtrs) -> pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [Tr:tm (tree X1)] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) Sbtrs)] [p2:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] [p4:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] def2_i (eqrel X1) (list (tree X1)) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] exists num ([d:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) x3) x4) d)) Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs) (or_e (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs) (not (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)) (exists num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3)) (excluded_middle (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)) ([q1:pf (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)] exists_e num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) x3) (exists num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3)) (tree_valid_finite_height X1 Eq Tr p4) ([h:tm num] [q11:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) h)] exists_i num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3) h (tree_subtrees_max_height_cons_nil X1 Sbtrs Eq Tr h q1 p4 q11))) ([q2:pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs))] exists_e num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) Sbtrs) x3) (exists num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3)) (def2_e (list (tree X1)) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] exists num ([d:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) x3) x4) d)) Eq Sbtrs p1) ([h:tm num] [q21:pf (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) Sbtrs) h)] exists_e num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) x3) (exists num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3)) (tree_valid_finite_height X1 Eq Tr p4) ([h':tm num] [q22:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) Tr) h')] or_e (geq h' h) (not (geq h' h)) (exists num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3)) (excluded_middle (geq h' h)) ([q3:pf (geq h' h)] exists_i num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3) h' (tree_subtrees_max_height_cons_add_max X1 Eq Sbtrs h Tr h' q21 q2 p4 q22 q3)) ([q4:pf (not (geq h' h))] exists_i num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3) h (tree_subtrees_max_height_cons_add_not_max X1 Eq Sbtrs h Tr h' p2 q2 q21 p4 q22 q4)))))).
tree_valid_subtrees_nil : {X1:tp} {Eq:tm (per X1)} {L:tm (list (tree X1))} pf (@ (per X1) form (validper X1) Eq) -> pf (@ (list (tree X1)) form (list_is_nil (tree X1)) L) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) L) = [X1:tp] [Eq:tm (per X1)] [L:tm (list (tree X1))] [p1:pf (@ (per X1) form (validper X1) Eq)] [p2:pf (@ (list (tree X1)) form (list_is_nil (tree X1)) L)] def2_i (eqrel X1) (list (tree X1)) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] @ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) x3)) x4 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr and @ (tree X1) form (tree_is_not_empty X1) tr)) Eq L (and_i (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) L) (forall (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) L) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 and @ (tree X1) form (tree_is_not_empty X1) x3)) (list_valid_nil' (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) L (tree_eq_validper X1 Eq p1) p2) (forall_i (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) L) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 and @ (tree X1) form (tree_is_not_empty X1) x3) ([tr:tm (tree X1)] imp_i (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) L) tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr and @ (tree X1) form (tree_is_not_empty X1) tr) ([q1:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) L) tr)] cut (forall (tree X1) ([x3:tm (tree X1)] not (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) L) x3))) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr and @ (tree X1) form (tree_is_not_empty X1) tr) (list_nil_no_member (tree X1) L p2) ([q2:pf (forall (tree X1) ([x4:tm (tree X1)] not (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) L) x4)))] false_e (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr and @ (tree X1) form (tree_is_not_empty X1) tr) (not_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) L) tr) (forall_e (tree X1) ([x3:tm (tree X1)] not (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) L) x3)) q2 tr) q1)))))).
tree_valid_subtrees_cons : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {Tr:tm (tree X1)} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [Tr:tm (tree X1)] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] cut (@ (tree X1) form (tree_is_not_empty X1) Tr) (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (lam2 (eqrel X1) (list (tree X1)) form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] @ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) x3)) x4 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr and @ (tree X1) form (tree_is_not_empty X1) tr))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) (tree_valid_not_empty X1 Eq Tr p2) ([p3:pf (@ (tree X1) form (tree_is_not_empty X1) Tr)] cut (@ (per X1) form (validper X1) Eq) (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (lam2 (eqrel X1) (list (tree X1)) form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] @ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) x3)) x4 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr and @ (tree X1) form (tree_is_not_empty X1) tr))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) (tree_valid_per X1 Eq Tr p2) ([p0:pf (@ (per X1) form (validper X1) Eq)] cut (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (lam2 (eqrel X1) (list (tree X1)) form ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] @ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) x3)) x4 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr and @ (tree X1) form (tree_is_not_empty X1) tr))) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) (tree_valid_subtrees_list_valid X1 Eq Sbtrs p1) ([p4:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] def2_i (eqrel X1) (list (tree X1)) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] @ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) x3)) x4 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr and @ (tree X1) form (tree_is_not_empty X1) tr)) Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs) (and_i (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) (forall (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 and @ (tree X1) form (tree_is_not_empty X1) x3)) (list_valid_cons (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr Sbtrs (tree_eq_refl X1 Eq Tr p2) p4) (forall_i (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 and @ (tree X1) form (tree_is_not_empty X1) x3) ([tr:tm (tree X1)] imp_i (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr and @ (tree X1) form (tree_is_not_empty X1) tr) ([q1:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr) Sbtrs)) tr)] or_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr) (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr) Tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr and @ (tree X1) form (tree_is_not_empty X1) tr) (list_member_cons_e (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr Sbtrs tr q1) ([q2:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr)] and_i (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (@ (tree X1) form (tree_is_not_empty X1) tr) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs tr p1 q2) (tree_valid_subtrees_tr_not_empty X1 Eq Sbtrs tr p1 q2)) ([q3:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr) Tr)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) tr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr and @ (tree X1) form (tree_is_not_empty X1) tr) (per_symm (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) tr Tr (tree_eq_validper X1 Eq p0) q3) ([q31:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr) tr)] and_i (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr) (@ (tree X1) form (tree_is_not_empty X1) tr) (tree_eq_valid X1 Eq Tr tr q31 p2) (tree_eq_not_empty X1 Eq Tr tr q31 p3)))))))))).
tree_mktree_path_length : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {V:tm X1} {P:tm shadowed_3} {D:tnum} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) -> pf (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq D d'))) -> pf (not (@ (list num) form (list_is_nil num) P)) -> pf (exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) n and @ num form (@ num (shadowed_0 num) inrange (succ D)) n)) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [V:tm X1] [P:tm shadowed_3] [D:tnum] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] [p3:pf (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq D d')))] [p4:pf (not (@ (list num) form (list_is_nil num) P))] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p2) ([x6:tm X1] [p21:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x6)] cut (@ shadowed_3 form path_valid P) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) (and_e1 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs P x6 p21)) ([p22:pf (@ shadowed_3 form path_valid P)] exists_e num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) (list_length_exists num eq_nat P p22) ([n:tm num] [q1:pf (@ num form (@ (list num) (num arrow form) (list_length num) P) n)] exists_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) (list_not_nil_hd_exists num eq_nat P p22 (list_is_not_nil_i num P p4)) ([hd:tm num] [q2:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd)] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) x6) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)) (if_e2 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd1:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd1 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd1) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6))) (and_e2 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd2:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd2 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd2) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs P x6 p21)) p4) hd) q2) ([sbtr:tm (list num arrow X1 arrow form)] [q3:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) q3 ([q31:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) sbtr)] [q32:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) x6)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p1 (list_member_i' (tree X1) Sbtrs hd sbtr q31)) ([q33:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] exists_e num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) sbtr) x3 and geq D x3) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) (imp2_e (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) sbtr) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) sbtr) d' and geq D d')) (forall_e (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) x3 imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) x3 imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) d' and geq D d')) p3 sbtr) (list_member_i' (tree X1) Sbtrs hd sbtr q31) q33) ([d':tm num] [q4:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) sbtr) d' and geq D d')] and_l (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) sbtr) d') (geq D d') (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) q4 ([q41:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) sbtr) d')] [q42:pf (geq D d')] exists_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) x3 and @ num form (@ (list num) (num arrow form) (list_length num) x3) (pred d') and forall shadowed_3 ([p5:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p5 imp exists num ([n1:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p5) n1 and @ num form (@ num (shadowed_0 num) inrange d') n1))) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) (and_e2 (isNat d') (exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred d') and forall shadowed_3 ([p6:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p6 imp exists num ([n2:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) n2 and @ num form (@ num (shadowed_0 num) inrange d') n2)))) (def2_e num (tree X1) ([x3:tm (tree X1)] [x4:tm num] isNat x4 and exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred x4) and forall shadowed_3 ([p7:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p7 imp exists num ([n3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p7) n3 and @ num form (@ num (shadowed_0 num) inrange x4) n3)))) sbtr d' q41)) ([lp:tm shadowed_3] [q6:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred d') and forall shadowed_3 ([p8:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p8 imp exists num ([n4:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p8) n4 and @ num form (@ num (shadowed_0 num) inrange d') n4)))] exists_e num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_tl num) P)) x3 and @ num form (@ num (shadowed_0 num) inrange d') x3) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) (imp_e (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) (@ (list num) (list num) (list_tl num) P)) (exists num ([n5:tm num] @ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_tl num) P)) n5 and @ num form (@ num (shadowed_0 num) inrange d') n5)) (forall_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) x3 imp exists num ([n6:tm num] @ num form (@ (list num) (num arrow form) (list_length num) x3) n6 and @ num form (@ num (shadowed_0 num) inrange d') n6)) (and_e2 (@ num form (@ (list num) (num arrow form) (list_length num) lp) (pred d')) (forall shadowed_3 ([p9:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p9 imp exists num ([n7:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p9) n7 and @ num form (@ num (shadowed_0 num) inrange d') n7))) (and_e2 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) lp) (@ num form (@ (list num) (num arrow form) (list_length num) lp) (pred d') and forall shadowed_3 ([p10:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) sbtr) p10 imp exists num ([n8:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p10) n8 and @ num form (@ num (shadowed_0 num) inrange d') n8))) q6)) (@ (list num) (list num) (list_tl num) P)) (tree_node_i X1 sbtr (@ (list num) (list num) (list_tl num) P) x6 q32)) ([n9:tm num] [q5:pf (@ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_tl num) P)) n9 and @ num form (@ num (shadowed_0 num) inrange d') n9)] and_l (@ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_tl num) P)) n9) (@ num form (@ num (shadowed_0 num) inrange d') n9) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) q5 ([q51:pf (@ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (list_tl num) P)) n9)] [q52:pf (@ num form (@ num (shadowed_0 num) inrange d') n9)] cut (@ num form (@ num (shadowed_0 num) inrange D) n9) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3)) (inrange_expand'' D d' n9 q42 q52) ([q53:pf (@ num form (@ num (shadowed_0 num) inrange D) n9)] exists_i num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) P) x3 and @ num form (@ num (shadowed_0 num) inrange (succ D)) x3) (succ n9) (and_i (@ num form (@ (list num) (num arrow form) (list_length num) P) (succ n9)) (@ num form (@ num (shadowed_0 num) inrange (succ D)) (succ n9)) (list_length_tl_e num P n9 (exists_i num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3) hd q2) q51) (inrange_expand' D n9 q53))))))))))))))).
list_length_nil'' : {X1:tp} {L:tm (list X1)} pf (@ (list X1) form (list_is_nil X1) L) -> pf (@ num form (@ (list X1) (num arrow form) (list_length X1) L) (pred (succ zero))) = [X1:tp] [L:tm (list X1)] [p1:pf (@ (list X1) form (list_is_nil X1) L)] congr num (pred (succ zero)) zero ([z1:tm num] @ num form (@ (list X1) (num arrow form) (list_length X1) L) z1) (predsucc zero) (list_length_nil' X1 L p1).
tree_mktree_finite_height_nil : {X1:tp} {Sbtrs:tm (list (tree X1))} {Eq:tm (X1 arrow X1 arrow form)} {V:tm X1} pf (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs) -> pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V) -> pf (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) d)) = [X1:tp] [Sbtrs:tm (list (tree X1))] [Eq:tm (X1 arrow X1 arrow form)] [V:tm X1] [p1:pf (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V)] exists_i num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3) (succ zero) (def2_i (tree X1) num ([x3:tm (tree X1)] [x4:tm num] isNat x4 and exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred x4) and forall shadowed_3 ([p3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p3 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p3) n and @ num form (@ num (shadowed_0 num) inrange x4) n)))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (succ zero) (and_i (isNat (succ zero)) (exists (list num) ([x3:tm (list num)] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3 and @ num form (@ (list num) (num arrow form) (list_length num) x3) (pred (succ zero)) and forall shadowed_3 ([p4:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p4 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p4) n and @ num form (@ num (shadowed_0 num) inrange (succ zero)) n)))) (isNat_succ_i zero n_zero) (exists_i (list num) ([x3:tm (list num)] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3 and @ num form (@ (list num) (num arrow form) (list_length num) x3) (pred (succ zero)) and forall shadowed_3 ([p5:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p5 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p5) n and @ num form (@ num (shadowed_0 num) inrange (succ zero)) n))) (list_nil num) (and3_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (list_nil num)) (@ num form (@ (list num) (num arrow form) (list_length num) (list_nil num)) (pred (succ zero))) (forall shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3 imp exists num ([x4:tm num] @ num form (@ (list num) (num arrow form) (list_length num) x3) x4 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x4))) (tree_node_i X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (list_nil num) V (tree_mktree_root' X1 Eq V (list_nil num) Sbtrs p2 (list_is_nil_nil num))) (list_length_nil'' num (list_nil num) (list_is_nil_nil num)) (forall_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3 imp exists num ([x4:tm num] @ num form (@ (list num) (num arrow form) (list_length num) x3) x4 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x4)) ([p6:tm shadowed_3] imp_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p6) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) x3 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3)) ([q1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p6)] or_e (@ (list num) form (list_is_nil num) p6) (not (@ (list num) form (list_is_nil num) p6)) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) x3 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3)) (excluded_middle (@ (list num) form (list_is_nil num) p6)) ([q2:pf (@ (list num) form (list_is_nil num) p6)] cut (@ num form (@ (list num) (num arrow form) (list_length num) p6) zero) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) x3 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3)) (list_length_nil' num p6 q2) ([q21:pf (@ num form (@ (list num) (num arrow form) (list_length num) p6) zero)] exists_i num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) x3 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3) zero (and_i (@ num form (@ (list num) (num arrow form) (list_length num) p6) zero) (@ num form (@ num (shadowed_0 num) inrange (succ zero)) zero) q21 (inrange_succ_n zero n_zero)))) ([q3:pf (not (@ (list num) form (list_is_nil num) p6))] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p6) x3) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) x3 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p6 q1) ([x6:tm X1] [q31:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p6) x6)] and_l (@ shadowed_3 form path_valid p6) (if (@ (list num) form (list_is_nil num) p6) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p6)) x6)))) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) x3 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3)) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8)))) Eq V Sbtrs p6 x6 q31) ([q32:pf (@ shadowed_3 form path_valid p6)] [q33:pf (if (@ (list num) form (list_is_nil num) p6) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p6)) x6))))] exists_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p6) x3) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) x3 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3)) (list_not_nil_hd_exists num eq_nat p6 q32 (list_is_not_nil_i num p6 q3)) ([hd:tm num] [q34:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) p6) hd)] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) p6)) x6) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) x3 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3)) (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) p6) hd) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p6)) x6)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p6) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p6)) x6)) (if_e2 (@ (list num) form (list_is_nil num) p6) (@ X1 form (@ X1 (X1 arrow form) Eq V) x6) (forall num ([hd1:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p6) hd1 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd1) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p6)) x6))) q33 q3) hd) q34) ([tr:tm (list num arrow X1 arrow form)] [q35:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) tr and @ X1 form (@ (list num) (X1 arrow form) tr (@ (list num) (list num) (list_tl num) p6)) x6)] cut (not (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) tr)) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) x3 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3)) (forall2_e num (tree X1) ([x3:tm num] [x4:tm (tree X1)] not (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs x3) x4)) (list_nil_no_elem (tree X1) Sbtrs p1) hd tr) ([q36:pf (not (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) tr))] false_e (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) x3 and @ num form (@ num (shadowed_0 num) inrange (succ zero)) x3)) (not_e (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) tr) q36 (and_e1 (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) tr) (@ X1 form (@ (list num) (X1 arrow form) tr (@ (list num) (list num) (list_tl num) p6)) x6) q35))))))))))))))).
tree_mktree_finite_height_not_nil : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {V:tm X1} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) Sbtrs) -> pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)) -> pf (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) d)) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [V:tm X1] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p2:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) Sbtrs)] [p3:pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs))] exists_e num ([x3:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) Sbtrs) x3) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (def2_e (list (tree X1)) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] exists num ([d:tm num] @ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) x3) x4) d)) Eq Sbtrs p2) ([d:tm num] [p21:pf (@ num form (@ (list (tree X1)) (num arrow form) (@ (eqrel X1) (list (tree X1) arrow num arrow form) (tree_subtrees_max_height X1) Eq) Sbtrs) d)] exists_e (tree X1) ([x3:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) x3 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x3) d and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq d d'))) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (if_e2 (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs) (eq num d zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) d and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq d d')))) (def3_e num (list (tree X1)) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (list (tree X1))] [x5:tm num] if (@ (list (tree X1)) form (list_is_nil (tree X1)) x4) (eq num x5 zero) (exists (tree X1) ([tr0:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr0 and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr0) x5 and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) x4) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) x3) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq x5 d'))))) Eq Sbtrs d p21) p3) ([tr':tm (tree X1)] [q1:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr' and @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr') d and forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq d d')))] and3_l (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr') (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr') d) (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq d d'))) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) q1 ([q11:pf (@ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr')] [q12:pf (@ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr') d)] [q13:pf (forall (tree X1) ([tr:tm (tree X1)] @ (tree X1) form (@ (list (tree X1)) (set (tree X1)) (list_member (tree X1)) Sbtrs) tr imp @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr imp exists num ([d':tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) tr) d' and geq d d')))] exists_e num ([x3:tm num] @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) x3) tr') (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (list_member_e (tree X1) Sbtrs tr' q11) ([i1:tm num] [q14:pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) i1) tr')] cut (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (tree_valid_subtrees_list_valid X1 Eq Sbtrs p1) ([q15a:pf (@ (list (tree X1)) form (@ (eqrel (tree X1)) (list (tree X1) arrow form) (list_valid (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Sbtrs)] cut (isNat i1) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (list_index_isNat (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs i1 tr' q15a q14) ([q15b:pf (isNat i1)] cut (@ num form (@ num (shadowed_0 num) eq_nat i1) i1) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (eq_nat_i i1 i1 (refl num i1) q15b) ([q15c:pf (@ num form (@ num (shadowed_0 num) eq_nat i1) i1)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr') (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs tr' p1 q11) ([q16:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) tr')] and_l (isNat d) (exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred d) and forall shadowed_3 ([p4:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') p4 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p4) n and @ num form (@ num (shadowed_0 num) inrange d) n)))) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (def2_e num (tree X1) ([x3:tm (tree X1)] [x4:tm num] isNat x4 and exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred x4) and forall shadowed_3 ([p5:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p5 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p5) n and @ num form (@ num (shadowed_0 num) inrange x4) n)))) tr' d q12) ([q21:pf (isNat d)] [q22:pf (exists shadowed_3 ([lp:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred d) and forall shadowed_3 ([p6:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') p6 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p6) n and @ num form (@ num (shadowed_0 num) inrange d) n))))] exists_e shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') x3 and @ num form (@ (list num) (num arrow form) (list_length num) x3) (pred d) and forall shadowed_3 ([p7:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') p7 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p7) n and @ num form (@ num (shadowed_0 num) inrange d) n))) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) q22 ([lp:tm shadowed_3] [q3:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') lp and @ num form (@ (list num) (num arrow form) (list_length num) lp) (pred d) and forall shadowed_3 ([p8:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') p8 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p8) n and @ num form (@ num (shadowed_0 num) inrange d) n)))] and3_l (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') lp) (@ num form (@ (list num) (num arrow form) (list_length num) lp) (pred d)) (forall shadowed_3 ([p9:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') p9 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p9) n and @ num form (@ num (shadowed_0 num) inrange d) n))) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) q3 ([q31:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') lp)] [q32:pf (@ num form (@ (list num) (num arrow form) (list_length num) lp) (pred d))] [q33:pf (forall shadowed_3 ([p10:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) tr') p10 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p10) n and @ num form (@ num (shadowed_0 num) inrange d) n)))] exists_e X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) tr' lp) x3) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (def2_e shadowed_3 (tree X1) ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5)) tr' lp q31) ([x6:tm X1] [q34:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) tr' lp) x6)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr') lp) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (tree_valid_path_exists X1 Eq tr' lp q16 q31) ([q35a:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr') lp)] cut (@ shadowed_3 form path_valid lp) (exists num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3)) (tree_valid_path->path_valid X1 tr' lp q35a) ([q35b:pf (@ shadowed_3 form path_valid lp)] exists_i num ([x3:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3) (succ d) (def2_i (tree X1) num ([x3:tm (tree X1)] [x4:tm num] isNat x4 and exists shadowed_3 ([lp1:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) lp1 and @ num form (@ (list num) (num arrow form) (list_length num) lp1) (pred x4) and forall shadowed_3 ([p11:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) p11 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p11) n and @ num form (@ num (shadowed_0 num) inrange x4) n)))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (succ d) (and_i (isNat (succ d)) (exists (list num) ([x3:tm (list num)] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3 and @ num form (@ (list num) (num arrow form) (list_length num) x3) (pred (succ d)) and forall shadowed_3 ([p12:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p12 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p12) n and @ num form (@ num (shadowed_0 num) inrange (succ d)) n)))) (isNat_succ_i d q21) (exists_i (list num) ([x3:tm (list num)] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3 and @ num form (@ (list num) (num arrow form) (list_length num) x3) (pred (succ d)) and forall shadowed_3 ([p13:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p13 imp exists num ([n:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p13) n and @ num form (@ num (shadowed_0 num) inrange (succ d)) n))) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) i1) lp) (and3_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) i1) lp)) (@ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) i1) lp)) (pred (succ d))) (forall shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3 imp exists num ([x4:tm num] @ num form (@ (list num) (num arrow form) (list_length num) x3) x4 and @ num form (@ num (shadowed_0 num) inrange (succ d)) x4))) (tree_node_i X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) i1) lp) x6 (mktree_i2' i1 lp X1 Sbtrs tr' Eq x6 V q15c q35b (list_nth_e (tree X1) Sbtrs i1 tr' q14) q16 q34)) (congr num (pred (succ d)) d ([z1:tm num] @ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) i1) lp)) z1) (predsucc d) (congr num d (succ (pred d)) ([z2:tm num] @ num form (@ (list num) (num arrow form) (list_length num) (@ (list num) (list num) (@ num (list num arrow list num) (@ (eqrel num) (num arrow list num arrow list num) (list_cons num) eq_nat) i1) lp)) z2) (symm num (succ (pred d)) d (succpred d)) (list_length_cons num eq_nat i1 lp (pred d) q15c q32))) (forall_i shadowed_3 ([x3:tm shadowed_3] @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3 imp exists num ([x4:tm num] @ num form (@ (list num) (num arrow form) (list_length num) x3) x4 and @ num form (@ num (shadowed_0 num) inrange (succ d)) x4)) ([p14:tm shadowed_3] imp_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p14) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p14) x3 and @ num form (@ num (shadowed_0 num) inrange (succ d)) x3)) ([q4:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p14)] or_e (@ (list num) form (list_is_nil num) p14) (not (@ (list num) form (list_is_nil num) p14)) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p14) x3 and @ num form (@ num (shadowed_0 num) inrange (succ d)) x3)) (excluded_middle (@ (list num) form (list_is_nil num) p14)) ([q5:pf (@ (list num) form (list_is_nil num) p14)] cut (@ num form (@ (list num) (num arrow form) (list_length num) p14) zero) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p14) x3 and @ num form (@ num (shadowed_0 num) inrange (succ d)) x3)) (list_length_nil' num p14 q5) ([q51:pf (@ num form (@ (list num) (num arrow form) (list_length num) p14) zero)] cut (> (succ d) zero) (exists num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p14) x3 and @ num form (@ num (shadowed_0 num) inrange (succ d)) x3)) (trans_gt_geq (succ d) d zero (succ_gt d) (isNat->geq_zero d q21)) ([q52:pf (gt (succ d) zero)] exists_i num ([x3:tm num] @ num form (@ (list num) (num arrow form) (list_length num) p14) x3 and @ num form (@ num (shadowed_0 num) inrange (succ d)) x3) zero (and_i (@ num form (@ (list num) (num arrow form) (list_length num) p14) zero) (@ num form (@ num (shadowed_0 num) inrange (succ d)) zero) q51 (inrange_zero (succ d) q52))))) ([q6:pf (not (@ (list num) form (list_is_nil num) p14))] tree_mktree_path_length X1 Eq Sbtrs V p14 d p1 q4 q13 q6)))))))))))))))))))))).
tree_mktree_finite_height : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {V:tm X1} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) Sbtrs) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) -> pf (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) d)) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [V:tm X1] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p2:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) Sbtrs)] [p3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V)] or_e (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs) (not (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)) (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) d)) (excluded_middle (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)) ([q1:pf (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs)] tree_mktree_finite_height_nil X1 Sbtrs Eq V q1 p3) ([q2:pf (not (@ (list (tree X1)) form (list_is_nil (tree X1)) Sbtrs))] tree_mktree_finite_height_not_nil X1 Eq Sbtrs V p1 p2 q2).
tree_valid_mktree_valid_path : {X1:tp} {Eq:tm (eqrel X1)} {Sbtrs:tm (list (tree X1))} {P:tm (list num)} {V:tm X1} {I:tm num} {Tr:tm (tree X1)} pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (not (@ (list num) form (list_is_nil num) P)) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) -> pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I) -> pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) I) Tr) -> pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_tl num) P)) -> pf (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) y))) = [X1:tp] [Eq:tm (eqrel X1)] [Sbtrs:tm (list (tree X1))] [P:tm (list num)] [V:tm X1] [I:tm num] [Tr:tm (tree X1)] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p5:pf (not (@ (list num) form (list_is_nil num) P))] [p2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)] [p3:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I)] [p6:pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) I) Tr)] [p4:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_tl num) P))] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list (tree X1))] [x8:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x8 and if (@ (list num) form (list_is_nil num) x8) (@ X1 form (@ X1 (X1 arrow form) x5 x6) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x8) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x8)) x9))))) Eq) V) Sbtrs) P) x4))) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs Tr p1 (list_member_i (tree X1) Sbtrs I Tr p6)) ([q11:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] cut (@ (tree X1) form (tree_is_not_empty X1) Tr) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list (tree X1))] [x8:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x8 and if (@ (list num) form (list_is_nil num) x8) (@ X1 form (@ X1 (X1 arrow form) x5 x6) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x8) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x8)) x9))))) Eq) V) Sbtrs) P) x4))) (tree_valid_subtrees_tr_not_empty X1 Eq Sbtrs Tr p1 (list_member_i (tree X1) Sbtrs I Tr p6)) ([q12:pf (@ (tree X1) form (tree_is_not_empty X1) Tr)] cut (@ shadowed_3 form path_valid P) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list (tree X1))] [x8:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x8 and if (@ (list num) form (list_is_nil num) x8) (@ X1 form (@ X1 (X1 arrow form) x5 x6) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x8) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x8)) x9))))) Eq) V) Sbtrs) P) x4))) (tree_valid_path->path_valid X1 (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P p2) ([q14:pf (@ shadowed_3 form path_valid P)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list (tree X1))] [x8:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x8 and if (@ (list num) form (list_is_nil num) x8) (@ X1 form (@ X1 (X1 arrow form) x5 x6) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x8) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x8)) x9))))) Eq) V) Sbtrs) P) x4))) (tree_valid->valid_node X1 Eq Tr q11) ([q13:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) Tr)] exists_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list (tree X1))] [x8:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x8 and if (@ (list num) form (list_is_nil num) x8) (@ X1 form (@ X1 (X1 arrow form) x5 x6) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x8) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x8)) x9))))) Eq) V) Sbtrs) P) x4))) (if_e1 (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) (@ (list num) (list num) (list_tl num) P)) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y))) (forall_e shadowed_3 ([x3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) x3) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x5) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) y)))) (and_e2 (@ (per X1) form (validper X1) Eq) (forall shadowed_3 ([p7:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) p7) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p7) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p7) y))))) (def2_e (tree X1) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p8:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p8) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p8) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p8) y))))) Eq Tr q13)) (@ (list num) (list num) (list_tl num) P)) p4) ([x8:tm X1] [q2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y))] and_l (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8) (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list (tree X1))] [x9:tm shadowed_3] [x10:tm X1] @ shadowed_3 form path_valid x9 and if (@ (list num) form (list_is_nil num) x9) (@ X1 form (@ X1 (X1 arrow form) x5 x6) x10) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x9) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x9)) x10))))) Eq) V) Sbtrs) P) x4))) q2 ([q21:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8)] [q22:pf (forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y))] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x4 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x5:tm (eqrel X1)] [x6:tm X1] [x7:tm (list (tree X1))] [x9:tm shadowed_3] [x10:tm X1] @ shadowed_3 form path_valid x9 and if (@ (list num) form (list_is_nil num) x9) (@ X1 form (@ X1 (X1 arrow form) x5 x6) x10) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x9) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x7 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x9)) x10))))) Eq) V) Sbtrs) P) x4)) x8 (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) x8) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x3 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list (tree X1))] [x7:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x4 x5) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x6 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x9))))) Eq) V) Sbtrs) P) x3)) q21 (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x3 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list (tree X1))] [x7:tm shadowed_3] [x9:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x4 x5) x9) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x6 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x9))))) Eq) V) Sbtrs) P) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) P) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) P) y) ([q3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y)] def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P y (and_i (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) P)) y)))) q14 (if_i2 (@ (list num) form (list_is_nil num) P) (forall num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) P)) y))) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) p5 (forall_i num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (tree X1) ([x4:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) x4 and @ X1 form (@ (list num) (X1 arrow form) x4 (@ (list num) (list num) (list_tl num) P)) y)) ([hd:tm num] imp_i (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) y)) ([q31:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd)] cut (@ num form (@ num (shadowed_0 num) eq_nat hd) I) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) y)) (list_congr' num eq_nat P zero hd zero I q14 (def2_e num (list num) ([x3:tm (list num)] [x4:tm num] @ num form (@ num (num arrow form) x3 zero) x4) P hd q31) (def2_e num (list num) ([x3:tm (list num)] [x4:tm num] @ num form (@ num (num arrow form) x3 zero) x4) P I p3) (eq_nat_i zero zero (refl num zero) n_zero)) ([q32:pf (@ num form (@ num (shadowed_0 num) eq_nat hd) I)] cut (eq num hd I) (exists (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) y)) (eq_nat_e1 hd I q32) ([q33:pf (eq num hd I)] exists_i (tree X1) ([x3:tm (tree X1)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) y) Tr (and_i (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) Tr) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y) (congr num hd I ([z1:tm num] @ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs z1) Tr) q33 (def3_e (tree X1) num (list (tree X1)) ([x3:tm (list (tree X1))] [x4:tm num] [x5:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x3 x4) x5) Sbtrs I Tr p6)) (equiv_e1 (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) x3) q22 y) q3))))))))))) (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) ([q4:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) y)] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) I) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)) (if_e2 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y))) (and_e2 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P y q4)) p5) I) p3) ([sbtr:tm (list num arrow X1 arrow form)] [q41:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs I) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) q41 ([q42:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs I) sbtr)] [q43:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)] cut (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) sbtr) Tr) (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) (list_nth_eq (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Sbtrs I sbtr Tr (tree_valid_subtrees_list_valid X1 Eq Sbtrs p1) (def3_i (list (tree X1)) num (tree X1) ([x3:tm (list (tree X1))] [x4:tm num] [x5:tm (tree X1)] @ (tree X1) form (@ num (tree X1 arrow form) x3 x4) x5) Sbtrs I sbtr q42) p6) ([q44:pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) sbtr) Tr)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p1 (list_member_i' (tree X1) Sbtrs I sbtr q42)) ([q45:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] cut (forall2 shadowed_3 X1 ([p9:tm shadowed_3] [v1:tm X1] @ X1 form (@ shadowed_3 (shadowed_0 X1) sbtr p9) v1 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p9) v1)) (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) (tree_eq_node X1 Eq sbtr Tr q44) ([q46:pf (forall2 (list num) X1 ([p10:tm (list num)] [x9:tm X1] @ X1 form (@ (list num) (X1 arrow form) sbtr p10) x9 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr p10) x9))] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y) (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) (equiv_e1 (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y) (forall2_e (list num) X1 ([x3:tm (list num)] [x4:tm X1] @ X1 form (@ (list num) (X1 arrow form) sbtr x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr x3) x4) q46 (@ (list num) (list num) (list_tl num) P) y) q43) ([q47:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y)] equiv_e2 (@ X1 form (@ X1 (shadowed_0 X1) Eq x8) y) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) y) (forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x8) x3 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr (@ (list num) (list num) (list_tl num) P)) x3) q22 y) q47))))))))))))))))).
tree_valid_mktree_not_valid_path : {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {V:tm X1} {Sbtrs:tm (list (tree X1))} {P:tm (list num)} pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (not (@ (list num) form (list_is_nil num) P)) -> pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P)) -> pf (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) y))) = [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [P:tm (list num)] [p0:pf (@ X1 form (@ X1 (X1 arrow form) Eq V) V)] [p1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p2:pf (not (@ (list num) form (list_is_nil num) P))] [p3:pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P))] forall_i X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3)) ([y:tm X1] not_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) y) ([q1:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) y)] cut (@ shadowed_3 form path_valid P) false (and_e1 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P y q1)) ([q21:pf (@ shadowed_3 form path_valid P)] exists_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3) false (list_not_nil_hd_exists num eq_nat P q21 (list_is_not_nil_i num P p2)) ([hd:tm num] [q22:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd)] exists_e (list num arrow X1 arrow form) ([x3:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) x3 and @ X1 form (@ (list num) (X1 arrow form) x3 (@ (list num) (list num) (list_tl num) P)) y) false (imp_e (@ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd) (exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)) (forall_e num ([x3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) x3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs x3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)) (if_e2 (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd1:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd1 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd1) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y))) (and_e2 (@ shadowed_3 form path_valid P) (if (@ (list num) form (list_is_nil num) P) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd2:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) P) hd2 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd2) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd3:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd3 imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd3) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs P y q1)) p2) hd) q22) ([sbtr:tm (list num arrow X1 arrow form)] [q23:pf (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)] and_l (@ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr) (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y) false q23 ([q3:pf (@ (tree X1) form (@ num (shadowed_0 (tree X1)) Sbtrs hd) sbtr)] [q4:pf (@ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) P)) y)] cut (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr) false (tree_valid_subtrees_tr_valid X1 Eq Sbtrs sbtr p1 (list_member_i' (tree X1) Sbtrs hd sbtr q3)) ([q5:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) sbtr)] not_e (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) p3 (def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] @ (tree X1) form (tree_is_not_empty X1) x3 and @ shadowed_3 form path_valid x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_node X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) x3) x4 and (@ (list num) form (list_is_not_nil num) x4 imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) x3) x4)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P (and5_i (@ (tree X1) form (tree_is_not_empty X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ shadowed_3 form path_valid P) (@ shadowed_3 form (@ (tree X1) (shadowed_3 arrow form) (lam2 (tree X1) shadowed_3 form ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x5:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x5))) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_path_congr X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ (list num) form (list_is_not_nil num) P imp @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (tree_mktree_not_empty X1 Eq V Sbtrs p0) q21 (def2_i (tree X1) shadowed_3 ([x3:tm (tree X1)] [x4:tm shadowed_3] exists X1 ([x6:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) x3 x4) x6)) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P (exists_i X1 ([x3:tm X1] @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) P) x3) y q1)) (tree_valid_path_cons_congr P X1 Eq Sbtrs hd sbtr V p2 q21 p1 q22 q3) (imp_i (@ (list num) form (list_is_not_nil num) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) ([p4:pf (@ (list num) form (list_is_not_nil num) P)] and3_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_parent X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_has_finite_siblings X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) P) (tree_valid_path_cons_has_parent P X1 Eq Sbtrs hd V (list_is_not_nil_e num P p4) q21 p1 q22 p0) (tree_valid_path_cons_has_siblings P X1 Eq Sbtrs hd V (list_is_not_nil_e num P p4) q21 p1 q22) (tree_valid_path_cons_has_finite_siblings P X1 Eq Sbtrs hd V q21 p1 q22)))))))))))).
tree_valid_mktree_valid_node : {X1:tp} {Eq:tm (per X1)} {V:tm X1} {Sbtrs:tm (list (tree X1))} pf (@ (per X1) form (validper X1) Eq) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) = [X1:tp] [Eq:tm (per X1)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [p1:pf (@ (per X1) form (validper X1) Eq)] [p2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V)] [p3:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] def2_i (eqrel X1) (tree X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] @ (per X1) form (validper X1) x3 and forall shadowed_3 ([p4:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) p4) (exists X1 ([x5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) x5 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p4) y))) (forall X1 ([y:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) x4 p4) y))))) Eq (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (and_i (@ (per X1) form (validper X1) Eq) (forall shadowed_3 ([x3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) x3) y))) (forall X1 ([x4:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) x3) x4))))) p1 (forall_i shadowed_3 ([x3:tm shadowed_3] if (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) x3) (exists X1 ([x4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) x4 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x4) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) x3) y))) (forall X1 ([x4:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) x3) x4)))) ([p5:tm shadowed_3] if_i (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p5) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) y))) (forall X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) x3))) ([q2:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p5)] or_e (@ (list num) form (list_is_nil num) p5) (not (@ (list num) form (list_is_nil num) p5)) (exists X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) y))) (excluded_middle (@ (list num) form (list_is_nil num) p5)) ([q4:pf (@ (list num) form (list_is_nil num) p5)] exists_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) x3 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) y)) V (and_i (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) (forall X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq V) x3 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x4 x5) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x6 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8))))) Eq) V) Sbtrs) p5) x3)) p2 (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq V) x3 equiv @ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x4:tm (eqrel X1)] [x5:tm X1] [x6:tm (list (tree X1))] [x7:tm shadowed_3] [x8:tm X1] @ shadowed_3 form path_valid x7 and if (@ (list num) form (list_is_nil num) x7) (@ X1 form (@ X1 (X1 arrow form) x4 x5) x8) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x7) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x6 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x7)) x8))))) Eq) V) Sbtrs) p5) x3) ([y:tm X1] equiv_i (@ X1 form (@ X1 (shadowed_0 X1) Eq V) y) (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) p5) y) (imp_i (@ X1 form (@ X1 (shadowed_0 X1) Eq V) y) (@ X1 form (@ shadowed_3 (X1 arrow form) (@ (list (tree X1)) (shadowed_3 arrow X1 arrow form) (@ X1 (list (tree X1) arrow shadowed_3 arrow X1 arrow form) (@ (eqrel X1) (X1 arrow list (tree X1) arrow shadowed_3 arrow X1 arrow form) (lam5 (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 form ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7))))) Eq) V) Sbtrs) p5) y) ([q41:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) y)] def5_i (eqrel X1) X1 (list (tree X1)) shadowed_3 X1 ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs p5 y (and_i (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) p5) (if (@ (list num) form (list_is_nil num) p5) (@ X1 form (@ X1 (shadowed_0 X1) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p5) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p5)) y)))) (list_valid_nil' num eq_nat p5 eq_nat_validper q4) (if_i1 (@ (list num) form (list_is_nil num) p5) (@ X1 form (@ X1 (shadowed_0 X1) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p5) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p5)) y))) q4 q41)))) (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) y) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) ([q42:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) y)] if_e1 (@ (list num) form (list_is_nil num) p5) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p5) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p5)) y))) (and_e2 (@ shadowed_3 form path_valid p5) (if (@ (list num) form (list_is_nil num) p5) (@ X1 form (@ X1 (X1 arrow form) Eq V) y) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p5) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) Sbtrs hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) p5)) y)))) (def5_e X1 shadowed_3 (list (tree X1)) X1 (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm X1] [x5:tm (list (tree X1))] [x6:tm shadowed_3] [x7:tm X1] @ shadowed_3 form path_valid x6 and if (@ (list num) form (list_is_nil num) x6) (@ X1 form (@ X1 (X1 arrow form) x3 x4) x7) (forall num ([hd:tm num] @ num form (@ (list num) (shadowed_0 num) (list_hd num) x6) hd imp exists (list num arrow X1 arrow form) ([sbtr:tm (list num arrow X1 arrow form)] @ (list num arrow X1 arrow form) form (@ num ((list num arrow X1 arrow form) arrow form) x5 hd) sbtr and @ X1 form (@ (list num) (X1 arrow form) sbtr (@ (list num) (list num) (list_tl num) x6)) x7)))) Eq V Sbtrs p5 y q42)) q4)))))) ([q5:pf (not (@ (list num) form (list_is_nil num) p5))] exists2_e num (tree X1) ([x3:tm num] [x4:tm (tree X1)] @ num form (@ (list num) (shadowed_0 num) (list_hd num) p5) x3 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) x3) x4 and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) x4) (@ (list num) (list num) (list_tl num) p5)) (exists X1 ([x6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) x6 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x6) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) y))) (tree_valid_path_tl X1 Eq Sbtrs V p5 p3 q2 (list_is_not_nil_i num p5 q5)) ([i1:tm num] [tr:tm (tree X1)] [q51:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) p5) i1 and @ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) i1) tr and @ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) (@ (list num) (list num) (list_tl num) p5))] and3_l (@ num form (@ (list num) (shadowed_0 num) (list_hd num) p5) i1) (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) i1) tr) (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) (@ (list num) (list num) (list_tl num) p5)) (exists X1 ([x7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) x7 and forall X1 ([y:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq x7) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) y))) q51 ([q52:pf (@ num form (@ (list num) (shadowed_0 num) (list_hd num) p5) i1)] [q53:pf (@ (tree X1) form (@ num (tree X1 arrow form) (@ (list (tree X1)) (num arrow tree X1 arrow form) (list_nth (tree X1)) Sbtrs) i1) tr)] [q54:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) tr) (@ (list num) (list num) (list_tl num) p5))] tree_valid_mktree_valid_path X1 Eq Sbtrs p5 V i1 tr p3 q5 q2 q52 q53 q54)))) ([q3:pf (not (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p5))] or_e (@ (list num) form (list_is_nil num) p5) (not (@ (list num) form (list_is_nil num) p5)) (forall X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) x3))) (excluded_middle (@ (list num) form (list_is_nil num) p5)) ([q6:pf (@ (list num) form (list_is_nil num) p5)] forall_i X1 ([x3:tm X1] not (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) x3)) ([y:tm X1] not_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) y) ([q31:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) p5) y)] not_e (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) p5) q3 (tree_mktree_valid_path_nil X1 Eq V p5 Sbtrs p2 q6)))) ([q7:pf (not (@ (list num) form (list_is_nil num) p5))] tree_valid_mktree_not_valid_path X1 Eq V Sbtrs p5 p2 p3 q7 q3))))).
tree_valid_mktree : {X1:tp} {Eq:tm (per X1)} {V:tm X1} {Sbtrs:tm (list (tree X1))} pf (@ (per X1) form (validper X1) Eq) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs) -> pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) Sbtrs) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) = [X1:tp] [Eq:tm (per X1)] [V:tm X1] [Sbtrs:tm (list (tree X1))] [p1:pf (@ (per X1) form (validper X1) Eq)] [p2:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V)] [p3:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) Sbtrs)] [p4:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) Sbtrs)] def2_i (eqrel X1) (tree X1) ([x3:tm (eqrel X1)] [x4:tm (tree X1)] exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) x4) d) and @ (tree X1) form (tree_is_not_empty X1) x4 and @ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) x3) x4) Eq (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs) (and3_i (exists num ([d:tm num] @ num form (@ (tree X1) (shadowed_0 num) (tree_height X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) d)) (@ (tree X1) form (tree_is_not_empty X1) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid_node X1) Eq) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) Sbtrs)) (tree_mktree_finite_height X1 Eq Sbtrs V p3 p4 p2) (tree_mktree_not_empty X1 Eq V Sbtrs p2) (tree_valid_mktree_valid_node X1 Eq V Sbtrs p1 p2 p3)).
tree_mktree_valid_ternary : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} {Tr3:tm (tree X1)} {V:tm X1} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr1) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr2) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr3) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr1) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))))) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [Tr3:tm (tree X1)] [V:tm X1] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr1)] [p2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr2)] [p3:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr3)] [p5:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq V) V)] cut (@ (per X1) form (validper X1) Eq) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr1) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))))) (tree_valid_per X1 Eq Tr1 p1) ([p0:pf (@ (per X1) form (validper X1) Eq)] cut (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1)))) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr1) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))))) (tree_valid_subtrees_cons X1 Eq (list_nil (tree X1)) Tr3 (tree_valid_subtrees_nil X1 Eq (list_nil (tree X1)) p0 (list_is_nil_nil (tree X1))) p3) ([q1:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))] cut (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr1) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))))) (tree_valid_subtrees_cons X1 Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))) Tr2 q1 p2) ([q1':pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_valid_subtrees X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1)))))] cut (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1)))) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr1) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))))) (tree_subtrees_have_finite_heights_cons X1 Eq (list_nil (tree X1)) Tr3 (tree_subtrees_have_finite_heights_nil X1 (list_nil (tree X1)) Eq (list_is_nil_nil (tree X1))) (list_valid_nil (tree X1) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) (tree_eq_validper X1 Eq p0)) p3) ([q2:pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))] cut (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))) (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) (@ (list (tree X1)) (tree X1) (@ X1 (list (tree X1) arrow tree X1) (@ (eqrel X1) (X1 arrow list (tree X1) arrow tree X1) (mktree X1) Eq) V) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr1) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))))) (tree_subtrees_have_finite_heights_cons X1 Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))) Tr2 q2 (tree_valid_subtrees_list_valid X1 Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))) q1) p2) ([q2':pf (@ (list (tree X1)) form (@ (eqrel X1) (list (tree X1) arrow form) (tree_subtrees_have_finite_heights X1) Eq) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1)))))] tree_valid_mktree X1 Eq V (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr1) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1))))) (tree_valid_per X1 Eq Tr1 p1) p5 (tree_valid_subtrees_cons X1 Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1)))) Tr1 q1' p1) (tree_subtrees_have_finite_heights_cons X1 Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1)))) Tr1 q2' (tree_valid_subtrees_list_valid X1 Eq (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr2) (@ (list (tree X1)) (list (tree X1)) (@ (tree X1) (list (tree X1) arrow list (tree X1)) (@ (eqrel (tree X1)) (tree X1 arrow list (tree X1) arrow list (tree X1)) (list_cons (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq)) Tr3) (list_nil (tree X1)))) q1') p1)))))).
tree_root_e : {X1:tp} {Tr:tm (tree X1)} {V:tm X1} {P:tm (list num)} pf (@ X1 form (@ (tree X1) (X1 arrow form) (tree_root X1) Tr) V) -> pf (@ (list num) form (list_is_nil num) P) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr P) V) = [X1:tp] [Tr:tm (tree X1)] [V:tm X1] [P:tm (list num)] [p1:pf (@ X1 form (@ (tree X1) (X1 arrow form) (tree_root X1) Tr) V)] [p2:pf (@ (list num) form (list_is_nil num) P)] imp_e (@ (list num) form (list_is_nil num) P) (@ X1 form (@ (list num) (X1 arrow form) Tr P) V) (forall_e (list num) ([x3:tm (list num)] @ (list num) form (list_is_nil num) x3 imp @ X1 form (@ (list num) (X1 arrow form) Tr x3) V) (def2_e X1 (tree X1) ([x3:tm (tree X1)] [x4:tm X1] forall (list num) ([p3:tm (list num)] @ (list num) form (list_is_nil num) p3 imp @ X1 form (@ (list num) (X1 arrow form) x3 p3) x4)) Tr V p1) P) p2.
tree_eq_i_nth_equiv : {P:tm shadowed_3} {P':tm shadowed_3} {X1:tp} {Eq:tm (X1 arrow X1 arrow form)} {X:tm X1} {X':tm X1} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) P') -> pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X') -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr1) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr2) -> pf (forall2 shadowed_3 X1 ([p1:tm shadowed_3] [y:tm X1] @ shadowed_3 form path_valid p1 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p1) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p1) y)) -> pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') = [P:tm shadowed_3] [P':tm shadowed_3] [X1:tp] [Eq:tm (X1 arrow X1 arrow form)] [X:tm X1] [X':tm X1] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [p1:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) P')] [p2:pf (@ X1 form (@ X1 (X1 arrow form) Eq X) X')] [p3:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr1)] [p4:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr2)] [p5:pf (forall2 shadowed_3 X1 ([p5:tm shadowed_3] [y:tm X1] @ shadowed_3 form path_valid p5 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p5) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p5) y))] cut (@ (per X1) form (validper X1) Eq) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') (tree_valid_per X1 Eq Tr1 p3) ([p30:pf (@ (per X1) form (validper X1) Eq)] equiv_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') ([q1:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) P) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') (tree_valid_path_exists X1 Eq Tr1 P p3 (tree_node_i X1 Tr1 P X q1)) ([q10:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr1) P)] cut (@ shadowed_3 form path_valid P) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') (tree_valid_path->path_valid X1 Tr1 P q10) ([p0:pf (@ shadowed_3 form path_valid P)] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) P') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') (list_eq_valid' num eq_nat P P' p1) ([p01:pf (@ shadowed_3 form path_valid P')] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P) X) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') (equiv_e1 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P) X) (imp_e (@ shadowed_3 form path_valid P) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P) X) (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) p5 P X) p0) q1) ([q11:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P) X)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') (tree_valid_path_congr X1 Eq Tr2 P X P' p4 q11 p1 p01) ([q12:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X)] tree_valid_node_congr' X1 Eq Tr2 P' X X' p4 q12 p2))))))) (imp_i (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X) ([q2:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X')] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) P') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X) (tree_valid_path_exists X1 Eq Tr2 P' p4 (tree_node_i X1 Tr2 P' X' q2)) ([q20:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr2) P')] cut (@ shadowed_3 form path_valid P') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X) (tree_valid_path->path_valid X1 Tr2 P' q20) ([p01:pf (@ shadowed_3 form path_valid P')] cut (@ (list num) form (@ (eqrel num) (list num arrow form) (list_valid num) eq_nat) P) (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X) (list_eq_valid num eq_nat P P' p1) ([p0:pf (@ shadowed_3 form path_valid P)] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P') X') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X) (equiv_e2 (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P') X') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') (imp_e (@ shadowed_3 form path_valid P') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P') X' equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 P') X') (forall2_e shadowed_3 X1 ([x3:tm shadowed_3] [x4:tm X1] @ shadowed_3 form path_valid x3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 x3) x4 equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 x3) x4) p5 P' X') p01) q2) ([q21:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P') X')] cut (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X') (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X) (tree_valid_path_congr X1 Eq Tr1 P' X' P p3 q21 (per_symm shadowed_3 path_eq P P' path_eq_validper p1) p0) ([q22:pf (@ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 P) X')] tree_valid_node_congr' X1 Eq Tr1 P X' X p3 q22 (per_symm X1 Eq X X' p30 p2))))))))).
tree_eq_i_nth_elem_valid : {X1:tp} {Tr:tm (shadowed_3 arrow X1 arrow form)} {P:tm shadowed_3} {X:tm X1} {Eq:tm (eqrel X1)} pf (@ X1 form (@ shadowed_3 (X1 arrow form) Tr P) X) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr) -> pf (@ shadowed_3 form (@ shadowed_3 (shadowed_0 shadowed_3) path_eq P) P and @ X1 form (@ X1 (shadowed_0 X1) Eq X) X) = [X1:tp] [Tr:tm (shadowed_3 arrow X1 arrow form)] [P:tm shadowed_3] [X:tm X1] [Eq:tm (eqrel X1)] [p1:pf (@ X1 form (@ shadowed_3 (X1 arrow form) Tr P) X)] [p2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr)] cut (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P) (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) P) P and @ X1 form (@ X1 (shadowed_0 X1) Eq X) X) (tree_valid_path_exists X1 Eq Tr P p2 (tree_node_i X1 Tr P X p1)) ([q1:pf (@ shadowed_3 form (@ (tree X1) (shadowed_0 shadowed_3) (tree_valid_path X1) Tr) P)] cut (@ shadowed_3 form path_valid P) (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) P) P and @ X1 form (@ X1 (shadowed_0 X1) Eq X) X) (tree_valid_path->path_valid X1 Tr P q1) ([q2:pf (@ shadowed_3 form path_valid P)] and_i (@ (list num) form (@ (list num) (list num arrow form) (@ (eqrel num) (list num arrow list num arrow form) (list_eq num) eq_nat) P) P) (@ X1 form (@ X1 (shadowed_0 X1) Eq X) X) (list_eq_refl num eq_nat P q2) (tree_valid_node_valid X1 Eq Tr P X p2 p1))).
tree_eq_i : {X1:tp} {Eq:tm (eqrel X1)} {Tr1:tm (tree X1)} {Tr2:tm (tree X1)} pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr1) -> pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr2) -> pf (forall2 shadowed_3 X1 ([p1:tm shadowed_3] [y:tm X1] @ shadowed_3 form path_valid p1 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p1) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p1) y)) -> pf (@ (tree X1) form (@ (tree X1) (shadowed_0 (tree X1)) (@ (eqrel X1) (eqrel (tree X1)) (tree_eq X1) Eq) Tr1) Tr2) = [X1:tp] [Eq:tm (eqrel X1)] [Tr1:tm (tree X1)] [Tr2:tm (tree X1)] [p1:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr1)] [p2:pf (@ (tree X1) form (@ (eqrel X1) (shadowed_0 (tree X1)) (tree_valid X1) Eq) Tr2)] [p3:pf (forall2 shadowed_3 X1 ([p3:tm shadowed_3] [y:tm X1] @ shadowed_3 form path_valid p3 imp @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr1 p3) y equiv @ X1 form (@ shadowed_3 (shadowed_0 X1) Tr2 p3) y))] gdef1_i (tree X1 arrow tree X1 arrow form) (eqrel X1) ([x3:tm (eqrel X1)] @ (per X1) (per (rel shadowed_3 X1)) (@ (per shadowed_3) (per X1 arrow per (rel shadowed_3 X1)) (per_rel shadowed_3 X1) path_eq) x3) Eq ([z1:tm (tree X1 arrow tree X1 arrow form)] @ (tree X1) form (@ (tree X1) (tree X1 arrow form) z1 Tr1) Tr2) (per_rel_i shadowed_3 X1 path_eq Eq Tr1 Tr2 ([p4:tm shadowed_3] [p':tm shadowed_3] [x3:tm X1] [x':tm X1] [q11:pf (@ shadowed_3 form (@ shadowed_3 (shadowed_3 arrow form) path_eq p4) p')] [q12:pf (@ X1 form (@ X1 (X1 arrow form) Eq x3) x')] tree_eq_i_nth_equiv p4 p' X1 Eq x3 x' Tr1 Tr2 q11 q12 p1 p2 p3) ([p5:tm shadowed_3] [x4:tm X1] [q2:pf (@ X1 form (@ shadowed_3 (X1 arrow form) Tr1 p5) x4)] tree_eq_i_nth_elem_valid X1 Tr1 p5 x4 Eq q2 p1) ([p6:tm shadowed_3] [x5:tm X1] [q3:pf (@ X1 form (@ shadowed_3 (X1 arrow form) Tr2 p6) x5)] tree_eq_i_nth_elem_valid X1 Tr2 p6 x5 Eq q3 p2)).
congr_mod : tm (rel3 num num num) = lam3 num num num form ([n:tm num] [a:tm num] [b:tm num] exists num ([k:tm num] isInt k and eq num a (plus (times k n) b))).
divide_mod : tm (num arrow num arrow num arrow num arrow form) = lam4 num num num num form ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6).
divide : tm (num arrow num arrow num arrow form) = lam3 num num num form ([n:tm num] [m:tm num] [q:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod n) m) q) r)).
modulo : tm (num arrow num arrow num arrow form) = lam3 num num num form ([n:tm num] [m:tm num] [r:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod n) m) q) r)).
multiple_of : tm (rel num num) = lam2 num num form ([m:tm num] [n:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo m) n) zero).
minus_mod32 : tm (num arrow num arrow num arrow form) = lam3 num num num form ([a:tm num] [b:tm num] [c1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus a b)) pow2_32) c1).
times_mod32 : tm (num arrow num arrow num arrow form) = lam3 num num num form ([a:tm num] [b:tm num] [c1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times a b)) pow2_32) c1).
plus_mod32 : tm (num arrow num arrow num arrow form) = lam3 num num num form ([a:tm num] [b:tm num] [c1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus a b)) pow2_32) c1).
congr_mod_i : {K:tnum} {A:tm num} {N:tnum} {B:tnum} pf (isInt K) -> pf (eq num A (plus (times K N) B)) -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B) = [K:tnum] [A:tm num] [N:tnum] [B:tnum] [p2:pf (isInt K)] [p4:pf (eq num A (plus (times K N) B))] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([k:tm num] isInt k and eq num x4 (plus (times k x3) x5))) N A B (exists_i num ([x3:tm num] isInt x3 and eq num A (plus (times x3 N) B)) K (and_i (isInt K) (eq num A (plus (times K N) B)) p2 p4)).
congr_mod_e : {N:tm num} {A:tm num} {B:tm num} {P:tform} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B) -> ({k:tnum} pf (isInt k) -> pf (eq num A (plus (times k N) B)) -> pf P) -> pf P = [N:tm num] [A:tm num] [B:tm num] [P:tform] [p2:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B)] [p4:{k:tnum} pf (isInt k) -> pf (eq num A (plus (times k N) B)) -> pf P] exists_e num ([x3:tm num] isInt x3 and eq num A (plus (times x3 N) B)) P (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([k:tm num] isInt k and eq num x4 (plus (times k x3) x5))) N A B p2) ([k:tm num] [p6:pf (isInt k and eq num A (plus (times k N) B))] and_l (isInt k) (eq num A (plus (times k N) B)) P p6 ([x3:pf (isInt k)] [x4:pf (eq num A (plus (times k N) B))] p4 k x3 x4)).
congr_mod_refl : {N:tm num} {A:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) A) = [N:tm num] [A:tm num] congr_mod_i zero A N A p_zero (trans num A (+ zero A) (+ (* zero N) A) (symm num (+ zero A) A (zero_plus A)) (plus_cong zero (* zero N) A A (symm num (* zero N) zero (zero_times N)) (refl num A))).
congr_mod_refl' : {A:tm num} {A':tm num} {N:tm num} pf (eq num A A') -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) A') = [A:tm num] [A':tm num] [N:tm num] [p2:pf (eq num A A')] congr_mod_i zero A N A' p_zero (trans num A (+ zero A) (+ (* zero N) A') (symm num (+ zero A) A (zero_plus A)) (plus_cong zero (* zero N) A A' (symm num (* zero N) zero (zero_times N)) p2)).
congr_mod_symm : {N:tm num} {A:tm num} {B:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B) -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) A) = [N:tm num] [A:tm num] [B:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B)] cut (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) A) p2 ([x3:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B)] congr_mod_e N A B (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) A) p2 ([k:tnum] [p4:pf (isInt k)] [p6:pf (eq num A (plus (times k N) B))] cut (== num B (+ (* (neg k) N) A)) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) A) (trans num B (+ (neg (times k N)) A) (+ (* (neg k) N) A) (pf_add_inv_cancel (times k N) B A (symm num A (plus (times k N) B) p6)) (plus_cong (neg (* k N)) (* (neg k) N) A A (symm num (* (neg k) N) (neg (* k N)) (neg_times1 k N)) (refl num A))) ([p10:pf (eq num B (plus (times (neg k) N) A))] congr_mod_i (neg k) B N A (neg_exists k p4) p10))).
congr_mod_trans : {N:tm num} {A:tm num} {B:tm num} {C:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B) -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) C) -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) C) = [N:tm num] [A:tm num] [B:tm num] [C:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B)] [p4:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) C)] cut2 (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) C) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) C) p2 p4 ([x3:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B)] [x4:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) C)] congr_mod_e N A B (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) C) p2 ([k1:tnum] [p6:pf (isInt k1)] [p8:pf (eq num A (plus (times k1 N) B))] congr_mod_e N B C (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) C) p4 ([k2:tnum] [p10:pf (isInt k2)] [p12:pf (eq num B (plus (times k2 N) C))] cut (== num A (+ (* (+ k1 k2) N) C)) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) C) (trans num A (plus (times k1 N) B) (+ (* (+ k1 k2) N) C) p8 (trans num (+ (* k1 N) B) (+ (* k1 N) (plus (times k2 N) C)) (+ (* (+ k1 k2) N) C) (plus_cong (* k1 N) (* k1 N) B (plus (times k2 N) C) (refl num (* k1 N)) p12) (trans num (plus (* k1 N) (plus (* k2 N) C)) (plus (plus (* k1 N) (* k2 N)) C) (+ (* (+ k1 k2) N) C) (symm num (plus (plus (* k1 N) (* k2 N)) C) (plus (* k1 N) (plus (* k2 N) C)) (assoc_add (* k1 N) (* k2 N) C)) (plus_cong (+ (* k1 N) (* k2 N)) (* (+ k1 k2) N) C C (symm num (* (+ k1 k2) N) (+ (* k1 N) (* k2 N)) (distrib_right k1 k2 N)) (refl num C))))) ([p20:pf (eq num A (plus (times (plus k1 k2) N) C))] congr_mod_i (plus k1 k2) A N C (closure_add k1 k2 p6 p10) p20)))).
plus_congr_mod : {N:tm num} {A:tm num} {A':tm num} {B:tm num} {B':tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) A') -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) B') -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) (plus A B)) (plus A' B')) = [N:tm num] [A:tm num] [A':tm num] [B:tm num] [B':tm num] [p2:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) A')] [p4:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) B')] cut2 (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) A') (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) B') (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) (plus A B)) (plus A' B')) p2 p4 ([x3:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) A')] [x4:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) B) B')] congr_mod_e N A A' (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) (plus A B)) (plus A' B')) p2 ([k1:tnum] [p6:pf (isInt k1)] [p8:pf (eq num A (plus (times k1 N) A'))] congr_mod_e N B B' (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) (plus A B)) (plus A' B')) p4 ([k2:tnum] [p10:pf (isInt k2)] [p12:pf (eq num B (plus (times k2 N) B'))] cut (== num (+ A B) (+ (* (+ k1 k2) N) (plus A' B'))) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) (plus A B)) (plus A' B')) (trans num (+ A B) (+ (plus (times k1 N) A') (plus (times k2 N) B')) (+ (* (+ k1 k2) N) (plus A' B')) (plus_cong A (plus (times k1 N) A') B (plus (times k2 N) B') p8 p12) (trans num (plus (+ (* k1 N) A') (plus (* k2 N) B')) (plus (plus (+ (* k1 N) A') (* k2 N)) B') (+ (* (+ k1 k2) N) (plus A' B')) (symm num (plus (plus (+ (* k1 N) A') (* k2 N)) B') (plus (+ (* k1 N) A') (plus (* k2 N) B')) (assoc_add (+ (* k1 N) A') (* k2 N) B')) (trans num (+ (+ (+ (* k1 N) A') (* k2 N)) B') (+ (+ (+ (* k1 N) (* k2 N)) A') B') (+ (* (+ k1 k2) N) (plus A' B')) (plus_cong (+ (+ (* k1 N) A') (* k2 N)) (+ (+ (* k1 N) (* k2 N)) A') B' B' (assoc_symm_add (* k1 N) A' (* k2 N)) (refl num B')) (trans num (plus (plus (+ (* k1 N) (* k2 N)) A') B') (plus (+ (* k1 N) (* k2 N)) (plus A' B')) (+ (* (+ k1 k2) N) (plus A' B')) (assoc_add (+ (* k1 N) (* k2 N)) A' B') (plus_cong (+ (* k1 N) (* k2 N)) (* (+ k1 k2) N) (plus A' B') (plus A' B') (symm num (* (+ k1 k2) N) (+ (* k1 N) (* k2 N)) (distrib_right k1 k2 N)) (refl num (plus A' B'))))))) ([p20:pf (eq num (plus A B) (plus (times (plus k1 k2) N) (plus A' B')))] congr_mod_i (plus k1 k2) (plus A B) N (plus A' B') (closure_add k1 k2 p6 p10) p20)))).
divide_mod->_divide_mod : {M:tm num} {N:tm num} {Q:tm num} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) -> pf (_divide_mod M N Q R) = [M:tm num] [N:tm num] [Q:tm num] [R:tm num] [x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] def4_e num num num num ([x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] _divide_mod x4 x5 x6 x7) M N Q R x3.
divide_mod_i : {N:tm num} {M:tm num} {Q:tm num} {R:tm num} pf (> N zero) -> pf (== num M (+ (* Q N) R)) -> pf (isInt Q) -> pf (>= R zero) -> pf (< R N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) = [N:tm num] [M:tm num] [Q:tm num] [R:tm num] [p1:pf (> N zero)] [p2:pf (== num M (+ (* Q N) R))] [p3:pf (isInt Q)] [p5:pf (>= R zero)] [p6:pf (< R N)] def4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) M N Q R (and5_i (> N zero) (== num M (+ (* Q N) R)) (isInt Q) (>= R zero) (< R N) p1 p2 p3 p5 p6).
divide_mod_e : {M:tm num} {N:tm num} {Q:tm num} {R:tm num} {A:tform} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) -> (pf (> N zero) -> pf (== num M (+ (* Q N) R)) -> pf (isInt Q) -> pf (>= R zero) -> pf (< R N) -> pf A) -> pf A = [M:tm num] [N:tm num] [Q:tm num] [R:tm num] [A:tform] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] [x3:pf (gt N zero) -> pf (eqn M (plus (times Q N) R)) -> pf (isInt Q) -> pf (geq R zero) -> pf (lt R N) -> pf A] and5_l (gt N zero) (eqn M (plus (times Q N) R)) (isInt Q) (geq R zero) (lt R N) A (def4_e num num num num ([x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] _divide_mod x4 x5 x6 x7) M N Q R p2) ([x4:pf (gt N zero)] [x5:pf (eqn M (plus (times Q N) R))] [x6:pf (isInt Q)] [x7:pf (geq R zero)] [x8:pf (lt R N)] x3 x4 x5 x6 x7 x8).
divide_mod_isint1 : {M:tm num} {N:tm num} {Q:tm num} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) -> pf (isInt Q) = [M:tm num] [N:tm num] [Q:tm num] [R:tm num] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] divide_mod_e M N Q R (isInt Q) p3 ([x3:pf (> N zero)] [x4:pf (== num M (+ (* Q N) R))] [p6:pf (isInt Q)] [x5:pf (>= R zero)] [x6:pf (< R N)] p6).
divide_mod_isint2 : {M:tnum} {N:tnum} {Q:tm num} {R:tm num} pf (isInt M) -> pf (isInt N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) -> pf (isInt R) = [M:tnum] [N:tnum] [Q:tm num] [R:tm num] [p1:pf (isInt M)] [p2:pf (isInt N)] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] cut3 (isInt M) (isInt N) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) (isInt R) p1 p2 p3 ([x3:pf (isInt M)] [x4:pf (isInt N)] [x5:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] and4_l (gt N zero) (eqn M (plus (times Q N) R)) (isInt Q) (geq R zero and lt R N) (isInt R) (def4_e num num num num ([x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] _divide_mod x6 x7 x8 x9) M N Q R p3) ([x6:pf (gt N zero)] [p8:pf (eq num M (plus (times Q N) R))] [p10:pf (isInt Q)] [x7:pf (geq R zero and lt R N)] cut (== num R (- M (times Q N))) (isInt R) (symm num (- M (times Q N)) R (eq_swap_a_b+c M R (times Q N) (trans num M (plus (times Q N) R) (plus R (times Q N)) p8 (comm_add (times Q N) R)))) ([p12:pf (eq num R (minus M (times Q N)))] cut (isInt R) (isInt R) (congr num R (minus M (times Q N)) ([u:tm num] isInt u) p12 (closure_minus M (times Q N) p1 (closure_mult Q N p10 p2))) ([p14:pf (isInt R)] p14)))).
divide_mod_isnat_quotient : {M:tnum} {N:tnum} {Q:tm num} {R:tm num} pf (isNat M) -> pf (isNat N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) -> pf (isNat Q) = [M:tnum] [N:tnum] [Q:tm num] [R:tm num] [p2:pf (isNat M)] [p4:pf (isNat N)] [p6:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] cut3 (isNat M) (isNat N) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) (isInt Q and geq Q zero) p2 p4 p6 ([x3:pf (isNat M)] [x4:pf (isNat N)] [x5:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] divide_mod_e M N Q R (isInt Q and geq Q zero) p6 ([p11:pf (gt N zero)] [p12:pf (eq num M (plus (times Q N) R))] [p13:pf (isInt Q)] [p14:pf (geq R zero)] [p15:pf (lt R N)] cut (== num (- M (times Q N)) R) (isInt Q and geq Q zero) (eq_swap_a_b+c M R (times Q N) (congr num (plus R (times Q N)) (plus (times Q N) R) ([x6:tm num] eq num M x6) (comm_add R (times Q N)) p12)) ([p16:pf (eq num (minus M (times Q N)) R)] cut (> (+ N (times Q N)) (+ (minus M (times Q N)) (times Q N))) (isInt Q and geq Q zero) (lt_plus_cong1 N (minus M (times Q N)) (times Q N) (trans_leq_lt (minus M (times Q N)) R N (eq->leq (minus M (times Q N)) R p16) p15)) ([p18:pf (lt (plus (minus M (times Q N)) (times Q N)) (plus N (times Q N)))] cut (< M (plus N (times Q N))) (isInt Q and geq Q zero) (trans_leq_lt M (+ (- M (times Q N)) (times Q N)) (plus N (times Q N)) (eq->leq M (+ (- M (times Q N)) (times Q N)) (symm num (+ (- M (times Q N)) (times Q N)) M (cancel_a-b+b M (times Q N)))) p18) ([p20:pf (lt M (plus N (times Q N)))] cut (== num (plus N (* Q N)) (* (+ Q one) N)) (isInt Q and geq Q zero) (trans num (plus N (* Q N)) (plus (* Q N) N) (* (+ Q one) N) (comm_add N (* Q N)) (factor_right Q N)) ([p22:pf (eq num (plus N (times Q N)) (times (succ Q) N))] cut (< M (times (succ Q) N)) (isInt Q and geq Q zero) (trans_lt_leq M (plus N (times Q N)) (times (succ Q) N) p20 (eq->leq (plus N (times Q N)) (times (succ Q) N) p22)) ([p24:pf (lt M (times (succ Q) N))] cut (geq Q zero) (isInt Q and geq Q zero) (suppose_not (geq Q zero) ([p31:pf (lt Q zero)] cut (<= Q (pred zero)) false (lesseq_minus1_i Q zero p13 p_zero p31) ([p32:pf (leq Q (pred zero))] cut (>= (+ (pred zero) one) (+ Q one)) false (greatereq_plus_cong2 (pred zero) Q one p32) ([p33:pf (leq (succ Q) (succ (pred zero)))] cut (leq (succ Q) zero) false (congr num zero (succ (pred zero)) ([x6:tm num] leq (succ Q) x6) (symm num (succ (pred zero)) zero (succpred zero)) p33) ([p34:pf (leq (succ Q) zero)] cut (<= (* (succ Q) N) zero) false (leq_times_geq_rule (succ Q) N p34 (isNat->geq_zero N p4)) ([p35:pf (leq (times (succ Q) N) zero)] cut (< M zero) false (trans_lt_leq M (times (succ Q) N) zero p24 p35) ([p36:pf (lt M zero)] not_e (geq M zero) p36 (isNat->geq_zero M p2)))))))) ([p40:pf (geq Q zero)] and_i (isInt Q) (geq Q zero) p13 p40)))))))).
divide_mod_isnat_remainder : {M:tnum} {N:tnum} {Q:tm num} {R:tm num} pf (isInt M) -> pf (isNat N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) -> pf (isNat R) = [M:tnum] [N:tnum] [Q:tm num] [R:tm num] [p1:pf (isInt M)] [p2:pf (isNat N)] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] cut (isInt M) (isInt R and geq R zero) p1 ([p1':pf (isInt M)] cut (isNat N) (isInt R and geq R zero) p2 ([p2':pf (isNat N)] divide_mod_e M N Q R (isInt R and geq R zero) p3 ([p11:pf (gt N zero)] [p12:pf (eq num M (plus (times Q N) R))] [p13:pf (isInt Q)] [p14:pf (geq R zero)] [p20:pf (lt R N)] cut (== num (- M (times Q N)) R) (isInt R and geq R zero) (eq_swap_a_b+c M R (times Q N) (congr num (plus R (times Q N)) (plus (times Q N) R) ([x3:tm num] eq num M x3) (comm_add R (times Q N)) p12)) ([p16:pf (eq num (minus M (times Q N)) R)] cut (isInt (- M (times Q N))) (isInt R and geq R zero) (closure_minus M (times Q N) p1 (closure_mult Q N p13 (isNat->isInt N p2))) ([p17:pf (isInt (minus M (times Q N)))] cut (isInt R) (isInt R and geq R zero) (congr num R (minus M (times Q N)) ([x3:tm num] isInt x3) (symm num (minus M (times Q N)) R p16) p17) ([p18:pf (isInt R)] and_i (isInt R) (geq R zero) p18 p14)))))).
divide_mod_nats_e : {M:tnum} {N:tnum} {Q:tm num} {R:tm num} {A:tform} pf (isNat M) -> pf (isNat N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) -> (pf (gt N zero) -> pf (eq num M (plus (times Q N) R)) -> pf (isNat Q) -> pf (isNat R) -> pf (lt R N) -> pf A) -> pf A = [M:tnum] [N:tnum] [Q:tm num] [R:tm num] [A:tform] [p1:pf (isNat M)] [p2:pf (isNat N)] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] [p4:pf (gt N zero) -> pf (eq num M (plus (times Q N) R)) -> pf (isNat Q) -> pf (isNat R) -> pf (lt R N) -> pf A] cut (gt N zero imp eq num M (plus (times Q N) R) imp isNat Q imp isNat R imp lt R N imp A) A (imp5_i (gt N zero) (eq num M (plus (times Q N) R)) (isNat Q) (isNat R) (lt R N) A ([x3:pf (gt N zero)] [x4:pf (eq num M (plus (times Q N) R))] [x5:pf (isNat Q)] [x6:pf (isNat R)] [x7:pf (lt R N)] p4 x3 x4 x5 x6 x7)) ([x3:pf (gt N zero imp eq num M (plus (times Q N) R) imp isNat Q imp isNat R imp lt R N imp A)] divide_mod_e M N Q R A p3 ([p11:pf (gt N zero)] [p12:pf (eq num M (plus (times Q N) R))] [p13:pf (isInt Q)] [p14:pf (geq R zero)] [p18:pf (lt R N)] cut (isNat Q) A (divide_mod_isnat_quotient M N Q R p1 p2 p3) ([p15:pf (isNat Q)] cut (isNat R) A (divide_mod_isnat_remainder M N Q R (isNat->isInt M p1) p2 p3) ([p15a:pf (isNat R)] p4 p11 p12 p15 p15a p18)))).
divide_mod_zero : {A:tnum} pf (gt A zero) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod zero) A) zero) zero) = [A:tnum] [p1:pf (gt A zero)] cut (eq num (plus (* zero A) zero) zero) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod zero) A) zero) zero) (congr num (* zero A) zero ([z1:tm num] eq num (plus z1 zero) zero) (zero_times A) (plus_zero zero)) ([p2:pf (eq num (plus (times zero A) zero) zero)] divide_mod_i A zero zero zero p1 (symm num (plus (times zero A) zero) zero p2) p_zero (eq->geq zero zero (refl num zero)) p1).
divide_mod_inrange : {M:tnum} {N:tnum} {Q:tm num} {R:tm num} pf (isInt M) -> pf (isInt N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) -> pf (@ num form (@ num (shadowed_0 num) inrange N) R) = [M:tnum] [N:tnum] [Q:tm num] [R:tm num] [p2:pf (isInt M)] [p4:pf (isInt N)] [p6:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] divide_mod_e M N Q R (@ num form (@ num (shadowed_0 num) inrange N) R) p6 ([x3:pf (> N zero)] [x4:pf (== num M (+ (* Q N) R))] [x5:pf (isInt Q)] [p10:pf (geq R zero)] [p12:pf (lt R N)] cut (isInt R) (@ num form (@ num (shadowed_0 num) inrange N) R) (divide_mod_isint2 M N Q R p2 p4 p6) ([p14:pf (isInt R)] inrange_i R N p14 p10 p12)).
divide_mod_quotient_is0 : {M:tnum} {N:tnum} pf (geq M zero) -> pf (lt M N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) zero) M) = [M:tnum] [N:tnum] [p1:pf (geq M zero)] [p2:pf (lt M N)] cut (eq num M (plus (* zero N) M)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) zero) M) (congr num (* zero N) zero ([z1:tm num] eq num M (plus z1 M)) (zero_times N) (symm num (+ zero M) M (zero_plus M))) ([p7:pf (eq num M (plus (times zero N) M))] divide_mod_i N M zero M (trans_gt_geq N M zero p2 p1) p7 p_zero p1 p2).
divide_mod_plus : {M1:tm num} {N:tm num} {Q1:tm num} {R1:tm num} {M2:tm num} {Q2:tm num} {R2:tm num} {Q:tm num} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M1) N) Q1) R1) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M2) N) Q2) R2) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus R1 R2)) N) Q) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus M1 M2)) N) (plus (plus Q1 Q2) Q)) R) = [M1:tm num] [N:tm num] [Q1:tm num] [R1:tm num] [M2:tm num] [Q2:tm num] [R2:tm num] [Q:tm num] [R:tm num] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M1) N) Q1) R1)] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M2) N) Q2) R2)] [p6:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus R1 R2)) N) Q) R)] cut3 (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M1) N) Q1) R1) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M2) N) Q2) R2) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus R1 R2)) N) Q) R) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus M1 M2)) N) (plus (plus Q1 Q2) Q)) R) p2 p4 p6 ([x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M1) N) Q1) R1)] [x4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M2) N) Q2) R2)] [x5:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus R1 R2)) N) Q) R)] divide_mod_e M1 N Q1 R1 (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus M1 M2)) N) (plus (plus Q1 Q2) Q)) R) p2 ([p8:pf (gt N zero)] [p10:pf (eq num M1 (plus (times Q1 N) R1))] [p12:pf (isInt Q1)] [p14:pf (geq R1 zero)] [p16:pf (lt R1 N)] divide_mod_e M2 N Q2 R2 (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus M1 M2)) N) (plus (plus Q1 Q2) Q)) R) p4 ([p20:pf (gt N zero)] [p22:pf (eq num M2 (plus (times Q2 N) R2))] [p24:pf (isInt Q2)] [p26:pf (geq R2 zero)] [p28:pf (lt R2 N)] divide_mod_e (plus R1 R2) N Q R (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus M1 M2)) N) (plus (plus Q1 Q2) Q)) R) p6 ([p30:pf (gt N zero)] [p32:pf (eq num (plus R1 R2) (plus (times Q N) R))] [p34:pf (isInt Q)] [p36:pf (geq R zero)] [p38:pf (lt R N)] cut (== num (+ M1 M2) (+ (* (+ Q1 Q2) N) (plus R1 R2))) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus M1 M2)) N) (plus (plus Q1 Q2) Q)) R) (trans num (+ M1 M2) (+ (plus (times Q1 N) R1) (plus (times Q2 N) R2)) (+ (* (+ Q1 Q2) N) (plus R1 R2)) (plus_cong M1 (plus (times Q1 N) R1) M2 (plus (times Q2 N) R2) p10 p22) (trans num (plus (+ (* Q1 N) R1) (plus (* Q2 N) R2)) (plus (plus (+ (* Q1 N) R1) (* Q2 N)) R2) (+ (* (+ Q1 Q2) N) (plus R1 R2)) (symm num (plus (plus (+ (* Q1 N) R1) (* Q2 N)) R2) (plus (+ (* Q1 N) R1) (plus (* Q2 N) R2)) (assoc_add (+ (* Q1 N) R1) (* Q2 N) R2)) (trans num (+ (+ (+ (* Q1 N) R1) (* Q2 N)) R2) (+ (+ (+ (* Q1 N) (* Q2 N)) R1) R2) (+ (* (+ Q1 Q2) N) (plus R1 R2)) (plus_cong (+ (+ (* Q1 N) R1) (* Q2 N)) (+ (+ (* Q1 N) (* Q2 N)) R1) R2 R2 (assoc_symm_add (* Q1 N) R1 (* Q2 N)) (refl num R2)) (trans num (plus (plus (+ (* Q1 N) (* Q2 N)) R1) R2) (plus (+ (* Q1 N) (* Q2 N)) (plus R1 R2)) (+ (* (+ Q1 Q2) N) (plus R1 R2)) (assoc_add (+ (* Q1 N) (* Q2 N)) R1 R2) (plus_cong (+ (* Q1 N) (* Q2 N)) (* (+ Q1 Q2) N) (plus R1 R2) (plus R1 R2) (symm num (* (+ Q1 Q2) N) (+ (* Q1 N) (* Q2 N)) (distrib_right Q1 Q2 N)) (refl num (plus R1 R2))))))) ([p40:pf (eq num (plus M1 M2) (plus (times (plus Q1 Q2) N) (plus R1 R2)))] cut (== num (plus M1 M2) (+ (* (+ (plus Q1 Q2) Q) N) R)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus M1 M2)) N) (plus (plus Q1 Q2) Q)) R) (trans num (plus M1 M2) (plus (times (plus Q1 Q2) N) (plus R1 R2)) (+ (* (+ (plus Q1 Q2) Q) N) R) p40 (trans num (+ (* (plus Q1 Q2) N) (plus R1 R2)) (+ (* (plus Q1 Q2) N) (plus (times Q N) R)) (+ (* (+ (plus Q1 Q2) Q) N) R) (plus_cong (* (plus Q1 Q2) N) (* (plus Q1 Q2) N) (plus R1 R2) (plus (times Q N) R) (refl num (* (plus Q1 Q2) N)) p32) (trans num (plus (* (plus Q1 Q2) N) (plus (* Q N) R)) (plus (plus (* (plus Q1 Q2) N) (* Q N)) R) (+ (* (+ (plus Q1 Q2) Q) N) R) (symm num (plus (plus (* (plus Q1 Q2) N) (* Q N)) R) (plus (* (plus Q1 Q2) N) (plus (* Q N) R)) (assoc_add (* (plus Q1 Q2) N) (* Q N) R)) (plus_cong (+ (* (plus Q1 Q2) N) (* Q N)) (* (+ (plus Q1 Q2) Q) N) R R (symm num (* (+ (plus Q1 Q2) Q) N) (+ (* (plus Q1 Q2) N) (* Q N)) (distrib_right (plus Q1 Q2) Q N)) (refl num R))))) ([p50:pf (eq num (plus M1 M2) (plus (times (plus (plus Q1 Q2) Q) N) R))] cut (isInt (plus (plus Q1 Q2) Q)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus M1 M2)) N) (plus (plus Q1 Q2) Q)) R) (closure_add (plus Q1 Q2) Q (closure_add Q1 Q2 p12 p24) p34) ([p52:pf (isInt (plus (plus Q1 Q2) Q))] divide_mod_i N (plus M1 M2) (plus (plus Q1 Q2) Q) R p8 p50 p52 p36 p38))))))).
#parfun_lemma1 : {q:tm num} {q':tm num} {r:tm num} {r':tm num} {n:tm num} algebra_solver (== num (+ (* q n) r) (+ (* q' n) r') imp == num (- r r') (* (+ (neg q) q') n)) = [q:tm num] [q':tm num] [r:tm num] [r':tm num] [n:tm num] solver_eq (+ (* q n) r) (* (+ (neg q) q') n) (- r r') (+ (* q' n) r') (solver_rearrange (+ (+ (+ zero (* (* one q) n)) (* one r)) (* (* one n) q')) (+ zero (* (* one n) q)) (+ (+ (+ zero (* one r)) (* (* one q') n)) (* one r')) (+ zero (* one r')) (+ (- r r') (+ (* q' n) r')) (+ (+ (* q n) r) (* (+ (neg q) q') n)) (rearr_any1 (+ (+ zero (* one r)) (* (* one n) q')) (+ (+ (+ zero (* one r)) (* (* one q') n)) (* one r')) zero (+ zero (* one r')) (+ (+ (+ zero (* (* one q) n)) (* one r)) (* (* one n) q')) (+ zero (* (* one n) q)) (rearr_two (+ zero (* one r)) (+ zero (* one r)) zero (+ (+ zero (* one r)) (* (* one n) q')) (+ (+ zero (* one r)) (* (* one q') n)) (+ (+ (+ zero (* one r)) (* (* one q') n)) (* one r')) (+ zero (* one r')) (rearr_end zero zero (+ zero (* one r)) (+ zero (* one r)) rearr_finish (trim_get zero (* one r) zero)) (trim_getmult (* (* one n) q') (* (* one q') n) (+ zero (* one r)) (+ zero (* one r)) (fam_swap (* (* one n) q') (* one q') one n nomatch (fam_step (* one n) one (* one n) q' nomatch (fam_one (* one n) (* one n) (fam_step one one one n nomatch (fam_finish match)))))) (trim_get (+ (+ zero (* one r)) (* (* one q') n)) (* one r') zero)) (trim_step1 (+ (+ zero (* (* one q) n)) (* one r)) (+ zero (* (* one n) q)) (+ zero (* one r)) zero (* (* one n) q') (trim_step1 (+ zero (* (* one q) n)) (+ zero (* (* one n) q)) zero zero (* one r) (trim_getmult (* (* one q) n) (* (* one n) q) zero zero (fam_swap (* (* one q) n) (* one n) one q nomatch (fam_step (* one q) one (* one q) n nomatch (fam_one (* one q) (* one q) (fam_step one one one q nomatch (fam_finish match))))))))) (listify_imp (+ (- r r') (+ (* q' n) r')) (+ (+ (+ zero (* one r)) (* (* one q') n)) (* one r')) (+ zero (* one r')) (plusify_swap zero (- r r') (+ (* q' n) r') (+ (+ (+ zero (* one r)) (* (* one q') n)) (* one r')) (+ zero (* one r')) (plusify_swap (+ zero (- r r')) (* q' n) r' (+ (+ (+ zero (* one r)) (* (* one q') n)) (* one r')) (+ zero (* one r')) (plusify_step (+ (+ zero (- r r')) (* q' n)) (+ (+ zero (* one r)) (* (* one q') n)) (+ zero (* one r')) r' (plusify_step_mult (+ zero (- r r')) q' n (* (* one q') n) one one (+ (+ zero (* one r)) (* (* one q') n)) (+ zero (* one r')) (catch_one (+ zero (- r r')) (+ zero (* one r)) (+ zero (* one r')) (* q' n) (* (* one q') n) (plusify_swap zero r (neg r') (+ zero (* one r)) (+ zero (* one r')) (plusify_step_neg (+ zero r) (+ zero (* one r)) zero r' (plusify_step zero zero zero r plusify_zero)))) (timesify_step (* one q') (* one q') one one n (timesify_step one one one one q' timesify_end_one))))))) (listify_imp (+ (+ (* q n) r) (* (+ (neg q) q') n)) (+ (+ (+ zero (* (* one q) n)) (* one r)) (* (* one n) q')) (+ zero (* (* one n) q)) (plusify_swap zero (+ (* q n) r) (* (+ (neg q) q') n) (+ (+ (+ zero (* (* one q) n)) (* one r)) (* (* one n) q')) (+ zero (* (* one n) q)) (plusify_step_mult (+ zero (+ (* q n) r)) (+ (neg q) q') n (* one n) (+ (neg q) q') one (+ (+ (+ zero (* (* one q) n)) (* one r)) (* (* one n) q')) (+ zero (* (* one n) q)) (catch_break (+ zero (+ (* q n) r)) (* one n) (neg q) q' (+ (+ (+ zero (* (* one q) n)) (* one r)) (* (* one n) q')) (+ zero (* (* one n) q)) (* (+ (neg q) q') n) (plusify_step_mult (+ (+ zero (+ (* q n) r)) (* (* one n) (neg q))) (* one n) q' (* (* one n) q') one one (+ (+ (+ zero (* (* one q) n)) (* one r)) (* (* one n) q')) (+ zero (* (* one n) q)) (catch_one (+ (+ zero (+ (* q n) r)) (* (* one n) (neg q))) (+ (+ zero (* (* one q) n)) (* one r)) (+ zero (* (* one n) q)) (* (* one n) q') (* (* one n) q') (plusify_step_mult (+ zero (+ (* q n) r)) (* one n) (neg q) (* (* one n) q) one (neg one) (+ (+ zero (* (* one q) n)) (* one r)) (+ zero (* (* one n) q)) (catch_neg2 (+ zero (+ (* q n) r)) (* (* one n) (neg q)) (* (* one n) q) one one (+ (+ zero (* (* one q) n)) (* one r)) (+ zero (* (* one n) q)) (catch_neg_one (+ zero (+ (* q n) r)) (+ (+ zero (* (* one q) n)) (* one r)) zero (* (* one n) (neg q)) (* (* one n) q) (plusify_swap zero (* q n) r (+ (+ zero (* (* one q) n)) (* one r)) zero (plusify_step (+ zero (* q n)) (+ zero (* (* one q) n)) zero r (plusify_step_mult zero q n (* (* one q) n) one one (+ zero (* (* one q) n)) zero (catch_one zero zero zero (* q n) (* (* one q) n) plusify_zero) (timesify_step (* one q) (* one q) one one n (timesify_step one one one one q timesify_end_one))))))) (timesify_neg (* one (* one n)) q (* (* one n) q) one one (timesify_step (* one (* one n)) (* one n) one one q (timesify_swap one one n (* one n) one one (timesify_step (* one one) one one one n (timesify_remove one one one one timesify_end_one))))))) (timesify_step (* one (* one n)) (* one n) one one q' (timesify_swap one one n (* one n) one one (timesify_step (* one one) one one one n (timesify_remove one one one one timesify_end_one)))))) (timesify_step (* one (+ (neg q) q')) one (+ (neg q) q') one n (timesify_end_plus one (neg q) q')))))).
parfun_lemma1 : {M:tm num} {Q:tm num} {N:tm num} {R:tm num} {Q':tm num} {R':tm num} pf (== num M (+ (* Q N) R)) -> pf (== num M (+ (* Q' N) R')) -> pf (== num (- R R') (* (+ (neg Q) Q') N)) = [M:tm num] [Q:tm num] [N:tm num] [R:tm num] [Q':tm num] [R':tm num] [p1:pf (== num M (+ (* Q N) R))] [p2:pf (== num M (+ (* Q' N) R'))] imp_e (== num (+ (* Q N) R) (+ (* Q' N) R')) (== num (- R R') (* (+ (neg Q) Q') N)) (#parfun_lemma1 Q Q' R R' N) (trans num (+ (* Q N) R) M (+ (* Q' N) R') (symm num M (+ (* Q N) R) p1) p2).
parfun_lemma2 : {N:tm num} {K:tm num} pf (isInt K) -> pf (> N zero) -> pf (< (* (neg one) N) (* K N) and < (* K N) (* one N)) -> pf (eq num K zero) = [N:tm num] [K:tm num] [p1:pf (isInt K)] [p2:pf (gt N zero)] [p3:pf (lt (times (neg one) N) (times K N) and lt (times K N) (times one N))] ord_antisymmetry K zero (greatereq_cong K K (+ (neg one) one) zero (refl num K) (symm num zero (+ (neg one) one) (inv_add1 one)) (greatereq_plus1_i K (neg one) p1 (neg_exists one p_one) (gt_cancel N K (neg one) p2 (gt_cong (times K N) (times N K) (times (neg one) N) (times N (neg one)) (comm_mult K N) (comm_mult (neg one) N) (and_e1 (lt (times (neg one) N) (times K N)) (lt (times K N) (times one N)) p3))))) (ord_add_closure_e zero one K (greatereq_cong one (+ zero one) (succ K) (succ K) (symm num (+ zero one) one (zero_plus one)) (refl num (succ K)) (greatereq_plus1_i one K p_one p1 (gt_cancel N one K p2 (gt_cong (times one N) (times N one) (times K N) (times N K) (comm_mult one N) (comm_mult K N) (and_e2 (lt (times (neg one) N) (times K N)) (lt (times K N) (times one N)) p3)))))).
parfun_lemma3a : {R:tm num} {R':tm num} {N:tm num} pf (>= R zero and < R N) -> pf (>= R' zero and < R' N) -> pf (< (* (neg one) N) (- R R') and < (- R R') (* one N)) = [R:tm num] [R':tm num] [N:tm num] [p1:pf (geq R zero and lt R N)] [p2:pf (geq R' zero and lt R' N)] and_i (> (+ R (neg R')) (* (neg one) N)) (> (* one N) (+ R (neg R'))) (trans_gt_geq (+ R (neg R')) (+ R (neg N)) (* (neg one) N) (gt_plus_cong2 (neg R') (neg N) R (neg_prop' N R' (and_e2 (geq R' zero) (lt R' N) p2))) (greatereq_cong (plus R (neg N)) (plus R (neg N)) (+ zero (neg N)) (* (neg one) N) (refl num (plus R (neg N))) (trans num (+ zero (neg N)) (neg N) (* (neg one) N) (zero_plus (neg N)) (trans num (neg N) (neg (* one N)) (* (neg one) N) (neg_cong N (* one N) (symm num (* one N) N (one_times N))) (symm num (* (neg one) N) (neg (* one N)) (neg_times1 one N)))) (ord_add_closure R zero (neg N) (and_e1 (geq R zero) (lt R N) p1)))) (trans_gt_geq (* one N) (+ R zero) (+ R (neg R')) (gt_cong (+ N zero) (* one N) (+ R zero) (+ R zero) (trans num (+ N zero) N (* one N) (plus_zero N) (symm num (* one N) N (one_times N))) (refl num (+ R zero)) (gt_plus_cong1 N R zero (and_e2 (geq R zero) (lt R N) p1))) (greatereq_plus_cong zero (neg R') R (neg_property1 R' (and_e1 (geq R' zero) (lt R' N) p2)))).
parfun_divide_mod : pf (parfun2_2 num num num num divide_mod) = forall6_i num num num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) x7 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x6) x8 imp == num x5 x6 and == num x7 x8) ([m:tm num] [n:tm num] [q:tm num] [q':tm num] [r:tm num] [r':tm num] imp2_i (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q) r) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q') r') (== num q q' and == num r r') ([p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q) r)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q') r')] and5_l (gt n zero) (eqn m (plus (times q n) r)) (isInt q) (geq r zero) (lt r n) (== num q q' and == num r r') (def4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) m n q r p1) ([pn:pf (gt n zero)] [p1_2:pf (eq num m (plus (times q n) r))] [p1_3:pf (isInt q)] [p1_4:pf (geq r zero)] [p1_5:pf (lt r n)] and5_l (gt n zero) (eqn m (plus (times q' n) r')) (isInt q') (geq r' zero) (lt r' n) (== num q q' and == num r r') (def4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) m n q' r' p2) ([p2_1:pf (gt n zero)] [p2_2:pf (eq num m (plus (times q' n) r'))] [p2_3:pf (isInt q')] [p2_4:pf (geq r' zero)] [p2_5:pf (lt r' n)] cut (eq num (plus (neg q) q') zero) (== num q q' and == num r r') (parfun_lemma2 n (plus (neg q) q') (closure_add (neg q) q' (neg_exists q p1_3) p2_3) pn (congr num (* (+ (neg q) q') n) (- r r') ([z1:tm num] lt (times (neg one) n) z1 and lt z1 (times one n)) (symm num (- r r') (* (+ (neg q) q') n) (parfun_lemma1 m q n r q' r' p1_2 p2_2)) (parfun_lemma3a r r' n (and_i (geq r zero) (lt r n) p1_4 p1_5) (and_i (geq r' zero) (lt r' n) p2_4 p2_5)))) ([p3:pf (eq num (plus (neg q) q') zero)] and_i (== num q q') (== num r r') (symm num q' q (trans num q' (+ (neg (neg q)) zero) q (pf_add_inv_cancel (neg q) q' zero p3) (trans num (+ (neg (neg q)) zero) (+ q zero) q (plus_cong (neg (neg q)) q zero zero (neg_neg_a_eq_a q) (refl num zero)) (plus_zero q)))) (trans num r (+ (neg (neg r')) zero) r' (pf_add_inv_cancel (neg r') r zero (trans num (plus (neg r') r) (plus r (neg r')) zero (comm_add (neg r') r) (trans num (- r r') (* (+ (neg q) q') n) zero (parfun_lemma1 m q n r q' r' p1_2 p2_2) (trans num (* (plus (neg q) q') n) (* zero n) zero (times_cong (plus (neg q) q') zero n n p3 (refl num n)) (zero_times n))))) (trans num (+ (neg (neg r')) zero) (+ r' zero) r' (plus_cong (neg (neg r')) r' zero zero (neg_neg_a_eq_a r') (refl num zero)) (plus_zero r')))))))).
divide_mod_exists : {M:tnum} {N:tnum} pf (isNat M) -> pf (isNat N) -> pf (neq num N zero) -> pf (exists2 num num ([q:tm num] [r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) q) r)) = [M:tnum] [N:tnum] [p1:pf (isNat M)] [p2:pf (isNat N)] [p3:pf (neq num N zero)] cut (> N zero) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (neq->geq->gt N zero p3 (isNat->geq_zero N p2)) ([p4:pf (gt N zero)] cut (eq num (times (succ M) N) (plus (times M N) N)) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num N (* one N) ([z1:tm num] eq num (times (succ M) N) (plus (times M N) z1)) (symm num (* one N) N (one_times N)) (distrib_right M one N)) ([p6:pf (eq num (times (succ M) N) (plus (times M N) N))] cut (>= N (shadowed_2 1)) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (trans_geq N (succ zero) (shadowed_2 1) (greatereq_plus1_i N zero (isNat->isInt N p2) p_zero p4) (eq->geq (+ (shadowed_2 0) (shadowed_2 1)) (shadowed_2 1) (eval_plus 0 1 1 0+1))) ([p7a:pf (geq N one)] cut (>= (* N M) (* one M)) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (geq_times_pos0 N one M p7a (isNat->geq_zero M p1)) ([p7b:pf (geq (times N M) (times one M))] cut (>= (times M N) M) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (trans_geq (times M N) (times N M) M (eq->geq (times M N) (times N M) (comm_mult M N)) (trans_geq (times N M) (times one M) M p7b (eq->geq (* one M) M (one_times M)))) ([p7:pf (geq (times M N) M)] cut (gt (plus (times M N) N) M) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num M (+ M zero) ([z2:tm num] gt (plus (times M N) N) z2) (symm num (+ M zero) M (plus_zero M)) (geq_gt_plus (times M N) M N zero p7 p4)) ([p9:pf (gt (plus (times M N) N) M)] cut (> (times (succ M) N) M) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (trans_geq_gt (times (succ M) N) (plus (times M N) N) M (eq->geq (times (succ M) N) (plus (times M N) N) p6) p9) ([p11:pf (gt (times (succ M) N) M)] exists_e num ([x3:tm num] isNat x3 and gt (times (succ x3) N) M and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (gt (times (succ j) N) M))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (leastn M ([q:tnum] gt (times (succ q) N) M) p1 p11) ([q:tm num] [p12:pf (isNat q and gt (times (succ q) N) M and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange q) j imp not (gt (times (succ j) N) M)))] and3_l (isNat q) (gt (times (succ q) N) M) (forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange q) j imp not (gt (times (succ j) N) M))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) p12 ([p12a:pf (isNat q)] [p13:pf (gt (times (succ q) N) M)] [p14:pf (forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange q) j imp not (gt (times (succ j) N) M)))] cut (not (not (leq (times (succ (pred q)) N) M))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (or_e (eq num q zero) (not (eq num q zero)) (not (not (leq (times (succ (pred q)) N) M))) (excluded_middle (eq num q zero)) ([p15:pf (eq num q zero)] cut (eq num (succ (pred q)) zero) (not (not (leq (times (succ (pred q)) N) M))) (congr num (succ (pred q)) q ([z3:tm num] eq num z3 zero) (succpred q) p15) ([p15a:pf (eq num (succ (pred q)) zero)] cut (eq num (times (succ (pred q)) N) zero) (not (not (leq (times (succ (pred q)) N) M))) (congr num (succ (pred q)) zero ([z4:tm num] eq num (times z4 N) zero) p15a (zero_times N)) ([p15b:pf (eq num (times (succ (pred q)) N) zero)] cut (geq M (times (succ (pred q)) N)) (not (not (leq (times (succ (pred q)) N) M))) (congr num (times (succ (pred q)) N) zero ([x3:tm num] geq M x3) p15b (isNat->geq_zero M p1)) ([p5:pf (leq (times (succ (pred q)) N) M)] not_not_i (leq (times (succ (pred q)) N) M) p5)))) ([p20:pf (neq num q zero)] cut (@ num form (@ num (shadowed_0 num) inrange q) (pred q)) (not (gt (times (succ (pred q)) N) M)) (inrange_pred_n q p12a (neq->geq->gt q zero p20 (isNat->geq_zero q p12a))) ([p21:pf (@ num form (@ num (shadowed_0 num) inrange q) (pred q))] forall_imp_e num ([a:tm num] @ num form (@ num (shadowed_0 num) inrange q) a) ([a:tm num] not (gt (times (succ a) N) M)) p14 (pred q) p21))) ([p25:pf (not (gt (times (succ (pred q)) N) M))] cut (leq (times q N) M) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num q (succ (pred q)) ([z5:tm num] leq (times z5 N) M) (symm num (succ (pred q)) q (succpred q)) (not_not_e (geq M (times (succ (pred q)) N)) p25)) ([p26:pf (leq (times q N) M)] cut (== num M (plus (times q N) (- M (times q N)))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (symm num (plus (times q N) (- M (times q N))) M (trans num (plus (times q N) (- M (times q N))) (plus (- M (times q N)) (times q N)) M (comm_add (times q N) (- M (times q N))) (cancel_a-b+b M (times q N)))) ([p32:pf (eq num M (plus (times q N) (minus M (times q N))))] cut (isInt q) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (isNat->isInt q p12a) ([p33:pf (isInt q)] cut (>= (- M (times q N)) zero) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (geqzero1 M (times q N) p26) ([p35:pf (geq (minus M (times q N)) zero)] cut (eq num (times (succ q) N) (plus (times q N) N)) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num N (* one N) ([z6:tm num] eq num (times (succ q) N) (plus (times q N) z6)) (symm num (* one N) N (one_times N)) (distrib_right q one N)) ([p36:pf (eq num (times (succ q) N) (plus (times q N) N))] cut (> (+ (plus (times q N) N) (neg (times q N))) (+ M (neg (times q N)))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (lt_plus_cong1 (plus (times q N) N) M (neg (times q N)) (trans_lt_leq M (times (succ q) N) (plus (times q N) N) p13 (eq->leq (times (succ q) N) (plus (times q N) N) p36))) ([p37:pf (lt (minus M (times q N)) (minus (plus (times q N) N) (times q N)))] cut (eq num (minus (plus (times q N) N) (times q N)) N) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num (plus (times q N) N) (plus N (times q N)) ([z7:tm num] eq num (minus z7 (times q N)) N) (comm_add (times q N) N) (cancel_a+b-b N (times q N))) ([p38:pf (eq num (minus (plus (times q N) N) (times q N)) N)] cut (< (minus M (times q N)) N) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (trans_lt_leq (minus M (times q N)) (minus (plus (times q N) N) (times q N)) N p37 (eq->leq (minus (plus (times q N) N) (times q N)) N p38)) ([p46:pf (lt (minus M (times q N)) N)] exists2_i num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4) q (minus M (times q N)) (divide_mod_i N M q (minus M (times q N)) p4 p32 p33 p35 p46))))))))))))))))))).
divide_mod_exists' : {M:tnum} {N:tnum} pf (isInt M) -> pf (isNat N) -> pf (neq num N zero) -> pf (exists2 num num ([q:tm num] [r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) q) r)) = [M:tnum] [N:tnum] [p1:pf (isInt M)] [p2:pf (isNat N)] [p3:pf (neq num N zero)] or_e (geq M zero) (not (geq M zero)) (exists2 num num ([q:tm num] [r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) q) r)) (ord_excluded_middle M zero) ([p7:pf (geq M zero)] divide_mod_exists M N (isNat_i M p1 p7) p2 p3) ([p11:pf (lt M zero)] cut (isInt (pred (neg M))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (isInt_pred_i (neg M) (neg_exists M p1)) ([p12:pf (isInt (pred (neg M)))] cut (<= zero (pred (neg M))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (lesseq_minus1_i zero (neg M) p_zero (neg_exists M p1) (neg_property2b M p11)) ([p13:pf (geq (pred (neg M)) zero)] exists2_e num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (pred (neg M))) N) x3) x4) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (divide_mod_exists (pred (neg M)) N (isNat_i (pred (neg M)) p12 p13) p2 p3) ([q:tm num] [r:tm num] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (pred (neg M))) N) q) r)] and5_l (gt N zero) (eqn (pred (neg M)) (plus (times q N) r)) (isInt q) (geq r zero) (lt r N) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (def4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) (pred (neg M)) N q r p4) ([p15:pf (gt N zero)] [p16:pf (eq num (pred (neg M)) (plus (times q N) r))] [p17:pf (isInt q)] [p18:pf (geq r zero)] [p19:pf (lt r N)] cut (== num M (neg (+ (plus (times q N) r) one))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (trans num M (neg (neg M)) (neg (+ (plus (times q N) r) one)) (symm num (neg (neg M)) M (neg_neg_a_eq_a M)) (neg_cong (neg M) (+ (plus (times q N) r) one) (pf_minus_cancel' (neg M) one (plus (times q N) r) p16))) ([p21:pf (eq num M (neg (succ (plus (times q N) r))))] cut (eq num (neg (succ (plus (times q N) r))) (pred (+ (neg (times q N)) (neg r)))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num (+ (neg (times q N)) (neg r)) (neg (+ (times q N) r)) ([z1:tm num] eq num (neg (succ (plus (times q N) r))) (pred z1)) (symm num (neg (+ (times q N) r)) (+ (neg (times q N)) (neg r)) (pf_neg_sum_sum_negs (times q N) r)) (pf_neg_sum_sum_negs (plus (times q N) r) one)) ([p23:pf (eq num (neg (succ (plus (times q N) r))) (pred (plus (neg (times q N)) (neg r))))] cut (eq num M (pred (plus (* (neg q) N) (neg r)))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num (* (neg q) N) (neg (* q N)) ([z2:tm num] eq num M (pred (plus z2 (neg r)))) (neg_times1 q N) (trans num M (neg (succ (plus (times q N) r))) (pred (plus (neg (times q N)) (neg r))) p21 p23)) ([p24:pf (eq num M (pred (plus (times (neg q) N) (neg r))))] cut (eq num M (pred (plus (times (succ (pred (neg q))) N) (neg r)))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num (succ (pred (neg q))) (neg q) ([z3:tm num] eq num M (pred (plus (times z3 N) (neg r)))) (succpred (neg q)) p24) ([p25:pf (eq num M (pred (plus (times (succ (pred (neg q))) N) (neg r))))] cut (eq num M (pred (plus (+ (* (pred (neg q)) N) (* one N)) (neg r)))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num (+ (* (pred (neg q)) N) (* one N)) (* (+ (pred (neg q)) one) N) ([z4:tm num] eq num M (pred (plus z4 (neg r)))) (symm num (* (+ (pred (neg q)) one) N) (+ (* (pred (neg q)) N) (* one N)) (distrib_right (pred (neg q)) one N)) p25) ([p26:pf (eq num M (pred (plus (plus (times (pred (neg q)) N) (times one N)) (neg r))))] cut (eq num M (pred (plus (plus (times (pred (neg q)) N) N) (neg r)))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num N (* one N) ([z5:tm num] eq num M (pred (plus (plus (times (pred (neg q)) N) z5) (neg r)))) (symm num (* one N) N (one_times N)) p26) ([p27:pf (eq num M (pred (plus (plus (times (pred (neg q)) N) N) (neg r))))] cut (eq num M (pred (plus (times (pred (neg q)) N) (plus N (neg r))))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num (plus (times (pred (neg q)) N) (plus N (neg r))) (plus (plus (times (pred (neg q)) N) N) (neg r)) ([z6:tm num] eq num M (pred z6)) (symm num (plus (plus (times (pred (neg q)) N) N) (neg r)) (plus (times (pred (neg q)) N) (plus N (neg r))) (assoc_add (times (pred (neg q)) N) N (neg r))) p27) ([p28:pf (eq num M (pred (plus (times (pred (neg q)) N) (minus N r))))] cut (== num M (+ (times (pred (neg q)) N) (+ (minus N r) (neg one)))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (symm num (+ (times (pred (neg q)) N) (+ (minus N r) (neg one))) M (pf_assoc_add1 (times (pred (neg q)) N) (minus N r) (neg one) M (symm num M (pred (plus (times (pred (neg q)) N) (minus N r))) p28))) ([p30:pf (eq num M (plus (times (pred (neg q)) N) (pred (minus N r))))] cut (isInt (pred (neg q))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (isInt_pred_i (neg q) (neg_exists q p17)) ([p35:pf (isInt (pred (neg q)))] cut (== num (- (pred (neg M)) (times q N)) r) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (eq_swap_a_b+c (pred (neg M)) r (times q N) (trans num (pred (neg M)) (plus (times q N) r) (plus r (times q N)) p16 (comm_add (times q N) r))) ([p36:pf (eq num (minus (pred (neg M)) (times q N)) r)] cut (isInt (plus (pred (neg M)) (neg (times q N)))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (closure_add (pred (neg M)) (neg (times q N)) p12 (neg_exists (times q N) (closure_mult q N p17 (isNat->isInt N p2)))) ([p37:pf (isInt (minus (pred (neg M)) (times q N)))] cut (isInt r) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (congr num r (minus (pred (neg M)) (times q N)) ([x3:tm num] isInt x3) (symm num (minus (pred (neg M)) (times q N)) r p36) p37) ([p38:pf (isInt r)] cut (<= zero (pred (plus N (neg r)))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (lesseq_minus1_i zero (plus N (neg r)) p_zero (closure_add N (neg r) (isNat->isInt N p2) (neg_exists r p38)) (gtzero1 N r p19)) ([p40:pf (geq (pred (minus N r)) zero)] cut (<= (plus N (neg r)) (plus zero N)) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (trans_leq (plus N (neg r)) (plus (neg r) N) (plus zero N) (eq->leq (plus N (neg r)) (plus (neg r) N) (comm_add N (neg r))) (ord_add_closure zero (neg r) N (neg_property1 r p18))) ([p41:pf (leq (minus N r) (plus zero N))] cut (<= (minus N r) N) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (trans_leq (minus N r) (plus zero N) N p41 (eq->leq (+ zero N) N (zero_plus N))) ([p42:pf (leq (minus N r) N)] cut (> N (pred (minus N r))) (exists2 num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4)) (greater_minus1_i N (minus N r) p42) ([p50:pf (lt (pred (minus N r)) N)] exists2_i num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4) (pred (neg q)) (pred (minus N r)) (divide_mod_i N M (pred (neg q)) (pred (minus N r)) p15 p30 p35 p40 p50)))))))))))))))))))))).
div_prover : {Q:tnum} {W:tnum} {N:tnum} {R:tnum} pf (isInt Q) -> pf (geq W zero) -> pf (gt N zero) -> pf (geq R zero) -> pf (lt R N) -> pf (eq num (plus (times N Q) R) W) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod W) N) Q) R) = [Q:tnum] [W:tnum] [N:tnum] [R:tnum] [p1:pf (isInt Q)] [p2:pf (geq W zero)] [p3:pf (gt N zero)] [p4:pf (geq R zero)] [p5:pf (lt R N)] [p6:pf (eq num (plus (times N Q) R) W)] cut (geq W zero) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod W) N) Q) R) p2 ([x3:pf (geq W zero)] divide_mod_i N W Q R p3 (trans num W (plus (times N Q) R) (+ (* Q N) R) (symm num (plus (times N Q) R) W p6) (plus_cong1 (* N Q) (* Q N) R (comm_times N Q))) p1 p4 p5).
div_prover1 : {Q:tnum} {N:tnum} {R:tnum} pf (isInt Q) -> pf (geq (plus (times N Q) R) zero) -> pf (gt N zero) -> pf (geq R zero) -> pf (lt R N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus (times N Q) R)) N) Q) R) = [Q:tnum] [N:tnum] [R:tnum] [p1:pf (isInt Q)] [p2:pf (geq (plus (times N Q) R) zero)] [p3:pf (gt N zero)] [p4:pf (geq R zero)] [p5:pf (lt R N)] cut (geq (plus (times N Q) R) zero) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (+ (* N Q) R)) N) Q) R) p2 ([x3:pf (geq (plus (times N Q) R) zero)] divide_mod_i N (+ (* N Q) R) Q R p3 (plus_cong1 (* N Q) (* Q N) R (comm_times N Q)) p1 p4 p5).
div_prover1' : {R:tnum} {N:tnum} pf (geq R zero) -> pf (gt N zero) -> pf (lt R N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod R) N) zero) R) = [R:tnum] [N:tnum] [p1:pf (geq R zero)] [p2:pf (gt N zero)] [p3:pf (lt R N)] divide_mod_i N R zero R p2 (trans3 num R R (+ zero R) (+ (* zero N) R) (refl num R) (symm num (+ zero R) R (zero_plus R)) (plus_cong1 zero (* zero N) R (symm num (* zero N) zero (zero_times N)))) p_zero p1 p3.
div_prover1'' : {Q:tnum} pf (isInt Q) -> pf (geq Q zero) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod Q) (const 1)) Q) (const 0)) = [Q:tnum] [p1:pf (isInt Q)] [p2:pf (geq Q zero)] cut (geq Q zero) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod Q) one) Q) zero) p2 ([x3:pf (geq Q zero)] divide_mod_i one Q Q zero one>zero (trans num Q (* Q one) (+ (* Q one) zero) (symm num (* Q one) Q (times_one Q)) (symm num (+ (* Q one) zero) (* Q one) (plus_zero (* Q one)))) p1 (eq->geq zero zero (refl num zero)) one>zero).
div_mod->div : {M:tm num} {N:tm num} {Q:tm num} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide M) N) Q) = [M:tm num] [N:tm num] [Q:tm num] [R:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) r)) M N Q (exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) x3) R p1).
_divide->divide : {A:tnum} {B:tnum} {C:tnum} pf (_divide A B C) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide A) B) C) = [A:tnum] [B:tnum] [C:tnum] [p1:pf (_divide A B C)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) r)) A B C (exists_e num ([x3:tm num] _divide_mod A B C x3) (exists num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (lam4 num num num num form ([x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] _divide_mod x4 x5 x6 x7)) A) B) C) x3)) p1 ([r:tm num] [q:pf (_divide_mod A B C r)] exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (lam4 num num num num form ([x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] _divide_mod x4 x5 x6 x7)) A) B) C) x3) r (def4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) A B C r q))).
divide_i : {N:tnum} {M:tm num} {Q:tnum} {R:tnum} pf (gt N zero) -> pf (eq num M (plus (times Q N) R)) -> pf (isInt Q) -> pf (geq R zero) -> pf (lt R N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide M) N) Q) = [N:tnum] [M:tm num] [Q:tnum] [R:tnum] [p2:pf (gt N zero)] [p4:pf (eq num M (plus (times Q N) R))] [p6:pf (isInt Q)] [p8:pf (geq R zero)] [p10:pf (lt R N)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) r)) M N Q (exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) x3) R (divide_mod_i N M Q R p2 p4 p6 p8 p10)).
divide_e : {M:tm num} {N:tm num} {Q:tm num} {A:tform} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide M) N) Q) -> ({r:tnum} pf (gt N zero) -> pf (eq num M (plus (times Q N) r)) -> pf (isInt Q) -> pf (geq r zero) -> pf (lt r N) -> pf A) -> pf A = [M:tm num] [N:tm num] [Q:tm num] [A:tform] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide M) N) Q)] [p2:{r:tnum} pf (gt N zero) -> pf (eq num M (plus (times Q N) r)) -> pf (isInt Q) -> pf (geq r zero) -> pf (lt r N) -> pf A] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) x3) A (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) r)) M N Q p1) ([r:tm num] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) r)] divide_mod_e M N Q r A p3 ([x3:pf (> N zero)] [x4:pf (== num M (+ (* Q N) r))] [x5:pf (isInt Q)] [x6:pf (>= r zero)] [x7:pf (< r N)] p2 r x3 x4 x5 x6 x7)).
divide_isint : {N:tm num} {M:tm num} {Q:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide N) M) Q) -> pf (isInt Q) = [N:tm num] [M:tm num] [Q:tm num] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide N) M) Q)] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod N) M) Q) x3) (isInt Q) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) r)) N M Q p2) ([r:tm num] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod N) M) Q) r)] divide_mod_isint1 N M Q r p4).
divide_nats_e : {M:tnum} {N:tnum} {Q:tm num} {A:tform} pf (isNat M) -> pf (isNat N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide M) N) Q) -> ({r:tnum} pf (gt N zero) -> pf (eq num M (plus (times Q N) r)) -> pf (isNat Q) -> pf (isNat r) -> pf (lt r N) -> pf A) -> pf A = [M:tnum] [N:tnum] [Q:tm num] [A:tform] [p1:pf (isNat M)] [p2:pf (isNat N)] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide M) N) Q)] [p4:{r:tnum} pf (gt N zero) -> pf (eq num M (plus (times Q N) r)) -> pf (isNat Q) -> pf (isNat r) -> pf (lt r N) -> pf A] cut (forall num ([x3:tm num] gt N zero imp eq num M (plus (times Q N) x3) imp isNat Q imp isNat x3 imp lt x3 N imp A)) A (forall_imp5_i num ([x3:tm num] gt N zero) ([x3:tm num] eq num M (plus (times Q N) x3)) ([x3:tm num] isNat Q) ([x3:tm num] isNat x3) ([x3:tm num] lt x3 N) ([x3:tm num] A) ([x3:tm num] [x4:pf (gt N zero)] [x5:pf (eq num M (plus (times Q N) x3))] [x6:pf (isNat Q)] [x7:pf (isNat x3)] [x8:pf (lt x3 N)] p4 x3 x4 x5 x6 x7 x8)) ([x3:pf (forall num ([x3:tm num] gt N zero imp eq num M (plus (times Q N) x3) imp isNat Q imp isNat x3 imp lt x3 N imp A))] exists_e num ([x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) x4) A (def3_e num num num ([x4:tm num] [x5:tm num] [x6:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x4) x5) x6) r)) M N Q p3) ([r:tm num] [p5:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) r)] divide_mod_nats_e M N Q r A p1 p2 p5 ([x4:pf (gt N zero)] [x5:pf (eq num M (plus (times Q N) r))] [x6:pf (isNat Q)] [x7:pf (isNat r)] [x8:pf (lt r N)] p4 r x4 x5 x6 x7 x8))).
divide_zero : {A:tnum} pf (gt A zero) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide zero) A) zero) = [A:tnum] [p1:pf (gt A zero)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) r)) zero A zero (exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod zero) A) zero) x3) zero (divide_mod_zero A p1)).
divide_by_one : {X:tnum} pf (isInt X) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide X) one) X) = [X:tnum] [p1:pf (isInt X)] cut (eq num X (plus (* X one) zero)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide X) (const 1)) X) (congr num (* X one) X ([z1:tm num] eq num X (plus z1 zero)) (times_one X) (symm num (+ X zero) X (plus_zero X))) ([p15:pf (eq num X (plus (times X one) zero))] _divide->divide X (const 1) X (exists_i num ([x3:tm num] _divide_mod X (const 1) X x3) zero (and5_i (gt (const 1) (const 0)) (eq num X (plus (times X one) zero)) (isInt X) (>= zero zero) (gt (const 1) (const 0)) greater1_0 p15 p1 (eq->geq zero zero (refl num zero)) greater1_0))).
parfun_divide : pf (parfun2 num num num divide) = forall4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide x3) x4) x5 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide x3) x4) x6 imp eq num x5 x6) ([m:tm num] [n:tm num] [q:tm num] [q':tm num] imp2_i (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide m) n) q) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide m) n) q') (eq num q q') ([p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide m) n) q)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide m) n) q')] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q) x3) (eq num q q') (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) r)) m n q p1) ([r:tm num] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q) r)] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q') x3) (eq num q q') (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([r8:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) r8)) m n q' p2) ([r':tm num] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q') r')] and_e1 (eq num q q') (eq num r r') (imp2_e (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q) r) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q') r') (eq num q q' and eq num r r') (forall6_e num num num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) x7 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x6) x8 imp eq num x5 x6 and eq num x7 x8) parfun_divide_mod m n q q' r r') p3 p4))))).
divide_exists : {M:tnum} {N:tnum} pf (isInt M) -> pf (isNat N) -> pf (neq num N zero) -> pf (exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide M) N) q)) = [M:tnum] [N:tnum] [p1:pf (isInt M)] [p2:pf (isNat N)] [p3:pf (neq num N zero)] exists2_e num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4) (exists num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide M) N) x3)) (divide_mod_exists' M N p1 p2 p3) ([q:tm num] [r:tm num] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) q) r)] exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide M) N) x3) q (_divide->divide M N q (exists_i num ([x3:tm num] _divide_mod M N q x3) r (divide_mod->_divide_mod M N q r p4)))).
div_mod->mod : {M:tm num} {N:tm num} {Q:tm num} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R) = [M:tm num] [N:tm num] [Q:tm num] [R:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) Q) R)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) M N R (exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) R) Q p1).
_modulo->modulo : {A:tnum} {B:tnum} {C:tnum} pf (_modulo A B C) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) B) C) = [A:tnum] [B:tnum] [C:tnum] [p1:pf (_modulo A B C)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) A B C (exists_e num ([x3:tm num] _divide_mod A B x3 C) (exists num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (lam4 num num num num form ([x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] _divide_mod x4 x5 x6 x7)) A) B) x3) C)) p1 ([q:tm num] [p2:pf (_divide_mod A B q C)] exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (lam4 num num num num form ([x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] _divide_mod x4 x5 x6 x7)) A) B) x3) C) q (def4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) A B q C p2))).
modulo_i : {N:tnum} {M:tm num} {Q:tnum} {R:tnum} pf (gt N zero) -> pf (eq num M (plus (times Q N) R)) -> pf (isInt Q) -> pf (geq R zero) -> pf (lt R N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R) = [N:tnum] [M:tm num] [Q:tnum] [R:tnum] [p1:pf (gt N zero)] [p2:pf (eq num M (plus (times Q N) R))] [p3:pf (isInt Q)] [p4:pf (geq R zero)] [p5:pf (lt R N)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) M N R (exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) R) Q (divide_mod_i N M Q R p1 p2 p3 p4 p5)).
modulo_e : {M:tm num} {N:tm num} {R:tm num} {A:tform} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R) -> ({q:tnum} pf (gt N zero) -> pf (eq num M (plus (times q N) R)) -> pf (isInt q) -> pf (geq R zero) -> pf (lt R N) -> pf A) -> pf A = [M:tm num] [N:tm num] [R:tm num] [A:tform] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R)] [p2:{q:tnum} pf (gt N zero) -> pf (eq num M (plus (times q N) R)) -> pf (isInt q) -> pf (geq R zero) -> pf (lt R N) -> pf A] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) R) A (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) M N R p1) ([q:tm num] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) q) R)] divide_mod_e M N q R A p3 ([x3:pf (> N zero)] [x4:pf (== num M (+ (* q N) R))] [x5:pf (isInt q)] [x6:pf (>= R zero)] [x7:pf (< R N)] p2 q x3 x4 x5 x6 x7)).
plus_mod32_i : {M:tnum} {N:tnum} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus M N)) pow2_32) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 M) N) R) = [M:tnum] [N:tnum] [R:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus M N)) pow2_32) R)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus x3 x4)) pow2_32) x5) M N R p1.
plus_mod32_e : {M:tm num} {N:tm num} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 M) N) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus M N)) pow2_32) R) = [M:tm num] [N:tm num] [R:tm num] [x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 M) N) R)] def3_e num num num ([x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus x4 x5)) pow2_32) x6) M N R x3.
minus_mod32_i : {M:tnum} {N:tnum} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus M N)) pow2_32) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 M) N) R) = [M:tnum] [N:tnum] [R:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus M N)) pow2_32) R)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus x3 x4)) pow2_32) x5) M N R p1.
minus_mod32_e : {M:tm num} {N:tm num} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 M) N) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus M N)) pow2_32) R) = [M:tm num] [N:tm num] [R:tm num] [x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 M) N) R)] def3_e num num num ([x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus x4 x5)) pow2_32) x6) M N R x3.
times_mod32_i : {M:tnum} {N:tnum} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times M N)) pow2_32) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 M) N) R) = [M:tnum] [N:tnum] [R:tm num] [x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times M N)) pow2_32) R)] def3_i num num num ([x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times x4 x5)) pow2_32) x6) M N R x3.
times_mod32_e : {M:tm num} {N:tm num} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 M) N) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times M N)) pow2_32) R) = [M:tm num] [N:tm num] [R:tm num] [x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 M) N) R)] def3_e num num num ([x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times x4 x5)) pow2_32) x6) M N R x3.
modulo_congr_mod : {N:tm num} {A:tm num} {A':tm num} {B:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) A') -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A') N) B) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) B) = [N:tm num] [A:tm num] [A':tm num] [B:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) A')] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A') N) B)] cut2 (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) A') (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A') N) B) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) B) p2 p4 ([x3:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) A')] [x4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A') N) B)] congr_mod_e N A A' (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) B) p2 ([k1:tnum] [p6:pf (isInt k1)] [p8:pf (eq num A (plus (times k1 N) A'))] modulo_e A' N B (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) B) p4 ([q:tnum] [p10:pf (gt N zero)] [p12:pf (eq num A' (plus (times q N) B))] [p14:pf (isInt q)] [p16:pf (geq B zero)] [p18:pf (lt B N)] cut (== num A (+ (* (+ k1 q) N) B)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) B) (trans num A (plus (times k1 N) A') (+ (* (+ k1 q) N) B) p8 (trans num (+ (* k1 N) A') (+ (* k1 N) (plus (times q N) B)) (+ (* (+ k1 q) N) B) (plus_cong (* k1 N) (* k1 N) A' (plus (times q N) B) (refl num (* k1 N)) p12) (trans num (plus (* k1 N) (plus (* q N) B)) (plus (plus (* k1 N) (* q N)) B) (+ (* (+ k1 q) N) B) (symm num (plus (plus (* k1 N) (* q N)) B) (plus (* k1 N) (plus (* q N) B)) (assoc_add (* k1 N) (* q N) B)) (plus_cong (+ (* k1 N) (* q N)) (* (+ k1 q) N) B B (symm num (* (+ k1 q) N) (+ (* k1 N) (* q N)) (distrib_right k1 q N)) (refl num B))))) ([p20:pf (eq num A (plus (times (plus k1 q) N) B))] modulo_i N A (plus k1 q) B p10 p20 (closure_add k1 q p6 p14) p16 p18)))).
modulo->congr_mod : {A:tm num} {N:tm num} {B:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) B) -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B) = [A:tm num] [N:tm num] [B:tm num] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) B)] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) B) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B) p2 ([x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) B)] modulo_e A N B (@ num form (@ num (shadowed_0 num) (@ num (rel num num) congr_mod N) A) B) p2 ([k:tnum] [p1:pf (gt N zero)] [p4:pf (eq num A (plus (times k N) B))] [p6:pf (isInt k)] [x4:pf (geq B zero)] [x5:pf (lt B N)] congr_mod_i k A N B p6 p4)).
modulo_isint : {M:tnum} {N:tnum} {R:tm num} pf (isInt M) -> pf (isInt N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R) -> pf (isInt R) = [M:tnum] [N:tnum] [R:tm num] [p1:pf (isInt M)] [p2:pf (isInt N)] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R)] cut3 (isInt M) (isInt N) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R) (isInt R) p1 p2 p3 ([x3:pf (isInt M)] [x4:pf (isInt N)] [x5:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R)] exists_e num ([x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x6) R) (isInt R) (def3_e num num num ([x6:tm num] [x7:tm num] [x8:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x6) x7) q) x8)) M N R p3) ([q:tm num] [p6:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) q) R)] divide_mod_isint2 M N q R p1 p2 p6)).
modulo_isnat : {M:tnum} {N:tnum} {R:tm num} pf (isInt M) -> pf (isNat N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R) -> pf (isNat R) = [M:tnum] [N:tnum] [R:tm num] [p1:pf (isInt M)] [p2:pf (isNat N)] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R)] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) R) (isNat R) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) M N R p3) ([q:tm num] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) q) R)] divide_mod_isnat_remainder M N q R p1 p2 p4).
modulo_zero : {A:tnum} pf (gt A zero) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo zero) A) zero) = [A:tnum] [p1:pf (gt A zero)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) zero A zero (exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod zero) A) x3) zero) zero (divide_mod_zero A p1)).
modulo_plus : {M1:tm num} {N:tm num} {R1:tm num} {M2:tm num} {R2:tm num} {R:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M1) N) R1) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M2) N) R2) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus R1 R2)) N) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus M1 M2)) N) R) = [M1:tm num] [N:tm num] [R1:tm num] [M2:tm num] [R2:tm num] [R:tm num] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M1) N) R1)] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M2) N) R2)] [p6:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus R1 R2)) N) R)] cut3 (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M1) N) R1) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M2) N) R2) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus R1 R2)) N) R) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5))) (plus M1 M2)) N) R) p2 p4 p6 ([x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M1) N) R1)] [x4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M2) N) R2)] [x5:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus R1 R2)) N) R)] exists_e num ([x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M1) N) x6) R1) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x6:tm num] [x7:tm num] [x8:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x6) x7) q) x8))) (plus M1 M2)) N) R) (def3_e num num num ([x6:tm num] [x7:tm num] [x8:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x6) x7) q) x8)) M1 N R1 p2) ([q1:tm num] [p10:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M1) N) q1) R1)] exists_e num ([x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M2) N) x6) R2) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x6:tm num] [x7:tm num] [x8:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x6) x7) q) x8))) (plus M1 M2)) N) R) (def3_e num num num ([x6:tm num] [x7:tm num] [x8:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x6) x7) q) x8)) M2 N R2 p4) ([q2:tm num] [p12:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M2) N) q2) R2)] exists_e num ([x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus R1 R2)) N) x6) R) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x6:tm num] [x7:tm num] [x8:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x6) x7) q) x8))) (plus M1 M2)) N) R) (def3_e num num num ([x6:tm num] [x7:tm num] [x8:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x6) x7) q) x8)) (plus R1 R2) N R p6) ([q:tm num] [p14:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus R1 R2)) N) q) R)] def3_i num num num ([x6:tm num] [x7:tm num] [x8:tm num] exists num ([q3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x6) x7) q3) x8)) (plus M1 M2) N R (exists_i num ([x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus M1 M2)) N) x6) R) (plus (plus q1 q2) q) (divide_mod_plus M1 N q1 R1 M2 q2 R2 q R p10 p12 p14)))))).
modulo_inrange : {N:tnum} {M:tnum} {R:tm num} pf (isInt N) -> pf (isInt M) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo N) M) R) -> pf (@ num form (@ num (shadowed_0 num) inrange M) R) = [N:tnum] [M:tnum] [R:tm num] [p2:pf (isInt N)] [p4:pf (isInt M)] [p6:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo N) M) R)] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod N) M) x3) R) (@ num form (@ num (shadowed_0 num) inrange M) R) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) N M R p6) ([q:tm num] [p8:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod N) M) q) R)] divide_mod_inrange N M q R p2 p4 p8).
modulo_same : {M:tnum} {N:tnum} pf (geq M zero) -> pf (lt M N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) M) = [M:tnum] [N:tnum] [p1:pf (geq M zero)] [p2:pf (lt M N)] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) zero) M) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5))) M) N) M) (divide_mod_quotient_is0 M N p1 p2) ([p8:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) zero) M)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) M N M (exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) M) zero p8)).
modulo_same' : {N:tm num} {M:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) M) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) M) = [N:tm num] [M:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) M)] inrange_e N M (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) M) p2 ([p4:pf (isInt M)] [p6:pf (geq M zero)] [p8:pf (lt M N)] modulo_same M N p6 p8).
modulo_minus->plus : {M:tm num} {A:tm num} {B:tnum} {C:tm num} pf (@ num form (@ num (shadowed_0 num) inrange M) A) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus A B)) M) C) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus B C)) M) A) = [M:tm num] [A:tm num] [B:tnum] [C:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) inrange M) A)] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus A B)) M) C)] modulo_e (minus A B) M C (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5))) (plus B C)) M) A) p4 ([q:tnum] [p10:pf (gt M zero)] [p12:pf (eq num (minus A B) (plus (times q M) C))] [p14:pf (isInt q)] [p16:pf (geq C zero)] [p18:pf (lt C M)] cut (== num (+ B C) (+ (* (neg q) M) A)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q1) x5))) (plus B C)) M) A) (trans num (+ B C) (+ B (- (minus A B) (times q M))) (+ (* (neg q) M) A) (plus_cong B B C (- (minus A B) (times q M)) (refl num B) (symm num (- (minus A B) (times q M)) C (eq_swap_a_b+c (minus A B) C (times q M) (trans num (minus A B) (plus (times q M) C) (plus C (times q M)) p12 (comm_add (times q M) C))))) (trans num (plus B (plus (- A B) (neg (* q M)))) (plus (plus B (- A B)) (neg (* q M))) (+ (* (neg q) M) A) (symm num (plus (plus B (- A B)) (neg (* q M))) (plus B (plus (- A B) (neg (* q M)))) (assoc_add B (- A B) (neg (* q M)))) (trans num (+ (+ B (- A B)) (neg (* q M))) (+ A (neg (* q M))) (+ (* (neg q) M) A) (plus_cong (+ B (- A B)) A (neg (* q M)) (neg (* q M)) (cancel_a+b-a' B A) (refl num (neg (* q M)))) (trans num (plus A (neg (* q M))) (plus (neg (* q M)) A) (+ (* (neg q) M) A) (comm_add A (neg (* q M))) (plus_cong (neg (* q M)) (* (neg q) M) A A (symm num (* (neg q) M) (neg (* q M)) (neg_times1 q M)) (refl num A)))))) ([p30:pf (eq num (plus B C) (plus (times (neg q) M) A))] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q2:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q2) x5)) (plus B C) M A (exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod (plus B C)) M) x3) A) (neg q) (def4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) (plus B C) M (neg q) A (and5_i (gt M zero) (eq num (plus B C) (plus (times (neg q) M) A)) (isInt (neg q)) (geq A zero) (lt A M) p10 p30 (neg_exists q p14) (inrange_e2 M A p2) (inrange_e3 M A p2)))))).
modulo_plus->minus : {M:tm num} {A:tm num} {B:tnum} {C:tm num} pf (@ num form (@ num (shadowed_0 num) inrange M) A) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus A B)) M) C) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus C B)) M) A) = [M:tm num] [A:tm num] [B:tnum] [C:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) inrange M) A)] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus A B)) M) C)] cut2 (@ num form (@ num (shadowed_0 num) inrange M) A) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus A B)) M) C) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus C (neg B))) M) A) p2 p4 ([x3:pf (@ num form (@ num (shadowed_0 num) inrange M) A)] [x4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus A B)) M) C)] cut (== num (+ A (neg (neg B))) (+ A B)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus C (neg B))) M) A) (plus_eq (neg (neg B)) B A (neg_neg_a_eq_a B)) ([p6:pf (eq num (minus A (neg B)) (plus A B))] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus (neg B) C)) M) A) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus C (neg B))) M) A) (modulo_minus->plus M A (neg B) C p2 (def3_congr2 num (minus A (neg B)) (plus A B) num num modulo M C p6 p4)) ([p8:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus (neg B) C)) M) A)] def3_congr2 num (plus C (neg B)) (plus (neg B) C) num num modulo M A (comm_add C (neg B)) p8))).
modulo_expand : {Q:tnum} {M:tm num} {N:tm num} {R:tm num} pf (isInt Q) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus (times Q N) R)) N) R) = [Q:tnum] [M:tm num] [N:tm num] [R:tm num] [p1:pf (isInt Q)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R)] modulo_e M N R (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus (times Q N) R)) N) R) p2 ([q:tm num] [p3:pf (gt N zero)] [p4:pf (eq num M (plus (times q N) R))] [p5:pf (isInt q)] [p6:pf (geq R zero)] [p7:pf (lt R N)] modulo_i N (plus (times Q N) R) Q R p3 (refl num (plus (times Q N) R)) p1 p6 p7).
parfun_modulo : pf (parfun2 num num num modulo) = forall4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo x3) x4) x5 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo x3) x4) x6 imp eq num x5 x6) ([m:tm num] [n:tm num] [r:tm num] [r':tm num] imp2_i (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo m) n) r) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo m) n) r') (eq num r r') ([p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo m) n) r)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo m) n) r')] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) x3) r) (eq num r r') (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) m n r p1) ([q:tm num] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q) r)] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) x3) r') (eq num r r') (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q1) x5)) m n r' p2) ([q':tm num] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q') r')] and_e2 (eq num q q') (eq num r r') (imp2_e (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q) r) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod m) n) q') r') (eq num q q' and eq num r r') (forall6_e num num num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) x7 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x6) x8 imp eq num x5 x6 and eq num x7 x8) parfun_divide_mod m n q q' r r') p3 p4))))).
parfun_plus_mod32 : pf (parfun2 num num num plus_mod32) = forall4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 x3) x4) x5 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 x3) x4) x6 imp eq num x5 x6) ([a:tm num] [b:tm num] [c1:tm num] [c':tm num] imp2_i (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 a) b) c1) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 a) b) c') (eq num c1 c') ([p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 a) b) c1)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 a) b) c')] imp2_e (@ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo (plus a b)) pow2_32) c1) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo (plus a b)) pow2_32) c') (eq num c1 c') (forall4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo x3) x4) x5 imp @ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo x3) x4) x6 imp eq num x5 x6) parfun_modulo (plus a b) pow2_32 c1 c') (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus x3 x4)) pow2_32) x5) a b c1 p1) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus x3 x4)) pow2_32) x5) a b c' p2))).
parfun_minus_mod32 : pf (parfun2 num num num minus_mod32) = forall4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 x3) x4) x5 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 x3) x4) x6 imp eq num x5 x6) ([a:tm num] [b:tm num] [c1:tm num] [c':tm num] imp2_i (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 a) b) c1) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 a) b) c') (eq num c1 c') ([p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 a) b) c1)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 a) b) c')] imp2_e (@ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo (minus a b)) pow2_32) c1) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo (minus a b)) pow2_32) c') (eq num c1 c') (forall4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo x3) x4) x5 imp @ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo x3) x4) x6 imp eq num x5 x6) parfun_modulo (minus a b) pow2_32 c1 c') (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus x3 x4)) pow2_32) x5) a b c1 p1) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus x3 x4)) pow2_32) x5) a b c' p2))).
parfun_times_mod32 : pf (parfun2 num num num times_mod32) = forall4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 x3) x4) x5 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 x3) x4) x6 imp eq num x5 x6) ([a:tm num] [b:tm num] [c1:tm num] [c':tm num] imp2_i (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 a) b) c1) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 a) b) c') (eq num c1 c') ([p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 a) b) c1)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 a) b) c')] imp2_e (@ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo (times a b)) pow2_32) c1) (@ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo (times a b)) pow2_32) c') (eq num c1 c') (forall4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo x3) x4) x5 imp @ num form (@ num (shadowed_0 num) (@ num (rel num num) modulo x3) x4) x6 imp eq num x5 x6) parfun_modulo (times a b) pow2_32 c1 c') (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times x3 x4)) pow2_32) x5) a b c1 p1) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times x3 x4)) pow2_32) x5) a b c' p2))).
modulo_exists : {M:tnum} {N:tnum} pf (isInt M) -> pf (isNat N) -> pf (neq num N zero) -> pf (exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) r)) = [M:tnum] [N:tnum] [p1:pf (isInt M)] [p2:pf (isNat N)] [p3:pf (neq num N zero)] exists2_e num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) x3) x4) (exists num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) x3)) (divide_mod_exists' M N p1 p2 p3) ([q:tm num] [r:tm num] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod M) N) q) r)] exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) x3) r (_modulo->modulo M N r (exists_i num ([x3:tm num] _divide_mod M N x3 r) q (divide_mod->_divide_mod M N q r p4)))).
modulo_ext : {Q:tnum} {A:tm num} {N:tm num} {R:tm num} pf (isInt Q) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) R) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus (times Q N) A)) N) R) = [Q:tnum] [A:tm num] [N:tm num] [R:tm num] [p0:pf (isInt Q)] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) N) R)] modulo_e A N R (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus (times Q N) A)) N) R) p1 ([q1:tnum] [p2:pf (gt N zero)] [p3:pf (eq num A (plus (times q1 N) R))] [p4:pf (isInt q1)] [p5:pf (geq R zero)] [p6:pf (lt R N)] cut (== num (+ (times Q N) A) (+ (times Q N) (plus (times q1 N) R))) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus (times Q N) A)) N) R) (plus_eq A (plus (times q1 N) R) (times Q N) p3) ([p7:pf (eq num (plus (times Q N) A) (plus (times Q N) (plus (times q1 N) R)))] cut (== num (plus (times Q N) A) (plus (plus (times Q N) (times q1 N)) R)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus (times Q N) A)) N) R) (trans num (plus (times Q N) A) (plus (times Q N) (plus (times q1 N) R)) (plus (plus (times Q N) (times q1 N)) R) p7 (symm num (plus (plus (times Q N) (times q1 N)) R) (plus (times Q N) (plus (times q1 N) R)) (assoc_add (times Q N) (times q1 N) R))) ([p8:pf (eq num (plus (times Q N) A) (plus (plus (times Q N) (times q1 N)) R))] cut (eq num (plus (times Q N) A) (plus (* (+ Q q1) N) R)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus (times Q N) A)) N) R) (congr num (* (+ Q q1) N) (+ (* Q N) (* q1 N)) ([z1:tm num] eq num (plus (times Q N) A) (plus z1 R)) (distrib_right Q q1 N) p8) ([p9:pf (eq num (plus (times Q N) A) (plus (times (plus Q q1) N) R))] modulo_i N (plus (times Q N) A) (plus Q q1) R p2 p9 (closure_add Q q1 p0 p4) p5 p6)))).
multiple_of_i : {M:tm num} {N:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) zero) -> pf (@ num form (@ num (shadowed_0 num) multiple_of M) N) = [M:tm num] [N:tm num] [x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) zero)] def2_i num num ([x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo x4) x5) zero) M N x3.
multiple_of_e : {M:tm num} {N:tm num} pf (@ num form (@ num (shadowed_0 num) multiple_of M) N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) zero) = [M:tm num] [N:tm num] [x3:pf (@ num form (@ num (shadowed_0 num) multiple_of M) N)] def2_e num num ([x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo x4) x5) zero) M N x3.
multiple_of_i2 : {N:tnum} {Q:tnum} {M:tm num} pf (gt N zero) -> pf (isInt Q) -> pf (eq num M (times Q N)) -> pf (@ num form (@ num (shadowed_0 num) multiple_of M) N) = [N:tnum] [Q:tnum] [M:tm num] [p2:pf (gt N zero)] [p4:pf (isInt Q)] [p6:pf (eq num M (times Q N))] cut3 (gt N zero) (isInt Q) (eq num M (times Q N)) (@ num form (@ num (shadowed_0 num) multiple_of M) N) p2 p4 p6 ([x3:pf (gt N zero)] [x4:pf (isInt Q)] [x5:pf (eq num M (times Q N))] cut (== num M (+ (times Q N) zero)) (@ num form (@ num (shadowed_0 num) multiple_of M) N) (trans num M (times Q N) (+ (times Q N) zero) p6 (symm num (+ (times Q N) zero) (times Q N) (plus_zero (times Q N)))) ([p10:pf (eq num M (plus (times Q N) zero))] multiple_of_i M N (modulo_i N M Q zero p2 p10 p4 (eq->geq zero zero (refl num zero)) p2))).
multiple_of_e2 : {M:tm num} {N:tm num} {A:tform} pf (@ num form (@ num (shadowed_0 num) multiple_of M) N) -> ({q:tnum} pf (gt N zero) -> pf (isInt q) -> pf (eq num M (times q N)) -> pf A) -> pf A = [M:tm num] [N:tm num] [A:tform] [p2:pf (@ num form (@ num (shadowed_0 num) multiple_of M) N)] [p4:{q:tnum} pf (gt N zero) -> pf (isInt q) -> pf (eq num M (times q N)) -> pf A] cut2 (@ num form (@ num (shadowed_0 num) multiple_of M) N) (forall num ([x3:tm num] gt N zero imp isInt x3 imp eq num M (times x3 N) imp A)) A p2 (forall_i num ([x3:tm num] gt N zero imp isInt x3 imp eq num M (times x3 N) imp A) ([a:tm num] imp3_i (gt N zero) (isInt a) (eq num M (times a N)) A ([x3:pf (gt N zero)] [x4:pf (isInt a)] [x5:pf (eq num M (times a N))] p4 a x3 x4 x5))) ([x3:pf (@ num form (@ num (shadowed_0 num) multiple_of M) N)] [x4:pf (forall num ([x4:tm num] gt N zero imp isInt x4 imp eq num M (times x4 N) imp A))] modulo_e M N zero A (multiple_of_e M N p2) ([q:tnum] [p8:pf (gt N zero)] [p10:pf (eq num M (plus (times q N) zero))] [p12:pf (isInt q)] [x5:pf (geq zero zero)] [x6:pf (lt zero N)] p4 q p8 p12 (trans num M (plus (times q N) zero) (times q N) p10 (plus_zero (times q N))))).
multiple_of_plus : {A:tm num} {N:tm num} {B:tm num} pf (@ num form (@ num (shadowed_0 num) multiple_of A) N) -> pf (@ num form (@ num (shadowed_0 num) multiple_of B) N) -> pf (@ num form (@ num (shadowed_0 num) multiple_of (plus A B)) N) = [A:tm num] [N:tm num] [B:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) multiple_of A) N)] [p4:pf (@ num form (@ num (shadowed_0 num) multiple_of B) N)] cut2 (@ num form (@ num (shadowed_0 num) multiple_of A) N) (@ num form (@ num (shadowed_0 num) multiple_of B) N) (@ num form (@ num (shadowed_0 num) multiple_of (plus A B)) N) p2 p4 ([x3:pf (@ num form (@ num (shadowed_0 num) multiple_of A) N)] [x4:pf (@ num form (@ num (shadowed_0 num) multiple_of B) N)] modulo_e A N zero (@ num form (@ num (shadowed_0 num) multiple_of (plus A B)) N) (multiple_of_e A N p2) ([x5:tnum] [p6:pf (gt N zero)] [x6:pf (eq num A (plus (times x5 N) zero))] [x7:pf (isInt x5)] [x8:pf (geq zero zero)] [x9:pf (lt zero N)] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (+ zero zero)) N) zero) (@ num form (@ num (shadowed_0 num) multiple_of (plus A B)) N) (def3_congr2 num (+ zero zero) zero num num modulo N zero (zero_plus zero) (modulo_zero N p6)) ([p8:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus zero zero)) N) zero)] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus A B)) N) zero) (@ num form (@ num (shadowed_0 num) multiple_of (plus A B)) N) (modulo_plus A N zero B zero zero (multiple_of_e A N p2) (multiple_of_e B N p4) p8) ([p10:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus A B)) N) zero)] multiple_of_i (plus A B) N p10)))).
multiple_of_times_right : {A:tnum} {B:tm num} {N:tm num} pf (isInt A) -> pf (@ num form (@ num (shadowed_0 num) multiple_of B) N) -> pf (@ num form (@ num (shadowed_0 num) multiple_of (times A B)) N) = [A:tnum] [B:tm num] [N:tm num] [p0:pf (isInt A)] [p2:pf (@ num form (@ num (shadowed_0 num) multiple_of B) N)] cut2 (isInt A) (@ num form (@ num (shadowed_0 num) multiple_of B) N) (@ num form (@ num (shadowed_0 num) multiple_of (times A B)) N) p0 p2 ([x3:pf (isInt A)] [x4:pf (@ num form (@ num (shadowed_0 num) multiple_of B) N)] multiple_of_e2 B N (@ num form (@ num (shadowed_0 num) multiple_of (times A B)) N) p2 ([q:tnum] [p6:pf (gt N zero)] [p8:pf (isInt q)] [p10:pf (eq num B (times q N))] cut (== num (* A B) (times (times A q) N)) (@ num form (@ num (shadowed_0 num) multiple_of (times A B)) N) (trans num (* A B) (* A (times q N)) (times (times A q) N) (times_cong A A B (times q N) (refl num A) p10) (symm num (times (times A q) N) (times A (times q N)) (assoc_mult A q N))) ([p12:pf (eq num (times A B) (times (times A q) N))] multiple_of_i2 N (times A q) (times A B) p6 (closure_mult A q p0 p8) p12))).
multiple_of_times_left : {B:tnum} {A:tm num} {N:tm num} pf (isInt B) -> pf (@ num form (@ num (shadowed_0 num) multiple_of A) N) -> pf (@ num form (@ num (shadowed_0 num) multiple_of (times A B)) N) = [B:tnum] [A:tm num] [N:tm num] [p0:pf (isInt B)] [p2:pf (@ num form (@ num (shadowed_0 num) multiple_of A) N)] def2_congr2 num (times A B) (times B A) num multiple_of N (comm_mult A B) (multiple_of_times_right B A N p0 p2).
multiple_of_neg : {A:tm num} {N:tm num} pf (@ num form (@ num (shadowed_0 num) multiple_of A) N) -> pf (@ num form (@ num (shadowed_0 num) multiple_of (neg A)) N) = [A:tm num] [N:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) multiple_of A) N)] cut (@ num form (@ num (shadowed_0 num) multiple_of A) N) (@ num form (@ num (shadowed_0 num) multiple_of (neg A)) N) p2 ([x3:pf (@ num form (@ num (shadowed_0 num) multiple_of A) N)] multiple_of_e2 A N (@ num form (@ num (shadowed_0 num) multiple_of (neg A)) N) p2 ([q:tnum] [p10:pf (gt N zero)] [p12:pf (isInt q)] [p14:pf (eq num A (times q N))] cut (== num (neg A) (* (neg q) N)) (@ num form (@ num (shadowed_0 num) multiple_of (neg A)) N) (trans num (neg A) (neg (times q N)) (* (neg q) N) (neg_cong A (times q N) p14) (symm num (* (neg q) N) (neg (* q N)) (neg_times1 q N))) ([p16:pf (eq num (neg A) (times (neg q) N))] multiple_of_i2 N (neg q) (neg A) p10 (neg_exists q p12) p16))).
multiple_of_refl : {N:tnum} pf (gt N zero) -> pf (@ num form (@ num (shadowed_0 num) multiple_of N) N) = [N:tnum] [p2:pf (gt N zero)] multiple_of_i2 N one N p2 p_one (symm num (* one N) N (one_times N)).
modulo_multiple_of : {M:tm num} {N:tm num} {R:tm num} {U:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R) -> pf (@ num form (@ num (shadowed_0 num) multiple_of M) U) -> pf (@ num form (@ num (shadowed_0 num) multiple_of N) U) -> pf (@ num form (@ num (shadowed_0 num) multiple_of R) U) = [M:tm num] [N:tm num] [R:tm num] [U:tm num] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R)] [p4:pf (@ num form (@ num (shadowed_0 num) multiple_of M) U)] [p6:pf (@ num form (@ num (shadowed_0 num) multiple_of N) U)] cut3 (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R) (@ num form (@ num (shadowed_0 num) multiple_of M) U) (@ num form (@ num (shadowed_0 num) multiple_of N) U) (@ num form (@ num (num arrow form) multiple_of R) U) p2 p4 p6 ([x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo M) N) R)] [x4:pf (@ num form (@ num (shadowed_0 num) multiple_of M) U)] [x5:pf (@ num form (@ num (shadowed_0 num) multiple_of N) U)] modulo_e M N R (@ num form (@ num (num arrow form) multiple_of R) U) p2 ([q:tnum] [x6:pf (gt N zero)] [p10:pf (eq num M (plus (times q N) R))] [p11:pf (isInt q)] [x7:pf (geq R zero)] [x8:pf (lt R N)] cut (== num R (+ (neg (times q N)) M)) (@ num form (@ num (num arrow form) multiple_of R) U) (pf_add_inv_cancel (times q N) R M (symm num M (plus (times q N) R) p10)) ([p12:pf (eq num R (plus (neg (times q N)) M))] cut (@ num form (@ num (shadowed_0 num) multiple_of (times q N)) U) (@ num form (@ num (num arrow form) multiple_of R) U) (multiple_of_times_right q N U p11 p6) ([p14:pf (@ num form (@ num (shadowed_0 num) multiple_of (times q N)) U)] cut (@ num form (@ num (shadowed_0 num) multiple_of (plus (neg (times q N)) M)) U) (@ num form (@ num (num arrow form) multiple_of R) U) (multiple_of_plus (neg (times q N)) U M (multiple_of_neg (times q N) U p14) p4) ([p16:pf (@ num form (@ num (shadowed_0 num) multiple_of (plus (neg (times q N)) M)) U)] def2_congr2 num R (plus (neg (times q N)) M) num multiple_of U p12 p16))))).
pow2_32_multiple_of_4 : pf (@ num form (@ num (shadowed_0 num) multiple_of pow2_32) four) = multiple_of_i2 (const 4) (const 1073741824) pow2_32 pf4>0 pfInt1073741824 (trans num pow2_32 (* four pow2_30) (times pow2_30 four) pow2_32_eq_4*pow2_30 (comm_mult four pow2_30)).
multiple_of_0 : {N:tnum} pf (gt N zero) -> pf (@ num form (@ num (shadowed_0 num) multiple_of zero) N) = [N:tnum] [p2:pf (gt N zero)] multiple_of_i zero N (modulo_zero N p2).
word_aligned : tm (num arrow form) = lam num form ([N:tm num] isInt N and @ num form (@ num (shadowed_0 num) multiple_of N) word_size).
jump_aligned : tm (num arrow form) = word_aligned.
k_typ : tp -> tp -> tp = [T1:tp] [T2:tp] (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form.
k0 : {T1:tp} {T2:tp} tm (k_typ T1 T2) = [T1:tp] [T2:tp] lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] _k0 T1 T2 x3 x4 x5).
upd/cc : {X1:tp} {X2:tp} {X3:tp} tm (X1 arrow X2 arrow (X3 arrow (X1 arrow X2) arrow X1 arrow form) arrow X3 arrow (X1 arrow X2) arrow X1 arrow form) = [X1:tp] [X2:tp] [X3:tp] lam6 X1 X2 (X3 arrow (X1 arrow X2) arrow X1 arrow form) X3 (X1 arrow X2) X1 form ([d:tm X1] [x3:tm X2] [k:tm (X3 arrow (X1 arrow X2) arrow X1 arrow form)] [f:tm X3] [f':tm (X1 arrow X2)] [z1:tm X1] if (eq X1 z1 d) (eq X2 (@ X1 X2 f' d) x3) (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X3 ((X1 arrow X2) arrow X1 arrow form) k f) f') z1)).
upd2 : {X1:tp} {X2:tp} tm ((X1 arrow X2) arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) = [X1:tp] [X2:tp] lam6 (X1 arrow X2) X1 X2 X1 X2 (X1 arrow X2) form ([f:tm (X1 arrow X2)] [d1:tm X1] [x3:tm X2] [d2:tm X1] [x4:tm X2] [f':tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) d1) x3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) d2) x4) (k0 X1 X2))) f) f') z1)).
upd3 : {X1:tp} {X2:tp} tm ((X1 arrow X2) arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) = [X1:tp] [X2:tp] lam8 (X1 arrow X2) X1 X2 X1 X2 X1 X2 (X1 arrow X2) form ([f:tm (X1 arrow X2)] [d1:tm X1] [x3:tm X2] [d2:tm X1] [x4:tm X2] [d3:tm X1] [x5:tm X2] [f':tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) d1) x3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) d2) x4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) d3) x5) (k0 X1 X2)))) f) f') z1)).
upd4 : {X1:tp} {X2:tp} tm ((X1 arrow X2) arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) = [X1:tp] [X2:tp] lam10 (X1 arrow X2) X1 X2 X1 X2 X1 X2 X1 X2 (X1 arrow X2) form ([f:tm (X1 arrow X2)] [d1:tm X1] [x3:tm X2] [d2:tm X1] [x4:tm X2] [d3:tm X1] [x5:tm X2] [d4:tm X1] [x6:tm X2] [f':tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) d1) x3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) d2) x4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) d3) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) d4) x6) (k0 X1 X2))))) f) f') z1)).
&& : {T:tp} tm (T arrow form) -> tm (T arrow form) -> tm (T arrow form) = [T:tp] [p1:tm (T arrow form)] [p2:tm (T arrow form)] lam T form ([w:tm T] @ T form p1 w and @ T form p2 w).
||2 : {T1:tp} {T2:tp} tm (T1 arrow T2 arrow form) -> tm (T1 arrow T2 arrow form) -> tm (T1 arrow T2 arrow form) = [T1:tp] [T2:tp] [p1:tm (T1 arrow T2 arrow form)] [p2:tm (T1 arrow T2 arrow form)] lam2 T1 T2 form ([w1:tm T1] [w2:tm T2] @ T2 form (@ T1 (T2 arrow form) p1 w1) w2 or @ T2 form (@ T1 (T2 arrow form) p2 w1) w2).
initial_machine_state : tm (registers arrow memory arrow form) = lam2 registers memory form ([x3:tm registers] [x4:tm memory] eqn (get_reg x3 zero) zero and eqn (get_reg x3 icnt) zero and mult4? (get_reg x3 reg_allocptr) and mult4? (get_reg x3 reg_limitptr) and mult4? (get_reg x3 reg_sp) and _is_word (plus (get_reg x3 reg_sp) ml_framesize)).
is_word : tm (num arrow form) = lam num form ([x3:tm num] _is_word x3).
eq_mem : tm (memory arrow memory arrow form) = lam2 memory memory form ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4).
eq_regs : tm (registers arrow registers arrow form) = lam2 registers registers form ([x3:tm registers] [x4:tm registers] _eq_regs x3 x4).
hidden_regs_start : tnum = const 1000.
hidden_regs : tm (set num) = lam num form ([x3:tm num] geq x3 hidden_regs_start).
eq_hidden_regs : {X1:tp} tm (rel (num arrow X1) (num arrow X1)) = [X1:tp] @ (set num) (rel (num arrow X1) (num arrow X1)) (agree_over_set num X1) hidden_regs.
readable : tm (registers arrow memory arrow num arrow form) = lam3 registers memory num form ([x3:tm registers] [x4:tm memory] [x5:tm num] _readable x3 x4 x5).
writable : tm (registers arrow memory arrow num arrow form) = lam3 registers memory num form ([x3:tm registers] [x4:tm memory] [x5:tm num] _writable x3 x4 x5).
executable : tm (registers arrow memory arrow num arrow form) = lam3 registers memory num form ([x3:tm registers] [x4:tm memory] [x5:tm num] _executable x3 x4 x5).
mk_gen_pc : {X1:tp} {X2:tp} {X3:tp} {X4:tp} tm (X1 arrow X2 arrow X3 arrow X4 arrow tuple4 X1 X2 X3 X4) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] mktuple4 X1 X2 X3 X4.
get_opc : {X1:tp} {X2:tp} {X3:tp} {X4:tp} tm (tuple4 X1 X2 X3 X4 arrow X1) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] get1of4 X1 X2 X3 X4.
get_pc : {X1:tp} {X2:tp} {X3:tp} {X4:tp} tm (tuple4 X1 X2 X3 X4 arrow X2) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] get2of4 X1 X2 X3 X4.
get_npc : {X1:tp} {X2:tp} {X3:tp} {X4:tp} tm (tuple4 X1 X2 X3 X4 arrow X3) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] get3of4 X1 X2 X3 X4.
get_icnt : {X1:tp} {X2:tp} {X3:tp} {X4:tp} tm (tuple4 X1 X2 X3 X4 arrow X4) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] get4of4 X1 X2 X3 X4.
normalpc : tm (genpc arrow num arrow form) = lam2 (tuple4 num num num num) num form ([g:tm (tuple4 num num num num)] [n:tm num] exists num ([n+4:tm num] @ num form is_word n and @ num form jump_aligned n and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 n) word_size) n+4 and eq num (@ (tuple4 num num num num) num (get_pc num num num num) g) n and eq num (@ (tuple4 num num num num) num (get_npc num num num num) g) n+4)).
nextinstr : tm (genpc arrow num) = get_pc num num num num.
gen_control_at : tm (genpc arrow registers arrow form) = lam2 (tuple4 num num num num) (num arrow num) form ([g:tm (tuple4 num num num num)] [r:tm (num arrow num)] eq num (@ num num r opc) (@ (tuple4 num num num num) num (get_opc num num num num) g) and eq num (@ num num r pc) (@ (tuple4 num num num num) num (get_pc num num num num) g) and eq num (@ num num r npc) (@ (tuple4 num num num num) num (get_npc num num num num) g) and eq num (@ num num r icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) g)).
updatepc : tm (registers arrow registers arrow form) = lam2 (num arrow num) (num arrow num) form ([r:tm (num arrow num)] [r':tm (num arrow num)] exists num ([new_npc:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 (@ num num r npc)) four) new_npc and @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (upd4 num num) r) opc) (@ num num r pc)) pc) (@ num num r npc)) npc) new_npc) icnt) (succ (@ num num r icnt))) r')).
block : tm ((num arrow form) arrow num arrow num arrow form) = lam3 (num arrow form) num num form ([f:tm (num arrow form)] [start:tm num] [end:tm num] forall num ([x3:tm num] leq start x3 imp lt x3 end imp @ num form f x3)).
spill_area_rw : tm (registers arrow memory arrow form) = lam2 registers memory form ([r:tregs] [m:tmem] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable r) m) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable r) m))) (plus (@ num num r reg_sp) ml_spillarea)) (plus (@ num num r reg_sp) ml_framesize)).
heap_area_rw : tm (registers arrow memory arrow form) = lam2 registers memory form ([r:tm registers] [m:tm memory] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable r) m) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable r) m))) (@ num num r reg_allocptr)) (plus (@ num num r reg_limitptr) (const 4096))).
spill_area : tm (registers arrow num arrow form) = lam2 registers num form ([x3:tm registers] [x4:tm num] _spill_area x3 x4).
heap_area : tm (registers arrow num arrow form) = lam2 registers num form ([x3:tm registers] [x4:tm num] _heap_area x3 x4).
reserved_regs : tm (num arrow form) = lam num form ([x3:tm num] _reserved_regs x3).
eq_reserved_regs : tm (rel registers registers) = @ (set num) (rel (num arrow num) (num arrow num)) (agree_over_set num num) reserved_regs.
not_follow_cbr : tm registers -> tm form = [r:tm registers] gt (@ num num r icnt) (@ num num r last_cbr).
control_at : tm (num arrow registers arrow form) = lam2 num registers form ([x3:tm num] [r:tm registers] exists genpc ([g:tm genpc] @ registers form (@ genpc (registers arrow form) gen_control_at g) r and @ num form (@ genpc (num arrow form) normalpc g) x3 and not_follow_cbr r)).
stepx : tm (state arrow state arrow form) = lam2 state state form ([x3:tm state] [x4:tm state] _stepx x3 x4).
step* : tm instr = lam4 registers memory registers memory form ([R:tm registers] [M:tm memory] [R':tm registers] [M':tm memory] @ state form (@ state (state arrow form) (@ (state arrow state arrow form) (state arrow state arrow form) (kleene_star state) stepx) (@ memory (pair registers memory) (@ registers (memory arrow pair registers memory) (mkpair registers memory) R) M)) (@ memory (pair registers memory) (@ registers (memory arrow pair registers memory) (mkpair registers memory) R') M')).
safe : tm (registers arrow memory arrow form) = lam2 registers memory form ([R:tm registers] [M:tm memory] forall2 registers memory ([R':tm registers] [M':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* R) M) R') M' imp exists2 registers memory ([R'':tm registers] [M'':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step R') M') R'') M''))).
prog_loaded_at : tm (program arrow num arrow registers arrow memory arrow form) = lam4 program num registers memory form ([prog1:tm program] [start:tm num] [r:tm registers] [m:tm memory] forall3 num num num ([l:tm num] [w:tm num] [start+4l:tm num] @ num form (@ num (num arrow form) prog1 l) w imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 start) (times four l)) start+4l imp eq num (@ num num m start+4l) w and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable r) m) start+4l and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable r) m) start+4l)).
all_fixnums : tm (registers arrow memory arrow form) = lam2 registers memory form ([r:tregs] [m:tmem] forall num ([x3:tnum] @ num form is_word (get_mem m x3) and @ num form is_word (get_reg r x3))).
return_type : tm (num arrow registers arrow form) = lam2 num registers form ([x3:tm num] [r8:tm registers] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo x3) four) zero and @ num form is_word x3 and forall2 registers memory ([r:tm registers] [m:tm memory] @ registers form (@ registers (shadowed_0 registers) eq_reserved_regs r) r8 imp @ registers form (@ num (registers arrow form) control_at x3) r imp @ memory form (@ registers (memory arrow form) safe r) m)).
prog_area : tm (rel3 program num num) = lam3 (num arrow num arrow form) num num form ([prog1:tm (num arrow num arrow form)] [start:tm num] [i1:tm num] exists2 num num ([l:tm num] [w:tm num] @ num form (@ num (num arrow form) prog1 l) w and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 start) (times four l)) i1)).
initial_state : tm (rel4 program num registers memory) = lam4 program num registers memory form ([prog1:tm program] [start:tm num] [r:tm registers] [m:tm memory] @ memory form (@ registers (memory arrow form) initial_machine_state r) m and @ memory form (@ registers (memory arrow form) all_fixnums r) m and @ memory form (@ registers (memory arrow form) spill_area_rw r) m and @ memory form (@ registers (memory arrow form) heap_area_rw r) m and @ (set num) form (@ (set num) (shadowed_0 (set num)) (set_disjoint num) (@ registers (num arrow form) spill_area r)) (@ registers (num arrow form) heap_area r) and @ (set num) form (@ (set num) (shadowed_0 (set num)) (set_disjoint num) (@ registers (num arrow form) heap_area r)) (@ num (shadowed_0 num) (@ program (rel num num) prog_area prog1) start) and @ (set num) form (@ (set num) (shadowed_0 (set num)) (set_disjoint num) (@ num (shadowed_0 num) (@ program (rel num num) prog_area prog1) start)) (@ registers (num arrow form) spill_area r) and eq num (@ num num r reg_stdlink) start and @ num form is_word (plus (@ num num r reg_limitptr) (const 4096)) and @ registers form (@ num (registers arrow form) return_type (plus (@ num num r reg_stdcont) (const 8))) r and geq (plus (@ num num r reg_limitptr) (const 4096)) (@ num num r reg_allocptr) and @ memory form (@ registers (memory arrow form) (@ num (registers arrow memory arrow form) (@ program (num arrow registers arrow memory arrow form) prog_loaded_at prog1) start) r) m and @ registers form (@ num (registers arrow form) control_at start) r).
regmempred_extensional : tm ((registers arrow memory arrow num arrow form) arrow form) = lam ((num arrow num) arrow memory arrow num arrow form) form ([f:tm ((num arrow num) arrow memory arrow num arrow form)] forall5 (num arrow num) (num arrow num) memory (num arrow num) num ([r:tm (num arrow num)] [r':tm (num arrow num)] [m:tm memory] [m':tm (num arrow num)] [n:tm num] @ (num arrow num) form (@ (num arrow num) (shadowed_0 (num arrow num)) (eq_hidden_regs num) r) r' imp forall num ([x3:tm num] not (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable r) m) x3) imp eq num (@ num num m x3) (@ num num m' x3)) imp @ num form (@ memory (num arrow form) (@ (num arrow num) (memory arrow num arrow form) f r) m) n equiv @ num form (@ memory (num arrow form) (@ (num arrow num) (memory arrow num arrow form) f r') m') n)).
isword_and_aligned : tm (num arrow form) = lam num form ([n:tm num] @ num form is_word n and @ num form word_aligned n).
eq_numfn : tm (eqrel (num arrow num)) = @ (eqrel num) (eqrel (num arrow num)) (@ (eqrel num) (eqrel num arrow eqrel (num arrow num)) (eq+ num num) (eq_x num)) (eq_x num).
eqk : tm (eqrel ((num arrow num) arrow (num arrow num) arrow num arrow form)) = @ (eqrel ((num arrow num) arrow num arrow form)) (eqrel ((num arrow num) arrow (num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel ((num arrow num) arrow num arrow form) arrow eqrel ((num arrow num) arrow (num arrow num) arrow num arrow form)) (eq+ (num arrow num) ((num arrow num) arrow num arrow form)) eq_numfn) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)).
valideqv_eq_numfn : pf (@ (eqrel (num arrow num)) form (valideqv (num arrow num)) eq_numfn) = valideqv_eq+ num (eq_x num) num (eq_x num) (valideqv_eq_x num) (valideqv_eq_x num).
valideqv_eqk : pf (@ (eqrel ((num arrow num) arrow (num arrow num) arrow num arrow form)) form (valideqv ((num arrow num) arrow (num arrow num) arrow num arrow form)) eqk) = valideqv_eq+ (num arrow num) eq_numfn ((num arrow num) arrow num arrow form) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) valideqv_eq_numfn (valideqv_eq+ (num arrow num) eq_numfn (num arrow form) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) valideqv_eq_numfn (valideqv_eq+ num (eq_x num) form eq_form (valideqv_eq_x num) valideqv_eq_form)).
eq_regs_i : {R1:tm (num arrow num)} {R2:tm (num arrow num)} ({x3:tm num} pf (eq num (@ num num R1 x3) (@ num num R2 x3))) -> pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R2) = [R1:tm (num arrow num)] [R2:tm (num arrow num)] [p1:{x4:tm num} pf (eq num (@ num num R1 x4) (@ num num R2 x4))] def2_i registers registers ([x3:tm registers] [x4:tm registers] _eq_regs x3 x4) R1 R2 (forall_i num ([x3:tm num] eq num (@ num num R1 x3) (@ num num R2 x3)) ([x5:tm num] p1 x5)).
eq_regs_e : {R1:tm registers} {R2:tm registers} {N:tm num} pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R2) -> pf (eq num (@ num num R1 N) (@ num num R2 N)) = [R1:tm registers] [R2:tm registers] [N:tm num] [p1:pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R2)] forall_e num ([x3:tm num] eqn (get_reg R1 x3) (get_reg R2 x3)) (def2_e registers registers ([x3:tm registers] [x4:tm registers] _eq_regs x3 x4) R1 R2 p1) N.
eq_regs->eq_numfn : {R:tm registers} {R':tm registers} pf (@ registers form (@ registers (registers arrow form) eq_regs R) R') -> pf (@ (num arrow num) form (@ (num arrow num) (shadowed_0 (num arrow num)) eq_numfn R) R') = [R:tm registers] [R':tm registers] [p2:pf (@ registers form (@ registers (registers arrow form) eq_regs R) R')] eq+_i2 num (eq_x num) num R R' (eq_x num) (valideqv_eq_x num) ([x3:tm num] def2_i num num ([x4:tm num] [x5:tm num] eq num x4 x5) (@ num num R x3) (@ num num R' x3) (eq_regs_e R R' x3 p2)).
eq_mem_e : {M1:tm memory} {M2:tm memory} {N:tm num} pf (@ memory form (@ memory (memory arrow form) eq_mem M1) M2) -> pf (eq num (@ num num M1 N) (@ num num M2 N)) = [M1:tm memory] [M2:tm memory] [N:tm num] [x3:pf (@ memory form (@ memory (memory arrow form) eq_mem M1) M2)] eq_regs_e M1 M2 N x3.
eq_mem_reflexive : pf (@ (rel memory memory) form (reflexive memory) eq_mem) = def1_i (rel memory memory) ([x3:tm (rel memory memory)] forall memory ([x4:tm memory] @ memory form (@ memory (memory arrow form) x3 x4) x4)) eq_mem (forall_i memory ([x3:tm memory] @ memory form (@ memory (memory arrow form) (lam2 memory memory form ([x4:tm memory] [x5:tm memory] _eq_mem x4 x5)) x3) x3) ([m:tm memory] def2_i memory memory ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4) m m (forall_i num ([x3:tm num] == num (get_mem m x3) (get_mem m x3)) ([i1:tm num] refl num (get_mem m i1))))).
eq_mem_symmetric : pf (@ (rel memory memory) form (symmetric memory) eq_mem) = def1_i (rel memory memory) ([x3:tm (rel memory memory)] forall2 memory memory ([x4:tm memory] [y:tm memory] @ memory form (@ memory (memory arrow form) x3 x4) y imp @ memory form (@ memory (memory arrow form) x3 y) x4)) eq_mem (forall2_i memory memory ([x3:tm memory] [x4:tm memory] @ memory form (@ memory (memory arrow form) eq_mem x3) x4 imp @ memory form (@ memory (memory arrow form) (lam2 memory memory form ([x5:tm memory] [x6:tm memory] _eq_mem x5 x6)) x4) x3) ([m1:tm memory] [m2:tm memory] imp_i (@ memory form (@ memory (memory arrow form) eq_mem m1) m2) (@ memory form (@ memory (memory arrow form) (lam2 memory memory form ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4)) m2) m1) ([p1:pf (@ memory form (@ memory (memory arrow form) eq_mem m1) m2)] def2_i memory memory ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4) m2 m1 (forall_i num ([x3:tm num] == num (get_mem m2 x3) (get_mem m1 x3)) ([i1:tm num] symm num (get_mem m1 i1) (get_mem m2 i1) (forall_e num ([x3:tm num] eqn (get_mem m1 x3) (get_mem m2 x3)) (def2_e memory memory ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4) m1 m2 p1) i1)))))).
eq_mem_transitive : pf (@ (rel memory memory) form (transitive memory) eq_mem) = def1_i (rel memory memory) ([x3:tm (rel memory memory)] forall3 memory memory memory ([x4:tm memory] [y:tm memory] [z1:tm memory] @ memory form (@ memory (memory arrow form) x3 x4) y imp @ memory form (@ memory (memory arrow form) x3 y) z1 imp @ memory form (@ memory (memory arrow form) x3 x4) z1)) eq_mem (forall3_i memory memory memory ([x3:tm memory] [x4:tm memory] [x5:tm memory] @ memory form (@ memory (memory arrow form) eq_mem x3) x4 imp @ memory form (@ memory (memory arrow form) eq_mem x4) x5 imp @ memory form (@ memory (memory arrow form) (lam2 memory memory form ([x6:tm memory] [x7:tm memory] _eq_mem x6 x7)) x3) x5) ([m1:tm memory] [m2:tm memory] [m3:tm memory] imp2_i (@ memory form (@ memory (memory arrow form) eq_mem m1) m2) (@ memory form (@ memory (memory arrow form) eq_mem m2) m3) (@ memory form (@ memory (memory arrow form) (lam2 memory memory form ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4)) m1) m3) ([p1:pf (@ memory form (@ memory (memory arrow form) eq_mem m1) m2)] [p2:pf (@ memory form (@ memory (memory arrow form) eq_mem m2) m3)] def2_i memory memory ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4) m1 m3 (forall_i num ([x3:tm num] == num (get_mem m1 x3) (get_mem m3 x3)) ([i1:tm num] trans num (get_mem m1 i1) (get_mem m2 i1) (get_mem m3 i1) (forall_e num ([x3:tm num] eqn (get_mem m1 x3) (get_mem m2 x3)) (def2_e memory memory ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4) m1 m2 p1) i1) (forall_e num ([x3:tm num] eqn (get_mem m2 x3) (get_mem m3 x3)) (def2_e memory memory ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4) m2 m3 p2) i1)))))).
valideqv_eq_mem : pf (@ (eqrel memory) form (valideqv memory) eq_mem) = def1_i (eqrel memory) ([x3:tm (eqrel memory)] @ (rel memory memory) form (reflexive memory) x3 and @ (rel memory memory) form (symmetric memory) x3 and @ (rel memory memory) form (transitive memory) x3) eq_mem (and3_i (@ (rel memory memory) form (reflexive memory) eq_mem) (@ (rel memory memory) form (symmetric memory) eq_mem) (@ (rel memory memory) form (transitive memory) eq_mem) eq_mem_reflexive eq_mem_symmetric eq_mem_transitive).
eq_mem_refl : {M:tm memory} pf (@ memory form (@ memory (memory arrow form) eq_mem M) M) = [M:tm memory] eqv_refl memory eq_mem M valideqv_eq_mem.
eq_mem_symm : {M1:tm memory} {M2:tm memory} pf (@ memory form (@ memory (memory arrow form) eq_mem M1) M2) -> pf (@ memory form (@ memory (memory arrow form) eq_mem M2) M1) = [M1:tm memory] [M2:tm memory] [x3:pf (@ memory form (@ memory (memory arrow form) eq_mem M1) M2)] eqv_symm memory eq_mem M1 M2 valideqv_eq_mem x3.
eq_mem_trans : {M1:tm memory} {M2:tm memory} {M3:tm memory} pf (@ memory form (@ memory (memory arrow form) eq_mem M1) M2) -> pf (@ memory form (@ memory (memory arrow form) eq_mem M2) M3) -> pf (@ memory form (@ memory (memory arrow form) eq_mem M1) M3) = [M1:tm memory] [M2:tm memory] [M3:tm memory] [x3:pf (@ memory form (@ memory (memory arrow form) eq_mem M1) M2)] [x4:pf (@ memory form (@ memory (memory arrow form) eq_mem M2) M3)] eqv_trans memory eq_mem M1 M2 M3 valideqv_eq_mem x3 x4.
eq_mem_congr : {M1:tm memory} {M2:tm memory} {X:tm num} pf (@ memory form (@ memory (memory arrow form) eq_mem M1) M2) -> pf (eq num (@ num num M1 X) (@ num num M2 X)) = [M1:tm memory] [M2:tm memory] [X:tm num] [p1:pf (@ memory form (@ memory (memory arrow form) eq_mem M1) M2)] forall_e num ([x3:tm num] eqn (get_mem M1 x3) (get_mem M2 x3)) (def2_e memory memory ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4) M1 M2 p1) X.
valideqv_eq_regs : pf (@ (eqrel registers) form (valideqv registers) eq_regs) = valideqv_eq_mem.
eq_reg_refl : {R:tm registers} pf (@ registers form (@ registers (registers arrow form) eq_regs R) R) = [R:tm registers] eq_mem_refl R.
eq_reg_symm : {R1:tm registers} {R2:tm registers} pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R2) -> pf (@ memory form (@ memory (memory arrow form) eq_mem R2) R1) = [R1:tm registers] [R2:tm registers] [x3:pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R2)] eq_mem_symm R1 R2 x3.
eq_reg_trans : {R1:tm registers} {R2:tm registers} {R3:tm registers} pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R2) -> pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R3) -> pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R3) = [R1:tm registers] [R2:tm registers] [R3:tm registers] [x3:pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R2)] [x4:pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R3)] eq_mem_trans R1 R2 R3 x3 x4.
eq_reg_congr : {R1:tm registers} {R2:tm registers} {X:tm num} pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R2) -> pf (eq num (@ num num R1 X) (@ num num R2 X)) = [R1:tm registers] [R2:tm registers] [X:tm num] [x3:pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R2)] eq_mem_congr R1 R2 X x3.
eq_regs->agree_over_set : {R:tm registers} {R':tm registers} {S:tm (set num)} pf (@ registers form (@ registers (registers arrow form) eq_regs R) R') -> pf (@ (num arrow num) form (@ (num arrow num) (shadowed_0 (num arrow num)) (@ (set num) (rel (num arrow num) (num arrow num)) (agree_over_set num num) S) R) R') = [R:tm registers] [R':tm registers] [S:tm (set num)] [p2:pf (@ registers form (@ registers (registers arrow form) eq_regs R) R')] agree_over_set_i num S num R R' ([x3:tm num] [p4:pf (@ num form S x3)] eq_regs_e R R' x3 p2).
eq_mem->agree_over_set : {R:tm memory} {R':tm memory} {S:tm (set num)} pf (@ memory form (@ memory (memory arrow form) eq_mem R) R') -> pf (@ (num arrow num) form (@ (num arrow num) (shadowed_0 (num arrow num)) (@ (set num) (rel (num arrow num) (num arrow num)) (agree_over_set num num) S) R) R') = [R:tm memory] [R':tm memory] [S:tm (set num)] [x3:pf (@ memory form (@ memory (memory arrow form) eq_mem R) R')] eq_regs->agree_over_set R R' S x3.
upd_congr : {R1:tm registers} {R1':tm registers} {R2:tm registers} {R2':tm registers} {D:tm num} {D':tm num} {X:tm num} {X':tm num} pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R1') -> pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R2') -> pf (eq num D D') -> pf (eq num X X') -> pf (@ (num arrow num) form (@ num (shadowed_0 (num arrow num)) (@ num (rel num (num arrow num)) (@ (num arrow num) (rel3 num num (num arrow num)) (upd num num) R1') D') X') R2') -> pf (@ (num arrow num) form (@ num (shadowed_0 (num arrow num)) (@ num (rel num (num arrow num)) (@ (num arrow num) (rel3 num num (num arrow num)) (upd num num) R1) D) X) R2) = [R1:tm registers] [R1':tm registers] [R2:tm registers] [R2':tm registers] [D:tm num] [D':tm num] [X:tm num] [X':tm num] [p1:pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R1')] [p2:pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R2')] [p3:pf (eq num D D')] [p4:pf (eq num X X')] [p5:pf (@ (num arrow num) form (@ num (shadowed_0 (num arrow num)) (@ num (rel num (num arrow num)) (@ (num arrow num) (rel3 num num (num arrow num)) (upd num num) R1') D') X') R2')] cut (@ (num arrow num) form (@ num (shadowed_0 (num arrow num)) (@ num (rel num (num arrow num)) (@ (num arrow num) (rel3 num num (num arrow num)) (upd num num) R1) D') X') R2) (@ (num arrow num) form (@ num (shadowed_0 (num arrow num)) (@ num (rel num (num arrow num)) (@ (num arrow num) (rel3 num num (num arrow num)) (upd num num) R1) D) X) R2) (eq_upd num num R1' R1 R2' R2 D' X' (def2_e memory memory ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4) R1' R1 (eq_reg_symm R1 R1' p1)) (def2_e memory memory ([x3:tm memory] [x4:tm memory] _eq_mem x3 x4) R2' R2 (eq_reg_symm R2 R2' p2)) p5) ([p6:pf (@ (num arrow num) form (@ num (shadowed_0 (num arrow num)) (@ num (rel num (num arrow num)) (@ (num arrow num) (rel3 num num (num arrow num)) (upd num num) R1) D') X') R2)] congr2 num num D D' X X' ([u:tm num] [v1:tm num] @ (num arrow num) form (@ num (shadowed_0 (num arrow num)) (@ num (rel num (num arrow num)) (@ (num arrow num) (rel3 num num (num arrow num)) (upd num num) R1) u) v1) R2) p3 p4 p6).
exists_upd : {R:tm (num arrow num)} {X:tm num} {Y:tm num} pf (exists (num arrow num) ([R':tm (num arrow num)] @ (num arrow num) form (@ num (shadowed_0 (num arrow num)) (@ num (rel num (num arrow num)) (@ (num arrow num) (rel3 num num (num arrow num)) (upd num num) R) X) Y) R')) = [R:tm (num arrow num)] [X:tm num] [Y:tm num] exists_i (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num (shadowed_0 (num arrow num)) (@ num (rel num (num arrow num)) (@ (num arrow num) (rel3 num num (num arrow num)) (upd num num) R) X) Y) x3) (lam num num ([I:tm num] ifeq I X Y (@ num num R I))) (def4_i (num arrow num) num num (num arrow num) ([x3:tm (num arrow num)] [x4:tm num] [x5:tm num] [x6:tm (num arrow num)] forall num ([Z:tm num] if (eq num Z x4) (eq num (@ num num x6 Z) x5) (eq num (@ num num x6 Z) (@ num num x3 Z)))) R X Y (lam num num ([I:tm num] ifeq I X Y (@ num num R I))) (forall_i num ([x3:tm num] if (eq num x3 X) (eq num (@ num num (lam num num ([x4:tm num] ifeq x4 X Y (@ num num R x4))) x3) Y) (eq num (@ num num (lam num num ([x4:tm num] ifeq x4 X Y (@ num num R x4))) x3) (@ num num R x3))) ([z1:tm num] if_i (eq num z1 X) (eq num (@ num num (lam num num ([x3:tm num] ifeq x3 X Y (@ num num R x3))) z1) Y) (eq num (@ num num (lam num num ([x3:tm num] ifeq x3 X Y (@ num num R x3))) z1) (@ num num R z1)) ([p1:pf (eq num z1 X)] congr num (@ num num (lam num num ([x3:tm num] ifeq x3 X Y (@ num num R x3))) z1) (ifeq z1 X Y (@ num num R z1)) ([v1:tm num] eq num v1 Y) (beta num num ([x3:tm num] ifeq x3 X Y (@ num num R x3)) z1) (ifeq_e1 z1 X Y (@ num num R z1) p1)) ([p2:pf (not (eq num z1 X))] congr num (@ num num (lam num num ([x3:tm num] ifeq x3 X Y (@ num num R x3))) z1) (ifeq z1 X Y (@ num num R z1)) ([v2:tm num] eq num v2 (@ num num R z1)) (beta num num ([x3:tm num] ifeq x3 X Y (@ num num R x3)) z1) (ifeq_e2 z1 X Y (@ num num R z1) p2))))).
upd/cc_e : {X1:tp} {X2:tp} {X3:tp} {V1:tm X1} {X4:tm X2} {K:tm (X3 arrow (X1 arrow X2) arrow X1 arrow form)} {R:tm X3} {R':tm (X1 arrow X2)} {V:tm X1} pf (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X3 ((X1 arrow X2) arrow X1 arrow form) (@ (X3 arrow (X1 arrow X2) arrow X1 arrow form) (X3 arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 ((X3 arrow (X1 arrow X2) arrow X1 arrow form) arrow X3 arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow (X3 arrow (X1 arrow X2) arrow X1 arrow form) arrow X3 arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 X3) V1) X4) K) R) R') V) -> pf (eq X1 V V1) -> pf (eq X2 (@ X1 X2 R' V1) X4) = [X1:tp] [X2:tp] [X3:tp] [V1:tm X1] [X4:tm X2] [K:tm (X3 arrow (X1 arrow X2) arrow X1 arrow form)] [R:tm X3] [R':tm (X1 arrow X2)] [V:tm X1] [p1:pf (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X3 ((X1 arrow X2) arrow X1 arrow form) (@ (X3 arrow (X1 arrow X2) arrow X1 arrow form) (X3 arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 ((X3 arrow (X1 arrow X2) arrow X1 arrow form) arrow X3 arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow (X3 arrow (X1 arrow X2) arrow X1 arrow form) arrow X3 arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 X3) V1) X4) K) R) R') V)] [p2:pf (eq X1 V V1)] if_e1 (eq X1 V V1) (eq X2 (@ X1 X2 R' V1) X4) (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X3 ((X1 arrow X2) arrow X1 arrow form) K R) R') V) (def6_e X1 (X1 arrow X2) X3 (X3 arrow (X1 arrow X2) arrow X1 arrow form) X2 X1 ([x3:tm X1] [x4:tm X2] [x5:tm (X3 arrow (X1 arrow X2) arrow X1 arrow form)] [x6:tm X3] [x7:tm (X1 arrow X2)] [x8:tm X1] if (eq X1 x8 x3) (eq X2 (@ X1 X2 x7 x3) x4) (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X3 ((X1 arrow X2) arrow X1 arrow form) x5 x6) x7) x8)) V1 X4 K R R' V p1) p2.
upd/cc_e2 : {X1:tp} {X2:tp} {X3:tp} {V1:tm X1} {X4:tm X2} {K:tm (X3 arrow (X1 arrow X2) arrow X1 arrow form)} {R:tm X3} {R':tm (X1 arrow X2)} {V:tm X1} pf (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X3 ((X1 arrow X2) arrow X1 arrow form) (@ (X3 arrow (X1 arrow X2) arrow X1 arrow form) (X3 arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 ((X3 arrow (X1 arrow X2) arrow X1 arrow form) arrow X3 arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow (X3 arrow (X1 arrow X2) arrow X1 arrow form) arrow X3 arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 X3) V1) X4) K) R) R') V) -> pf (neq X1 V V1) -> pf (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X3 ((X1 arrow X2) arrow X1 arrow form) K R) R') V) = [X1:tp] [X2:tp] [X3:tp] [V1:tm X1] [X4:tm X2] [K:tm (X3 arrow (X1 arrow X2) arrow X1 arrow form)] [R:tm X3] [R':tm (X1 arrow X2)] [V:tm X1] [p1:pf (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X3 ((X1 arrow X2) arrow X1 arrow form) (@ (X3 arrow (X1 arrow X2) arrow X1 arrow form) (X3 arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 ((X3 arrow (X1 arrow X2) arrow X1 arrow form) arrow X3 arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow (X3 arrow (X1 arrow X2) arrow X1 arrow form) arrow X3 arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 X3) V1) X4) K) R) R') V)] [p2:pf (neq X1 V V1)] if_e2 (eq X1 V V1) (eq X2 (@ X1 X2 R' V1) X4) (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X3 ((X1 arrow X2) arrow X1 arrow form) K R) R') V) (def6_e X1 (X1 arrow X2) X3 (X3 arrow (X1 arrow X2) arrow X1 arrow form) X2 X1 ([x3:tm X1] [x4:tm X2] [x5:tm (X3 arrow (X1 arrow X2) arrow X1 arrow form)] [x6:tm X3] [x7:tm (X1 arrow X2)] [x8:tm X1] if (eq X1 x8 x3) (eq X2 (@ X1 X2 x7 x3) x4) (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X3 ((X1 arrow X2) arrow X1 arrow form) x5 x6) x7) x8)) V1 X4 K R R' V p1) p2.
upd/cc_i : {X1:tp} {V:tm X1} {V1:tm X1} {X2:tp} {R':tm (X1 arrow X2)} {X3:tm X2} {X4:tp} {K:tm (X4 arrow (X1 arrow X2) arrow X1 arrow form)} {R:tm X4} (pf (eq X1 V V1) -> pf (eq X2 (@ X1 X2 R' V1) X3)) -> (pf (neq X1 V V1) -> pf (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X4 ((X1 arrow X2) arrow X1 arrow form) K R) R') V)) -> pf (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X4 ((X1 arrow X2) arrow X1 arrow form) (@ (X4 arrow (X1 arrow X2) arrow X1 arrow form) (X4 arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 ((X4 arrow (X1 arrow X2) arrow X1 arrow form) arrow X4 arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow (X4 arrow (X1 arrow X2) arrow X1 arrow form) arrow X4 arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 X4) V1) X3) K) R) R') V) = [X1:tp] [V:tm X1] [V1:tm X1] [X2:tp] [R':tm (X1 arrow X2)] [X3:tm X2] [X4:tp] [K:tm (X4 arrow (X1 arrow X2) arrow X1 arrow form)] [R:tm X4] [f1:pf (eq X1 V V1) -> pf (eq X2 (@ X1 X2 R' V1) X3)] [f2:pf (neq X1 V V1) -> pf (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X4 ((X1 arrow X2) arrow X1 arrow form) K R) R') V)] def6_i X1 X2 (X4 arrow (X1 arrow X2) arrow X1 arrow form) X4 (X1 arrow X2) X1 ([x3:tm X1] [x4:tm X2] [x5:tm (X4 arrow (X1 arrow X2) arrow X1 arrow form)] [x6:tm X4] [x7:tm (X1 arrow X2)] [x8:tm X1] if (eq X1 x8 x3) (eq X2 (@ X1 X2 x7 x3) x4) (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X4 ((X1 arrow X2) arrow X1 arrow form) x5 x6) x7) x8)) V1 X3 K R R' V (if_i (eq X1 V V1) (eq X2 (@ X1 X2 R' V1) X3) (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ X4 ((X1 arrow X2) arrow X1 arrow form) K R) R') V) ([p1:pf (eq X1 V V1)] f1 p1) ([p1:pf (neq X1 V V1)] f2 p1)).
upd/cc_congr : {D:tm num} {D':tm num} {X:tm num} {X':tm num} {K:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)} {K':tm ((num arrow num) arrow (num arrow num) arrow num arrow form)} pf (eq num D D') -> pf (eq num X X') -> pf (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) eqk K) K') -> pf (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) eqk (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D) X) K)) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D') X') K')) = [D:tm num] [D':tm num] [X:tm num] [X':tm num] [K:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [K':tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [p2:pf (eq num D D')] [p4:pf (eq num X X')] [p6:pf (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) eqk K) K')] cut3 (eq num D D') (eq num X X') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) eqk K) K') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) (@ (eqrel ((num arrow num) arrow num arrow form)) (eqrel ((num arrow num) arrow (num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel ((num arrow num) arrow num arrow form) arrow eqrel ((num arrow num) arrow (num arrow num) arrow num arrow form)) (eq+ (num arrow num) ((num arrow num) arrow num arrow form)) eq_numfn) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form))) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D) X) K)) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x3:tm num] [x4:tm num] [x5:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x6:tm (num arrow num)] [x7:tm (num arrow num)] [x8:tm num] if (eq num x8 x3) (eq num (@ num num x7 x3) x4) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x5 x6) x7) x8))) D') X') K')) p2 p4 p6 ([x3:pf (eq num D D')] [x4:pf (eq num X X')] [x5:pf (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) eqk K) K')] cut (@ (eqrel (num arrow form)) form (valideqv (num arrow form)) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) (@ (eqrel ((num arrow num) arrow num arrow form)) (eqrel ((num arrow num) arrow (num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel ((num arrow num) arrow num arrow form) arrow eqrel ((num arrow num) arrow (num arrow num) arrow num arrow form)) (eq+ (num arrow num) ((num arrow num) arrow num arrow form)) eq_numfn) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form))) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D) X) K)) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D') X') K')) (valideqv_eq+ num (eq_x num) form eq_form (valideqv_eq_x num) valideqv_eq_form) ([p7:pf (@ (eqrel (num arrow form)) form (valideqv (num arrow form)) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form))] cut (@ (eqrel ((num arrow num) arrow num arrow form)) form (valideqv ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form))) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) (@ (eqrel ((num arrow num) arrow num arrow form)) (eqrel ((num arrow num) arrow (num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel ((num arrow num) arrow num arrow form) arrow eqrel ((num arrow num) arrow (num arrow num) arrow num arrow form)) (eq+ (num arrow num) ((num arrow num) arrow num arrow form)) eq_numfn) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form))) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D) X) K)) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D') X') K')) (valideqv_eq+ (num arrow num) eq_numfn (num arrow form) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) valideqv_eq_numfn p7) ([p8:pf (@ (eqrel ((num arrow num) arrow num arrow form)) form (valideqv ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)))] eq+_i2 ((num arrow num) arrow num arrow form) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (num arrow num) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D) X) K) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D') X') K') eq_numfn p8 ([f:tm (num arrow num)] eq+_i2 (num arrow form) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (num arrow num) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D) X) K) f) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D') X') K') f) eq_numfn p7 ([f':tm (num arrow num)] eq+_i2 form eq_form num (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D) X) K) f) f') (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D') X') K') f) f') (eq_x num) valideqv_eq_form ([z1:tm num] cut (@ form form (@ form (shadowed_0 form) eq_form (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') z1)) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1)) (@ form form (@ form (shadowed_0 form) eq_form (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D) X) K) f) f') z1)) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D') X') K') f) f') z1)) (eq+_congr num (eq_x num) form eq_form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1 (valideqv_eq_x num) valideqv_eq_form (eq+_congr (num arrow num) eq_numfn (num arrow form) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f' valideqv_eq_numfn p7 (eq+_congr (num arrow num) eq_numfn ((num arrow num) arrow num arrow form) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) K K' f valideqv_eq_numfn p8 p6))) ([p9:pf (@ form form (@ form (shadowed_0 form) eq_form (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') z1)) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1))] eq_form_i' (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D) X) K) f) f') z1) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D') X') K') f) f') z1) ([p10:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D) X) K) f) f') z1)] if_e (eq num z1 D) (eq num (@ num num f' D) X) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') z1) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D') X') K') f) f') z1) (def6_e num (num arrow num) (num arrow num) ((num arrow num) arrow (num arrow num) arrow num arrow form) num num ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11)) D X K f f' z1 p10) ([p12:pf (eq num z1 D)] [p14:pf (eq num (@ num num f' D) X)] def6_i num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11)) D' X' K' f f' z1 (if_i1 (== num z1 D') (== num (@ num num f' D') X') (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1) (trans num z1 D D' p12 p2) (trans num (@ num num f' D') (@ num num f' D) X' (congr_app_2 num D' D num f' (symm num D D' p2)) (trans num (@ num num f' D) X X' p14 p4)))) ([p12:pf (neq num z1 D)] [p14:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') z1)] cut (!= num z1 D') (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D') X') K') f) f') z1) (trans_neq_eq num z1 D D' p12 p2) ([p16:pf (neq num z1 D')] cut (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D') X') K') f) f') z1) (eq_form_e1 (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') z1) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1) p9 p14) ([p20:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1)] def6_i num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11)) D' X' K' f f' z1 (if_i2 (eq num z1 D') (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1) (eq num (@ num num f' D') X') p16 p20))))) ([p10:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D') X') K') f) f') z1)] if_e (eq num z1 D') (eq num (@ num num f' D') X') (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D) X) K) f) f') z1) (def6_e num (num arrow num) (num arrow num) ((num arrow num) arrow (num arrow num) arrow num arrow form) num num ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11)) D' X' K' f f' z1 p10) ([p12:pf (eq num z1 D')] [p14:pf (eq num (@ num num f' D') X')] def6_i num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11)) D X K f f' z1 (if_i1 (== num z1 D) (== num (@ num num f' D) X) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') z1) (trans num z1 D' D p12 (symm num D D' p2)) (trans num (@ num num f' D) (@ num num f' D') X (congr_app_2 num D D' num f' p2) (trans num (@ num num f' D') X' X p14 (symm num X X' p4))))) ([p12:pf (neq num z1 D')] [p14:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1)] cut (!= num z1 D) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D) X) K) f) f') z1) (trans_neq_eq num z1 D' D p12 (symm num D D' p2)) ([p16:pf (neq num z1 D)] cut (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') z1) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (lam6 num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num form ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11))) D) X) K) f) f') z1) (eq_form_e2 (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') z1) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K' f) f') z1) p9 p14) ([p20:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') z1)] def6_i num num ((num arrow num) arrow (num arrow num) arrow num arrow form) (num arrow num) (num arrow num) num ([x6:tm num] [x7:tm num] [x8:tm ((num arrow num) arrow (num arrow num) arrow num arrow form)] [x9:tm (num arrow num)] [x10:tm (num arrow num)] [x11:tm num] if (eq num x11 x6) (eq num (@ num num x10 x6) x7) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) x8 x9) x10) x11)) D X K f f' z1 (if_i2 (eq num z1 D) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) K f) f') z1) (eq num (@ num num f' D) X) p16 p20)))))))))))).
k0_congr_aux1 : {R:tm registers} {R':tm registers} pf (@ registers form (@ registers (registers arrow form) eq_regs R) R') -> pf (@ ((num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R)) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R')) = [R:tm registers] [R':tm registers] [p2:pf (@ registers form (@ registers (registers arrow form) eq_regs R) R')] cut (@ registers form (@ registers (registers arrow form) eq_regs R) R') (@ ((num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R)) (@ (num arrow num) ((num arrow num) arrow num arrow form) (lam3 (num arrow num) (num arrow num) num form ([x3:tm (num arrow num)] [x4:tm (num arrow num)] [x5:tm num] _k0 num num x3 x4 x5)) R')) p2 ([x3:pf (@ registers form (@ registers (registers arrow form) eq_regs R) R')] eq+_i2 (num arrow form) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (num arrow num) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R) (@ (num arrow num) ((num arrow num) arrow num arrow form) (lam3 (num arrow num) (num arrow num) num form ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6)) R') eq_numfn (valideqv_eq+ num (eq_x num) form eq_form (valideqv_eq_x num) valideqv_eq_form) ([r8:tm (num arrow num)] eq+_i2 form eq_form num (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R) r8) (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (lam3 (num arrow num) (num arrow num) num form ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6)) R') r8) (eq_x num) valideqv_eq_form ([z1:tm num] eq_form_i' (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R) r8) z1) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (lam3 (num arrow num) (num arrow num) num form ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6)) R') r8) z1) ([p6:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R) r8) z1)] def3_i (num arrow num) (num arrow num) num ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6) R' r8 z1 (trans num (_@ num num r8 z1) (_@ num num R z1) (@ num num R' z1) (def3_e num (num arrow num) (num arrow num) ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6) R r8 z1 p6) (eq_regs_e R R' z1 p2))) ([p6:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R') r8) z1)] def3_i (num arrow num) (num arrow num) num ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6) R r8 z1 (trans num (_@ num num r8 z1) (_@ num num R' z1) (@ num num R z1) (def3_e num (num arrow num) (num arrow num) ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6) R' r8 z1 p6) (symm num (@ num num R z1) (@ num num R' z1) (eq_regs_e R R' z1 p2))))))).
upd/cc_congr_aux1 : {R:tm registers} {R':tm registers} {K:tm (registers arrow (num arrow num) arrow num arrow form)} {D:tm num} {X:tm num} pf (@ registers form (@ registers (registers arrow form) eq_regs R) R') -> pf (@ ((num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ registers ((num arrow num) arrow num arrow form) K R)) (@ registers ((num arrow num) arrow num arrow form) K R')) -> pf (@ ((num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (upd/cc num num registers) D) X) K) R)) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (upd/cc num num registers) D) X) K) R')) = [R:tm registers] [R':tm registers] [K:tm (registers arrow (num arrow num) arrow num arrow form)] [D:tm num] [X:tm num] [p2:pf (@ registers form (@ registers (registers arrow form) eq_regs R) R')] [p4:pf (@ ((num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ registers ((num arrow num) arrow num arrow form) K R)) (@ registers ((num arrow num) arrow num arrow form) K R'))] cut2 (@ registers form (@ registers (registers arrow form) eq_regs R) R') (@ ((num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ registers ((num arrow num) arrow num arrow form) K R)) (@ registers ((num arrow num) arrow num arrow form) K R')) (@ ((num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (upd/cc num num registers) D) X) K) R)) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (lam6 num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num form ([x3:tm num] [x4:tm num] [x5:tm (registers arrow (num arrow num) arrow num arrow form)] [x6:tm registers] [x7:tm (num arrow num)] [x8:tm num] if (eq num x8 x3) (eq num (@ num num x7 x3) x4) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x5 x6) x7) x8))) D) X) K) R')) p2 p4 ([x3:pf (@ registers form (@ registers (registers arrow form) eq_regs R) R')] [x4:pf (@ ((num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ registers ((num arrow num) arrow num arrow form) K R)) (@ registers ((num arrow num) arrow num arrow form) K R'))] eq+_i2 (num arrow form) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (num arrow num) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (upd/cc num num registers) D) X) K) R) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (lam6 num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R') eq_numfn (valideqv_eq+ num (eq_x num) form eq_form (valideqv_eq_x num) valideqv_eq_form) ([r8:tm (num arrow num)] eq+_i2 form eq_form num (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (upd/cc num num registers) D) X) K) R) r8) (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (lam6 num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R') r8) (eq_x num) valideqv_eq_form ([z1:tm num] eq_form_i' (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (upd/cc num num registers) D) X) K) R) r8) z1) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (lam6 num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R') r8) z1) ([p6:pf (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (upd/cc num num registers) D) X) K) R) r8) z1)] if_e (eq num z1 D) (eq num (@ num num r8 D) X) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R) r8) z1) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (lam6 num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R') r8) z1) (def6_e num (num arrow num) registers (registers arrow (num arrow num) arrow num arrow form) num num ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R r8 z1 p6) ([p8:pf (eq num z1 D)] [p10:pf (eq num (@ num num r8 D) X)] def6_i num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R' r8 z1 (if_i1 (eq num z1 D) (eq num (@ num num r8 D) X) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R') r8) z1) p8 p10)) ([p8:pf (neq num z1 D)] [p10:pf (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R) r8) z1)] cut (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R') r8) z1) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (lam6 num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R') r8) z1) (eq_form_e1 (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R) r8) z1) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R') r8) z1) (eq+_congr num (eq_x num) form eq_form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R) r8) (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R') r8) z1 (valideqv_eq_x num) valideqv_eq_form (eq+_congr (num arrow num) eq_numfn (num arrow form) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ registers ((num arrow num) arrow num arrow form) K R) (@ registers ((num arrow num) arrow num arrow form) K R') r8 valideqv_eq_numfn (valideqv_eq+ num (eq_x num) form eq_form (valideqv_eq_x num) valideqv_eq_form) p4)) p10) ([p12:pf (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R') r8) z1)] def6_i num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R' r8 z1 (if_i2 (eq num z1 D) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R') r8) z1) (eq num (@ num num r8 D) X) p8 p12)))) ([p6:pf (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (upd/cc num num registers) D) X) K) R') r8) z1)] if_e (eq num z1 D) (eq num (@ num num r8 D) X) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R') r8) z1) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (lam6 num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R) r8) z1) (def6_e num (num arrow num) registers (registers arrow (num arrow num) arrow num arrow form) num num ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R' r8 z1 p6) ([p8:pf (eq num z1 D)] [p10:pf (eq num (@ num num r8 D) X)] def6_i num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R r8 z1 (if_i1 (eq num z1 D) (eq num (@ num num r8 D) X) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R) r8) z1) p8 p10)) ([p8:pf (neq num z1 D)] [p10:pf (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R') r8) z1)] cut (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R) r8) z1) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (lam6 num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R) r8) z1) (eq_form_e2 (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R) r8) z1) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R') r8) z1) (eq+_congr num (eq_x num) form eq_form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R) r8) (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R') r8) z1 (valideqv_eq_x num) valideqv_eq_form (eq+_congr (num arrow num) eq_numfn (num arrow form) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ registers ((num arrow num) arrow num arrow form) K R) (@ registers ((num arrow num) arrow num arrow form) K R') r8 valideqv_eq_numfn (valideqv_eq+ num (eq_x num) form eq_form (valideqv_eq_x num) valideqv_eq_form) p4)) p10) ([p12:pf (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R) r8) z1)] def6_i num num (registers arrow (num arrow num) arrow num arrow form) registers (num arrow num) num ([x5:tm num] [x6:tm num] [x7:tm (registers arrow (num arrow num) arrow num arrow form)] [x8:tm registers] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R r8 z1 (if_i2 (eq num z1 D) (@ num form (@ (num arrow num) (num arrow form) (@ registers ((num arrow num) arrow num arrow form) K R) r8) z1) (eq num (@ num num r8 D) X) p8 p12))))))).
k0_congr_aux2 : {R2:tm registers} {R2':tm registers} {R1:tm (num arrow num)} pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R2') -> pf (@ (num arrow form) form (@ (num arrow form) (shadowed_0 (num arrow form)) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R1) R2)) (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R1) R2')) = [R2:tm registers] [R2':tm registers] [R1:tm (num arrow num)] [p2:pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R2')] cut (@ registers form (@ registers (registers arrow form) eq_regs R2) R2') (@ (num arrow form) form (@ (num arrow form) (shadowed_0 (num arrow form)) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R1) R2)) (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (lam3 (num arrow num) (num arrow num) num form ([x3:tm (num arrow num)] [x4:tm (num arrow num)] [x5:tm num] _k0 num num x3 x4 x5)) R1) R2')) p2 ([x3:pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R2')] eq+_i2 form eq_form num (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R1) R2) (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (lam3 (num arrow num) (num arrow num) num form ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6)) R1) R2') (eq_x num) valideqv_eq_form ([z1:tm num] eq_form_i' (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R1) R2) z1) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (lam3 (num arrow num) (num arrow num) num form ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6)) R1) R2') z1) ([p6:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R1) R2) z1)] def3_i (num arrow num) (num arrow num) num ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6) R1 R2' z1 (trans num (@ num num R2' z1) (@ num num R2 z1) (_@ num num R1 z1) (symm num (@ num num R2 z1) (@ num num R2' z1) (eq_regs_e R2 R2' z1 p2)) (def3_e num (num arrow num) (num arrow num) ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6) R1 R2 z1 p6))) ([p6:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (k0 num num) R1) R2') z1)] def3_i (num arrow num) (num arrow num) num ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6) R1 R2 z1 (trans num (@ num num R2 z1) (@ num num R2' z1) (_@ num num R1 z1) (eq_regs_e R2 R2' z1 p2) (def3_e num (num arrow num) (num arrow num) ([x4:tm (num arrow num)] [x5:tm (num arrow num)] [x6:tm num] _k0 num num x4 x5 x6) R1 R2' z1 p6))))).
upd/cc_congr_aux2 : {R2:tm registers} {R2':tm registers} {X1:tp} {K:tm (X1 arrow registers arrow num arrow form)} {R1:tm X1} {D:tm num} {X:tm num} pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R2') -> pf (@ (num arrow form) form (@ (num arrow form) (shadowed_0 (num arrow form)) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2)) (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2')) -> pf (@ (num arrow form) form (@ (num arrow form) (shadowed_0 (num arrow form)) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) R2)) (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) R2')) = [R2:tm registers] [R2':tm registers] [X1:tp] [K:tm (X1 arrow registers arrow num arrow form)] [R1:tm X1] [D:tm num] [X:tm num] [p2:pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R2')] [p4:pf (@ (num arrow form) form (@ (num arrow form) (shadowed_0 (num arrow form)) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2)) (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2'))] cut2 (@ registers form (@ registers (registers arrow form) eq_regs R2) R2') (@ (num arrow form) form (@ (num arrow form) (shadowed_0 (num arrow form)) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2)) (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2')) (@ (num arrow form) form (@ (num arrow form) (shadowed_0 (num arrow form)) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) R2)) (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (lam6 num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num form ([x3:tm num] [x4:tm num] [x5:tm (X1 arrow (num arrow num) arrow num arrow form)] [x6:tm X1] [x7:tm (num arrow num)] [x8:tm num] if (eq num x8 x3) (eq num (@ num num x7 x3) x4) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x5 x6) x7) x8))) D) X) K) R1) R2')) p2 p4 ([x3:pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R2')] [x4:pf (@ (num arrow form) form (@ (num arrow form) (shadowed_0 (num arrow form)) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2)) (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2'))] eq+_i2 form eq_form num (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) R2) (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (lam6 num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R1) R2') (eq_x num) valideqv_eq_form ([z1:tm num] eq_form_i' (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) R2) z1) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (lam6 num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R1) R2') z1) ([p6:pf (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) R2) z1)] if_e (eq num z1 D) (eq num (@ num num R2 D) X) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) R2) z1) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (lam6 num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R1) R2') z1) (def6_e num (num arrow num) X1 (X1 arrow (num arrow num) arrow num arrow form) num num ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R1 R2 z1 p6) ([p8:pf (eq num z1 D)] [p10:pf (eq num (@ num num R2 D) X)] def6_i num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R1 R2' z1 (if_i1 (eq num z1 D) (== num (@ num num R2' D) X) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) R2') z1) p8 (trans num (@ num num R2' D) (@ num num R2 D) X (symm num (@ num num R2 D) (@ num num R2' D) (eq_regs_e R2 R2' D p2)) p10))) ([p8:pf (neq num z1 D)] [p10:pf (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2) z1)] cut (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2') z1) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (lam6 num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R1) R2') z1) (eq_form_e1 (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2) z1) (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2') z1) (eq+_congr num (eq_x num) form eq_form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2) (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2') z1 (valideqv_eq_x num) valideqv_eq_form p4) p10) ([p12:pf (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2') z1)] def6_i num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R1 R2' z1 (if_i2 (eq num z1 D) (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2') z1) (eq num (@ num num R2' D) X) p8 p12)))) ([p6:pf (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) R2') z1)] if_e (eq num z1 D) (eq num (@ num num R2' D) X) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) R2') z1) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (lam6 num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R1) R2) z1) (def6_e num (num arrow num) X1 (X1 arrow (num arrow num) arrow num arrow form) num num ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R1 R2' z1 p6) ([p8:pf (eq num z1 D)] [p10:pf (eq num (@ num num R2' D) X)] def6_i num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R1 R2 z1 (if_i1 (eq num z1 D) (== num (@ num num R2 D) X) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) R2) z1) p8 (trans num (@ num num R2 D) (@ num num R2' D) X (eq_regs_e R2 R2' D p2) p10))) ([p8:pf (neq num z1 D)] [p10:pf (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2') z1)] cut (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2) z1) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (lam6 num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num form ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10))) D) X) K) R1) R2) z1) (eq_form_e2 (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2) z1) (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2') z1) (eq+_congr num (eq_x num) form eq_form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2) (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2') z1 (valideqv_eq_x num) valideqv_eq_form p4) p10) ([p12:pf (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2) z1)] def6_i num num (X1 arrow (num arrow num) arrow num arrow form) X1 (num arrow num) num ([x5:tm num] [x6:tm num] [x7:tm (X1 arrow (num arrow num) arrow num arrow form)] [x8:tm X1] [x9:tm (num arrow num)] [x10:tm num] if (eq num x10 x5) (eq num (@ num num x9 x5) x6) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) x7 x8) x9) x10)) D X K R1 R2 z1 (if_i2 (eq num z1 D) (@ num form (@ registers (num arrow form) (@ X1 (registers arrow num arrow form) K R1) R2) z1) (eq num (@ num num R2 D) X) p8 p12)))))).
k_cares_onlyz : {X1:tp} {X2:tp} {X3:tp} tm ((X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow form) = [X1:tp] [X2:tp] [X3:tp] lam (X1 arrow (X2 arrow X3) arrow X2 arrow form) form ([k:tm (X1 arrow (X2 arrow X3) arrow X2 arrow form)] forall4 X1 (X2 arrow X3) (X2 arrow X3) X2 ([r8:tm X1] [r9:tm (X2 arrow X3)] [r2':tm (X2 arrow X3)] [z1:tm X2] eq X3 (@ X2 X3 r9 z1) (@ X2 X3 r2' z1) imp @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) k r8) r9) z1 imp @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) k r8) r2') z1)).
k_cares_onlyz_e : {X1:tp} {X2:tp} {X3:tp} {K:tm (X1 arrow (X2 arrow X3) arrow X2 arrow form)} {R2:tm (X2 arrow X3)} {Z:tm X2} {R2':tm (X2 arrow X3)} {R1:tm X1} pf (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) form (k_cares_onlyz X1 X2 X3) K) -> pf (eq X3 (@ X2 X3 R2 Z) (@ X2 X3 R2' Z)) -> pf (@ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) K R1) R2) Z) -> pf (@ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) K R1) R2') Z) = [X1:tp] [X2:tp] [X3:tp] [K:tm (X1 arrow (X2 arrow X3) arrow X2 arrow form)] [R2:tm (X2 arrow X3)] [Z:tm X2] [R2':tm (X2 arrow X3)] [R1:tm X1] [p1:pf (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) form (k_cares_onlyz X1 X2 X3) K)] [p2:pf (eq X3 (@ X2 X3 R2 Z) (@ X2 X3 R2' Z))] [p3:pf (@ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) K R1) R2) Z)] forall4_imp2_e X1 (X2 arrow X3) (X2 arrow X3) X2 ([x3:tm X1] [y:tm (X2 arrow X3)] [z1:tm (X2 arrow X3)] [u:tm X2] eq X3 (@ X2 X3 y u) (@ X2 X3 z1 u)) ([x4:tm X1] [y:tm (X2 arrow X3)] [z2:tm (X2 arrow X3)] [u:tm X2] @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) K x4) y) u) ([x5:tm X1] [y:tm (X2 arrow X3)] [z3:tm (X2 arrow X3)] [u:tm X2] @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) K x5) z3) u) (def1_e (X1 arrow (X2 arrow X3) arrow X2 arrow form) ([x3:tm (X1 arrow (X2 arrow X3) arrow X2 arrow form)] forall4 X1 (X2 arrow X3) (X2 arrow X3) X2 ([r8:tm X1] [r9:tm (X2 arrow X3)] [r2':tm (X2 arrow X3)] [z4:tm X2] eq X3 (@ X2 X3 r9 z4) (@ X2 X3 r2' z4) imp @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) x3 r8) r9) z4 imp @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) x3 r8) r2') z4)) K p1) R1 R2 R2' Z p2 p3.
upd/cc_cares_onlyz : {X1:tp} {X2:tp} {X3:tp} {K:tm (X1 arrow (X2 arrow X3) arrow X2 arrow form)} {D:tm X2} {X:tm X3} pf (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) form (k_cares_onlyz X1 X2 X3) K) -> pf (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) form (k_cares_onlyz X1 X2 X3) (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) (X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X3 ((X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X2 (X3 arrow (X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (upd/cc X2 X3 X1) D) X) K)) = [X1:tp] [X2:tp] [X3:tp] [K:tm (X1 arrow (X2 arrow X3) arrow X2 arrow form)] [D:tm X2] [X:tm X3] [p2:pf (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) form (k_cares_onlyz X1 X2 X3) K)] cut (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) form (k_cares_onlyz X1 X2 X3) K) (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) form (lam (X1 arrow (X2 arrow X3) arrow X2 arrow form) form ([x3:tm (X1 arrow (X2 arrow X3) arrow X2 arrow form)] forall4 X1 (X2 arrow X3) (X2 arrow X3) X2 ([r8:tm X1] [r9:tm (X2 arrow X3)] [r2':tm (X2 arrow X3)] [z1:tm X2] eq X3 (@ X2 X3 r9 z1) (@ X2 X3 r2' z1) imp @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) x3 r8) r9) z1 imp @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) x3 r8) r2') z1))) (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) (X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X3 ((X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X2 (X3 arrow (X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (upd/cc X2 X3 X1) D) X) K)) p2 ([x3:pf (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) form (k_cares_onlyz X1 X2 X3) K)] def1_i (X1 arrow (X2 arrow X3) arrow X2 arrow form) ([x4:tm (X1 arrow (X2 arrow X3) arrow X2 arrow form)] forall4 X1 (X2 arrow X3) (X2 arrow X3) X2 ([r10:tm X1] [r11:tm (X2 arrow X3)] [r2':tm (X2 arrow X3)] [z2:tm X2] eq X3 (@ X2 X3 r11 z2) (@ X2 X3 r2' z2) imp @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) x4 r10) r11) z2 imp @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) x4 r10) r2') z2)) (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) (X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X3 ((X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X2 (X3 arrow (X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (upd/cc X2 X3 X1) D) X) K) (forall4_imp2_i X1 (X2 arrow X3) (X2 arrow X3) X2 ([x4:tm X1] [x5:tm (X2 arrow X3)] [x6:tm (X2 arrow X3)] [x7:tm X2] eq X3 (@ X2 X3 x5 x7) (@ X2 X3 x6 x7)) ([x4:tm X1] [x5:tm (X2 arrow X3)] [x6:tm (X2 arrow X3)] [x7:tm X2] @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) (X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X3 ((X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X2 (X3 arrow (X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (upd/cc X2 X3 X1) D) X) K) x4) x5) x7) ([x4:tm X1] [x5:tm (X2 arrow X3)] [x6:tm (X2 arrow X3)] [x7:tm X2] @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) (X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X3 ((X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X2 (X3 arrow (X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (upd/cc X2 X3 X1) D) X) K) x4) x6) x7) ([r12:tm X1] [r13:tm (X2 arrow X3)] [r2':tm (X2 arrow X3)] [z3:tm X2] [p6:pf (eq X3 (@ X2 X3 r13 z3) (@ X2 X3 r2' z3))] [p8:pf (@ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) (@ (X1 arrow (X2 arrow X3) arrow X2 arrow form) (X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X3 ((X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (@ X2 (X3 arrow (X1 arrow (X2 arrow X3) arrow X2 arrow form) arrow X1 arrow (X2 arrow X3) arrow X2 arrow form) (upd/cc X2 X3 X1) D) X) K) r12) r13) z3)] upd/cc_i X2 z3 D X3 r2' X X1 K r12 ([p10:pf (eq X2 z3 D)] cut (eq X3 (@ X2 X3 r13 D) X) (== X3 (@ X2 X3 r2' D) X) (upd/cc_e X2 X3 X1 D X K r12 r13 z3 p8 p10) ([p12:pf (eq X3 (@ X2 X3 r13 D) X)] trans X3 (@ X2 X3 r2' D) (@ X2 X3 r2' z3) X (congr_app_2 X2 D z3 X3 r2' (symm X2 z3 D p10)) (trans X3 (@ X2 X3 r2' z3) (@ X2 X3 r13 z3) X (symm X3 (@ X2 X3 r13 z3) (@ X2 X3 r2' z3) p6) (trans X3 (@ X2 X3 r13 z3) (@ X2 X3 r13 D) X (congr_app_2 X2 z3 D X3 r13 p10) p12)))) ([p10:pf (neq X2 z3 D)] cut (@ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) K r12) r13) z3) (@ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) K r12) r2') z3) (upd/cc_e2 X2 X3 X1 D X K r12 r13 z3 p8 p10) ([p12:pf (@ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) K r12) r13) z3)] forall4_imp2_e X1 (X2 arrow X3) (X2 arrow X3) X2 ([x4:tm X1] [y:tm (X2 arrow X3)] [z4:tm (X2 arrow X3)] [u:tm X2] eq X3 (@ X2 X3 y u) (@ X2 X3 z4 u)) ([x5:tm X1] [y:tm (X2 arrow X3)] [z5:tm (X2 arrow X3)] [u:tm X2] @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) K x5) y) u) ([x6:tm X1] [y:tm (X2 arrow X3)] [z6:tm (X2 arrow X3)] [u:tm X2] @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) K x6) z6) u) (def1_e (X1 arrow (X2 arrow X3) arrow X2 arrow form) ([x4:tm (X1 arrow (X2 arrow X3) arrow X2 arrow form)] forall4 X1 (X2 arrow X3) (X2 arrow X3) X2 ([r14:tm X1] [r15:tm (X2 arrow X3)] [r16:tm (X2 arrow X3)] [z7:tm X2] eq X3 (@ X2 X3 r15 z7) (@ X2 X3 r16 z7) imp @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) x4 r14) r15) z7 imp @ X2 form (@ (X2 arrow X3) (X2 arrow form) (@ X1 ((X2 arrow X3) arrow X2 arrow form) x4 r14) r16) z7)) K p2) r12 r13 r2' z3 p6 p12))))).
k0_cares_onlyz : {X1:tp} {X2:tp} pf (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) form (k_cares_onlyz (X1 arrow X2) X1 X2) (k0 X1 X2)) = [X1:tp] [X2:tp] def1_i ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ([x3:tm ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form)] forall4 (X1 arrow X2) (X1 arrow X2) (X1 arrow X2) X1 ([r8:tm (X1 arrow X2)] [r9:tm (X1 arrow X2)] [r2':tm (X1 arrow X2)] [z1:tm X1] eq X2 (@ X1 X2 r9 z1) (@ X1 X2 r2' z1) imp @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) x3 r8) r9) z1 imp @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) x3 r8) r2') z1)) (k0 X1 X2) (forall4_imp2_i (X1 arrow X2) (X1 arrow X2) (X1 arrow X2) X1 ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] [x6:tm X1] eq X2 (@ X1 X2 x4 x6) (@ X1 X2 x5 x6)) ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] [x6:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (k0 X1 X2) x3) x4) x6) ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] [x6:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (lam3 (X1 arrow X2) (X1 arrow X2) X1 form ([x7:tm (X1 arrow X2)] [x8:tm (X1 arrow X2)] [x9:tm X1] _k0 X1 X2 x7 x8 x9)) x3) x5) x6) ([r10:tm (X1 arrow X2)] [r11:tm (X1 arrow X2)] [r2':tm (X1 arrow X2)] [z2:tm X1] [p2:pf (eq X2 (@ X1 X2 r11 z2) (@ X1 X2 r2' z2))] [p4:pf (@ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (k0 X1 X2) r10) r11) z2)] def3_i (X1 arrow X2) (X1 arrow X2) X1 ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] [x5:tm X1] _k0 X1 X2 x3 x4 x5) r10 r2' z2 (trans X2 (@ X1 X2 r2' z2) (@ X1 X2 r11 z2) (_@ X1 X2 r10 z2) (symm X2 (@ X1 X2 r11 z2) (@ X1 X2 r2' z2) p2) (def3_e X1 (X1 arrow X2) (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] [x5:tm X1] _k0 X1 X2 x3 x4 x5) r10 r11 z2 p4)))).
exists_k0 : {X1:tp} {X2:tp} {R1:tm (X1 arrow X2)} pf (exists (X1 arrow X2) ([r8:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (k0 X1 X2) R1) r8) z1))) = [X1:tp] [X2:tp] [R1:tm (X1 arrow X2)] exists_i (X1 arrow X2) ([x3:tm (X1 arrow X2)] forall X1 ([z2:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (k0 X1 X2) R1) x3) z2)) R1 (forall_i X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (lam3 (X1 arrow X2) (X1 arrow X2) X1 form ([x4:tm (X1 arrow X2)] [x5:tm (X1 arrow X2)] [x6:tm X1] _k0 X1 X2 x4 x5 x6)) R1) R1) x3) ([z3:tm X1] def3_i (X1 arrow X2) (X1 arrow X2) X1 ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] [x5:tm X1] _k0 X1 X2 x3 x4 x5) R1 R1 z3 (refl X2 (_@ X1 X2 R1 z3)))).
exists_upd/cc : {X1:tp} {K:tm (X1 arrow (num arrow num) arrow num arrow form)} {R1:tm X1} {D:tm num} {X:tm num} pf (exists (num arrow num) ([r8:tm (num arrow num)] forall num ([z1:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) r8) z1))) -> pf (@ (X1 arrow (num arrow num) arrow num arrow form) form (k_cares_onlyz X1 num num) K) -> pf (exists (num arrow num) ([r9:tm (num arrow num)] forall num ([z2:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) r9) z2))) = [X1:tp] [K:tm (X1 arrow (num arrow num) arrow num arrow form)] [R1:tm X1] [D:tm num] [X:tm num] [p2:pf (exists (num arrow num) ([r10:tm (num arrow num)] forall num ([z3:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) r10) z3)))] [p4:pf (@ (X1 arrow (num arrow num) arrow num arrow form) form (k_cares_onlyz X1 num num) K)] cut2 (exists (num arrow num) ([r11:tm (num arrow num)] forall num ([z4:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) r11) z4))) (@ (X1 arrow (num arrow num) arrow num arrow form) form (k_cares_onlyz X1 num num) K) (exists (num arrow num) ([x3:tm (num arrow num)] forall num ([z5:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) x3) z5))) p2 p4 ([x3:pf (exists (num arrow num) ([r12:tm (num arrow num)] forall num ([z6:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) r12) z6)))] [x4:pf (@ (X1 arrow (num arrow num) arrow num arrow form) form (k_cares_onlyz X1 num num) K)] exists_e (num arrow num) ([x5:tm (num arrow num)] forall num ([z7:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) x5) z7)) (exists (num arrow num) ([x5:tm (num arrow num)] forall num ([z8:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) x5) z8))) p2 ([r13:tm (num arrow num)] [p6:pf (forall num ([z9:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) r13) z9))] exists_i (num arrow num) ([x5:tm (num arrow num)] forall num ([z10:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) x5) z10)) (lam num num ([z11:tm num] ifeq z11 D X (@ num num r13 z11))) (forall_i num ([x5:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) (@ (X1 arrow (num arrow num) arrow num arrow form) (X1 arrow (num arrow num) arrow num arrow form) (@ num ((X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (@ num (num arrow (X1 arrow (num arrow num) arrow num arrow form) arrow X1 arrow (num arrow num) arrow num arrow form) (upd/cc num num X1) D) X) K) R1) (lam num num ([x6:tm num] ifeq x6 D X (@ num num r13 x6)))) x5) ([z12:tm num] upd/cc_i num z12 D num (lam num num ([x5:tm num] ifeq x5 D X (@ num num r13 x5))) X X1 K R1 ([p10:pf (eq num z12 D)] trans num (@ num num (lam num num ([x5:tm num] ifeq x5 D X (@ num num r13 x5))) D) (ifeq D D X (@ num num r13 D)) X (beta1 num num ([x5:tm num] ifeq x5 D X (@ num num r13 x5)) D) (ifeq_e1 D D X (@ num num r13 D) (refl num D))) ([p10:pf (neq num z12 D)] cut (== num (@ num num r13 z12) (@ num num (lam num num ([x5:tm num] ifeq x5 D X (@ num num r13 x5))) z12)) (@ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) (lam num num ([z13:tm num] ifeq z13 D X (@ num num r13 z13)))) z12) (symm num (@ num num (lam num num ([x5:tm num] ifeq x5 D X (@ num num r13 x5))) z12) (@ num num r13 z12) (trans num (@ num num (lam num num ([x5:tm num] ifeq x5 D X (@ num num r13 x5))) z12) (ifeq z12 D X (@ num num r13 z12)) (@ num num r13 z12) (beta1 num num ([x5:tm num] ifeq x5 D X (@ num num r13 x5)) z12) (ifeq_e2 z12 D X (@ num num r13 z12) p10))) ([p12:pf (eq num (@ num num r13 z12) (@ num num (lam num num ([z14:tm num] ifeq z14 D X (@ num num r13 z14))) z12))] k_cares_onlyz_e X1 num num K r13 z12 (lam num num ([z15:tm num] ifeq z15 D X (@ num num r13 z15))) R1 p4 p12 (forall_e num ([x5:tm num] @ num form (@ (num arrow num) (num arrow form) (@ X1 ((num arrow num) arrow num arrow form) K R1) r13) x5) p6 z12))))))).
upd2_i : {X1:tp} {X2:tp} {R':tm (X2 arrow X1)} {V1:tm X2} {X3:tm X1} {V2:tm X2} {X4:tm X1} {R:tm (X2 arrow X1)} pf (eq X1 (@ X2 X1 R' V1) X3) -> (pf (neq X2 V2 V1) -> pf (eq X1 (@ X2 X1 R' V2) X4)) -> ({v1:tm X2} pf (neq X2 v1 V1) -> pf (neq X2 v1 V2) -> pf (eq X1 (@ X2 X1 R' v1) (@ X2 X1 R v1))) -> pf (@ (X2 arrow X1) form (@ X1 ((X2 arrow X1) arrow form) (@ X2 (X1 arrow (X2 arrow X1) arrow form) (@ X1 (X2 arrow X1 arrow (X2 arrow X1) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow (X2 arrow X1) arrow form) (@ (X2 arrow X1) (X2 arrow X1 arrow X2 arrow X1 arrow (X2 arrow X1) arrow form) (upd2 X2 X1) R) V1) X3) V2) X4) R') = [X1:tp] [X2:tp] [R':tm (X2 arrow X1)] [V1:tm X2] [X3:tm X1] [V2:tm X2] [X4:tm X1] [R:tm (X2 arrow X1)] [p2:pf (eq X1 (@ X2 X1 R' V1) X3)] [p4:pf (neq X2 V2 V1) -> pf (eq X1 (@ X2 X1 R' V2) X4)] [p6:{v2:tm X2} pf (neq X2 v2 V1) -> pf (neq X2 v2 V2) -> pf (eq X1 (@ X2 X1 R' v2) (@ X2 X1 R v2))] cut (neq X2 V2 V1 imp eq X1 (@ X2 X1 R' V2) X4) (@ (X2 arrow X1) form (@ X1 ((X2 arrow X1) arrow form) (@ X2 (X1 arrow (X2 arrow X1) arrow form) (@ X1 (X2 arrow X1 arrow (X2 arrow X1) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow (X2 arrow X1) arrow form) (@ (X2 arrow X1) (X2 arrow X1 arrow X2 arrow X1 arrow (X2 arrow X1) arrow form) (lam6 (X2 arrow X1) X2 X1 X2 X1 (X2 arrow X1) form ([x3:tm (X2 arrow X1)] [x4:tm X2] [x5:tm X1] [x6:tm X2] [x7:tm X1] [x8:tm (X2 arrow X1)] forall X2 ([z1:tm X2] @ X2 form (@ (X2 arrow X1) (X2 arrow form) (@ (X2 arrow X1) ((X2 arrow X1) arrow X2 arrow form) (@ ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X1 (((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X2 (X1 arrow ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (upd/cc X2 X1 (X2 arrow X1)) x4) x5) (@ ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X1 (((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X2 (X1 arrow ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (upd/cc X2 X1 (X2 arrow X1)) x6) x7) (k0 X2 X1))) x3) x8) z1))) R) V1) X3) V2) X4) R') (imp_i (neq X2 V2 V1) (eq X1 (@ X2 X1 R' V2) X4) ([x3:pf (neq X2 V2 V1)] p4 x3)) ([x3:pf (neq X2 V2 V1 imp eq X1 (@ X2 X1 R' V2) X4)] def6_i (X2 arrow X1) X2 X1 X2 X1 (X2 arrow X1) ([x4:tm (X2 arrow X1)] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm X1] [x9:tm (X2 arrow X1)] forall X2 ([z2:tm X2] @ X2 form (@ (X2 arrow X1) (X2 arrow form) (@ (X2 arrow X1) ((X2 arrow X1) arrow X2 arrow form) (@ ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X1 (((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X2 (X1 arrow ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (upd/cc X2 X1 (X2 arrow X1)) x5) x6) (@ ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X1 (((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X2 (X1 arrow ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (upd/cc X2 X1 (X2 arrow X1)) x7) x8) (k0 X2 X1))) x4) x9) z2)) R V1 X3 V2 X4 R' (forall_i X2 ([x4:tm X2] @ X2 form (@ (X2 arrow X1) (X2 arrow form) (@ (X2 arrow X1) ((X2 arrow X1) arrow X2 arrow form) (@ ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X1 (((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X2 (X1 arrow ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (upd/cc X2 X1 (X2 arrow X1)) V1) X3) (@ ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X1 (((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X2 (X1 arrow ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (upd/cc X2 X1 (X2 arrow X1)) V2) X4) (lam3 (X2 arrow X1) (X2 arrow X1) X2 form ([x5:tm (X2 arrow X1)] [x6:tm (X2 arrow X1)] [x7:tm X2] _k0 X2 X1 x5 x6 x7)))) R) R') x4) ([z3:tm X2] upd/cc_i X2 z3 V1 X1 R' X3 (X2 arrow X1) (@ ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X1 (((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (@ X2 (X1 arrow ((X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) arrow (X2 arrow X1) arrow (X2 arrow X1) arrow X2 arrow form) (upd/cc X2 X1 (X2 arrow X1)) V2) X4) (lam3 (X2 arrow X1) (X2 arrow X1) X2 form ([x4:tm (X2 arrow X1)] [x5:tm (X2 arrow X1)] [x6:tm X2] _k0 X2 X1 x4 x5 x6))) R ([p10:pf (eq X2 z3 V1)] p2) ([p10:pf (neq X2 z3 V1)] upd/cc_i X2 z3 V2 X1 R' X4 (X2 arrow X1) (lam3 (X2 arrow X1) (X2 arrow X1) X2 form ([x4:tm (X2 arrow X1)] [x5:tm (X2 arrow X1)] [x6:tm X2] _k0 X2 X1 x4 x5 x6)) R ([p12:pf (eq X2 z3 V2)] p4 (neq_symm X2 V1 V2 (trans_neq_eq X2 V1 z3 V2 (neq_symm X2 z3 V1 p10) p12))) ([p12:pf (neq X2 z3 V2)] def3_i (X2 arrow X1) (X2 arrow X1) X2 ([x4:tm (X2 arrow X1)] [x5:tm (X2 arrow X1)] [x6:tm X2] _k0 X2 X1 x4 x5 x6) R R' z3 (p6 z3 p10 p12)))))).
upd2_e : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {R':tm (X1 arrow X2)} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd2 X1 X2) R) V1) X3) V2) X4) R') -> pf (eq X2 (@ X1 X2 R' V1) X3) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [R':tm (X1 arrow X2)] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd2 X1 X2) R) V1) X3) V2) X4) R')] upd/cc_e X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (k0 X1 X2)) R R' V1 (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (k0 X1 X2))) R) R') x3) (def6_e (X1 arrow X2) X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (k0 X1 X2))) x3) x8) z1)) R V1 X3 V2 X4 R' p1) V1) (refl X1 V1).
upd2_e2 : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {R':tm (X1 arrow X2)} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd2 X1 X2) R) V1) X3) V2) X4) R') -> pf (neq X1 V2 V1) -> pf (eq X2 (@ X1 X2 R' V2) X4) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [R':tm (X1 arrow X2)] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd2 X1 X2) R) V1) X3) V2) X4) R')] [p2:pf (neq X1 V2 V1)] upd/cc_e X1 X2 (X1 arrow X2) V2 X4 (k0 X1 X2) R R' V2 (upd/cc_e2 X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (k0 X1 X2)) R R' V2 (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (k0 X1 X2))) R) R') x3) (def6_e (X1 arrow X2) X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (k0 X1 X2))) x3) x8) z1)) R V1 X3 V2 X4 R' p1) V2) p2) (refl X1 V2).
upd2_e3 : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {R':tm (X1 arrow X2)} {V:tm X1} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd2 X1 X2) R) V1) X3) V2) X4) R') -> pf (neq X1 V V1) -> pf (neq X1 V V2) -> pf (eq X2 (@ X1 X2 R' V) (@ X1 X2 R V)) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [R':tm (X1 arrow X2)] [V:tm X1] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd2 X1 X2) R) V1) X3) V2) X4) R')] [p2:pf (neq X1 V V1)] [p3:pf (neq X1 V V2)] def3_e X1 (X1 arrow X2) (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] [x5:tm X1] _k0 X1 X2 x3 x4 x5) R R' V (upd/cc_e2 X1 X2 (X1 arrow X2) V2 X4 (k0 X1 X2) R R' V (upd/cc_e2 X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (k0 X1 X2)) R R' V (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (k0 X1 X2))) R) R') x3) (def6_e (X1 arrow X2) X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (k0 X1 X2))) x3) x8) z1)) R V1 X3 V2 X4 R' p1) V) p2) p3).
exists_upd2 : {R:tm (num arrow num)} {V1:tm num} {X1:tm num} {V2:tm num} {X2:tm num} pf (exists (num arrow num) ([r':tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (upd2 num num) R) V1) X1) V2) X2) r')) = [R:tm (num arrow num)] [V1:tm num] [X1:tm num] [V2:tm num] [X2:tm num] exists_e (num arrow num) ([x3:tm (num arrow num)] forall num ([z1:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (k0 num num)) R) x3) z1)) (exists (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam6 (num arrow num) num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm (num arrow num)] forall num ([z2:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (k0 num num))) x4) x9) z2))) R) V1) X1) V2) X2) x3)) (exists_upd/cc (num arrow num) (k0 num num) R V2 X2 (exists_k0 num num R) (k0_cares_onlyz num num)) ([r8:tm (num arrow num)] [p4:pf (forall num ([z3:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (k0 num num)) R) r8) z3))] exists_e (num arrow num) ([x3:tm (num arrow num)] forall num ([z4:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (k0 num num))) R) x3) z4)) (exists (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam6 (num arrow num) num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm (num arrow num)] forall num ([z5:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (k0 num num))) x4) x9) z5))) R) V1) X1) V2) X2) x3)) (exists_upd/cc (num arrow num) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (k0 num num)) R V1 X1 (exists_i (num arrow num) ([x3:tm (num arrow num)] forall num ([z6:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (k0 num num)) R) x3) z6)) r8 p4) (upd/cc_cares_onlyz (num arrow num) num num (k0 num num) V2 X2 (k0_cares_onlyz num num))) ([r9:tm (num arrow num)] [p6:pf (forall num ([z7:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (k0 num num))) R) r9) z7))] exists_i (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam6 (num arrow num) num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm (num arrow num)] forall num ([z8:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (k0 num num))) x4) x9) z8))) R) V1) X1) V2) X2) x3) r9 (def6_i (num arrow num) num num num num (num arrow num) ([x3:tm (num arrow num)] [x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm (num arrow num)] forall num ([z9:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x4) x5) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x6) x7) (k0 num num))) x3) x8) z9)) R V1 X1 V2 X2 r9 p6))).
upd2_congr : {R1:tm registers} {R1':tm registers} {R2:tm registers} {R2':tm registers} {D1:tm num} {D1':tm num} {X1:tm num} {X1':tm num} {D2:tm num} {D2':tm num} {X2:tm num} {X2':tm num} pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R1') -> pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R2') -> pf (eq num D1 D1') -> pf (eq num X1 X1') -> pf (eq num D2 D2') -> pf (eq num X2 X2') -> pf (@ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (upd2 num num) R1') D1') X1') D2') X2') R2') -> pf (@ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (upd2 num num) R1) D1) X1) D2) X2) R2) = [R1:tm registers] [R1':tm registers] [R2:tm registers] [R2':tm registers] [D1:tm num] [D1':tm num] [X1:tm num] [X1':tm num] [D2:tm num] [D2':tm num] [X2:tm num] [X2':tm num] [p1:pf (@ registers form (@ registers (registers arrow form) eq_regs R1) R1')] [p2:pf (@ registers form (@ registers (registers arrow form) eq_regs R2) R2')] [p3:pf (eq num D1 D1')] [p4:pf (eq num X1 X1')] [p5:pf (eq num D2 D2')] [p6:pf (eq num X2 X2')] [p7:pf (@ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (upd2 num num) R1') D1') X1') D2') X2') R2')] cut (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) eqk (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))) (@ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam6 (num arrow num) num num num num (num arrow num) form ([x3:tm (num arrow num)] [x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm (num arrow num)] forall num ([z1:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x4) x5) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x6) x7) (k0 num num))) x3) x8) z1))) R1) D1) X1) D2) X2) R2) (upd/cc_congr D2 D2' X2 X2' (k0 num num) (k0 num num) p5 p6 (eqv_refl ((num arrow num) arrow (num arrow num) arrow num arrow form) eqk (k0 num num) valideqv_eqk)) ([p10:pf (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) eqk (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num)))] cut (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) eqk (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num)))) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num)))) (@ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam6 (num arrow num) num num num num (num arrow num) form ([x3:tm (num arrow num)] [x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm (num arrow num)] forall num ([z2:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x4) x5) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x6) x7) (k0 num num))) x3) x8) z2))) R1) D1) X1) D2) X2) R2) (upd/cc_congr D1 D1' X1 X1' (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num)) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num)) p3 p4 p10) ([p12:pf (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow (num arrow num) arrow num arrow form)) eqk (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num)))) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))))] def6_i (num arrow num) num num num num (num arrow num) ([x3:tm (num arrow num)] [x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm (num arrow num)] forall num ([z3:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x4) x5) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x6) x7) (k0 num num))) x3) x8) z3)) R1 D1 X1 D2 X2 R2 (forall_i num ([x3:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) R1) R2) x3) ([z4:tm num] cut (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))) R1') R2') z4) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) R1) R2) z4) (forall_e num ([x3:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))) R1') R2') x3) (def6_e (num arrow num) num num num num (num arrow num) ([x3:tm (num arrow num)] [x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm (num arrow num)] forall num ([z5:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x4) x5) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x6) x7) (k0 num num))) x3) x8) z5)) R1' D1' X1' D2' X2' R2' p7) z4) ([p16:pf (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))) R1') R2') z4)] cut (@ ((num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) R1)) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))) R1')) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) R1) R2) z4) (eq+_e (num arrow num) ((num arrow num) arrow num arrow form) eq_numfn (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))) R1 R1' p12 (eq_regs->eq_numfn R1 R1' p1) (upd/cc_congr_aux1 R1 R1' (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (upd/cc num num registers) D2) X2) (k0 num num)) D1 X1 p1 (upd/cc_congr_aux1 R1 R1' (k0 num num) D2 X2 p1 (k0_congr_aux1 R1 R1' p1))) (upd/cc_congr_aux1 R1 R1' (@ (registers arrow (num arrow num) arrow num arrow form) (registers arrow (num arrow num) arrow num arrow form) (@ num ((registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (@ num (num arrow (registers arrow (num arrow num) arrow num arrow form) arrow registers arrow (num arrow num) arrow num arrow form) (upd/cc num num registers) D2') X2') (k0 num num)) D1' X1' p1 (upd/cc_congr_aux1 R1 R1' (k0 num num) D2' X2' p1 (k0_congr_aux1 R1 R1' p1)))) ([p18:pf (@ ((num arrow num) arrow num arrow form) form (@ ((num arrow num) arrow num arrow form) (shadowed_0 ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow form)) (eqrel ((num arrow num) arrow num arrow form)) (@ (eqrel (num arrow num)) (eqrel (num arrow form) arrow eqrel ((num arrow num) arrow num arrow form)) (eq+ (num arrow num) (num arrow form)) eq_numfn) (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form)) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) R1)) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))) R1'))] eq_form_e2 (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) R1) R2) z4) (@ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))) R1') R2') z4) (eq+_congr num (eq_x num) form eq_form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) R1) R2) (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))) R1') R2') z4 (valideqv_eq_x num) valideqv_eq_form (eq+_e (num arrow num) (num arrow form) eq_numfn (@ (eqrel form) (eqrel (num arrow form)) (@ (eqrel num) (eqrel form arrow eqrel (num arrow form)) (eq+ num form) (eq_x num)) eq_form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num))) R1) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D1') X1') (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num))) R1') R2 R2' p18 (eq_regs->eq_numfn R2 R2' p2) (upd/cc_congr_aux2 R2 R2' (num arrow num) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2) X2) (k0 num num)) R1 D1 X1 p2 (upd/cc_congr_aux2 R2 R2' (num arrow num) (k0 num num) R1 D2 X2 p2 (k0_congr_aux2 R2 R2' R1 p2))) (upd/cc_congr_aux2 R2 R2' (num arrow num) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) D2') X2') (k0 num num)) R1' D1' X1' p2 (upd/cc_congr_aux2 R2 R2' (num arrow num) (k0 num num) R1' D2' X2' p2 (k0_congr_aux2 R2 R2' R1' p2))))) p16)))))).
upd3_e : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {V3:tm X1} {X5:tm X2} {R':tm (X1 arrow X2)} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd3 X1 X2) R) V1) X3) V2) X4) V3) X5) R') -> pf (eq X2 (@ X1 X2 R' V1) X3) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [V3:tm X1] [X5:tm X2] [R':tm (X1 arrow X2)] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd3 X1 X2) R) V1) X3) V2) X4) V3) X5) R')] upd/cc_e X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (k0 X1 X2))) R R' V1 (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (k0 X1 X2)))) R) R') x3) (def8_e (X1 arrow X2) X2 X1 X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm X1] [x9:tm X2] [x10:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x8) x9) (k0 X1 X2)))) x3) x10) z1)) R V1 X3 V2 X4 V3 X5 R' p1) V1) (refl X1 V1).
upd3_e3 : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {V3:tm X1} {X5:tm X2} {R':tm (X1 arrow X2)} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd3 X1 X2) R) V1) X3) V2) X4) V3) X5) R') -> pf (neq X1 V3 V1) -> pf (neq X1 V3 V2) -> pf (eq X2 (@ X1 X2 R' V3) X5) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [V3:tm X1] [X5:tm X2] [R':tm (X1 arrow X2)] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd3 X1 X2) R) V1) X3) V2) X4) V3) X5) R')] [p2:pf (neq X1 V3 V1)] [p3:pf (neq X1 V3 V2)] upd/cc_e X1 X2 (X1 arrow X2) V3 X5 (k0 X1 X2) R R' V3 (upd/cc_e2 X1 X2 (X1 arrow X2) V2 X4 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (k0 X1 X2)) R R' V3 (upd/cc_e2 X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (k0 X1 X2))) R R' V3 (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (k0 X1 X2)))) R) R') x3) (def8_e (X1 arrow X2) X2 X1 X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm X1] [x9:tm X2] [x10:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x8) x9) (k0 X1 X2)))) x3) x10) z1)) R V1 X3 V2 X4 V3 X5 R' p1) V3) p2) p3) (refl X1 V3).
upd3_e4 : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {V3:tm X1} {X5:tm X2} {R':tm (X1 arrow X2)} {V:tm X1} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd3 X1 X2) R) V1) X3) V2) X4) V3) X5) R') -> pf (neq X1 V V1) -> pf (neq X1 V V2) -> pf (neq X1 V V3) -> pf (eq X2 (@ X1 X2 R' V) (@ X1 X2 R V)) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [V3:tm X1] [X5:tm X2] [R':tm (X1 arrow X2)] [V:tm X1] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd3 X1 X2) R) V1) X3) V2) X4) V3) X5) R')] [p2:pf (neq X1 V V1)] [p3:pf (neq X1 V V2)] [p4:pf (neq X1 V V3)] def3_e X1 (X1 arrow X2) (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] [x5:tm X1] _k0 X1 X2 x3 x4 x5) R R' V (upd/cc_e2 X1 X2 (X1 arrow X2) V3 X5 (k0 X1 X2) R R' V (upd/cc_e2 X1 X2 (X1 arrow X2) V2 X4 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (k0 X1 X2)) R R' V (upd/cc_e2 X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (k0 X1 X2))) R R' V (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (k0 X1 X2)))) R) R') x3) (def8_e (X1 arrow X2) X2 X1 X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm X1] [x9:tm X2] [x10:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x8) x9) (k0 X1 X2)))) x3) x10) z1)) R V1 X3 V2 X4 V3 X5 R' p1) V) p2) p3) p4).
exists_upd3 : {R:tm (num arrow num)} {V1:tm num} {X1:tm num} {V2:tm num} {X2:tm num} {V3:tm num} {X3:tm num} pf (exists (num arrow num) ([r':tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (upd3 num num) R) V1) X1) V2) X2) V3) X3) r')) = [R:tm (num arrow num)] [V1:tm num] [X1:tm num] [V2:tm num] [X2:tm num] [V3:tm num] [X3:tm num] exists_e (num arrow num) ([x3:tm (num arrow num)] forall num ([z1:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num)) R) x3) z1)) (exists (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam8 (num arrow num) num num num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm num] [x11:tm (num arrow num)] forall num ([z2:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x9) x10) (k0 num num)))) x4) x11) z2))) R) V1) X1) V2) X2) V3) X3) x3)) (exists_upd/cc (num arrow num) (k0 num num) R V3 X3 (exists_k0 num num R) (k0_cares_onlyz num num)) ([r8:tm (num arrow num)] [p4:pf (forall num ([z3:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num)) R) r8) z3))] exists_e (num arrow num) ([x3:tm (num arrow num)] forall num ([z4:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num))) R) x3) z4)) (exists (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam8 (num arrow num) num num num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm num] [x11:tm (num arrow num)] forall num ([z5:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x9) x10) (k0 num num)))) x4) x11) z5))) R) V1) X1) V2) X2) V3) X3) x3)) (exists_upd/cc (num arrow num) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num)) R V2 X2 (exists_i (num arrow num) ([x3:tm (num arrow num)] forall num ([z6:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num)) R) x3) z6)) r8 p4) (upd/cc_cares_onlyz (num arrow num) num num (k0 num num) V3 X3 (k0_cares_onlyz num num))) ([r9:tm (num arrow num)] [p6:pf (forall num ([z7:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num))) R) r9) z7))] exists_e (num arrow num) ([x3:tm (num arrow num)] forall num ([z8:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num)))) R) x3) z8)) (exists (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam8 (num arrow num) num num num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm num] [x11:tm (num arrow num)] forall num ([z9:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x9) x10) (k0 num num)))) x4) x11) z9))) R) V1) X1) V2) X2) V3) X3) x3)) (exists_upd/cc (num arrow num) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num))) R V1 X1 (exists_i (num arrow num) ([x3:tm (num arrow num)] forall num ([z10:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num))) R) x3) z10)) r9 p6) (upd/cc_cares_onlyz (num arrow num) num num (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num)) V2 X2 (upd/cc_cares_onlyz (num arrow num) num num (k0 num num) V3 X3 (k0_cares_onlyz num num)))) ([r10:tm (num arrow num)] [p8:pf (forall num ([z11:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (k0 num num)))) R) r10) z11))] exists_i (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam8 (num arrow num) num num num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm num] [x11:tm (num arrow num)] forall num ([z12:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x9) x10) (k0 num num)))) x4) x11) z12))) R) V1) X1) V2) X2) V3) X3) x3) r10 (def8_i (num arrow num) num num num num num num (num arrow num) ([x3:tm (num arrow num)] [x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm (num arrow num)] forall num ([z13:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x4) x5) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x6) x7) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x8) x9) (k0 num num)))) x3) x10) z13)) R V1 X1 V2 X2 V3 X3 r10 p8)))).
upd4_e : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {V3:tm X1} {X5:tm X2} {V4:tm X1} {X6:tm X2} {R':tm (X1 arrow X2)} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd4 X1 X2) R) V1) X3) V2) X4) V3) X5) V4) X6) R') -> pf (eq X2 (@ X1 X2 R' V1) X3) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [V3:tm X1] [X5:tm X2] [V4:tm X1] [X6:tm X2] [R':tm (X1 arrow X2)] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd4 X1 X2) R) V1) X3) V2) X4) V3) X5) V4) X6) R')] upd/cc_e X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2)))) R R' V1 (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2))))) R) R') x3) (def10_e (X1 arrow X2) X2 X1 X2 X1 X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm X1] [x9:tm X2] [x10:tm X1] [x11:tm X2] [x12:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x8) x9) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x10) x11) (k0 X1 X2))))) x3) x12) z1)) R V1 X3 V2 X4 V3 X5 V4 X6 R' p1) V1) (refl X1 V1).
upd4_e2 : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {V3:tm X1} {X5:tm X2} {V4:tm X1} {X6:tm X2} {R':tm (X1 arrow X2)} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd4 X1 X2) R) V1) X3) V2) X4) V3) X5) V4) X6) R') -> pf (neq X1 V2 V1) -> pf (eq X2 (@ X1 X2 R' V2) X4) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [V3:tm X1] [X5:tm X2] [V4:tm X1] [X6:tm X2] [R':tm (X1 arrow X2)] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd4 X1 X2) R) V1) X3) V2) X4) V3) X5) V4) X6) R')] [p2:pf (neq X1 V2 V1)] upd/cc_e X1 X2 (X1 arrow X2) V2 X4 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2))) R R' V2 (upd/cc_e2 X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2)))) R R' V2 (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2))))) R) R') x3) (def10_e (X1 arrow X2) X2 X1 X2 X1 X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm X1] [x9:tm X2] [x10:tm X1] [x11:tm X2] [x12:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x8) x9) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x10) x11) (k0 X1 X2))))) x3) x12) z1)) R V1 X3 V2 X4 V3 X5 V4 X6 R' p1) V2) p2) (refl X1 V2).
upd4_e3 : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {V3:tm X1} {X5:tm X2} {V4:tm X1} {X6:tm X2} {R':tm (X1 arrow X2)} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd4 X1 X2) R) V1) X3) V2) X4) V3) X5) V4) X6) R') -> pf (neq X1 V3 V1) -> pf (neq X1 V3 V2) -> pf (eq X2 (@ X1 X2 R' V3) X5) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [V3:tm X1] [X5:tm X2] [V4:tm X1] [X6:tm X2] [R':tm (X1 arrow X2)] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd4 X1 X2) R) V1) X3) V2) X4) V3) X5) V4) X6) R')] [p2:pf (neq X1 V3 V1)] [p3:pf (neq X1 V3 V2)] upd/cc_e X1 X2 (X1 arrow X2) V3 X5 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2)) R R' V3 (upd/cc_e2 X1 X2 (X1 arrow X2) V2 X4 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2))) R R' V3 (upd/cc_e2 X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2)))) R R' V3 (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2))))) R) R') x3) (def10_e (X1 arrow X2) X2 X1 X2 X1 X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm X1] [x9:tm X2] [x10:tm X1] [x11:tm X2] [x12:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x8) x9) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x10) x11) (k0 X1 X2))))) x3) x12) z1)) R V1 X3 V2 X4 V3 X5 V4 X6 R' p1) V3) p2) p3) (refl X1 V3).
upd4_e4 : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {V3:tm X1} {X5:tm X2} {V4:tm X1} {X6:tm X2} {R':tm (X1 arrow X2)} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd4 X1 X2) R) V1) X3) V2) X4) V3) X5) V4) X6) R') -> pf (neq X1 V4 V1) -> pf (neq X1 V4 V2) -> pf (neq X1 V4 V3) -> pf (eq X2 (@ X1 X2 R' V4) X6) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [V3:tm X1] [X5:tm X2] [V4:tm X1] [X6:tm X2] [R':tm (X1 arrow X2)] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd4 X1 X2) R) V1) X3) V2) X4) V3) X5) V4) X6) R')] [p2:pf (neq X1 V4 V1)] [p3:pf (neq X1 V4 V2)] [p4:pf (neq X1 V4 V3)] upd/cc_e X1 X2 (X1 arrow X2) V4 X6 (k0 X1 X2) R R' V4 (upd/cc_e2 X1 X2 (X1 arrow X2) V3 X5 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2)) R R' V4 (upd/cc_e2 X1 X2 (X1 arrow X2) V2 X4 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2))) R R' V4 (upd/cc_e2 X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2)))) R R' V4 (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2))))) R) R') x3) (def10_e (X1 arrow X2) X2 X1 X2 X1 X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm X1] [x9:tm X2] [x10:tm X1] [x11:tm X2] [x12:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x8) x9) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x10) x11) (k0 X1 X2))))) x3) x12) z1)) R V1 X3 V2 X4 V3 X5 V4 X6 R' p1) V4) p2) p3) p4) (refl X1 V4).
upd4_e5 : {X1:tp} {X2:tp} {R:tm (X1 arrow X2)} {V1:tm X1} {X3:tm X2} {V2:tm X1} {X4:tm X2} {V3:tm X1} {X5:tm X2} {V4:tm X1} {X6:tm X2} {R':tm (X1 arrow X2)} {V:tm X1} pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd4 X1 X2) R) V1) X3) V2) X4) V3) X5) V4) X6) R') -> pf (neq X1 V V1) -> pf (neq X1 V V2) -> pf (neq X1 V V3) -> pf (neq X1 V V4) -> pf (eq X2 (@ X1 X2 R' V) (@ X1 X2 R V)) = [X1:tp] [X2:tp] [R:tm (X1 arrow X2)] [V1:tm X1] [X3:tm X2] [V2:tm X1] [X4:tm X2] [V3:tm X1] [X5:tm X2] [V4:tm X1] [X6:tm X2] [R':tm (X1 arrow X2)] [V:tm X1] [p1:pf (@ (X1 arrow X2) form (@ X2 ((X1 arrow X2) arrow form) (@ X1 (X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X2 (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ X1 (X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (@ (X1 arrow X2) (X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow X1 arrow X2 arrow (X1 arrow X2) arrow form) (upd4 X1 X2) R) V1) X3) V2) X4) V3) X5) V4) X6) R')] [p2:pf (neq X1 V V1)] [p3:pf (neq X1 V V2)] [p4:pf (neq X1 V V3)] [p5:pf (neq X1 V V4)] def3_e X1 (X1 arrow X2) (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm (X1 arrow X2)] [x5:tm X1] _k0 X1 X2 x3 x4 x5) R R' V (upd/cc_e2 X1 X2 (X1 arrow X2) V4 X6 (k0 X1 X2) R R' V (upd/cc_e2 X1 X2 (X1 arrow X2) V3 X5 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2)) R R' V (upd/cc_e2 X1 X2 (X1 arrow X2) V2 X4 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2))) R R' V (upd/cc_e2 X1 X2 (X1 arrow X2) V1 X3 (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2)))) R R' V (forall_e X1 ([x3:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V1) X3) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V2) X4) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V3) X5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) V4) X6) (k0 X1 X2))))) R) R') x3) (def10_e (X1 arrow X2) X2 X1 X2 X1 X2 X1 X2 X1 (X1 arrow X2) ([x3:tm (X1 arrow X2)] [x4:tm X1] [x5:tm X2] [x6:tm X1] [x7:tm X2] [x8:tm X1] [x9:tm X2] [x10:tm X1] [x11:tm X2] [x12:tm (X1 arrow X2)] forall X1 ([z1:tm X1] @ X1 form (@ (X1 arrow X2) (X1 arrow form) (@ (X1 arrow X2) ((X1 arrow X2) arrow X1 arrow form) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x4) x5) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x6) x7) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x8) x9) (@ ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X2 (((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (@ X1 (X2 arrow ((X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) arrow (X1 arrow X2) arrow (X1 arrow X2) arrow X1 arrow form) (upd/cc X1 X2 (X1 arrow X2)) x10) x11) (k0 X1 X2))))) x3) x12) z1)) R V1 X3 V2 X4 V3 X5 V4 X6 R' p1) V) p2) p3) p4) p5).
exists_upd4 : {R:tm (num arrow num)} {V1:tm num} {X1:tm num} {V2:tm num} {X2:tm num} {V3:tm num} {X3:tm num} {V4:tm num} {X4:tm num} pf (exists (num arrow num) ([r':tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (upd4 num num) R) V1) X1) V2) X2) V3) X3) V4) X4) r')) = [R:tm (num arrow num)] [V1:tm num] [X1:tm num] [V2:tm num] [X2:tm num] [V3:tm num] [X3:tm num] [V4:tm num] [X4:tm num] exists_e (num arrow num) ([x3:tm (num arrow num)] forall num ([z1:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num)) R) x3) z1)) (exists (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam10 (num arrow num) num num num num num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm num] [x11:tm num] [x12:tm num] [x13:tm (num arrow num)] forall num ([z2:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x9) x10) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x11) x12) (k0 num num))))) x4) x13) z2))) R) V1) X1) V2) X2) V3) X3) V4) X4) x3)) (exists_upd/cc (num arrow num) (k0 num num) R V4 X4 (exists_k0 num num R) (k0_cares_onlyz num num)) ([r8:tm (num arrow num)] [p4:pf (forall num ([z3:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num)) R) r8) z3))] exists_e (num arrow num) ([x3:tm (num arrow num)] forall num ([z4:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num))) R) x3) z4)) (exists (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam10 (num arrow num) num num num num num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm num] [x11:tm num] [x12:tm num] [x13:tm (num arrow num)] forall num ([z5:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x9) x10) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x11) x12) (k0 num num))))) x4) x13) z5))) R) V1) X1) V2) X2) V3) X3) V4) X4) x3)) (exists_upd/cc (num arrow num) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num)) R V3 X3 (exists_i (num arrow num) ([x3:tm (num arrow num)] forall num ([z6:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num)) R) x3) z6)) r8 p4) (upd/cc_cares_onlyz (num arrow num) num num (k0 num num) V4 X4 (k0_cares_onlyz num num))) ([r9:tm (num arrow num)] [p6:pf (forall num ([z7:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num))) R) r9) z7))] exists_e (num arrow num) ([x3:tm (num arrow num)] forall num ([z8:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num)))) R) x3) z8)) (exists (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam10 (num arrow num) num num num num num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm num] [x11:tm num] [x12:tm num] [x13:tm (num arrow num)] forall num ([z9:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x9) x10) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x11) x12) (k0 num num))))) x4) x13) z9))) R) V1) X1) V2) X2) V3) X3) V4) X4) x3)) (exists_upd/cc (num arrow num) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num))) R V2 X2 (exists_i (num arrow num) ([x3:tm (num arrow num)] forall num ([z10:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num))) R) x3) z10)) r9 p6) (upd/cc_cares_onlyz (num arrow num) num num (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num)) V3 X3 (upd/cc_cares_onlyz (num arrow num) num num (k0 num num) V4 X4 (k0_cares_onlyz num num)))) ([r10:tm (num arrow num)] [p8:pf (forall num ([z11:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num)))) R) r10) z11))] exists_e (num arrow num) ([x3:tm (num arrow num)] forall num ([z12:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num))))) R) x3) z12)) (exists (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam10 (num arrow num) num num num num num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm num] [x11:tm num] [x12:tm num] [x13:tm (num arrow num)] forall num ([z13:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x9) x10) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x11) x12) (k0 num num))))) x4) x13) z13))) R) V1) X1) V2) X2) V3) X3) V4) X4) x3)) (exists_upd/cc (num arrow num) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num)))) R V1 X1 (exists_i (num arrow num) ([x3:tm (num arrow num)] forall num ([z14:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num)))) R) x3) z14)) r10 p8) (upd/cc_cares_onlyz (num arrow num) num num (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num))) V2 X2 (upd/cc_cares_onlyz (num arrow num) num num (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num)) V3 X3 (upd/cc_cares_onlyz (num arrow num) num num (k0 num num) V4 X4 (k0_cares_onlyz num num))))) ([r11:tm (num arrow num)] [p10:pf (forall num ([z15:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V1) X1) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V2) X2) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V3) X3) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) V4) X4) (k0 num num))))) R) r11) z15))] exists_i (num arrow num) ([x3:tm (num arrow num)] @ (num arrow num) form (@ num ((num arrow num) arrow form) (@ num (num arrow (num arrow num) arrow form) (@ num (num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ num (num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (@ (num arrow num) (num arrow num arrow num arrow num arrow num arrow num arrow num arrow num arrow (num arrow num) arrow form) (lam10 (num arrow num) num num num num num num num num (num arrow num) form ([x4:tm (num arrow num)] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm num] [x11:tm num] [x12:tm num] [x13:tm (num arrow num)] forall num ([z16:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x5) x6) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x7) x8) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x9) x10) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x11) x12) (k0 num num))))) x4) x13) z16))) R) V1) X1) V2) X2) V3) X3) V4) X4) x3) r11 (def10_i (num arrow num) num num num num num num num num (num arrow num) ([x3:tm (num arrow num)] [x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] [x8:tm num] [x9:tm num] [x10:tm num] [x11:tm num] [x12:tm (num arrow num)] forall num ([z17:tm num] @ num form (@ (num arrow num) (num arrow form) (@ (num arrow num) ((num arrow num) arrow num arrow form) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x4) x5) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x6) x7) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x8) x9) (@ ((num arrow num) arrow (num arrow num) arrow num arrow form) ((num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (@ num (num arrow ((num arrow num) arrow (num arrow num) arrow num arrow form) arrow (num arrow num) arrow (num arrow num) arrow num arrow form) (upd/cc num num (num arrow num)) x10) x11) (k0 num num))))) x3) x12) z17)) R V1 X1 V2 X2 V3 X3 V4 X4 r11 p10))))).
bits : tm (num arrow num arrow num arrow num arrow form) = lam4 num num num num form ([r:tm num] [l:tm num] [v1:tm num] [word:tm num] exists3 num num num ([pr:tm num] [plr:tm num] [shifted:tm num] @ num form (@ num (num arrow form) power2 r) pr and @ num form (@ num (num arrow form) power2 (succ (minus l r))) plr and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide word) pr) shifted and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo shifted) plr) v1)).
warning_not_portable_to_arith_rat : {C:word32} pf (isNat (const C)) = [C:word32] _warning_not_portable_to_arith_rat C.
warning_not_portable_to_arith_rat_geq : {C:word32} pf (>= (const C) zero) = [C:word32] isNat->geq_zero (const C) (warning_not_portable_to_arith_rat C).
isword_and_aligned_i : {N:tm num} pf (@ num form is_word N) -> pf (@ num form word_aligned N) -> pf (@ num form isword_and_aligned N) = [N:tm num] [p2:pf (@ num form is_word N)] [p4:pf (@ num form word_aligned N)] def1_i num ([x3:tm num] @ num form is_word x3 and @ num form word_aligned x3) N (and_i (@ num form is_word N) (@ num form word_aligned N) p2 p4).
jump_aligned_i : {X:tnum} pf (isInt X) -> pf (@ num form (@ num (shadowed_0 num) multiple_of X) four) -> pf (@ num form jump_aligned X) = [X:tnum] [p2:pf (isInt X)] [p4:pf (@ num form (@ num (shadowed_0 num) multiple_of X) four)] def1_i num ([x3:tm num] isInt x3 and @ num form (@ num (shadowed_0 num) multiple_of x3) word_size) X (and_i (isInt X) (@ num form (@ num (shadowed_0 num) multiple_of X) four) p2 p4).
jump_aligned_e : {X:tm num} {A:tform} pf (@ num form jump_aligned X) -> (pf (isInt X) -> pf (@ num form (@ num (shadowed_0 num) multiple_of X) four) -> pf A) -> pf A = [X:tm num] [A:tform] [p1:pf (@ num form jump_aligned X)] [x3:pf (isInt X) -> pf (@ num form (@ num (shadowed_0 num) multiple_of X) word_size) -> pf A] and_l (isInt X) (@ num form (@ num (shadowed_0 num) multiple_of X) word_size) A (def1_e num ([x4:tm num] isInt x4 and @ num form (@ num (shadowed_0 num) multiple_of x4) word_size) X p1) ([x4:pf (isInt X)] [x5:pf (@ num form (@ num (shadowed_0 num) multiple_of X) word_size)] x3 x4 x5).
upd/cc-> : {T1:tp} {T2:tp} {K:tm (T1 arrow T2) -> tm (T1 arrow T2) -> tm T1 -> tform} {F:tm (T1 arrow T2)} {F':tm (T1 arrow T2)} {Z:tm T1} {K':tm ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form)} {V:tm T1} {X:tm T2} (pf (K F F' Z) -> pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z)) -> pf (_upd/cc T1 T2 V X ([x3:tnfn T1 T2] [x4:tnfn T1 T2] [x5:tm T1] K x3 x4 x5) F F' Z) -> pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V) X) K') F) F') Z) = [T1:tp] [T2:tp] [K:tm (T1 arrow T2) -> tm (T1 arrow T2) -> tm T1 -> tform] [F:tm (T1 arrow T2)] [F':tm (T1 arrow T2)] [Z:tm T1] [K':tm ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form)] [V:tm T1] [X:tm T2] [p2:pf (K F F' Z) -> pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z)] [p4:pf (_upd/cc T1 T2 V X ([x3:tnfn T1 T2] [x4:tnfn T1 T2] [x5:tm T1] K x3 x4 x5) F F' Z)] upd/cc_i T1 Z V T2 F' X (T1 arrow T2) K' F ([p6:pf (eq T1 Z V)] if_e1 (_eq T1 Z V) (_eq T2 (_@ T1 T2 F' V) X) (_@3 (T1 arrow T2) (T1 arrow T2) T1 form (_lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] K x3 x4 x5)) F F' Z) p4 p6) ([p6:pf (neq T1 Z V)] cut (K F F' Z) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z) (congr form (K F F' Z) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] K x3 x4 x5)) F) F') Z) ([i1:tm form] i1) (symm form (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] K x3 x4 x5)) F) F') Z) (K F F' Z) (beta3 form T1 (T1 arrow T2) (T1 arrow T2) ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] K x3 x4 x5) F F' Z)) (if_e2 (_eq T1 Z V) (_eq T2 (_@ T1 T2 F' V) X) (_@3 (T1 arrow T2) (T1 arrow T2) T1 form (_lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] K x3 x4 x5)) F F' Z) p4 p6)) ([p8:pf (K F F' Z)] p2 p8)).
k0-> : {T1:tp} {T2:tp} {F:tnfn T1 T2} {F':tnfn T1 T2} {Z:tm T1} pf (_k0 T1 T2 F F' Z) -> pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (k0 T1 T2) F) F') Z) = [T1:tp] [T2:tp] [F:tnfn T1 T2] [F':tnfn T1 T2] [Z:tm T1] [p2:pf (_k0 T1 T2 F F' Z)] def3_i (T1 arrow T2) (T1 arrow T2) T1 ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] _k0 T1 T2 x3 x4 x5) F F' Z p2.
upd/cc<- : {T1:tp} {T2:tp} {K':tm ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form)} {F:tm (T1 arrow T2)} {F':tm (T1 arrow T2)} {Z:tm T1} {K:tm (T1 arrow T2) -> tm (T1 arrow T2) -> tm T1 -> tform} {V:tm T1} {X:tm T2} (pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z) -> pf (K F F' Z)) -> pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V) X) K') F) F') Z) -> pf (_upd/cc T1 T2 V X ([x3:tnfn T1 T2] [x4:tnfn T1 T2] [x5:tm T1] K x3 x4 x5) F F' Z) = [T1:tp] [T2:tp] [K':tm ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form)] [F:tm (T1 arrow T2)] [F':tm (T1 arrow T2)] [Z:tm T1] [K:tm (T1 arrow T2) -> tm (T1 arrow T2) -> tm T1 -> tform] [V:tm T1] [X:tm T2] [p2:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z) -> pf (K F F' Z)] [p4:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V) X) K') F) F') Z)] cut2 (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z imp K F F' Z) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V) X) K') F) F') Z) (if (eq T1 Z V) (eq T2 (@ T1 T2 F' V) X) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] K x3 x4 x5)) F) F') Z)) (imp_i (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z) (K F F' Z) ([x3:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z)] p2 x3)) p4 ([x3:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z imp K F F' Z)] [x4:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V) X) K') F) F') Z)] if_i (eq T1 Z V) (eq T2 (@ T1 T2 F' V) X) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x5:tm (T1 arrow T2)] [x6:tm (T1 arrow T2)] [x7:tm T1] K x5 x6 x7)) F) F') Z) ([p6:pf (eq T1 Z V)] upd/cc_e T1 T2 (T1 arrow T2) V X K' F F' Z p4 p6) ([p6:pf (neq T1 Z V)] cut (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x5:tm (T1 arrow T2)] [x6:tm (T1 arrow T2)] [x7:tm T1] K x5 x6 x7)) F) F') Z) (upd/cc_e2 T1 T2 (T1 arrow T2) V X K' F F' Z p4 p6) ([p8:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) K' F) F') Z)] def3_i (T1 arrow T2) (T1 arrow T2) T1 ([x5:tm (T1 arrow T2)] [x6:tm (T1 arrow T2)] [x7:tm T1] K x5 x6 x7) F F' Z (p2 p8)))).
k0<- : {T1:tp} {T2:tp} {F:tm (T1 arrow T2)} {F':tm (T1 arrow T2)} {Z:tm T1} pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (k0 T1 T2) F) F') Z) -> pf (_k0 T1 T2 F F' Z) = [T1:tp] [T2:tp] [F:tm (T1 arrow T2)] [F':tm (T1 arrow T2)] [Z:tm T1] [p2:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (k0 T1 T2) F) F') Z)] def3_e T1 (T1 arrow T2) (T1 arrow T2) ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] _k0 T1 T2 x3 x4 x5) F F' Z p2.
upd-> : {T1:tp} {T2:tp} {R:tnfn T1 T2} {V1:tm T1} {X1:tm T2} {R':tnfn T1 T2} pf (_upd T1 T2 R V1 X1 R') -> pf (@ (T1 arrow T2) form (@ T2 (shadowed_0 (T1 arrow T2)) (@ T1 (rel T2 (T1 arrow T2)) (@ (T1 arrow T2) (rel3 T1 T2 (T1 arrow T2)) (upd T1 T2) R) V1) X1) R') = [T1:tp] [T2:tp] [R:tnfn T1 T2] [V1:tm T1] [X1:tm T2] [R':tnfn T1 T2] [p1:pf (_upd T1 T2 R V1 X1 R')] cut (_upd T1 T2 R V1 X1 R') (@ (T1 arrow T2) form (@ T2 (shadowed_0 (T1 arrow T2)) (@ T1 (rel T2 (T1 arrow T2)) (@ (T1 arrow T2) (rel3 T1 T2 (T1 arrow T2)) (upd T1 T2) R) V1) X1) R') p1 ([x3:pf (_upd T1 T2 R V1 X1 R')] upd_i T2 T1 R' V1 X1 R (if_e1 (_eq T1 V1 V1) (_eq T2 (_@ T1 T2 R' V1) X1) (_@3 (T1 arrow T2) (T1 arrow T2) T1 form (_lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _k0 T1 T2 x4 x5 x6)) R R' V1) (forall_e T1 ([x4:tm T1] _upd/cc T1 T2 V1 X1 ([x5:tnfn T1 T2] [x6:tnfn T1 T2] [x7:tm T1] _k0 T1 T2 x5 x6 x7) R R' x4) p1 V1) (refl T1 V1)) ([v1:tm T1] [p2:pf (neq T1 v1 V1)] def3_e T1 (T1 arrow T2) (T1 arrow T2) ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _k0 T1 T2 x4 x5 x6) R R' v1 (if_e2 (_eq T1 v1 V1) (_eq T2 (_@ T1 T2 R' V1) X1) (_@3 (T1 arrow T2) (T1 arrow T2) T1 form (_lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _k0 T1 T2 x4 x5 x6)) R R' v1) (forall_e T1 ([x4:tm T1] _upd/cc T1 T2 V1 X1 ([x5:tnfn T1 T2] [x6:tnfn T1 T2] [x7:tm T1] _k0 T1 T2 x5 x6 x7) R R' x4) p1 v1) p2))).
upd<- : {T1:tp} {T2:tp} {R:tm (T1 arrow T2)} {V1:tm T1} {X1:tm T2} {R':tm (T1 arrow T2)} pf (@ (T1 arrow T2) form (@ T2 (shadowed_0 (T1 arrow T2)) (@ T1 (rel T2 (T1 arrow T2)) (@ (T1 arrow T2) (rel3 T1 T2 (T1 arrow T2)) (upd T1 T2) R) V1) X1) R') -> pf (_upd T1 T2 R V1 X1 R') = [T1:tp] [T2:tp] [R:tm (T1 arrow T2)] [V1:tm T1] [X1:tm T2] [R':tm (T1 arrow T2)] [p1:pf (@ (T1 arrow T2) form (@ T2 (shadowed_0 (T1 arrow T2)) (@ T1 (rel T2 (T1 arrow T2)) (@ (T1 arrow T2) (rel3 T1 T2 (T1 arrow T2)) (upd T1 T2) R) V1) X1) R')] cut (@ (T1 arrow T2) form (@ T2 (shadowed_0 (T1 arrow T2)) (@ T1 (rel T2 (T1 arrow T2)) (@ (T1 arrow T2) (rel3 T1 T2 (T1 arrow T2)) (upd T1 T2) R) V1) X1) R') (forall T1 ([x3:tm T1] if (eq T1 x3 V1) (eq T2 (@ T1 T2 R' V1) X1) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _k0 T1 T2 x4 x5 x6)) R) R') x3))) p1 ([x3:pf (@ (T1 arrow T2) form (@ T2 (shadowed_0 (T1 arrow T2)) (@ T1 (rel T2 (T1 arrow T2)) (@ (T1 arrow T2) (rel3 T1 T2 (T1 arrow T2)) (upd T1 T2) R) V1) X1) R')] forall_i T1 ([x4:tm T1] if (eq T1 x4 V1) (eq T2 (@ T1 T2 R' V1) X1) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x5:tm (T1 arrow T2)] [x6:tm (T1 arrow T2)] [x7:tm T1] _k0 T1 T2 x5 x6 x7)) R) R') x4)) ([z1:tm T1] if_i (eq T1 z1 V1) (eq T2 (@ T1 T2 R' V1) X1) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _k0 T1 T2 x4 x5 x6)) R) R') z1) ([p2:pf (eq T1 z1 V1)] upd_e1 T1 T2 R V1 X1 R' p1) ([p2:pf (neq T1 z1 V1)] cut (eq T2 (@ T1 T2 R' z1) (@ T1 T2 R z1)) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _k0 T1 T2 x4 x5 x6)) R) R') z1) (upd_e2 T1 T2 R V1 X1 R' z1 p1 p2) ([p4:pf (eq T2 (@ T1 T2 R' z1) (@ T1 T2 R z1))] cut (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _k0 T1 T2 x4 x5 x6)) R) R') z1) (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _k0 T1 T2 x4 x5 x6)) R) R') z1) (def3_i (T1 arrow T2) (T1 arrow T2) T1 ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _k0 T1 T2 x4 x5 x6) R R' z1 p4) ([p6:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (lam3 (T1 arrow T2) (T1 arrow T2) T1 form ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _k0 T1 T2 x4 x5 x6)) R) R') z1)] p6))))).
upd2-> : {T1:tp} {T2:tp} {R:tnfn T1 T2} {V1:tm T1} {X1:tm T2} {V2:tm T1} {X2:tm T2} {R':tnfn T1 T2} pf (_upd2 T1 T2 R V1 X1 V2 X2 R') -> pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd2 T1 T2) R) V1) X1) V2) X2) R') = [T1:tp] [T2:tp] [R:tnfn T1 T2] [V1:tm T1] [X1:tm T2] [V2:tm T1] [X2:tm T2] [R':tnfn T1 T2] [p2:pf (_upd2 T1 T2 R V1 X1 V2 X2 R')] cut (_upd2 T1 T2 R V1 X1 V2 X2 R') (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (lam6 (T1 arrow T2) T1 T2 T1 T2 (T1 arrow T2) form ([x3:tm (T1 arrow T2)] [x4:tm T1] [x5:tm T2] [x6:tm T1] [x7:tm T2] [x8:tm (T1 arrow T2)] forall T1 ([z1:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x4) x5) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x6) x7) (k0 T1 T2))) x3) x8) z1))) R) V1) X1) V2) X2) R') p2 ([x3:pf (_upd2 T1 T2 R V1 X1 V2 X2 R')] def6_i (T1 arrow T2) T1 T2 T1 T2 (T1 arrow T2) ([x4:tm (T1 arrow T2)] [x5:tm T1] [x6:tm T2] [x7:tm T1] [x8:tm T2] [x9:tm (T1 arrow T2)] forall T1 ([z2:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x5) x6) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x7) x8) (k0 T1 T2))) x4) x9) z2)) R V1 X1 V2 X2 R' (forall_i T1 ([x4:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V1) X1) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (k0 T1 T2))) R) R') x4) ([z3:tm T1] upd/cc-> T1 T2 ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _upd/cc T1 T2 V2 X2 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _k0 T1 T2 x7 x8 x9) x4 x5 x6) R R' z3 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (k0 T1 T2)) V1 X1 ([x4:pf (_upd/cc T1 T2 V2 X2 ([x4:tnfn T1 T2] [x5:tnfn T1 T2] [x6:tm T1] _k0 T1 T2 x4 x5 x6) R R' z3)] upd/cc-> T1 T2 ([x5:tm (T1 arrow T2)] [x6:tm (T1 arrow T2)] [x7:tm T1] _k0 T1 T2 x5 x6 x7) R R' z3 (k0 T1 T2) V2 X2 ([x5:pf (_k0 T1 T2 R R' z3)] k0-> T1 T2 R R' z3 x5) x4) (forall_e T1 ([x4:tm T1] _upd/cc T1 T2 V1 X1 ([x5:tnfn T1 T2] [x6:tnfn T1 T2] [x7:tm T1] _upd/cc T1 T2 V2 X2 ([x8:tnfn T1 T2] [x9:tnfn T1 T2] [x10:tm T1] _k0 T1 T2 x8 x9 x10) x5 x6 x7) R R' x4) p2 z3)))).
upd2<- : {T1:tp} {T2:tp} {R:tm (T1 arrow T2)} {V1:tm T1} {X1:tm T2} {V2:tm T1} {X2:tm T2} {R':tm (T1 arrow T2)} pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd2 T1 T2) R) V1) X1) V2) X2) R') -> pf (_upd2 T1 T2 R V1 X1 V2 X2 R') = [T1:tp] [T2:tp] [R:tm (T1 arrow T2)] [V1:tm T1] [X1:tm T2] [V2:tm T1] [X2:tm T2] [R':tm (T1 arrow T2)] [p2:pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd2 T1 T2) R) V1) X1) V2) X2) R')] cut (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd2 T1 T2) R) V1) X1) V2) X2) R') (forall T1 ([x3:tm T1] _upd/cc T1 T2 V1 X1 ([x4:tnfn T1 T2] [x5:tnfn T1 T2] [x6:tm T1] _upd/cc T1 T2 V2 X2 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _k0 T1 T2 x7 x8 x9) x4 x5 x6) R R' x3)) p2 ([x3:pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd2 T1 T2) R) V1) X1) V2) X2) R')] forall_i T1 ([x4:tm T1] _upd/cc T1 T2 V1 X1 ([x5:tnfn T1 T2] [x6:tnfn T1 T2] [x7:tm T1] _upd/cc T1 T2 V2 X2 ([x8:tnfn T1 T2] [x9:tnfn T1 T2] [x10:tm T1] _k0 T1 T2 x8 x9 x10) x5 x6 x7) R R' x4) ([z1:tm T1] upd/cc<- T1 T2 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (k0 T1 T2)) R R' z1 ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _upd/cc T1 T2 V2 X2 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _k0 T1 T2 x7 x8 x9) x4 x5 x6) V1 X1 ([x4:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (k0 T1 T2)) R) R') z1)] upd/cc<- T1 T2 (k0 T1 T2) R R' z1 ([x5:tm (T1 arrow T2)] [x6:tm (T1 arrow T2)] [x7:tm T1] _k0 T1 T2 x5 x6 x7) V2 X2 ([x5:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (k0 T1 T2) R) R') z1)] k0<- T1 T2 R R' z1 x5) x4) (forall_e T1 ([x4:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V1) X1) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (k0 T1 T2))) R) R') x4) (def6_e (T1 arrow T2) T2 T1 T2 T1 (T1 arrow T2) ([x4:tm (T1 arrow T2)] [x5:tm T1] [x6:tm T2] [x7:tm T1] [x8:tm T2] [x9:tm (T1 arrow T2)] forall T1 ([z2:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x5) x6) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x7) x8) (k0 T1 T2))) x4) x9) z2)) R V1 X1 V2 X2 R' p2) z1))).
upd3-> : {T1:tp} {T2:tp} {R:tnfn T1 T2} {V1:tm T1} {X1:tm T2} {V2:tm T1} {X2:tm T2} {V3:tm T1} {X3:tm T2} {R':tnfn T1 T2} pf (_upd3 T1 T2 R V1 X1 V2 X2 V3 X3 R') -> pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd3 T1 T2) R) V1) X1) V2) X2) V3) X3) R') = [T1:tp] [T2:tp] [R:tnfn T1 T2] [V1:tm T1] [X1:tm T2] [V2:tm T1] [X2:tm T2] [V3:tm T1] [X3:tm T2] [R':tnfn T1 T2] [p2:pf (_upd3 T1 T2 R V1 X1 V2 X2 V3 X3 R')] cut (_upd3 T1 T2 R V1 X1 V2 X2 V3 X3 R') (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (lam8 (T1 arrow T2) T1 T2 T1 T2 T1 T2 (T1 arrow T2) form ([x3:tm (T1 arrow T2)] [x4:tm T1] [x5:tm T2] [x6:tm T1] [x7:tm T2] [x8:tm T1] [x9:tm T2] [x10:tm (T1 arrow T2)] forall T1 ([z1:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x4) x5) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x6) x7) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x8) x9) (k0 T1 T2)))) x3) x10) z1))) R) V1) X1) V2) X2) V3) X3) R') p2 ([x3:pf (_upd3 T1 T2 R V1 X1 V2 X2 V3 X3 R')] def8_i (T1 arrow T2) T1 T2 T1 T2 T1 T2 (T1 arrow T2) ([x4:tm (T1 arrow T2)] [x5:tm T1] [x6:tm T2] [x7:tm T1] [x8:tm T2] [x9:tm T1] [x10:tm T2] [x11:tm (T1 arrow T2)] forall T1 ([z2:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x5) x6) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x7) x8) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x9) x10) (k0 T1 T2)))) x4) x11) z2)) R V1 X1 V2 X2 V3 X3 R' (forall_i T1 ([x4:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V1) X1) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (k0 T1 T2)))) R) R') x4) ([z3:tm T1] upd/cc-> T1 T2 ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _upd/cc T1 T2 V2 X2 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _upd/cc T1 T2 V3 X3 ([x10:tnfn T1 T2] [x11:tnfn T1 T2] [x12:tm T1] _k0 T1 T2 x10 x11 x12) x7 x8 x9) x4 x5 x6) R R' z3 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (k0 T1 T2))) V1 X1 ([x4:pf (_upd/cc T1 T2 V2 X2 ([x4:tnfn T1 T2] [x5:tnfn T1 T2] [x6:tm T1] _upd/cc T1 T2 V3 X3 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _k0 T1 T2 x7 x8 x9) x4 x5 x6) R R' z3)] upd/cc-> T1 T2 ([x5:tm (T1 arrow T2)] [x6:tm (T1 arrow T2)] [x7:tm T1] _upd/cc T1 T2 V3 X3 ([x8:tnfn T1 T2] [x9:tnfn T1 T2] [x10:tm T1] _k0 T1 T2 x8 x9 x10) x5 x6 x7) R R' z3 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (k0 T1 T2)) V2 X2 ([x5:pf (_upd/cc T1 T2 V3 X3 ([x5:tnfn T1 T2] [x6:tnfn T1 T2] [x7:tm T1] _k0 T1 T2 x5 x6 x7) R R' z3)] upd/cc-> T1 T2 ([x6:tm (T1 arrow T2)] [x7:tm (T1 arrow T2)] [x8:tm T1] _k0 T1 T2 x6 x7 x8) R R' z3 (k0 T1 T2) V3 X3 ([x6:pf (_k0 T1 T2 R R' z3)] k0-> T1 T2 R R' z3 x6) x5) x4) (forall_e T1 ([x4:tm T1] _upd/cc T1 T2 V1 X1 ([x5:tnfn T1 T2] [x6:tnfn T1 T2] [x7:tm T1] _upd/cc T1 T2 V2 X2 ([x8:tnfn T1 T2] [x9:tnfn T1 T2] [x10:tm T1] _upd/cc T1 T2 V3 X3 ([x11:tnfn T1 T2] [x12:tnfn T1 T2] [x13:tm T1] _k0 T1 T2 x11 x12 x13) x8 x9 x10) x5 x6 x7) R R' x4) p2 z3)))).
upd3<- : {T1:tp} {T2:tp} {R:tm (T1 arrow T2)} {V1:tm T1} {X1:tm T2} {V2:tm T1} {X2:tm T2} {V3:tm T1} {X3:tm T2} {R':tm (T1 arrow T2)} pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd3 T1 T2) R) V1) X1) V2) X2) V3) X3) R') -> pf (_upd3 T1 T2 R V1 X1 V2 X2 V3 X3 R') = [T1:tp] [T2:tp] [R:tm (T1 arrow T2)] [V1:tm T1] [X1:tm T2] [V2:tm T1] [X2:tm T2] [V3:tm T1] [X3:tm T2] [R':tm (T1 arrow T2)] [p2:pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd3 T1 T2) R) V1) X1) V2) X2) V3) X3) R')] cut (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd3 T1 T2) R) V1) X1) V2) X2) V3) X3) R') (forall T1 ([x3:tm T1] _upd/cc T1 T2 V1 X1 ([x4:tnfn T1 T2] [x5:tnfn T1 T2] [x6:tm T1] _upd/cc T1 T2 V2 X2 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _upd/cc T1 T2 V3 X3 ([x10:tnfn T1 T2] [x11:tnfn T1 T2] [x12:tm T1] _k0 T1 T2 x10 x11 x12) x7 x8 x9) x4 x5 x6) R R' x3)) p2 ([x3:pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd3 T1 T2) R) V1) X1) V2) X2) V3) X3) R')] forall_i T1 ([x4:tm T1] _upd/cc T1 T2 V1 X1 ([x5:tnfn T1 T2] [x6:tnfn T1 T2] [x7:tm T1] _upd/cc T1 T2 V2 X2 ([x8:tnfn T1 T2] [x9:tnfn T1 T2] [x10:tm T1] _upd/cc T1 T2 V3 X3 ([x11:tnfn T1 T2] [x12:tnfn T1 T2] [x13:tm T1] _k0 T1 T2 x11 x12 x13) x8 x9 x10) x5 x6 x7) R R' x4) ([z1:tm T1] upd/cc<- T1 T2 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (k0 T1 T2))) R R' z1 ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _upd/cc T1 T2 V2 X2 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _upd/cc T1 T2 V3 X3 ([x10:tnfn T1 T2] [x11:tnfn T1 T2] [x12:tm T1] _k0 T1 T2 x10 x11 x12) x7 x8 x9) x4 x5 x6) V1 X1 ([x4:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (k0 T1 T2))) R) R') z1)] upd/cc<- T1 T2 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (k0 T1 T2)) R R' z1 ([x5:tm (T1 arrow T2)] [x6:tm (T1 arrow T2)] [x7:tm T1] _upd/cc T1 T2 V3 X3 ([x8:tnfn T1 T2] [x9:tnfn T1 T2] [x10:tm T1] _k0 T1 T2 x8 x9 x10) x5 x6 x7) V2 X2 ([x5:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (k0 T1 T2)) R) R') z1)] upd/cc<- T1 T2 (k0 T1 T2) R R' z1 ([x6:tm (T1 arrow T2)] [x7:tm (T1 arrow T2)] [x8:tm T1] _k0 T1 T2 x6 x7 x8) V3 X3 ([x6:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (k0 T1 T2) R) R') z1)] k0<- T1 T2 R R' z1 x6) x5) x4) (forall_e T1 ([x4:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V1) X1) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (k0 T1 T2)))) R) R') x4) (def8_e (T1 arrow T2) T2 T1 T2 T1 T2 T1 (T1 arrow T2) ([x4:tm (T1 arrow T2)] [x5:tm T1] [x6:tm T2] [x7:tm T1] [x8:tm T2] [x9:tm T1] [x10:tm T2] [x11:tm (T1 arrow T2)] forall T1 ([z2:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x5) x6) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x7) x8) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x9) x10) (k0 T1 T2)))) x4) x11) z2)) R V1 X1 V2 X2 V3 X3 R' p2) z1))).
upd4-> : {T1:tp} {T2:tp} {R:tnfn T1 T2} {V1:tm T1} {X1:tm T2} {V2:tm T1} {X2:tm T2} {V3:tm T1} {X3:tm T2} {V4:tm T1} {X4:tm T2} {R':tnfn T1 T2} pf (_upd4 T1 T2 R V1 X1 V2 X2 V3 X3 V4 X4 R') -> pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd4 T1 T2) R) V1) X1) V2) X2) V3) X3) V4) X4) R') = [T1:tp] [T2:tp] [R:tnfn T1 T2] [V1:tm T1] [X1:tm T2] [V2:tm T1] [X2:tm T2] [V3:tm T1] [X3:tm T2] [V4:tm T1] [X4:tm T2] [R':tnfn T1 T2] [p2:pf (_upd4 T1 T2 R V1 X1 V2 X2 V3 X3 V4 X4 R')] def10_i (T1 arrow T2) T1 T2 T1 T2 T1 T2 T1 T2 (T1 arrow T2) ([x3:tm (T1 arrow T2)] [x4:tm T1] [x5:tm T2] [x6:tm T1] [x7:tm T2] [x8:tm T1] [x9:tm T2] [x10:tm T1] [x11:tm T2] [x12:tm (T1 arrow T2)] forall T1 ([z1:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x4) x5) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x6) x7) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x8) x9) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x10) x11) (k0 T1 T2))))) x3) x12) z1)) R V1 X1 V2 X2 V3 X3 V4 X4 R' (forall_i T1 ([x3:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V1) X1) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2))))) R) R') x3) ([z2:tm T1] upd/cc-> T1 T2 ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] _upd/cc T1 T2 V2 X2 ([x6:tnfn T1 T2] [x7:tnfn T1 T2] [x8:tm T1] _upd/cc T1 T2 V3 X3 ([x9:tnfn T1 T2] [x10:tnfn T1 T2] [x11:tm T1] _upd/cc T1 T2 V4 X4 ([x12:tnfn T1 T2] [x13:tnfn T1 T2] [x14:tm T1] _k0 T1 T2 x12 x13 x14) x9 x10 x11) x6 x7 x8) x3 x4 x5) R R' z2 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2)))) V1 X1 ([x3:pf (_upd/cc T1 T2 V2 X2 ([x3:tnfn T1 T2] [x4:tnfn T1 T2] [x5:tm T1] _upd/cc T1 T2 V3 X3 ([x6:tnfn T1 T2] [x7:tnfn T1 T2] [x8:tm T1] _upd/cc T1 T2 V4 X4 ([x9:tnfn T1 T2] [x10:tnfn T1 T2] [x11:tm T1] _k0 T1 T2 x9 x10 x11) x6 x7 x8) x3 x4 x5) R R' z2)] upd/cc-> T1 T2 ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _upd/cc T1 T2 V3 X3 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _upd/cc T1 T2 V4 X4 ([x10:tnfn T1 T2] [x11:tnfn T1 T2] [x12:tm T1] _k0 T1 T2 x10 x11 x12) x7 x8 x9) x4 x5 x6) R R' z2 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2))) V2 X2 ([x4:pf (_upd/cc T1 T2 V3 X3 ([x4:tnfn T1 T2] [x5:tnfn T1 T2] [x6:tm T1] _upd/cc T1 T2 V4 X4 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _k0 T1 T2 x7 x8 x9) x4 x5 x6) R R' z2)] upd/cc-> T1 T2 ([x5:tm (T1 arrow T2)] [x6:tm (T1 arrow T2)] [x7:tm T1] _upd/cc T1 T2 V4 X4 ([x8:tnfn T1 T2] [x9:tnfn T1 T2] [x10:tm T1] _k0 T1 T2 x8 x9 x10) x5 x6 x7) R R' z2 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2)) V3 X3 ([x5:pf (_upd/cc T1 T2 V4 X4 ([x5:tnfn T1 T2] [x6:tnfn T1 T2] [x7:tm T1] _k0 T1 T2 x5 x6 x7) R R' z2)] upd/cc-> T1 T2 ([x6:tm (T1 arrow T2)] [x7:tm (T1 arrow T2)] [x8:tm T1] _k0 T1 T2 x6 x7 x8) R R' z2 (k0 T1 T2) V4 X4 ([x6:pf (_k0 T1 T2 R R' z2)] k0-> T1 T2 R R' z2 x6) x5) x4) x3) (forall_e T1 ([x3:tm T1] _upd/cc T1 T2 V1 X1 ([x4:tnfn T1 T2] [x5:tnfn T1 T2] [x6:tm T1] _upd/cc T1 T2 V2 X2 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _upd/cc T1 T2 V3 X3 ([x10:tnfn T1 T2] [x11:tnfn T1 T2] [x12:tm T1] _upd/cc T1 T2 V4 X4 ([x13:tnfn T1 T2] [x14:tnfn T1 T2] [x15:tm T1] _k0 T1 T2 x13 x14 x15) x10 x11 x12) x7 x8 x9) x4 x5 x6) R R' x3) p2 z2))).
upd4<- : {T1:tp} {T2:tp} {R:tm (T1 arrow T2)} {V1:tm T1} {X1:tm T2} {V2:tm T1} {X2:tm T2} {V3:tm T1} {X3:tm T2} {V4:tm T1} {X4:tm T2} {R':tm (T1 arrow T2)} pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd4 T1 T2) R) V1) X1) V2) X2) V3) X3) V4) X4) R') -> pf (_upd4 T1 T2 R V1 X1 V2 X2 V3 X3 V4 X4 R') = [T1:tp] [T2:tp] [R:tm (T1 arrow T2)] [V1:tm T1] [X1:tm T2] [V2:tm T1] [X2:tm T2] [V3:tm T1] [X3:tm T2] [V4:tm T1] [X4:tm T2] [R':tm (T1 arrow T2)] [p2:pf (@ (T1 arrow T2) form (@ T2 ((T1 arrow T2) arrow form) (@ T1 (T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T2 (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ T1 (T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (@ (T1 arrow T2) (T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow T1 arrow T2 arrow (T1 arrow T2) arrow form) (upd4 T1 T2) R) V1) X1) V2) X2) V3) X3) V4) X4) R')] forall_i T1 ([x3:tm T1] _upd/cc T1 T2 V1 X1 ([x4:tnfn T1 T2] [x5:tnfn T1 T2] [x6:tm T1] _upd/cc T1 T2 V2 X2 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _upd/cc T1 T2 V3 X3 ([x10:tnfn T1 T2] [x11:tnfn T1 T2] [x12:tm T1] _upd/cc T1 T2 V4 X4 ([x13:tnfn T1 T2] [x14:tnfn T1 T2] [x15:tm T1] _k0 T1 T2 x13 x14 x15) x10 x11 x12) x7 x8 x9) x4 x5 x6) R R' x3) ([z1:tm T1] upd/cc<- T1 T2 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2)))) R R' z1 ([x3:tm (T1 arrow T2)] [x4:tm (T1 arrow T2)] [x5:tm T1] _upd/cc T1 T2 V2 X2 ([x6:tnfn T1 T2] [x7:tnfn T1 T2] [x8:tm T1] _upd/cc T1 T2 V3 X3 ([x9:tnfn T1 T2] [x10:tnfn T1 T2] [x11:tm T1] _upd/cc T1 T2 V4 X4 ([x12:tnfn T1 T2] [x13:tnfn T1 T2] [x14:tm T1] _k0 T1 T2 x12 x13 x14) x9 x10 x11) x6 x7 x8) x3 x4 x5) V1 X1 ([x3:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2)))) R) R') z1)] upd/cc<- T1 T2 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2))) R R' z1 ([x4:tm (T1 arrow T2)] [x5:tm (T1 arrow T2)] [x6:tm T1] _upd/cc T1 T2 V3 X3 ([x7:tnfn T1 T2] [x8:tnfn T1 T2] [x9:tm T1] _upd/cc T1 T2 V4 X4 ([x10:tnfn T1 T2] [x11:tnfn T1 T2] [x12:tm T1] _k0 T1 T2 x10 x11 x12) x7 x8 x9) x4 x5 x6) V2 X2 ([x4:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2))) R) R') z1)] upd/cc<- T1 T2 (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2)) R R' z1 ([x5:tm (T1 arrow T2)] [x6:tm (T1 arrow T2)] [x7:tm T1] _upd/cc T1 T2 V4 X4 ([x8:tnfn T1 T2] [x9:tnfn T1 T2] [x10:tm T1] _k0 T1 T2 x8 x9 x10) x5 x6 x7) V3 X3 ([x5:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2)) R) R') z1)] upd/cc<- T1 T2 (k0 T1 T2) R R' z1 ([x6:tm (T1 arrow T2)] [x7:tm (T1 arrow T2)] [x8:tm T1] _k0 T1 T2 x6 x7 x8) V4 X4 ([x6:pf (@ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (k0 T1 T2) R) R') z1)] k0<- T1 T2 R R' z1 x6) x5) x4) x3) (forall_e T1 ([x3:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V1) X1) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V2) X2) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V3) X3) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) V4) X4) (k0 T1 T2))))) R) R') x3) (def10_e (T1 arrow T2) T2 T1 T2 T1 T2 T1 T2 T1 (T1 arrow T2) ([x3:tm (T1 arrow T2)] [x4:tm T1] [x5:tm T2] [x6:tm T1] [x7:tm T2] [x8:tm T1] [x9:tm T2] [x10:tm T1] [x11:tm T2] [x12:tm (T1 arrow T2)] forall T1 ([z2:tm T1] @ T1 form (@ (T1 arrow T2) (T1 arrow form) (@ (T1 arrow T2) ((T1 arrow T2) arrow T1 arrow form) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x4) x5) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x6) x7) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x8) x9) (@ ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T2 (((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (@ T1 (T2 arrow ((T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) arrow (T1 arrow T2) arrow (T1 arrow T2) arrow T1 arrow form) (upd/cc T1 T2 (T1 arrow T2)) x10) x11) (k0 T1 T2))))) x3) x12) z2)) R V1 X1 V2 X2 V3 X3 V4 X4 R' p2) z1)).
eq_hidden_regs<- : {R:tm (num arrow num)} {R':tm (num arrow num)} pf (@ (num arrow num) form (@ (num arrow num) (shadowed_0 (num arrow num)) (@ (set num) (rel (num arrow num) (num arrow num)) (agree_over_set num num) hidden_regs) R) R') -> pf (_eq_hidden_regs R R') = [R:tm (num arrow num)] [R':tm (num arrow num)] [p2:pf (@ (num arrow num) form (@ (num arrow num) (shadowed_0 (num arrow num)) (@ (set num) (rel (num arrow num) (num arrow num)) (agree_over_set num num) hidden_regs) R) R')] forall_imp_i num ([x3:tm num] geq x3 hidden_regs_start) ([x3:tm num] eq num (@ num num R x3) (@ num num R' x3)) ([x4:tm num] [p4:pf (geq x4 hidden_regs_start)] agree_over_set_e num num hidden_regs R R' x4 p2 (def1_i num ([x3:tm num] geq x3 hidden_regs_start) x4 p4)).
ncomp->_ncomp : {T:tp} {F:tm (T arrow T)} {A:tm num} {X:tm T} {B:tm T} pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) A) X) B) -> pf (_ncomp T F A X B) = [T:tp] [F:tm (T arrow T)] [A:tm num] [X:tm T] [B:tm T] [x3:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) A) X) B)] def4_e T T num (T arrow T) ([x4:tm (T arrow T)] [x5:tm num] [x6:tm T] [x7:tm T] _ncomp T x4 x5 x6 x7) F A X B x3.
_ncomp->ncomp : {T:tp} {F:tm (T arrow T)} {A:tm num} {X:tm T} {B:tm T} pf (_ncomp T F A X B) -> pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) A) X) B) = [T:tp] [F:tm (T arrow T)] [A:tm num] [X:tm T] [B:tm T] [x3:pf (_ncomp T F A X B)] def4_i (T arrow T) num T T ([x4:tm (T arrow T)] [x5:tm num] [x6:tm T] [x7:tm T] _ncomp T x4 x5 x6 x7) F A X B x3.
power2->_power2 : {X:tm num} {Y:tm num} pf (@ num form (@ num (num arrow form) power2 X) Y) -> pf (_power2 X Y) = [X:tm num] [Y:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 X) Y)] and_l (isNat X) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) X) one) Y) (isNat X and _ncomp num double X one Y) (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) X Y p1) ([q1:pf (isNat X)] [q2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) X) one) Y)] and_i (isNat X) (_ncomp num double X one Y) q1 (ncomp->_ncomp num double X one Y q2)).
_power2->power2 : {X:tnum} {Y:tnum} pf (_power2 X Y) -> pf (@ num form (@ num (num arrow form) power2 X) Y) = [X:tnum] [Y:tnum] [p1:pf (_power2 X Y)] def2_i num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) X Y (and_l (isNat X) (_ncomp num double X one Y) (isNat X and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) X) one) Y) p1 ([q1:pf (isNat X)] [q2:pf (_ncomp num double X one Y)] and_i (isNat X) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) X) one) Y) q1 (_ncomp->ncomp num double X one Y q2))).
divide->_divide : {A:tm num} {B:tm num} {C:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide A) B) C) -> pf (_divide A B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide A) B) C)] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod A) B) C) x3) (exists num ([x3:tm num] _divide_mod A B C x3)) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) r)) A B C p1) ([r:tm num] [q:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod A) B) C) r)] exists_i num ([x3:tm num] _divide_mod A B C x3) r (def4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) A B C r q)).
_divide->divide : {A:tnum} {B:tnum} {C:tnum} pf (_divide A B C) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide A) B) C) = [A:tnum] [B:tnum] [C:tnum] [p1:pf (_divide A B C)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([r:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) x5) r)) A B C (exists_e num ([x3:tm num] _divide_mod A B C x3) (exists num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (lam4 num num num num form ([x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] _divide_mod x4 x5 x6 x7)) A) B) C) x3)) p1 ([r:tm num] [q:pf (_divide_mod A B C r)] exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (lam4 num num num num form ([x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] _divide_mod x4 x5 x6 x7)) A) B) C) x3) r (def4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) A B C r q))).
modulo->_modulo : {A:tm num} {B:tm num} {C:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) B) C) -> pf (_modulo A B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) B) C)] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod A) B) x3) C) (exists num ([x3:tm num] _divide_mod A B x3 C)) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) A B C p1) ([q:tm num] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod A) B) q) C)] exists_i num ([x3:tm num] _divide_mod A B x3 C) q (def4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) A B q C p2)).
_modulo->modulo : {A:tnum} {B:tnum} {C:tnum} pf (_modulo A B C) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo A) B) C) = [A:tnum] [B:tnum] [C:tnum] [p1:pf (_modulo A B C)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] exists num ([q:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) divide_mod x3) x4) q) x5)) A B C (exists_e num ([x3:tm num] _divide_mod A B x3 C) (exists num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (lam4 num num num num form ([x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] _divide_mod x4 x5 x6 x7)) A) B) x3) C)) p1 ([q:tm num] [p2:pf (_divide_mod A B q C)] exists_i num ([x3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (lam4 num num num num form ([x4:tm num] [x5:tm num] [x6:tm num] [x7:tm num] _divide_mod x4 x5 x6 x7)) A) B) x3) C) q (def4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] _divide_mod x3 x4 x5 x6) A B q C p2))).
bits->_bits : {R:tm num} {L:tm num} {V:tm num} {W:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) bits R) L) V) W) -> pf (_bits R L V W) = [R:tm num] [L:tm num] [V:tm num] [W:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) bits R) L) V) W)] exists3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) power2 R) x3 and @ num form (@ num (num arrow form) power2 (succ (minus L R))) x4 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide W) x3) x5 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo x5) x4) V) (exists3 num num num ([x3:tm num] [x4:tm num] [x5:tm num] _power2 R x3 and _power2 (succ (minus L R)) x4 and _divide W x3 x5 and _modulo x5 x4 V)) (def4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] exists3 num num num ([pr:tm num] [plr:tm num] [shifted:tm num] @ num form (@ num (num arrow form) power2 x3) pr and @ num form (@ num (num arrow form) power2 (succ (minus x4 x3))) plr and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide x6) pr) shifted and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo shifted) plr) x5)) R L V W p1) ([pr:tm num] [plr:tm num] [shifted:tm num] [q:pf (@ num form (@ num (num arrow form) power2 R) pr and @ num form (@ num (num arrow form) power2 (succ (minus L R))) plr and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide W) pr) shifted and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo shifted) plr) V)] and4_l (@ num form (@ num (num arrow form) power2 R) pr) (@ num form (@ num (num arrow form) power2 (succ (minus L R))) plr) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide W) pr) shifted) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo shifted) plr) V) (exists3 num num num ([x3:tm num] [x4:tm num] [x5:tm num] _power2 R x3 and _power2 (succ (minus L R)) x4 and _divide W x3 x5 and _modulo x5 x4 V)) q ([q1:pf (@ num form (@ num (num arrow form) power2 R) pr)] [q2:pf (@ num form (@ num (num arrow form) power2 (succ (minus L R))) plr)] [q3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide W) pr) shifted)] [q4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo shifted) plr) V)] exists3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] _power2 R x3 and _power2 (succ (minus L R)) x4 and _divide W x3 x5 and _modulo x5 x4 V) pr plr shifted (and4_i (_power2 R pr) (_power2 (succ (minus L R)) plr) (_divide W pr shifted) (_modulo shifted plr V) (power2->_power2 R pr q1) (power2->_power2 (succ (minus L R)) plr q2) (divide->_divide W pr shifted q3) (modulo->_modulo shifted plr V q4)))).
_bits->bits : {R:tnum} {L:tnum} {V:tnum} {W:tnum} pf (_bits R L V W) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) bits R) L) V) W) = [R:tnum] [L:tnum] [V:tnum] [W:tnum] [p1:pf (_bits R L V W)] exists3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] _power2 R x3 and _power2 (succ (minus L R)) x4 and _divide W x3 x5 and _modulo x5 x4 V) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (lam4 num num num num form ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] exists3 num num num ([pr:tm num] [plr:tm num] [shifted:tm num] @ num form (@ num (num arrow form) power2 x3) pr and @ num form (@ num (num arrow form) power2 (succ (minus x4 x3))) plr and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide x6) pr) shifted and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo shifted) plr) x5))) R) L) V) W) p1 ([pr:tm num] [plr:tm num] [shifted:tm num] [q:pf (_power2 R pr and _power2 (succ (minus L R)) plr and _divide W pr shifted and _modulo shifted plr V)] and4_l (_power2 R pr) (_power2 (succ (minus L R)) plr) (_divide W pr shifted) (_modulo shifted plr V) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ num (num arrow num arrow num arrow form) (lam4 num num num num form ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] exists3 num num num ([pr1:tm num] [plr1:tm num] [shifted1:tm num] @ num form (@ num (num arrow form) power2 x3) pr1 and @ num form (@ num (num arrow form) power2 (succ (minus x4 x3))) plr1 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide x6) pr1) shifted1 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo shifted1) plr1) x5))) R) L) V) W) q ([q1:pf (_power2 R pr)] [q2:pf (_power2 (succ (minus L R)) plr)] [q3:pf (_divide W pr shifted)] [q4:pf (_modulo shifted plr V)] def4_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] exists3 num num num ([pr2:tm num] [plr2:tm num] [shifted2:tm num] @ num form (@ num (num arrow form) power2 x3) pr2 and @ num form (@ num (num arrow form) power2 (succ (minus x4 x3))) plr2 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide x6) pr2) shifted2 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo shifted2) plr2) x5)) R L V W (exists3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) power2 R) x3 and @ num form (@ num (num arrow form) power2 (succ (minus L R))) x4 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide W) x3) x5 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo x5) x4) V) pr plr shifted (and4_i (@ num form (@ num (num arrow form) power2 R) pr) (@ num form (@ num (num arrow form) power2 (succ (minus L R))) plr) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) divide W) pr) shifted) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo shifted) plr) V) (_power2->power2 R pr q1) (_power2->power2 (succ (minus L R)) plr q2) (_divide->divide W pr shifted q3) (_modulo->modulo shifted plr V q4))))).
plus_mod32-> : {A:tnum} {B:tnum} {C:tnum} pf (_plus_mod32 A B C) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 A) B) C) = [A:tnum] [B:tnum] [C:tnum] [p1:pf (_plus_mod32 A B C)] cut (_plus_mod32 A B C) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus x3 x4)) pow2_32) x5)) A) B) C) p1 ([x3:pf (_plus_mod32 A B C)] def3_i num num num ([x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus x4 x5)) pow2_32) x6) A B C (_modulo->modulo (plus A B) pow2_32 C p1)).
plus_mod32<- : {A:tm num} {B:tm num} {C:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 A) B) C) -> pf (_plus_mod32 A B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 A) B) C)] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 A) B) C) (_modulo (plus A B) pow2_32 C) p1 ([x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 A) B) C)] modulo->_modulo (plus A B) pow2_32 C (def3_e num num num ([x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (plus x4 x5)) pow2_32) x6) A B C p1)).
minus_mod32-> : {A:tnum} {B:tnum} {C:tnum} pf (_minus_mod32 A B C) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 A) B) C) = [A:tnum] [B:tnum] [C:tnum] [p1:pf (_minus_mod32 A B C)] cut (_minus_mod32 A B C) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus x3 x4)) pow2_32) x5)) A) B) C) p1 ([x3:pf (_minus_mod32 A B C)] def3_i num num num ([x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus x4 x5)) pow2_32) x6) A B C (_modulo->modulo (minus A B) pow2_32 C p1)).
minus_mod32<- : {A:tm num} {B:tm num} {C:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 A) B) C) -> pf (_minus_mod32 A B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 A) B) C)] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 A) B) C) (_modulo (minus A B) pow2_32 C) p1 ([x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) minus_mod32 A) B) C)] modulo->_modulo (minus A B) pow2_32 C (def3_e num num num ([x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (minus x4 x5)) pow2_32) x6) A B C p1)).
times_mod32-> : {A:tnum} {B:tnum} {C:tnum} pf (_times_mod32 A B C) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 A) B) C) = [A:tnum] [B:tnum] [C:tnum] [p1:pf (_times_mod32 A B C)] cut (_times_mod32 A B C) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times x3 x4)) pow2_32) x5)) A) B) C) p1 ([x3:pf (_times_mod32 A B C)] def3_i num num num ([x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times x4 x5)) pow2_32) x6) A B C (_modulo->modulo (times A B) pow2_32 C p1)).
times_mod32<- : {A:tm num} {B:tm num} {C:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 A) B) C) -> pf (_times_mod32 A B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 A) B) C)] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 A) B) C) (_modulo (times A B) pow2_32 C) p1 ([x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) times_mod32 A) B) C)] modulo->_modulo (times A B) pow2_32 C (def3_e num num num ([x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo (times x4 x5)) pow2_32) x6) A B C p1)).
all_fixnums_i : {M:tm (num arrow num)} {R:tm (num arrow num)} ({x3:tm num} pf (@ num form is_word (@ num num M x3) and @ num form is_word (@ num num R x3))) -> pf (@ memory form (@ registers (memory arrow form) all_fixnums R) M) = [M:tm (num arrow num)] [R:tm (num arrow num)] [p1:{x4:tm num} pf (@ num form is_word (@ num num M x4) and @ num form is_word (@ num num R x4))] def2_i registers memory ([x3:tm registers] [x4:tm memory] forall num ([x5:tnum] @ num form is_word (get_mem x4 x5) and @ num form is_word (get_reg x3 x5))) R M (forall_i num ([x3:tm num] @ num form is_word (@ num num M x3) and @ num form is_word (@ num num R x3)) ([a:tm num] p1 a)).
all_fixnums_e1 : {R:tm registers} {M:tm memory} {X:tm num} pf (@ memory form (@ registers (memory arrow form) all_fixnums R) M) -> pf (@ num form is_word (@ num num R X)) = [R:tm registers] [M:tm memory] [X:tm num] [p1:pf (@ memory form (@ registers (memory arrow form) all_fixnums R) M)] and_e2 (@ num form is_word (get_mem M X)) (@ num form is_word (get_reg R X)) (forall_e num ([x3:tm num] @ num form is_word (get_mem M x3) and @ num form is_word (get_reg R x3)) (def2_e memory registers ([x3:tm registers] [x4:tm memory] forall num ([x5:tnum] @ num form is_word (get_mem x4 x5) and @ num form is_word (get_reg x3 x5))) R M p1) X).
all_fixnums-> : {R:tregs} {M:tmem} pf (_all_fixnums R M) -> pf (@ memory form (@ registers (memory arrow form) all_fixnums R) M) = [R:tregs] [M:tmem] [p1:pf (_all_fixnums R M)] cut (_all_fixnums R M) (@ memory form (@ registers (memory arrow form) all_fixnums R) M) p1 ([x3:pf (_all_fixnums R M)] all_fixnums_i M R ([x4:tm num] and_l (_is_word (get_mem M x4)) (_is_word (get_reg R x4)) (@ num form (lam num form ([x5:tm num] _is_word x5)) (@ num num M x4) and @ num form (lam num form ([x5:tm num] _is_word x5)) (@ num num R x4)) (forall_e num ([x5:tm num] _is_word (get_mem M x5) and _is_word (get_reg R x5)) p1 x4) ([p2:pf (_is_word (get_mem M x4))] [p3:pf (_is_word (get_reg R x4))] and_i (@ num form (lam num form ([x5:tm num] _is_word x5)) (@ num num M x4)) (@ num form (lam num form ([x5:tm num] _is_word x5)) (@ num num R x4)) (def1_i num ([x5:tm num] _is_word x5) (@ num num M x4) p2) (def1_i num ([x5:tm num] _is_word x5) (@ num num R x4) p3)))).
block-> : {F:tnum -> tform} {Start:tnum} {End:tnum} pf (_block ([x3:tnum] F x3) Start End) -> pf (@ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (lam num form ([x3:tm num] F x3))) Start) End) = [F:tnum -> tform] [Start:tnum] [End:tnum] [p1:pf (_block ([x3:tnum] F x3) Start End)] cut (_block ([x3:tnum] F x3) Start End) (@ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) (lam3 (num arrow form) num num form ([x3:tm (num arrow form)] [x4:tm num] [x5:tm num] forall num ([x6:tm num] leq x4 x6 imp lt x6 x5 imp @ num form x3 x6))) (lam num form ([x3:tm num] F x3))) Start) End) p1 ([x3:pf (_block ([x3:tnum] F x3) Start End)] def3_i (num arrow form) num num ([x4:tm (num arrow form)] [x5:tm num] [x6:tm num] forall num ([x7:tm num] leq x5 x7 imp lt x7 x6 imp @ num form x4 x7)) (lam num form ([x4:tm num] F x4)) Start End (forall_imp2_i num ([x8:tm num] leq Start x8) ([x4:tm num] lt x4 End) ([x4:tm num] @ num form (lam num form ([x5:tm num] F x5)) x4) ([x9:tm num] [p2:pf (leq Start x9)] [p3:pf (lt x9 End)] cut (F x9) (@ num form (lam num form ([x4:tm num] F x4)) x9) (forall_imp2_e num ([a:tm num] leq Start a) ([a:tm num] lt a End) ([a:tm num] F a) p1 x9 p2 p3) ([p6:pf (F x9)] def1_i num ([x4:tm num] F x4) x9 p6)))).
spill_area_rw-> : {R:tregs} {M:tmem} pf (_spill_area_rw R M) -> pf (@ memory form (@ registers (memory arrow form) spill_area_rw R) M) = [R:tregs] [M:tmem] [p1:pf (_spill_area_rw R M)] cut (@ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (lam num form ([x3:tm num] (([x4:tnum] _readable R M x4) &&n ([x4:tnum] _writable R M x4)) x3))) (plus (get_reg R reg_sp) ml_spillarea)) (plus (get_reg R reg_sp) ml_framesize)) (@ memory form (@ registers (memory arrow form) (lam2 registers memory form ([x3:tm registers] [x4:tm memory] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable x3) x4) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable x3) x4))) (plus (@ num num x3 reg_sp) ml_spillarea)) (plus (@ num num x3 reg_sp) ml_framesize))) R) M) (block-> ([x3:tnum] (([x4:tnum] _readable R M x4) &&n ([x4:tnum] _writable R M x4)) x3) (plus (get_reg R reg_sp) ml_spillarea) (plus (get_reg R reg_sp) ml_framesize) p1) ([p2:pf (@ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (lam num form ([x3:tm num] (([x4:tnum] _readable R M x4) &&n ([x4:tnum] _writable R M x4)) x3))) (plus (get_reg R reg_sp) ml_spillarea)) (plus (get_reg R reg_sp) ml_framesize))] cut (eq (num arrow form) (lam num form ([x3:tm num] @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam2 registers memory (num arrow form) ([x4:tm registers] [x5:tm memory] _lam num form ([x6:tm num] _readable x4 x5 x6))) R) M) x3 and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam2 registers memory (num arrow form) ([x4:tm registers] [x5:tm memory] _lam num form ([x6:tm num] _writable x4 x5 x6))) R) M) x3)) (lam num form ([x4:tm num] @ num form (lam num form ([x3:tm num] _readable R M x3)) x4 and @ num form (lam num form ([x3:tm num] _writable R M x3)) x4))) (@ memory form (@ registers (memory arrow form) (lam2 registers memory form ([x3:tm registers] [x4:tm memory] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable x3) x4) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable x3) x4))) (plus (@ num num x3 reg_sp) ml_spillarea)) (plus (@ num num x3 reg_sp) ml_framesize))) R) M) (congr2 (num arrow form) (num arrow form) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam2 registers memory (num arrow form) ([x3:tm registers] [x4:tm memory] _lam num form ([x5:tm num] _readable x3 x4 x5))) R) M) (_lam num form ([x3:tm num] _readable R M x3)) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam2 registers memory (num arrow form) ([x3:tm registers] [x4:tm memory] _lam num form ([x5:tm num] _writable x3 x4 x5))) R) M) (_lam num form ([x3:tm num] _writable R M x3)) ([u:tm (num arrow form)] [v1:tm (num arrow form)] eq (num arrow form) (lam num form ([x5:tm num] @ num form u x5 and @ num form v1 x5)) (lam num form ([x6:tm num] @ num form (lam num form ([x3:tm num] _readable R M x3)) x6 and @ num form (lam num form ([x3:tm num] _writable R M x3)) x6))) (beta2 (num arrow form) memory registers ([x3:tm registers] [x4:tm memory] _lam num form ([x5:tm num] _readable x3 x4 x5)) R M) (beta2 (num arrow form) memory registers ([x3:tm registers] [x4:tm memory] _lam num form ([x5:tm num] _writable x3 x4 x5)) R M) (refl (num arrow form) (lam num form ([x7:tm num] @ num form (_lam num form ([x3:tm num] _readable R M x3)) x7 and @ num form (_lam num form ([x3:tm num] _writable R M x3)) x7)))) ([p4:pf (eq (num arrow form) (lam num form ([x8:tm num] @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) x8 and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable R) M) x8)) (lam num form ([x9:tm num] @ num form (lam num form ([x3:tm num] _readable R M x3)) x9 and @ num form (lam num form ([x3:tm num] _writable R M x3)) x9)))] def2_i registers memory ([x3:tm registers] [x4:tm memory] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable x3) x4) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable x3) x4))) (plus (@ num num x3 reg_sp) ml_spillarea)) (plus (@ num num x3 reg_sp) ml_framesize)) R M (congr (num arrow form) (lam num form ([x10:tm num] @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) x10 and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable R) M) x10)) (lam num form ([x11:tm num] @ num form (lam num form ([x3:tm num] _readable R M x3)) x11 and @ num form (lam num form ([x3:tm num] _writable R M x3)) x11)) ([u:tm (num arrow form)] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block u) (plus (@ num num R reg_sp) ml_spillarea)) (plus (@ num num R reg_sp) ml_framesize)) p4 p2))).
spill_area_rw_e : {R:tm registers} {M:tm memory} pf (@ memory form (@ registers (memory arrow form) spill_area_rw R) M) -> pf (@ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable R) M))) (plus (@ num num R reg_sp) ml_spillarea)) (plus (@ num num R reg_sp) ml_framesize)) = [R:tm registers] [M:tm memory] [x3:pf (@ memory form (@ registers (memory arrow form) spill_area_rw R) M)] def2_e memory registers ([x4:tm registers] [x5:tm memory] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable x4) x5) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable x4) x5))) (plus (@ num num x4 reg_sp) ml_spillarea)) (plus (@ num num x4 reg_sp) ml_framesize)) R M x3.
heap_area_rw-> : {R:tregs} {M:tmem} pf (_heap_area_rw R M) -> pf (@ memory form (@ registers (memory arrow form) heap_area_rw R) M) = [R:tregs] [M:tmem] [p1:pf (_heap_area_rw R M)] cut (_heap_area_rw R M) (@ memory form (@ registers (memory arrow form) (lam2 registers memory form ([x3:tm registers] [x4:tm memory] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable x3) x4) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable x3) x4))) (@ num num x3 reg_allocptr)) (plus (@ num num x3 reg_limitptr) (const 4096)))) R) M) p1 ([x3:pf (_heap_area_rw R M)] cut (@ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (lam num form ([x4:tm num] (([x5:tnum] _readable R M x5) &&n ([x5:tnum] _writable R M x5)) x4))) (get_reg R reg_allocptr)) (plus (get_reg R reg_limitptr) (const 4096))) (@ memory form (@ registers (memory arrow form) (lam2 registers memory form ([x4:tm registers] [x5:tm memory] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable x4) x5) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable x4) x5))) (@ num num x4 reg_allocptr)) (plus (@ num num x4 reg_limitptr) (const 4096)))) R) M) (block-> ([x4:tnum] (([x5:tnum] _readable R M x5) &&n ([x5:tnum] _writable R M x5)) x4) (get_reg R reg_allocptr) (plus (get_reg R reg_limitptr) (const 4096)) p1) ([p2:pf (@ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (lam num form ([x4:tm num] (([x5:tnum] _readable R M x5) &&n ([x5:tnum] _writable R M x5)) x4))) (get_reg R reg_allocptr)) (plus (get_reg R reg_limitptr) (const 4096)))] cut (eq (num arrow form) (lam num form ([x4:tm num] @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam2 registers memory (num arrow form) ([x5:tm registers] [x6:tm memory] _lam num form ([x7:tm num] _readable x5 x6 x7))) R) M) x4 and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam2 registers memory (num arrow form) ([x5:tm registers] [x6:tm memory] _lam num form ([x7:tm num] _writable x5 x6 x7))) R) M) x4)) (lam num form ([x5:tm num] @ num form (lam num form ([x4:tm num] _readable R M x4)) x5 and @ num form (lam num form ([x4:tm num] _writable R M x4)) x5))) (@ memory form (@ registers (memory arrow form) (lam2 registers memory form ([x4:tm registers] [x5:tm memory] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable x4) x5) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable x4) x5))) (@ num num x4 reg_allocptr)) (plus (@ num num x4 reg_limitptr) (const 4096)))) R) M) (congr2 (num arrow form) (num arrow form) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam2 registers memory (num arrow form) ([x4:tm registers] [x5:tm memory] _lam num form ([x6:tm num] _readable x4 x5 x6))) R) M) (_lam num form ([x4:tm num] _readable R M x4)) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam2 registers memory (num arrow form) ([x4:tm registers] [x5:tm memory] _lam num form ([x6:tm num] _writable x4 x5 x6))) R) M) (_lam num form ([x4:tm num] _writable R M x4)) ([u:tm (num arrow form)] [v1:tm (num arrow form)] eq (num arrow form) (lam num form ([x6:tm num] @ num form u x6 and @ num form v1 x6)) (lam num form ([x7:tm num] @ num form (lam num form ([x4:tm num] _readable R M x4)) x7 and @ num form (lam num form ([x4:tm num] _writable R M x4)) x7))) (beta2 (num arrow form) memory registers ([x4:tm registers] [x5:tm memory] _lam num form ([x6:tm num] _readable x4 x5 x6)) R M) (beta2 (num arrow form) memory registers ([x4:tm registers] [x5:tm memory] _lam num form ([x6:tm num] _writable x4 x5 x6)) R M) (refl (num arrow form) (lam num form ([x8:tm num] @ num form (_lam num form ([x4:tm num] _readable R M x4)) x8 and @ num form (_lam num form ([x4:tm num] _writable R M x4)) x8)))) ([p4:pf (eq (num arrow form) (lam num form ([x9:tm num] @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) x9 and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable R) M) x9)) (lam num form ([x10:tm num] @ num form (lam num form ([x4:tm num] _readable R M x4)) x10 and @ num form (lam num form ([x4:tm num] _writable R M x4)) x10)))] def2_i registers memory ([x4:tm registers] [x5:tm memory] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block (&& num (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable x4) x5) (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable x4) x5))) (@ num num x4 reg_allocptr)) (plus (@ num num x4 reg_limitptr) (const 4096))) R M (congr (num arrow form) (lam num form ([x11:tm num] @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) x11 and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) writable R) M) x11)) (lam num form ([x12:tm num] @ num form (lam num form ([x4:tm num] _readable R M x4)) x12 and @ num form (lam num form ([x4:tm num] _writable R M x4)) x12)) ([u:tm (num arrow form)] @ num form (@ num (num arrow form) (@ (num arrow form) (num arrow num arrow form) block u) (@ num num R reg_allocptr)) (plus (@ num num R reg_limitptr) (const 4096))) p4 p2)))).
set_disjoint-> : {T:tp} {S1:tm T -> tform} {S2:tm T -> tform} pf (_set_disjoint T ([x3:tm T] S1 x3) ([x3:tm T] S2 x3)) -> pf (@ (set T) form (@ (set T) (shadowed_0 (set T)) (set_disjoint T) (lam T form ([x3:tm T] S1 x3))) (lam T form ([x3:tm T] S2 x3))) = [T:tp] [S1:tm T -> tform] [S2:tm T -> tform] [p2:pf (_set_disjoint T ([x3:tm T] S1 x3) ([x3:tm T] S2 x3))] set_disjoint_i T (lam T form ([x3:tm T] S1 x3)) (lam T form ([x3:tm T] S2 x3)) ([x3:tm T] [p6:pf (@ T form (lam T form ([x4:tm T] S1 x4)) x3)] [p8:pf (@ T form (lam T form ([x4:tm T] S2 x4)) x3)] cut (exists T ([x4:tm T] S1 x4 and S2 x4)) false (exists_i T ([x4:tm T] S1 x4 and S2 x4) x3 (and_i (S1 x3) (S2 x3) (def1_e T ([x4:tm T] S1 x4) x3 p6) (def1_e T ([x4:tm T] S2 x4) x3 p8))) ([p10:pf (exists T ([x4:tm T] S1 x4 and S2 x4))] not_e (_exists T ([x5:tm T] S1 x5 and S2 x5)) p2 p10)).
inrange2-> : {Lo:tnum} {Hi:tnum} {X:tnum} pf (_inrange2 Lo Hi X) -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) X) = [Lo:tnum] [Hi:tnum] [X:tnum] [x3:pf (_inrange2 Lo Hi X)] def3_i num num num ([x4:tm num] [x5:tm num] [x6:tm num] isInt x6 and leq x4 x6 and lt x6 x5) Lo Hi X x3.
inrange2<- : {Lo:tm num} {Hi:tm num} {X:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) X) -> pf (_inrange2 Lo Hi X) = [Lo:tm num] [Hi:tm num] [X:tm num] [x3:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) X)] def3_e num num num ([x4:tm num] [x5:tm num] [x6:tm num] isInt x6 and leq x4 x6 and lt x6 x5) Lo Hi X x3.
heap_area_i : {R:tm (num arrow num)} {X:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 (@ num num R reg_allocptr)) (plus (@ num num R reg_limitptr) (shadowed_2 4096))) X) -> pf (@ num form (@ registers (num arrow form) heap_area R) X) = [R:tm (num arrow num)] [X:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 (@ num num R reg_allocptr)) (plus (@ num num R reg_limitptr) (shadowed_2 4096))) X)] cut (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 (@ num num R reg_allocptr)) (plus (@ num num R reg_limitptr) (shadowed_2 4096))) X) (@ num form (@ registers (num arrow form) (lam2 registers num form ([x3:tm registers] [x4:tm num] _heap_area x3 x4)) R) X) p2 ([x3:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 (@ num num R reg_allocptr)) (plus (@ num num R reg_limitptr) (shadowed_2 4096))) X)] def2_i registers num ([x4:tm registers] [x5:tm num] _heap_area x4 x5) R X (inrange2<- (@ num num R reg_allocptr) (plus (@ num num R reg_limitptr) (shadowed_2 4096)) X p2)).
spill_area_heap_area_disjoint-> : {R:tregs} pf (_set_disjoint num ([x3:tm num] _spill_area R x3) ([x3:tm num] _heap_area R x3)) -> pf (@ (set num) form (@ (set num) (shadowed_0 (set num)) (set_disjoint num) (@ registers (num arrow form) spill_area R)) (@ registers (num arrow form) heap_area R)) = [R:tregs] [p1:pf (_set_disjoint num ([x3:tm num] _spill_area R x3) ([x3:tm num] _heap_area R x3))] set_disjoint_i num (@ registers (num arrow form) spill_area R) (@ registers (num arrow form) heap_area R) ([i1:tm num] [p6:pf (@ num form (@ registers (num arrow form) spill_area R) i1)] [p7:pf (@ num form (@ registers (num arrow form) heap_area R) i1)] cut (_spill_area R i1) false (def2_e num registers ([x3:tm registers] [x4:tm num] _spill_area x3 x4) R i1 p6) ([p8:pf (_spill_area R i1)] cut (_heap_area R i1) false (def2_e num registers ([x3:tm registers] [x4:tm num] _heap_area x3 x4) R i1 p7) ([p9:pf (_heap_area R i1)] set_disjoint_e num (lam num form ([x3:tm num] _spill_area R x3)) (lam num form ([x3:tm num] _heap_area R x3)) i1 false (set_disjoint-> num ([x3:tm num] _spill_area R x3) ([x3:tm num] _heap_area R x3) p1) (def1_i num ([x3:tm num] _spill_area R x3) i1 p8) (def1_i num ([x3:tm num] _heap_area R x3) i1 p9)))).
heap_area_prog_area_disjoint-> : {R:tregs} {Prog:tm program} {Start:tnum} pf (_set_disjoint num ([x3:tm num] _heap_area R x3) ([x3:tm num] _prog_area Prog Start x3)) -> pf (@ (set num) form (@ (set num) (shadowed_0 (set num)) (set_disjoint num) (@ registers (num arrow form) heap_area R)) (@ num (shadowed_0 num) (@ program (rel num num) prog_area Prog) Start)) = [R:tregs] [Prog:tm program] [Start:tnum] [p1:pf (_set_disjoint num ([x3:tm num] _heap_area R x3) ([x3:tm num] _prog_area Prog Start x3))] set_disjoint_i num (@ registers (num arrow form) heap_area R) (@ num (shadowed_0 num) (@ program (rel num num) prog_area Prog) Start) ([i1:tm num] [p6:pf (@ num form (@ registers (num arrow form) heap_area R) i1)] [p7:pf (@ num form (@ num (shadowed_0 num) (@ program (rel num num) prog_area Prog) Start) i1)] cut (_heap_area R i1) false (def2_e num registers ([x3:tm registers] [x4:tm num] _heap_area x3 x4) R i1 p6) ([p8:pf (_heap_area R i1)] exists2_e num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) Prog x3) x4 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four x3)) i1) false (def3_e num num program ([x3:tm program] [x4:tm num] [x5:tm num] exists2 num num ([l:tm num] [w:tm num] @ num form (@ num (num arrow form) x3 l) w and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 x4) (times four l)) x5)) Prog Start i1 p7) ([l:tm num] [w:tm num] [p9:pf (@ num form (@ num (num arrow form) Prog l) w and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four l)) i1)] and_l (@ num form (@ num (num arrow form) Prog l) w) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four l)) i1) false p9 ([p10:pf (@ num form (@ num (num arrow form) Prog l) w)] [p11:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four l)) i1)] cut (_plus_mod32 Start (times four l) i1) false (plus_mod32<- Start (times four l) i1 p11) ([p12:pf (_plus_mod32 Start (times four l) i1)] set_disjoint_e num (lam num form ([x3:tm num] _heap_area R x3)) (lam num form ([x3:tm num] _prog_area Prog Start x3)) i1 false (set_disjoint-> num ([x3:tm num] _heap_area R x3) ([x3:tm num] _prog_area Prog Start x3) p1) (def1_i num ([x3:tm num] _heap_area R x3) i1 p8) (def1_i num ([x3:tm num] _prog_area Prog Start x3) i1 (exists2_i num num ([x3:tm num] [x4:tm num] prog_app Prog x3 x4 and _plus_mod32 Start (times four x3) i1) l w (and_i (@ num form (@ num (num arrow form) Prog l) w) (_plus_mod32 Start (times four l) i1) p10 p12)))))))).
prog_area_spill_area_disjoint-> : {Prog:tm program} {Start:tnum} {R:tregs} pf (_set_disjoint num ([x3:tm num] _prog_area Prog Start x3) ([x3:tm num] _spill_area R x3)) -> pf (@ (set num) form (@ (set num) (shadowed_0 (set num)) (set_disjoint num) (@ num (shadowed_0 num) (@ program (rel num num) prog_area Prog) Start)) (@ registers (num arrow form) spill_area R)) = [Prog:tm program] [Start:tnum] [R:tregs] [p1:pf (_set_disjoint num ([x3:tm num] _prog_area Prog Start x3) ([x3:tm num] _spill_area R x3))] set_disjoint_i num (@ num (shadowed_0 num) (@ program (rel num num) prog_area Prog) Start) (@ registers (num arrow form) spill_area R) ([i1:tm num] [p6:pf (@ num form (@ num (shadowed_0 num) (@ program (rel num num) prog_area Prog) Start) i1)] [p7:pf (@ num form (@ registers (num arrow form) spill_area R) i1)] cut (_spill_area R i1) false (def2_e num registers ([x3:tm registers] [x4:tm num] _spill_area x3 x4) R i1 p7) ([p8:pf (_spill_area R i1)] exists2_e num num ([x3:tm num] [x4:tm num] @ num form (@ num (num arrow form) Prog x3) x4 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four x3)) i1) false (def3_e num num program ([x3:tm program] [x4:tm num] [x5:tm num] exists2 num num ([l:tm num] [w:tm num] @ num form (@ num (num arrow form) x3 l) w and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 x4) (times four l)) x5)) Prog Start i1 p6) ([l:tm num] [w:tm num] [p9:pf (@ num form (@ num (num arrow form) Prog l) w and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four l)) i1)] and_l (@ num form (@ num (num arrow form) Prog l) w) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four l)) i1) false p9 ([p10:pf (@ num form (@ num (num arrow form) Prog l) w)] [p11:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four l)) i1)] cut (_plus_mod32 Start (times four l) i1) false (plus_mod32<- Start (times four l) i1 p11) ([p12:pf (_plus_mod32 Start (times four l) i1)] set_disjoint_e num (lam num form ([x3:tm num] _prog_area Prog Start x3)) (lam num form ([x3:tm num] _spill_area R x3)) i1 false (set_disjoint-> num ([x3:tm num] _prog_area Prog Start x3) ([x3:tm num] _spill_area R x3) p1) (def1_i num ([x3:tm num] _prog_area Prog Start x3) i1 (exists2_i num num ([x3:tm num] [x4:tm num] prog_app Prog x3 x4 and _plus_mod32 Start (times four x3) i1) l w (and_i (@ num form (@ num (num arrow form) Prog l) w) (_plus_mod32 Start (times four l) i1) p10 p12))) (def1_i num ([x3:tm num] _spill_area R x3) i1 p8)))))).
gen_control_at_e : {G:tm genpc} {R:tm registers} {A:tform} pf (@ registers form (@ genpc (registers arrow form) gen_control_at G) R) -> (pf (eq num (@ num num R opc) (@ (tuple4 num num num num) num (get_opc num num num num) G)) -> pf (eq num (@ num num R pc) (@ (tuple4 num num num num) num (get_pc num num num num) G)) -> pf (eq num (@ num num R npc) (@ (tuple4 num num num num) num (get_npc num num num num) G)) -> pf (eq num (@ num num R icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) G)) -> pf A) -> pf A = [G:tm genpc] [R:tm registers] [A:tform] [p1:pf (@ registers form (@ genpc (registers arrow form) gen_control_at G) R)] [p2:pf (eq num (@ num num R opc) (@ (tuple4 num num num num) num (get_opc num num num num) G)) -> pf (eq num (@ num num R pc) (@ (tuple4 num num num num) num (get_pc num num num num) G)) -> pf (eq num (@ num num R npc) (@ (tuple4 num num num num) num (get_npc num num num num) G)) -> pf (eq num (@ num num R icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) G)) -> pf A] and4_l (eq num (@ num num R opc) (@ (tuple4 num num num num) num (get_opc num num num num) G)) (eq num (@ num num R pc) (@ (tuple4 num num num num) num (get_pc num num num num) G)) (eq num (@ num num R npc) (@ (tuple4 num num num num) num (get_npc num num num num) G)) (eq num (@ num num R icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) G)) A (def2_e registers genpc ([x3:tm genpc] [x4:tm registers] eq num (@ num num x4 opc) (@ (tuple4 num num num num) num (get_opc num num num num) x3) and eq num (@ num num x4 pc) (@ (tuple4 num num num num) num (get_pc num num num num) x3) and eq num (@ num num x4 npc) (@ (tuple4 num num num num) num (get_npc num num num num) x3) and eq num (@ num num x4 icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) x3)) G R p1) ([p3:pf (eq num (@ num num R opc) (@ (tuple4 num num num num) num (get_opc num num num num) G))] [p4:pf (eq num (@ num num R pc) (@ (tuple4 num num num num) num (get_pc num num num num) G))] [p5:pf (eq num (@ num num R npc) (@ (tuple4 num num num num) num (get_npc num num num num) G))] [p6:pf (eq num (@ num num R icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) G))] p2 p3 p4 p5 p6).
gen_control_at-> : {Gpc:tm genpc} {R:tregs} pf (_gen_control_at Gpc R) -> pf (@ registers form (@ genpc (registers arrow form) gen_control_at Gpc) R) = [Gpc:tm genpc] [R:tregs] [p1:pf (_gen_control_at Gpc R)] cut (_gen_control_at Gpc R) (@ registers form (@ genpc (registers arrow form) (lam2 genpc registers form ([x3:tm genpc] [x4:tm registers] eq num (@ num num x4 opc) (@ (tuple4 num num num num) num (get_opc num num num num) x3) and eq num (@ num num x4 pc) (@ (tuple4 num num num num) num (get_pc num num num num) x3) and eq num (@ num num x4 npc) (@ (tuple4 num num num num) num (get_npc num num num num) x3) and eq num (@ num num x4 icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) x3))) Gpc) R) p1 ([x3:pf (_gen_control_at Gpc R)] and4_l (eqn (get_reg R opc) (_get_opc Gpc)) (eqn (get_reg R pc) (_get_pc Gpc)) (eqn (get_reg R npc) (_get_npc Gpc)) (eqn (get_reg R icnt) (_get_icnt Gpc)) (@ registers form (@ genpc (registers arrow form) (lam2 genpc registers form ([x4:tm genpc] [x5:tm registers] eq num (@ num num x5 opc) (@ (tuple4 num num num num) num (get_opc num num num num) x4) and eq num (@ num num x5 pc) (@ (tuple4 num num num num) num (get_pc num num num num) x4) and eq num (@ num num x5 npc) (@ (tuple4 num num num num) num (get_npc num num num num) x4) and eq num (@ num num x5 icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) x4))) Gpc) R) p1 ([p2:pf (eqn (get_reg R opc) (_get_opc Gpc))] [p3:pf (eqn (get_reg R pc) (_get_pc Gpc))] [p4:pf (eqn (get_reg R npc) (_get_npc Gpc))] [p5:pf (eqn (get_reg R icnt) (_get_icnt Gpc))] def2_i genpc registers ([x4:tm genpc] [x5:tm registers] eq num (@ num num x5 opc) (@ (tuple4 num num num num) num (get_opc num num num num) x4) and eq num (@ num num x5 pc) (@ (tuple4 num num num num) num (get_pc num num num num) x4) and eq num (@ num num x5 npc) (@ (tuple4 num num num num) num (get_npc num num num num) x4) and eq num (@ num num x5 icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) x4)) Gpc R (and4_i (== num (get_reg R opc) (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get1of4 num num num num x4)) Gpc)) (== num (get_reg R pc) (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get2of4 num num num num x4)) Gpc)) (== num (get_reg R npc) (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get3of4 num num num num x4)) Gpc)) (== num (get_reg R icnt) (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get4of4 num num num num x4)) Gpc)) (trans num (get_reg R opc) (_get_opc Gpc) (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get1of4 num num num num x4)) Gpc) p2 (symm num (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get1of4 num num num num x4)) Gpc) (_get1of4 num num num num Gpc) (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get1of4 num num num num x4) Gpc))) (trans num (get_reg R pc) (_get_pc Gpc) (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get2of4 num num num num x4)) Gpc) p3 (symm num (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get2of4 num num num num x4)) Gpc) (_get2of4 num num num num Gpc) (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get2of4 num num num num x4) Gpc))) (trans num (get_reg R npc) (_get_npc Gpc) (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get3of4 num num num num x4)) Gpc) p4 (symm num (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get3of4 num num num num x4)) Gpc) (_get3of4 num num num num Gpc) (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get3of4 num num num num x4) Gpc))) (trans num (get_reg R icnt) (_get_icnt Gpc) (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get4of4 num num num num x4)) Gpc) p5 (symm num (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get4of4 num num num num x4)) Gpc) (_get4of4 num num num num Gpc) (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get4of4 num num num num x4) Gpc)))))).
gen_control_at<- : {Gpc:tm genpc} {R:tm registers} pf (@ registers form (@ genpc (registers arrow form) gen_control_at Gpc) R) -> pf (_gen_control_at Gpc R) = [Gpc:tm genpc] [R:tm registers] [p1:pf (@ registers form (@ genpc (registers arrow form) gen_control_at Gpc) R)] cut (@ registers form (@ genpc (registers arrow form) gen_control_at Gpc) R) (== num (@ num num R opc) (_get1of4 num num num num Gpc) and == num (@ num num R pc) (_get2of4 num num num num Gpc) and == num (@ num num R npc) (_get3of4 num num num num Gpc) and == num (@ num num R icnt) (_get4of4 num num num num Gpc)) p1 ([x3:pf (@ registers form (@ genpc (registers arrow form) gen_control_at Gpc) R)] and4_l (eq num (@ num num R opc) (@ (tuple4 num num num num) num (get_opc num num num num) Gpc)) (eq num (@ num num R pc) (@ (tuple4 num num num num) num (get_pc num num num num) Gpc)) (eq num (@ num num R npc) (@ (tuple4 num num num num) num (get_npc num num num num) Gpc)) (eq num (@ num num R icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) Gpc)) (== num (@ num num R opc) (_get1of4 num num num num Gpc) and == num (@ num num R pc) (_get2of4 num num num num Gpc) and == num (@ num num R npc) (_get3of4 num num num num Gpc) and == num (@ num num R icnt) (_get4of4 num num num num Gpc)) (def2_e registers genpc ([x4:tm genpc] [x5:tm registers] eq num (@ num num x5 opc) (@ (tuple4 num num num num) num (get_opc num num num num) x4) and eq num (@ num num x5 pc) (@ (tuple4 num num num num) num (get_pc num num num num) x4) and eq num (@ num num x5 npc) (@ (tuple4 num num num num) num (get_npc num num num num) x4) and eq num (@ num num x5 icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) x4)) Gpc R p1) ([p2:pf (eqn (@ num num R opc) (@ (tuple4 num num num num) num (get_opc num num num num) Gpc))] [p3:pf (eq num (@ num num R pc) (@ (tuple4 num num num num) num (get_pc num num num num) Gpc))] [p4:pf (eq num (@ num num R npc) (@ (tuple4 num num num num) num (get_npc num num num num) Gpc))] [p5:pf (eq num (@ num num R icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) Gpc))] and4_i (== num (@ num num R opc) (_get1of4 num num num num Gpc)) (== num (@ num num R pc) (_get2of4 num num num num Gpc)) (== num (@ num num R npc) (_get3of4 num num num num Gpc)) (== num (@ num num R icnt) (_get4of4 num num num num Gpc)) (trans num (@ num num R opc) (@ (tuple4 num num num num) num (get_opc num num num num) Gpc) (_get1of4 num num num num Gpc) p2 (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get1of4 num num num num x4) Gpc)) (trans num (@ num num R pc) (@ (tuple4 num num num num) num (get_pc num num num num) Gpc) (_get2of4 num num num num Gpc) p3 (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get2of4 num num num num x4) Gpc)) (trans num (@ num num R npc) (@ (tuple4 num num num num) num (get_npc num num num num) Gpc) (_get3of4 num num num num Gpc) p4 (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get3of4 num num num num x4) Gpc)) (trans num (@ num num R icnt) (@ (tuple4 num num num num) num (get_icnt num num num num) Gpc) (_get4of4 num num num num Gpc) p5 (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get4of4 num num num num x4) Gpc)))).
nextinstr_eq : {G:tm genpc} pf (eq num (_nextinstr G) (@ genpc num nextinstr G)) = [G:tm genpc] symm num (@ genpc num (lam genpc num ([x3:tm genpc] _get2of4 num num num num x3)) G) (_get2of4 num num num num G) (beta1 num genpc ([x3:tm genpc] _get2of4 num num num num x3) G).
normalpc_i : {L:tm num} {L+4:tm num} {G:tm (tuple4 num num num num)} pf (@ num form is_word L) -> pf (@ num form jump_aligned L) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) L+4) -> pf (eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L) -> pf (eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) L+4) -> pf (@ num form (@ genpc (num arrow form) normalpc G) L) = [L:tm num] [L+4:tm num] [G:tm (tuple4 num num num num)] [p1:pf (@ num form is_word L)] [p2:pf (@ num form jump_aligned L)] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) L+4)] [p4:pf (eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L)] [p5:pf (eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) L+4)] def2_i genpc num ([x3:tm genpc] [x4:tm num] exists num ([n+4:tm num] @ num form is_word x4 and @ num form jump_aligned x4 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 x4) word_size) n+4 and eq num (@ (tuple4 num num num num) num (get_pc num num num num) x3) x4 and eq num (@ (tuple4 num num num num) num (get_npc num num num num) x3) n+4)) G L (exists_i num ([x3:tm num] @ num form is_word L and @ num form jump_aligned L and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) x3 and eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L and eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) x3) L+4 (and5_i (@ num form is_word L) (@ num form jump_aligned L) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) L+4) (eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L) (eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) L+4) p1 p2 p3 p4 p5)).
normalpc_e : {G:tm genpc} {L:tm num} {A:tform} pf (@ num form (@ genpc (num arrow form) normalpc G) L) -> ({l+4:tm num} pf (@ num form is_word L) -> pf (@ num form jump_aligned L) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) l+4) -> pf (eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L) -> pf (eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) l+4) -> pf A) -> pf A = [G:tm genpc] [L:tm num] [A:tform] [p1:pf (@ num form (@ genpc (num arrow form) normalpc G) L)] [p2:{l+4:tm num} pf (@ num form is_word L) -> pf (@ num form jump_aligned L) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) l+4) -> pf (eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L) -> pf (eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) l+4) -> pf A] exists_e num ([x3:tm num] @ num form is_word L and @ num form jump_aligned L and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) x3 and eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L and eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) x3) A (def2_e num genpc ([x3:tm genpc] [x4:tm num] exists num ([n+4:tm num] @ num form is_word x4 and @ num form jump_aligned x4 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 x4) word_size) n+4 and eq num (@ (tuple4 num num num num) num (get_pc num num num num) x3) x4 and eq num (@ (tuple4 num num num num) num (get_npc num num num num) x3) n+4)) G L p1) ([l+4:tm num] [p3:pf (@ num form is_word L and @ num form jump_aligned L and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) l+4 and eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L and eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) l+4)] and5_l (@ num form is_word L) (@ num form jump_aligned L) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) l+4) (eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L) (eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) l+4) A p3 ([x3:pf (@ num form is_word L)] [x4:pf (@ num form jump_aligned L)] [x5:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) l+4)] [x6:pf (eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L)] [x7:pf (eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) l+4)] p2 l+4 x3 x4 x5 x6 x7)).
normalpc-> : {Gpc:tm genpc} {X:tnum} pf (_normalpc Gpc X) -> pf (@ num form (@ genpc (num arrow form) normalpc Gpc) X) = [Gpc:tm genpc] [X:tnum] [p1:pf (_normalpc Gpc X)] cut (_normalpc Gpc X) (@ num form (@ genpc (num arrow form) normalpc Gpc) X) p1 ([x3:pf (_normalpc Gpc X)] exists_e num ([x4:tm num] _is_word X and _modulo X word_size zero and _plus_mod32 X word_size x4 and eqn (_get_pc Gpc) X and eqn (_get_npc Gpc) x4) (@ num form (@ genpc (num arrow form) normalpc Gpc) X) p1 ([x+4:tm num] [p1_1:pf (_is_word X and _modulo X word_size zero and _plus_mod32 X word_size x+4 and eqn (_get_pc Gpc) X and eqn (_get_npc Gpc) x+4)] and5_l (_is_word X) (_modulo X word_size zero) (_plus_mod32 X word_size x+4) (eqn (_get_pc Gpc) X) (eqn (_get_npc Gpc) x+4) (@ num form (@ genpc (num arrow form) normalpc Gpc) X) p1_1 ([p4:pf (_is_word X)] [p6:pf (_modulo X word_size zero)] [p8:pf (_plus_mod32 X word_size x+4)] [p10:pf (eqn (_get_pc Gpc) X)] [p12:pf (eqn (_get_npc Gpc) x+4)] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 X) word_size) x+4) (@ num form (@ genpc (num arrow form) normalpc Gpc) X) (plus_mod32-> X word_size x+4 p8) ([p14:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 X) word_size) x+4)] normalpc_i X x+4 Gpc (def1_i num ([x4:tm num] _is_word x4) X p4) (jump_aligned_i X (isNat->isInt X (and_e1 (isNat X) (lt X pow2_32) p4)) (multiple_of_i X word_size (_modulo->modulo X word_size zero p6))) p14 (trans num (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get2of4 num num num num x4)) Gpc) (_get2of4 num num num num Gpc) X (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get2of4 num num num num x4) Gpc) p10) (trans num (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get3of4 num num num num x4)) Gpc) (_get3of4 num num num num Gpc) x+4 (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get3of4 num num num num x4) Gpc) p12))))).
normalpc<- : {G:tm genpc} {L:tm num} pf (@ num form (@ genpc (num arrow form) normalpc G) L) -> pf (_normalpc G L) = [G:tm genpc] [L:tm num] [p1:pf (@ num form (@ genpc (num arrow form) normalpc G) L)] cut (@ num form (@ genpc (num arrow form) normalpc G) L) (exists num ([x3:tm num] _is_word L and _modulo L four zero and _plus_mod32 L word_size x3 and == num (_get2of4 num num num num G) L and == num (_get3of4 num num num num G) x3)) p1 ([x3:pf (@ num form (@ genpc (num arrow form) normalpc G) L)] normalpc_e G L (exists num ([x4:tm num] _is_word L and _modulo L four zero and _plus_mod32 L word_size x4 and == num (_get2of4 num num num num G) L and == num (_get3of4 num num num num G) x4)) p1 ([l+4:tm num] [p5:pf (@ num form is_word L)] [p2_0:pf (@ num form jump_aligned L)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 L) word_size) l+4)] [p3:pf (eq num (@ (tuple4 num num num num) num (get_pc num num num num) G) L)] [p4:pf (eq num (@ (tuple4 num num num num) num (get_npc num num num num) G) l+4)] jump_aligned_e L (exists num ([x4:tm num] _is_word L and _modulo L four zero and _plus_mod32 L word_size x4 and == num (_get2of4 num num num num G) L and == num (_get3of4 num num num num G) x4)) p2_0 ([p6:pf (isInt L)] [p8:pf (@ num form (@ num (shadowed_0 num) multiple_of L) four)] exists_i num ([x4:tm num] _is_word L and _modulo L four zero and _plus_mod32 L word_size x4 and == num (_get2of4 num num num num G) L and == num (_get3of4 num num num num G) x4) l+4 (and5_i (_is_word L) (_modulo L four zero) (_plus_mod32 L word_size l+4) (== num (_get2of4 num num num num G) L) (== num (_get3of4 num num num num G) l+4) (def1_e num ([x4:tm num] _is_word x4) L p5) (modulo->_modulo L four zero (multiple_of_e L four p8)) (plus_mod32<- L word_size l+4 p2) (trans num (_get2of4 num num num num G) (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get2of4 num num num num x4)) G) L (symm num (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get2of4 num num num num x4)) G) (_get2of4 num num num num G) (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get2of4 num num num num x4) G)) p3) (trans num (_get3of4 num num num num G) (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get3of4 num num num num x4)) G) l+4 (symm num (@ (tuple4 num num num num) num (lam (tuple4 num num num num) num ([x4:tm (tuple4 num num num num)] _get3of4 num num num num x4)) G) (_get3of4 num num num num G) (beta1 num (tuple4 num num num num) ([x4:tm (tuple4 num num num num)] _get3of4 num num num num x4) G)) p4))))).
control_at_i : {G:tm genpc} {R:tm registers} {L:tm num} pf (@ registers form (@ genpc (registers arrow form) gen_control_at G) R) -> pf (@ num form (@ genpc (num arrow form) normalpc G) L) -> pf (not_follow_cbr R) -> pf (@ registers form (@ num (registers arrow form) control_at L) R) = [G:tm genpc] [R:tm registers] [L:tm num] [p1:pf (@ registers form (@ genpc (registers arrow form) gen_control_at G) R)] [p2:pf (@ num form (@ genpc (num arrow form) normalpc G) L)] [p3:pf (not_follow_cbr R)] def2_i num registers ([x3:tm num] [x4:tm registers] exists genpc ([g:tm genpc] @ registers form (@ genpc (registers arrow form) gen_control_at g) x4 and @ num form (@ genpc (num arrow form) normalpc g) x3 and not_follow_cbr x4)) L R (exists_i genpc ([x3:tm genpc] @ registers form (@ genpc (registers arrow form) gen_control_at x3) R and @ num form (@ genpc (num arrow form) normalpc x3) L and not_follow_cbr R) G (and3_i (@ registers form (@ genpc (registers arrow form) gen_control_at G) R) (@ num form (@ genpc (num arrow form) normalpc G) L) (not_follow_cbr R) p1 p2 p3)).
control_at_e : {L:tm num} {R:tm registers} {A:tform} pf (@ registers form (@ num (registers arrow form) control_at L) R) -> ({g:tm genpc} pf (@ registers form (@ genpc (registers arrow form) gen_control_at g) R) -> pf (@ num form (@ genpc (num arrow form) normalpc g) L) -> pf (not_follow_cbr R) -> pf A) -> pf A = [L:tm num] [R:tm registers] [A:tform] [p1:pf (@ registers form (@ num (registers arrow form) control_at L) R)] [p2:{g:tm genpc} pf (@ registers form (@ genpc (registers arrow form) gen_control_at g) R) -> pf (@ num form (@ genpc (num arrow form) normalpc g) L) -> pf (not_follow_cbr R) -> pf A] exists_e genpc ([x3:tm genpc] @ registers form (@ genpc (registers arrow form) gen_control_at x3) R and @ num form (@ genpc (num arrow form) normalpc x3) L and not_follow_cbr R) A (def2_e registers num ([x3:tm num] [x4:tm registers] exists genpc ([g:tm genpc] @ registers form (@ genpc (registers arrow form) gen_control_at g) x4 and @ num form (@ genpc (num arrow form) normalpc g) x3 and not_follow_cbr x4)) L R p1) ([g:tm genpc] [p3:pf (@ registers form (@ genpc (registers arrow form) gen_control_at g) R and @ num form (@ genpc (num arrow form) normalpc g) L and not_follow_cbr R)] and3_l (@ registers form (@ genpc (registers arrow form) gen_control_at g) R) (@ num form (@ genpc (num arrow form) normalpc g) L) (not_follow_cbr R) A p3 ([x3:pf (@ registers form (@ genpc (registers arrow form) gen_control_at g) R)] [x4:pf (@ num form (@ genpc (num arrow form) normalpc g) L)] [x5:pf (not_follow_cbr R)] p2 g x3 x4 x5)).
control_at-> : {L:tnum} {R:tregs} pf (_control_at L R) -> pf (@ registers form (@ num (registers arrow form) control_at L) R) = [L:tnum] [R:tregs] [p1:pf (_control_at L R)] cut (_control_at L R) (@ registers form (@ num (registers arrow form) control_at L) R) p1 ([x3:pf (_control_at L R)] exists_e genpc ([x4:tm genpc] _gen_control_at x4 R and _normalpc x4 L and gt (get_reg R icnt) (get_reg R last_cbr)) (@ registers form (@ num (registers arrow form) control_at L) R) p1 ([gpc:tm genpc] [p2:pf (_gen_control_at gpc R and _normalpc gpc L and gt (get_reg R icnt) (get_reg R last_cbr))] and3_l (_gen_control_at gpc R) (_normalpc gpc L) (gt (get_reg R icnt) (get_reg R last_cbr)) (@ registers form (@ num (registers arrow form) control_at L) R) p2 ([p4:pf (_gen_control_at gpc R)] [p6:pf (_normalpc gpc L)] [p8:pf (gt (get_reg R icnt) (get_reg R last_cbr))] control_at_i gpc R L (gen_control_at-> gpc R p4) (normalpc-> gpc L p6) p8))).
control_at<- : {L:tm num} {R:tm registers} pf (@ registers form (@ num (registers arrow form) control_at L) R) -> pf (_control_at L R) = [L:tm num] [R:tm registers] [p1:pf (@ registers form (@ num (registers arrow form) control_at L) R)] cut (@ registers form (@ num (registers arrow form) control_at L) R) (exists genpc ([x3:tm genpc] _gen_control_at x3 R and _normalpc x3 L and gt (@ num num R icnt) (@ num num R last_cbr))) p1 ([x3:pf (@ registers form (@ num (registers arrow form) control_at L) R)] exists_e genpc ([x4:tm genpc] @ registers form (@ genpc (registers arrow form) gen_control_at x4) R and @ num form (@ genpc (num arrow form) normalpc x4) L and not_follow_cbr R) (exists genpc ([x4:tm genpc] _gen_control_at x4 R and _normalpc x4 L and gt (@ num num R icnt) (@ num num R last_cbr))) (def2_e registers num ([x4:tm num] [x5:tm registers] exists genpc ([g:tm genpc] @ registers form (@ genpc (registers arrow form) gen_control_at g) x5 and @ num form (@ genpc (num arrow form) normalpc g) x4 and not_follow_cbr x5)) L R p1) ([gpc:tm genpc] [p2:pf (@ registers form (@ genpc (registers arrow form) gen_control_at gpc) R and @ num form (@ genpc (num arrow form) normalpc gpc) L and not_follow_cbr R)] and3_l (@ registers form (@ genpc (registers arrow form) gen_control_at gpc) R) (@ num form (@ genpc (num arrow form) normalpc gpc) L) (not_follow_cbr R) (exists genpc ([x4:tm genpc] _gen_control_at x4 R and _normalpc x4 L and gt (@ num num R icnt) (@ num num R last_cbr))) p2 ([p4:pf (@ registers form (@ genpc (registers arrow form) gen_control_at gpc) R)] [p6:pf (@ num form (@ genpc (num arrow form) normalpc gpc) L)] [p8:pf (gt (@ num num R icnt) (@ num num R last_cbr))] exists_i genpc ([x4:tm genpc] _gen_control_at x4 R and _normalpc x4 L and gt (@ num num R icnt) (@ num num R last_cbr)) gpc (and3_i (_gen_control_at gpc R) (_normalpc gpc L) (gt (@ num num R icnt) (@ num num R last_cbr)) (gen_control_at<- gpc R p4) (normalpc<- gpc L p6) p8)))).
eq_reserved_regs<- : {R1:tm registers} {R2:tm registers} pf (@ registers form (@ registers (shadowed_0 registers) eq_reserved_regs R1) R2) -> pf (_eq_reserved_regs R1 R2) = [R1:tm registers] [R2:tm registers] [p1:pf (@ registers form (@ registers (shadowed_0 registers) eq_reserved_regs R1) R2)] cut (@ registers form (@ registers (shadowed_0 registers) eq_reserved_regs R1) R2) (forall num ([x3:tm num] _reserved_regs x3 imp _eq num (_@ num num R1 x3) (_@ num num R2 x3))) p1 ([x3:pf (@ registers form (@ registers (shadowed_0 registers) eq_reserved_regs R1) R2)] forall_imp_i num ([x4:tm num] _reserved_regs x4) ([x4:tm num] _eq num (_@ num num R1 x4) (_@ num num R2 x4)) ([x5:tm num] [p2:pf (_reserved_regs x5)] forall_imp_e num ([a:tm num] _@ num form reserved_regs a) ([a:tm num] _eq num (_@ num num R1 a) (_@ num num R2 a)) (def3_e registers registers (set num) ([x4:tm (set num)] [x6:tm registers] [x7:tm registers] _forall num ([x8:tm num] _@ num form x4 x8 imp _eq num (_@ num num x6 x8) (_@ num num x7 x8))) reserved_regs R1 R2 p1) x5 (def1_i num ([x4:tm num] _reserved_regs x4) x5 p2))).
kleene_star-> : {T:tp} {R:tm T -> tm T -> tform} {V:tm T} {W:tm T} pf (_kleene_star T ([x3:tm T] [x4:tm T] R x3 x4) V W) -> pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) (lam2 T T form ([x3:tm T] [x4:tm T] R x3 x4))) V) W) = [T:tp] [R:tm T -> tm T -> tform] [V:tm T] [W:tm T] [p1:pf (_kleene_star T ([x3:tm T] [x4:tm T] R x3 x4) V W)] cut (_kleene_star T ([x3:tm T] [x4:tm T] R x3 x4) V W) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (lam3 (T arrow T arrow form) T T form ([x3:tm (T arrow T arrow form)] [x4:tm T] [x5:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) S Z) Z) imp forall3 T T T ([X:tm T] [Y:tm T] [Z:tm T] @ T form (@ T (T arrow form) x3 X) Y imp @ T form (@ T (T arrow form) S Y) Z imp @ T form (@ T (T arrow form) S X) Z) imp @ T form (@ T (T arrow form) S x4) x5))) (lam2 T T form ([x3:tm T] [x4:tm T] R x3 x4))) V) W) p1 ([x3:pf (_kleene_star T ([x3:tm T] [x4:tm T] R x3 x4) V W)] def3_i (T arrow T arrow form) T T ([x4:tm (T arrow T arrow form)] [x5:tm T] [x6:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) S Z) Z) imp forall3 T T T ([X:tm T] [Y:tm T] [Z:tm T] @ T form (@ T (T arrow form) x4 X) Y imp @ T form (@ T (T arrow form) S Y) Z imp @ T form (@ T (T arrow form) S X) Z) imp @ T form (@ T (T arrow form) S x5) x6)) (lam2 T T form ([x4:tm T] [x5:tm T] R x4 x5)) V W p1).
kleene_star<- : {T:tp} {R:tm T -> tm T -> tm form} {V:tm T} {W:tm T} pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) (lam2 T T form ([x3:tm T] [x4:tm T] R x3 x4))) V) W) -> pf (_kleene_star T ([x3:tm T] [x4:tm T] R x3 x4) V W) = [T:tp] [R:tm T -> tm T -> tm form] [V:tm T] [W:tm T] [p1:pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) (lam2 T T form ([x3:tm T] [x4:tm T] R x3 x4))) V) W)] cut (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) (lam2 T T form ([x3:tm T] [x4:tm T] R x3 x4))) V) W) (forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) S Z) Z) imp forall3 T T T ([X:tm T] [Y:tm T] [Z:tm T] @ T form (@ T (T arrow form) (lam2 T T form ([x3:tm T] [x4:tm T] R x3 x4)) X) Y imp @ T form (@ T (T arrow form) S Y) Z imp @ T form (@ T (T arrow form) S X) Z) imp @ T form (@ T (T arrow form) S V) W)) p1 ([x3:pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) (lam2 T T form ([x3:tm T] [x4:tm T] R x3 x4))) V) W)] def3_e T T (T arrow T arrow form) ([x4:tm (T arrow T arrow form)] [x5:tm T] [x6:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) S Z) Z) imp forall3 T T T ([X:tm T] [Y:tm T] [Z:tm T] @ T form (@ T (T arrow form) x4 X) Y imp @ T form (@ T (T arrow form) S Y) Z imp @ T form (@ T (T arrow form) S X) Z) imp @ T form (@ T (T arrow form) S x5) x6)) (lam2 T T form ([x4:tm T] [x5:tm T] R x4 x5)) V W p1).
step*-> : {R:tm registers} {M:tm memory} {R':tm registers} {M':tm memory} pf (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) _step* R) M) R') M') -> pf (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* R) M) R') M') = [R:tm registers] [M:tm memory] [R':tm registers] [M':tm memory] [p1:pf (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) _step* R) M) R') M')] cut (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) _step* R) M) R') M') (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) (lam4 registers memory registers memory form ([x3:tm registers] [x4:tm memory] [x5:tm registers] [x6:tm memory] @ state form (@ state (state arrow form) (@ (state arrow state arrow form) (state arrow state arrow form) (kleene_star state) stepx) (@ memory (pair registers memory) (@ registers (memory arrow pair registers memory) (mkpair registers memory) x3) x4)) (@ memory (pair registers memory) (@ registers (memory arrow pair registers memory) (mkpair registers memory) x5) x6))) R) M) R') M') p1 ([x3:pf (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) _step* R) M) R') M')] def4_i registers memory registers memory ([x4:tm registers] [x5:tm memory] [x6:tm registers] [x7:tm memory] @ state form (@ state (state arrow form) (@ (state arrow state arrow form) (state arrow state arrow form) (kleene_star state) stepx) (@ memory (pair registers memory) (@ registers (memory arrow pair registers memory) (mkpair registers memory) x4) x5)) (@ memory (pair registers memory) (@ registers (memory arrow pair registers memory) (mkpair registers memory) x6) x7)) R M R' M' (kleene_star-> state ([x4:tm state] [x5:tm state] _stepx x4 x5) (_mkstate R M) (_mkstate R' M') (def4_e memory registers memory registers ([x4:tm registers] [x5:tm memory] [x6:tm registers] [x7:tm memory] _kleene_star state ([x8:tm state] [x9:tm state] _stepx x8 x9) (_mkstate x4 x5) (_mkstate x6 x7)) R M R' M' p1))).
step*<- : {R:tm registers} {M:tm memory} {R':tm registers} {M':tm memory} pf (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* R) M) R') M') -> pf (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) _step* R) M) R') M') = [R:tm registers] [M:tm memory] [R':tm registers] [M':tm memory] [p1:pf (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* R) M) R') M')] cut (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* R) M) R') M') (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) (lam4 registers memory registers memory form ([x3:tm registers] [x4:tm memory] [x5:tm registers] [x6:tm memory] _kleene_star state ([x7:tm state] [x8:tm state] _stepx x7 x8) (_mkstate x3 x4) (_mkstate x5 x6))) R) M) R') M') p1 ([x3:pf (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* R) M) R') M')] def4_i registers memory registers memory ([x4:tm registers] [x5:tm memory] [x6:tm registers] [x7:tm memory] _kleene_star state ([x8:tm state] [x9:tm state] _stepx x8 x9) (_mkstate x4 x5) (_mkstate x6 x7)) R M R' M' (kleene_star<- state ([x4:tm state] [x5:tm state] _stepx x4 x5) (@ memory (pair registers memory) (@ registers (memory arrow pair registers memory) (mkpair registers memory) R) M) (@ memory (pair registers memory) (@ registers (memory arrow pair registers memory) (mkpair registers memory) R') M') (def4_e memory registers memory registers ([x4:tm registers] [x5:tm memory] [x6:tm registers] [x7:tm memory] @ state form (@ state (state arrow form) (@ (state arrow state arrow form) (state arrow state arrow form) (kleene_star state) stepx) (@ memory (pair registers memory) (@ registers (memory arrow pair registers memory) (mkpair registers memory) x4) x5)) (@ memory (pair registers memory) (@ registers (memory arrow pair registers memory) (mkpair registers memory) x6) x7)) R M R' M' p1))).
safe-> : {R:tregs} {M:tmem} pf (_safe R M) -> pf (@ memory form (@ registers (memory arrow form) safe R) M) = [R:tregs] [M:tmem] [p1:pf (_safe R M)] cut (_safe R M) (@ memory form (@ registers (memory arrow form) (lam2 registers memory form ([x3:tm registers] [x4:tm memory] forall2 registers memory ([R':tm registers] [M':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* x3) x4) R') M' imp exists2 registers memory ([R'':tm registers] [M'':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step R') M') R'') M'')))) R) M) p1 ([x3:pf (_safe R M)] def2_i registers memory ([x4:tm registers] [x5:tm memory] forall2 registers memory ([R':tm registers] [M':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* x4) x5) R') M' imp exists2 registers memory ([R'':tm registers] [M'':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step R') M') R'') M''))) R M (forall2_imp_i registers memory ([x4:tm registers] [x5:tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* R) M) x4) x5) ([x4:tm registers] [x5:tm memory] _exists2 registers memory ([r'':tregs] [m'':tmem] app_instr step x4 x5 r'' m'')) ([r':tm registers] [m':tm memory] [p4:pf (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* R) M) r') m')] forall2_imp_e registers memory ([x4:tm registers] [y:tm memory] app_instr _step* R M x4 y) ([x5:tm registers] [y:tm memory] _exists2 registers memory ([r'':tregs] [m'':tmem] app_instr step x5 y r'' m'')) p1 r' m' (step*<- R M r' m' p4)))).
safe<- : {R:tm registers} {M:tm memory} pf (@ memory form (@ registers (memory arrow form) safe R) M) -> pf (_safe R M) = [R:tm registers] [M:tm memory] [p1:pf (@ memory form (@ registers (memory arrow form) safe R) M)] cut (@ memory form (@ registers (memory arrow form) safe R) M) (forall2 registers memory ([x3:tm registers] [x4:tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) _step* R) M) x3) x4 imp exists2 registers memory ([R'':tm registers] [M'':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step x3) x4) R'') M''))) p1 ([x3:pf (@ memory form (@ registers (memory arrow form) safe R) M)] forall2_imp_i registers memory ([x4:tm registers] [x5:tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) _step* R) M) x4) x5) ([x4:tm registers] [x5:tm memory] exists2 registers memory ([R'':tm registers] [M'':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step x4) x5) R'') M'')) ([r':tm registers] [m':tm memory] [p4:pf (@ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) _step* R) M) r') m')] forall2_imp_e registers memory ([x4:tm registers] [y:tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* R) M) x4) y) ([x5:tm registers] [y:tm memory] exists2 registers memory ([R'':tm registers] [M'':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step x5) y) R'') M'')) (def2_e memory registers ([x4:tm registers] [x5:tm memory] forall2 registers memory ([R':tm registers] [M':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step* x4) x5) R') M' imp exists2 registers memory ([R'':tm registers] [M'':tm memory] @ memory form (@ registers (memory arrow form) (@ memory (registers arrow memory arrow form) (@ registers (memory arrow registers arrow memory arrow form) step R') M') R'') M''))) R M p1) r' m' (step*-> R M r' m' p4))).
return_type-> : {X:tnum} {R:tregs} pf (_return_type X R) -> pf (@ registers form (@ num (registers arrow form) return_type X) R) = [X:tnum] [R:tregs] [p1:pf (_return_type X R)] cut (_return_type X R) (@ registers form (@ num (registers arrow form) (lam2 num registers form ([x3:tm num] [x4:tm registers] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo x3) four) zero and @ num form is_word x3 and forall2 registers memory ([r:tm registers] [m:tm memory] @ registers form (@ registers (shadowed_0 registers) eq_reserved_regs r) x4 imp @ registers form (@ num (registers arrow form) control_at x3) r imp @ memory form (@ registers (memory arrow form) safe r) m))) X) R) p1 ([x3:pf (_return_type X R)] and3_l (_modulo X four zero) (_is_word X) (_forall2 registers memory ([r:tregs] [m:tmem] _eq_reserved_regs r R imp _control_at X r imp _safe r m)) (@ registers form (@ num (registers arrow form) (lam2 num registers form ([x4:tm num] [x5:tm registers] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo x4) four) zero and @ num form is_word x4 and forall2 registers memory ([r:tm registers] [m:tm memory] @ registers form (@ registers (shadowed_0 registers) eq_reserved_regs r) x5 imp @ registers form (@ num (registers arrow form) control_at x4) r imp @ memory form (@ registers (memory arrow form) safe r) m))) X) R) p1 ([p2:pf (_modulo X four zero)] [p3:pf (_is_word X)] [p4:pf (forall2 registers memory ([r:tm registers] [m:tm memory] _eq_reserved_regs r R imp _control_at X r imp _safe r m))] def2_i num registers ([x4:tm num] [x5:tm registers] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo x4) four) zero and @ num form is_word x4 and forall2 registers memory ([r:tm registers] [m:tm memory] @ registers form (@ registers (shadowed_0 registers) eq_reserved_regs r) x5 imp @ registers form (@ num (registers arrow form) control_at x4) r imp @ memory form (@ registers (memory arrow form) safe r) m)) X R (and3_i (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) modulo X) four) zero) (@ num form (lam num form ([x4:tm num] _is_word x4)) X) (forall2 registers memory ([x4:tm registers] [x5:tm memory] @ registers form (@ registers (shadowed_0 registers) eq_reserved_regs x4) R imp @ registers form (@ num (registers arrow form) control_at X) x4 imp @ memory form (@ registers (memory arrow form) safe x4) x5)) (_modulo->modulo X four zero p2) (def1_i num ([x4:tm num] _is_word x4) X p3) (forall2_imp2_i registers memory ([x4:tm registers] [x5:tm memory] @ registers form (@ registers (shadowed_0 registers) eq_reserved_regs x4) R) ([x4:tm registers] [x5:tm memory] @ registers form (@ num (registers arrow form) control_at X) x4) ([x4:tm registers] [x5:tm memory] @ memory form (@ registers (memory arrow form) safe x4) x5) ([r:tm registers] [m:tm memory] [p12:pf (@ registers form (@ registers (shadowed_0 registers) eq_reserved_regs r) R)] [p14:pf (@ registers form (@ num (registers arrow form) control_at X) r)] cut (_safe r m) (@ memory form (@ registers (memory arrow form) safe r) m) (forall2_imp2_e registers memory ([x4:tm registers] [y:tm memory] _eq_reserved_regs x4 R) ([x5:tm registers] [y:tm memory] _control_at X x5) ([x6:tm registers] [y:tm memory] _safe x6 y) p4 r m (eq_reserved_regs<- r R p12) (control_at<- X r p14)) ([p16:pf (_safe r m)] safe-> r m p16)))))).
initial_machine_state-> : {R:tregs} {M:tmem} pf (eqn (get_reg R zero) zero and eqn (get_reg R icnt) zero and mult4? (get_reg R reg_allocptr) and mult4? (get_reg R reg_limitptr) and mult4? (get_reg R reg_sp) and _is_word (plus (get_reg R reg_sp) ml_framesize)) -> pf (@ memory form (@ registers (memory arrow form) initial_machine_state R) M) = [R:tregs] [M:tmem] [p1:pf (eqn (get_reg R zero) zero and eqn (get_reg R icnt) zero and mult4? (get_reg R reg_allocptr) and mult4? (get_reg R reg_limitptr) and mult4? (get_reg R reg_sp) and _is_word (plus (get_reg R reg_sp) ml_framesize))] cut (eqn (get_reg R zero) zero and eqn (get_reg R icnt) zero and mult4? (get_reg R reg_allocptr) and mult4? (get_reg R reg_limitptr) and mult4? (get_reg R reg_sp) and _is_word (plus (get_reg R reg_sp) ml_framesize)) (@ memory form (@ registers (memory arrow form) (lam2 registers memory form ([x3:tm registers] [x4:tm memory] eqn (get_reg x3 zero) zero and eqn (get_reg x3 icnt) zero and mult4? (get_reg x3 reg_allocptr) and mult4? (get_reg x3 reg_limitptr) and mult4? (get_reg x3 reg_sp) and _is_word (plus (get_reg x3 reg_sp) ml_framesize))) R) M) p1 ([x3:pf (eqn (get_reg R zero) zero and eqn (get_reg R icnt) zero and mult4? (get_reg R reg_allocptr) and mult4? (get_reg R reg_limitptr) and mult4? (get_reg R reg_sp) and _is_word (plus (get_reg R reg_sp) ml_framesize))] def2_i registers memory ([x4:tm registers] [x5:tm memory] eqn (get_reg x4 zero) zero and eqn (get_reg x4 icnt) zero and mult4? (get_reg x4 reg_allocptr) and mult4? (get_reg x4 reg_limitptr) and mult4? (get_reg x4 reg_sp) and _is_word (plus (get_reg x4 reg_sp) ml_framesize)) R M p1).
initial_machine_state_e : {R:tm registers} {M:tm memory} {A:tform} pf (@ memory form (@ registers (memory arrow form) initial_machine_state R) M) -> (pf (eq num (@ num num R zero) zero) -> pf (eq num (@ num num R icnt) zero) -> pf (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_allocptr)) four) -> pf (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_limitptr)) four) -> pf (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_sp)) four) -> pf (@ num form is_word (plus (@ num num R reg_sp) ml_framesize)) -> pf A) -> pf A = [R:tm registers] [M:tm memory] [A:tform] [p2:pf (@ memory form (@ registers (memory arrow form) initial_machine_state R) M)] [p4:pf (eq num (@ num num R zero) zero) -> pf (eq num (@ num num R icnt) zero) -> pf (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_allocptr)) four) -> pf (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_limitptr)) four) -> pf (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_sp)) four) -> pf (@ num form is_word (plus (@ num num R reg_sp) ml_framesize)) -> pf A] cut2 (@ memory form (@ registers (memory arrow form) initial_machine_state R) M) (eq num (@ num num R zero) zero imp eq num (@ num num R icnt) zero imp @ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_allocptr)) four imp @ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_limitptr)) four imp @ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_sp)) four imp @ num form is_word (plus (@ num num R reg_sp) ml_framesize) imp A) A p2 (imp6_i (eq num (@ num num R zero) zero) (eq num (@ num num R icnt) zero) (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_allocptr)) four) (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_limitptr)) four) (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_sp)) four) (@ num form is_word (plus (@ num num R reg_sp) ml_framesize)) A ([x3:pf (eq num (@ num num R zero) zero)] [x4:pf (eq num (@ num num R icnt) zero)] [x5:pf (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_allocptr)) four)] [x6:pf (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_limitptr)) four)] [x7:pf (@ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_sp)) four)] [x8:pf (@ num form is_word (plus (@ num num R reg_sp) ml_framesize))] p4 x3 x4 x5 x6 x7 x8)) ([x3:pf (@ memory form (@ registers (memory arrow form) initial_machine_state R) M)] [x4:pf (eq num (@ num num R zero) zero imp eq num (@ num num R icnt) zero imp @ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_allocptr)) four imp @ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_limitptr)) four imp @ num form (@ num (shadowed_0 num) multiple_of (@ num num R reg_sp)) four imp @ num form is_word (plus (@ num num R reg_sp) ml_framesize) imp A)] and6_l (eqn (get_reg R zero) zero) (eqn (get_reg R icnt) zero) (mult4? (get_reg R reg_allocptr)) (mult4? (get_reg R reg_limitptr)) (mult4? (get_reg R reg_sp)) (_is_word (plus (get_reg R reg_sp) ml_framesize)) A (def2_e memory registers ([x5:tm registers] [x6:tm memory] eqn (get_reg x5 zero) zero and eqn (get_reg x5 icnt) zero and mult4? (get_reg x5 reg_allocptr) and mult4? (get_reg x5 reg_limitptr) and mult4? (get_reg x5 reg_sp) and _is_word (plus (get_reg x5 reg_sp) ml_framesize)) R M p2) ([p10:pf (eqn (get_reg R zero) zero)] [p12:pf (eqn (get_reg R icnt) zero)] [p14:pf (mult4? (get_reg R reg_allocptr))] [p16:pf (mult4? (get_reg R reg_limitptr))] [p18:pf (mult4? (get_reg R reg_sp))] [p20:pf (_is_word (plus (get_reg R reg_sp) ml_framesize))] p4 p10 p12 (multiple_of_i (get_reg R reg_allocptr) four (_modulo->modulo (get_reg R reg_allocptr) four zero p14)) (multiple_of_i (get_reg R reg_limitptr) four (_modulo->modulo (get_reg R reg_limitptr) four zero p16)) (multiple_of_i (get_reg R reg_sp) four (_modulo->modulo (get_reg R reg_sp) four zero p18)) (def1_i num ([x5:tm num] _is_word x5) (plus (@ num num R reg_sp) ml_framesize) p20))).
prog_loaded_at_i : {Prog:tm (num arrow num arrow form)} {Start:tm num} {M:tm (num arrow num)} {R:tm registers} ({l:tm num} {w:tm num} {start+4l:tm num} pf (@ num form (@ num (num arrow form) Prog l) w) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four l)) start+4l) -> pf (eq num (@ num num M start+4l) w and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) start+4l and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable R) M) start+4l)) -> pf (@ memory form (@ registers (memory arrow form) (@ num (registers arrow memory arrow form) (@ program (num arrow registers arrow memory arrow form) prog_loaded_at Prog) Start) R) M) = [Prog:tm (num arrow num arrow form)] [Start:tm num] [M:tm (num arrow num)] [R:tm registers] [f:{l:tm num} {w:tm num} {start+4l:tm num} pf (@ num form (@ num (num arrow form) Prog l) w) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four l)) start+4l) -> pf (eq num (@ num num M start+4l) w and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) start+4l and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable R) M) start+4l)] def4_i program num registers memory ([x3:tm program] [x4:tm num] [x5:tm registers] [x6:tm memory] forall3 num num num ([l:tm num] [w:tm num] [start+4l:tm num] @ num form (@ num (num arrow form) x3 l) w imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 x4) (times four l)) start+4l imp eq num (@ num num x6 start+4l) w and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable x5) x6) start+4l and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable x5) x6) start+4l)) Prog Start R M (forall3_imp2_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) Prog x3) x4) ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four x3)) x5) ([x3:tm num] [x4:tm num] [x5:tm num] eq num (@ num num M x5) x4 and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) x5 and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable R) M) x5) ([x3:tm num] [w:tm num] [p1:tm num] [x4:pf (@ num form (@ num (num arrow form) Prog x3) w)] [x5:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four x3)) p1)] f x3 w p1 x4 x5)).
prog_loaded_at_e : {Prog:tm program} {Start:tm num} {R:tm registers} {M:tm memory} {L:tm num} {W:tm num} {Start+4L:tm num} {A:tform} pf (@ memory form (@ registers (memory arrow form) (@ num (registers arrow memory arrow form) (@ program (num arrow registers arrow memory arrow form) prog_loaded_at Prog) Start) R) M) -> pf (@ num form (@ num (num arrow form) Prog L) W) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four L)) Start+4L) -> (pf (eq num (@ num num M Start+4L) W) -> pf (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) Start+4L) -> pf (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable R) M) Start+4L) -> pf A) -> pf A = [Prog:tm program] [Start:tm num] [R:tm registers] [M:tm memory] [L:tm num] [W:tm num] [Start+4L:tm num] [A:tform] [p1:pf (@ memory form (@ registers (memory arrow form) (@ num (registers arrow memory arrow form) (@ program (num arrow registers arrow memory arrow form) prog_loaded_at Prog) Start) R) M)] [p2:pf (@ num form (@ num (num arrow form) Prog L) W)] [p2_2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four L)) Start+4L)] [f:pf (eq num (@ num num M Start+4L) W) -> pf (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) Start+4L) -> pf (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable R) M) Start+4L) -> pf A] and3_l (eq num (@ num num M Start+4L) W) (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) Start+4L) (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable R) M) Start+4L) A (forall3_imp2_e num num num ([x3:tm num] [y:tm num] [z1:tm num] @ num form (@ num (num arrow form) Prog x3) y) ([x4:tm num] [y:tm num] [z2:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four x4)) z2) ([x5:tm num] [y:tm num] [z3:tm num] eq num (@ num num M z3) y and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) z3 and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable R) M) z3) (def4_e memory registers num program ([x3:tm program] [x4:tm num] [x5:tm registers] [x6:tm memory] forall3 num num num ([l:tm num] [w:tm num] [start+4l:tm num] @ num form (@ num (num arrow form) x3 l) w imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 x4) (times four l)) start+4l imp eq num (@ num num x6 start+4l) w and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable x5) x6) start+4l and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable x5) x6) start+4l)) Prog Start R M p1) L W Start+4L p2 p2_2) ([x3:pf (eq num (@ num num M Start+4L) W)] [x4:pf (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) readable R) M) Start+4L)] [x5:pf (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) executable R) M) Start+4L)] f x3 x4 x5).
prog_loaded_at-> : {Prog:tm program} {Start:tnum} {R:tregs} {M:tmem} pf (_prog_loaded_at Prog Start R M) -> pf (@ memory form (@ registers (memory arrow form) (@ num (registers arrow memory arrow form) (@ program (num arrow registers arrow memory arrow form) prog_loaded_at Prog) Start) R) M) = [Prog:tm program] [Start:tnum] [R:tregs] [M:tmem] [p2:pf (_prog_loaded_at Prog Start R M)] prog_loaded_at_i Prog Start M R ([l:tm num] [w:tm num] [start+4l:tm num] [p4:pf (@ num form (@ num (num arrow form) Prog l) w)] [p5:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) plus_mod32 Start) (times four l)) start+4l)] and3_l (eqn (get_mem M start+4l) w) (_readable R M start+4l) (_executable R M start+4l) (eq num (get_mem M start+4l) w and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam3 registers memory num form ([x3:tm registers] [x4:tm memory] [x5:tm num] _readable x3 x4 x5)) R) M) start+4l and @ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam3 registers memory num form ([x3:tm registers] [x4:tm memory] [x5:tm num] _executable x3 x4 x5)) R) M) start+4l) (forall3_imp2_e num num num ([x3:tm num] [y:tm num] [z1:tm num] prog_app Prog x3 y) ([x4:tm num] [y:tm num] [z2:tm num] _plus_mod32 Start (times four x4) z2) ([x5:tm num] [y:tm num] [z3:tm num] eqn (get_mem M z3) y and _readable R M z3 and _executable R M z3) p2 l w start+4l p4 (plus_mod32<- Start (times four l) start+4l p5)) ([p6:pf (eq num (get_mem M start+4l) w)] [p8:pf (_readable R M start+4l)] [p10:pf (_executable R M start+4l)] and3_i (eq num (get_mem M start+4l) w) (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam3 registers memory num form ([x3:tm registers] [x4:tm memory] [x5:tm num] _readable x3 x4 x5)) R) M) start+4l) (@ num form (@ memory (num arrow form) (@ registers (memory arrow num arrow form) (lam3 registers memory num form ([x3:tm registers] [x4:tm memory] [x5:tm num] _executable x3 x4 x5)) R) M) start+4l) p6 (def3_i registers memory num ([x3:tm registers] [x4:tm memory] [x5:tm num] _readable x3 x4 x5) R M start+4l p8) (def3_i registers memory num ([x3:tm registers] [x4:tm memory] [x5:tm num] _executable x3 x4 x5) R M start+4l p10))).
