%{ Another supported domain are 32-bit integers. This domain is used
mainly in Proof Carrying Code applications, and because of this, it
has fairly different structure and features than the extension for
(unrestricted) integers (see section 6.4 Integer Constraints). First
of all, the algorithms used were kept short and simple, so that they
can be easily read and verified to be correct. Secondly, the set of
arithmetic operators provided has been kept to a minimum. Also, each
of these is implemented as a type family instead of a function symbol,
so that unification of arithmetic expressions follows the same rule as
that of regular terms. Finally, for each arithmetic operator, we also
provide a type family which, in addition to carry out the computation,
also provides a proof object for it.

Declaring

%uses word32.
causes the following signature to be loaded into the system:
}%

word32 : type.
+ : word32 -> word32 -> word32 -> type.
* : word32 -> word32 -> word32 -> type.
/ : word32 -> word32 -> word32 -> type.
prove+ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} type.
proof+ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} prove+ X Y Z P.
prove* : {X:word32} {Y:word32} {Z:word32} {P:* X Y Z} type.
proof* : {X:word32} {Y:word32} {Z:word32} {P:* X Y Z} prove* X Y Z P.
prove/ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} type.
proof/ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} prove/ X Y Z P.

%% Not mentioned in the documentation:

0 : word32.
1 : word32.
2 : word32.
3 : word32.
4 : word32.
5 : word32.
6 : word32.
7 : word32.
8 : word32.
9 : word32.
10 : word32.
11 : word32.
12 : word32.
13 : word32.
14 : word32.
15 : word32.
16 : word32.
17 : word32.
18 : word32.
19 : word32.
20 : word32.
21 : word32.
22 : word32.
23 : word32.
24 : word32.
25 : word32.
26 : word32.
27 : word32.
28 : word32.
29 : word32.
30 : word32.
31 : word32.
32 : word32.
33 : word32.
34 : word32.
35 : word32.
36 : word32.
37 : word32.
38 : word32.
39 : word32.
40 : word32.
41 : word32.
42 : word32.
43 : word32.
44 : word32.
45 : word32.
46 : word32.
47 : word32.
48 : word32.
49 : word32.
50 : word32.
51 : word32.
52 : word32.
53 : word32.
54 : word32.
55 : word32.
56 : word32.
57 : word32.
58 : word32.
59 : word32.
60 : word32.
61 : word32.
62 : word32.
63 : word32.
64 : word32.
65 : word32.
66 : word32.
67 : word32.
68 : word32.
69 : word32.
70 : word32.
71 : word32.
72 : word32.
73 : word32.
74 : word32.
75 : word32.
76 : word32.
77 : word32.
78 : word32.
79 : word32.
80 : word32.
81 : word32.
82 : word32.
83 : word32.
84 : word32.
85 : word32.
86 : word32.
87 : word32.
88 : word32.
89 : word32.
90 : word32.
91 : word32.
92 : word32.
93 : word32.
94 : word32.
95 : word32.
96 : word32.
97 : word32.
98 : word32.
99 : word32.
100 : word32.
101 : word32.
102 : word32.
103 : word32.
104 : word32.
105 : word32.
106 : word32.
107 : word32.
108 : word32.
109 : word32.
110 : word32.
111 : word32.
112 : word32.
113 : word32.
114 : word32.
115 : word32.
116 : word32.
117 : word32.
118 : word32.
119 : word32.
120 : word32.
121 : word32.
122 : word32.
123 : word32.
124 : word32.
125 : word32.
126 : word32.
127 : word32.
128 : word32.
129 : word32.
130 : word32.
131 : word32.
132 : word32.
133 : word32.
134 : word32.
135 : word32.
136 : word32.
137 : word32.
138 : word32.
139 : word32.
140 : word32.
141 : word32.
142 : word32.
143 : word32.
144 : word32.
145 : word32.
146 : word32.
147 : word32.
148 : word32.
149 : word32.
150 : word32.
151 : word32.
152 : word32.
153 : word32.
154 : word32.
155 : word32.
156 : word32.
157 : word32.
158 : word32.
159 : word32.
160 : word32.
161 : word32.
162 : word32.
163 : word32.
164 : word32.
165 : word32.
166 : word32.
167 : word32.
168 : word32.
169 : word32.
170 : word32.
171 : word32.
172 : word32.
173 : word32.
174 : word32.
175 : word32.
176 : word32.
177 : word32.
178 : word32.
179 : word32.
180 : word32.
181 : word32.
182 : word32.
183 : word32.
184 : word32.
185 : word32.
186 : word32.
187 : word32.
188 : word32.
189 : word32.
190 : word32.
191 : word32.
192 : word32.
193 : word32.
194 : word32.
195 : word32.
196 : word32.
197 : word32.
198 : word32.
199 : word32.
200 : word32.
201 : word32.
202 : word32.
203 : word32.
204 : word32.
205 : word32.
206 : word32.
207 : word32.
208 : word32.
209 : word32.
210 : word32.
211 : word32.
212 : word32.
213 : word32.
214 : word32.
215 : word32.
216 : word32.
217 : word32.
218 : word32.
219 : word32.
220 : word32.
221 : word32.
222 : word32.
223 : word32.
224 : word32.
225 : word32.
226 : word32.
227 : word32.
228 : word32.
229 : word32.
230 : word32.
231 : word32.
232 : word32.
233 : word32.
234 : word32.
235 : word32.
236 : word32.
237 : word32.
238 : word32.
239 : word32.
240 : word32.
241 : word32.
242 : word32.
243 : word32.
244 : word32.
245 : word32.
246 : word32.
247 : word32.
248 : word32.
249 : word32.
250 : word32.
251 : word32.
252 : word32.
253 : word32.
254 : word32.
255 : word32.
256 : word32.
257 : word32.
258 : word32.
259 : word32.
260 : word32.
261 : word32.
262 : word32.
263 : word32.
264 : word32.
265 : word32.
266 : word32.
267 : word32.
268 : word32.
269 : word32.
270 : word32.
271 : word32.
272 : word32.
273 : word32.
274 : word32.
275 : word32.
276 : word32.
277 : word32.
278 : word32.
279 : word32.
280 : word32.
281 : word32.
282 : word32.
283 : word32.
284 : word32.
285 : word32.
286 : word32.
287 : word32.
288 : word32.
289 : word32.
290 : word32.
291 : word32.
292 : word32.
293 : word32.
294 : word32.
295 : word32.
296 : word32.
297 : word32.
298 : word32.
299 : word32.

1000 : word32.

512   : word32.
1024  : word32.
2048  : word32.
4096  : word32.
8192  : word32.
16384 : word32.
32768 : word32.
65536 : word32.
2147483648 : word32.
4294967295 : word32.
%{ 
Goals involving + and * are immediately solved if at least two of
the arguments are ground objects (i.e. numbers), and delayed as
constraints otherwise. In particular

?- + 3 X 9.

is solved immediately and can be used to compute 9-3. Goals involving
/ are delayed unless both the first and the second argument are
known. The type families prove+, prove*, prove/ can be used to obtain
proof object for the arithmetic operation, and use them in the
remaining part of the computation:

?- P : + 3 X 9.
Solving...
X = 6.
P = 3+6.
More? n
?- prove+ 3 X 9 P.
Solving...
P = 3+6;
X = 6.
More? n

It is important to stress that the domain modeled here is not the ring
of integers modulo 32 but rather the restriction of the integer ring
to the interval 0...4294967295, so that for example the query:

?- + 1 X 0.
will not admit a solution.
}%% Copyright (c) 2004 Princeton University
%	$Id: logic.elf,v 1.17 2005/02/10 15:21:23 richards Exp $

tp     : type.
tm     : tp -> type.
form   : tp.
tform  : type = tm form. 
arrow  : tp -> tp -> tp.  %infix right 14 arrow.
pf     : tform -> type.

_lam    : {T1 : tp} {T2 : tp} (tm T1 -> tm T2) -> tm (T1 arrow T2).
_@      : {T1 : tp} {T2 : tp} tm (T1 arrow T2) -> tm T1 -> tm T2.
_forall : {T : tp} (tm T -> tform) -> tform.
imp     : tform -> tform -> tform.   %infix right 10 imp.

_beta_e  : {T1 : tp} {T2 : tp} {F : tm T1 -> tm T2} {X : tm T1}
  {P : tm T2 -> tform} pf (P (_@ T1 T2 (_lam T1 T2 F) X)) ->  pf (P (F X)).

_imp_i   : {A : tform} {B : tform} (pf A -> pf B) -> pf (A imp B).
_imp_e   : {A : tform} {B : tform} pf (A imp B) -> pf A -> pf B.

_forall_i:{T: tp} {A : tm T -> tform}({X : tm T} pf (A X)) -> pf (_forall T A).
_forall_e:{T: tp} {A : tm T -> tform} pf (_forall T A) -> {X : tm T} pf (A X).

pair     : tp -> tp -> tp.
_mkpair  : {T1 : tp} {T2 : tp} tm (T1 arrow T2 arrow pair T1 T2).
_fst     : {T1 : tp} {T2 : tp} tm (pair T1 T2 arrow T1).
_snd     : {T1 : tp} {T2 : tp} tm (pair T1 T2 arrow T2).

_fstpair : {T1 : tp} {T2 : tp} {X : tm T1} {Y : tm T2}
 pf (_forall (T1 arrow form) [f : tm (T1 arrow form)]
    (_@ T1 form f X) imp (_@ T1 form f (_@ (pair T1 T2) T1 (_fst T1 T2)
     (_@ T2 (pair T1 T2) (_@ T1 (T2 arrow pair T1 T2) (_mkpair T1 T2) X) Y)))).

_sndpair : {T1 : tp} {T2 : tp} {X : tm T1} {Y : tm T2}
 pf (_forall (T2 arrow form) [f : tm (T2 arrow form)]
    (_@ T2 form f Y) imp (_@ T2 form f (_@ (pair T1 T2) T2 (_snd T1 T2)
     (_@ T2 (pair T1 T2) (_@ T1 (T2 arrow pair T1 T2) (_mkpair T1 T2) X) Y)))).
% Copyright (c) 2004 Princeton University
%	$Id: coredefs.elf,v 1.49 2004/07/29 00:30:38 rsimmons Exp $

_frl_frm : (tform -> tform) -> tform = _forall form.

_@_f : {T : tp} tm (T arrow form) -> tm T -> tform = [T : tp] _@ T form.

_eq : {T : tp} tm T -> tm T -> tform =
 [T : tp][A : tm T][B : tm T]
  _forall (T arrow form) [P : tm (T arrow form)] _@_f T P B imp _@_f T P A.

and : tform -> tform -> tform =
 [A : tform][B : tform] _frl_frm [C : tform] (A imp B imp C) imp C.
%infix right 12 and.

or : tform -> tform -> tform =
 [A : tform][B : tform] _frl_frm [C : tform] (A imp C) imp (B imp C) imp C.
%infix right 11 or.

false : tform = _frl_frm [A : tform] A.

not : tform -> tform = [A : tform] A imp false.

equiv : tform -> tform -> tform =
 [A : tform][B : tform] (A imp B) and (B imp A).    %infix right 10 equiv.

_lam2  = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3]
  _lam T1 (T2 arrow T3) [x : tm T1] _lam T2 T3 (f x).

_lam3 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp]
        [f : tm T1 -> tm T2 -> tm T3 -> tm T4]
  _lam T1 (T2 arrow T3 arrow T4) [x : tm T1] _lam2 T2 T3 T4 (f x).

_lam4 = [T1 : tp] [T2 : tp] [T3 : tp] [T4 : tp] [T5 : tp]
        [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5]
  _lam T1 (T2 arrow T3 arrow T4 arrow T5) [x : tm T1] _lam3 T2 T3 T4 T5 (f x).

_@2 = [T1 : tp][T2 : tp][T3 : tp][f : tm (T1 arrow T2 arrow T3)]
 [x1 : tm T1] _@ T2 T3 (_@ T1 (T2 arrow T3) f x1).

_@3 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp]
 [f : tm (T1 arrow T2 arrow T3 arrow T4)][x1 : tm T1]
  _@2 T2 T3 T4 (_@ T1 (T2 arrow T3 arrow T4) f x1).

_@4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp]
 [f : tm (T1 arrow T2 arrow T3 arrow T4 arrow T5)][x1 : tm T1]
  _@3 T2 T3 T4 T5 (_@ T1 (T2 arrow T3 arrow T4 arrow T5) f x1).

_forall2 = [T1 : tp][T2 : tp][f : tm T1 -> tm T2 -> tform]
  _forall T1 [x : tm T1] _forall T2 (f x).

_forall3 = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3 -> tform]
  _forall T1 [x : tm T1] _forall2 T2 T3 (f x).

_forall4 = [T1 : tp][T2 : tp][T3 : tp][T4: tp]
           [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tform]
  _forall T1 [x : tm T1] _forall3 T2 T3 T4 (f x).

_forall5 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp]
	   [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tform]
  _forall T1 [x : tm T1] _forall4 T2 T3 T4 T5 (f x).

_forall6 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp][T6 : tp]
	   [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tm T6 -> tform]
  _forall T1 [x : tm T1] _forall5 T2 T3 T4 T5 T6 (f x).

_exists : {T : tp} (tm T -> tform) -> tform =
 [T : tp][F : tm T -> tform]
  _frl_frm [B : tform] (_forall T [X : tm T] F X imp B) imp B.

_exists2 = [T1 : tp][T2 : tp][f : tm T1 -> tm T2 -> tform]
  _exists T1 [x : tm T1] _exists T2 (f x).

_exists3 = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3 -> tform]
  _exists T1 [x : tm T1] _exists2 T2 T3 (f x).

app1 = [T1 : tp][T2 : tp][f : tm T1 -> tm T2][x1 : tm T1]
 _@ T1 T2 (_lam T1 T2 f) x1.

app2 = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3]
  _@2 T1 T2 T3 (_lam2 T1 T2 T3 f).

app3 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp]
  [f : tm T1 -> tm T2 -> tm T3 -> tm T4]
  _@3 T1 T2 T3 T4 (_lam3 T1 T2 T3 T4 f).

app4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp]
  [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5]
   _@4 T1 T2 T3 T4 T5 (_lam4 T1 T2 T3 T4 T5 f).

app5 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5: tp][T6 : tp]
 [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tm T6][x1 : tm T1]
  _@4 T2 T3 T4 T5 T6
    ((app1 T1 (T2 arrow T3 arrow T4 arrow T5 arrow T6)
     [x : tm T1] _lam4 T2 T3 T4 T5 T6 (f x)) x1).

app6 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5: tp][T6 : tp][T7 : tp]
 [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tm T6 -> tm T7]
 [x1 : tm T1][x2 : tm T2]
  _@4 T3 T4 T5 T6 T7
    ((app2 T1 T2 (T3 arrow T4 arrow T5 arrow T6 arrow T7)
     [x : tm T1][y : tm T2] _lam4 T3 T4 T5 T6 T7 (f x y)) x1 x2).

if : tform -> tform -> tform -> tform =
 [E : tform][A : tform][B : tform] (E imp A) and (not E imp B).

true : tform = not false.

xor : tform -> tform -> tform =
 [A : tform][B : tform] (A and (not B)) or ((not A) and B).
%infix right 11 xor.

_kleene_star : {T : tp} (tm T -> tm T -> tform) -> tm T -> tm T -> tform =
  [T : tp][R : tm T -> tm T -> tform][V : tm T][W : tm T] 
   _forall  (T arrow T arrow form) [S : tm (T arrow T arrow form)]
   (_forall T [Z : tm T] _@2 T T form S Z Z) imp
   (_forall3 T T T [X : tm T][Y : tm T][Z : tm T]
    (app2 T T form R X Y) imp (_@2 T T form S Y Z)
      imp (_@2 T T form S X Z)) imp
   (_@2 T T form S V W).

% Pairs out of pairs.
% Object vs Meta logic.
tuple2 : tp -> tp -> tp = pair.
_mktuple2 : {T1 : tp}{T2 : tp} tm T1 -> tm T2 -> tm (tuple2 T1 T2) =
 [T1 : tp][T2 : tp][x1 : tm T1][x2 : tm T2]
  _@2 T1 T2 (pair T1 T2) (_mkpair T1 T2) x1 x2.
_get1of2 = [T1 : tp][T2 : tp][p : tm (tuple2 T1 T2)]
 _@ (pair T1 T2) T1 (_fst T1 T2) p.
_get2of2 = [T1 : tp][T2 : tp][p : tm (tuple2 T1 T2)]
 _@ (pair T1 T2) T2 (_snd T1 T2) p.

% Quadruples out of pairs.
tuple4 : tp -> tp -> tp -> tp -> tp =
 [T1 : tp][T2 : tp][T3 : tp ][T4 : tp] pair (pair T1 T2) (pair T3 T4).
_mktuple4 : {T1 : tp}{T2 : tp}{T3 : tp}{T4 : tp}
           tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm (tuple4 T1 T2 T3 T4) =
 [T1 : tp][T2 : tp][T3 : tp][T4 : tp][x1 : tm T1][x2 : tm T2][x3 : tm T3]
 [x4 : tm T4] _@2 (pair T1 T2) (pair T3 T4) (tuple4 T1 T2 T3 T4)
                  (_mkpair (pair T1 T2) (pair T3 T4))
                  (_@2 T1 T2 (pair T1 T2) (_mkpair T1 T2) x1 x2)
                  (_@2 T3 T4 (pair T3 T4) (_mkpair T3 T4) x3 x4).

_get1of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T1 T2) T1 (_fst T1 T2)
    (_@ (tuple4 T1 T2 T3 T4) (pair T1 T2) (_fst (pair T1 T2) (pair T3 T4)) p).

_get2of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T1 T2) T2 (_snd T1 T2)
    (_@ (tuple4 T1 T2 T3 T4) (pair T1 T2) (_fst (pair T1 T2) (pair T3 T4)) p).

_get3of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T3 T4) T3 (_fst T3 T4)
    (_@ (tuple4 T1 T2 T3 T4) (pair T3 T4) (_snd (pair T1 T2) (pair T3 T4)) p).

_get4of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T3 T4) T4 (_snd T3 T4)
    (_@ (tuple4 T1 T2 T3 T4) (pair T3 T4) (_snd (pair T1 T2) (pair T3 T4)) p).
% Copyright (c) 2004 Princeton University
%	$Id: arith-fix-checker.elf,v 1.7 2004/04/22 10:47:38 appel Exp $

%use word32.

rep_type = word32.
rep_plus = +.
rep_times = *.
rep_div = /.
% Copyright (c) 2004 Princeton University
%	$Id: arith.elf,v 1.16 2004/04/22 10:47:38 appel Exp $

% Author : Neophytos Michael
%

num : tp.
tnum = tm num.

const : rep_type -> tnum.

isInt : tnum -> tform.

zero = const 0.
one  = const 1.

p_one  : pf (isInt one).

neg : tnum -> tnum.
eqn : tnum -> tnum -> tform = _eq num.

%
% The existece of negatives is an axiom.
%
_neg_exists : {N : tnum} pf (isInt N) -> pf (isInt (neg N)).

%
% The integers with addition (Z, +) form an abelian group.
%
plus : tnum -> tnum -> tnum.

_closure_add :
 {N : tnum}{M : tnum}pf (isInt N) -> pf (isInt M) -> pf (isInt (plus N M)).

_assoc_add : {A : tnum}{B : tnum}{C : tnum}
             pf (eqn (plus (plus A B) C) (plus A (plus B C))).

_comm_add : {A : tnum}{B : tnum} pf (eqn (plus A B) (plus B A)).

_zero_add : {A : tnum} pf (eqn (plus A zero) A).

_inv_add : {A : tnum} pf (eqn (plus A (neg A)) zero).

%
% The integers with multiplication (Z, *) form a monoid.
%
times : tnum -> tnum -> tnum.

_closure_mult : {N : tnum}{M : tnum}
                pf (isInt N) -> pf (isInt M) -> pf (isInt (times N M)).

_assoc_mult : {A : tnum}{B : tnum}{C : tnum}
              pf (eqn (times (times A B) C) (times A (times B C))).

_zero_mult : {A : tnum} pf (eqn (times A one) A).

_comm_mult : {A : tnum}{B : tnum} pf (eqn (times A B) (times B A)).

% The 1 != 0 rule. This rules out the trivial structure of the single
% element Ring.
one_neq_zero : pf ((eqn one zero) imp false).

%
% The distributive law of multiplication over addition.
%
_distrib : {A : tnum}{B : tnum}{C : tnum}
           pf (eqn (times A (plus B C)) (plus (times A B) (times A C))).

%
% The order relation on integers.
%
geq : tnum -> tnum -> tform.

_ord_reflexivity : {A : tnum} pf (geq A A).

_ord_transitivity : {A : tnum}{B : tnum}{C : tnum}
                    pf (geq A B) -> pf (geq B C) -> pf (geq A C).

_ord_dichotomy : {A : tnum}{B : tnum} pf ((geq A B) or (geq B A)).

_ord_add_closure : {A : tnum}{B : tnum}{C : tnum}
                   pf (geq A C) -> pf (geq (plus A B) (plus C B)).

_ord_mult_closure : {A : tnum}{B : tnum} pf (geq A zero) -> pf (geq B zero)
                     -> pf (geq (times A B) zero).

_ord_antisymmetry : {A : tnum}{B : tnum}
                    pf (geq A B) -> pf (geq B A) -> pf (eqn A B).

_ord_excluded_middle : {A : tnum}{B : tnum} pf ((geq A B) or not (geq A B)).

%
% The cancelation Axiom
%
_cancelation : {A : tnum}{B : tnum}
               pf (eqn (times A B) zero) -> pf ((eqn A zero) or (eqn B zero)).

%
% Finally the induction principle on the integers.
%
isNat = [n : tnum] (isInt n) and (geq n zero).

induction : {A : tnum -> tform}
            pf (A zero) ->
            ({n : tnum}pf (isNat n) -> pf (A n) -> pf (A (plus n one))) ->
            pf (_forall num [n : tnum] (isNat n) imp A n).

sign  : tnum -> tnum.
_sign0 : {N : tnum} pf (geq N zero) -> pf (eqn (sign N) zero).
_sign1 : {N : tnum} pf (geq N zero imp false) -> pf (eqn (sign N) one).

_eval_plus : {A : rep_type}{B : rep_type}{C : rep_type}
             rep_plus A B C -> pf (eqn (plus (const A) (const B)) (const C)).

_eval_times : {A : rep_type}{B : rep_type}{C : rep_type}
             rep_times A B C -> pf (eqn (times (const A) (const B)) (const C)).

_eval_div : {M : rep_type}{N : rep_type}{Q : rep_type} rep_div M N Q
           -> pf (geq (const M) (times (const N) (const Q)) and
                 (not (geq (const M) (times (const N) (plus one (const Q)))))).
% Copyright (c) 2004 Princeton University
%	$Id: arithdefs.elf,v 1.43 2004/10/07 22:39:18 gtan Exp $


_frl_n  : (tnum -> tform) -> tform = _forall num.
_exs_n  : (tnum -> tform) -> tform = _exists num.
_exs_n2 : (tnum -> tnum -> tform) -> tform = _exists2 num num.
_exs_n3 : (tnum -> tnum -> tnum -> tform) -> tform = _exists3 num num num.

minus : tnum -> tnum -> tnum = [x : tnum][y : tnum] plus x (neg y).

lt : tnum -> tnum -> tform = [x : tnum][y : tnum] not (geq x y).

gt : tnum -> tnum -> tform = [x : tnum][y : tnum] lt y x.

leq : tnum -> tnum -> tform = [x : tnum][y : tnum] geq y x.

if1: tnum -> tnum -> tnum -> tnum = 
 [A : tnum][B : tnum][C : tnum] plus (times A B) (times (minus one A) C).

ifgtz : tnum -> tnum -> tnum -> tnum = [x : tnum] if1 (sign (neg x)).

ifeq : tnum -> tnum -> tnum -> tnum -> tnum =
 [I : tnum][J : tnum][A : tnum][B : tnum]
  ifgtz (minus I J) B (ifgtz (minus J I) B A).

% Some symbolic constants.
two     : tnum = const 2.
three   : tnum = const 3.
four    : tnum = const 4.
seven   : tnum = const 7.
eight   : tnum = const 8.
ten     : tnum = const 10.
fifteen : tnum = const 15.
sixteen : tnum = const 16.

pred1 : tp -> type = [t1:tp] tm t1 -> tform.
pred2 : tp -> tp -> type = [t1:tp][t2:tp] tm t1 -> pred1 t2.
pred4 : tp -> tp -> tp -> tp -> type
  = [t1:tp][t2:tp][t3:tp][t4:tp] tm t1 -> tm t2 -> pred2 t3 t4.
pred5 : tp -> tp -> tp -> tp -> tp -> type
  = [t1:tp][t2:tp][t3:tp][t4:tp][t5:tp] tm t1 -> pred4 t2 t3 t4 t5.

high0 : type = pred2 form form.
high1 : type = {t1:tp} pred1 t1 -> pred1 t1 -> pred1 t1.
high2 : type = {t1:tp}{t2:tp} pred2 t1 t2 -> pred2 t1 t2 -> pred2 t1 t2.
high4 : type = {t1:tp}{t2:tp}{t3:tp}{t4:tp}
  pred4 t1 t2 t3 t4 -> pred4 t1 t2 t3 t4 -> pred4 t1 t2 t3 t4.
high5 : type = {t1:tp}{t2:tp}{t3:tp}{t4:tp}{t5:tp}
  pred5 t1 t2 t3 t4 t5 -> pred5 t1 t2 t3 t4 t5 -> pred5 t1 t2 t3 t4 t5.

%abbrev mkhigh1 : high0 -> high1 =
 [op:high0][t1:tp][h1:pred1 t1][h2:pred1 t1][x1:tm t1]
 op (app1 t1 form h1 x1) (app1 t1 form h2 x1).

%abbrev mkhigh2 : high0 -> high2 =
 [op:high0][t1:tp][t2:tp][h1:pred2 t1 t2][h2:pred2 t1 t2][x1:tm t1][x2:tm t2]
 op (app2 t1 t2 form h1 x1 x2) (app2 t1 t2 form h2 x1 x2).

%abbrev mkhigh4 : high0 -> high4 =
 [op:high0][t1:tp][t2:tp][t3:tp][t4:tp]
 [h1:pred4 t1 t2 t3 t4][h2:pred4 t1 t2 t3 t4]
 [x1:tm t1][x2:tm t2][x3:tm t3][x4:tm t4]
 op (app4 t1 t2 t3 t4 form h1 x1 x2 x3 x4)
    (app4 t1 t2 t3 t4 form h2 x1 x2 x3 x4).

%abbrev mkhigh5 : high0 -> high5 =
 [op:high0][t1:tp][t2:tp][t3:tp][t4:tp][t5:tp]
 [h1:pred5 t1 t2 t3 t4 t5][h2:pred5 t1 t2 t3 t4 t5]
 [x1:tm t1][x2:tm t2][x3:tm t3][x4:tm t4][x5:tm t5]
 op (app5 t1 t2 t3 t4 t5 form h1 x1 x2 x3 x4 x5)
    (app5 t1 t2 t3 t4 t5 form h2 x1 x2 x3 x4 x5).

%abbrev __and : pred2 form form = [a : tform][b : tform] a and b.
%abbrev __or  : pred2 form form = [a : tform][b : tform] a or b.

_&&  : high1 = mkhigh1 __and.
_&&2 : high2 = mkhigh2 __and.
_&&4 : high4 = mkhigh4 __and.
_||  : high1 = mkhigh1 __or.
_||2 : high2 = mkhigh2 __or.
_||4 : high4 = mkhigh4 __or.
_||5 : high5 = mkhigh5 __or.

% A high level not operator
_!! : {T : tp} (tm T -> tform) -> tm T -> tform =
 [T : tp][p : tm T -> tform][w : tm T] not (_@ T form (_lam T form p) w).

% These are used a lot in the trusted code so they've been moved here.
succ : tnum -> tnum = [n : tnum] plus n one.
pred : tnum -> tnum = [n : tnum] minus n one.

% The definitions of ncomp and sequences
% See core/sequence.elf

sequence : tp -> tp = [T : tp] num arrow T arrow form.

_ncomp : {T : tp} tm (T arrow T) -> tm num -> tm T -> tm T -> tform =
 [T : tp][F : tm (T arrow T)][N : tnum][X : tm T][Y : tm T]
   _forall ((T arrow T) arrow num arrow T arrow T arrow form)
    [NC : tm ((T arrow T) arrow num arrow T arrow T arrow form)]
      (_forall T [Z : tm T]
        _@4 (T arrow T) num T T form NC F zero Z Z) imp
      (_forall3 num T T [N' : tm num][Z1 : tm T][Z2 : tm T] 
             (isNat N') imp (gt N' zero) imp
             (_@4 (T arrow T) num T T form NC F (pred N') Z1 Z2) imp
             (_@4 (T arrow T) num T T form NC F N' Z1 (_@ T T F Z2))) imp
      (_@4 (T arrow T) num T T form NC F N X Y).

double : tm (num arrow num) = _lam num num [x : tnum] times two x.

_power2 : tnum ->  tnum -> tform =
 [a : tnum][b : tnum] (isNat a) and (_ncomp num double a one b).

bignum_base : rep_type = 256.
bignum      : tnum = zero.
dig         : tnum -> rep_type -> tnum =
 [x : tnum][d : rep_type] plus (times x (const bignum_base)) (const d).
%infix left 1000 dig.

pow2_8  : tnum = bignum dig 1 dig 0.
pow2_16 : tnum = bignum dig 1 dig 0 dig 0.
pow2_24 : tnum = bignum dig 1 dig 0 dig 0 dig 0.
pow2_32 : tnum = bignum dig 1 dig 0 dig 0 dig 0 dig 0.
pow2_64 : tnum = bignum dig 1 dig 0 dig 0 dig 0 dig 0 dig 0 dig 0 dig 0 dig 0.
pow2_31     = const 2147483648.

_abs : tnum -> tnum -> tform =
 [a : tnum][abs_a : tnum] if (geq a zero) (eqn abs_a a) (eqn abs_a (neg a)).

% Arithmetic modulo an integer
_divide_mod : tnum -> tnum -> tnum -> tnum -> tform =
 [m : tnum][n : tnum][q : tnum][r : tnum]
  (gt n zero) and
  (eqn m (plus (times q n) r)) and
  (isInt q) and geq r zero and lt r n.

_divide : tnum -> tnum -> tnum -> tform =
 [n : tnum][m : tnum][q : tnum] _exs_n [r : tnum] _divide_mod n m q r.

_modulo : tnum -> tnum -> tnum -> tform =
 [n: tnum][m : tnum][r : tnum] _exs_n [q : tnum] _divide_mod n m q r.

_modulo32 : tnum -> tnum -> tform =
 [n : tnum][res : tnum] _modulo n pow2_32 res.

_plus_mod16 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (plus a b) pow2_16 c.

_plus_mod32 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (plus a b) pow2_32 c.

_minus_mod32 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (minus a b) pow2_32 c.

_times_mod32 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (times a b) pow2_32 c.

% Bitwise operations
_bits : tnum -> tnum -> tnum -> tnum -> tform =
 [r : tnum][l : tnum][v : tnum][word : tnum]
  _exs_n3 [pr : tnum][plr : tnum][shifted : tnum]
  (_power2 r pr) and
  (_power2 (succ (minus l r)) plr) and
  (_divide word pr shifted) and
  (_modulo shifted plr v).

_inrange2 : tnum -> tnum -> tnum -> tform =
  [lo:tnum][hi:tnum][x:tnum]
  isInt x and leq lo x and lt x hi.

_set_disjoint : {t: tp} (tm t -> tform) -> (tm t -> tform) -> tform =
  [t: tp] [s1: tm t -> tform] [s2: tm t -> tform]
  not (_exists t [x:tm t] s1 x and s2 x).

_rbits : rep_type -> rep_type -> tnum -> tnum -> tform =
 [r : rep_type][l : rep_type] _bits (const r) (const l).

% Number is even
even? : tnum -> tform = [m: tnum] _modulo m two zero.

% Number is a multiple of four
mult4? : tnum -> tform = [m: tnum] _modulo m four zero.
% Copyright (c) 2004 Princeton University
%	$Id: arith-fix-axioms.elf,v 1.4 2004/04/22 10:47:38 appel Exp $

% All rations are word32 (unsigned ints) for this theory.

_warning_not_portable_to_arith_rat : {C : rep_type} pf (isNat (const C)).
% Copyright (c) 2004 Princeton University
%	$Id: classic.elf,v 1.4 2004/04/22 10:47:39 appel Exp $

_not_not_e : {B : tform}
 pf ((B imp (_frl_frm [A : tform] A)) imp (_frl_frm [A : tform] A)) -> pf B.
% Copyright (c) 2004 Princeton University
%	$Id: ops.elf,v 1.87 2004/04/22 10:49:18 appel Exp $

registers : tp = num arrow num.
memory    : tp = num arrow num.

tregs : type = tm registers.
tmem  : type = tm memory.

program : tp = num arrow num arrow form.
__program__ : type = tm program.

_exs_r : (tregs -> tform) -> tform = _exists registers.

_readable   : tregs -> tmem -> tnum -> tform.
_writable   : tregs -> tmem -> tnum -> tform.
_executable : tregs -> tmem -> tnum -> tform.

instr : tp = registers arrow memory arrow registers arrow memory arrow form.
app_instr = _@4 registers memory registers memory form.

% no api steps for now
api_step : tm instr = 
  _lam4 registers memory registers memory form
   [r: tregs][m: tmem][r': tregs][m': tmem] false.

tnfn : tp -> tp -> type = [T1 : tp][T2 : tp] tm (T1 arrow T2).

upd_typ = [T1 : tp][T2 : tp] tnfn T1 T2 -> tnfn T1 T2 -> tm T1 -> tform.

_k0 = [T1 : tp][T2 : tp][f : tnfn T1 T2][f' : tnfn T1 T2][z : tm T1]
  _eq T2 (_@ T1 T2 f' z) (_@ T1 T2 f z).

_upd/cc = [T1 : tp][T2 : tp][d : tm T1][x : tm T2]
 [k : upd_typ T1 T2][f : tnfn T1 T2][f' : tnfn T1 T2][z : tm T1]
  if (_eq T1 z d) (_eq T2 (_@ T1 T2 f' d) x)
                  (_@3 (T1 arrow T2) (T1 arrow T2) T1 form
                      (_lam3 (T1 arrow T2) (T1 arrow T2) T1 form k) f f' z).

_upd : {T1 : tp}{T2 : tp} tnfn T1 T2 -> tm T1 -> tm T2 -> tnfn T1 T2 -> tform =
 [T1 : tp][T2 : tp][f : tnfn T1 T2][d : tm T1][x : tm T2][f' : tnfn T1 T2]
  _forall T1 [z : tm T1] _upd/cc T1 T2 d x (_k0 T1 T2) f f' z.

_upd2 = [T1 : tp][T2 : tp][f : tnfn T1 T2][d1 : tm T1][x1 : tm T2]
       [d2 : tm T1][x2 : tm T2][f' : tnfn T1 T2] _forall T1 [z : tm T1]
    _upd/cc T1 T2 d1 x1 (_upd/cc T1 T2 d2 x2 (_k0 T1 T2)) f f' z.

_upd3 = [T1 : tp][T2 : tp][f : tnfn T1 T2][d1 : tm T1][x1 : tm T2][d2 : tm T1]
  [x2 : tm T2][d3 : tm T1][x3 : tm T2][f' : tnfn T1 T2]
  _forall T1 [z : tm T1] _upd/cc T1 T2 d1 x1 (_upd/cc T1 T2 d2 x2
    (_upd/cc T1 T2 d3 x3 (_k0 T1 T2))) f f' z.

_upd4 = [T1 : tp][T2 : tp][f : tnfn T1 T2][d1 : tm T1][x1 : tm T2][d2 : tm T1]
  [x2 : tm T2][d3 : tm T1][x3 : tm T2][d4 : tm T1][x4 : tm T2][f' : tnfn T1 T2]
  _forall T1 [z : tm T1] _upd/cc T1 T2 d1 x1 (_upd/cc T1 T2 d2 x2
    (_upd/cc T1 T2 d3 x3 (_upd/cc T1 T2 d4 x4 (_k0 T1 T2)))) f f' z.

app1_pred = app1 num form.
app_get_t = app2 registers num.
app_get   = app_get_t num.
app_upd   = app4 registers num num registers form.
app_upd2  = app6 registers num num num num registers form.

updn_typ = tnfn num num -> tm num -> tm num -> tnfn num num -> tform.
updn2_typ = tnfn num num -> tm num -> tm num -> tm num -> tm num
             -> tnfn num num -> tform.
updn3_typ = tnfn num num -> tm num -> tm num -> tm num -> tm num
             -> tm num -> tm num -> tnfn num num -> tform.

updn  : updn_typ  = _upd num num.
updn2 : updn2_typ = _upd2 num num.
updn3 : updn3_typ = _upd3 num num.

strictify_num = [f : tform][c : tnum] app1_pred ([_ : tnum] f) c.

true_fn = strictify_num true.

get_mem = [m : tmem][a : tnum] _@ num num m a.
get_reg = [r : tregs][a : tnum] _@ num num r a.

_eq_mem : tmem -> tmem -> tform =
 [m : tmem][m' : tmem] _frl_n [i : tnum] eqn (get_mem m i) (get_mem m' i).

_eq_regs : tregs -> tregs -> tform =
 [r : tregs][r' : tregs]_frl_n [i : tnum] eqn (get_reg r i) (get_reg r' i).

_eq_hidden_regs: tregs -> tregs -> tform =
 [r : tregs][r' : tregs] _frl_n [i : tnum] 
    geq i (const 1000) imp eqn (get_reg r i) (get_reg r' i).

_is_word : tnum -> tform = [x : tnum] isNat x and lt x pow2_32.

_regmempred_extensional : (tregs -> tmem -> tnum -> tform) -> tform =
 [f : tregs -> tmem -> tnum -> tform] 
  _forall5 registers registers memory memory num
    [r : tregs][r' : tregs][m : tmem][m' : tmem][n : tnum] _eq_hidden_regs r r'
      imp (_frl_n [x : tm num]
	    not (_writable r m x) imp eqn (get_mem m x) (get_mem m' x))
      imp f r m n equiv f r' m' n.

_readable_extensional : pf (_regmempred_extensional _readable).
_writable_extensional : pf (_regmempred_extensional _writable).
_executable_extensional : pf (_regmempred_extensional _executable).
_executable_isword : {R:tregs} {M:tmem} {X:tnum}
                     pf (_executable R M X) -> pf (_is_word X).

instr_lam : (tregs -> tmem -> tregs -> tmem -> tform) -> tm instr =
 _lam4 registers memory registers memory form.

% This definition converts the byte input argument to the number of bits
% that are contained in the given number of bytes.
byte2bit = [bytes : tnum] times bytes eight.

% This definition makes sure that the bit pattern between "left" and "right"
% is identical in words "v1" and "v2".
eq_between = [right : tnum][left : tnum][v1 : tnum][v2 : tnum]
  _exs_n [t : tnum] _bits right left t v1 and _bits right left t v2.

% Sign extend an integer.  "msb" is the most significant bit of the
% number we are sign extending, "v" is the number itself and "vres" is
% the result of the sign extension. "v" must always be a positive
% integer.
sign_ext = [msb : tnum][v : tnum][vres : tnum]
  _exs_n [s : tnum]
   _bits msb msb s v and
   (if (eqn s zero) (eqn vres v)
                (_exs_n [p : tnum] (_power2 (succ msb) p) and
                                   (eqn vres (plus v (minus pow2_32 p))))).

% This definition forms the "address" and the "offset" arguments when
% given an unaligned argument.  It also ensures that the address is
% well aligned given the size of the value we are trying to fetch.
form_address = [u_address : tnum][alignment_bit : tnum][address : tnum]
               [offset : tnum][size : tnum]
  _bits zero alignment_bit offset u_address and
  _minus_mod32 u_address offset address and
  _modulo offset size zero.

% This definition is used to cast the value of a word to the appropriate
% size.  It is used by the load instructions to chop the value fetched
% from memory to the appopriate size.
chop_value = [m : tmem][address : tnum][offset : tnum][size : tnum][v : tnum]
  _exs_n2 [right : tnum][left : tnum]
    eqn left (minus (const 31) (byte2bit offset)) and
    eqn right (minus (succ left) (byte2bit size)) and
    _bits right left v (get_mem m address).

% This definition is used (in conjuction with the above) by the load
% instructions.  The function sign extends a value from the
% appropriate bit depending on the size.  After the value is choped
% then if we are dealing with a sign extending load the value fetched
% from memory must be sign-extended.
sign_extend_from_size = [v : tnum][signed : tform][size : tnum][vres : tnum]
  if signed (((eqn size one) and (sign_ext seven v vres)) or
             ((eqn size two) and (sign_ext fifteen v vres)) or
             ((eqn size four) and (eqn v vres)))
            (eqn v vres).

% This definition is used to fetch the value stored in a memory
% location due to a load instruction.  It performs sign extention and
% casting to the appropriate machine type.
fetch_value = [m : tmem][address : tnum][offset : tnum][signed : tform]
              [size : tnum][val : tnum]
 _exs_n [v : tnum] chop_value m address offset size v and
                   sign_extend_from_size v signed size val.

mk_stored_value_word = [reg_val : tnum][new_val : tnum] eqn new_val reg_val.

mk_stored_value_half =
 [mem_val : tnum][reg_val : tnum][offset : tnum][new_val : tnum]
  _exs_n2 [mp_right : tnum][mp_left : tnum] _exs_n2 [p1 : tnum][p2 : tnum]
   _power2 (byte2bit (minus four offset)) p2 and
   _power2 (byte2bit (minus (minus four offset) two)) p1 and
   _modulo mem_val p1 mp_right and
   _divide mem_val p2 mp_left and
   eqn new_val (plus (plus (times mp_left p2) (times reg_val p1)) mp_right).

mk_stored_value_byte =
 [mem_val : tnum][reg_val : tnum][offset : tnum][new_val : tnum]
  _exs_n2 [mp_left : tnum][mp_right : tnum] _exs_n2 [p1 : tnum][p2 : tnum]
   (_power2 (byte2bit (minus four offset)) p2) and
   (_power2 (byte2bit (pred (minus four offset))) p1) and
   _modulo mem_val p1 mp_right and
   _divide mem_val p2 mp_left and
   eqn new_val (plus (plus (times mp_left p2) (times reg_val p1)) mp_right).

% This definition is used for manufucturing the value to be stored
% into a memory location by the store kind of instructions.
make_stored_value : tmem -> tnum -> tnum -> tnum -> tnum -> tnum -> tform =
 [m : tmem][address : tnum][offset : tnum]
 [size : tnum][reg_val : tnum][new_val : tnum]
  _exs_n2 [mem_val : tnum][rval : tnum]
   (eqn mem_val (get_mem m address)) and
   (_bits zero (pred (byte2bit size)) rval reg_val) and
   ((eqn size four and mk_stored_value_word rval new_val) or
    (eqn size two  and mk_stored_value_half mem_val rval offset new_val) or
    (eqn size one  and mk_stored_value_byte mem_val rval offset new_val)).

% Operators for logical/Arithmetic operations.
alu_fun = tnum -> tnum -> tnum -> tform.

app_alu = app3 num num num form.
app_alu2 = app2 num num form.

% Logical
bitwise : (tform -> tform -> tform)-> alu_fun =
 [f : tform -> tform -> tform][x : tnum][y : tnum][z : tnum]
   _is_word z and
   _frl_n [i : tnum] (_bits i i one z)
        equiv ( _inrange2 zero (const 32) i and
                _@2 form form form (_lam2 form form form f)
                                 (_bits i i one x) (_bits i i one y)).

and_oper  : alu_fun = bitwise [x : tform][y : tform] x and y.
andn_oper : alu_fun = bitwise [x : tform][y : tform] x and not y.
or_oper   : alu_fun = bitwise [x : tform][y : tform] x or y.
orn_oper  : alu_fun = bitwise [x : tform][y : tform] x or not y.
xor_oper  : alu_fun = bitwise [x : tform][y : tform] x equiv not y.
xnor_oper : alu_fun = bitwise [x : tform][y : tform] x equiv y.

bits_0_31 : tnum -> tnum -> tform = _rbits 0 31.
get_lsb5  : tnum -> tnum -> tform = _rbits 0 4.

% Shift Left logical
shift_ll_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
 _exs_n2 [lsb5 : tnum][s : tnum]
  (get_lsb5 lsb5 y) and (_power2 lsb5 s) and (bits_0_31 z (times x s)).

% Shift right logical
shift_rl_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
 _exs_n [lsb5 : tnum] (get_lsb5 lsb5 y) and (_bits lsb5 (const 31) z x).

% Shift right arithmetic
shift_ra_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
 _exs_n2 [r : tnum][lsb5 : tnum]
  (shift_rl_oper x y r) and (get_lsb5 lsb5 y) and
  (sign_ext (minus (const 31) lsb5) r z).

% Negate in two's complement
neg_2s_comp = [c : tnum][x : tnum][y : tnum]
  if (eqn x zero) (eqn y zero) (eqn y (minus c x)).

neg_2s_comp_16 : tnum -> tnum -> tform = neg_2s_comp pow2_16.
neg_2s_comp_32 : tnum -> tnum -> tform = neg_2s_comp pow2_32.
neg_2s_comp_64 : tnum -> tnum -> tform = neg_2s_comp pow2_64.

% Arith plus
% commented out since it overlaps with _plus_mod32
% plus_mod32_oper = [x : tnum][y : tnum][z : tnum] bits_0_31 z (plus x y).

% Arith minus
% commented out since it overlaps with _minus_mod32
% minus_mod32_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
%  _exs_n [negy : tnum] neg_2s_comp_32 y negy and bits_0_31 z (plus x negy).

% Floating point types
o_flt32 : tp = num.
o_flt64 : tp = pair o_flt32 o_flt32.
o_flt128 : tp = pair o_flt64 o_flt64.

flt32  : type = tm o_flt32.
flt64  : type = tm o_flt64.
flt128 : type = tm o_flt128.

mk_float64  = _mktuple2 num num.
mk_float128 = _mktuple4 num num num num.

% Convert ints to floats
int32->float32  : tnum -> flt32  -> tform.
int32->float64  : tnum -> flt64  -> tform.
int32->float128 : tnum -> flt128 -> tform.

% Convert floats to ints
float32->int32  : flt32 -> tnum -> tform.
float64->int32  : flt64 -> tnum -> tform.
float128->int32 : flt128 -> tnum -> tform.

% Convert floats to floats
float32->float64  : flt32 -> flt64 -> tform.
float32->float128 : flt32 -> flt128 -> tform.
float64->float32  : flt64 -> flt32 -> tform.
float64->float128 : flt64 -> flt128 -> tform.
float128->float32 : flt128 -> flt32 -> tform.
float128->float64 : flt128 -> flt64 -> tform.

% Floating point negate
float32_neg : flt32 -> flt32 -> tform.
float64_neg : flt64 -> flt64 -> tform.

% Floating point absolute value
float32_abs : flt32 -> flt32 -> tform.
float64_abs : flt64 -> flt64 -> tform.

% Floating point square root
float32_sqrt  : flt32 -> flt32 -> tform.
float64_sqrt  : flt64 -> flt64 -> tform.
float128_sqrt : flt128 -> flt128 -> tform.

% Floating point bin operators
float32_oper_type  : type = flt32 -> flt32 -> flt32 -> tform.
float64_oper_type  : type = flt64 -> flt64 -> flt64 -> tform.
float128_oper_type : type = flt128 -> flt128 -> flt128 -> tform.

% Floating point add, and subtract
float32_add  : float32_oper_type.
float64_add  : float64_oper_type.
float128_add : float128_oper_type.

float32_sub  : float32_oper_type.
float64_sub  : float64_oper_type.
float128_sub : float128_oper_type.

% Floating point multiply, and divide
float32_mul  : float32_oper_type.
float64_mul  : float64_oper_type.
float128_mul : float128_oper_type.

float32->64_mul  : flt32 -> flt32 -> flt64 -> tform.
float64->128_mul : flt64 -> flt64 -> flt128 -> tform.

float32_div  : float32_oper_type.
float64_div  : float64_oper_type.
float128_div : float128_oper_type.

% Ordering relations
float32_eq : flt32 -> flt32 -> tform.
float32_gt : flt32 -> flt32 -> tform.
float32_lt : flt32 -> flt32 -> tform.
float32_uo : flt32 -> flt32 -> tform.

float64_eq : flt64 -> flt64 -> tform.
float64_gt : flt64 -> flt64 -> tform.
float64_lt : flt64 -> flt64 -> tform.
float64_uo : flt64 -> flt64 -> tform.

float128_eq : flt128 -> flt128 -> tform.
float128_gt : flt128 -> flt128 -> tform.
float128_lt : flt128 -> flt128 -> tform.
float128_uo : flt128 -> flt128 -> tform.

app_upd_t = [T : tp] app6 registers num T registers memory memory form.

% Perform a unary floating point operation
float_unary_op =
 [T1 : tp][fs2c : tnum -> tform][getf : tregs -> tnum -> tm T1]
 [T2 : tp][upd  : tregs -> tnum -> tm T2 -> tregs -> tmem -> tmem -> tform]
 [f  : tm T1 -> tm T2 -> tform][fs2 : tnum][fd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  (app1_pred fs2c fs2) and
  (_exists T2 [v : tm T2] (app2 T1 T2 form f (app_get_t T1 getf r fs2) v) and
                          (app_upd_t T2 upd r fd v r' m m')).

% Perform a binary floating point operation
float_binary_op =
 [T1 : tp][fsc : tnum -> tform][getf : tregs -> tnum -> tm T1]
 [T2 : tp][upd : tregs -> tnum -> tm T2 -> tregs -> tmem -> tmem -> tform]
 [f : tm T1 -> tm T1 -> tm T2 -> tform][fs1 : tnum][fs2 : tnum][fd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (app1_pred fsc fs1) and (fsc fs2) and
   (_exists T2 [v : tm T2]
    (app3 T1 T1 T2 form f (app_get_t T1 getf r fs1)
                          (app_get_t T1 getf r fs2) v) and
   (app_upd_t T2 upd r fd v r' m m')).


pi_typ = tnum -> tform.
f_typ = [T : tp] tm T -> tnum -> tform.

&&n : pi_typ -> pi_typ -> pi_typ = _&& num. %infix right 5 &&n.

fld0 = [T : tp][p_pi : pi_typ][icons : tm T][ins : tm T][word : tnum]
 app1_pred p_pi word and _eq T ins icons.

fld1 = [T : tp][T1 : tp][f0 : f_typ T1][p_pi : pi_typ]
          [icons : tm T1 -> tm T][ins : tm T][word : tnum]
    _exists T1 [g : tm T1] (f0 g &&n fld0 T p_pi (icons g) ins) word.

fld2 = [T : tp][T1 : tp][T2 : tp]
  [f0 : f_typ T1][f1 : f_typ T2][p_pi : pi_typ]
  [icons : tm T1 -> tm T2 -> tm T][ins : tm T][word : tnum]
   _exists T1 [g : tm T1] (f0 g &&n fld1 T T2 f1 p_pi (icons g) ins) word.

fld3 = [T : tp][T1 : tp][T2 : tp][T3 : tp]
  [f0 : f_typ T1][f1 : f_typ T2][f2 : f_typ T3][p_pi : pi_typ]
  [icons : tm T1 -> tm T2 -> tm T3 -> tm T][ins : tm T][word : tnum]
    _exists T1  [g : tm T1] 
     (f0 g &&n fld2 T T2 T3 f1 f2 p_pi (icons g) ins) word.

fld4 = [T : tp][T1 : tp][T2 : tp][T3 : tp][T4 : tp]
  [f0 : f_typ T1][f1 : f_typ T2][f2 : f_typ T3][f3 : f_typ T4][p_pi : pi_typ]
  [icons : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T][ins : tm T][word : tnum]
    _exists T1  [g : tm T1] 
     (f0 g &&n fld3 T T2 T3 T4 f1 f2 f3 p_pi (icons g) ins) word.

fld0i = fld0 instr.
fld1i = fld1 instr.
fld2i = fld2 instr.
fld3i = fld3 instr.
fld4i = fld4 instr.

field_typ = tnum -> tnum -> tform.
pat_typ = tnum -> tform.
%abbrev fldapp = [f : field_typ][v : rep_type] f (const v).

||2n = _||2 instr num. %infix right 4 ||2n.
% Copyright (c) 2004 Princeton University
%	$Id: float_axioms.elf,v 1.4 2004/04/22 10:49:17 appel Exp $


% The floating point axioms for the sparc V8 machine.

float32_range : flt32 -> tform =
 [v : flt32] (geq v zero and leq v (const 4294967295)).

float64_range : flt64 -> tform =
 [vp : flt64] float32_range (_get1of2 o_flt32 o_flt32 vp) and
              float32_range (_get2of2 o_flt32 o_flt32 vp).

float128_range : flt128 -> tform =
 [vpp : flt128] float64_range (_get1of2 o_flt64 o_flt64 vpp) and
                float64_range (_get2of2 o_flt64 o_flt64 vpp).

float_unary_prop : {T1 : tp}{T2 : tp} (tm T2 -> tform)
                    -> (tm T1 -> tm T2 -> tform) -> tform =
 [T1 : tp][T2 : tp][range : tm T2 -> tform][f : tm T1 -> tm T2 -> tform]
 _forall T1 [x : tm T1]
  (_exists T2 [y : tm T2] f x y) and
  (_forall2 T2 T2 [y : tm T2][y' : tm T2] f x y and f x y' imp _eq T2 y y') and
  (_forall T2 [y : tm T2] f x y imp range y).

float_unary_prop_32 : {T : tp} (tm T -> flt32 -> tform) -> tform =
 [T : tp] float_unary_prop T o_flt32  float32_range.
float_unary_prop_64 : {T : tp} (tm T -> flt64 -> tform) -> tform =
 [T : tp] float_unary_prop T o_flt64  float64_range.
float_unary_prop_128 : {T : tp} (tm T -> flt128 -> tform) -> tform =
 [T : tp] float_unary_prop T o_flt128 float128_range.

% Convert ints to floats axioms
int32->float32_axiom  : pf (float_unary_prop_32  num int32->float32).
int32->float64_axiom  : pf (float_unary_prop_64  num int32->float64).
int32->float128_axiom : pf (float_unary_prop_128 num int32->float128).

% Convert floats to ints
float32->int32_axiom  : pf (float_unary_prop_32 o_flt32  float32->int32).
float64->int32_axiom  : pf (float_unary_prop_32 o_flt64  float64->int32).
float128->int32_axiom : pf (float_unary_prop_32 o_flt128 float128->int32).

% Convert floats to floats
float32->float64_axiom  : pf (float_unary_prop_64  o_flt32  float32->float64).
float32->float128_axiom : pf (float_unary_prop_128 o_flt32  float32->float128).
float64->float32_axiom  : pf (float_unary_prop_32  o_flt64  float64->float32).
float64->float128_axiom : pf (float_unary_prop_128 o_flt64  float64->float128).
float128->float32_axiom : pf (float_unary_prop_32  o_flt128 float128->float32).
float128->float64_axiom : pf (float_unary_prop_64  o_flt128 float128->float64).

% Negate axiom
float32_neg_axiom : pf (float_unary_prop_32 o_flt32 float32_neg).
float64_neg_axiom : pf (float_unary_prop_64 o_flt64 float64_neg).

% Absolute value axiom
float32_abs_axiom : pf (float_unary_prop_32 o_flt32 float32_abs).
float64_abs_axiom : pf (float_unary_prop_64 o_flt64 float64_abs).

% Floating point square root
float32_sqrt_axiom  : pf (float_unary_prop_32  o_flt32  float32_sqrt).
float64_sqrt_axiom  : pf (float_unary_prop_64  o_flt64  float64_sqrt).
float128_sqrt_axiom : pf (float_unary_prop_128 o_flt128 float128_sqrt).

% Floating point bin operators

float_binary_prop : {T1 : tp} {T2 : tp}{T3 : tp}
         (tm T3 -> tform) -> (tm T1 -> tm T2 -> tm T3 -> tform) -> tform =
 [T1 : tp][T2 : tp][T3 : tp]
 [range : tm T3 -> tform][f : tm T1 -> tm T2 -> tm T3 -> tform]
  _forall2 T1 T2 [x1 : tm T1][x2 : tm T2]
   (_exists T3 [y : tm T3] f x1 x2 y) and
   (_forall2 T3 T3 [y : tm T3][y' : tm T3] (f x1 x2 y) and (f x1 x2 y')
                                           imp _eq T3 y y') and
   (_forall T3 [y : tm T3] (f x1 x2 y) imp (range y)).

float_binary_prop_32 :
 {T1:tp} {T2:tp} (tm T1 -> tm T2 -> tm o_flt32 -> tform) -> tform =
 [T1 : tp][T2 : tp] float_binary_prop T1 T2 o_flt32 float32_range.

float_binary_prop_64 :
 {T1:tp} {T2:tp} (tm T1 -> tm T2 -> tm o_flt64 -> tform) -> tform =
 [T1 : tp][T2 : tp] float_binary_prop T1 T2 o_flt64 float64_range.

float_binary_prop_128 :
 {T1:tp} {T2:tp}(tm T1 -> tm T2 -> tm o_flt128 -> tform) -> tform =
 [T1 : tp][T2 : tp] float_binary_prop T1 T2 o_flt128 float128_range.

% Floating point add and subtract axioms
float32_add_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_add).
float64_add_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_add).
float128_add_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_add).

float32_sub_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_sub).
float64_sub_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_sub).
float128_sub_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_sub).

% Floating point multiply, and divide axioms
float32_mul_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_mul).
float64_mul_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_mul).
float128_mul_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_mul).

float32->64_axiom  : pf (float_binary_prop_64 o_flt32 o_flt32 float32->64_mul).
float64->128_axiom: pf(float_binary_prop_128 o_flt64 o_flt64 float64->128_mul).

float32_div_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_div).
float64_div_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_div).
float128_div_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_div).

% Ordering axiom
cmptyp : tp -> type = [T : tp] tm T -> tm T -> tform.

float*_order : {T : tp} cmptyp T -> cmptyp T -> cmptyp T -> cmptyp T -> tform =
 [T : tp][eq : cmptyp T][gt : cmptyp T][lt : cmptyp T][uo : cmptyp T]
  _forall2 T T [x : tm T][y : tm T]
   (eq x y) xor (gt x y) xor (lt x y) xor (uo x y).

float32_order_axiom : pf (float*_order o_flt32
                            float32_eq float32_gt float32_lt float32_uo).

float64_order_axiom : pf (float*_order o_flt64
                            float64_eq float64_gt float64_lt float64_uo).

float128_order_axiom : pf (float*_order o_flt128
                             float128_eq float128_gt float128_lt float128_uo).
% Copyright (c) 2004 Princeton University
%	$Id: oper_types.elf,v 1.4 2004/04/22 10:49:20 appel Exp $


regaddr : tp = registers arrow num arrow form.

address_ : tp = registers arrow num arrow form.

reg_or_imm : tp = registers arrow num arrow form.

% Copyright (c) 2004 Princeton University
%	$Id: oper_injectors.elf,v 1.4 2004/04/22 10:49:20 appel Exp $


app_constr : tm reg_or_imm -> tregs -> tnum -> tform = _@2 registers num form.

inj_imode : tnum -> tm reg_or_imm = 
 [n : tnum] _lam2 registers num form
             [r : tregs][x : tnum] sign_ext (const 12) n x.

inj_rmode : tnum -> tm reg_or_imm =
 [i : tnum] _lam2 registers num form
             [r : tregs][x : tnum] eqn (get_reg r i) x.

inj_generalA : tnum -> tm reg_or_imm -> tm address_ =
  [rs1 : tnum][reg_imm : tm reg_or_imm]
    _lam2 registers num form [r : tregs][x : tnum]
     _exs_n [y : tnum] app_constr reg_imm r y and
                       _plus_mod32 (get_reg r rs1) y x.

inj_indexR : tnum -> tnum -> tm regaddr =
 [rs1 : tnum][rs2 : tnum]
  _lam2 registers num form [r : tregs][x : tnum]
    _plus_mod32 (get_reg r rs1) (get_reg r rs2) x.
% Copyright (c) 2004 Princeton University
%	$Id: instr_sem.elf,v 1.70 2004/06/01 21:38:09 gtan Exp $

% Instruction Semantics for the sparc V8 machine.

% We use numbers >= 32 to hold non-numbered machine registers.
pc    : tnum = const 32.     % The program counter
npc   : tnum = const 33.     % The next program counter
icc   : tnum = const 34.     % The 4 bit condition code register
fcc   : tnum = const 35.     % The 2 bit condition code register (floating)
y_reg : tnum = const 36.     % The Y register used for integer multiplication
icnt  : tnum = const 37.     % The number of instructions executed
                                 % this includes the current instruction
last_cbr    : tnum = const 38.   % The last time a cbr instr was executed
last_cmpfcc : tnum = const 39.   % The last time a cmpfcc instr was executed
last_wry    : tnum = const 40.   % The last time a wry instr was executed
opc         : tnum = const 41.   % The old pc i.e. the pc of the instr we are
                                 % currently executing
flt_offset : tnum = const 128. % Offset at which floating-point registers begin

% Compute the offset into the reg bank of floating point register "reg"
flt_num : tnum -> tnum = [reg : tnum] plus flt_offset reg.

% Get integer register.
get_ireg : tregs -> tnum -> tnum = get_reg.

% Get floating point register.
get_freg = [r : tregs][fd : tnum] get_reg r (flt_num fd).

set_from_icnt : tnum -> tregs -> tregs -> tform =
 [reg : tnum][r : tregs][r' : tregs] updn r reg (get_ireg r icnt) r'.

set_cbr    : tregs -> tregs -> tform = set_from_icnt last_cbr.
set_cmpfcc : tregs -> tregs -> tform = set_from_icnt last_cmpfcc.
set_wry    : tregs -> tregs -> tform = set_from_icnt last_wry.

cbr_in_progress? : tregs -> tform =
 [r : tregs] eqn (get_ireg r icnt) (succ (get_ireg r last_cbr)).
cmpfcc_in_progress? : tregs -> tform =
 [r : tregs] eqn (get_ireg r icnt) (succ (get_ireg r last_cmpfcc)).
wry_in_progress? : tregs -> tform =
 [r : tregs] lt (get_ireg r icnt) (plus (get_ireg r last_wry) four).

word_size   : tnum = four.    % The word size of the machine
word_bits   : tnum = pow2_32. % The word size in bits.
double_size : tnum = eight.   % The alignment of a double word
instr_size  : tnum = four.    % The instruction size

% The bit to look at to establish if the number is negative
sign_bit : rep_type = 31.
sign_bit? : tnum -> tnum -> tform = _rbits sign_bit sign_bit.

% The predicates that decides negativity, positiveness and nulity
negative? : tnum -> tform = sign_bit? one.
positive? : tnum -> tform = sign_bit? zero.
zero?     : tnum -> tform = [x : tnum] eqn x zero.

% Bit locations of the icc fields in the cc word
icc_n_bit : tnum = three.
icc_z_bit : tnum = two.
icc_v_bit : tnum = one.
icc_c_bit : tnum = zero.

% The bits below indicate the status of the 32-bit ALU result
% of the last instruction that modified the icc field
icc_n? : tnum -> tnum -> tform = _bits icc_n_bit icc_n_bit.
icc_z? : tnum -> tnum -> tform = _bits icc_z_bit icc_z_bit.
icc_v? : tnum -> tnum -> tform = _bits icc_v_bit icc_v_bit.
icc_c? : tnum -> tnum -> tform = _bits icc_c_bit icc_c_bit.

% Result was negative (1 = negative, 0 = non negative)
icc_n : tnum -> tform = icc_n? one.

% Result was zero (1 = zero, 0 = nonzero)
icc_z : tnum -> tform = icc_z? one.

% Result was out of range (overflow) (1 = overflow, 0 = no overflow)
icc_v : tnum -> tform = icc_v? one.

% This bit indicates whether a carry out or borrow occurred.  Carry is
% set on addition if there is a carry out of bit 31.  Carry is set on
% subtraction if there is a borrow into bit 31. (1 = carry, 0 = no carry)
icc_c : tnum -> tform = icc_c? one.

% Floating point condition codes (field of the fcc register)
fcc? : tnum -> tnum -> tform = _eq num.

% Equal (freg_rs1 = freg_rs2)
fcc_e : tnum -> tform = fcc? zero.

% Greater (freg_rs1 > freg_rs2)
fcc_g : tnum -> tform = fcc? two.

% Less (freg_rs1 < freg_rs2)
fcc_l : tnum -> tform = fcc? one.

% Unordered (freg_rs1 ? freg_rs2)
fcc_u : tnum -> tform = fcc? three.

% Update the icc register
upd_icc : tregs -> tnum -> tregs -> tform =
 [r : tregs][v : tnum][r' : tregs] updn r icc v r'.

% Set the fcc register
upd_fcc : tregs -> tnum -> tregs -> tform =
 [r : tregs][v : tnum][r' : tregs] updn r fcc v r'.

% Update a sparc machine integer reg (when target is zero do nothing).
upd_ireg = [r : tregs][rd : tnum][v : tnum][r' : tregs]
  updn2 r zero (get_reg r zero) rd v r'.

% Same as above for two registers.
upd_ireg2 = [r: tregs][rd1: tnum][v1: tnum][rd2: tnum][v2: tnum][r': tregs]
  updn3 r zero (get_reg r zero) rd1 v1 rd2 v2 r'.

% Update one sparc machine floating point register.
upd_freg = [r : tregs][fd : tnum][v : tnum][r' : tregs]
 updn r (flt_num fd) v r'.

% Update two sparc machine floating point registers.
upd_freg2 = [r: tregs][fd1: tnum][v1: tnum][fd2: tnum][v2: tnum][r': tregs]
 updn2 r (flt_num fd1) v1 (flt_num fd2) v2 r'.

% Update four sparc machine floating point registers.
upd_freg4 = [r : tregs][fd1 : tnum][v1 : tnum][fd2 : tnum][v2 : tnum]
            [fd3 : tnum][v3 : tnum][fd4 : tnum][v4 : tnum][r' : tregs]
 _exs_r [r'' : tregs] (updn2 r (flt_num fd1) v1 (flt_num fd2) v2 r'') and
                      (updn2 r'' (flt_num fd3) v3 (flt_num fd4) v4 r').

% This definition is true if the input argument "v" is indeed the value
% that is represented by "reg_imm" in the given register set.
load_reg_imm : tregs -> tm reg_or_imm -> tnum -> tform =
 [r : tregs][reg_imm : tm reg_or_imm][v : tnum] app_constr reg_imm r v.

% This definition is true if the input value "v" is indeed the result
% of the load generalA operation (see the syntax definition for sparc).
load_generalA : tregs -> tnum -> tm reg_or_imm -> tnum -> tform =
 [r : tregs][rs1 : tnum][reg_imm : tm reg_or_imm][v : tnum]
  _exs_n [v_reg_imm : tnum] load_reg_imm r reg_imm v_reg_imm and
                            _plus_mod32 (get_ireg r rs1) v_reg_imm v.

% This definition is true if the "address_" given is equal to the num
% supplied in the input variable "v".  It uses the definition of
% "generalA" defined above.  It also makes sure that the address is
% appropriately aligned.
load_address_align : tregs -> tm address_ -> tnum -> tnum -> tnum -> tform =
 [r : tregs][addr : tm address_][address : tnum][offset : tnum][size : tnum]
  _exs_n [v' : tnum] app_constr addr r v' and
                     form_address v' one address offset size.

load_address_align_aux =
 [read/write-able : tregs -> tmem -> tnum -> tform]
 [r : tregs][m : tmem][addr : tm address_]
 [address : tnum][offset : tnum][size : tnum]
  load_address_align r addr address offset size and
  _@3 registers memory num form 
    (_lam3 registers memory num form read/write-able) r m address.

% This definition computes the address we are trying to load from,
% makes sure that this address is readable and that it is
% appropriately aligned.
load_address_read_align = load_address_align_aux _readable.

% This definition computes the address we are trying to write to
% makes sure that this address is writable and that it is
% appropriately aligned.
load_address_write_align = load_address_align_aux _writable.

% Loadg
loadg_typ = tm address_ -> tnum -> tm instr.

% The load instruction family.
i_loadg : tform -> tnum -> updn_typ -> loadg_typ =
 [signed : tform][size : tnum][upd : updn_typ] [addr : tm address_][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [address : tnum][offset : tnum][value : tnum]
     (load_address_read_align r m addr address offset size) and
     (fetch_value m address offset signed size value) and
     (app_upd upd r rd value r')) and
    (_eq_mem m m').
                                        % Load Signed Byte
i_LDSB : tm address_ -> tnum -> tm instr = i_loadg true  (const 1) upd_ireg.
                                        % Load Signed Halfword
i_LDSH : tm address_ -> tnum -> tm instr = i_loadg true  (const 2) upd_ireg.
                                        % Load Unsigned Byte
i_LDUB : tm address_ -> tnum -> tm instr = i_loadg false (const 1) upd_ireg.
                                        % Load Unsigned Halfword
i_LDUH : tm address_ -> tnum -> tm instr = i_loadg false (const 2) upd_ireg.
                                        % Load Word
i_LD   : tm address_ -> tnum -> tm instr = i_loadg false (const 4) upd_ireg.

i_LDSTUB : tm address_ -> tnum -> tm instr =  % Atomic Load-Store Unsigned Byte
 [addr : tm address_][rd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exs_n3 [address : tnum][offset : tnum][value : tnum]
    _exs_n [value' : tnum]
    (load_address_read_align r m addr address offset one) and
    (fetch_value m address offset false one value) and
    (_writable r m address) and
    (make_stored_value m address offset one (const 255) value') and
    (upd_ireg r rd value r') and (updn m address value' m')).

i_SWAP_DOT : tm address_ -> tnum -> tm instr =  % Swap r Register with Memory
 [addr : tm address_][rd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exs_n3 [address : tnum][offset : tnum][value : tnum]
    (load_address_read_align r m addr address offset word_size) and
    (fetch_value m address offset false word_size value) and
    (_writable r m address) and
    (upd_ireg r rd value r') and (updn m address (get_ireg r rd) m')).

ldd_aux : updn2_typ -> tm address_ -> tnum -> tm instr =
 [upd : updn2_typ][addr : tm address_][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (even? rd) and
    (_exs_n3 [address : tnum][address' : tnum][offset : tnum]
     _exs_n3 [offset' : tnum][v1 : tnum][v2 : tnum]
     (load_address_read_align r m addr address offset double_size) and
     (fetch_value m address offset false word_size v1) and
     (_plus_mod32 address word_size address') and
     (_readable r m address') and
     (fetch_value m address' offset' false word_size v2) and
     (app_upd2 upd r rd v1 (plus rd one) v2 r')) and
    (_eq_mem m m').
                                               % Load Doubleword
i_LDD : tm address_ -> tnum -> tm instr = ldd_aux upd_ireg2.
                                               % Load Floating-point
i_LDF : tm address_ -> tnum -> tm instr = i_loadg false four upd_freg.
                                               % Load Double Floating-point
i_LDDF : tm address_ -> tnum -> tm instr = ldd_aux upd_freg2.

i_LDC  : tm address_ -> tnum -> tm instr.      % Load Coprocessor
i_LDDC : tm address_ -> tnum -> tm instr.      % Load Double Coprocessor

% Storeg
storeg_typ = tnum -> tm address_ -> tm instr.

% The store instruction family.
i_storeg =
 [size : tnum][get : tregs -> tnum -> tnum][rd : tnum][addr : tm address_]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [address : tnum][offset : tnum][value : tnum]
     (load_address_write_align r m addr address offset size) and
     (make_stored_value m address offset size (app_get get r rd) value) and
     (updn m address value m')) and
    (_eq_regs r r').
                                              % Store Byte
i_STB : tnum -> tm address_ -> tm instr = i_storeg one  get_ireg.
                                              % Store Halfword
i_STH : tnum -> tm address_ -> tm instr = i_storeg two  get_ireg.
                                              % Store Word
i_ST  : tnum -> tm address_ -> tm instr = i_storeg four get_ireg.

std_aux =
 [get : tregs -> tnum -> tnum][rd : tnum][addr : tm address_]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (even? rd) and
    (_exs_n3 [address : tnum][address' : tnum][offset : tnum]
     (load_address_write_align r m addr address offset double_size) and
     (eqn address'(plus address word_size)) and
     (_writable r m address') and
     (updn2 m address  (app_get get r rd)
              address' (app_get get r (plus rd one)) m')) and
    (_eq_regs r r').

i_STD : storeg_typ = std_aux get_ireg.          % Store Doubleword
                                                % Store Floating-point
i_STF : tnum -> tm address_ -> tm instr = i_storeg four get_freg.
                                                % Store Double Floating-point
i_STDF : tnum -> tm address_ -> tm instr = std_aux get_freg.

i_STC : tnum -> tm address_ -> tm instr.        % Store Coprocessor
i_STDC : tnum -> tm address_ -> tm instr.       % Store Double Coprocessor

loada_typ = tm regaddr -> tnum -> tnum -> tm instr.

i_loada : tnum -> tform -> loada_typ.

% Here FAS = From Alternative Space.
i_LDSBA : loada_typ = i_loada one true.         % Load Signed Byte FAS
i_LDSHA : loada_typ = i_loada two true.         % Load Signed Halfword FAS
i_LDUBA : loada_typ = i_loada one false.        % Load Unsigned Byte FAS
i_LDUHA : loada_typ = i_loada two false.        % Load Unsigned Halfword FAS
i_LDA   : loada_typ = i_loada word_size false.  % Load Word FAS
i_LDSTUBA : loada_typ.                 % Atomic Load-Store Unsigned Byte FAS

i_SWAPA : loada_typ.                   % Swap r Register with Memory FAS

i_LDDA : loada_typ.                    % Load Double Word FAS

storea_typ = tnum -> tm regaddr -> tnum -> tm instr.

i_storea : tnum -> storea_typ.

% Here IAS = Into Alternative Space.
i_STBA : storea_typ = i_storea (const 1).          % Store Byte IAS
i_STHA : storea_typ = i_storea (const 2).          % Store Halfword IAS
i_STA  : storea_typ = i_storea word_size.          % Store Word IAS

i_STDA : storea_typ.                               % Store Doubleword IAS

i_LDFSR : loadg_typ.         % Load Floating-point State Register
i_LDCSR : loadg_typ.         % Load Coprocessor State Register
i_STFSR : storeg_typ.        % Store Floating-point State Register
i_STCSR : storeg_typ.        % Store Coprocessor State Register
i_STDFQ : storeg_typ.        % Store Double Floating-point
                                    % deferred-trap Queue (**)
i_STDCQ : storeg_typ.        % Store Double Coprocessor
                                    % deferred-trap Queue (**)
i_RDY =                      % Read Y Register
  [rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (not (wry_in_progress? r)) and
    (upd_ireg r rd (get_ireg r y_reg) r') and (_eq_mem m m').

rd_instr_typ = tnum -> tm instr.

i_RDPSR : rd_instr_typ.         % Read Processor State Register (**)
i_RDWIM : rd_instr_typ.         % Read Window Invalid Mask Register (**)
i_RDTBR : rd_instr_typ.         % Read Trap Base Register (**)

i_WRY : tnum -> tm reg_or_imm -> tm instr =          % Write Y Register
 [rs1 : tnum][reg_imm : tm reg_or_imm]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exists3 num num registers [v : tnum][xor_v : tnum][r'' : tregs]
    (load_reg_imm r reg_imm v) and (xor_oper (get_ireg r rs1) v xor_v) and
    (upd_ireg r y_reg xor_v r'') and (set_wry r'' r')) and
   (_eq_mem m m').

rs1_reg_imm_typ : type = tnum -> tm reg_or_imm -> tm instr.

i_WRPSR : rs1_reg_imm_typ.      % Write PSR (**)
i_WRWIM : rs1_reg_imm_typ.      % Write Window Invalid Mask Reg (**)
i_WRTBR : rs1_reg_imm_typ.      % Write Trap Base Register (**)
i_RDASR : tnum -> tnum -> tm instr. % Read Ancillary State Register (***)

i_WRASR : tnum -> tm reg_or_imm -> tnum -> tm instr. % Write ASR (***)
i_STBAR : tm instr.                % Store Barrier

alu_typ = tnum -> tm reg_or_imm -> tnum -> tm instr.

% This definition computes the result of an alu operation based on
% whether or not a carry forward was specified.
compute_with_carry =
 [x : tform][func : alu_fun][r : tregs][rs1 : tnum][v : tnum][v' : tnum]
  if x (_exs_n2 [d : tnum][ires : tnum]
        (icc_c? d (get_ireg r icc)) and
        (app_alu func (get_ireg r rs1) v ires) and (app_alu func ires d v'))
       (func (get_ireg r rs1) v v').

% A condition-code function takes two operands and the result, and
% decides whether the corresponding cc should be set or not.
cc_fun = tnum -> tnum -> tnum -> tform.

% the cc_fun to set the cc to zero
%abbrev
cc_zero : cc_fun = [_ : tnum][_ : tnum][_ : tnum] false.

% The following predicates compute V and C condition codes for add instruction.
add_overflow : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  _exs_n3 [b1 : tnum][b2 : tnum][b3 : tnum]
   sign_bit? b1 w1 and sign_bit? b2 w2 and sign_bit? b3 res and
   eqn b1 b2 and not (eqn b1 b3).

add_carry : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  negative? w1 and negative? w2 or
  positive? res and (negative? w1 or negative? w2).

% The following predicates compute V and C condition codes for sub instruction.
sub_overflow : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  _exs_n3 [b1 : tnum][b2 : tnum][b3 : tnum]
   sign_bit? b1 w1 and sign_bit? b2 w2 and sign_bit? b3 res and
   not (eqn b1 b2) and not (eqn b1 b3).

sub_carry : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  positive? w1 and negative? w2 or
  negative? res and (positive? w1 or negative? w2).

% Here the processor state register is updated after an alu instruction.
compute_new_icc : tnum -> tnum -> tnum -> cc_fun -> cc_fun -> tnum -> tform =
[w1 : tnum][w2 : tnum][res : tnum][v_fun : cc_fun][c_fun : cc_fun][vcc' : tnum]
 _exs_n3 [n : tnum][z : tnum][v : tnum] _exs_n [c : tnum]
  (if (negative? res)           (eqn n eight) (eqn n zero)) and
  (if (zero? res)               (eqn z four)  (eqn z zero)) and
  (if (app_alu v_fun w1 w2 res) (eqn v two)   (eqn v zero)) and
  (if (app_alu c_fun w1 w2 res) (eqn c one)   (eqn c zero)) and
  (eqn vcc' (plus n (plus z (plus v c)))).

% This definition implements the semantics of any alu operation (where
% any is as defined in "sparc/instr_sem.elf").  It relates the machine
% state (r, m) before the instruction occured to the state (r', m') at
% the end of the instruction.
i_aluxcc_aux : cc_fun -> cc_fun -> tform -> tform -> alu_fun -> alu_typ =
 [v_fun : cc_fun][c_fun : cc_fun][x : tform][cc : tform][func : alu_fun]
  [rs1 : tnum][reg_imm : tm reg_or_imm][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [v : tnum][v' : tnum][vcc' : tnum] _exs_r [r'' : tregs]
      (load_reg_imm r reg_imm v) and
      (compute_with_carry x func r rs1 v v') and
      (if cc (compute_new_icc (get_ireg r rs1) v v' v_fun c_fun vcc' and
              upd_icc r vcc' r'')
	     (_eq_regs r r'')) and
      (upd_ireg r'' rd v' r')) and
    (_eq_mem m m').

i_aluxcc : tform -> tform -> alu_fun -> alu_typ = i_aluxcc_aux cc_zero cc_zero.
i_aluxcc_x : tform -> alu_fun -> alu_typ = i_aluxcc true.
i_aluxcc_no_x : tform -> alu_fun -> alu_typ = i_aluxcc false.

mul_unsigned32->64 : tnum -> tnum -> tnum -> tform =
 [v1 : tnum][v2 : tnum][w : tnum] eqn w (times v1 v2).

mul_signed32->64 : tnum -> tnum -> tnum -> tform =
 [v1 : tnum][v2 : tnum][w : tnum]
  (_exs_n3 [s1 : tnum][s2 : tnum][v1' : tnum] _exs_n2 [v2' : tnum][res : tnum]
   (sign_bit? s1 v1) and (sign_bit? s2 v2) and
   (if (eqn s1 one) (neg_2s_comp_32 v1 v1') (eqn v1' v1)) and
   (if (eqn s2 one) (neg_2s_comp_32 v2 v2') (eqn v2' v2)) and
   (mul_unsigned32->64 v1' v2' res) and
   (if (not (eqn s1 s2)) (neg_2s_comp_32 res w) (eqn w res))).

i_multiply : tform -> alu_fun -> alu_typ =
 [cc : tform][fun : alu_fun][rs1 : tnum][reg_imm : tm reg_or_imm][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [v1 : tnum][v2 : tnum][res : tnum]
     _exs_n2 [res1 : tnum][res2 : tnum] _exs_r [r'' : tregs]
     (eqn v1 (get_ireg r rs1)) and (load_reg_imm r reg_imm v2) and
     (app_alu fun v1 v2 res) and
     (_rbits 0 31 res1 res) and (_rbits 32 63 res2 res) and
     (if cc (_exs_n2 [n : tnum][z : tnum]
             (if (negative? res1) (eqn n eight) (eqn n zero)) and
             (if (zero? res1) (eqn z four) (eqn z zero)) and
             (upd_icc r (plus n z) r''))
            (_eq_regs r r'')) and
     (upd_ireg2 r'' rd res1 y_reg res2 r')) and
   (_eq_mem m m').

i_multiply_cc : alu_fun -> alu_typ = i_multiply true.
i_multiply_no_cc : alu_fun -> alu_typ = i_multiply false.

div_neg_res_overflow_method : tm form.

div_alu_typ = tnum -> tnum -> tnum -> tnum -> tform.

div_unsigned64->32 : div_alu_typ =
 [x1 : tnum][x2 : tnum][w : tnum][v : tnum]
  (_exs_n2 [quo : tnum][rem : tnum]
   (_divide_mod x1 x2 quo rem) and
   (if ((geq quo pow2_32) and (eqn rem (pred x2)))
       ((eqn v two) and (eqn w (pred pow2_32)))
       (eqn v zero) and (bits_0_31 w quo))).

div_signed64->32 : div_alu_typ =
 [x1 : tnum][x2 : tnum][w : tnum][v : tnum]
  (_exs_n2 [s1 : tnum][s2 : tnum] _exs_n2 [x1' : tnum][x2' : tnum]
   (_exs_n3 [quo : tnum][rem : tnum][quo_pos : tnum]
    _exs_n2 [rem_pos : tnum][quo_2s : tnum]
   (_rbits 63 63 s1 x1) and (sign_bit? s2 x2) and
   (if (eqn s1 one) (neg_2s_comp_64 x1 x1') (eqn x1' x1)) and
   (if (eqn s2 one) (neg_2s_comp_32 x2 x2') (eqn x2' x2)) and
   (_divide_mod x1' x2' quo_pos rem_pos) and
   (if (eqn s1 s2) ((eqn quo quo_pos) and (eqn quo_2s quo_pos))
                  ((eqn quo (neg quo_pos)) and
                   (neg_2s_comp_64 quo quo_2s))) and
   (if (eqn s1 zero) (eqn rem rem_pos)
                    (eqn rem (neg rem_pos))) and
   (if ((geq quo pow2_31) and (eqn rem (pred x2')))
      ((eqn v two) and (eqn w (pred pow2_31)))
      (if (leq quo (neg pow2_31))
        (if ((div_neg_res_overflow_method and (eqn rem (neg (pred x2')))) or
               (not div_neg_res_overflow_method and (eqn rem zero)))
           ((eqn v two) and (eqn w (neg pow2_31)))
           ((eqn v zero) and (bits_0_31 w quo_2s)))
         ((eqn v zero) and (bits_0_31 w quo_2s)))))).

i_divide : tform -> div_alu_typ -> tnum -> tm reg_or_imm -> tnum -> tm instr =
[cc : tform][fun : div_alu_typ][rs1 : tnum][reg_imm : tm reg_or_imm][rd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exs_n3 [v1 : tnum][v2 : tnum][v3 : tnum]
    _exists2 num registers [res : tnum][r'' : tregs]
    _exs_n3 [n : tnum][z : tnum][v : tnum]
    _exs_n  [y: tnum]
     (if (wry_in_progress? r) (_is_word y) (eqn y (get_ireg r y_reg))) and
     (eqn v1 (get_ireg r rs1)) and (load_reg_imm r reg_imm v2) and
     (eqn v3 (plus v1 (times pow2_32 y))) and
     (fun v3 v2 res v) and
     (if cc ((if (negative? res) (eqn n eight) (eqn n zero)) and
             (if (zero? res) (eqn z four) (eqn z zero)) and
             (upd_icc r (plus n (plus z v)) r''))
            (_eq_regs r r'')) and
     (upd_ireg r'' rd res r')) and
   (_eq_mem m m').

i_divide_cc = i_divide true.
i_divide_no_cc = i_divide false.

% Logical
i_AND    = i_aluxcc_no_x false and_oper.  % And
i_ANDcc  = i_aluxcc_no_x true  and_oper.  % And and modify icc
i_ANDN   = i_aluxcc_no_x false andn_oper. % And not
i_ANDNcc = i_aluxcc_no_x true  andn_oper. % And not and modify icc
i_OR     = i_aluxcc_no_x false or_oper.   % Inclusive-Or
i_ORcc   = i_aluxcc_no_x true  or_oper.   % Inclusive-Or and modify icc
i_ORN    = i_aluxcc_no_x false orn_oper.  % Inclusive-Or not
i_ORNcc  = i_aluxcc_no_x true  orn_oper.  % Inclusive-Or not and modify icc
i_XOR    = i_aluxcc_no_x false xor_oper.  % Exclusive-Or
i_XORcc  = i_aluxcc_no_x true  xor_oper.  % Exclusive-Or and modify icc
i_XNOR   = i_aluxcc_no_x false xnor_oper. % Exclusive-NOr
i_XNORcc = i_aluxcc_no_x true  xnor_oper. % Exclusive-NOr and modify icc

% Shift
i_SLL = i_aluxcc_no_x false shift_ll_oper.     % Shift Left Logical
i_SRL = i_aluxcc_no_x false shift_rl_oper.     % Shift Right Logical
i_SRA = i_aluxcc_no_x false shift_ra_oper.     % Shift Right Arithmetic

% Arith
i_ADD     = i_aluxcc_no_x false _plus_mod32.  % Add
                                                  % Add and modify icc
i_ADDcc   = i_aluxcc_aux add_overflow add_carry false true _plus_mod32.
i_ADDX    = i_aluxcc_x false _plus_mod32.     % Add with Carry
                                               % Add with Carry and modify icc
i_ADDXcc  = i_aluxcc_aux add_overflow add_carry true  true _plus_mod32.

i_TADDcc   : alu_typ.            % Tagged Add and modify icc
i_TADDccTV : alu_typ.            % Tagged Add, modify icc and trap on overflow

i_SUB    = i_aluxcc_no_x false _minus_mod32.  % Subtract
                                                  % Subtract and modify icc
i_SUBcc  = i_aluxcc_aux sub_overflow sub_carry false true _minus_mod32.

i_SUBX   = i_aluxcc_x false _minus_mod32.   % Subtract with Carry
                                           % Subtract with Carry and modify icc
i_SUBXcc = i_aluxcc_aux sub_overflow sub_carry true true _minus_mod32.

i_TSUBcc   : alu_typ.           % Tagged Subtract and mod icc
i_TSUBccTV : alu_typ.           % Tagged Subtract, mod icc and trap on overflow

i_MULScc : alu_typ.             % Multiply step and modify icc

i_UMUL    = i_multiply_no_cc mul_unsigned32->64.  % U Int Mult
i_SMUL    = i_multiply_no_cc mul_signed32->64.    % S Int mult
i_UMULcc  = i_multiply_cc    mul_unsigned32->64.  % U Int Mult and w/ icc
i_SMULcc  = i_multiply_cc    mul_signed32->64.    % S Int mult w/ icc
i_UDIV    = i_divide_no_cc   div_unsigned64->32.  % U Int Div
i_SDIV    = i_divide_no_cc   div_signed64->32.    % S Int Div
i_UDIVcc  = i_divide_cc      div_unsigned64->32.  % U Int Div w/ icc
i_SDIVcc  = i_divide_cc      div_signed64->32.    % S Int Div w/ icc

i_SAVE    : alu_typ.                              % Save caller's window
i_RESTORE : alu_typ.                              % Restore caller's window

branch_typ = tnum -> tnum -> tm instr.

comp_btarget : tnum -> tnum -> tnum -> tform =
 [loc : tnum][disp : tnum][target : tnum]
  _exs_n2 [d1 : tnum][d2 : tnum] (sign_ext (const 21) disp d1) and
                                 (_times_mod32 four d1 d2) and
                                 (_plus_mod32 loc d2 target).

annul_instr : tregs -> tregs -> tform =
 [r : tregs][r' : tregs]
 _exists num [new_npc: tm num]
    _plus_mod32 (get_reg r npc) instr_size new_npc and
    updn2 r pc (get_ireg r npc) npc new_npc r'.

annul? : tnum -> tform = [x : tnum] (eqn x one).

branch_aux =
 [init_cond : tregs -> tform][get_cc : tregs -> tnum]
 [ba : tform][comp : tnum -> tform][a : tnum][disp : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (init_cond r) and
    (_exs_r [r''' : tregs]
     (if (app1_pred comp (get_cc r))
         (_exists2 num registers [target : tnum][r'' : tregs]
           (comp_btarget (get_ireg r opc) disp target) and
           (updn r npc target r'') and
           (if (ba and annul? a) (annul_instr r'' r''')
                                   (_eq_regs r'' r''')))
         (if (annul? a) (annul_instr r r''')
                          (_eq_regs r r'''))) and
     (if ba (_eq_regs r''' r')
            (set_cbr r''' r'))) and
    (_eq_mem m m').

i_init_cond = [r : tregs] not (cbr_in_progress? r).
f_init_cond = [r : tregs] not (cbr_in_progress? r) and
                          not (cmpfcc_in_progress? r).

i_ibranch : tform -> (tnum -> tform) -> branch_typ =
 branch_aux i_init_cond [r : tregs] (get_ireg r icc).

i_fbranch : tform -> (tnum -> tform) -> branch_typ =
 branch_aux f_init_cond [r : tregs] (get_ireg r fcc).

i_cbranch  : (tnum -> tform) -> branch_typ.

cnd_bn   = strictify_num false.
cnd_be   = [vcc : tnum] (icc_z vcc).
cnd_ble  = [vcc : tnum] (icc_z vcc) or ((icc_n vcc) xor (icc_v vcc)).
cnd_bl   = [vcc : tnum] (icc_n vcc) xor (icc_v vcc).
cnd_bleu = [vcc : tnum] (icc_c vcc) or (icc_z vcc).
cnd_bcs  = [vcc : tnum] (icc_c vcc).
cnd_bneg = [vcc : tnum] (icc_n vcc).
cnd_bvs  = [vcc : tnum] (icc_v vcc).
cnd_ba   = strictify_num true.
cnd_bne  = [vcc : tnum] not (icc_z vcc).
cnd_bg   = [vcc : tnum] not ((icc_z vcc) or ((icc_n vcc) xor (icc_v vcc))).
cnd_bge  = [vcc : tnum] not ((icc_n vcc) xor (icc_v vcc)).
cnd_bgu  = [vcc : tnum] not ((icc_c vcc) or (icc_z vcc)).
cnd_bcc  = [vcc : tnum] not (icc_c vcc).
cnd_bpos = [vcc : tnum] not (icc_n vcc).
cnd_bvc  = [vcc : tnum] not (icc_v vcc).

nrBranch = i_ibranch false.  % Normal branch i.e. not a ba
baBranch = i_ibranch true.   % A ba branch - annul behavior differs

i_BN   = nrBranch cnd_bn.    % Branch Never
i_BE   = nrBranch cnd_be.    % Branch on Equal
i_BLE  = nrBranch cnd_ble.   % Branch on Less or Equal
i_BL   = nrBranch cnd_bl.    % Branch on Less
i_BLEU = nrBranch cnd_bleu.  % Branch on Less or Equal Unsigned
i_BCS  = nrBranch cnd_bcs.   % Branch on Carry Set (Less than, Unsigned)
i_BNEG = nrBranch cnd_bneg.  % Branch on Negative
i_BVS  = nrBranch cnd_bvs.   % Branch on Overflow Set
i_BA   = baBranch cnd_ba.    % Branch Always - the annul behavior
                             % is different for this instruction
i_BNE  = nrBranch cnd_bne.   % Branch on Not Equal
i_BG   = nrBranch cnd_bg.    % Branch on Greater
i_BGE  = nrBranch cnd_bge.   % Branch on Greater or Equal
i_BGU  = nrBranch cnd_bgu.   % Branch on Greater Unsigned
i_BCC  = nrBranch cnd_bcc.   % Branch on Carry Clear (Greater or eq Unsigned)
i_BPOS = nrBranch cnd_bpos.  % Branch on Positive
i_BVC  = nrBranch cnd_bvc.   % Branch on Overflow Set

% Floating point
cnd_fbn   = strictify_num false.
cnd_fbne  = [fsr : tnum] (fcc_l fsr) or (fcc_g fsr) or (fcc_u fsr).
cnd_fblg  = [fsr : tnum] (fcc_l fsr) or (fcc_g fsr).
cnd_fbul  = [fsr : tnum] (fcc_l fsr) or (fcc_u fsr).
cnd_fbl   = [fsr : tnum] (fcc_l fsr).
cnd_fbug  = [fsr : tnum] (fcc_g fsr) or (fcc_u fsr).
cnd_fbg   = [fsr : tnum] (fcc_g fsr).
cnd_fbu   = [fsr : tnum] (fcc_u fsr).
cnd_fba   = strictify_num true.
cnd_fbe   = [fsr : tnum] (fcc_e fsr).
cnd_fbue  = [fsr : tnum] (fcc_u fsr) or (fcc_e fsr).
cnd_fbge  = [fsr : tnum] (fcc_e fsr) or (fcc_g fsr).
cnd_fbuge = [fsr : tnum] (fcc_e fsr) or (fcc_g fsr) or (fcc_u fsr).
cnd_fble  = [fsr : tnum] (fcc_l fsr) or (fcc_e fsr).
cnd_fbule = [fsr : tnum] (fcc_e fsr) or (fcc_l fsr) or (fcc_u fsr).
cnd_fbo   = [fsr : tnum] (fcc_e fsr) or (fcc_l fsr) or (fcc_g fsr).

f_nrBranch = i_fbranch false.    % Normal branch i.e. not a ba
f_baBranch = i_fbranch true.     % A ba branch - annul behavior differs

i_FBN   = f_nrBranch cnd_fbn.    % Branch Never
i_FBNE  = f_nrBranch cnd_fbne.   % Branch on Not Equal
i_FBLG  = f_nrBranch cnd_fblg.   % Branch on Less or Greater
i_FBUL  = f_nrBranch cnd_fbul.   % Branch on Unordered or Less
i_FBL   = f_nrBranch cnd_fbl.    % Branch on Less
i_FBUG  = f_nrBranch cnd_fbug.   % Branch on Unordered or Greater
i_FBG   = f_nrBranch cnd_fbg.    % Branch on Greater
i_FBU   = f_nrBranch cnd_fbu.    % Branch on Unordered
i_FBA   = f_baBranch cnd_fba.    % Branch Always -- the annul behavior
                                 % is different for this instruction
i_FBE   = f_nrBranch cnd_fbe.    % Branch on Equal
i_FBUE  = f_nrBranch cnd_fbue.   % Branch on Unordered or Equal
i_FBGE  = f_nrBranch cnd_fbge.   % Branch on Greater or Equal
i_FBUGE = f_nrBranch cnd_fbuge.  % Branch on Unordered or Greater or Equal
i_FBLE  = f_nrBranch cnd_fble.   % Branch on Less or Equal
i_FBULE = f_nrBranch cnd_fbule.  % Branch on Unordered or Less or Equal
i_FBO   = f_nrBranch cnd_fbo.    % Branch on Unordered

always_false = strictify_num false.

i_CBN    = i_cbranch always_false.
i_CB123  = i_cbranch always_false.
i_CB12   = i_cbranch always_false.
i_CB13   = i_cbranch always_false.
i_CB1    = i_cbranch always_false.
i_CB23   = i_cbranch always_false.
i_CB2    = i_cbranch always_false.
i_CB3    = i_cbranch always_false.
i_CBA    = i_cbranch always_false.
i_CB0    = i_cbranch always_false.
i_CB03   = i_cbranch always_false.
i_CB02   = i_cbranch always_false.
i_CB023  = i_cbranch always_false.
i_CB01   = i_cbranch always_false.
i_CB013  = i_cbranch always_false.
i_CB012  = i_cbranch always_false.

i_CALL = [disp : tnum]                            % Call and Link
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (not (cbr_in_progress? r)) and
   (updn2 r fifteen (get_ireg r opc) npc (times four disp) r') and
   (_eq_mem m m').

% Get a floating point value from the register bank
get_float32 = get_freg.
get_float64 = [r : tregs][fs2 : tnum]
 mk_float64 (get_freg r fs2) (get_freg r (succ fs2)).

get_float128 = [r : tregs][fs2 : tnum]
 mk_float128 (get_freg r fs2) (get_freg r (succ fs2))
             (get_freg r (plus fs2 two)) (get_freg r (plus fs2 three)).

% Update the floating point register, and declare
% that there was no memory change
upd_freg32_no_mem_change =
 [r : tregs][fd : tnum][v : flt32][r' : tregs][m : tmem][m' : tmem]
  (upd_freg r fd v r') and (_eq_mem m m').

% Update a 64 bit floating point registers, and declare
% that there was no memory change
upd_freg64_no_mem_change =
 [r : tregs][fd : tnum][v : flt64][r' : tregs][m : tmem][m' : tmem]
  (even? fd) and
  (_exs_n2 [v1 : tnum][v2 : tnum]
   (_eq o_flt64 v (mk_float64 v1 v2)) and
   (upd_freg2 r fd v1 (succ fd) v2 r')) and
  (_eq_mem m m').

% Update a 128 bit floating point registers, and declare
% that there was no memory change
upd_freg128_no_mem_change =
 [r : tregs][fd : tnum][v : flt128][r' : tregs][m : tmem][m' : tmem]
  (mult4? fd) and
  (_exs_n2 [v1 : tnum][v2 : tnum] _exs_n2 [v3 : tnum][v4 : tnum]
   (_eq o_flt128 v (mk_float128 v1 v2 v3 v4)) and
   (upd_freg4 r fd v1 (succ fd) v2 (plus fd two) v3 (plus fd three) v4 r')) and
  (_eq_mem m m').

% Unary floating point operations
float_unary_op_32 = float_unary_op o_flt32 true_fn get_float32.

float_unary_op_32->32  = float_unary_op_32 o_flt32  upd_freg32_no_mem_change.
float_unary_op_32->64  = float_unary_op_32 o_flt64  upd_freg64_no_mem_change.
float_unary_op_32->128 = float_unary_op_32 o_flt128 upd_freg128_no_mem_change.

float_unary_op_64 = float_unary_op o_flt64 even? get_float64.

float_unary_op_64->32  = float_unary_op_64 o_flt32 upd_freg32_no_mem_change.
float_unary_op_64->64  = float_unary_op_64 o_flt64 upd_freg64_no_mem_change.
float_unary_op_64->128 = float_unary_op_64 o_flt128 upd_freg128_no_mem_change.

float_unary_op_128 = float_unary_op o_flt128 mult4? get_float128.

float_unary_op_128->32 = float_unary_op_128 o_flt32 upd_freg32_no_mem_change.
float_unary_op_128->64 = float_unary_op_128 o_flt64 upd_freg64_no_mem_change.
float_unary_op_128->128 =
 float_unary_op_128 o_flt128 upd_freg128_no_mem_change.

i_FMOVs  = float_unary_op_32->32 (_eq o_flt32).     % Move
i_FNEGs  = float_unary_op_32->32 float32_neg.       % Negate
i_FABSs  = float_unary_op_32->32 float32_abs.       % Absolute Value
i_FSQRTs = float_unary_op_32->32 float32_sqrt.      % Square Root Single

i_FSQRTd = float_unary_op_64->64 float64_sqrt.      % Square Root Double
i_FSQRTq = float_unary_op_128->128 float128_sqrt.   % Square Root Quad

i_FiTOs = float_unary_op_32->32 int32->float32.     % Convert Integer to Single
i_FsTOi = float_unary_op_32->32 float32->int32.     % Convert Single to Integer

i_FiTOd = float_unary_op_32->64 int32->float64.     % Convert Integer to Double

i_FsTOd = float_unary_op_32->64 float32->float64.   % Convert Single to Double

i_FiTOq = float_unary_op_32->128 int32->float128.   % Convert Integer to Quad
i_FsTOq = float_unary_op_32->128 float32->float128. % Convert Single to Quad

i_FdTOi = float_unary_op_64->32 float64->int32.     % Convert Double to Integer
i_FdTOs = float_unary_op_64->32 float64->float32.   % Convert Double to Single

i_FqTOs = float_unary_op_128->32 float128->float32. % Convert Quad to Single
i_FqTOi = float_unary_op_128->32 float128->int32.   % Convert Quad to Integer

i_FqTOd = float_unary_op_128->64 float128->float64. % Convert Quad to Double
i_FdTOq = float_unary_op_64->128 float64->float128. % Convert Double to Quad

% Binary floating point operations
float_bin_op_32 = float_binary_op o_flt32 true_fn get_float32.

float_bin_op_32->32 = float_bin_op_32 o_flt32 upd_freg32_no_mem_change.
float_bin_op_32->64 = float_bin_op_32 o_flt64 upd_freg64_no_mem_change.

float_bin_op_64 = float_binary_op o_flt64 even? get_float64.

float_bin_op_64->64  = float_bin_op_64 o_flt64 upd_freg64_no_mem_change.
float_bin_op_64->128 = float_bin_op_64 o_flt128 upd_freg128_no_mem_change.

float_bin_op_128 = float_binary_op o_flt128 mult4? get_float128.
float_bin_op_128->128 = float_bin_op_128 o_flt128 upd_freg128_no_mem_change.

i_FADDs = float_bin_op_32->32 float32_add.     % Add Single
i_FSUBs = float_bin_op_32->32 float32_sub.     % Subtract Single
i_FMULs = float_bin_op_32->32 float32_mul.     % Multiply Single
i_FDIVs = float_bin_op_32->32 float32_div.     % Divide Single

i_FADDd = float_bin_op_64->64 float64_add.     % Add Double
i_FSUBd = float_bin_op_64->64 float64_sub.     % Subtract Double
i_FMULd = float_bin_op_64->64 float64_mul.     % Multiply Double
i_FDIVd = float_bin_op_64->64 float64_div.     % Divide Double

i_FADDq = float_bin_op_128->128 float128_add.  % Add Quad
i_FSUBq = float_bin_op_128->128 float128_sub.  % Subtract Quad
i_FMULq = float_bin_op_128->128 float128_mul.  % Multiply Quad
i_FDIVq = float_bin_op_128->128 float128_div.  % Divide Quad

i_FsMULd = float_bin_op_32->64  float32->64_mul.  % Multiply Single to Double
i_FdMULq = float_bin_op_64->128 float64->128_mul. % Multiply Double to Quad

% The Compare instructions.
f_compare =
 [T : tp]
 [getf : tregs -> tnum -> tm T][ceq : tm T -> tm T -> tform]
 [clt : tm T -> tm T -> tform][cgt : tm T -> tm T -> tform]
 [ex  : tform][fs1 : tnum][fs2 : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exists3 T T num [v1 : tm T][v2 : tm T][fccv : tnum] _exs_r [r'' : tregs]
     (_eq T v1 (app_get_t T getf r fs1)) and
     (_eq T v2 (app_get_t T getf r fs2)) and 
     (if (ceq v1 v2) (eqn fccv zero)
        (if (clt v1 v2) (eqn fccv one)
           (if (cgt v1 v2) (eqn fccv two)
              (eqn fccv three)))) and
     (not (ex and (eqn fccv three))) and
     (upd_fcc r fccv r'') and (set_cmpfcc r'' r')) and
    (_eq_mem m m').

f_compare32  = f_compare o_flt32 get_float32 float32_eq float32_lt float32_gt.
f_compare64  = f_compare o_flt64 get_float64 float64_eq float64_lt float64_gt.
f_compare128 = f_compare o_flt128 get_float128 float128_eq float128_lt
                                               float128_gt.

i_FCMPs  = f_compare32  false. % Compare Single
i_FCMPEs = f_compare32  true.  % Compare Single and Exception if Unordered
i_FCMPd  = f_compare64  false. % Compare Double
i_FCMPEd = f_compare64  true.  % Compare Double and Exception if Unordered
i_FCMPq  = f_compare128 false. % Compare Quad
i_FCMPEq = f_compare128 true.  % Compare Quad and Exception if Unordered

i_FLUSH : tm address_ -> tm instr.  % Flush Instruction Memory

i_JMPL = [addr : tm address_][rd : tnum]      % Jump and Link
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (not (cbr_in_progress? r)) and
   (_exs_n2 [target : tnum][offset : tnum]
    (load_address_align r addr target offset word_size) and
    (upd_ireg2 r rd (get_ireg r opc) npc target r')) and
   (_eq_mem m m').

i_RETT : tm address_ -> tm instr.  % Return from Trap

trap_oper = tnum.
tn   : trap_oper = const 0.
te   : trap_oper = const 1.
tle  : trap_oper = const 2.
tl   : trap_oper = const 3.
tleu : trap_oper = const 4.
tcs  : trap_oper = const 5.
tneg : trap_oper = const 6.
tvs  : trap_oper = const 7.
ta   : trap_oper = const 8.
tne  : trap_oper = const 9.
tg   : trap_oper = const 10.
tge  : trap_oper = const 11.
tgu  : trap_oper = const 12.
tcc  : trap_oper = const 13.
tpos : trap_oper = const 14.
tvc  : trap_oper = const 15.

trap : trap_oper -> tm address_ -> tm instr.

i_TN   = trap tn.    % Trap Never
i_TE   = trap te.    % Trap on Equal
i_TLE  = trap tle.   % Trap on Less or Equal
i_TL   = trap tl.    % Trap on Less
i_TLEU = trap tleu.  % Trap on Less or Equal Unsigned
i_TCS  = trap tcs.   % Trap on Carry Set (Less Than, Unsigned)
i_TNEG = trap tneg.  % Trap on Negative
i_TVS  = trap tvs.   % Trap on Overflow Set
i_TA   = trap ta.    % Trap Always
i_TNE  = trap tne.   % Trap on Not Equal
i_TG   = trap tg.    % Trap on Greater
i_TGE  = trap tge.   % Trap on Greater or Equal
i_TGU  = trap tgu.   % Trap on Greater Unsigned
i_TCC  = trap tcc.   % Trap on Carry Clear (Greater then or Equal, Unsigned)
i_TPOS = trap tpos.  % Trap on Positive
i_TVC  = trap tvc.   % Trap on Overflow Clear
                             % The unimplemented instruction
                             % used when returning a structure in a C program
i_UNIMP : tnum -> tm instr =   
 [imm : tnum] instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  app1_pred ([_ : tnum] false) imm.

i_SETHI =                          % Set High 22 bits of r Register
 [rd : tnum][val : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (upd_ireg r rd (times (const 1024) val) r') and (_eq_mem m m').

i_NOP = i_SETHI zero zero.
% Copyright (c) 2004 Princeton University
%	$Id: fields.elf,v 1.8 2004/04/22 10:49:20 appel Exp $

% 
% The encoding of the instruction fields.
% This is a machine generated file.  Do not edit!
% 
f_inst    : field_typ = _rbits 0 31.
f_op      : field_typ = _rbits 30 31.
f_disp30  : field_typ = _rbits 0 29.
f_rd      : field_typ = _rbits 25 29.
f_op2     : field_typ = _rbits 22 24.
f_imm22   : field_typ = _rbits 0 21.
f_a       : field_typ = _rbits 29 29.
f_cond    : field_typ = _rbits 25 28.
f_disp22  : field_typ = _rbits 0 21.
f_op3     : field_typ = _rbits 19 24.
f_rs1     : field_typ = _rbits 14 18.
f_i       : field_typ = _rbits 13 13.
f_asi     : field_typ = _rbits 5 12.
f_rs2     : field_typ = _rbits 0 4.
f_simm13  : field_typ = _rbits 0 12.
f_opf     : field_typ = _rbits 5 13.
f_fd      : field_typ = _rbits 25 29.
f_cd      : field_typ = _rbits 25 29.
f_fs1     : field_typ = _rbits 14 18.
f_fs2     : field_typ = _rbits 0 4.
f_rs1i    : field_typ = _rbits 14 18.
f_rdi     : field_typ = _rbits 25 29.
% Copyright (c) 2004 Princeton University
%	$Id: patterns.elf,v 1.9 2004/04/22 10:49:21 appel Exp $

% 
% The encoding of the instruction patterns.
% This is a machine generated file.  Do not edit!
% 

!!n : pat_typ -> pat_typ = _!! num.

p_TABLE_F2  : pat_typ = f_op (const 0).
p_CALL      : pat_typ = f_op (const 1).
p_TABLE_F3  : pat_typ = f_op (const 2).
p_TABLE_F4  : pat_typ = f_op (const 3).
p_UNIMP     : pat_typ = p_TABLE_F2 &&n f_op2 (const 0).
p_Bicc      : pat_typ = p_TABLE_F2 &&n f_op2 (const 2).
p_SETHI     : pat_typ = p_TABLE_F2 &&n f_op2 (const 4).
p_FBfcc     : pat_typ = p_TABLE_F2 &&n f_op2 (const 6).
p_CBccc     : pat_typ = p_TABLE_F2 &&n f_op2 (const 7).
p_ADD       : pat_typ = p_TABLE_F3 &&n f_op3 (const 0).
p_ADDcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 16).
p_TADDcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 32).
p_WRxxx     : pat_typ = p_TABLE_F3 &&n f_op3 (const 48).
p_AND       : pat_typ = p_TABLE_F3 &&n f_op3 (const 1).
p_ANDcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 17).
p_TSUBcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 33).
p_WRPSR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 49).
p_OR        : pat_typ = p_TABLE_F3 &&n f_op3 (const 2).
p_ORcc      : pat_typ = p_TABLE_F3 &&n f_op3 (const 18).
p_TADDccTV  : pat_typ = p_TABLE_F3 &&n f_op3 (const 34).
p_WRWIM     : pat_typ = p_TABLE_F3 &&n f_op3 (const 50).
p_XOR       : pat_typ = p_TABLE_F3 &&n f_op3 (const 3).
p_XORcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 19).
p_TSUBccTV  : pat_typ = p_TABLE_F3 &&n f_op3 (const 35).
p_WRTBR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 51).
p_SUB       : pat_typ = p_TABLE_F3 &&n f_op3 (const 4).
p_SUBcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 20).
p_MULScc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 36).
p_FPop1     : pat_typ = p_TABLE_F3 &&n f_op3 (const 52).
p_ANDN      : pat_typ = p_TABLE_F3 &&n f_op3 (const 5).
p_ANDNcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 21).
p_SLL       : pat_typ = p_TABLE_F3 &&n f_op3 (const 37).
p_FPop2     : pat_typ = p_TABLE_F3 &&n f_op3 (const 53).
p_ORN       : pat_typ = p_TABLE_F3 &&n f_op3 (const 6).
p_ORNcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 22).
p_SRL       : pat_typ = p_TABLE_F3 &&n f_op3 (const 38).
p_CPop1     : pat_typ = p_TABLE_F3 &&n f_op3 (const 54).
p_XNOR      : pat_typ = p_TABLE_F3 &&n f_op3 (const 7).
p_XNORcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 23).
p_SRA       : pat_typ = p_TABLE_F3 &&n f_op3 (const 39).
p_CPop2     : pat_typ = p_TABLE_F3 &&n f_op3 (const 55).
p_ADDX      : pat_typ = p_TABLE_F3 &&n f_op3 (const 8).
p_ADDXcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 24).
p_RDxxx     : pat_typ = p_TABLE_F3 &&n f_op3 (const 40).
p_JMPL      : pat_typ = p_TABLE_F3 &&n f_op3 (const 56).
p_RDPSR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 41).
p_RETT      : pat_typ = p_TABLE_F3 &&n f_op3 (const 57).
p_UMUL      : pat_typ = p_TABLE_F3 &&n f_op3 (const 10).
p_UMULcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 26).
p_RDWIM     : pat_typ = p_TABLE_F3 &&n f_op3 (const 42).
p_Ticc      : pat_typ = p_TABLE_F3 &&n f_op3 (const 58).
p_SMUL      : pat_typ = p_TABLE_F3 &&n f_op3 (const 11).
p_SMULcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 27).
p_RDTBR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 43).
p_FLUSH     : pat_typ = p_TABLE_F3 &&n f_op3 (const 59).
p_SUBX      : pat_typ = p_TABLE_F3 &&n f_op3 (const 12).
p_SUBXcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 28).
p_SAVE      : pat_typ = p_TABLE_F3 &&n f_op3 (const 60).
p_RESTORE   : pat_typ = p_TABLE_F3 &&n f_op3 (const 61).
p_UDIV      : pat_typ = p_TABLE_F3 &&n f_op3 (const 14).
p_UDIVcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 30).
p_SDIV      : pat_typ = p_TABLE_F3 &&n f_op3 (const 15).
p_SDIVcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 31).
p_WRASR     : pat_typ = p_WRxxx &&n !!n (f_rd (const 0)).
p_WRY       : pat_typ = p_WRxxx &&n f_rd (const 0).
p_RDASR     : pat_typ = p_RDxxx &&n !!n (f_rs1 (const 0)) &&n !!n (f_rd (const 0)).
p_RDY       : pat_typ = p_RDxxx &&n f_rs1 (const 0).
p_STBAR     : pat_typ = p_RDxxx &&n f_rs1 (const 15) &&n f_rd (const 0).
p_LD        : pat_typ = p_TABLE_F4 &&n f_op3 (const 0).
p_LDA       : pat_typ = p_TABLE_F4 &&n f_op3 (const 16).
p_LDF       : pat_typ = p_TABLE_F4 &&n f_op3 (const 32).
p_LDC       : pat_typ = p_TABLE_F4 &&n f_op3 (const 48).
p_LDUB      : pat_typ = p_TABLE_F4 &&n f_op3 (const 1).
p_LDUBA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 17).
p_LDFSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 33).
p_LDCSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 49).
p_LDUH      : pat_typ = p_TABLE_F4 &&n f_op3 (const 2).
p_LDUHA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 18).
p_LDD       : pat_typ = p_TABLE_F4 &&n f_op3 (const 3).
p_LDDA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 19).
p_LDDF      : pat_typ = p_TABLE_F4 &&n f_op3 (const 35).
p_LDDC      : pat_typ = p_TABLE_F4 &&n f_op3 (const 51).
p_ST        : pat_typ = p_TABLE_F4 &&n f_op3 (const 4).
p_STA       : pat_typ = p_TABLE_F4 &&n f_op3 (const 20).
p_STF       : pat_typ = p_TABLE_F4 &&n f_op3 (const 36).
p_STC       : pat_typ = p_TABLE_F4 &&n f_op3 (const 52).
p_STB       : pat_typ = p_TABLE_F4 &&n f_op3 (const 5).
p_STBA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 21).
p_STFSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 37).
p_STCSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 53).
p_STH       : pat_typ = p_TABLE_F4 &&n f_op3 (const 6).
p_STHA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 22).
p_STDFQ     : pat_typ = p_TABLE_F4 &&n f_op3 (const 38).
p_STDCQ     : pat_typ = p_TABLE_F4 &&n f_op3 (const 54).
p_STD       : pat_typ = p_TABLE_F4 &&n f_op3 (const 7).
p_STDA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 23).
p_STDF      : pat_typ = p_TABLE_F4 &&n f_op3 (const 39).
p_STDC      : pat_typ = p_TABLE_F4 &&n f_op3 (const 55).
p_LDSB      : pat_typ = p_TABLE_F4 &&n f_op3 (const 9).
p_LDSBA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 25).
p_LDSH      : pat_typ = p_TABLE_F4 &&n f_op3 (const 10).
p_LDSHA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 26).
p_LDSTUB    : pat_typ = p_TABLE_F4 &&n f_op3 (const 13).
p_LDSTUBA   : pat_typ = p_TABLE_F4 &&n f_op3 (const 29).
p_SWAP_DOT  : pat_typ = p_TABLE_F4 &&n f_op3 (const 15).
p_SWAPA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 31).
p_FMOVs     : pat_typ = p_FPop1 &&n f_opf (const 1).
p_FNEGs     : pat_typ = p_FPop1 &&n f_opf (const 5).
p_FABSs     : pat_typ = p_FPop1 &&n f_opf (const 9).
p_FSQRTs    : pat_typ = p_FPop1 &&n f_opf (const 41).
p_FSQRTd    : pat_typ = p_FPop1 &&n f_opf (const 42).
p_FSQRTq    : pat_typ = p_FPop1 &&n f_opf (const 43).
p_FiTOs     : pat_typ = p_FPop1 &&n f_opf (const 196).
p_FdTOs     : pat_typ = p_FPop1 &&n f_opf (const 198).
p_FqTOs     : pat_typ = p_FPop1 &&n f_opf (const 199).
p_FiTOd     : pat_typ = p_FPop1 &&n f_opf (const 200).
p_FsTOd     : pat_typ = p_FPop1 &&n f_opf (const 201).
p_FqTOd     : pat_typ = p_FPop1 &&n f_opf (const 203).
p_FiTOq     : pat_typ = p_FPop1 &&n f_opf (const 204).
p_FsTOq     : pat_typ = p_FPop1 &&n f_opf (const 205).
p_FdTOq     : pat_typ = p_FPop1 &&n f_opf (const 206).
p_FsTOi     : pat_typ = p_FPop1 &&n f_opf (const 209).
p_FdTOi     : pat_typ = p_FPop1 &&n f_opf (const 210).
p_FqTOi     : pat_typ = p_FPop1 &&n f_opf (const 211).
p_FADDs     : pat_typ = p_FPop1 &&n f_opf (const 65).
p_FADDd     : pat_typ = p_FPop1 &&n f_opf (const 66).
p_FADDq     : pat_typ = p_FPop1 &&n f_opf (const 67).
p_FSUBs     : pat_typ = p_FPop1 &&n f_opf (const 69).
p_FSUBd     : pat_typ = p_FPop1 &&n f_opf (const 70).
p_FSUBq     : pat_typ = p_FPop1 &&n f_opf (const 71).
p_FMULs     : pat_typ = p_FPop1 &&n f_opf (const 73).
p_FMULd     : pat_typ = p_FPop1 &&n f_opf (const 74).
p_FMULq     : pat_typ = p_FPop1 &&n f_opf (const 75).
p_FDIVs     : pat_typ = p_FPop1 &&n f_opf (const 77).
p_FDIVd     : pat_typ = p_FPop1 &&n f_opf (const 78).
p_FDIVq     : pat_typ = p_FPop1 &&n f_opf (const 79).
p_FsMULd    : pat_typ = p_FPop1 &&n f_opf (const 105).
p_FdMULq    : pat_typ = p_FPop1 &&n f_opf (const 110).
p_FCMPs     : pat_typ = p_FPop2 &&n f_opf (const 81).
p_FCMPEs    : pat_typ = p_FPop2 &&n f_opf (const 85).
p_FCMPd     : pat_typ = p_FPop2 &&n f_opf (const 82).
p_FCMPEd    : pat_typ = p_FPop2 &&n f_opf (const 86).
p_FCMPq     : pat_typ = p_FPop2 &&n f_opf (const 83).
p_FCMPEq    : pat_typ = p_FPop2 &&n f_opf (const 87).
p_BN        : pat_typ = p_Bicc &&n f_cond (const 0).
p_BE        : pat_typ = p_Bicc &&n f_cond (const 1).
p_BLE       : pat_typ = p_Bicc &&n f_cond (const 2).
p_BL        : pat_typ = p_Bicc &&n f_cond (const 3).
p_BLEU      : pat_typ = p_Bicc &&n f_cond (const 4).
p_BCS       : pat_typ = p_Bicc &&n f_cond (const 5).
p_BNEG      : pat_typ = p_Bicc &&n f_cond (const 6).
p_BVS       : pat_typ = p_Bicc &&n f_cond (const 7).
p_BA        : pat_typ = p_Bicc &&n f_cond (const 8).
p_BNE       : pat_typ = p_Bicc &&n f_cond (const 9).
p_BG        : pat_typ = p_Bicc &&n f_cond (const 10).
p_BGE       : pat_typ = p_Bicc &&n f_cond (const 11).
p_BGU       : pat_typ = p_Bicc &&n f_cond (const 12).
p_BCC       : pat_typ = p_Bicc &&n f_cond (const 13).
p_BPOS      : pat_typ = p_Bicc &&n f_cond (const 14).
p_BVC       : pat_typ = p_Bicc &&n f_cond (const 15).
p_FBN       : pat_typ = p_FBfcc &&n f_cond (const 0).
p_FBNE      : pat_typ = p_FBfcc &&n f_cond (const 1).
p_FBLG      : pat_typ = p_FBfcc &&n f_cond (const 2).
p_FBUL      : pat_typ = p_FBfcc &&n f_cond (const 3).
p_FBL       : pat_typ = p_FBfcc &&n f_cond (const 4).
p_FBUG      : pat_typ = p_FBfcc &&n f_cond (const 5).
p_FBG       : pat_typ = p_FBfcc &&n f_cond (const 6).
p_FBU       : pat_typ = p_FBfcc &&n f_cond (const 7).
p_FBA       : pat_typ = p_FBfcc &&n f_cond (const 8).
p_FBE       : pat_typ = p_FBfcc &&n f_cond (const 9).
p_FBUE      : pat_typ = p_FBfcc &&n f_cond (const 10).
p_FBGE      : pat_typ = p_FBfcc &&n f_cond (const 11).
p_FBUGE     : pat_typ = p_FBfcc &&n f_cond (const 12).
p_FBLE      : pat_typ = p_FBfcc &&n f_cond (const 13).
p_FBULE     : pat_typ = p_FBfcc &&n f_cond (const 14).
p_FBO       : pat_typ = p_FBfcc &&n f_cond (const 15).
p_CBN       : pat_typ = p_CBccc &&n f_cond (const 0).
p_CB123     : pat_typ = p_CBccc &&n f_cond (const 1).
p_CB12      : pat_typ = p_CBccc &&n f_cond (const 2).
p_CB13      : pat_typ = p_CBccc &&n f_cond (const 3).
p_CB1       : pat_typ = p_CBccc &&n f_cond (const 4).
p_CB23      : pat_typ = p_CBccc &&n f_cond (const 5).
p_CB2       : pat_typ = p_CBccc &&n f_cond (const 6).
p_CB3       : pat_typ = p_CBccc &&n f_cond (const 7).
p_CBA       : pat_typ = p_CBccc &&n f_cond (const 8).
p_CB0       : pat_typ = p_CBccc &&n f_cond (const 9).
p_CB03      : pat_typ = p_CBccc &&n f_cond (const 10).
p_CB02      : pat_typ = p_CBccc &&n f_cond (const 11).
p_CB023     : pat_typ = p_CBccc &&n f_cond (const 12).
p_CB01      : pat_typ = p_CBccc &&n f_cond (const 13).
p_CB013     : pat_typ = p_CBccc &&n f_cond (const 14).
p_CB012     : pat_typ = p_CBccc &&n f_cond (const 15).
p_TN        : pat_typ = p_Ticc &&n f_cond (const 0).
p_TE        : pat_typ = p_Ticc &&n f_cond (const 1).
p_TLE       : pat_typ = p_Ticc &&n f_cond (const 2).
p_TL        : pat_typ = p_Ticc &&n f_cond (const 3).
p_TLEU      : pat_typ = p_Ticc &&n f_cond (const 4).
p_TCS       : pat_typ = p_Ticc &&n f_cond (const 5).
p_TNEG      : pat_typ = p_Ticc &&n f_cond (const 6).
p_TVS       : pat_typ = p_Ticc &&n f_cond (const 7).
p_TA        : pat_typ = p_Ticc &&n f_cond (const 8).
p_TNE       : pat_typ = p_Ticc &&n f_cond (const 9).
p_TG        : pat_typ = p_Ticc &&n f_cond (const 10).
p_TGE       : pat_typ = p_Ticc &&n f_cond (const 11).
p_TGU       : pat_typ = p_Ticc &&n f_cond (const 12).
p_TCC       : pat_typ = p_Ticc &&n f_cond (const 13).
p_TPOS      : pat_typ = p_Ticc &&n f_cond (const 14).
p_TVC       : pat_typ = p_Ticc &&n f_cond (const 15).
% Copyright (c) 2004 Princeton University
%	$Id: oper_selectors.elf,v 1.7 2004/04/22 10:49:20 appel Exp $

% 
% The encoding of the instruction operator selectors.
% This is a machine generated file.  Do not edit!
% 
||2_r :
 (tm reg_or_imm -> tm num -> tform) -> (tm reg_or_imm -> tm num -> tform)
  -> tm reg_or_imm -> tm num -> tform = _||2 reg_or_imm num.

sel_imode : tm reg_or_imm -> tnum -> tform =
    fld1 reg_or_imm num f_simm13 (f_i (const 1)) inj_imode.

% sel_imode : tm reg_or_imm -> tnum -> tform =
%   [obj : tm reg_or_imm][word : tnum]
%     f_i (const 1) word and
%     _exs_n [g1200 : tnum] f_simm13 g1200 word and
%                           _eq reg_or_imm obj (inj_imode g1200).

sel_rmode : tm reg_or_imm -> tnum -> tform =
   fld1 reg_or_imm num f_rs2 (f_i (const 0)) inj_rmode.

% sel_rmode : tm reg_or_imm -> tnum -> tform =
%   [obj : tm reg_or_imm][word : tnum]
%    f_i (const 0) word and
%    _exs_n [g1201 : tnum] f_rs2 g1201 word and
%                          _eq reg_or_imm obj (inj_rmode g1201).

oper_reg_or_imm : tm reg_or_imm -> tnum -> tform =
  ||2_r sel_imode sel_rmode.

sel_generalA : tm address_ -> tnum -> tform =
   fld2 address_ num reg_or_imm f_rs1 oper_reg_or_imm true_fn inj_generalA.

% sel_generalA : tm address_ -> tnum -> tform =
%   [obj : tm address_][word : tnum]
%     _exists2 num reg_or_imm [g1202 : tnum][g1203 : tm reg_or_imm]
%      (f_rs1 g1202 &&n oper_reg_or_imm g1203) word and
%      _eq address_ obj (inj_generalA g1202 g1203).

oper_address_ : tm address_ -> tnum -> tform =
 [obj : tm address_][word : tnum] sel_generalA obj word.

sel_indexR : tm regaddr -> tnum -> tform =
   fld2 regaddr num num f_rs1 f_rs2 (f_i (const 0)) inj_indexR.

%  [obj : tm regaddr][word : tnum]
%    f_i (const 0) word and
%    _exs_n2 [g1204 : tnum][g1205 : tnum]
%     (f_rs1 g1204 &&n f_rs2 g1205) word and
%     _eq regaddr obj (inj_indexR g1204 g1205).

oper_regaddr : tm regaddr -> tnum -> tform =
 [obj : tm regaddr][word : tnum] sel_indexR obj word.

% Copyright (c) 2004 Princeton University
%	$Id: instructions.elf,v 1.15 2004/04/22 10:49:20 appel Exp $

% 
% The encoding of the instructions.
% This is a machine generated file.  Do not edit!
% 
aux_loadg = fld2 instr address_ num oper_address_ f_rd.

ins_loadg =
  aux_loadg p_LDSB i_LDSB ||2n aux_loadg p_LDSH i_LDSH ||2n
  aux_loadg p_LDUB i_LDUB ||2n aux_loadg p_LDUH i_LDUH ||2n
  aux_loadg p_LD i_LD ||2n aux_loadg p_LDSTUB i_LDSTUB ||2n
  aux_loadg p_SWAP_DOT i_SWAP_DOT ||2n
  aux_loadg p_LDFSR i_LDFSR ||2n aux_loadg p_LDCSR i_LDCSR.

ins_LDD = fld2 instr address_ num oper_address_ f_rd p_LDD i_LDD.

ins_LDF = fld2 instr address_ num oper_address_ f_fd p_LDF i_LDF.

ins_LDDF = fld2 instr address_ num oper_address_ f_fd p_LDDF i_LDDF.

ins_LDC = fld2 instr address_ num oper_address_ f_cd p_LDC i_LDC.

ins_LDDC = fld2 instr address_ num oper_address_ f_cd p_LDDC i_LDDC.

aux_storeg = fld2 instr num address_ f_rd oper_address_.

ins_storeg =
  aux_storeg p_STB i_STB ||2n aux_storeg p_STH i_STH ||2n
  aux_storeg p_ST i_ST ||2n aux_storeg p_STFSR i_STFSR ||2n
  aux_storeg p_STCSR i_STCSR ||2n aux_storeg p_STDFQ i_STDFQ ||2n
  aux_storeg p_STDCQ i_STDCQ.

ins_STD = fld2 instr num address_ f_rd oper_address_ p_STD i_STD.

ins_STF = fld2 instr num address_ f_fd oper_address_ p_STF i_STF.

ins_STDF = fld2 instr num address_ f_fd oper_address_ p_STDF i_STDF.

ins_STC = fld2 instr num address_ f_cd oper_address_ p_STC i_STC.

ins_STDC = fld2 instr num address_ f_cd oper_address_ p_STDC i_STDC.

aux_loada = fld3 instr address_ num num oper_regaddr f_asi f_rd.

ins_loada =
  aux_loada p_LDSBA i_LDSBA ||2n aux_loada p_LDSHA i_LDSHA ||2n
  aux_loada p_LDUBA i_LDUBA ||2n aux_loada p_LDUHA i_LDUHA ||2n
  aux_loada p_LDA i_LDA ||2n aux_loada p_LDSTUBA i_LDSTUBA ||2n
  aux_loada p_SWAPA i_SWAPA.

ins_LDDA = fld3 instr address_ num num oper_regaddr f_asi f_rd p_LDDA i_LDDA.

aux_storea = fld3 instr num address_ num f_rd oper_regaddr f_asi.

ins_storea =
  aux_storea p_STBA i_STBA ||2n aux_storea p_STHA i_STHA ||2n
  aux_storea p_STA i_STA.

ins_STDA = fld3 instr num address_ num f_rd oper_regaddr f_asi p_STDA i_STDA.

ins_LDFSR = aux_loadg p_LDFSR i_LDFSR.

ins_LDCSR = aux_loadg p_LDCSR i_LDCSR.

ins_STFSR = aux_storeg p_STFSR i_STFSR.

ins_STCSR = aux_storeg p_STCSR i_STCSR.

ins_STDFQ = aux_storeg p_STDFQ i_STDFQ.

ins_STDCQ = aux_storeg p_STDCQ i_STDCQ.

ins_RDY = fld1 instr num f_rd p_RDY i_RDY.

ins_RDPSR = fld1 instr num f_rd p_RDPSR i_RDPSR.

ins_RDWIM = fld1 instr num f_rd p_RDWIM i_RDWIM.

ins_RDTBR = fld1 instr num f_rd p_RDTBR i_RDTBR.

ins_WRY = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRY i_WRY.

ins_WRPSR = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRPSR i_WRPSR.

ins_WRWIM = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRWIM i_WRWIM.

ins_WRTBR = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRTBR i_WRTBR.

ins_RDASR = fld2 instr num num f_rs1 f_rd p_RDASR i_RDASR.

ins_WRASR = fld3 instr num reg_or_imm num f_rs1 oper_reg_or_imm f_rd p_WRASR i_WRASR.

ins_STBAR = fld0 instr p_STBAR i_STBAR.

aux_alu = fld3 instr num reg_or_imm num f_rs1 oper_reg_or_imm f_rd.

ins_alu =
  aux_alu p_AND i_AND ||2n aux_alu p_ANDcc i_ANDcc ||2n
  aux_alu p_ANDN i_ANDN ||2n aux_alu p_ANDNcc i_ANDNcc ||2n
  aux_alu p_OR i_OR ||2n aux_alu p_ORcc i_ORcc ||2n
  aux_alu p_ORN i_ORN ||2n aux_alu p_ORNcc i_ORNcc ||2n
  aux_alu p_XOR i_XOR ||2n aux_alu p_XORcc i_XORcc ||2n
  aux_alu p_XNOR i_XNOR ||2n aux_alu p_XNORcc i_XNORcc ||2n
  aux_alu p_SLL i_SLL ||2n aux_alu p_SRL i_SRL ||2n
  aux_alu p_SRA i_SRA ||2n aux_alu p_ADD i_ADD ||2n
  aux_alu p_ADDcc i_ADDcc ||2n aux_alu p_ADDX i_ADDX ||2n
  aux_alu p_ADDXcc i_ADDXcc ||2n aux_alu p_TADDcc i_TADDcc ||2n
  aux_alu p_TADDccTV i_TADDccTV ||2n aux_alu p_SUB i_SUB ||2n
  aux_alu p_SUBcc i_SUBcc ||2n aux_alu p_SUBX i_SUBX ||2n
  aux_alu p_SUBXcc i_SUBXcc ||2n aux_alu p_TSUBcc i_TSUBcc ||2n
  aux_alu p_TSUBccTV i_TSUBccTV ||2n aux_alu p_MULScc i_MULScc ||2n
  aux_alu p_UMUL i_UMUL ||2n aux_alu p_SMUL i_SMUL ||2n
  aux_alu p_UMULcc i_UMULcc ||2n aux_alu p_SMULcc i_SMULcc ||2n
  aux_alu p_UDIV i_UDIV ||2n aux_alu p_SDIV i_SDIV ||2n
  aux_alu p_UDIVcc i_UDIVcc ||2n aux_alu p_SDIVcc i_SDIVcc ||2n
  aux_alu p_SAVE i_SAVE ||2n aux_alu p_RESTORE i_RESTORE.

aux_branch = fld2 instr num num f_a f_disp22.

ins_branch =
  aux_branch p_BN i_BN ||2n aux_branch p_BE i_BE ||2n
  aux_branch p_BLE i_BLE ||2n aux_branch p_BL i_BL ||2n
  aux_branch p_BLEU i_BLEU ||2n aux_branch p_BCS i_BCS ||2n
  aux_branch p_BNEG i_BNEG ||2n aux_branch p_BVS i_BVS ||2n
  aux_branch p_BA i_BA ||2n aux_branch p_BNE i_BNE ||2n
  aux_branch p_BG i_BG ||2n aux_branch p_BGE i_BGE ||2n
  aux_branch p_BGU i_BGU ||2n aux_branch p_BCC i_BCC ||2n
  aux_branch p_BPOS i_BPOS ||2n aux_branch p_BVC i_BVC ||2n
  aux_branch p_FBN i_FBN ||2n aux_branch p_FBNE i_FBNE ||2n
  aux_branch p_FBLG i_FBLG ||2n aux_branch p_FBUL i_FBUL ||2n
  aux_branch p_FBL i_FBL ||2n aux_branch p_FBUG i_FBUG ||2n
  aux_branch p_FBG i_FBG ||2n aux_branch p_FBU i_FBU ||2n
  aux_branch p_FBA i_FBA ||2n aux_branch p_FBE i_FBE ||2n
  aux_branch p_FBUE i_FBUE ||2n aux_branch p_FBGE i_FBGE ||2n
  aux_branch p_FBUGE i_FBUGE ||2n aux_branch p_FBLE i_FBLE ||2n
  aux_branch p_FBULE i_FBULE ||2n aux_branch p_FBO i_FBO ||2n
  aux_branch p_CBN i_CBN ||2n aux_branch p_CB123 i_CB123 ||2n
  aux_branch p_CB12 i_CB12 ||2n aux_branch p_CB13 i_CB13 ||2n
  aux_branch p_CB1 i_CB1 ||2n aux_branch p_CB23 i_CB23 ||2n
  aux_branch p_CB2 i_CB2 ||2n aux_branch p_CB3 i_CB3 ||2n
  aux_branch p_CBA i_CBA ||2n aux_branch p_CB0 i_CB0 ||2n
  aux_branch p_CB03 i_CB03 ||2n aux_branch p_CB02 i_CB02 ||2n
  aux_branch p_CB023 i_CB023 ||2n aux_branch p_CB01 i_CB01 ||2n
  aux_branch p_CB013 i_CB013 ||2n aux_branch p_CB012 i_CB012.

ins_CALL = fld1 instr num f_disp30 p_CALL i_CALL.

aux_float2s = fld2 instr num num f_fs2 f_fd.

ins_float2s =
  aux_float2s p_FMOVs i_FMOVs ||2n aux_float2s p_FNEGs i_FNEGs ||2n
  aux_float2s p_FABSs i_FABSs ||2n aux_float2s p_FSQRTs i_FSQRTs.

ins_FSQRTd = fld2 instr num num f_fs2 f_fd p_FSQRTd i_FSQRTd.

ins_FSQRTq = fld2 instr num num f_fs2 f_fd p_FSQRTq i_FSQRTq.

aux_FTOs = fld2 instr num num f_fs2 f_fd.

ins_FTOs = aux_FTOs p_FiTOs i_FiTOs ||2n aux_FTOs p_FsTOi i_FsTOi.

aux_FTOd = fld2 instr num num f_fs2 f_fd.

ins_FTOd = aux_FTOd p_FiTOd i_FiTOd ||2n aux_FTOd p_FsTOd i_FsTOd.

aux_FTOq = fld2 instr num num f_fs2 f_fd.

ins_FTOq = aux_FTOq p_FiTOq i_FiTOq ||2n aux_FTOq p_FsTOq i_FsTOq.

aux_FdTO = fld2 instr num num f_fs2 f_fd.

ins_FdTO = aux_FdTO p_FdTOi i_FdTOi ||2n aux_FdTO p_FdTOs i_FdTOs.

aux_FqTO = fld2 instr num num f_fs2 f_fd.

ins_FqTO = aux_FqTO p_FqTOs i_FqTOs ||2n aux_FqTO p_FqTOi i_FqTOi.

ins_FqTOd = fld2 instr num num f_fs2 f_fd p_FqTOd i_FqTOd.

ins_FdTOq = fld2 instr num num f_fs2 f_fd p_FdTOq i_FdTOq.

aux_float3s = fld3 instr num num num f_fs1 f_fs2 f_fd.

ins_float3s =
  aux_float3s p_FADDs i_FADDs ||2n aux_float3s p_FSUBs i_FSUBs ||2n
  aux_float3s p_FMULs i_FMULs ||2n aux_float3s p_FDIVs i_FDIVs.

aux_float3d = fld3 instr num num num f_fs1 f_fs2 f_fd.

ins_float3d =
  aux_float3d p_FADDd i_FADDd ||2n aux_float3d p_FSUBd i_FSUBd ||2n
  aux_float3d p_FMULd i_FMULd ||2n aux_float3d p_FDIVd i_FDIVd.

aux_float3q = fld3 instr num num num f_fs1 f_fs2 f_fd.

ins_float3q =
  aux_float3q p_FADDq i_FADDq ||2n aux_float3q p_FSUBq i_FSUBq ||2n
  aux_float3q p_FMULq i_FMULq ||2n aux_float3q p_FDIVq i_FDIVq.

ins_FsMULd = fld3 instr num num num f_fs1 f_fs2 f_fd p_FsMULd i_FsMULd.

ins_FdMULq = fld3 instr num num num f_fs1 f_fs2 f_fd p_FdMULq i_FdMULq.

aux_fcompares = fld2 instr num num f_fs1 f_fs2.

ins_fcompares =
  aux_fcompares p_FCMPs i_FCMPs ||2n aux_fcompares p_FCMPEs i_FCMPEs.

aux_fcompared = fld2 instr num num f_fs1 f_fs2.

ins_fcompared =
  aux_fcompared p_FCMPd i_FCMPd ||2n aux_fcompared p_FCMPEd i_FCMPEd.

aux_fcompareq = fld2 instr num num f_fs1 f_fs2.

ins_fcompareq =
  aux_fcompareq p_FCMPq i_FCMPq ||2n aux_fcompareq p_FCMPEq i_FCMPEq.

ins_FLUSH = fld1 instr address_ oper_address_ p_FLUSH i_FLUSH.

ins_JMPL = fld2 instr address_ num oper_address_ f_rd p_JMPL i_JMPL.

ins_RETT = fld1 instr address_ oper_address_ p_RETT i_RETT.

aux_trap = fld1 instr address_ oper_address_.

ins_trap =
  aux_trap p_TN i_TN ||2n aux_trap p_TE i_TE ||2n
  aux_trap p_TLE i_TLE ||2n aux_trap p_TL i_TL ||2n
  aux_trap p_TLEU i_TLEU ||2n aux_trap p_TCS i_TCS ||2n
  aux_trap p_TNEG i_TNEG ||2n aux_trap p_TVS i_TVS ||2n
  aux_trap p_TA i_TA ||2n aux_trap p_TNE i_TNE ||2n
  aux_trap p_TG i_TG ||2n aux_trap p_TGE i_TGE ||2n
  aux_trap p_TGU i_TGU ||2n aux_trap p_TCC i_TCC ||2n
  aux_trap p_TPOS i_TPOS ||2n aux_trap p_TVC i_TVC.

ins_UNIMP = fld1 instr num f_imm22 p_UNIMP i_UNIMP.

ins_SETHI = fld2 instr num num f_rd f_imm22 p_SETHI i_SETHI.

instruction =
 ins_loadg ||2n ins_LDD ||2n ins_LDF ||2n ins_LDDF ||2n ins_LDC ||2n
 ins_LDDC ||2n ins_storeg ||2n ins_STD ||2n ins_STF ||2n ins_STDF ||2n
 ins_STC ||2n ins_STDC ||2n ins_loada ||2n ins_LDDA ||2n ins_storea ||2n
 ins_STDA ||2n ins_RDY ||2n ins_RDPSR ||2n ins_RDWIM ||2n
 ins_RDTBR ||2n ins_WRY ||2n ins_WRPSR ||2n ins_WRWIM ||2n ins_WRTBR ||2n
% ins_RDASR ||2n ins_WRASR ||2n
 ins_STBAR ||2n ins_alu ||2n ins_branch ||2n
 ins_CALL ||2n ins_float2s ||2n ins_FSQRTd ||2n ins_FSQRTq ||2n ins_FTOs ||2n
 ins_FTOd ||2n ins_FTOq ||2n ins_FdTO ||2n ins_FqTO ||2n ins_FqTOd ||2n
 ins_FdTOq ||2n ins_float3s ||2n ins_float3d ||2n ins_float3q ||2n
 ins_FsMULd ||2n ins_FdMULq ||2n ins_fcompares ||2n ins_fcompared ||2n
 ins_fcompareq ||2n
 ins_FLUSH ||2n ins_JMPL ||2n ins_RETT ||2n
 ins_trap ||2n ins_UNIMP ||2n ins_SETHI.
% Copyright (c) 2004 Princeton University
%	$Id: step.elf,v 1.25 2004/04/22 10:49:21 appel Exp $

% Instruction Semantics for the sparc V8 machine.

genpc = tuple4 num num num num.                 % opc, pc, npc, icnt

_mk_gen_pc = _mktuple4 num num num num.
_get_opc   : tm genpc -> tnum = _get1of4 num num num num.
_get_pc    : tm genpc -> tnum = _get2of4 num num num num.
_get_npc   : tm genpc -> tnum = _get3of4 num num num num.
_get_icnt  : tm genpc -> tnum = _get4of4 num num num num.

% Change the genpc as if a nonjump instruction of size "num" executes
_nextpc : tnum -> tm genpc -> tm genpc =
 [n : tnum][g : tm genpc] _mk_gen_pc (_get_pc g) (_get_npc g)
                           (plus (_get_npc g) n) (succ (_get_icnt g)).

% Change the program counter as if a jump to "n" instruction executes
_nextpc_jmp = [n: tnum][g: tm genpc]
  _mk_gen_pc (_get_opc g) (_get_pc g) n (_get_icnt g).

% Some genpc's will continue
% execution in a straight line as long as no branch occurs.
% These relate to some location via the "normalpc" relation.
% Other genpc's have a latent branch about to occur; these
% relate to no single location.
_normalpc = [g : tm genpc][n : tnum]
  _exists num  [n+4:tm num]
    _is_word n and _modulo n word_size zero
    and _plus_mod32 n word_size n+4
    and eqn (_get_pc g) n and eqn (_get_npc g) n+4.

% The next location to fetch an instruction.
_nextinstr : tm genpc -> tnum = _get_pc.

% A generalized version of control_at.
_gen_control_at : tm genpc -> tregs -> tform =
 [g : tm genpc][r : tregs]
 eqn (get_reg r opc) (_get_opc g) and eqn (get_reg r pc) (_get_pc g) and
 eqn (get_reg r npc) (_get_npc g) and eqn (get_reg r icnt) (_get_icnt g).

% Modify the state r,m by setting the program counter to genpc
_setpc : tm genpc -> tm instr =
 [g : tm genpc] instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  _upd4 num num r opc (_get_opc g) pc (_get_pc g) npc (_get_npc g)
                  icnt (_get_icnt g) r' and _eq_mem m m'.

% Modify the state r,m by setting program counter to genpc
% and also update the count of the number of instructions executed
_updatepc : tm (registers arrow registers arrow form) =
 _lam2 registers registers form [r : tregs][r' : tregs]
   _exists num [new_npc: tm num]
      _plus_mod32 (get_reg r npc) four new_npc and
      _upd4 num num r opc (get_reg r pc) pc (get_reg r npc)
                      npc new_npc icnt (succ (get_reg r icnt)) r'.

% The decode relation specifying machine instruction syntax
_decode : tmem -> tnum -> tm instr -> tnum -> tform =
 [m : tmem][w : tnum][instr : tm instr][size : tnum]
  eqn size four and instruction instr (get_mem m w).
% Copyright (c) 2004 Princeton University
%	$Id: policy.elf,v 1.15 2005/05/31 15:22:30 gtan Exp $


% This file contains the machine-dependent parts of the conventions
% about register usage for proof-carrying code.
% It is loosely based on Standard ML of New Jersey 110.34.
% See, for example, src/runtime/mach-dep/SPARC.prim.asm  in
% the  SML/NJ 110.34 source distribution.

% 
% R#  REG   Convention
% 
%  0  %g0   always 0
%  1  %g1   
% ...
%  7  %g7   
%  8  %o0   standard link
%  9  %o1   alloc pointer  (boundary between allocated and available heap)
% 10  %o2   limit pointer  (end of available heap, minus 4096)
% 11  %o3   standard arg
% 12  %o4
% 13  %o5
% 14  %sp   stack pointer
% 15  %o7   return address (set by call instruction)
% 16  %l0
%  ...
% 23  %l7
% 24  %i0   
% ...
% 29  %i5   
% 30  %fp   frame pointer (don't touch)
% 31  %i7   saved pc (don't touch)
% 32  %pc   program counter
% 33  %npc  next program counter
% 34   icc   integer condition codes
% 35   fcc   floating-point condition codes
% 36  %y   high-order result of multiply instruction
% 37   icnt   number of instructions executed, including current instr
% 128 %f0  floating-point register 0
% 191 %f63 floating-point register 63
% 
% In our logical specifications, the register bank is a single array
% of integers.  The actual SPARC has several different register banks.
% The numbers in the R# column indicate where in our specification's
% register bank we put the corresponding SPARC register.  This is
% documented in logic/pccTCB/machines/sparc/instr_sem.elf.
% 
% The stack pointer points to a block of memory like this:
%  *	%fp = %sp+4096
%  *                    +-------------------+
%  *                    |                   |	
%  *                    .                   .
%  *			|                   |
%  *	%sp+116:	|  spill area       |
%  *			+-------------------+
%  *	%sp+112:	|        	    |
%  *			|   various uses    |
%  *	%sp:		|                   |
%  *			+-------------------+
% 
% Thus, the memory-resident temps are m[%sp+116],m[%sp+120],...,m[%sp+4092]
% 
% 

reg_stdarg    = const 8.
reg_stdlink   = const 9.
reg_allocptr  = const 10.
reg_limitptr  = const 11.
reg_storeptr  = const 5.
reg_sp        = const 14.
reg_stdcont   = const 15.
reg_fp        = const 30.
reg_savedpc   = const 31. 
ml_framesize  = const 4096.
ml_spillarea  = const 116.

% A heap-limit check consists of a comparison (limitptr minus allocptr)
% and a conditional branch.  When a standard SML/NJ function is called, 
% the comparison is done before the call, so as to make good use
% of the delay slot, and the conditional branch is done afterwards, inside
% the called function.  Thus, the carry flag is zero if and only if
% there is at least 4k of heap space left.  This relation between
% the condition codes, the limitptr, and the allocptr, is "limit_test".
%abbrev
_initial_machine_state =
[r : tregs][m : tmem]
   eqn (get_reg r zero) zero and eqn (get_reg r icnt) zero and
   mult4? (get_reg r reg_allocptr) and mult4? (get_reg r reg_limitptr).

_limit_test: tregs -> tform =
  [r : tregs] (not (icc_c (get_reg r icc)))
       equiv  (geq (get_reg r reg_limitptr) (get_reg r reg_allocptr)).

_return_address: tnum -> tregs -> tform =
  [x : tnum][r : tregs] eqn (plus (get_reg r reg_stdcont) (const 8)) x.

_reserved_regs : tnum -> tform =
  [x : tnum] eqn x reg_sp or eqn x reg_fp or eqn x reg_savedpc.
% Copyright (c) 2004 Princeton University
%	$Id: safety.elf,v 1.24 2004/06/19 20:30:07 gtan Exp $

_control_at = [x : tnum][r : tregs]
  _exists genpc [g : tm genpc]
     _gen_control_at g r and _normalpc g x
     and (gt (get_reg r icnt) (get_reg r last_cbr)).

_eq_reserved_regs : tregs -> tregs -> tform =
  [r : tregs][r0 : tregs]
   _frl_n [x : tnum] _reserved_regs x imp eqn (get_reg r x) (get_reg r0 x).

specified_step : tm instr =
 instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  _exists3 instr num num [i : tm instr][l : tnum][size : tnum]
  _exists2 genpc registers [g : tm genpc][r'' : tregs]
   _gen_control_at g r  and
   eqn (_nextinstr g) l  and
   _executable r m l and
   _decode m l i size and
   _eq_reserved_regs r r' and
   _@2 registers registers form _updatepc r r'' and
   app_instr i r'' m r' m'.

step : tm instr = instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  app_instr specified_step r m r' m'   or  app_instr api_step r m r' m'.

state = pair registers memory.
_mkstate = _mktuple2 registers memory.
fst_st = _get1of2 registers memory.
snd_st = _get2of2 registers memory.

_stepx: tm state -> tm state -> tform = [x : tm state][y : tm state]
   app_instr step (fst_st x) (snd_st x) (fst_st y) (snd_st y).

_step* : tm instr =
 instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  _kleene_star state _stepx (_mkstate r m) (_mkstate r' m').

_safe : tregs -> tmem -> tform =
 [r : tregs][m : tmem]
  _forall2 registers memory [r' : tregs][m' : tmem]
    app_instr _step* r m r' m' imp
    _exists2 registers memory [r'' : tregs][m'' : tmem]
      app_instr step r' m' r'' m''.

prog_lam = _lam2 num num form.
prog_app = _@2 num num form.

_next_word : tm num -> tm program -> tm program =
 [n : tm num][f : tm program] prog_lam [i : tnum][j : tnum]
  (eqn i zero imp eqn j n) and
  (not (eqn i zero) imp prog_app f (pred i) j).

%infix right 15 _next_word.

next_word : rep_type -> tm program -> tm program =
 [w : rep_type][ws : tm program]
 (const w) _next_word ws.

%infix right 15 next_word.

no_more_words : tm program = prog_lam [_ : tnum][_ : tnum] false.

_prog_loaded_at : tm program -> tnum -> tregs -> tmem -> tform =
 [prog : tm program][start : tnum][r :tregs][m : tmem]
   _forall3 num num num [l : tnum][w : tnum][start+4l : tnum]
    prog_app prog l w imp
    _plus_mod32 start (times four l) start+4l imp
      eqn (get_mem m start+4l) w
      and _readable r m start+4l and _executable r m start+4l.
% Copyright (c) 2004 Princeton University
%	$Id: initial.elf,v 1.27 2004/05/26 12:06:54 appel Exp $

% Things that are supposed to be true, 
% not by hardware but by convention, about the 
% registers and memory at the beginning of execution.

% When the SML/NJ compiler generates code for a function, it uses
% one of several kinds of calling conventions:
% 
% ESCAPING FUNCTION:  A function that can be called from another module.
%   Any two escaping functions with the same (ML) type must have the
%   same calling convention.  The convention is,
% 
% reg_stdlink         the address of the function
% reg_limitptr         end of heap, minus 4096
% reg_storeptr         (used by generational g.c.)
% reg_allocptr         beginning of unallocated (available) heap
% reg_exncont      
% reg_sp              (access memory-resident temps through this)
% reg_stdarg          (number of arguments is determined by function's type)
% reg_stdcont         "return address"
% reg_stdclos         (access free variables through this)
% reg_varptr          (leave this alone)
% reg_fp               (leave this alone)
% program counter     (address of function being called)
% limit_test          (machine-dependent predicate)
% other registers are used to pass arguments as determined by
% the function's (ML) type.

% ESCAPING CONTINUATION:
% reg_limitptr         end of heap, minus 4096
% reg_storeptr         (used by generational g.c.)
% reg_allocptr         beginning of unallocated (available) heap
% reg_exncont     
% reg_sp              (access memory-resident temps through this)
% reg_stdarg          (number of arguments is determined by function's type)
% reg_stdcont         address of the function
% reg_varptr          (leave this alone)
% reg_fp              (leave this alone)
% program counter     (address of function being called)
% limit_test          (machine-dependent predicate)
% other registers are used to pass arguments as determined by
% the function's (ML) type.
% 
% KNOWN FUNCTION:  
%  The convention here is up to the compiler, but usually includes:
% reg_limitptr         end of heap, minus 4096
% reg_storeptr         (used by generational g.c.)
% reg_allocptr         beginning of unallocated (available) heap
% reg_exncont      
% reg_sp               (access memory-resident temps through this)
% base pointer	       (address of beginning of compilation unit + 4096)
% reg_fp               (leave this alone)
% program counter      (address of function being called)
% other registers are used to pass arguments as the compiler wishes.

% For our proof-carrying code prototype, let us assume that
% the initial entry point, address 0 of the compilation unit,
% is a function that takes one integer argument and returns one integer
% result.  Then we have, 


_block : (tnum -> tform) -> tnum -> tnum -> tform =
 [f : tnum -> tform][start : tnum][end : tnum] 
   _frl_n [x : tnum] leq start x imp lt x end imp f x.

_spill_area_rw : tregs -> tmem -> tform =
 [r : tregs][m : tmem] _block (_readable r m &&n _writable r m) 
                              (plus (get_reg r reg_sp) ml_spillarea)
                              (plus (get_reg r reg_sp) ml_framesize).

_heap_area_rw : tregs -> tmem -> tform =
 [r : tregs][m : tmem] _block (_readable r m &&n _writable r m) 
         (get_reg r reg_allocptr) (plus (get_reg r reg_limitptr) (const 4096)).

_spill_area : tregs -> tnum -> tform =
  [r : tregs]
    _inrange2 (plus (get_reg r reg_sp) ml_spillarea)
       (plus (get_reg r reg_sp) ml_framesize).

_heap_area : tregs -> tnum -> tform =
  [r : tregs]
    _inrange2 (get_reg r reg_allocptr)
       (plus (get_reg r reg_limitptr) (const 4096)).

_prog_area:  tm program -> tnum -> tnum -> tform =
  [prog: tm program][start: tnum][i: tnum]
    _exists2 num num [l: tnum][w: tnum]
    prog_app prog l w and _plus_mod32 start (times four l) i.

_all_fixnums : tregs -> tmem -> tform =
  [r : tregs][m : tmem]
    _frl_n [x : tnum] _is_word (get_mem m x) and _is_word (get_reg r x).

_return_type : tnum -> tregs -> tform =
  [x : tnum][r0 : tregs]
   _modulo x four zero and _is_word x and
   _forall2 registers memory [r : tregs][m : tmem]
     _eq_reserved_regs r r0 imp
     _control_at x r imp 
     _safe r m.

_initial_state : tm program -> tnum -> tregs -> tmem -> tform =
  [prog: tm program][start: tnum][r : tregs][m : tmem]
  _initial_machine_state r m  and
  _all_fixnums r m  and
  _spill_area_rw r m  and
  _heap_area_rw r m  and
  _set_disjoint num (_spill_area r) (_heap_area r)  and
  _set_disjoint num (_heap_area r) (_prog_area prog start)  and
  _set_disjoint num (_prog_area prog start) (_spill_area r)  and
  eqn (get_reg r reg_stdlink) start and
  _is_word (plus (get_reg r reg_limitptr) (const 4096)) and
  _return_type (plus (get_reg r reg_stdcont) (const 8)) r   and
  geq (plus (get_reg r reg_limitptr) (const 4096)) (get_reg r reg_allocptr) and
  _prog_loaded_at prog start r m   and
  _control_at start r.

_exists_initial_state:
  pf (_exists2 program num [prog: tm program][start: tnum]
      _exists2 registers memory [r: tregs][m: tmem]
      _initial_state prog start r m).% Copyright (c) 2004 Princeton University
%	$Id: policy.elf,v 1.14 2004/04/30 20:59:52 appel Exp $

safe_program: tm program -> tform =
 [prog : tm program]
  _forall3 num registers memory [start : tnum][r : tregs][m : tmem] 
   _initial_state prog start r m imp
   _safe r m.

%
% Example of a safety theorem:
%
% my_prog_is_safe: pf (safe_program (
% 81329 next_word
% 293765 next_word
% 93 next_word
% 29387 next_word
% 92387895 next_word
% 129872 next_word
% 938275 next_word
% no_more_words)).
% 

__safe__ : __program__ -> type = [prog: __program__] pf (safe_program prog).
% Copyright (c) 2004 Princeton University

hole: {A: tm form} pf A.
_termhole: {T: tp} tm T.
tphole: rep_type -> tp.
_predhole: {T1: tp}{T2: tp}{T: tp} (tm T1 -> tm T2 -> tm form) -> tm T =  
   [T1: tp][T2: tp][T: tp]
   [f: tm T1 -> tm T2 -> tm form]
   _@ (T1 arrow T2 arrow form) T
   (_termhole ((T1 arrow T2 arrow form) arrow T))
   (_lam2 T1 T2 form f).
bighole : {A:rep_div} pf A = [A:rep_div] hole A.
1ary : tp -> tp = [t:tp] t arrow t.
2ary : tp -> tp = [t:tp] t arrow 1ary t.
shadowed_2 : tp -> tp = [t:tp] t arrow rep_times.
rel : tp -> tp -> tp = [t1:tp] [t2:tp] t1 arrow shadowed_2 t2.
rel3 : tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] t1 arrow rel t2 t3.
rel4 : tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] t1 arrow rel3 t2 t3 t4.
rel5 : tp -> tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] [t5:tp] t1 arrow rel4 t2 t3 t4 t5.
rel6 : tp -> tp -> tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] [t5:tp] [t6:tp] t1 arrow rel5 t2 t3 t4 t5 t6.
rel7 : tp -> tp -> tp -> tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] [t5:tp] [t6:tp] [t7:tp] t1 arrow rel6 t2 t3 t4 t5 t6 t7.
eqrel : tp -> tp = [t:tp] rel t t.
eq_form : rep_plus (eqrel rep_times) = _lam2 rep_times rep_times rep_times ([x3:rep_plus rep_times] [y:rep_plus rep_times] x3 equiv y).
_eq_x : {t:tp} rep_plus (eqrel t) = [t:tp] _lam2 t t rep_times ([x3:rep_plus t] [x4:rep_plus t] _eq t x3 x4).
eq_arith : rep_plus (eqrel num) = _eq_x num.
compos_set : tp -> tp = [t:tp] 2ary (shadowed_2 t).
_emptyset : {t:tp} rep_plus (shadowed_2 t) = [t:tp] _lam t rep_times ([x3:rep_plus t] false).
_singleton : {t:tp} rep_plus (t arrow shadowed_2 t) = [t:tp] _lam2 t t rep_times ([x3:rep_plus t] [y:rep_plus t] _eq t y x3).
_subset : {t:tp} rep_plus (rel (shadowed_2 t) (shadowed_2 t)) = [t:tp] _lam2 (shadowed_2 t) (shadowed_2 t) rep_times ([s1:rep_plus (shadowed_2 t)] [s2:rep_plus (shadowed_2 t)] _forall t ([x3:rep_plus t] _@ t rep_times s1 x3 imp _@ t rep_times s2 x3)).
_set_equiv : {t:tp} rep_plus (eqrel (shadowed_2 t)) = [t:tp] _lam2 (shadowed_2 t) (shadowed_2 t) rep_times ([s1:rep_plus (shadowed_2 t)] [s2:rep_plus (shadowed_2 t)] _@2 (shadowed_2 t) (shadowed_2 t) rep_times (_subset t) s1 s2 and _@2 (shadowed_2 t) (shadowed_2 t) rep_times (_subset t) s2 s1).
_set_union : {t:tp} rep_plus (compos_set t) = [t:tp] _lam3 (shadowed_2 t) (shadowed_2 t) t rep_times ([s1:rep_plus (shadowed_2 t)] [s2:rep_plus (shadowed_2 t)] [x3:rep_plus t] _@ t rep_times s1 x3 or _@ t rep_times s2 x3).
_set_intersection : {t:tp} rep_plus (compos_set t) = [t:tp] _lam3 (shadowed_2 t) (shadowed_2 t) t rep_times ([s1:rep_plus (shadowed_2 t)] [s2:rep_plus (shadowed_2 t)] [x3:rep_plus t] _@ t rep_times s1 x3 and _@ t rep_times s2 x3).
_set_diff : {t:tp} rep_plus (compos_set t) = [t:tp] _lam3 (shadowed_2 t) (shadowed_2 t) t rep_times ([s1:rep_plus (shadowed_2 t)] [s2:rep_plus (shadowed_2 t)] [x3:rep_plus t] _@ t rep_times s1 x3 and not (_@ t rep_times s2 x3)).
_set_compl : {t:tp} rep_plus (1ary (shadowed_2 t)) = [t:tp] _lam2 (shadowed_2 t) t rep_times ([s:rep_plus (shadowed_2 t)] [x3:rep_plus t] not (_@ t rep_times s x3)).
_is_singleton : {t:tp} rep_plus (rel (eqrel t) (shadowed_2 t)) = [t:tp] _lam2 (eqrel t) (shadowed_2 t) rep_times ([eqt:rep_plus (eqrel t)] [s:rep_plus (shadowed_2 t)] _forall2 t t ([x3:rep_plus t] [x4:rep_plus t] _@ t rep_times s x3 imp _@ t rep_times s x4 imp _@2 t t rep_times eqt x3 x4)).
inrange : rep_plus (rel num num) = _lam2 num num rep_times ([n:rep_plus num] [i1:rep_plus num] isInt i1 and geq i1 zero and lt i1 n).
inrange2 : rep_plus (rel3 num num num) = _lam3 num num num rep_times ([lo:rep_plus num] [hi:rep_plus num] [i1:rep_plus num] isInt i1 and leq lo i1 and lt i1 hi).
_agree_over_set : {t1:tp} {t2:tp} rep_plus (rel3 (shadowed_2 t1) (t1 arrow t2) (t1 arrow t2)) = [t1:tp] [t2:tp] _lam3 (t1 arrow rep_times) (t1 arrow t2) (t1 arrow t2) rep_times ([s:rep_plus (t1 arrow rep_times)] [m:rep_plus (t1 arrow t2)] [m':rep_plus (t1 arrow t2)] _forall t1 ([x3:rep_plus t1] _@ t1 rep_times s x3 imp _eq t2 (_@ t1 t2 m x3) (_@ t1 t2 m' x3))).
_agree_outside_set : {t1:tp} {t2:tp} rep_plus (rel3 (shadowed_2 t1) (t1 arrow t2) (t1 arrow t2)) = [t1:tp] [t2:tp] _lam3 (t1 arrow rep_times) (t1 arrow t2) (t1 arrow t2) rep_times ([s:rep_plus (t1 arrow rep_times)] [m:rep_plus (t1 arrow t2)] [m':rep_plus (t1 arrow t2)] _forall t1 ([x3:rep_plus t1] not (_@ t1 rep_times s x3) imp _eq t2 (_@ t1 t2 m x3) (_@ t1 t2 m' x3))).
list : tp -> tp = [t:tp] rel num t.
_list_cons : {t:tp} rep_plus (eqrel t arrow t arrow 1ary (list t)) = [t:tp] _lam3 (eqrel t) t (list t) (list t) ([eq_rel1:rep_plus (eqrel t)] [hd:rep_plus t] [lst:rep_plus (list t)] _lam2 num t rep_times ([i1:rep_plus num] [x3:rep_plus t] if (_eq num i1 zero) (_@2 t t rep_times eq_rel1 x3 hd) (_@2 num t rep_times lst (pred i1) x3))).
_list_nil : {t:tp} rep_plus (list t) = [t:tp] _lam2 num t rep_times ([i1:rep_plus num] [x3:rep_plus t] false).
_forall7 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} (rep_plus a -> rep_plus b -> rep_plus c1 -> rep_plus d -> rep_plus e -> rep_plus f -> rep_plus g -> rep_div) -> rep_div = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [X:rep_plus a -> rep_plus b -> rep_plus c2 -> rep_plus d -> rep_plus e -> rep_plus f -> rep_plus g -> rep_div] _forall a ([xa:rep_plus a] _forall6 b c2 d e f g ([xb:rep_plus b] [xc:rep_plus c2] [xd:rep_plus d] [xe:rep_plus e] [xf:rep_plus f] [xg:rep_plus g] X xa xb xc xd xe xf xg)).
_forall8 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} {h:tp} (rep_plus a -> rep_plus b -> rep_plus c1 -> rep_plus d -> rep_plus e -> rep_plus f -> rep_plus g -> rep_plus h -> rep_div) -> rep_div = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [h:tp] [X:rep_plus a -> rep_plus b -> rep_plus c2 -> rep_plus d -> rep_plus e -> rep_plus f -> rep_plus g -> rep_plus h -> rep_div] _forall a ([xa:rep_plus a] _forall7 b c2 d e f g h ([xb:rep_plus b] [xc:rep_plus c2] [xd:rep_plus d] [xe:rep_plus e] [xf:rep_plus f] [xg:rep_plus g] [xh:rep_plus h] X xa xb xc xd xe xf xg xh)).
_forall9 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} {h:tp} {i1:tp} (rep_plus a -> rep_plus b -> rep_plus c1 -> rep_plus d -> rep_plus e -> rep_plus f -> rep_plus g -> rep_plus h -> rep_plus i1 -> rep_div) -> rep_div = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [h:tp] [i2:tp] [X:rep_plus a -> rep_plus b -> rep_plus c2 -> rep_plus d -> rep_plus e -> rep_plus f -> rep_plus g -> rep_plus h -> rep_plus i2 -> rep_div] _forall a ([xa:rep_plus a] _forall8 b c2 d e f g h i2 ([xb:rep_plus b] [xc:rep_plus c2] [xd:rep_plus d] [xe:rep_plus e] [xf:rep_plus f] [xg:rep_plus g] [xh:rep_plus h] [xi:rep_plus i2] X xa xb xc xd xe xf xg xh xi)).
_forall10 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} {h:tp} {i1:tp} {j:tp} (rep_plus a -> rep_plus b -> rep_plus c1 -> rep_plus d -> rep_plus e -> rep_plus f -> rep_plus g -> rep_plus h -> rep_plus i1 -> rep_plus j -> rep_div) -> rep_div = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [h:tp] [i2:tp] [j:tp] [X:rep_plus a -> rep_plus b -> rep_plus c2 -> rep_plus d -> rep_plus e -> rep_plus f -> rep_plus g -> rep_plus h -> rep_plus i2 -> rep_plus j -> rep_div] _forall a ([xa:rep_plus a] _forall9 b c2 d e f g h i2 j ([xb:rep_plus b] [xc:rep_plus c2] [xd:rep_plus d] [xe:rep_plus e] [xf:rep_plus f] [xg:rep_plus g] [xh:rep_plus h] [xi:rep_plus i2] [xj:rep_plus j] X xa xb xc xd xe xf xg xh xi xj)).
forall : {T:tp} (rep_plus T -> rep_div) -> rep_div = [T:tp] [x3:rep_plus T -> rep_div] _forall T ([x4:rep_plus T] x3 x4).
forall2 : {T1:tp} {T2:tp} (rep_plus T1 -> rep_plus T2 -> rep_div) -> rep_div = [T1:tp] [T2:tp] [x3:rep_plus T1 -> rep_plus T2 -> rep_div] _forall2 T1 T2 ([x4:rep_plus T1] [x5:rep_plus T2] x3 x4 x5).
forall3 : {T1:tp} {T2:tp} {T3:tp} (rep_plus T1 -> rep_plus T2 -> rep_plus T3 -> rep_div) -> rep_div = [T1:tp] [T2:tp] [T3:tp] [x3:rep_plus T1 -> rep_plus T2 -> rep_plus T3 -> rep_div] _forall3 T1 T2 T3 ([x4:rep_plus T1] [x5:rep_plus T2] [x6:rep_plus T3] x3 x4 x5 x6).
forall4 : {A:tp} {B:tp} {C:tp} {D:tp} (rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_div) -> rep_div = [A:tp] [B:tp] [C:tp] [D:tp] [f:rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_div] _forall4 A B C D ([x3:rep_plus A] [x4:rep_plus B] [x5:rep_plus C] [x6:rep_plus D] f x3 x4 x5 x6).
forall5 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} (rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_div) -> rep_div = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [f:rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_div] _forall5 A B C D E ([x3:rep_plus A] [x4:rep_plus B] [x5:rep_plus C] [x6:rep_plus D] [x7:rep_plus E] f x3 x4 x5 x6 x7).
forall6 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} (rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_plus F -> rep_div) -> rep_div = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [f:rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_plus F -> rep_div] _forall6 A B C D E F ([x3:rep_plus A] [x4:rep_plus B] [x5:rep_plus C] [x6:rep_plus D] [x7:rep_plus E] [x8:rep_plus F] f x3 x4 x5 x6 x7 x8).
forall7 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} (rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_plus F -> rep_plus G -> rep_div) -> rep_div = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [X:rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_plus F -> rep_plus G -> rep_div] _forall7 A B C D E F G ([x3:rep_plus A] [x4:rep_plus B] [x5:rep_plus C] [x6:rep_plus D] [x7:rep_plus E] [x8:rep_plus F] [x9:rep_plus G] X x3 x4 x5 x6 x7 x8 x9).
forall8 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} {H:tp} (rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_plus F -> rep_plus G -> rep_plus H -> rep_div) -> rep_div = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [H:tp] [X:rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_plus F -> rep_plus G -> rep_plus H -> rep_div] _forall8 A B C D E F G H ([x3:rep_plus A] [x4:rep_plus B] [x5:rep_plus C] [x6:rep_plus D] [x7:rep_plus E] [x8:rep_plus F] [x9:rep_plus G] [x10:rep_plus H] X x3 x4 x5 x6 x7 x8 x9 x10).
forall9 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} {H:tp} {I:tp} (rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_plus F -> rep_plus G -> rep_plus H -> rep_plus I -> rep_div) -> rep_div = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [H:tp] [I:tp] [X:rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_plus F -> rep_plus G -> rep_plus H -> rep_plus I -> rep_div] _forall9 A B C D E F G H I ([x3:rep_plus A] [x4:rep_plus B] [x5:rep_plus C] [x6:rep_plus D] [x7:rep_plus E] [x8:rep_plus F] [x9:rep_plus G] [x10:rep_plus H] [x11:rep_plus I] X x3 x4 x5 x6 x7 x8 x9 x10 x11).
forall10 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} {H:tp} {I:tp} {J:tp} (rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_plus F -> rep_plus G -> rep_plus H -> rep_plus I -> rep_plus J -> rep_div) -> rep_div = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [H:tp] [I:tp] [J:tp] [X:rep_plus A -> rep_plus B -> rep_plus C -> rep_plus D -> rep_plus E -> rep_plus F -> rep_plus G -> rep_plus H -> rep_plus I -> rep_plus J -> rep_div] _forall10 A B C D E F G H I J ([x3:rep_plus A] [x4:rep_plus B] [x5:rep_plus C] [x6:rep_plus D] [x7:rep_plus E] [x8:rep_plus F] [x9:rep_plus G] [x10:rep_plus H] [x11:rep_plus I] [x12:rep_plus J] X x3 x4 x5 x6 x7 x8 x9 x10 x11 x12).
exists : {T:tp} (rep_plus T -> rep_plus rep_times) -> rep_plus rep_times = [T:tp] [x3:rep_plus T -> rep_plus rep_times] _exists T ([x4:rep_plus T] x3 x4).
exists2 : {T1:tp} {T2:tp} (rep_plus T1 -> rep_plus T2 -> rep_div) -> rep_div = [T1:tp] [T2:tp] [f:rep_plus T1 -> rep_plus T2 -> rep_div] _exists2 T1 T2 ([x3:rep_plus T1] [x4:rep_plus T2] f x3 x4).
exists3 : {T1:tp} {T2:tp} {T3:tp} (rep_plus T1 -> rep_plus T2 -> rep_plus T3 -> rep_div) -> rep_div = [T1:tp] [T2:tp] [T3:tp] [f:rep_plus T1 -> rep_plus T2 -> rep_plus T3 -> rep_div] _exists3 T1 T2 T3 ([x3:rep_plus T1] [x4:rep_plus T2] [x5:rep_plus T3] f x3 x4 x5).
exists4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div) -> rep_plus rep_times = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div] exists X1 ([x3:rep_plus X1] exists3 X2 X3 X4 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] f x3 x4 x5 x6)).
exists5 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div) -> rep_plus rep_times = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div] exists X1 ([x3:rep_plus X1] exists4 X2 X3 X4 X5 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] f x3 x4 x5 x6 x7)).
exists6 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div) -> rep_plus rep_times = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div] exists X1 ([x3:rep_plus X1] exists5 X2 X3 X4 X5 X6 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] f x3 x4 x5 x6 x7 x8)).
eq : {T:tp} rep_plus T -> rep_plus T -> rep_div = [T:tp] [x3:rep_plus T] [x4:rep_plus T] _eq T x3 x4.
neq : {X1:tp} rep_plus X1 -> rep_plus X1 -> rep_div = [X1:tp] [a:rep_plus X1] [b:rep_plus X1] not (eq X1 a b).
== : {T:tp} rep_plus T -> rep_plus T -> rep_plus rep_times = [T:tp] [x3:rep_plus T] [x4:rep_plus T] _eq T x3 x4.
!= : {T:tp} rep_plus T -> rep_plus T -> rep_plus rep_times = [T:tp] [a:rep_plus T] [b:rep_plus T] not (eq T a b).
@ : {T1:tp} {T2:tp} rep_plus (T1 arrow T2) -> rep_plus T1 -> rep_plus T2 = [T1:tp] [T2:tp] [x3:rep_plus (T1 arrow T2)] [x4:rep_plus T1] _@ T1 T2 x3 x4.
@1 : {X1:tp} {X2:tp} rep_plus (X1 arrow X2) -> rep_plus X1 -> rep_plus X2 = [X1:tp] [X2:tp] [f:rep_plus (X1 arrow X2)] [x3:rep_plus X1] @ X1 X2 f x3.
@2 : {X1:tp} {X2:tp} {X3:tp} rep_plus (X1 arrow X2 arrow X3) -> rep_plus X1 -> rep_plus X2 -> rep_plus X3 = [X1:tp] [X2:tp] [X3:tp] [f:rep_plus (X1 arrow X2 arrow X3)] [x3:rep_plus X1] [x4:rep_plus X2] @1 X2 X3 (@1 X1 (X2 arrow X3) f x3) x4.
@3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} rep_plus (X1 arrow X2 arrow X3 arrow X4) -> rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [f:rep_plus (X1 arrow X2 arrow X3 arrow X4)] [x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] @2 X2 X3 X4 (@1 X1 (X2 arrow X3 arrow X4) f x3) x4 x5.
lam : {T1:tp} {T2:tp} (rep_plus T1 -> rep_plus T2) -> rep_plus (T1 arrow T2) = [T1:tp] [T2:tp] [x3:rep_plus T1 -> rep_plus T2] _lam T1 T2 ([x4:rep_plus T1] x3 x4).
lam2 : {T1:tp} {T2:tp} {T3:tp} (rep_plus T1 -> rep_plus T2 -> rep_plus T3) -> rep_plus (T1 arrow T2 arrow T3) = [T1:tp] [T2:tp] [T3:tp] [f:rep_plus T1 -> rep_plus T2 -> rep_plus T3] _lam2 T1 T2 T3 ([x3:rep_plus T1] [x4:rep_plus T2] f x3 x4).
lam3 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} (rep_plus T1 -> rep_plus T2 -> rep_plus T3 -> rep_plus T4) -> rep_plus (T1 arrow T2 arrow T3 arrow T4) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] [f:rep_plus T1 -> rep_plus T2 -> rep_plus T3 -> rep_plus T4] _lam3 T1 T2 T3 T4 ([x3:rep_plus T1] [x4:rep_plus T2] [x5:rep_plus T3] f x3 x4 x5).
lam4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} {T5:tp} (rep_plus T1 -> rep_plus T2 -> rep_plus T3 -> rep_plus T4 -> rep_plus T5) -> rep_plus (T1 arrow T2 arrow T3 arrow T4 arrow T5) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] [T5:tp] [f:rep_plus T1 -> rep_plus T2 -> rep_plus T3 -> rep_plus T4 -> rep_plus T5] _lam4 T1 T2 T3 T4 T5 ([x3:rep_plus T1] [x4:rep_plus T2] [x5:rep_plus T3] [x6:rep_plus T4] f x3 x4 x5 x6).
lam5 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6) -> rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6) ([x3:rep_plus X1] lam4 X2 X3 X4 X5 X6 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] f x3 x4 x5 x6 x7)).
lam6 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7) -> rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7) ([x3:rep_plus X1] lam5 X2 X3 X4 X5 X6 X7 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] f x3 x4 x5 x6 x7 x8)).
lam7 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8) -> rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8) ([x3:rep_plus X1] lam6 X2 X3 X4 X5 X6 X7 X8 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] f x3 x4 x5 x6 x7 x8 x9)).
lam8 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9) -> rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9) ([x3:rep_plus X1] lam7 X2 X3 X4 X5 X6 X7 X8 X9 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] f x3 x4 x5 x6 x7 x8 x9 x10)).
lam9 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10) -> rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10) ([x3:rep_plus X1] lam8 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] f x3 x4 x5 x6 x7 x8 x9 x10 x11)).
lam10 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11) -> rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11) ([x3:rep_plus X1] lam9 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)).
lam11 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11 -> rep_plus X12) -> rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11 -> rep_plus X12] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12) ([x3:rep_plus X1] lam10 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] [x13:rep_plus X11] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)).
lam12 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11 -> rep_plus X12 -> rep_plus X13) -> rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11 -> rep_plus X12 -> rep_plus X13] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13) ([x3:rep_plus X1] lam11 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] [x13:rep_plus X11] [x14:rep_plus X12] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14)).
lam13 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11 -> rep_plus X12 -> rep_plus X13 -> rep_plus X14) -> rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11 -> rep_plus X12 -> rep_plus X13 -> rep_plus X14] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14) ([x3:rep_plus X1] lam12 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] [x13:rep_plus X11] [x14:rep_plus X12] [x15:rep_plus X13] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15)).
lam14 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {X15:tp} (rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11 -> rep_plus X12 -> rep_plus X13 -> rep_plus X14 -> rep_plus X15) -> rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow X15) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [X15:tp] [f:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11 -> rep_plus X12 -> rep_plus X13 -> rep_plus X14 -> rep_plus X15] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow X15) ([x3:rep_plus X1] lam13 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 X15 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] [x13:rep_plus X11] [x14:rep_plus X12] [x15:rep_plus X13] [x16:rep_plus X14] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)).
forall_i : {T:tp} {F:rep_plus T -> rep_div} ({a:rep_plus T} pf (F a)) -> pf (forall T ([x3:rep_plus T] F x3)) = [T:tp] [F:rep_plus T -> rep_div] [x3:{a:rep_plus T} pf (F a)] _forall_i T ([x4:rep_plus T] F x4) ([a:rep_plus T] x3 a).
forall2_i : {X1:tp} {X2:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_div} ({a:rep_plus X1} {b:rep_plus X2} pf (F a b)) -> pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] F x3 x4)) = [X1:tp] [X2:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_div] [p1:{a:rep_plus X1} {b:rep_plus X2} pf (F a b)] forall_i X1 ([x3:rep_plus X1] forall X2 ([x4:rep_plus X2] F x3 x4)) ([x3:rep_plus X1] forall_i X2 ([x4:rep_plus X2] F x3 x4) ([a:rep_plus X2] p1 x3 a)).
forall3_i : {X1:tp} {X2:tp} {X3:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} pf (F a b c1)) -> pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] F x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [p1:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} pf (F a b c2)] forall_i X1 ([x3:rep_plus X1] forall2 X2 X3 ([x4:rep_plus X2] [x5:rep_plus X3] F x3 x4 x5)) ([x3:rep_plus X1] forall2_i X2 X3 ([x4:rep_plus X2] [x5:rep_plus X3] F x3 x4 x5) ([a:rep_plus X2] [b:rep_plus X3] p1 x3 a b)).
forall4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div} ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} pf (F a b c1 d)) -> pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] F x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div] [p1:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} {d:rep_plus X4} pf (F a b c2 d)] forall_i X1 ([x3:rep_plus X1] forall3 X2 X3 X4 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] F x3 x4 x5 x6)) ([x3:rep_plus X1] forall3_i X2 X3 X4 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] F x3 x4 x5 x6) ([a:rep_plus X2] [b:rep_plus X3] [c3:rep_plus X4] p1 x3 a b c3)).
forall5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div} ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} pf (F a b c1 d e)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] F x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div] [p1:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} pf (F a b c2 d e)] forall_i X1 ([x3:rep_plus X1] forall4 X2 X3 X4 X5 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] F x3 x4 x5 x6 x7)) ([x3:rep_plus X1] forall4_i X2 X3 X4 X5 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] F x3 x4 x5 x6 x7) ([a:rep_plus X2] [b:rep_plus X3] [c3:rep_plus X4] [d:rep_plus X5] p1 x3 a b c3 d)).
forall6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div} ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} pf (F a b c1 d e f)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] F x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div] [p1:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} pf (F a b c2 d e f)] forall_i X1 ([x3:rep_plus X1] forall5 X2 X3 X4 X5 X6 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] F x3 x4 x5 x6 x7 x8)) ([x3:rep_plus X1] forall5_i X2 X3 X4 X5 X6 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] F x3 x4 x5 x6 x7 x8) ([a:rep_plus X2] [b:rep_plus X3] [c3:rep_plus X4] [d:rep_plus X5] [e:rep_plus X6] p1 x3 a b c3 d e)).
forall7_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_div} ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} pf (F a b c1 d e f g)) -> pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] F x3 x4 x5 x6 x7 x8 x9)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_div] [p1:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} pf (F a b c2 d e f g)] forall_i X1 ([x3:rep_plus X1] forall6 X2 X3 X4 X5 X6 X7 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] F x3 x4 x5 x6 x7 x8 x9)) ([x3:rep_plus X1] forall6_i X2 X3 X4 X5 X6 X7 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] F x3 x4 x5 x6 x7 x8 x9) ([a:rep_plus X2] [b:rep_plus X3] [c3:rep_plus X4] [d:rep_plus X5] [e:rep_plus X6] [f:rep_plus X7] p1 x3 a b c3 d e f)).
forall8_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_div} ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} {h:rep_plus X8} pf (F a b c1 d e f g h)) -> pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] F x3 x4 x5 x6 x7 x8 x9 x10)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_div] [p1:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} {h:rep_plus X8} pf (F a b c2 d e f g h)] forall_i X1 ([x3:rep_plus X1] forall7 X2 X3 X4 X5 X6 X7 X8 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] F x3 x4 x5 x6 x7 x8 x9 x10)) ([x3:rep_plus X1] forall7_i X2 X3 X4 X5 X6 X7 X8 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] F x3 x4 x5 x6 x7 x8 x9 x10) ([a:rep_plus X2] [b:rep_plus X3] [c3:rep_plus X4] [d:rep_plus X5] [e:rep_plus X6] [f:rep_plus X7] [g:rep_plus X8] p1 x3 a b c3 d e f g)).
forall9_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_div} ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} {h:rep_plus X8} {i1:rep_plus X9} pf (F a b c1 d e f g h i1)) -> pf (forall9 X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_div] [p1:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} {h:rep_plus X8} {i2:rep_plus X9} pf (F a b c2 d e f g h i2)] forall_i X1 ([x3:rep_plus X1] forall8 X2 X3 X4 X5 X6 X7 X8 X9 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) ([x3:rep_plus X1] forall8_i X2 X3 X4 X5 X6 X7 X8 X9 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11) ([a:rep_plus X2] [b:rep_plus X3] [c3:rep_plus X4] [d:rep_plus X5] [e:rep_plus X6] [f:rep_plus X7] [g:rep_plus X8] [h:rep_plus X9] p1 x3 a b c3 d e f g h)).
forall10_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_div} ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} {h:rep_plus X8} {i1:rep_plus X9} {j:rep_plus X10} pf (F a b c1 d e f g h i1 j)) -> pf (forall10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_div] [p1:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} {h:rep_plus X8} {i2:rep_plus X9} {j:rep_plus X10} pf (F a b c2 d e f g h i2 j)] forall_i X1 ([x3:rep_plus X1] forall9 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) ([x3:rep_plus X1] forall9_i X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) ([a:rep_plus X2] [b:rep_plus X3] [c3:rep_plus X4] [d:rep_plus X5] [e:rep_plus X6] [f:rep_plus X7] [g:rep_plus X8] [h:rep_plus X9] [i3:rep_plus X10] p1 x3 a b c3 d e f g h i3)).
forall_e : {T:tp} {F:rep_plus T -> rep_div} pf (forall T ([x3:rep_plus T] F x3)) -> ({a:rep_plus T} pf (F a)) = [T:tp] [F:rep_plus T -> rep_div] [x3:pf (forall T ([x3:rep_plus T] F x3))] [a:rep_plus T] _forall_e T ([x4:rep_plus T] F x4) x3 a.
forall2_e : {X1:tp} {X2:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_div} pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] F x3 x4)) -> ({a:rep_plus X1} {b:rep_plus X2} pf (F a b)) = [X1:tp] [X2:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_div] [p1:pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] F x3 x4))] [a:rep_plus X1] [b:rep_plus X2] forall_e X2 ([x3:rep_plus X2] F a x3) (forall_e X1 ([x3:rep_plus X1] _forall X2 ([x4:rep_plus X2] F x3 x4)) p1 a) b.
forall3_e : {X1:tp} {X2:tp} {X3:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] F x3 x4 x5)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} pf (F a b c1)) = [X1:tp] [X2:tp] [X3:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [p1:pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] F x3 x4 x5))] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] forall_e X3 ([x3:rep_plus X3] F a b x3) (forall2_e X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] _forall X3 ([x5:rep_plus X3] F x3 x4 x5)) p1 a b) c2.
forall4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div} pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] F x3 x4 x5 x6)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} pf (F a b c1 d)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div] [p1:pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] F x3 x4 x5 x6))] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [d:rep_plus X4] forall_e X4 ([x3:rep_plus X4] F a b c2 x3) (forall3_e X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] _forall X4 ([x6:rep_plus X4] F x3 x4 x5 x6)) p1 a b c2) d.
forall5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div} pf (forall5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] F x3 x4 x5 x6 x7)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} pf (F a b c1 d e)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div] [p1:pf (forall5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] F x3 x4 x5 x6 x7))] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [d:rep_plus X4] [e:rep_plus X5] forall_e X5 ([x3:rep_plus X5] F a b c2 d x3) (forall4_e X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] _forall X5 ([x7:rep_plus X5] F x3 x4 x5 x6 x7)) p1 a b c2 d) e.
forall6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div} pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] F x3 x4 x5 x6 x7 x8)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} pf (F a b c1 d e f)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div] [p1:pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] F x3 x4 x5 x6 x7 x8))] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [d:rep_plus X4] [e:rep_plus X5] [f:rep_plus X6] forall_e X6 ([x3:rep_plus X6] F a b c2 d e x3) (forall5_e X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] _forall X6 ([x8:rep_plus X6] F x3 x4 x5 x6 x7 x8)) p1 a b c2 d e) f.
forall7_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_div} pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] F x3 x4 x5 x6 x7 x8 x9)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} pf (F a b c1 d e f g)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_div] [p1:pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] F x3 x4 x5 x6 x7 x8 x9))] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [d:rep_plus X4] [e:rep_plus X5] [f:rep_plus X6] [g:rep_plus X7] forall_e X7 ([x3:rep_plus X7] F a b c2 d e f x3) (forall6_e X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] _forall X7 ([x9:rep_plus X7] F x3 x4 x5 x6 x7 x8 x9)) p1 a b c2 d e f) g.
forall8_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_div} pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] F x3 x4 x5 x6 x7 x8 x9 x10)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} {h:rep_plus X8} pf (F a b c1 d e f g h)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_div] [p1:pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] F x3 x4 x5 x6 x7 x8 x9 x10))] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [d:rep_plus X4] [e:rep_plus X5] [f:rep_plus X6] [g:rep_plus X7] [h:rep_plus X8] forall_e X8 ([x3:rep_plus X8] F a b c2 d e f g x3) (forall7_e X1 X2 X3 X4 X5 X6 X7 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] _forall X8 ([x10:rep_plus X8] F x3 x4 x5 x6 x7 x8 x9 x10)) p1 a b c2 d e f g) h.
forall9_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_div} pf (forall9 X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} {h:rep_plus X8} {i1:rep_plus X9} pf (F a b c1 d e f g h i1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_div] [p1:pf (forall9 X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11))] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [d:rep_plus X4] [e:rep_plus X5] [f:rep_plus X6] [g:rep_plus X7] [h:rep_plus X8] [i2:rep_plus X9] forall_e X9 ([x3:rep_plus X9] F a b c2 d e f g h x3) (forall8_e X1 X2 X3 X4 X5 X6 X7 X8 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] _forall X9 ([x11:rep_plus X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) p1 a b c2 d e f g h) i2.
forall10_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_div} pf (forall10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} {g:rep_plus X7} {h:rep_plus X8} {i1:rep_plus X9} {j:rep_plus X10} pf (F a b c1 d e f g h i1 j)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_div] [p1:pf (forall10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12))] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [d:rep_plus X4] [e:rep_plus X5] [f:rep_plus X6] [g:rep_plus X7] [h:rep_plus X8] [i2:rep_plus X9] [j:rep_plus X10] forall_e X10 ([x3:rep_plus X10] F a b c2 d e f g h i2 x3) (forall9_e X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] _forall X10 ([x12:rep_plus X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) p1 a b c2 d e f g h i2) j.
exists_i : {T:tp} {A:rep_plus T -> rep_div} {x3:rep_plus T} pf (A x3) -> pf (exists T ([x4:rep_plus T] A x4)) = [T:tp] [A:rep_plus T -> rep_div] [x4:rep_plus T] [p1:pf (A x4)] forall_i rep_times ([x3:rep_plus rep_times] forall T ([x5:rep_plus T] A x5 imp x3) imp x3) ([b:rep_div] _imp_i (forall T ([x6:rep_plus T] A x6 imp b)) b ([p2:pf (forall T ([x7:rep_plus T] A x7 imp b))] _imp_e (A x4) b (forall_e T ([x3:rep_plus T] A x3 imp b) p2 x4) p1)).
exists2_i : {X1:tp} {X2:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_div} {a:rep_plus X1} {b:rep_plus X2} pf (A a b) -> pf (exists2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] A x3 x4)) = [X1:tp] [X2:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_div] [a:rep_plus X1] [b:rep_plus X2] [Q:pf (A a b)] exists_i X1 ([x3:rep_plus X1] _exists X2 ([x4:rep_plus X2] A x3 x4)) a (exists_i X2 ([x3:rep_plus X2] A a x3) b Q).
exists3_i : {X1:tp} {X2:tp} {X3:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} {a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} pf (A a b c1) -> pf (exists3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] A x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [Q:pf (A a b c2)] exists_i X1 ([x3:rep_plus X1] _exists2 X2 X3 ([x4:rep_plus X2] [x5:rep_plus X3] A x3 x4 x5)) a (exists_i X2 ([x3:rep_plus X2] _exists X3 ([x4:rep_plus X3] A a x3 x4)) b (exists_i X3 ([x3:rep_plus X3] A a b x3) c2 Q)).
exists4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div} {a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} pf (A a b c1 d) -> pf (exists4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] A x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [d:rep_plus X4] [Q:pf (A a b c2 d)] exists_i X1 ([x3:rep_plus X1] exists3 X2 X3 X4 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] A x3 x4 x5 x6)) a (exists_i X2 ([x3:rep_plus X2] _exists2 X3 X4 ([x4:rep_plus X3] [x5:rep_plus X4] A a x3 x4 x5)) b (exists_i X3 ([x3:rep_plus X3] _exists X4 ([x4:rep_plus X4] A a b x3 x4)) c2 (exists_i X4 ([x3:rep_plus X4] A a b c2 x3) d Q))).
exists5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div} {a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} pf (A a b c1 d e) -> pf (exists5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] A x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [d:rep_plus X4] [e:rep_plus X5] [Q:pf (A a b c2 d e)] exists_i X1 ([x3:rep_plus X1] exists4 X2 X3 X4 X5 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] A x3 x4 x5 x6 x7)) a (exists_i X2 ([x3:rep_plus X2] exists3 X3 X4 X5 ([x4:rep_plus X3] [x5:rep_plus X4] [x6:rep_plus X5] A a x3 x4 x5 x6)) b (exists_i X3 ([x3:rep_plus X3] _exists2 X4 X5 ([x4:rep_plus X4] [x5:rep_plus X5] A a b x3 x4 x5)) c2 (exists_i X4 ([x3:rep_plus X4] _exists X5 ([x4:rep_plus X5] A a b c2 x3 x4)) d (exists_i X5 ([x3:rep_plus X5] A a b c2 d x3) e Q)))).
exists6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div} {a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} pf (A a b c1 d e f) -> pf (exists6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] A x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div] [a:rep_plus X1] [b:rep_plus X2] [c2:rep_plus X3] [d:rep_plus X4] [e:rep_plus X5] [f:rep_plus X6] [Q:pf (A a b c2 d e f)] exists_i X1 ([x3:rep_plus X1] exists5 X2 X3 X4 X5 X6 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] A x3 x4 x5 x6 x7 x8)) a (exists_i X2 ([x3:rep_plus X2] exists4 X3 X4 X5 X6 ([x4:rep_plus X3] [x5:rep_plus X4] [x6:rep_plus X5] [x7:rep_plus X6] A a x3 x4 x5 x6 x7)) b (exists_i X3 ([x3:rep_plus X3] exists3 X4 X5 X6 ([x4:rep_plus X4] [x5:rep_plus X5] [x6:rep_plus X6] A a b x3 x4 x5 x6)) c2 (exists_i X4 ([x3:rep_plus X4] _exists2 X5 X6 ([x4:rep_plus X5] [x5:rep_plus X6] A a b c2 x3 x4 x5)) d (exists_i X5 ([x3:rep_plus X5] _exists X6 ([x4:rep_plus X6] A a b c2 d x3 x4)) e (exists_i X6 ([x3:rep_plus X6] A a b c2 d e x3) f Q))))).
exists_e : {T:tp} {A:rep_plus T -> rep_plus rep_times} {B:rep_div} pf (exists T ([x3:rep_plus T] A x3)) -> ({x3:rep_plus T} pf (A x3) -> pf B) -> pf B = [T:tp] [A:rep_plus T -> rep_plus rep_times] [B:rep_div] [p1:pf (forall rep_times ([b:rep_plus rep_times] forall T ([x4:rep_plus T] A x4 imp b) imp b))] [p2:{x5:rep_plus T} pf (A x5) -> pf B] _imp_e (forall T ([x6:rep_plus T] A x6 imp B)) B (forall_e rep_times ([x3:rep_plus rep_times] forall T ([x7:rep_plus T] A x7 imp x3) imp x3) p1 B) (forall_i T ([x3:rep_plus T] A x3 imp B) ([x8:rep_plus T] _imp_i (A x8) B ([p3:pf (A x8)] p2 x8 p3))).
exists2_e : {X1:tp} {X2:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_div} {B:rep_div} pf (exists2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] A x3 x4)) -> ({a:rep_plus X1} {b:rep_plus X2} pf (A a b) -> pf B) -> pf B = [X1:tp] [X2:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_div] [B:rep_div] [p1:pf (exists2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] A x3 x4))] [p2:{a:rep_plus X1} {b:rep_plus X2} pf (A a b) -> pf B] exists_e X1 ([x3:rep_plus X1] _exists X2 ([x4:rep_plus X2] A x3 x4)) B p1 ([a:rep_plus X1] [p3:pf (exists X2 ([b:rep_plus X2] A a b))] exists_e X2 ([x3:rep_plus X2] A a x3) B p3 ([b:rep_plus X2] [p4:pf (A a b)] p2 a b p4)).
exists3_e : {X1:tp} {X2:tp} {X3:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} {B:rep_div} pf (exists3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] A x3 x4 x5)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} pf (A a b c1) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [B:rep_div] [p1:pf (exists3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] A x3 x4 x5))] [p2:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} pf (A a b c2) -> pf B] exists_e X1 ([x3:rep_plus X1] _exists2 X2 X3 ([x4:rep_plus X2] [x5:rep_plus X3] A x3 x4 x5)) B p1 ([a:rep_plus X1] [p3:pf (exists2 X2 X3 ([x3:rep_plus X2] [x4:rep_plus X3] A a x3 x4))] exists2_e X2 X3 ([x3:rep_plus X2] [x4:rep_plus X3] A a x3 x4) B p3 ([b:rep_plus X2] [c3:rep_plus X3] [p4:pf (A a b c3)] p2 a b c3 p4)).
exists4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div} {B:rep_div} pf (exists4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] A x3 x4 x5 x6)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} pf (A a b c1 d) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div] [B:rep_div] [p1:pf (exists4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] A x3 x4 x5 x6))] [p2:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} {d:rep_plus X4} pf (A a b c2 d) -> pf B] exists_e X1 ([x3:rep_plus X1] exists3 X2 X3 X4 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] A x3 x4 x5 x6)) B p1 ([a:rep_plus X1] [p3:pf (exists3 X2 X3 X4 ([x3:rep_plus X2] [x4:rep_plus X3] [x5:rep_plus X4] A a x3 x4 x5))] exists3_e X2 X3 X4 ([x3:rep_plus X2] [x4:rep_plus X3] [x5:rep_plus X4] A a x3 x4 x5) B p3 ([b:rep_plus X2] [c3:rep_plus X3] [d:rep_plus X4] [p4:pf (A a b c3 d)] p2 a b c3 d p4)).
exists5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div} {B:rep_div} pf (exists5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] A x3 x4 x5 x6 x7)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} pf (A a b c1 d e) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div] [B:rep_div] [p1:pf (exists5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] A x3 x4 x5 x6 x7))] [p2:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} pf (A a b c2 d e) -> pf B] exists_e X1 ([x3:rep_plus X1] exists4 X2 X3 X4 X5 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] A x3 x4 x5 x6 x7)) B p1 ([a:rep_plus X1] [p3:pf (exists4 X2 X3 X4 X5 ([x3:rep_plus X2] [x4:rep_plus X3] [x5:rep_plus X4] [x6:rep_plus X5] A a x3 x4 x5 x6))] exists4_e X2 X3 X4 X5 ([x3:rep_plus X2] [x4:rep_plus X3] [x5:rep_plus X4] [x6:rep_plus X5] A a x3 x4 x5 x6) B p3 ([b:rep_plus X2] [c3:rep_plus X3] [d:rep_plus X4] [e:rep_plus X5] [p4:pf (A a b c3 d e)] p2 a b c3 d e p4)).
exists6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div} {B:rep_div} pf (exists6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] A x3 x4 x5 x6 x7 x8)) -> ({a:rep_plus X1} {b:rep_plus X2} {c1:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} pf (A a b c1 d e f) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div] [B:rep_div] [p1:pf (exists6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] A x3 x4 x5 x6 x7 x8))] [p2:{a:rep_plus X1} {b:rep_plus X2} {c2:rep_plus X3} {d:rep_plus X4} {e:rep_plus X5} {f:rep_plus X6} pf (A a b c2 d e f) -> pf B] exists_e X1 ([x3:rep_plus X1] exists5 X2 X3 X4 X5 X6 ([x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] A x3 x4 x5 x6 x7 x8)) B p1 ([a:rep_plus X1] [p3:pf (exists5 X2 X3 X4 X5 X6 ([x3:rep_plus X2] [x4:rep_plus X3] [x5:rep_plus X4] [x6:rep_plus X5] [x7:rep_plus X6] A a x3 x4 x5 x6 x7))] exists5_e X2 X3 X4 X5 X6 ([x3:rep_plus X2] [x4:rep_plus X3] [x5:rep_plus X4] [x6:rep_plus X5] [x7:rep_plus X6] A a x3 x4 x5 x6 x7) B p3 ([b:rep_plus X2] [c3:rep_plus X3] [d:rep_plus X4] [e:rep_plus X5] [f:rep_plus X6] [p4:pf (A a b c3 d e f)] p2 a b c3 d e f p4)).
exists_ei : {X1:tp} {A:rep_plus X1 -> rep_plus rep_times} {B:rep_plus X1 -> rep_div} pf (exists X1 ([x3:rep_plus X1] A x3)) -> ({x3:rep_plus X1} pf (A x3) -> pf (B x3)) -> pf (exists X1 ([x3:rep_plus X1] B x3)) = [X1:tp] [A:rep_plus X1 -> rep_plus rep_times] [B:rep_plus X1 -> rep_div] [p1:pf (exists X1 ([x3:rep_plus X1] A x3))] [l8:{x4:rep_plus X1} pf (A x4) -> pf (B x4)] exists_e X1 ([x3:rep_plus X1] A x3) (exists X1 ([x3:rep_plus X1] B x3)) p1 ([x5:rep_plus X1] [p2:pf (A x5)] exists_i X1 ([x3:rep_plus X1] B x3) x5 (l8 x5 p2)).
beta_e : {T2:tp} {T1:tp} {F:rep_plus T1 -> rep_plus T2} {A:rep_plus T1} {h:rep_plus T2 -> rep_plus rep_times} pf (h (@ T1 T2 (_lam T1 T2 ([x3:rep_plus T1] F x3)) A)) -> pf (h (F A)) = [T2:tp] [T1:tp] [F:rep_plus T1 -> rep_plus T2] [A:rep_plus T1] [h:rep_plus T2 -> rep_plus rep_times] [x3:pf (h (@ T1 T2 (_lam T1 T2 ([x3:rep_plus T1] F x3)) A))] _beta_e T1 T2 ([x4:rep_plus T1] F x4) A ([x4:rep_plus T2] h x4) x3.
beta_i : {T2:tp} {T1:tp} {F:rep_plus T1 -> rep_plus T2} {A:rep_plus T1} {h:rep_plus T2 -> rep_plus rep_times} pf (h (F A)) -> pf (h (@ T1 T2 (lam T1 T2 ([x3:rep_plus T1] F x3)) A)) = [T2:tp] [T1:tp] [F:rep_plus T1 -> rep_plus T2] [A:rep_plus T1] [h:rep_plus T2 -> rep_plus rep_times] [p1:pf (h (F A))] _imp_e (h (F A)) (h (@ T1 T2 (lam T1 T2 ([x3:rep_plus T1] F x3)) A)) (beta_e T2 T1 ([x3:rep_plus T1] F x3) A ([x3:rep_plus T2] h x3 imp h (@ T1 T2 (lam T1 T2 ([x4:rep_plus T1] F x4)) A)) (_imp_i (h (@ T1 T2 (_lam T1 T2 ([x3:rep_plus T1] F x3)) A)) (h (@ T1 T2 (_lam T1 T2 ([x3:rep_plus T1] F x3)) A)) ([p2:pf (h (@ T1 T2 (_lam T1 T2 ([x3:rep_plus T1] F x3)) A))] p2))) p1.
cut : {A:rep_div} {B:rep_div} pf A -> (pf A -> pf B) -> pf B = [A:rep_div] [B:rep_div] [p1:pf A] [p2:pf A -> pf B] _imp_e A B (_imp_i A B ([x3:pf A] p2 x3)) p1.
refl : {X1:tp} {X:rep_plus X1} pf (== X1 X X) = [X1:tp] [X:rep_plus X1] forall_i (X1 arrow rep_times) ([x3:rep_plus (X1 arrow rep_times)] _@_f X1 x3 X imp _@_f X1 x3 X) ([A:rep_plus (X1 arrow rep_times)] _imp_i (_@_f X1 A X) (_@_f X1 A X) ([P:pf (_@_f X1 A X)] P)).
congr : {T:tp} {A:rep_plus T} {B:rep_plus T} {h:rep_plus T -> rep_div} pf (== T A B) -> pf (h B) -> pf (h A) = [T:tp] [A:rep_plus T] [B:rep_plus T] [h:rep_plus T -> rep_div] [p1:pf (== T A B)] [p2:pf (h B)] beta_e rep_times T ([x3:rep_plus T] h x3) A ([i1:rep_plus rep_times] i1) (_imp_e (@ T rep_times (lam T rep_times ([x3:rep_plus T] h x3)) B) (@ T rep_times (lam T rep_times ([x3:rep_plus T] h x3)) A) (_forall_e (T arrow rep_times) ([g:rep_plus (T arrow rep_times)] @ T rep_times g B imp @ T rep_times g A) p1 (lam T rep_times ([x3:rep_plus T] h x3))) (beta_i rep_times T ([x3:rep_plus T] h x3) B ([i2:rep_plus rep_times] i2) p2)).
congr2 : {TA:tp} {TB:tp} {A1:rep_plus TA} {A2:rep_plus TA} {B1:rep_plus TB} {B2:rep_plus TB} {h:rep_plus TA -> rep_plus TB -> rep_plus rep_times} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (h A2 B2) -> pf (h A1 B1) = [TA:tp] [TB:tp] [A1:rep_plus TA] [A2:rep_plus TA] [B1:rep_plus TB] [B2:rep_plus TB] [h:rep_plus TA -> rep_plus TB -> rep_plus rep_times] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [p1:pf (h A2 B2)] cut (forall2 TA TB ([x3:rep_plus TA] [x4:rep_plus TB] == rep_times (h x3 x4) (h x3 x4))) (h A1 B1) (forall2_i TA TB ([x3:rep_plus TA] [x4:rep_plus TB] == rep_times (h x3 x4) (h x3 x4)) ([a:rep_plus TA] [b:rep_plus TB] refl rep_times (h a b))) ([p2:pf (forall2 TA TB ([a:rep_plus TA] [b:rep_plus TB] == rep_times (h a b) (h a b)))] congr TB B1 B2 ([b:rep_plus TB] h A1 b) eB (congr TA A1 A2 ([a:rep_plus TA] h a B2) eA p1)).
congr3 : {TA:tp} {TB:tp} {TC:tp} {A1:rep_plus TA} {A2:rep_plus TA} {B1:rep_plus TB} {B2:rep_plus TB} {C1:rep_plus TC} {C2:rep_plus TC} {h:rep_plus TA -> rep_plus TB -> rep_plus TC -> rep_plus rep_times} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (== TC C1 C2) -> pf (h A2 B2 C2) -> pf (h A1 B1 C1) = [TA:tp] [TB:tp] [TC:tp] [A1:rep_plus TA] [A2:rep_plus TA] [B1:rep_plus TB] [B2:rep_plus TB] [C1:rep_plus TC] [C2:rep_plus TC] [h:rep_plus TA -> rep_plus TB -> rep_plus TC -> rep_plus rep_times] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [eC:pf (== TC C1 C2)] [p1:pf (h A2 B2 C2)] cut (forall3 TA TB TC ([x3:rep_plus TA] [x4:rep_plus TB] [x5:rep_plus TC] == rep_times (h x3 x4 x5) (h x3 x4 x5))) (h A1 B1 C1) (forall3_i TA TB TC ([x3:rep_plus TA] [x4:rep_plus TB] [x5:rep_plus TC] == rep_times (h x3 x4 x5) (h x3 x4 x5)) ([a:rep_plus TA] [b:rep_plus TB] [c1:rep_plus TC] refl rep_times (h a b c1))) ([p2:pf (forall3 TA TB TC ([a:rep_plus TA] [b:rep_plus TB] [c2:rep_plus TC] == rep_times (h a b c2) (h a b c2)))] congr TC C1 C2 ([c3:rep_plus TC] h A1 B1 c3) eC (congr2 TA TB A1 A2 B1 B2 ([a:rep_plus TA] [b:rep_plus TB] h a b C2) eA eB p1)).
congr4 : {TA:tp} {TB:tp} {TC:tp} {TD:tp} {A1:rep_plus TA} {A2:rep_plus TA} {B1:rep_plus TB} {B2:rep_plus TB} {C1:rep_plus TC} {C2:rep_plus TC} {D1:rep_plus TD} {D2:rep_plus TD} {h:rep_plus TA -> rep_plus TB -> rep_plus TC -> rep_plus TD -> rep_plus rep_times} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (== TC C1 C2) -> pf (== TD D1 D2) -> pf (h A2 B2 C2 D2) -> pf (h A1 B1 C1 D1) = [TA:tp] [TB:tp] [TC:tp] [TD:tp] [A1:rep_plus TA] [A2:rep_plus TA] [B1:rep_plus TB] [B2:rep_plus TB] [C1:rep_plus TC] [C2:rep_plus TC] [D1:rep_plus TD] [D2:rep_plus TD] [h:rep_plus TA -> rep_plus TB -> rep_plus TC -> rep_plus TD -> rep_plus rep_times] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [eC:pf (== TC C1 C2)] [eD:pf (== TD D1 D2)] [p1:pf (h A2 B2 C2 D2)] cut (forall4 TA TB TC TD ([x3:rep_plus TA] [x4:rep_plus TB] [x5:rep_plus TC] [x6:rep_plus TD] == rep_times (h x3 x4 x5 x6) (h x3 x4 x5 x6))) (h A1 B1 C1 D1) (forall4_i TA TB TC TD ([x3:rep_plus TA] [x4:rep_plus TB] [x5:rep_plus TC] [x6:rep_plus TD] == rep_times (h x3 x4 x5 x6) (h x3 x4 x5 x6)) ([a:rep_plus TA] [b:rep_plus TB] [c1:rep_plus TC] [d:rep_plus TD] refl rep_times (h a b c1 d))) ([p2:pf (forall4 TA TB TC TD ([a:rep_plus TA] [b:rep_plus TB] [c2:rep_plus TC] [d:rep_plus TD] == rep_times (h a b c2 d) (h a b c2 d)))] congr2 TC TD C1 C2 D1 D2 ([c3:rep_plus TC] [d:rep_plus TD] h A1 B1 c3 d) eC eD (congr2 TA TB A1 A2 B1 B2 ([a:rep_plus TA] [b:rep_plus TB] h a b C2 D2) eA eB p1)).
congr5 : {TA:tp} {TB:tp} {TC:tp} {TD:tp} {TE:tp} {A1:rep_plus TA} {A2:rep_plus TA} {B1:rep_plus TB} {B2:rep_plus TB} {C1:rep_plus TC} {C2:rep_plus TC} {D1:rep_plus TD} {D2:rep_plus TD} {E1:rep_plus TE} {E2:rep_plus TE} {h:rep_plus TA -> rep_plus TB -> rep_plus TC -> rep_plus TD -> rep_plus TE -> rep_plus rep_times} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (== TC C1 C2) -> pf (== TD D1 D2) -> pf (== TE E1 E2) -> pf (h A2 B2 C2 D2 E2) -> pf (h A1 B1 C1 D1 E1) = [TA:tp] [TB:tp] [TC:tp] [TD:tp] [TE:tp] [A1:rep_plus TA] [A2:rep_plus TA] [B1:rep_plus TB] [B2:rep_plus TB] [C1:rep_plus TC] [C2:rep_plus TC] [D1:rep_plus TD] [D2:rep_plus TD] [E1:rep_plus TE] [E2:rep_plus TE] [h:rep_plus TA -> rep_plus TB -> rep_plus TC -> rep_plus TD -> rep_plus TE -> rep_plus rep_times] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [eC:pf (== TC C1 C2)] [eD:pf (== TD D1 D2)] [eE:pf (== TE E1 E2)] [p1:pf (h A2 B2 C2 D2 E2)] cut (forall5 TA TB TC TD TE ([x3:rep_plus TA] [x4:rep_plus TB] [x5:rep_plus TC] [x6:rep_plus TD] [x7:rep_plus TE] == rep_times (h x3 x4 x5 x6 x7) (h x3 x4 x5 x6 x7))) (h A1 B1 C1 D1 E1) (forall5_i TA TB TC TD TE ([x3:rep_plus TA] [x4:rep_plus TB] [x5:rep_plus TC] [x6:rep_plus TD] [x7:rep_plus TE] == rep_times (h x3 x4 x5 x6 x7) (h x3 x4 x5 x6 x7)) ([a:rep_plus TA] [b:rep_plus TB] [c1:rep_plus TC] [d:rep_plus TD] [e:rep_plus TE] refl rep_times (h a b c1 d e))) ([p2:pf (forall5 TA TB TC TD TE ([a:rep_plus TA] [b:rep_plus TB] [c2:rep_plus TC] [d:rep_plus TD] [e:rep_plus TE] == rep_times (h a b c2 d e) (h a b c2 d e)))] congr TE E1 E2 ([e:rep_plus TE] h A1 B1 C1 D1 e) eE (congr4 TA TB TC TD A1 A2 B1 B2 C1 C2 D1 D2 ([a:rep_plus TA] [b:rep_plus TB] [c3:rep_plus TC] [d:rep_plus TD] h a b c3 d E2) eA eB eC eD p1)).
symm : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} pf (== X1 A B) -> pf (== X1 B A) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [p1:pf (== X1 A B)] congr X1 A B ([i1:rep_plus X1] == X1 B i1) p1 (refl X1 B).
trans : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {C:rep_plus X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 A C) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [C:rep_plus X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] congr X1 C B ([i1:rep_plus X1] eq X1 A i1) (symm X1 B C p2) p1.
trans2 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {C:rep_plus X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 A C) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [C:rep_plus X1] [x3:pf (== X1 A B)] [x4:pf (== X1 B C)] trans X1 A B C x3 x4.
trans3 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {C:rep_plus X1} {D:rep_plus X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 C D) -> pf (== X1 A D) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [C:rep_plus X1] [D:rep_plus X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] [p3:pf (== X1 C D)] trans X1 A C D (trans2 X1 A B C p1 p2) p3.
trans4 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {C:rep_plus X1} {D:rep_plus X1} {E:rep_plus X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 C D) -> pf (== X1 D E) -> pf (== X1 A E) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [C:rep_plus X1] [D:rep_plus X1] [E:rep_plus X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] [p3:pf (== X1 C D)] [p4:pf (== X1 D E)] trans X1 A D E (trans3 X1 A B C D p1 p2 p3) p4.
trans5 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {C:rep_plus X1} {D:rep_plus X1} {E:rep_plus X1} {F:rep_plus X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 C D) -> pf (== X1 D E) -> pf (== X1 E F) -> pf (== X1 A F) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [C:rep_plus X1] [D:rep_plus X1] [E:rep_plus X1] [F:rep_plus X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] [p3:pf (== X1 C D)] [p4:pf (== X1 D E)] [p5:pf (== X1 E F)] trans X1 A E F (trans4 X1 A B C D E p1 p2 p3 p4) p5.
cut2 : {A:rep_div} {B:rep_div} {C:rep_div} pf A -> pf B -> (pf A -> pf B -> pf C) -> pf C = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf A] [p2:pf B] [p3:pf A -> pf B -> pf C] cut A C p1 ([z1:pf A] cut B C p2 ([z2:pf B] p3 z1 z2)).
cut3 : {A:rep_div} {B:rep_div} {C:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> (pf A -> pf B -> pf C -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf A -> pf B -> pf C -> pf Res] cut2 A B Res p1 p2 ([z1:pf A] [z2:pf B] cut C Res p3 ([z3:pf C] p4 z1 z2 z3)).
cut4 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> pf D -> (pf A -> pf B -> pf C -> pf D -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf A -> pf B -> pf C -> pf D -> pf Res] cut3 A B C Res p1 p2 p3 ([z1:pf A] [z2:pf B] [z3:pf C] cut D Res p4 ([z4:pf D] p5 z1 z2 z3 z4)).
cut5 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf A -> pf B -> pf C -> pf D -> pf E -> pf Res] cut4 A B C D Res p1 p2 p3 p4 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] cut E Res p5 ([z5:pf E] p6 z1 z2 z3 z4 z5)).
cut6 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Res] cut5 A B C D E Res p1 p2 p3 p4 p5 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] cut F Res p6 ([z6:pf F] p7 z1 z2 z3 z4 z5 z6)).
cut7 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Res] cut6 A B C D E F Res p1 p2 p3 p4 p5 p6 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] cut G Res p7 ([z7:pf G] p8 z1 z2 z3 z4 z5 z6 z7)).
cut8 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Res] cut7 A B C D E F G Res p1 p2 p3 p4 p5 p6 p7 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] cut H Res p8 ([z8:pf H] p9 z1 z2 z3 z4 z5 z6 z7 z8)).
cut9 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Res] cut8 A B C D E F G H Res p1 p2 p3 p4 p5 p6 p7 p8 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] cut I Res p9 ([z9:pf I] p10 z1 z2 z3 z4 z5 z6 z7 z8 z9)).
cut10 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut J Res p10 ([z10:pf J] p11 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10)).
cut12 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} {L:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [L:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut3 J K L Res p10 p11 p12 ([z10:pf J] [z11:pf K] [z12:pf L] p13 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12)).
cut14 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} {L:rep_div} {M:rep_div} {O:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [L:rep_div] [M:rep_div] [O:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] [p14:pf O] [p15:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut5 J K L M O Res p10 p11 p12 p13 p14 ([z10:pf J] [z11:pf K] [z12:pf L] [z13:pf M] [z14:pf O] p15 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12 z13 z14)).
cut16 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} {L:rep_div} {M:rep_div} {O:rep_div} {P:rep_div} {Q:rep_div} {Res:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf P -> pf Q -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf P -> pf Q -> pf Res) -> pf Res = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [L:rep_div] [M:rep_div] [O:rep_div] [P:rep_div] [Q:rep_div] [Res:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] [p14:pf O] [p15:pf P] [p16:pf Q] [p17:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf P -> pf Q -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut7 J K L M O P Q Res p10 p11 p12 p13 p14 p15 p16 ([z10:pf J] [z11:pf K] [z12:pf L] [z13:pf M] [z14:pf O] [z15:pf P] [z16:pf Q] p17 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12 z13 z14 z15 z16)).
strictify : {X1:tp} {A:rep_div} rep_plus X1 -> pf A -> pf A = [X1:tp] [A:rep_div] [x3:rep_plus X1] [p1:pf A] cut (== X1 x3 x3) A (refl X1 x3) ([p2:pf (== X1 x3 x3)] p1).
strictify3 : {T1:tp} {T2:tp} {T3:tp} {A:rep_div} (rep_plus T1 -> rep_plus T2 -> rep_plus T3) -> pf A -> pf A = [T1:tp] [T2:tp] [T3:tp] [A:rep_div] [f:rep_plus T1 -> rep_plus T2 -> rep_plus T3] [p1:pf A] cut (forall2 T1 T2 ([x3:rep_plus T1] [x4:rep_plus T2] == T3 (f x3 x4) (f x3 x4))) A (forall2_i T1 T2 ([x3:rep_plus T1] [x4:rep_plus T2] == T3 (f x3 x4) (f x3 x4)) ([a:rep_plus T1] [b:rep_plus T2] refl T3 (f a b))) ([p2:pf (forall2 T1 T2 ([x3:rep_plus T1] [y:rep_plus T2] == T3 (f x3 y) (f x3 y)))] p1).
beta : {X1:tp} {X2:tp} {F:rep_plus X2 -> rep_plus X1} {A:rep_plus X2} pf (== X1 (@ X2 X1 (lam X2 X1 ([x3:rep_plus X2] F x3)) A) (F A)) = [X1:tp] [X2:tp] [F:rep_plus X2 -> rep_plus X1] [A:rep_plus X2] forall_i (X1 arrow rep_times) ([x3:rep_plus (X1 arrow rep_times)] @ X1 rep_times x3 (F A) imp @ X1 rep_times x3 (@ X2 X1 (lam X2 X1 ([x4:rep_plus X2] F x4)) A)) ([g:rep_plus (X1 arrow rep_times)] _imp_i (@ X1 rep_times g (F A)) (@ X1 rep_times g (@ X2 X1 (lam X2 X1 ([x3:rep_plus X2] F x3)) A)) ([p1:pf (@ X1 rep_times g (F A))] beta_i X1 X2 ([x3:rep_plus X2] F x3) A ([c1:rep_plus X1] @ X1 rep_times g c1) p1)).
beta1 : {X1:tp} {X2:tp} {X3:rep_plus X2 -> rep_plus X1} {X4:rep_plus X2} pf (== X1 (@ X2 X1 (lam X2 X1 ([x3:rep_plus X2] X3 x3)) X4) (X3 X4)) = [X1:tp] [X2:tp] [X3:rep_plus X2 -> rep_plus X1] [X4:rep_plus X2] beta X1 X2 ([x3:rep_plus X2] X3 x3) X4.
beta2 : {X1:tp} {X2:tp} {X3:tp} {F:rep_plus X3 -> rep_plus X2 -> rep_plus X1} {A:rep_plus X3} {B:rep_plus X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (lam2 X3 X2 X1 ([x3:rep_plus X3] [x4:rep_plus X2] F x3 x4)) A) B) (F A B)) = [X1:tp] [X2:tp] [X3:tp] [F:rep_plus X3 -> rep_plus X2 -> rep_plus X1] [A:rep_plus X3] [B:rep_plus X2] congr (X2 arrow X1) (@ X3 (X2 arrow X1) (lam X3 (X2 arrow X1) ([x3:rep_plus X3] _lam X2 X1 ([x4:rep_plus X2] F x3 x4))) A) (_lam X2 X1 ([x3:rep_plus X2] F A x3)) ([i1:rep_plus (X2 arrow X1)] == X1 (@ X2 X1 i1 B) (F A B)) (beta (X2 arrow X1) X3 ([x3:rep_plus X3] _lam X2 X1 ([x4:rep_plus X2] F x3 x4)) A) (beta X1 X2 ([x3:rep_plus X2] F A x3) B).
beta3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F:rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1} {A:rep_plus X4} {B:rep_plus X3} {C:rep_plus X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (lam3 X4 X3 X2 X1 ([x3:rep_plus X4] [x4:rep_plus X3] [x5:rep_plus X2] F x3 x4 x5)) A) B) C) (F A B C)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F:rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1] [A:rep_plus X4] [B:rep_plus X3] [C:rep_plus X2] congr (X2 arrow X1) (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (lam2 X4 X3 (X2 arrow X1) ([x3:rep_plus X4] [x4:rep_plus X3] _lam X2 X1 ([x5:rep_plus X2] F x3 x4 x5))) A) B) (_lam X2 X1 ([x3:rep_plus X2] F A B x3)) ([i1:rep_plus (X2 arrow X1)] == X1 (@ X2 X1 i1 C) (F A B C)) (beta2 (X2 arrow X1) X3 X4 ([x3:rep_plus X4] [x4:rep_plus X3] _lam X2 X1 ([x5:rep_plus X2] F x3 x4 x5)) A B) (beta X1 X2 ([x3:rep_plus X2] F A B x3) C).
beta4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F:rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1} {A:rep_plus X5} {B:rep_plus X4} {C:rep_plus X3} {D:rep_plus X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (lam4 X5 X4 X3 X2 X1 ([x3:rep_plus X5] [x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] F x3 x4 x5 x6)) A) B) C) D) (F A B C D)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F:rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1] [A:rep_plus X5] [B:rep_plus X4] [C:rep_plus X3] [D:rep_plus X2] congr (X3 arrow X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (lam2 X5 X4 (X3 arrow X2 arrow X1) ([x3:rep_plus X5] [x4:rep_plus X4] _lam2 X3 X2 X1 ([x5:rep_plus X3] [x6:rep_plus X2] F x3 x4 x5 x6))) A) B) (_lam2 X3 X2 X1 ([x3:rep_plus X3] [x4:rep_plus X2] F A B x3 x4)) ([i1:rep_plus (X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) i1 C) D) (F A B C D)) (beta2 (X3 arrow X2 arrow X1) X4 X5 ([x3:rep_plus X5] [x4:rep_plus X4] _lam2 X3 X2 X1 ([x5:rep_plus X3] [x6:rep_plus X2] F x3 x4 x5 x6)) A B) (beta2 X1 X2 X3 ([x3:rep_plus X3] [x4:rep_plus X2] F A B x3 x4) C D).
beta5 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {F:rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1} {A:rep_plus X6} {B:rep_plus X5} {C:rep_plus X4} {D:rep_plus X3} {E:rep_plus X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam5 X6 X5 X4 X3 X2 X1 ([x3:rep_plus X6] [x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] [x7:rep_plus X2] F x3 x4 x5 x6 x7)) A) B) C) D) E) (F A B C D E)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [F:rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1] [A:rep_plus X6] [B:rep_plus X5] [C:rep_plus X4] [D:rep_plus X3] [E:rep_plus X2] congr (X2 arrow X1) (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X6 X5 X4 X3 (X2 arrow X1) ([x3:rep_plus X6] [x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] _lam X2 X1 ([x7:rep_plus X2] F x3 x4 x5 x6 x7))) A) B) C) D) (_lam X2 X1 ([x3:rep_plus X2] F A B C D x3)) ([i1:rep_plus (X2 arrow X1)] == X1 (@ X2 X1 i1 E) (F A B C D E)) (beta4 (X2 arrow X1) X3 X4 X5 X6 ([x3:rep_plus X6] [x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] _lam X2 X1 ([x7:rep_plus X2] F x3 x4 x5 x6 x7)) A B C D) (beta X1 X2 ([x3:rep_plus X2] F A B C D x3) E).
beta6 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {Fun:rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1} {A:rep_plus X7} {B:rep_plus X6} {C:rep_plus X5} {D:rep_plus X4} {E:rep_plus X3} {F:rep_plus X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam6 X7 X6 X5 X4 X3 X2 X1 ([x3:rep_plus X7] [x4:rep_plus X6] [x5:rep_plus X5] [x6:rep_plus X4] [x7:rep_plus X3] [x8:rep_plus X2] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F) (Fun A B C D E F)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [Fun:rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1] [A:rep_plus X7] [B:rep_plus X6] [C:rep_plus X5] [D:rep_plus X4] [E:rep_plus X3] [F:rep_plus X2] congr (X3 arrow X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X7 X6 X5 X4 (X3 arrow X2 arrow X1) ([x3:rep_plus X7] [x4:rep_plus X6] [x5:rep_plus X5] [x6:rep_plus X4] _lam2 X3 X2 X1 ([x7:rep_plus X3] [x8:rep_plus X2] Fun x3 x4 x5 x6 x7 x8))) A) B) C) D) (_lam2 X3 X2 X1 ([x3:rep_plus X3] [x4:rep_plus X2] Fun A B C D x3 x4)) ([i1:rep_plus (X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) i1 E) F) (Fun A B C D E F)) (beta4 (X3 arrow X2 arrow X1) X4 X5 X6 X7 ([x3:rep_plus X7] [x4:rep_plus X6] [x5:rep_plus X5] [x6:rep_plus X4] _lam2 X3 X2 X1 ([x7:rep_plus X3] [x8:rep_plus X2] Fun x3 x4 x5 x6 x7 x8)) A B C D) (beta2 X1 X2 X3 ([x3:rep_plus X3] [x4:rep_plus X2] Fun A B C D x3 x4) E F).
beta7 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1} {A:rep_plus X8} {B:rep_plus X7} {C:rep_plus X6} {D:rep_plus X5} {E:rep_plus X4} {F:rep_plus X3} {G:rep_plus X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam7 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:rep_plus X8] [x4:rep_plus X7] [x5:rep_plus X6] [x6:rep_plus X5] [x7:rep_plus X4] [x8:rep_plus X3] [x9:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G) (Fun A B C D E F G)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1] [A:rep_plus X8] [B:rep_plus X7] [C:rep_plus X6] [D:rep_plus X5] [E:rep_plus X4] [F:rep_plus X3] [G:rep_plus X2] congr (X4 arrow X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X8 X7 X6 X5 (X4 arrow X3 arrow X2 arrow X1) ([x3:rep_plus X8] [x4:rep_plus X7] [x5:rep_plus X6] [x6:rep_plus X5] _lam3 X4 X3 X2 X1 ([x7:rep_plus X4] [x8:rep_plus X3] [x9:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9))) A) B) C) D) (_lam3 X4 X3 X2 X1 ([x3:rep_plus X4] [x4:rep_plus X3] [x5:rep_plus X2] Fun A B C D x3 x4 x5)) ([i1:rep_plus (X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) i1 E) F) G) (Fun A B C D E F G)) (beta4 (X4 arrow X3 arrow X2 arrow X1) X5 X6 X7 X8 ([x3:rep_plus X8] [x4:rep_plus X7] [x5:rep_plus X6] [x6:rep_plus X5] _lam3 X4 X3 X2 X1 ([x7:rep_plus X4] [x8:rep_plus X3] [x9:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9)) A B C D) (beta3 X1 X2 X3 X4 ([x3:rep_plus X4] [x4:rep_plus X3] [x5:rep_plus X2] Fun A B C D x3 x4 x5) E F G).
beta8 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {Fun:rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1} {A:rep_plus X9} {B:rep_plus X8} {C:rep_plus X7} {D:rep_plus X6} {E:rep_plus X5} {F:rep_plus X4} {G:rep_plus X3} {H:rep_plus X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:rep_plus X9] [x4:rep_plus X8] [x5:rep_plus X7] [x6:rep_plus X6] [x7:rep_plus X5] [x8:rep_plus X4] [x9:rep_plus X3] [x10:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [Fun:rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1] [A:rep_plus X9] [B:rep_plus X8] [C:rep_plus X7] [D:rep_plus X6] [E:rep_plus X5] [F:rep_plus X4] [G:rep_plus X3] [H:rep_plus X2] congr (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X9 X8 X7 X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) ([x3:rep_plus X9] [x4:rep_plus X8] [x5:rep_plus X7] [x6:rep_plus X6] lam4 X5 X4 X3 X2 X1 ([x7:rep_plus X5] [x8:rep_plus X4] [x9:rep_plus X3] [x10:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10))) A) B) C) D) (lam4 X5 X4 X3 X2 X1 ([x3:rep_plus X5] [x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] Fun A B C D x3 x4 x5 x6)) ([i1:rep_plus (X5 arrow X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) i1 E) F) G) H) (Fun A B C D E F G H)) (beta4 (X5 arrow X4 arrow X3 arrow X2 arrow X1) X6 X7 X8 X9 ([x3:rep_plus X9] [x4:rep_plus X8] [x5:rep_plus X7] [x6:rep_plus X6] lam4 X5 X4 X3 X2 X1 ([x7:rep_plus X5] [x8:rep_plus X4] [x9:rep_plus X3] [x10:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A B C D) (beta4 X1 X2 X3 X4 X5 ([x3:rep_plus X5] [x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] Fun A B C D x3 x4 x5 x6) E F G H).
beta10 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {Fun:rep_plus X11 -> rep_plus X10 -> rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1} {A:rep_plus X11} {B:rep_plus X10} {C:rep_plus X9} {D:rep_plus X8} {E:rep_plus X7} {F:rep_plus X6} {G:rep_plus X5} {H:rep_plus X4} {I:rep_plus X3} {J:rep_plus X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam10 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:rep_plus X11] [x4:rep_plus X10] [x5:rep_plus X9] [x6:rep_plus X8] [x7:rep_plus X7] [x8:rep_plus X6] [x9:rep_plus X5] [x10:rep_plus X4] [x11:rep_plus X3] [x12:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J) (Fun A B C D E F G H I J)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [Fun:rep_plus X11 -> rep_plus X10 -> rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1] [A:rep_plus X11] [B:rep_plus X10] [C:rep_plus X9] [D:rep_plus X8] [E:rep_plus X7] [F:rep_plus X6] [G:rep_plus X5] [H:rep_plus X4] [I:rep_plus X3] [J:rep_plus X2] congr (X3 arrow X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X11 X10 X9 X8 X7 X6 X5 X4 (X3 arrow X2 arrow X1) ([x3:rep_plus X11] [x4:rep_plus X10] [x5:rep_plus X9] [x6:rep_plus X8] [x7:rep_plus X7] [x8:rep_plus X6] [x9:rep_plus X5] [x10:rep_plus X4] _lam2 X3 X2 X1 ([x11:rep_plus X3] [x12:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12))) A) B) C) D) E) F) G) H) (_lam2 X3 X2 X1 ([x3:rep_plus X3] [x4:rep_plus X2] Fun A B C D E F G H x3 x4)) ([i1:rep_plus (X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) i1 I) J) (Fun A B C D E F G H I J)) (beta8 (X3 arrow X2 arrow X1) X4 X5 X6 X7 X8 X9 X10 X11 ([x3:rep_plus X11] [x4:rep_plus X10] [x5:rep_plus X9] [x6:rep_plus X8] [x7:rep_plus X7] [x8:rep_plus X6] [x9:rep_plus X5] [x10:rep_plus X4] _lam2 X3 X2 X1 ([x11:rep_plus X3] [x12:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A B C D E F G H) (beta2 X1 X2 X3 ([x3:rep_plus X3] [x4:rep_plus X2] Fun A B C D E F G H x3 x4) I J).
beta11 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {Fun:rep_plus X12 -> rep_plus X11 -> rep_plus X10 -> rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1} {A:rep_plus X12} {B:rep_plus X11} {C:rep_plus X10} {D:rep_plus X9} {E:rep_plus X8} {F:rep_plus X7} {G:rep_plus X6} {H:rep_plus X5} {I:rep_plus X4} {J:rep_plus X3} {K:rep_plus X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam11 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:rep_plus X12] [x4:rep_plus X11] [x5:rep_plus X10] [x6:rep_plus X9] [x7:rep_plus X8] [x8:rep_plus X7] [x9:rep_plus X6] [x10:rep_plus X5] [x11:rep_plus X4] [x12:rep_plus X3] [x13:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) K) (Fun A B C D E F G H I J K)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [Fun:rep_plus X12 -> rep_plus X11 -> rep_plus X10 -> rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1] [A:rep_plus X12] [B:rep_plus X11] [C:rep_plus X10] [D:rep_plus X9] [E:rep_plus X8] [F:rep_plus X7] [G:rep_plus X6] [H:rep_plus X5] [I:rep_plus X4] [J:rep_plus X3] [K:rep_plus X2] congr (X4 arrow X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X12 X11 X10 X9 X8 X7 X6 X5 (X4 arrow X3 arrow X2 arrow X1) ([x3:rep_plus X12] [x4:rep_plus X11] [x5:rep_plus X10] [x6:rep_plus X9] [x7:rep_plus X8] [x8:rep_plus X7] [x9:rep_plus X6] [x10:rep_plus X5] _lam3 X4 X3 X2 X1 ([x11:rep_plus X4] [x12:rep_plus X3] [x13:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13))) A) B) C) D) E) F) G) H) (_lam3 X4 X3 X2 X1 ([x3:rep_plus X4] [x4:rep_plus X3] [x5:rep_plus X2] Fun A B C D E F G H x3 x4 x5)) ([i1:rep_plus (X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) i1 I) J) K) (Fun A B C D E F G H I J K)) (beta8 (X4 arrow X3 arrow X2 arrow X1) X5 X6 X7 X8 X9 X10 X11 X12 ([x3:rep_plus X12] [x4:rep_plus X11] [x5:rep_plus X10] [x6:rep_plus X9] [x7:rep_plus X8] [x8:rep_plus X7] [x9:rep_plus X6] [x10:rep_plus X5] _lam3 X4 X3 X2 X1 ([x11:rep_plus X4] [x12:rep_plus X3] [x13:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A B C D E F G H) (beta3 X1 X2 X3 X4 ([x3:rep_plus X4] [x4:rep_plus X3] [x5:rep_plus X2] Fun A B C D E F G H x3 x4 x5) I J K).
beta14 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {X15:tp} {Fun:rep_plus X15 -> rep_plus X14 -> rep_plus X13 -> rep_plus X12 -> rep_plus X11 -> rep_plus X10 -> rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1} {A:rep_plus X15} {B:rep_plus X14} {C:rep_plus X13} {D:rep_plus X12} {E:rep_plus X11} {F:rep_plus X10} {G:rep_plus X9} {H:rep_plus X8} {I:rep_plus X7} {J:rep_plus X6} {K:rep_plus X5} {L:rep_plus X4} {M:rep_plus X3} {N:rep_plus X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X15 (X14 arrow X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam14 X15 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:rep_plus X15] [x4:rep_plus X14] [x5:rep_plus X13] [x6:rep_plus X12] [x7:rep_plus X11] [x8:rep_plus X10] [x9:rep_plus X9] [x10:rep_plus X8] [x11:rep_plus X7] [x12:rep_plus X6] [x13:rep_plus X5] [x14:rep_plus X4] [x15:rep_plus X3] [x16:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [X15:tp] [Fun:rep_plus X15 -> rep_plus X14 -> rep_plus X13 -> rep_plus X12 -> rep_plus X11 -> rep_plus X10 -> rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1] [A:rep_plus X15] [B:rep_plus X14] [C:rep_plus X13] [D:rep_plus X12] [E:rep_plus X11] [F:rep_plus X10] [G:rep_plus X9] [H:rep_plus X8] [I:rep_plus X7] [J:rep_plus X6] [K:rep_plus X5] [L:rep_plus X4] [M:rep_plus X3] [N:rep_plus X2] congr (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X15 (X14 arrow X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X15 X14 X13 X12 X11 X10 X9 X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) ([x3:rep_plus X15] [x4:rep_plus X14] [x5:rep_plus X13] [x6:rep_plus X12] [x7:rep_plus X11] [x8:rep_plus X10] [x9:rep_plus X9] [x10:rep_plus X8] lam6 X7 X6 X5 X4 X3 X2 X1 ([x11:rep_plus X7] [x12:rep_plus X6] [x13:rep_plus X5] [x14:rep_plus X4] [x15:rep_plus X3] [x16:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16))) A) B) C) D) E) F) G) H) (lam6 X7 X6 X5 X4 X3 X2 X1 ([x3:rep_plus X7] [x4:rep_plus X6] [x5:rep_plus X5] [x6:rep_plus X4] [x7:rep_plus X3] [x8:rep_plus X2] Fun A B C D E F G H x3 x4 x5 x6 x7 x8)) ([i1:rep_plus (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) i1 I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N)) (beta8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) X8 X9 X10 X11 X12 X13 X14 X15 ([x3:rep_plus X15] [x4:rep_plus X14] [x5:rep_plus X13] [x6:rep_plus X12] [x7:rep_plus X11] [x8:rep_plus X10] [x9:rep_plus X9] [x10:rep_plus X8] lam6 X7 X6 X5 X4 X3 X2 X1 ([x11:rep_plus X7] [x12:rep_plus X6] [x13:rep_plus X5] [x14:rep_plus X4] [x15:rep_plus X3] [x16:rep_plus X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A B C D E F G H) (beta6 X1 X2 X3 X4 X5 X6 X7 ([x3:rep_plus X7] [x4:rep_plus X6] [x5:rep_plus X5] [x6:rep_plus X4] [x7:rep_plus X3] [x8:rep_plus X2] Fun A B C D E F G H x3 x4 x5 x6 x7 x8) I J K L M N).
congr_app : {X1:tp} {X2:tp} {X3:rep_plus (X1 arrow X2)} {X4:rep_plus (X1 arrow X2)} {Y1:rep_plus X1} {Y2:rep_plus X1} pf (== (X1 arrow X2) X3 X4) -> pf (== X1 Y1 Y2) -> pf (== X2 (@ X1 X2 X3 Y1) (@ X1 X2 X4 Y2)) = [X1:tp] [X2:tp] [X3:rep_plus (X1 arrow X2)] [X4:rep_plus (X1 arrow X2)] [Y1:rep_plus X1] [Y2:rep_plus X1] [p1:pf (== (X1 arrow X2) X3 X4)] [p2:pf (== X1 Y1 Y2)] congr (X1 arrow X2) X3 X4 ([W:rep_plus (X1 arrow X2)] == X2 (@ X1 X2 W Y1) (@ X1 X2 X4 Y2)) p1 (congr X1 Y1 Y2 ([W:rep_plus X1] == X2 (@ X1 X2 X4 W) (@ X1 X2 X4 Y2)) p2 (refl X2 (@ X1 X2 X4 Y2))).
congr_app_1 : {X1:tp} {X2:tp} {X3:rep_plus (X1 arrow X2)} {X4:rep_plus (X1 arrow X2)} {Y:rep_plus X1} pf (== (X1 arrow X2) X3 X4) -> pf (== X2 (@ X1 X2 X3 Y) (@ X1 X2 X4 Y)) = [X1:tp] [X2:tp] [X3:rep_plus (X1 arrow X2)] [X4:rep_plus (X1 arrow X2)] [Y:rep_plus X1] [p1:pf (== (X1 arrow X2) X3 X4)] congr_app X1 X2 X3 X4 Y Y p1 (refl X1 Y).
congr_app_2 : {X1:tp} {Y1:rep_plus X1} {Y2:rep_plus X1} {X2:tp} {X:rep_plus (X1 arrow X2)} pf (== X1 Y1 Y2) -> pf (== X2 (@ X1 X2 X Y1) (@ X1 X2 X Y2)) = [X1:tp] [Y1:rep_plus X1] [Y2:rep_plus X1] [X2:tp] [X:rep_plus (X1 arrow X2)] [p1:pf (== X1 Y1 Y2)] congr_app X1 X2 X X Y1 Y2 (refl (X1 arrow X2) X) p1.
congr_app2 : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus (X1 arrow X2 arrow X3)} {X5:rep_plus (X1 arrow X2 arrow X3)} {Y1:rep_plus X1} {Y2:rep_plus X1} {Z1:rep_plus X2} {Z2:rep_plus X2} pf (== (X1 arrow X2 arrow X3) X4 X5) -> pf (== X1 Y1 Y2) -> pf (== X2 Z1 Z2) -> pf (== X3 (@ X2 X3 (@ X1 (X2 arrow X3) X4 Y1) Z1) (@ X2 X3 (@ X1 (X2 arrow X3) X5 Y2) Z2)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus (X1 arrow X2 arrow X3)] [X5:rep_plus (X1 arrow X2 arrow X3)] [Y1:rep_plus X1] [Y2:rep_plus X1] [Z1:rep_plus X2] [Z2:rep_plus X2] [p1:pf (== (X1 arrow X2 arrow X3) X4 X5)] [p2:pf (== X1 Y1 Y2)] [p3:pf (== X2 Z1 Z2)] congr3 (X1 arrow X2 arrow X3) X1 X2 X4 X5 Y1 Y2 Z1 Z2 ([u:rep_plus (X1 arrow X2 arrow X3)] [v1:rep_plus X1] [w:rep_plus X2] == X3 (@ X2 X3 (@ X1 (X2 arrow X3) u v1) w) (@ X2 X3 (@ X1 (X2 arrow X3) X5 Y2) Z2)) p1 p2 p3 (refl X3 (@ X2 X3 (@ X1 (X2 arrow X3) X5 Y2) Z2)).
congr_app2_2 : {X1:tp} {Y1:rep_plus X1} {Y2:rep_plus X1} {X2:tp} {X3:tp} {X:rep_plus (X1 arrow X3 arrow X2)} {Z:rep_plus X3} pf (eq X1 Y1 Y2) -> pf (eq X2 (@ X3 X2 (@ X1 (X3 arrow X2) X Y1) Z) (@ X3 X2 (@ X1 (X3 arrow X2) X Y2) Z)) = [X1:tp] [Y1:rep_plus X1] [Y2:rep_plus X1] [X2:tp] [X3:tp] [X:rep_plus (X1 arrow X3 arrow X2)] [Z:rep_plus X3] [p1:pf (eq X1 Y1 Y2)] congr_app2 X1 X3 X2 X X Y1 Y2 Z Z (refl (X1 arrow X3 arrow X2) X) p1 (refl X3 Z).
congr_app3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {W1:rep_plus (X1 arrow X2 arrow X3 arrow X4)} {W2:rep_plus (X1 arrow X2 arrow X3 arrow X4)} {X5:rep_plus X1} {X6:rep_plus X1} {Y1:rep_plus X2} {Y2:rep_plus X2} {Z1:rep_plus X3} {Z2:rep_plus X3} pf (eq (X1 arrow X2 arrow X3 arrow X4) W1 W2) -> pf (eq X1 X5 X6) -> pf (eq X2 Y1 Y2) -> pf (eq X3 Z1 Z2) -> pf (eq X4 (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W1 X5) Y1) Z1) (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W2 X6) Y2) Z2)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [W1:rep_plus (X1 arrow X2 arrow X3 arrow X4)] [W2:rep_plus (X1 arrow X2 arrow X3 arrow X4)] [X5:rep_plus X1] [X6:rep_plus X1] [Y1:rep_plus X2] [Y2:rep_plus X2] [Z1:rep_plus X3] [Z2:rep_plus X3] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4) W1 W2)] [p2:pf (eq X1 X5 X6)] [p3:pf (eq X2 Y1 Y2)] [p4:pf (eq X3 Z1 Z2)] congr4 (X1 arrow X2 arrow X3 arrow X4) X1 X2 X3 W1 W2 X5 X6 Y1 Y2 Z1 Z2 ([u:rep_plus (X1 arrow X2 arrow X3 arrow X4)] [v1:rep_plus X1] [w:rep_plus X2] [x3:rep_plus X3] eq X4 (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) u v1) w) x3) (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W2 X6) Y2) Z2)) p1 p2 p3 p4 (refl X4 (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W2 X6) Y2) Z2)).
def1_i : {X1:tp} {B:rep_plus X1 -> rep_div} {X:rep_plus X1} pf (B X) -> pf (@ X1 rep_times (lam X1 rep_times ([x3:rep_plus X1] B x3)) X) = [X1:tp] [B:rep_plus X1 -> rep_div] [X:rep_plus X1] [x3:pf (B X)] congr rep_times (@ X1 rep_times (lam X1 rep_times ([x4:rep_plus X1] B x4)) X) (B X) ([i1:rep_plus rep_times] i1) (beta rep_times X1 ([x4:rep_plus X1] B x4) X) x3.
def1_e : {X1:tp} {B:rep_plus X1 -> rep_plus rep_times} {X:rep_plus X1} pf (@ X1 rep_times (lam X1 rep_times ([x3:rep_plus X1] B x3)) X) -> pf (B X) = [X1:tp] [B:rep_plus X1 -> rep_plus rep_times] [X:rep_plus X1] [x3:pf (@ X1 rep_times (lam X1 rep_times ([x3:rep_plus X1] B x3)) X)] congr rep_times (B X) (@ X1 rep_times (lam X1 rep_times ([x4:rep_plus X1] B x4)) X) ([i1:rep_plus rep_times] i1) (symm rep_times (@ X1 rep_times (lam X1 rep_times ([x4:rep_plus X1] B x4)) X) (B X) (beta rep_times X1 ([x4:rep_plus X1] B x4) X)) x3.
def2_i : {X1:tp} {X2:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_div} {A:rep_plus X1} {B:rep_plus X2} pf (Fun A B) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) (lam2 X1 X2 rep_times ([x3:rep_plus X1] [x4:rep_plus X2] Fun x3 x4)) A) B) = [X1:tp] [X2:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_div] [A:rep_plus X1] [B:rep_plus X2] [x3:pf (Fun A B)] congr rep_times (@ X2 rep_times (@ X1 (X2 arrow rep_times) (lam2 X1 X2 rep_times ([x4:rep_plus X1] [x5:rep_plus X2] Fun x4 x5)) A) B) (Fun A B) ([i1:rep_plus rep_times] i1) (beta2 rep_times X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] Fun x4 x5) A B) x3.
def2_e : {X1:tp} {X2:tp} {Fun:rep_plus X2 -> rep_plus X1 -> rep_plus rep_times} {A:rep_plus X2} {B:rep_plus X1} pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (lam2 X2 X1 rep_times ([x3:rep_plus X2] [x4:rep_plus X1] Fun x3 x4)) A) B) -> pf (Fun A B) = [X1:tp] [X2:tp] [Fun:rep_plus X2 -> rep_plus X1 -> rep_plus rep_times] [A:rep_plus X2] [B:rep_plus X1] [x3:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (lam2 X2 X1 rep_times ([x3:rep_plus X2] [x4:rep_plus X1] Fun x3 x4)) A) B)] congr rep_times (Fun A B) (@ X1 rep_times (@ X2 (X1 arrow rep_times) (lam2 X2 X1 rep_times ([x4:rep_plus X2] [x5:rep_plus X1] Fun x4 x5)) A) B) ([i1:rep_plus rep_times] i1) (symm rep_times (@ X1 rep_times (@ X2 (X1 arrow rep_times) (lam2 X2 X1 rep_times ([x4:rep_plus X2] [x5:rep_plus X1] Fun x4 x5)) A) B) (Fun A B) (beta2 rep_times X1 X2 ([x4:rep_plus X2] [x5:rep_plus X1] Fun x4 x5) A B)) x3.
def3_i : {X1:tp} {X2:tp} {X3:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} pf (Fun A B C) -> pf (@ X3 rep_times (@ X2 (X3 arrow rep_times) (@ X1 (X2 arrow X3 arrow rep_times) (lam3 X1 X2 X3 rep_times ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] Fun x3 x4 x5)) A) B) C) = [X1:tp] [X2:tp] [X3:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [x3:pf (Fun A B C)] congr rep_times (@ X3 rep_times (@ X2 (X3 arrow rep_times) (@ X1 (X2 arrow X3 arrow rep_times) (lam3 X1 X2 X3 rep_times ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] Fun x4 x5 x6)) A) B) C) (Fun A B C) ([i1:rep_plus rep_times] i1) (beta3 rep_times X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] Fun x4 x5 x6) A B C) x3.
def3_e : {X1:tp} {X2:tp} {X3:tp} {Fun:rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times} {A:rep_plus X3} {B:rep_plus X2} {C:rep_plus X1} pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (lam3 X3 X2 X1 rep_times ([x3:rep_plus X3] [x4:rep_plus X2] [x5:rep_plus X1] Fun x3 x4 x5)) A) B) C) -> pf (Fun A B C) = [X1:tp] [X2:tp] [X3:tp] [Fun:rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times] [A:rep_plus X3] [B:rep_plus X2] [C:rep_plus X1] [x3:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (lam3 X3 X2 X1 rep_times ([x3:rep_plus X3] [x4:rep_plus X2] [x5:rep_plus X1] Fun x3 x4 x5)) A) B) C)] congr rep_times (Fun A B C) (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (lam3 X3 X2 X1 rep_times ([x4:rep_plus X3] [x5:rep_plus X2] [x6:rep_plus X1] Fun x4 x5 x6)) A) B) C) ([i1:rep_plus rep_times] i1) (symm rep_times (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (lam3 X3 X2 X1 rep_times ([x4:rep_plus X3] [x5:rep_plus X2] [x6:rep_plus X1] Fun x4 x5 x6)) A) B) C) (Fun A B C) (beta3 rep_times X1 X2 X3 ([x4:rep_plus X3] [x5:rep_plus X2] [x6:rep_plus X1] Fun x4 x5 x6) A B C)) x3.
def4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {D:rep_plus X4} pf (Fun A B C D) -> pf (@ X4 rep_times (@ X3 (X4 arrow rep_times) (@ X2 (X3 arrow X4 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow rep_times) (lam4 X1 X2 X3 X4 rep_times ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] Fun x3 x4 x5 x6)) A) B) C) D) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_div] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [D:rep_plus X4] [x3:pf (Fun A B C D)] congr rep_times (@ X4 rep_times (@ X3 (X4 arrow rep_times) (@ X2 (X3 arrow X4 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow rep_times) (lam4 X1 X2 X3 X4 rep_times ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) ([i1:rep_plus rep_times] i1) (beta4 rep_times X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] Fun x4 x5 x6 x7) A B C D) x3.
def4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times} {A:rep_plus X4} {B:rep_plus X3} {C:rep_plus X2} {D:rep_plus X1} pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (lam4 X4 X3 X2 X1 rep_times ([x3:rep_plus X4] [x4:rep_plus X3] [x5:rep_plus X2] [x6:rep_plus X1] Fun x3 x4 x5 x6)) A) B) C) D) -> pf (Fun A B C D) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times] [A:rep_plus X4] [B:rep_plus X3] [C:rep_plus X2] [D:rep_plus X1] [x3:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (lam4 X4 X3 X2 X1 rep_times ([x3:rep_plus X4] [x4:rep_plus X3] [x5:rep_plus X2] [x6:rep_plus X1] Fun x3 x4 x5 x6)) A) B) C) D)] congr rep_times (Fun A B C D) (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (lam4 X4 X3 X2 X1 rep_times ([x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] [x7:rep_plus X1] Fun x4 x5 x6 x7)) A) B) C) D) ([i1:rep_plus rep_times] i1) (symm rep_times (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (lam4 X4 X3 X2 X1 rep_times ([x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] [x7:rep_plus X1] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) (beta4 rep_times X1 X2 X3 X4 ([x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] [x7:rep_plus X1] Fun x4 x5 x6 x7) A B C D)) x3.
def5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {D:rep_plus X4} {E:rep_plus X5} pf (Fun A B C D E) -> pf (@ X5 rep_times (@ X4 (X5 arrow rep_times) (@ X3 (X4 arrow X5 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow rep_times) (lam5 X1 X2 X3 X4 X5 rep_times ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] Fun x3 x4 x5 x6 x7)) A) B) C) D) E) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_div] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [D:rep_plus X4] [E:rep_plus X5] [x3:pf (Fun A B C D E)] congr rep_times (@ X5 rep_times (@ X4 (X5 arrow rep_times) (@ X3 (X4 arrow X5 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow rep_times) (lam5 X1 X2 X3 X4 X5 rep_times ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) ([i1:rep_plus rep_times] i1) (beta5 rep_times X5 X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] Fun x4 x5 x6 x7 x8) A B C D E) x3.
def5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times} {A:rep_plus X5} {B:rep_plus X4} {C:rep_plus X3} {D:rep_plus X2} {E:rep_plus X1} pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam5 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X5] [x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] [x7:rep_plus X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E) -> pf (Fun A B C D E) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times] [A:rep_plus X5] [B:rep_plus X4] [C:rep_plus X3] [D:rep_plus X2] [E:rep_plus X1] [x3:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam5 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X5] [x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] [x7:rep_plus X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E)] congr rep_times (Fun A B C D E) (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam5 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] [x7:rep_plus X2] [x8:rep_plus X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) ([i1:rep_plus rep_times] i1) (symm rep_times (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam5 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] [x7:rep_plus X2] [x8:rep_plus X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) (beta5 rep_times X1 X2 X3 X4 X5 ([x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] [x7:rep_plus X2] [x8:rep_plus X1] Fun x4 x5 x6 x7 x8) A B C D E)) x3.
def6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {D:rep_plus X4} {E:rep_plus X5} {F:rep_plus X6} pf (Fun A B C D E F) -> pf (@ X6 rep_times (@ X5 (X6 arrow rep_times) (@ X4 (X5 arrow X6 arrow rep_times) (@ X3 (X4 arrow X5 arrow X6 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow rep_times) (lam6 X1 X2 X3 X4 X5 X6 rep_times ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_div] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [D:rep_plus X4] [E:rep_plus X5] [F:rep_plus X6] [x3:pf (Fun A B C D E F)] congr rep_times (@ X6 rep_times (@ X5 (X6 arrow rep_times) (@ X4 (X5 arrow X6 arrow rep_times) (@ X3 (X4 arrow X5 arrow X6 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow rep_times) (lam6 X1 X2 X3 X4 X5 X6 rep_times ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] Fun x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) (Fun A B C D E F) ([i1:rep_plus rep_times] i1) (beta6 rep_times X6 X5 X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] Fun x4 x5 x6 x7 x8 x9) A B C D E F) x3.
def6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {Fun:rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times} {A:rep_plus X6} {B:rep_plus X5} {C:rep_plus X4} {D:rep_plus X3} {E:rep_plus X2} {F:rep_plus X1} pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam6 X6 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X6] [x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] [x7:rep_plus X2] [x8:rep_plus X1] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F) -> pf (Fun A B C D E F) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [Fun:rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times] [A:rep_plus X6] [B:rep_plus X5] [C:rep_plus X4] [D:rep_plus X3] [E:rep_plus X2] [F:rep_plus X1] [x3:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam6 X6 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X6] [x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] [x7:rep_plus X2] [x8:rep_plus X1] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F)] congr rep_times (Fun A B C D E F) (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam6 X6 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X6] [x5:rep_plus X5] [x6:rep_plus X4] [x7:rep_plus X3] [x8:rep_plus X2] [x9:rep_plus X1] Fun x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) ([i1:rep_plus rep_times] i1) (symm rep_times (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam6 X6 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X6] [x5:rep_plus X5] [x6:rep_plus X4] [x7:rep_plus X3] [x8:rep_plus X2] [x9:rep_plus X1] Fun x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) (Fun A B C D E F) (beta6 rep_times X1 X2 X3 X4 X5 X6 ([x4:rep_plus X6] [x5:rep_plus X5] [x6:rep_plus X4] [x7:rep_plus X3] [x8:rep_plus X2] [x9:rep_plus X1] Fun x4 x5 x6 x7 x8 x9) A B C D E F)) x3.
def7_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_div} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {D:rep_plus X4} {E:rep_plus X5} {F:rep_plus X6} {G:rep_plus X7} pf (Fun A B C D E F G) -> pf (@ X7 rep_times (@ X6 (X7 arrow rep_times) (@ X5 (X6 arrow X7 arrow rep_times) (@ X4 (X5 arrow X6 arrow X7 arrow rep_times) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow rep_times) (lam7 X1 X2 X3 X4 X5 X6 X7 rep_times ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_div] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [D:rep_plus X4] [E:rep_plus X5] [F:rep_plus X6] [G:rep_plus X7] [x3:pf (Fun A B C D E F G)] congr rep_times (@ X7 rep_times (@ X6 (X7 arrow rep_times) (@ X5 (X6 arrow X7 arrow rep_times) (@ X4 (X5 arrow X6 arrow X7 arrow rep_times) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow rep_times) (lam7 X1 X2 X3 X4 X5 X6 X7 rep_times ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] [x10:rep_plus X7] Fun x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) (Fun A B C D E F G) ([i1:rep_plus rep_times] i1) (beta7 rep_times X7 X6 X5 X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] [x10:rep_plus X7] Fun x4 x5 x6 x7 x8 x9 x10) A B C D E F G) x3.
def7_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {Fun:rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times} {A:rep_plus X7} {B:rep_plus X6} {C:rep_plus X5} {D:rep_plus X4} {E:rep_plus X3} {F:rep_plus X2} {G:rep_plus X1} pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam7 X7 X6 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X7] [x4:rep_plus X6] [x5:rep_plus X5] [x6:rep_plus X4] [x7:rep_plus X3] [x8:rep_plus X2] [x9:rep_plus X1] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G) -> pf (Fun A B C D E F G) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [Fun:rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times] [A:rep_plus X7] [B:rep_plus X6] [C:rep_plus X5] [D:rep_plus X4] [E:rep_plus X3] [F:rep_plus X2] [G:rep_plus X1] [x3:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam7 X7 X6 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X7] [x4:rep_plus X6] [x5:rep_plus X5] [x6:rep_plus X4] [x7:rep_plus X3] [x8:rep_plus X2] [x9:rep_plus X1] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G)] congr rep_times (Fun A B C D E F G) (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam7 X7 X6 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X7] [x5:rep_plus X6] [x6:rep_plus X5] [x7:rep_plus X4] [x8:rep_plus X3] [x9:rep_plus X2] [x10:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) ([i1:rep_plus rep_times] i1) (symm rep_times (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam7 X7 X6 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X7] [x5:rep_plus X6] [x6:rep_plus X5] [x7:rep_plus X4] [x8:rep_plus X3] [x9:rep_plus X2] [x10:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) (Fun A B C D E F G) (beta7 rep_times X1 X2 X3 X4 X5 X6 X7 ([x4:rep_plus X7] [x5:rep_plus X6] [x6:rep_plus X5] [x7:rep_plus X4] [x8:rep_plus X3] [x9:rep_plus X2] [x10:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10) A B C D E F G)) x3.
def8_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_div} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {D:rep_plus X4} {E:rep_plus X5} {F:rep_plus X6} {G:rep_plus X7} {H:rep_plus X8} pf (Fun A B C D E F G H) -> pf (@ X8 rep_times (@ X7 (X8 arrow rep_times) (@ X6 (X7 arrow X8 arrow rep_times) (@ X5 (X6 arrow X7 arrow X8 arrow rep_times) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow rep_times) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow rep_times) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 rep_times ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_div] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [D:rep_plus X4] [E:rep_plus X5] [F:rep_plus X6] [G:rep_plus X7] [H:rep_plus X8] [x3:pf (Fun A B C D E F G H)] congr rep_times (@ X8 rep_times (@ X7 (X8 arrow rep_times) (@ X6 (X7 arrow X8 arrow rep_times) (@ X5 (X6 arrow X7 arrow X8 arrow rep_times) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow rep_times) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow rep_times) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 rep_times ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] [x10:rep_plus X7] [x11:rep_plus X8] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) ([i1:rep_plus rep_times] i1) (beta8 rep_times X8 X7 X6 X5 X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] [x10:rep_plus X7] [x11:rep_plus X8] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H) x3.
def8_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times} {A:rep_plus X8} {B:rep_plus X7} {C:rep_plus X6} {D:rep_plus X5} {E:rep_plus X4} {F:rep_plus X3} {G:rep_plus X2} {H:rep_plus X1} pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X8] [x4:rep_plus X7] [x5:rep_plus X6] [x6:rep_plus X5] [x7:rep_plus X4] [x8:rep_plus X3] [x9:rep_plus X2] [x10:rep_plus X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H) -> pf (Fun A B C D E F G H) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times] [A:rep_plus X8] [B:rep_plus X7] [C:rep_plus X6] [D:rep_plus X5] [E:rep_plus X4] [F:rep_plus X3] [G:rep_plus X2] [H:rep_plus X1] [x3:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X8] [x4:rep_plus X7] [x5:rep_plus X6] [x6:rep_plus X5] [x7:rep_plus X4] [x8:rep_plus X3] [x9:rep_plus X2] [x10:rep_plus X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H)] congr rep_times (Fun A B C D E F G H) (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X8] [x5:rep_plus X7] [x6:rep_plus X6] [x7:rep_plus X5] [x8:rep_plus X4] [x9:rep_plus X3] [x10:rep_plus X2] [x11:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) ([i1:rep_plus rep_times] i1) (symm rep_times (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X8] [x5:rep_plus X7] [x6:rep_plus X6] [x7:rep_plus X5] [x8:rep_plus X4] [x9:rep_plus X3] [x10:rep_plus X2] [x11:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) (beta8 rep_times X1 X2 X3 X4 X5 X6 X7 X8 ([x4:rep_plus X8] [x5:rep_plus X7] [x6:rep_plus X6] [x7:rep_plus X5] [x8:rep_plus X4] [x9:rep_plus X3] [x10:rep_plus X2] [x11:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H)) x3.
def10_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_div} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {D:rep_plus X4} {E:rep_plus X5} {F:rep_plus X6} {G:rep_plus X7} {H:rep_plus X8} {I:rep_plus X9} {J:rep_plus X10} pf (Fun A B C D E F G H I J) -> pf (@ X10 rep_times (@ X9 (X10 arrow rep_times) (@ X8 (X9 arrow X10 arrow rep_times) (@ X7 (X8 arrow X9 arrow X10 arrow rep_times) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (lam10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 rep_times ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_div] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [D:rep_plus X4] [E:rep_plus X5] [F:rep_plus X6] [G:rep_plus X7] [H:rep_plus X8] [I:rep_plus X9] [J:rep_plus X10] [x3:pf (Fun A B C D E F G H I J)] congr rep_times (@ X10 rep_times (@ X9 (X10 arrow rep_times) (@ X8 (X9 arrow X10 arrow rep_times) (@ X7 (X8 arrow X9 arrow X10 arrow rep_times) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow rep_times) (lam10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 rep_times ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] [x10:rep_plus X7] [x11:rep_plus X8] [x12:rep_plus X9] [x13:rep_plus X10] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) (Fun A B C D E F G H I J) ([i1:rep_plus rep_times] i1) (beta10 rep_times X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] [x10:rep_plus X7] [x11:rep_plus X8] [x12:rep_plus X9] [x13:rep_plus X10] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) A B C D E F G H I J) x3.
def10_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {Fun:rep_plus X10 -> rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times} {A:rep_plus X10} {B:rep_plus X9} {C:rep_plus X8} {D:rep_plus X7} {E:rep_plus X6} {F:rep_plus X5} {G:rep_plus X4} {H:rep_plus X3} {I:rep_plus X2} {J:rep_plus X1} pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X10] [x4:rep_plus X9] [x5:rep_plus X8] [x6:rep_plus X7] [x7:rep_plus X6] [x8:rep_plus X5] [x9:rep_plus X4] [x10:rep_plus X3] [x11:rep_plus X2] [x12:rep_plus X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J) -> pf (Fun A B C D E F G H I J) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [Fun:rep_plus X10 -> rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times] [A:rep_plus X10] [B:rep_plus X9] [C:rep_plus X8] [D:rep_plus X7] [E:rep_plus X6] [F:rep_plus X5] [G:rep_plus X4] [H:rep_plus X3] [I:rep_plus X2] [J:rep_plus X1] [x3:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X10] [x4:rep_plus X9] [x5:rep_plus X8] [x6:rep_plus X7] [x7:rep_plus X6] [x8:rep_plus X5] [x9:rep_plus X4] [x10:rep_plus X3] [x11:rep_plus X2] [x12:rep_plus X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J)] congr rep_times (Fun A B C D E F G H I J) (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X10] [x5:rep_plus X9] [x6:rep_plus X8] [x7:rep_plus X7] [x8:rep_plus X6] [x9:rep_plus X5] [x10:rep_plus X4] [x11:rep_plus X3] [x12:rep_plus X2] [x13:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) ([i1:rep_plus rep_times] i1) (symm rep_times (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X10] [x5:rep_plus X9] [x6:rep_plus X8] [x7:rep_plus X7] [x8:rep_plus X6] [x9:rep_plus X5] [x10:rep_plus X4] [x11:rep_plus X3] [x12:rep_plus X2] [x13:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) (Fun A B C D E F G H I J) (beta10 rep_times X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:rep_plus X10] [x5:rep_plus X9] [x6:rep_plus X8] [x7:rep_plus X7] [x8:rep_plus X6] [x9:rep_plus X5] [x10:rep_plus X4] [x11:rep_plus X3] [x12:rep_plus X2] [x13:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) A B C D E F G H I J)) x3.
def14_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11 -> rep_plus X12 -> rep_plus X13 -> rep_plus X14 -> rep_div} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {D:rep_plus X4} {E:rep_plus X5} {F:rep_plus X6} {G:rep_plus X7} {H:rep_plus X8} {I:rep_plus X9} {J:rep_plus X10} {K:rep_plus X11} {L:rep_plus X12} {M:rep_plus X13} {N:rep_plus X14} pf (Fun A B C D E F G H I J K L M N) -> pf (@ X14 rep_times (@ X13 (X14 arrow rep_times) (@ X12 (X13 arrow X14 arrow rep_times) (@ X11 (X12 arrow X13 arrow X14 arrow rep_times) (@ X10 (X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X9 (X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X8 (X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X7 (X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (lam14 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 rep_times ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] [x11:rep_plus X9] [x12:rep_plus X10] [x13:rep_plus X11] [x14:rep_plus X12] [x15:rep_plus X13] [x16:rep_plus X14] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus X11 -> rep_plus X12 -> rep_plus X13 -> rep_plus X14 -> rep_div] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [D:rep_plus X4] [E:rep_plus X5] [F:rep_plus X6] [G:rep_plus X7] [H:rep_plus X8] [I:rep_plus X9] [J:rep_plus X10] [K:rep_plus X11] [L:rep_plus X12] [M:rep_plus X13] [N:rep_plus X14] [x3:pf (Fun A B C D E F G H I J K L M N)] congr rep_times (@ X14 rep_times (@ X13 (X14 arrow rep_times) (@ X12 (X13 arrow X14 arrow rep_times) (@ X11 (X12 arrow X13 arrow X14 arrow rep_times) (@ X10 (X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X9 (X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X8 (X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X7 (X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow rep_times) (lam14 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 rep_times ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] [x10:rep_plus X7] [x11:rep_plus X8] [x12:rep_plus X9] [x13:rep_plus X10] [x14:rep_plus X11] [x15:rep_plus X12] [x16:rep_plus X13] [x17:rep_plus X14] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N) ([i1:rep_plus rep_times] i1) (beta14 rep_times X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] [x10:rep_plus X7] [x11:rep_plus X8] [x12:rep_plus X9] [x13:rep_plus X10] [x14:rep_plus X11] [x15:rep_plus X12] [x16:rep_plus X13] [x17:rep_plus X14] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17) A B C D E F G H I J K L M N) x3.
def14_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {Fun:rep_plus X14 -> rep_plus X13 -> rep_plus X12 -> rep_plus X11 -> rep_plus X10 -> rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times} {A:rep_plus X14} {B:rep_plus X13} {C:rep_plus X12} {D:rep_plus X11} {E:rep_plus X10} {F:rep_plus X9} {G:rep_plus X8} {H:rep_plus X7} {I:rep_plus X6} {J:rep_plus X5} {K:rep_plus X4} {L:rep_plus X3} {M:rep_plus X2} {N:rep_plus X1} pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X14] [x4:rep_plus X13] [x5:rep_plus X12] [x6:rep_plus X11] [x7:rep_plus X10] [x8:rep_plus X9] [x9:rep_plus X8] [x10:rep_plus X7] [x11:rep_plus X6] [x12:rep_plus X5] [x13:rep_plus X4] [x14:rep_plus X3] [x15:rep_plus X2] [x16:rep_plus X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) -> pf (Fun A B C D E F G H I J K L M N) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [Fun:rep_plus X14 -> rep_plus X13 -> rep_plus X12 -> rep_plus X11 -> rep_plus X10 -> rep_plus X9 -> rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus rep_times] [A:rep_plus X14] [B:rep_plus X13] [C:rep_plus X12] [D:rep_plus X11] [E:rep_plus X10] [F:rep_plus X9] [G:rep_plus X8] [H:rep_plus X7] [I:rep_plus X6] [J:rep_plus X5] [K:rep_plus X4] [L:rep_plus X3] [M:rep_plus X2] [N:rep_plus X1] [x3:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x3:rep_plus X14] [x4:rep_plus X13] [x5:rep_plus X12] [x6:rep_plus X11] [x7:rep_plus X10] [x8:rep_plus X9] [x9:rep_plus X8] [x10:rep_plus X7] [x11:rep_plus X6] [x12:rep_plus X5] [x13:rep_plus X4] [x14:rep_plus X3] [x15:rep_plus X2] [x16:rep_plus X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N)] congr rep_times (Fun A B C D E F G H I J K L M N) (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X14] [x5:rep_plus X13] [x6:rep_plus X12] [x7:rep_plus X11] [x8:rep_plus X10] [x9:rep_plus X9] [x10:rep_plus X8] [x11:rep_plus X7] [x12:rep_plus X6] [x13:rep_plus X5] [x14:rep_plus X4] [x15:rep_plus X3] [x16:rep_plus X2] [x17:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) ([i1:rep_plus rep_times] i1) (symm rep_times (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow rep_times) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 rep_times ([x4:rep_plus X14] [x5:rep_plus X13] [x6:rep_plus X12] [x7:rep_plus X11] [x8:rep_plus X10] [x9:rep_plus X9] [x10:rep_plus X8] [x11:rep_plus X7] [x12:rep_plus X6] [x13:rep_plus X5] [x14:rep_plus X4] [x15:rep_plus X3] [x16:rep_plus X2] [x17:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N) (beta14 rep_times X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 ([x4:rep_plus X14] [x5:rep_plus X13] [x6:rep_plus X12] [x7:rep_plus X11] [x8:rep_plus X10] [x9:rep_plus X9] [x10:rep_plus X8] [x11:rep_plus X7] [x12:rep_plus X6] [x13:rep_plus X5] [x14:rep_plus X4] [x15:rep_plus X3] [x16:rep_plus X2] [x17:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17) A B C D E F G H I J K L M N)) x3.
gdef1_i : {T:tp} {X1:tp} {Fun:rep_plus X1 -> rep_plus T} {A:rep_plus X1} {h:rep_plus T -> rep_plus rep_times} pf (h (Fun A)) -> pf (h (@ X1 T (lam X1 T ([x3:rep_plus X1] Fun x3)) A)) = [T:tp] [X1:tp] [Fun:rep_plus X1 -> rep_plus T] [A:rep_plus X1] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (Fun A))] congr T (@ X1 T (lam X1 T ([x4:rep_plus X1] Fun x4)) A) (Fun A) ([x4:rep_plus T] p1 x4) (beta T X1 ([x4:rep_plus X1] Fun x4) A) x3.
gdef1_i2 : {T:tp} {U:tp} {X1:tp} {F1:rep_plus X1 -> rep_plus T} {A:rep_plus X1} {X2:tp} {F2:rep_plus X2 -> rep_plus U} {B:rep_plus X2} {h:rep_plus T -> rep_plus U -> rep_plus rep_times} pf (h (F1 A) (F2 B)) -> pf (h (@ X1 T (lam X1 T ([x3:rep_plus X1] F1 x3)) A) (@ X2 U (lam X2 U ([x3:rep_plus X2] F2 x3)) B)) = [T:tp] [U:tp] [X1:tp] [F1:rep_plus X1 -> rep_plus T] [A:rep_plus X1] [X2:tp] [F2:rep_plus X2 -> rep_plus U] [B:rep_plus X2] [p1:rep_plus T -> rep_plus U -> rep_plus rep_times] [x3:pf (p1 (F1 A) (F2 B))] congr2 T U (@ X1 T (lam X1 T ([x4:rep_plus X1] F1 x4)) A) (F1 A) (@ X2 U (lam X2 U ([x4:rep_plus X2] F2 x4)) B) (F2 B) ([x4:rep_plus T] [x5:rep_plus U] p1 x4 x5) (beta T X1 ([x4:rep_plus X1] F1 x4) A) (beta U X2 ([x4:rep_plus X2] F2 x4) B) x3.
gdef1_e : {T:tp} {X1:tp} {Fun:rep_plus X1 -> rep_plus T} {A:rep_plus X1} {h:rep_plus T -> rep_plus rep_times} pf (h (@ X1 T (lam X1 T ([x3:rep_plus X1] Fun x3)) A)) -> pf (h (Fun A)) = [T:tp] [X1:tp] [Fun:rep_plus X1 -> rep_plus T] [A:rep_plus X1] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (@ X1 T (lam X1 T ([x3:rep_plus X1] Fun x3)) A))] congr T (Fun A) (@ X1 T (lam X1 T ([x4:rep_plus X1] Fun x4)) A) ([x4:rep_plus T] p1 x4) (symm T (@ X1 T (lam X1 T ([x4:rep_plus X1] Fun x4)) A) (Fun A) (beta T X1 ([x4:rep_plus X1] Fun x4) A)) x3.
gdef1_e2 : {T:tp} {U:tp} {X1:tp} {F1:rep_plus X1 -> rep_plus T} {A:rep_plus X1} {X2:tp} {F2:rep_plus X2 -> rep_plus U} {B:rep_plus X2} {h:rep_plus T -> rep_plus U -> rep_plus rep_times} pf (h (@ X1 T (lam X1 T ([x3:rep_plus X1] F1 x3)) A) (@ X2 U (lam X2 U ([x3:rep_plus X2] F2 x3)) B)) -> pf (h (F1 A) (F2 B)) = [T:tp] [U:tp] [X1:tp] [F1:rep_plus X1 -> rep_plus T] [A:rep_plus X1] [X2:tp] [F2:rep_plus X2 -> rep_plus U] [B:rep_plus X2] [p1:rep_plus T -> rep_plus U -> rep_plus rep_times] [x3:pf (p1 (@ X1 T (lam X1 T ([x3:rep_plus X1] F1 x3)) A) (@ X2 U (lam X2 U ([x3:rep_plus X2] F2 x3)) B))] congr2 T U (F1 A) (@ X1 T (lam X1 T ([x4:rep_plus X1] F1 x4)) A) (F2 B) (@ X2 U (lam X2 U ([x4:rep_plus X2] F2 x4)) B) ([x4:rep_plus T] [x5:rep_plus U] p1 x4 x5) (symm T (@ X1 T (lam X1 T ([x4:rep_plus X1] F1 x4)) A) (F1 A) (beta T X1 ([x4:rep_plus X1] F1 x4) A)) (symm U (@ X2 U (lam X2 U ([x4:rep_plus X2] F2 x4)) B) (F2 B) (beta U X2 ([x4:rep_plus X2] F2 x4) B)) x3.
gdef2_i : {T:tp} {X1:tp} {X2:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus T} {A:rep_plus X1} {B:rep_plus X2} {h:rep_plus T -> rep_plus rep_times} pf (h (Fun A B)) -> pf (h (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x3:rep_plus X1] [x4:rep_plus X2] Fun x3 x4)) A) B)) = [T:tp] [X1:tp] [X2:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus T] [A:rep_plus X1] [B:rep_plus X2] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (Fun A B))] congr T (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x4:rep_plus X1] [x5:rep_plus X2] Fun x4 x5)) A) B) (Fun A B) ([x4:rep_plus T] p1 x4) (beta2 T X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] Fun x4 x5) A B) x3.
gdef2_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {F1:rep_plus X1 -> rep_plus X2 -> rep_plus T} {A1:rep_plus X1} {A2:rep_plus X2} {X3:tp} {X4:tp} {F2:rep_plus X3 -> rep_plus X4 -> rep_plus U} {B1:rep_plus X3} {B2:rep_plus X4} {h:rep_plus T -> rep_plus U -> rep_plus rep_times} pf (h (F1 A1 A2) (F2 B1 B2)) -> pf (h (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x3:rep_plus X1] [x4:rep_plus X2] F1 x3 x4)) A1) A2) (@ X4 U (@ X3 (X4 arrow U) (lam2 X3 X4 U ([x3:rep_plus X3] [x4:rep_plus X4] F2 x3 x4)) B1) B2)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [F1:rep_plus X1 -> rep_plus X2 -> rep_plus T] [A1:rep_plus X1] [A2:rep_plus X2] [X3:tp] [X4:tp] [F2:rep_plus X3 -> rep_plus X4 -> rep_plus U] [B1:rep_plus X3] [B2:rep_plus X4] [p1:rep_plus T -> rep_plus U -> rep_plus rep_times] [x3:pf (p1 (F1 A1 A2) (F2 B1 B2))] congr2 T U (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x4:rep_plus X1] [x5:rep_plus X2] F1 x4 x5)) A1) A2) (F1 A1 A2) (@ X4 U (@ X3 (X4 arrow U) (lam2 X3 X4 U ([x4:rep_plus X3] [x5:rep_plus X4] F2 x4 x5)) B1) B2) (F2 B1 B2) ([x4:rep_plus T] [x5:rep_plus U] p1 x4 x5) (beta2 T X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] F1 x4 x5) A1 A2) (beta2 U X4 X3 ([x4:rep_plus X3] [x5:rep_plus X4] F2 x4 x5) B1 B2) x3.
gdef2_e : {T:tp} {X1:tp} {X2:tp} {Fun:rep_plus X2 -> rep_plus X1 -> rep_plus T} {A:rep_plus X2} {B:rep_plus X1} {h:rep_plus T -> rep_plus rep_times} pf (h (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x3:rep_plus X2] [x4:rep_plus X1] Fun x3 x4)) A) B)) -> pf (h (Fun A B)) = [T:tp] [X1:tp] [X2:tp] [Fun:rep_plus X2 -> rep_plus X1 -> rep_plus T] [A:rep_plus X2] [B:rep_plus X1] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x3:rep_plus X2] [x4:rep_plus X1] Fun x3 x4)) A) B))] congr T (Fun A B) (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x4:rep_plus X2] [x5:rep_plus X1] Fun x4 x5)) A) B) ([x4:rep_plus T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x4:rep_plus X2] [x5:rep_plus X1] Fun x4 x5)) A) B) (Fun A B) (beta2 T X1 X2 ([x4:rep_plus X2] [x5:rep_plus X1] Fun x4 x5) A B)) x3.
gdef3_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus T} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {h:rep_plus T -> rep_plus rep_times} pf (h (Fun A B C)) -> pf (h (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] Fun x3 x4 x5)) A) B) C)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus T] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (Fun A B C))] congr T (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] Fun x4 x5 x6)) A) B) C) (Fun A B C) ([x4:rep_plus T] p1 x4) (beta3 T X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] Fun x4 x5 x6) A B C) x3.
gdef3_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {X3:tp} {F1:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus T} {A1:rep_plus X1} {A2:rep_plus X2} {A3:rep_plus X3} {X4:tp} {X5:tp} {X6:tp} {F2:rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus U} {B1:rep_plus X4} {B2:rep_plus X5} {B3:rep_plus X6} {h:rep_plus T -> rep_plus U -> rep_plus rep_times} pf (h (F1 A1 A2 A3) (F2 B1 B2 B3)) -> pf (h (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] F1 x3 x4 x5)) A1) A2) A3) (@ X6 U (@ X5 (X6 arrow U) (@ X4 (X5 arrow X6 arrow U) (lam3 X4 X5 X6 U ([x3:rep_plus X4] [x4:rep_plus X5] [x5:rep_plus X6] F2 x3 x4 x5)) B1) B2) B3)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [X3:tp] [F1:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus T] [A1:rep_plus X1] [A2:rep_plus X2] [A3:rep_plus X3] [X4:tp] [X5:tp] [X6:tp] [F2:rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus U] [B1:rep_plus X4] [B2:rep_plus X5] [B3:rep_plus X6] [p1:rep_plus T -> rep_plus U -> rep_plus rep_times] [x3:pf (p1 (F1 A1 A2 A3) (F2 B1 B2 B3))] congr2 T U (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] F1 x4 x5 x6)) A1) A2) A3) (F1 A1 A2 A3) (@ X6 U (@ X5 (X6 arrow U) (@ X4 (X5 arrow X6 arrow U) (lam3 X4 X5 X6 U ([x4:rep_plus X4] [x5:rep_plus X5] [x6:rep_plus X6] F2 x4 x5 x6)) B1) B2) B3) (F2 B1 B2 B3) ([x4:rep_plus T] [x5:rep_plus U] p1 x4 x5) (beta3 T X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] F1 x4 x5 x6) A1 A2 A3) (beta3 U X6 X5 X4 ([x4:rep_plus X4] [x5:rep_plus X5] [x6:rep_plus X6] F2 x4 x5 x6) B1 B2 B3) x3.
gdef3_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {Fun:rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus T} {A:rep_plus X3} {B:rep_plus X2} {C:rep_plus X1} {h:rep_plus T -> rep_plus rep_times} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x3:rep_plus X3] [x4:rep_plus X2] [x5:rep_plus X1] Fun x3 x4 x5)) A) B) C)) -> pf (h (Fun A B C)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [Fun:rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus T] [A:rep_plus X3] [B:rep_plus X2] [C:rep_plus X1] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x3:rep_plus X3] [x4:rep_plus X2] [x5:rep_plus X1] Fun x3 x4 x5)) A) B) C))] congr T (Fun A B C) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x4:rep_plus X3] [x5:rep_plus X2] [x6:rep_plus X1] Fun x4 x5 x6)) A) B) C) ([x4:rep_plus T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x4:rep_plus X3] [x5:rep_plus X2] [x6:rep_plus X1] Fun x4 x5 x6)) A) B) C) (Fun A B C) (beta3 T X1 X2 X3 ([x4:rep_plus X3] [x5:rep_plus X2] [x6:rep_plus X1] Fun x4 x5 x6) A B C)) x3.
gdef4_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus T} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {D:rep_plus X4} {h:rep_plus T -> rep_plus rep_times} pf (h (Fun A B C D)) -> pf (h (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] Fun x3 x4 x5 x6)) A) B) C) D)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus T] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [D:rep_plus X4] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (Fun A B C D))] congr T (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) ([x4:rep_plus T] p1 x4) (beta4 T X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] Fun x4 x5 x6 x7) A B C D) x3.
gdef4_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F1:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus T} {A1:rep_plus X1} {A2:rep_plus X2} {A3:rep_plus X3} {A4:rep_plus X4} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {F2:rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus U} {B1:rep_plus X5} {B2:rep_plus X6} {B3:rep_plus X7} {B4:rep_plus X8} {h:rep_plus T -> rep_plus U -> rep_plus rep_times} pf (h (F1 A1 A2 A3 A4) (F2 B1 B2 B3 B4)) -> pf (h (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] F1 x3 x4 x5 x6)) A1) A2) A3) A4) (@ X8 U (@ X7 (X8 arrow U) (@ X6 (X7 arrow X8 arrow U) (@ X5 (X6 arrow X7 arrow X8 arrow U) (lam4 X5 X6 X7 X8 U ([x3:rep_plus X5] [x4:rep_plus X6] [x5:rep_plus X7] [x6:rep_plus X8] F2 x3 x4 x5 x6)) B1) B2) B3) B4)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F1:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus T] [A1:rep_plus X1] [A2:rep_plus X2] [A3:rep_plus X3] [A4:rep_plus X4] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [F2:rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus U] [B1:rep_plus X5] [B2:rep_plus X6] [B3:rep_plus X7] [B4:rep_plus X8] [p1:rep_plus T -> rep_plus U -> rep_plus rep_times] [x3:pf (p1 (F1 A1 A2 A3 A4) (F2 B1 B2 B3 B4))] congr2 T U (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] F1 x4 x5 x6 x7)) A1) A2) A3) A4) (F1 A1 A2 A3 A4) (@ X8 U (@ X7 (X8 arrow U) (@ X6 (X7 arrow X8 arrow U) (@ X5 (X6 arrow X7 arrow X8 arrow U) (lam4 X5 X6 X7 X8 U ([x4:rep_plus X5] [x5:rep_plus X6] [x6:rep_plus X7] [x7:rep_plus X8] F2 x4 x5 x6 x7)) B1) B2) B3) B4) (F2 B1 B2 B3 B4) ([x4:rep_plus T] [x5:rep_plus U] p1 x4 x5) (beta4 T X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] F1 x4 x5 x6 x7) A1 A2 A3 A4) (beta4 U X8 X7 X6 X5 ([x4:rep_plus X5] [x5:rep_plus X6] [x6:rep_plus X7] [x7:rep_plus X8] F2 x4 x5 x6 x7) B1 B2 B3 B4) x3.
gdef4_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus T} {A:rep_plus X4} {B:rep_plus X3} {C:rep_plus X2} {D:rep_plus X1} {h:rep_plus T -> rep_plus rep_times} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x3:rep_plus X4] [x4:rep_plus X3] [x5:rep_plus X2] [x6:rep_plus X1] Fun x3 x4 x5 x6)) A) B) C) D)) -> pf (h (Fun A B C D)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus T] [A:rep_plus X4] [B:rep_plus X3] [C:rep_plus X2] [D:rep_plus X1] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x3:rep_plus X4] [x4:rep_plus X3] [x5:rep_plus X2] [x6:rep_plus X1] Fun x3 x4 x5 x6)) A) B) C) D))] congr T (Fun A B C D) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] [x7:rep_plus X1] Fun x4 x5 x6 x7)) A) B) C) D) ([x4:rep_plus T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] [x7:rep_plus X1] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) (beta4 T X1 X2 X3 X4 ([x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] [x7:rep_plus X1] Fun x4 x5 x6 x7) A B C D)) x3.
gdef5_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus T} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {D:rep_plus X4} {E:rep_plus X5} {h:rep_plus T -> rep_plus rep_times} pf (h (Fun A B C D E)) -> pf (h (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] Fun x3 x4 x5 x6 x7)) A) B) C) D) E)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus T] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [D:rep_plus X4] [E:rep_plus X5] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (Fun A B C D E))] congr T (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) ([x4:rep_plus T] p1 x4) (beta5 T X5 X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] Fun x4 x5 x6 x7 x8) A B C D E) x3.
gdef5_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F1:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus T} {A1:rep_plus X1} {A2:rep_plus X2} {A3:rep_plus X3} {A4:rep_plus X4} {A5:rep_plus X5} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {F2:rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus U} {B1:rep_plus X6} {B2:rep_plus X7} {B3:rep_plus X8} {B4:rep_plus X9} {B5:rep_plus X10} {h:rep_plus T -> rep_plus U -> rep_plus rep_times} pf (h (F1 A1 A2 A3 A4 A5) (F2 B1 B2 B3 B4 B5)) -> pf (h (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] F1 x3 x4 x5 x6 x7)) A1) A2) A3) A4) A5) (@ X10 U (@ X9 (X10 arrow U) (@ X8 (X9 arrow X10 arrow U) (@ X7 (X8 arrow X9 arrow X10 arrow U) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow U) (lam5 X6 X7 X8 X9 X10 U ([x3:rep_plus X6] [x4:rep_plus X7] [x5:rep_plus X8] [x6:rep_plus X9] [x7:rep_plus X10] F2 x3 x4 x5 x6 x7)) B1) B2) B3) B4) B5)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F1:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus T] [A1:rep_plus X1] [A2:rep_plus X2] [A3:rep_plus X3] [A4:rep_plus X4] [A5:rep_plus X5] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [F2:rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus X9 -> rep_plus X10 -> rep_plus U] [B1:rep_plus X6] [B2:rep_plus X7] [B3:rep_plus X8] [B4:rep_plus X9] [B5:rep_plus X10] [p1:rep_plus T -> rep_plus U -> rep_plus rep_times] [x3:pf (p1 (F1 A1 A2 A3 A4 A5) (F2 B1 B2 B3 B4 B5))] congr2 T U (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] F1 x4 x5 x6 x7 x8)) A1) A2) A3) A4) A5) (F1 A1 A2 A3 A4 A5) (@ X10 U (@ X9 (X10 arrow U) (@ X8 (X9 arrow X10 arrow U) (@ X7 (X8 arrow X9 arrow X10 arrow U) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow U) (lam5 X6 X7 X8 X9 X10 U ([x4:rep_plus X6] [x5:rep_plus X7] [x6:rep_plus X8] [x7:rep_plus X9] [x8:rep_plus X10] F2 x4 x5 x6 x7 x8)) B1) B2) B3) B4) B5) (F2 B1 B2 B3 B4 B5) ([x4:rep_plus T] [x5:rep_plus U] p1 x4 x5) (beta5 T X5 X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] F1 x4 x5 x6 x7 x8) A1 A2 A3 A4 A5) (beta5 U X10 X9 X8 X7 X6 ([x4:rep_plus X6] [x5:rep_plus X7] [x6:rep_plus X8] [x7:rep_plus X9] [x8:rep_plus X10] F2 x4 x5 x6 x7 x8) B1 B2 B3 B4 B5) x3.
gdef5_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus T} {A:rep_plus X5} {B:rep_plus X4} {C:rep_plus X3} {D:rep_plus X2} {E:rep_plus X1} {h:rep_plus T -> rep_plus rep_times} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x3:rep_plus X5] [x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] [x7:rep_plus X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E)) -> pf (h (Fun A B C D E)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus T] [A:rep_plus X5] [B:rep_plus X4] [C:rep_plus X3] [D:rep_plus X2] [E:rep_plus X1] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x3:rep_plus X5] [x4:rep_plus X4] [x5:rep_plus X3] [x6:rep_plus X2] [x7:rep_plus X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E))] congr T (Fun A B C D E) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] [x7:rep_plus X2] [x8:rep_plus X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) ([x4:rep_plus T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] [x7:rep_plus X2] [x8:rep_plus X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) (beta5 T X1 X2 X3 X4 X5 ([x4:rep_plus X5] [x5:rep_plus X4] [x6:rep_plus X3] [x7:rep_plus X2] [x8:rep_plus X1] Fun x4 x5 x6 x7 x8) A B C D E)) x3.
gdef8_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus T} {A:rep_plus X1} {B:rep_plus X2} {C:rep_plus X3} {D:rep_plus X4} {E:rep_plus X5} {F:rep_plus X6} {G:rep_plus X7} {H:rep_plus X8} {h:rep_plus T -> rep_plus rep_times} pf (h (Fun A B C D E F G H)) -> pf (h (@ X8 T (@ X7 (X8 arrow T) (@ X6 (X7 arrow X8 arrow T) (@ X5 (X6 arrow X7 arrow X8 arrow T) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 T ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus T] [A:rep_plus X1] [B:rep_plus X2] [C:rep_plus X3] [D:rep_plus X4] [E:rep_plus X5] [F:rep_plus X6] [G:rep_plus X7] [H:rep_plus X8] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (Fun A B C D E F G H))] congr T (@ X8 T (@ X7 (X8 arrow T) (@ X6 (X7 arrow X8 arrow T) (@ X5 (X6 arrow X7 arrow X8 arrow T) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 T ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] [x10:rep_plus X7] [x11:rep_plus X8] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) ([x4:rep_plus T] p1 x4) (beta8 T X8 X7 X6 X5 X4 X3 X2 X1 ([x4:rep_plus X1] [x5:rep_plus X2] [x6:rep_plus X3] [x7:rep_plus X4] [x8:rep_plus X5] [x9:rep_plus X6] [x10:rep_plus X7] [x11:rep_plus X8] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H) x3.
gdef8_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus T} {A:rep_plus X8} {B:rep_plus X7} {C:rep_plus X6} {D:rep_plus X5} {E:rep_plus X4} {F:rep_plus X3} {G:rep_plus X2} {H:rep_plus X1} {h:rep_plus T -> rep_plus rep_times} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x3:rep_plus X8] [x4:rep_plus X7] [x5:rep_plus X6] [x6:rep_plus X5] [x7:rep_plus X4] [x8:rep_plus X3] [x9:rep_plus X2] [x10:rep_plus X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H)) -> pf (h (Fun A B C D E F G H)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:rep_plus X8 -> rep_plus X7 -> rep_plus X6 -> rep_plus X5 -> rep_plus X4 -> rep_plus X3 -> rep_plus X2 -> rep_plus X1 -> rep_plus T] [A:rep_plus X8] [B:rep_plus X7] [C:rep_plus X6] [D:rep_plus X5] [E:rep_plus X4] [F:rep_plus X3] [G:rep_plus X2] [H:rep_plus X1] [p1:rep_plus T -> rep_plus rep_times] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x3:rep_plus X8] [x4:rep_plus X7] [x5:rep_plus X6] [x6:rep_plus X5] [x7:rep_plus X4] [x8:rep_plus X3] [x9:rep_plus X2] [x10:rep_plus X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H))] congr T (Fun A B C D E F G H) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x4:rep_plus X8] [x5:rep_plus X7] [x6:rep_plus X6] [x7:rep_plus X5] [x8:rep_plus X4] [x9:rep_plus X3] [x10:rep_plus X2] [x11:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) ([x4:rep_plus T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x4:rep_plus X8] [x5:rep_plus X7] [x6:rep_plus X6] [x7:rep_plus X5] [x8:rep_plus X4] [x9:rep_plus X3] [x10:rep_plus X2] [x11:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) (beta8 T X1 X2 X3 X4 X5 X6 X7 X8 ([x4:rep_plus X8] [x5:rep_plus X7] [x6:rep_plus X6] [x7:rep_plus X5] [x8:rep_plus X4] [x9:rep_plus X3] [x10:rep_plus X2] [x11:rep_plus X1] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H)) x3.
def1_congr : {X1:tp} {A0:rep_plus (X1 arrow rep_times)} {A1:rep_plus (X1 arrow rep_times)} {B0:rep_plus X1} {B1:rep_plus X1} pf (eq (X1 arrow rep_times) A0 A1) -> pf (eq X1 B0 B1) -> pf (@ X1 rep_times A1 B1) -> pf (@ X1 rep_times A0 B0) = [X1:tp] [A0:rep_plus (X1 arrow rep_times)] [A1:rep_plus (X1 arrow rep_times)] [B0:rep_plus X1] [B1:rep_plus X1] [p1:pf (eq (X1 arrow rep_times) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (@ X1 rep_times A1 B1)] congr2 (X1 arrow rep_times) X1 A0 A1 B0 B1 ([a:rep_plus (X1 arrow rep_times)] [b:rep_plus X1] @ X1 rep_times a b) p1 p2 p3.
def1_congr2 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X:rep_plus (X1 arrow rep_times)} pf (eq X1 A B) -> pf (@ X1 rep_times X B) -> pf (@ X1 rep_times X A) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X:rep_plus (X1 arrow rep_times)] [p1:pf (eq X1 A B)] [p2:pf (@ X1 rep_times X B)] def1_congr X1 X X A B (refl (X1 arrow rep_times) X) p1 p2.
def2_congr : {X1:tp} {X2:tp} {A0:rep_plus (X1 arrow X2 arrow rep_times)} {A1:rep_plus (X1 arrow X2 arrow rep_times)} {B0:rep_plus X1} {B1:rep_plus X1} {C0:rep_plus X2} {C1:rep_plus X2} pf (eq (X1 arrow X2 arrow rep_times) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) A1 B1) C1) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) A0 B0) C0) = [X1:tp] [X2:tp] [A0:rep_plus (X1 arrow X2 arrow rep_times)] [A1:rep_plus (X1 arrow X2 arrow rep_times)] [B0:rep_plus X1] [B1:rep_plus X1] [C0:rep_plus X2] [C1:rep_plus X2] [p1:pf (eq (X1 arrow X2 arrow rep_times) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) A1 B1) C1)] congr3 (X1 arrow X2 arrow rep_times) X1 X2 A0 A1 B0 B1 C0 C1 ([a:rep_plus (X1 arrow X2 arrow rep_times)] [b:rep_plus X1] [c1:rep_plus X2] @ X2 rep_times (@ X1 (X2 arrow rep_times) a b) c1) p1 p2 p3 p4.
def2_congr1 : {X1:tp} {X2:tp} {A:rep_plus (X1 arrow X2 arrow rep_times)} {B:rep_plus (X1 arrow X2 arrow rep_times)} {X:rep_plus X1} {Y:rep_plus X2} pf (eq (X1 arrow X2 arrow rep_times) A B) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) B X) Y) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) A X) Y) = [X1:tp] [X2:tp] [A:rep_plus (X1 arrow X2 arrow rep_times)] [B:rep_plus (X1 arrow X2 arrow rep_times)] [X:rep_plus X1] [Y:rep_plus X2] [p1:pf (eq (X1 arrow X2 arrow rep_times) A B)] [p2:pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) B X) Y)] def2_congr X1 X2 A B X X Y Y p1 (refl X1 X) (refl X2 Y) p2.
def2_congr2 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X2:tp} {X:rep_plus (X1 arrow X2 arrow rep_times)} {Y:rep_plus X2} pf (eq X1 A B) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) X B) Y) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) X A) Y) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X2:tp] [X:rep_plus (X1 arrow X2 arrow rep_times)] [Y:rep_plus X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) X B) Y)] def2_congr X1 X2 X X A B Y Y (refl (X1 arrow X2 arrow rep_times) X) p1 (refl X2 Y) p2.
def2_congr3 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X2:tp} {X:rep_plus (X2 arrow X1 arrow rep_times)} {Y:rep_plus X2} pf (eq X1 A B) -> pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) X Y) B) -> pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) X Y) A) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X2:tp] [X:rep_plus (X2 arrow X1 arrow rep_times)] [Y:rep_plus X2] [p1:pf (eq X1 A B)] [p2:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) X Y) B)] def2_congr X2 X1 X X Y Y A B (refl (X2 arrow X1 arrow rep_times) X) (refl X2 Y) p1 p2.
def3_congr : {X1:tp} {X2:tp} {X3:tp} {A0:rep_plus (X1 arrow X2 arrow X3 arrow rep_times)} {A1:rep_plus (X1 arrow X2 arrow X3 arrow rep_times)} {B0:rep_plus X1} {B1:rep_plus X1} {C0:rep_plus X2} {C1:rep_plus X2} {D0:rep_plus X3} {D1:rep_plus X3} pf (eq (X1 arrow X2 arrow X3 arrow rep_times) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (eq X3 D0 D1) -> pf (@ X3 rep_times (@ X2 (X3 arrow rep_times) (@ X1 (X2 arrow X3 arrow rep_times) A1 B1) C1) D1) -> pf (@ X3 rep_times (@ X2 (X3 arrow rep_times) (@ X1 (X2 arrow X3 arrow rep_times) A0 B0) C0) D0) = [X1:tp] [X2:tp] [X3:tp] [A0:rep_plus (X1 arrow X2 arrow X3 arrow rep_times)] [A1:rep_plus (X1 arrow X2 arrow X3 arrow rep_times)] [B0:rep_plus X1] [B1:rep_plus X1] [C0:rep_plus X2] [C1:rep_plus X2] [D0:rep_plus X3] [D1:rep_plus X3] [p1:pf (eq (X1 arrow X2 arrow X3 arrow rep_times) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (eq X3 D0 D1)] [p5:pf (@ X3 rep_times (@ X2 (X3 arrow rep_times) (@ X1 (X2 arrow X3 arrow rep_times) A1 B1) C1) D1)] congr4 (X1 arrow X2 arrow X3 arrow rep_times) X1 X2 X3 A0 A1 B0 B1 C0 C1 D0 D1 ([a:rep_plus (X1 arrow X2 arrow X3 arrow rep_times)] [b:rep_plus X1] [c1:rep_plus X2] [d:rep_plus X3] @ X3 rep_times (@ X2 (X3 arrow rep_times) (@ X1 (X2 arrow X3 arrow rep_times) a b) c1) d) p1 p2 p3 p4 p5.
def3_congr1 : {X1:tp} {X2:tp} {X3:tp} {A:rep_plus (X1 arrow X2 arrow X3 arrow rep_times)} {B:rep_plus (X1 arrow X2 arrow X3 arrow rep_times)} {W:rep_plus X1} {X:rep_plus X2} {Y:rep_plus X3} pf (eq (X1 arrow X2 arrow X3 arrow rep_times) A B) -> pf (@ X3 rep_times (@ X2 (X3 arrow rep_times) (@ X1 (X2 arrow X3 arrow rep_times) B W) X) Y) -> pf (@ X3 rep_times (@ X2 (X3 arrow rep_times) (@ X1 (X2 arrow X3 arrow rep_times) A W) X) Y) = [X1:tp] [X2:tp] [X3:tp] [A:rep_plus (X1 arrow X2 arrow X3 arrow rep_times)] [B:rep_plus (X1 arrow X2 arrow X3 arrow rep_times)] [W:rep_plus X1] [X:rep_plus X2] [Y:rep_plus X3] [p1:pf (eq (X1 arrow X2 arrow X3 arrow rep_times) A B)] [p2:pf (@ X3 rep_times (@ X2 (X3 arrow rep_times) (@ X1 (X2 arrow X3 arrow rep_times) B W) X) Y)] def3_congr X1 X2 X3 A B W W X X Y Y p1 (refl X1 W) (refl X2 X) (refl X3 Y) p2.
def3_congr2 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X2:tp} {X3:tp} {W:rep_plus (X1 arrow X3 arrow X2 arrow rep_times)} {X:rep_plus X3} {Y:rep_plus X2} pf (eq X1 A B) -> pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X1 (X3 arrow X2 arrow rep_times) W B) X) Y) -> pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X1 (X3 arrow X2 arrow rep_times) W A) X) Y) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X2:tp] [X3:tp] [W:rep_plus (X1 arrow X3 arrow X2 arrow rep_times)] [X:rep_plus X3] [Y:rep_plus X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X1 (X3 arrow X2 arrow rep_times) W B) X) Y)] def3_congr X1 X3 X2 W W A B X X Y Y (refl (X1 arrow X3 arrow X2 arrow rep_times) W) p1 (refl X3 X) (refl X2 Y) p2.
def3_congr3 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X2:tp} {X3:tp} {W:rep_plus (X3 arrow X1 arrow X2 arrow rep_times)} {X:rep_plus X3} {Y:rep_plus X2} pf (eq X1 A B) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) (@ X3 (X1 arrow X2 arrow rep_times) W X) B) Y) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) (@ X3 (X1 arrow X2 arrow rep_times) W X) A) Y) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X2:tp] [X3:tp] [W:rep_plus (X3 arrow X1 arrow X2 arrow rep_times)] [X:rep_plus X3] [Y:rep_plus X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) (@ X3 (X1 arrow X2 arrow rep_times) W X) B) Y)] def3_congr X3 X1 X2 W W X X A B Y Y (refl (X3 arrow X1 arrow X2 arrow rep_times) W) (refl X3 X) p1 (refl X2 Y) p2.
def3_congr4 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X2:tp} {X3:tp} {W:rep_plus (X3 arrow X2 arrow X1 arrow rep_times)} {X:rep_plus X3} {Y:rep_plus X2} pf (eq X1 A B) -> pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) W X) Y) B) -> pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) W X) Y) A) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X2:tp] [X3:tp] [W:rep_plus (X3 arrow X2 arrow X1 arrow rep_times)] [X:rep_plus X3] [Y:rep_plus X2] [p1:pf (eq X1 A B)] [p2:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) W X) Y) B)] def3_congr X3 X2 X1 W W X X Y Y A B (refl (X3 arrow X2 arrow X1 arrow rep_times) W) (refl X3 X) (refl X2 Y) p1 p2.
def4_congr : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A0:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow rep_times)} {A1:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow rep_times)} {B0:rep_plus X1} {B1:rep_plus X1} {C0:rep_plus X2} {C1:rep_plus X2} {D0:rep_plus X3} {D1:rep_plus X3} {E0:rep_plus X4} {E1:rep_plus X4} pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow rep_times) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (eq X3 D0 D1) -> pf (eq X4 E0 E1) -> pf (@ X4 rep_times (@ X3 (X4 arrow rep_times) (@ X2 (X3 arrow X4 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow rep_times) A1 B1) C1) D1) E1) -> pf (@ X4 rep_times (@ X3 (X4 arrow rep_times) (@ X2 (X3 arrow X4 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow rep_times) A0 B0) C0) D0) E0) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A0:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow rep_times)] [A1:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow rep_times)] [B0:rep_plus X1] [B1:rep_plus X1] [C0:rep_plus X2] [C1:rep_plus X2] [D0:rep_plus X3] [D1:rep_plus X3] [E0:rep_plus X4] [E1:rep_plus X4] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow rep_times) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (eq X3 D0 D1)] [p5:pf (eq X4 E0 E1)] [p6:pf (@ X4 rep_times (@ X3 (X4 arrow rep_times) (@ X2 (X3 arrow X4 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow rep_times) A1 B1) C1) D1) E1)] congr5 (X1 arrow X2 arrow X3 arrow X4 arrow rep_times) X1 X2 X3 X4 A0 A1 B0 B1 C0 C1 D0 D1 E0 E1 ([a:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow rep_times)] [b:rep_plus X1] [c1:rep_plus X2] [d:rep_plus X3] [e:rep_plus X4] @ X4 rep_times (@ X3 (X4 arrow rep_times) (@ X2 (X3 arrow X4 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow rep_times) a b) c1) d) e) p1 p2 p3 p4 p5 p6.
def4_congr1 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow rep_times)} {B:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow rep_times)} {V:rep_plus X1} {W:rep_plus X2} {X:rep_plus X3} {Y:rep_plus X4} pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow rep_times) A B) -> pf (@ X4 rep_times (@ X3 (X4 arrow rep_times) (@ X2 (X3 arrow X4 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow rep_times) B V) W) X) Y) -> pf (@ X4 rep_times (@ X3 (X4 arrow rep_times) (@ X2 (X3 arrow X4 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow rep_times) A V) W) X) Y) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow rep_times)] [B:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow rep_times)] [V:rep_plus X1] [W:rep_plus X2] [X:rep_plus X3] [Y:rep_plus X4] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow rep_times) A B)] [p2:pf (@ X4 rep_times (@ X3 (X4 arrow rep_times) (@ X2 (X3 arrow X4 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow rep_times) B V) W) X) Y)] def4_congr X1 X2 X3 X4 A B V V W W X X Y Y p1 (refl X1 V) (refl X2 W) (refl X3 X) (refl X4 Y) p2.
def4_congr2 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X2:tp} {X3:tp} {X4:tp} {V:rep_plus (X1 arrow X4 arrow X3 arrow X2 arrow rep_times)} {W:rep_plus X4} {X:rep_plus X3} {Y:rep_plus X2} pf (eq X1 A B) -> pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X4 (X3 arrow X2 arrow rep_times) (@ X1 (X4 arrow X3 arrow X2 arrow rep_times) V B) W) X) Y) -> pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X4 (X3 arrow X2 arrow rep_times) (@ X1 (X4 arrow X3 arrow X2 arrow rep_times) V A) W) X) Y) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X2:tp] [X3:tp] [X4:tp] [V:rep_plus (X1 arrow X4 arrow X3 arrow X2 arrow rep_times)] [W:rep_plus X4] [X:rep_plus X3] [Y:rep_plus X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X4 (X3 arrow X2 arrow rep_times) (@ X1 (X4 arrow X3 arrow X2 arrow rep_times) V B) W) X) Y)] def4_congr X1 X4 X3 X2 V V A B W W X X Y Y (refl (X1 arrow X4 arrow X3 arrow X2 arrow rep_times) V) p1 (refl X4 W) (refl X3 X) (refl X2 Y) p2.
def4_congr3 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X2:tp} {X3:tp} {X4:tp} {V:rep_plus (X4 arrow X1 arrow X3 arrow X2 arrow rep_times)} {W:rep_plus X4} {X:rep_plus X3} {Y:rep_plus X2} pf (eq X1 A B) -> pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X1 (X3 arrow X2 arrow rep_times) (@ X4 (X1 arrow X3 arrow X2 arrow rep_times) V W) B) X) Y) -> pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X1 (X3 arrow X2 arrow rep_times) (@ X4 (X1 arrow X3 arrow X2 arrow rep_times) V W) A) X) Y) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X2:tp] [X3:tp] [X4:tp] [V:rep_plus (X4 arrow X1 arrow X3 arrow X2 arrow rep_times)] [W:rep_plus X4] [X:rep_plus X3] [Y:rep_plus X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X1 (X3 arrow X2 arrow rep_times) (@ X4 (X1 arrow X3 arrow X2 arrow rep_times) V W) B) X) Y)] def4_congr X4 X1 X3 X2 V V W W A B X X Y Y (refl (X4 arrow X1 arrow X3 arrow X2 arrow rep_times) V) (refl X4 W) p1 (refl X3 X) (refl X2 Y) p2.
def4_congr4 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X2:tp} {X3:tp} {X4:tp} {V:rep_plus (X4 arrow X3 arrow X1 arrow X2 arrow rep_times)} {W:rep_plus X4} {X:rep_plus X3} {Y:rep_plus X2} pf (eq X1 A B) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) (@ X3 (X1 arrow X2 arrow rep_times) (@ X4 (X3 arrow X1 arrow X2 arrow rep_times) V W) X) B) Y) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) (@ X3 (X1 arrow X2 arrow rep_times) (@ X4 (X3 arrow X1 arrow X2 arrow rep_times) V W) X) A) Y) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X2:tp] [X3:tp] [X4:tp] [V:rep_plus (X4 arrow X3 arrow X1 arrow X2 arrow rep_times)] [W:rep_plus X4] [X:rep_plus X3] [Y:rep_plus X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) (@ X3 (X1 arrow X2 arrow rep_times) (@ X4 (X3 arrow X1 arrow X2 arrow rep_times) V W) X) B) Y)] def4_congr X4 X3 X1 X2 V V W W X X A B Y Y (refl (X4 arrow X3 arrow X1 arrow X2 arrow rep_times) V) (refl X4 W) (refl X3 X) p1 (refl X2 Y) p2.
def4_congr5 : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X2:tp} {X3:tp} {X4:tp} {V:rep_plus (X4 arrow X3 arrow X2 arrow X1 arrow rep_times)} {W:rep_plus X4} {X:rep_plus X3} {Y:rep_plus X2} pf (eq X1 A B) -> pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) V W) X) Y) B) -> pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) V W) X) Y) A) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X2:tp] [X3:tp] [X4:tp] [V:rep_plus (X4 arrow X3 arrow X2 arrow X1 arrow rep_times)] [W:rep_plus X4] [X:rep_plus X3] [Y:rep_plus X2] [p1:pf (eq X1 A B)] [p2:pf (@ X1 rep_times (@ X2 (X1 arrow rep_times) (@ X3 (X2 arrow X1 arrow rep_times) (@ X4 (X3 arrow X2 arrow X1 arrow rep_times) V W) X) Y) B)] def4_congr X4 X3 X2 X1 V V W W X X Y Y A B (refl (X4 arrow X3 arrow X2 arrow X1 arrow rep_times) V) (refl X4 W) (refl X3 X) (refl X2 Y) p1 p2.
def5_congr : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A0:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow rep_times)} {A1:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow rep_times)} {B0:rep_plus X1} {B1:rep_plus X1} {C0:rep_plus X2} {C1:rep_plus X2} {D0:rep_plus X3} {D1:rep_plus X3} {E0:rep_plus X4} {E1:rep_plus X4} {F0:rep_plus X5} {F1:rep_plus X5} pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow rep_times) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (eq X3 D0 D1) -> pf (eq X4 E0 E1) -> pf (eq X5 F0 F1) -> pf (@ X5 rep_times (@ X4 (X5 arrow rep_times) (@ X3 (X4 arrow X5 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow rep_times) A1 B1) C1) D1) E1) F1) -> pf (@ X5 rep_times (@ X4 (X5 arrow rep_times) (@ X3 (X4 arrow X5 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow rep_times) A0 B0) C0) D0) E0) F0) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A0:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow rep_times)] [A1:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow rep_times)] [B0:rep_plus X1] [B1:rep_plus X1] [C0:rep_plus X2] [C1:rep_plus X2] [D0:rep_plus X3] [D1:rep_plus X3] [E0:rep_plus X4] [E1:rep_plus X4] [F0:rep_plus X5] [F1:rep_plus X5] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow rep_times) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (eq X3 D0 D1)] [p5:pf (eq X4 E0 E1)] [p6:pf (eq X5 F0 F1)] [p7:pf (@ X5 rep_times (@ X4 (X5 arrow rep_times) (@ X3 (X4 arrow X5 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow rep_times) A1 B1) C1) D1) E1) F1)] congr5 (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow rep_times) X1 X2 X3 X4 A0 A1 B0 B1 C0 C1 D0 D1 E0 E1 ([a:rep_plus (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow rep_times)] [b:rep_plus X1] [c1:rep_plus X2] [d:rep_plus X3] [e:rep_plus X4] @ X5 rep_times (@ X4 (X5 arrow rep_times) (@ X3 (X4 arrow X5 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow rep_times) a b) c1) d) e) F0) p1 p2 p3 p4 p5 (congr X5 F0 F1 ([f:rep_plus X5] @ X5 rep_times (@ X4 (X5 arrow rep_times) (@ X3 (X4 arrow X5 arrow rep_times) (@ X2 (X3 arrow X4 arrow X5 arrow rep_times) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow rep_times) A1 B1) C1) D1) E1) f) p6 p7).
def5_congr2 : {X1:tp} {B0:rep_plus X1} {B1:rep_plus X1} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:rep_plus (X1 arrow X5 arrow X4 arrow X3 arrow X2 arrow rep_times)} {C:rep_plus X5} {D:rep_plus X4} {E:rep_plus X3} {F:rep_plus X2} pf (== X1 B0 B1) -> pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X4 (X3 arrow X2 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow rep_times) (@ X1 (X5 arrow X4 arrow X3 arrow X2 arrow rep_times) A B1) C) D) E) F) -> pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X4 (X3 arrow X2 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow rep_times) (@ X1 (X5 arrow X4 arrow X3 arrow X2 arrow rep_times) A B0) C) D) E) F) = [X1:tp] [B0:rep_plus X1] [B1:rep_plus X1] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:rep_plus (X1 arrow X5 arrow X4 arrow X3 arrow X2 arrow rep_times)] [C:rep_plus X5] [D:rep_plus X4] [E:rep_plus X3] [F:rep_plus X2] [p1:pf (== X1 B0 B1)] [p2:pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X4 (X3 arrow X2 arrow rep_times) (@ X5 (X4 arrow X3 arrow X2 arrow rep_times) (@ X1 (X5 arrow X4 arrow X3 arrow X2 arrow rep_times) A B1) C) D) E) F)] def5_congr X1 X5 X4 X3 X2 A A B0 B1 C C D D E E F F (refl (X1 arrow X5 arrow X4 arrow X3 arrow X2 arrow rep_times) A) p1 (refl X5 C) (refl X4 D) (refl X3 E) (refl X2 F) p2.
def5_congr3 : {X1:tp} {C0:rep_plus X1} {C1:rep_plus X1} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:rep_plus (X5 arrow X1 arrow X4 arrow X3 arrow X2 arrow rep_times)} {B:rep_plus X5} {D:rep_plus X4} {E:rep_plus X3} {F:rep_plus X2} pf (== X1 C0 C1) -> pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X4 (X3 arrow X2 arrow rep_times) (@ X1 (X4 arrow X3 arrow X2 arrow rep_times) (@ X5 (X1 arrow X4 arrow X3 arrow X2 arrow rep_times) A B) C1) D) E) F) -> pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X4 (X3 arrow X2 arrow rep_times) (@ X1 (X4 arrow X3 arrow X2 arrow rep_times) (@ X5 (X1 arrow X4 arrow X3 arrow X2 arrow rep_times) A B) C0) D) E) F) = [X1:tp] [C0:rep_plus X1] [C1:rep_plus X1] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:rep_plus (X5 arrow X1 arrow X4 arrow X3 arrow X2 arrow rep_times)] [B:rep_plus X5] [D:rep_plus X4] [E:rep_plus X3] [F:rep_plus X2] [p1:pf (== X1 C0 C1)] [p2:pf (@ X2 rep_times (@ X3 (X2 arrow rep_times) (@ X4 (X3 arrow X2 arrow rep_times) (@ X1 (X4 arrow X3 arrow X2 arrow rep_times) (@ X5 (X1 arrow X4 arrow X3 arrow X2 arrow rep_times) A B) C1) D) E) F)] def5_congr X5 X1 X4 X3 X2 A A B B C0 C1 D D E E F F (refl (X5 arrow X1 arrow X4 arrow X3 arrow X2 arrow rep_times) A) (refl X5 B) p1 (refl X4 D) (refl X3 E) (refl X2 F) p2.
def5_congr5 : {X1:tp} {E0:rep_plus X1} {E1:rep_plus X1} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:rep_plus (X5 arrow X4 arrow X3 arrow X1 arrow X2 arrow rep_times)} {B:rep_plus X5} {C:rep_plus X4} {D:rep_plus X3} {F:rep_plus X2} pf (== X1 E0 E1) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) (@ X3 (X1 arrow X2 arrow rep_times) (@ X4 (X3 arrow X1 arrow X2 arrow rep_times) (@ X5 (X4 arrow X3 arrow X1 arrow X2 arrow rep_times) A B) C) D) E1) F) -> pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) (@ X3 (X1 arrow X2 arrow rep_times) (@ X4 (X3 arrow X1 arrow X2 arrow rep_times) (@ X5 (X4 arrow X3 arrow X1 arrow X2 arrow rep_times) A B) C) D) E0) F) = [X1:tp] [E0:rep_plus X1] [E1:rep_plus X1] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:rep_plus (X5 arrow X4 arrow X3 arrow X1 arrow X2 arrow rep_times)] [B:rep_plus X5] [C:rep_plus X4] [D:rep_plus X3] [F:rep_plus X2] [p1:pf (== X1 E0 E1)] [p2:pf (@ X2 rep_times (@ X1 (X2 arrow rep_times) (@ X3 (X1 arrow X2 arrow rep_times) (@ X4 (X3 arrow X1 arrow X2 arrow rep_times) (@ X5 (X4 arrow X3 arrow X1 arrow X2 arrow rep_times) A B) C) D) E1) F)] def5_congr X5 X4 X3 X1 X2 A A B B C C D D E0 E1 F F (refl (X5 arrow X4 arrow X3 arrow X1 arrow X2 arrow rep_times) A) (refl X5 B) (refl X4 C) (refl X3 D) p1 (refl X2 F) p2.
imp_i : {A:rep_div} {B:rep_div} (pf A -> pf B) -> pf (A imp B) = [A:rep_div] [B:rep_div] [x3:pf A -> pf B] _imp_i A B ([x4:pf A] x3 x4).
imp2_i : {A:rep_div} {B:rep_div} {C:rep_div} (pf A -> pf B -> pf C) -> pf (A imp B imp C) = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf A -> pf B -> pf C] imp_i A (B imp C) ([p2:pf A] imp_i B C ([x3:pf B] p1 p2 x3)).
imp3_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} (pf A -> pf B -> pf C -> pf D) -> pf (A imp B imp C imp D) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [p1:pf A -> pf B -> pf C -> pf D] imp_i A (B imp C imp D) ([p2:pf A] imp2_i B C D ([x3:pf B] [x4:pf C] p1 p2 x3 x4)).
imp4_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} (pf A -> pf B -> pf C -> pf D -> pf E) -> pf (A imp B imp C imp D imp E) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [p1:pf A -> pf B -> pf C -> pf D -> pf E] imp_i A (B imp C imp D imp E) ([p2:pf A] imp3_i B C D E ([x3:pf B] [x4:pf C] [x5:pf D] p1 p2 x3 x4 x5)).
imp5_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F) -> pf (A imp B imp C imp D imp E imp F) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F] imp_i A (B imp C imp D imp E imp F) ([p2:pf A] imp4_i B C D E F ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] p1 p2 x3 x4 x5 x6)).
imp6_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G) -> pf (A imp B imp C imp D imp E imp F imp G) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G] imp_i A (B imp C imp D imp E imp F imp G) ([p2:pf A] imp5_i B C D E F G ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] p1 p2 x3 x4 x5 x6 x7)).
imp7_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H) -> pf (A imp B imp C imp D imp E imp F imp G imp H) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H] imp_i A (B imp C imp D imp E imp F imp G imp H) ([p2:pf A] imp6_i B C D E F G H ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] p1 p2 x3 x4 x5 x6 x7 x8)).
imp8_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I) -> pf (A imp B imp C imp D imp E imp F imp G imp H imp I) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I] imp_i A (B imp C imp D imp E imp F imp G imp H imp I) ([p2:pf A] imp7_i B C D E F G H I ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] p1 p2 x3 x4 x5 x6 x7 x8 x9)).
imp9_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J) -> pf (A imp B imp C imp D imp E imp F imp G imp H imp I imp J) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J] imp_i A (B imp C imp D imp E imp F imp G imp H imp I imp J) ([p2:pf A] imp8_i B C D E F G H I J ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] p1 p2 x3 x4 x5 x6 x7 x8 x9 x10)).
imp_e : {A:rep_div} {B:rep_div} pf (A imp B) -> pf A -> pf B = [A:rep_div] [B:rep_div] [x3:pf (A imp B)] [x4:pf A] _imp_e A B x3 x4.
imp2_e : {A:rep_div} {B:rep_div} {C:rep_div} pf (A imp B imp C) -> pf A -> pf B -> pf C = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf (A imp B imp C)] [pA:pf A] [pX:pf B] imp_e B C (imp_e A (B imp C) p1 pA) pX.
imp3_e : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} pf (A imp B imp C imp D) -> pf A -> pf B -> pf C -> pf D = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [p1:pf (A imp B imp C imp D)] [pA:pf A] [pX:pf B] [x3:pf C] imp2_e B C D (imp_e A (B imp C imp D) p1 pA) pX x3.
imp4_e : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} pf (A imp B imp C imp D imp E) -> pf A -> pf B -> pf C -> pf D -> pf E = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [p1:pf (A imp B imp C imp D imp E)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] imp3_e B C D E (imp_e A (B imp C imp D imp E) p1 pA) pX x3 x4.
imp5_e : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} pf (A imp B imp C imp D imp E imp F) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [p1:pf (A imp B imp C imp D imp E imp F)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] imp4_e B C D E F (imp_e A (B imp C imp D imp E imp F) p1 pA) pX x3 x4 x5.
imp6_e : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} pf (A imp B imp C imp D imp E imp F imp G) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [p1:pf (A imp B imp C imp D imp E imp F imp G)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] [x6:pf F] imp5_e B C D E F G (imp_e A (B imp C imp D imp E imp F imp G) p1 pA) pX x3 x4 x5 x6.
imp7_e : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} pf (A imp B imp C imp D imp E imp F imp G imp H) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [p1:pf (A imp B imp C imp D imp E imp F imp G imp H)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] [x6:pf F] [x7:pf G] imp6_e B C D E F G H (imp_e A (B imp C imp D imp E imp F imp G imp H) p1 pA) pX x3 x4 x5 x6 x7.
imp8_e : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} pf (A imp B imp C imp D imp E imp F imp G imp H imp I) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [p1:pf (A imp B imp C imp D imp E imp F imp G imp H imp I)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] [x6:pf F] [x7:pf G] [x8:pf H] imp7_e B C D E F G H I (imp_e A (B imp C imp D imp E imp F imp G imp H imp I) p1 pA) pX x3 x4 x5 x6 x7 x8.
imp_true : {B:rep_div} {A:rep_div} pf B -> pf (A imp B) = [B:rep_div] [A:rep_div] [p1:pf B] imp_i A B ([p2:pf A] p1).
true_i : pf true = imp_i false false ([x3:pf false] x3).
false_e : {A:rep_div} pf false -> pf A = [A:rep_div] [p1:pf false] forall_e rep_times ([x3:rep_plus rep_times] x3) p1 A.
and_i : {A:rep_div} {B:rep_div} pf A -> pf B -> pf (A and B) = [A:rep_div] [B:rep_div] [p1:pf A] [p2:pf B] forall_i rep_times ([x3:rep_plus rep_times] (A imp B imp x3) imp x3) ([x3:rep_plus rep_times] imp_i (A imp B imp x3) x3 ([p3:pf (A imp B imp x3)] imp_e B x3 (imp_e A (B imp x3) p3 p1) p2)).
and2_i : {X1:rep_plus rep_times} {X2:rep_plus rep_times} pf X1 -> pf X2 -> pf (X1 and X2) = [X1:rep_plus rep_times] [X2:rep_plus rep_times] [x3:pf X1] [x4:pf X2] and_i X1 X2 x3 x4.
and3_i : {A:rep_div} {B:rep_div} {C:rep_div} pf A -> pf B -> pf C -> pf (A and B and C) = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] and_i A (B and C) p1 (and_i B C p2 p3).
and4_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} pf A -> pf B -> pf C -> pf D -> pf (A and B and C and D) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] and_i A (B and C and D) p1 (and3_i B C D p2 p3 p4).
and5_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf (A and B and C and D and E) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] and_i A (B and C and D and E) p1 (and4_i B C D E p2 p3 p4 p5).
and6_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf (A and B and C and D and E and F) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] and_i A (B and C and D and E and F) p1 (and5_i B C D E F p2 p3 p4 p5 p6).
and7_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf (A and B and C and D and E and F and G) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] and_i A (B and C and D and E and F and G) p1 (and6_i B C D E F G p2 p3 p4 p5 p6 p7).
and8_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf (A and B and C and D and E and F and G and H) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] and_i A (B and C and D and E and F and G and H) p1 (and7_i B C D E F G H p2 p3 p4 p5 p6 p7 p8).
and9_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf (A and B and C and D and E and F and G and H and I) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] and_i A (B and C and D and E and F and G and H and I) p1 (and8_i B C D E F G H I p2 p3 p4 p5 p6 p7 p8 p9).
and10_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf (A and B and C and D and E and F and G and H and I and J) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] and_i A (B and C and D and E and F and G and H and I and J) p1 (and9_i B C D E F G H I J p2 p3 p4 p5 p6 p7 p8 p9 p10).
and11_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf (A and B and C and D and E and F and G and H and I and J and K) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] and_i A (B and C and D and E and F and G and H and I and J and K) p1 (and10_i B C D E F G H I J K p2 p3 p4 p5 p6 p7 p8 p9 p10 p11).
and12_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} {L:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf (A and B and C and D and E and F and G and H and I and J and K and L) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [L:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] and_i A (B and C and D and E and F and G and H and I and J and K and L) p1 (and11_i B C D E F G H I J K L p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12).
and13_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} {L:rep_div} {M:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf (A and B and C and D and E and F and G and H and I and J and K and L and M) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [L:rep_div] [M:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] and_i A (B and C and D and E and F and G and H and I and J and K and L and M) p1 (and12_i B C D E F G H I J K L M p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13).
and14_i : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} {L:rep_div} {M:rep_div} {N:rep_div} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf N -> pf (A and B and C and D and E and F and G and H and I and J and K and L and M and N) = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [L:rep_div] [M:rep_div] [N:rep_div] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] [p14:pf N] and_i A (B and C and D and E and F and G and H and I and J and K and L and M and N) p1 (and13_i B C D E F G H I J K L M N p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14).
and_e1 : {A:rep_div} {B:rep_div} pf (A and B) -> pf A = [A:rep_div] [B:rep_div] [p1:pf (A and B)] imp_e (A imp B imp A) A (forall_e rep_times ([x3:rep_plus rep_times] (A imp B imp x3) imp x3) p1 A) (imp_i A (B imp A) ([p2:pf A] imp_i B A ([p3:pf B] p2))).
and_e2 : {A:rep_div} {B:rep_div} pf (A and B) -> pf B = [A:rep_div] [B:rep_div] [p1:pf (A and B)] imp_e (A imp B imp B) B (forall_e rep_times ([x3:rep_plus rep_times] (A imp B imp x3) imp x3) p1 B) (imp_i A (B imp B) ([p2:pf A] imp_i B B ([p3:pf B] p3))).
and3_e1 : {A:rep_div} {B:rep_div} {C:rep_div} pf (A and B and C) -> pf A = [A:rep_div] [B:rep_div] [C:rep_div] [x3:pf (A and B and C)] and_e1 A (B and C) x3.
and3_e2 : {A:rep_div} {B:rep_div} {C:rep_div} pf (A and B and C) -> pf B = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf (A and B and C)] and_e1 B C (and_e2 A (B and C) p1).
and3_e3 : {A:rep_div} {B:rep_div} {C:rep_div} pf (A and B and C) -> pf C = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf (A and B and C)] and_e2 B C (and_e2 A (B and C) p1).
and4_e4 : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} pf (A and B and C and D) -> pf D = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [p1:pf (A and B and C and D)] and_e2 C D (and_e2 B (C and D) (and_e2 A (B and C and D) p1)).
and_l : {A:rep_div} {B:rep_div} {C:rep_div} pf (A and B) -> (pf A -> pf B -> pf C) -> pf C = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf (A and B)] [p2:pf A -> pf B -> pf C] imp_e B C (imp_e A (B imp C) (imp_i A (B imp C) ([p3:pf A] imp_i B C ([x3:pf B] p2 p3 x3))) (and_e1 A B p1)) (and_e2 A B p1).
and3_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} pf (A and B and C) -> (pf A -> pf B -> pf C -> pf D) -> pf D = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [p1:pf (A and B and C)] [p2:pf A -> pf B -> pf C -> pf D] and_l A (B and C) D p1 ([p3:pf A] [p4:pf (B and C)] and_l B C D p4 ([p5:pf B] [p6:pf C] p2 p3 p5 p6)).
and4_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {Z:rep_div} pf (A and B and C and D) -> (pf A -> pf B -> pf C -> pf D -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [Z:rep_div] [p1:pf (A and B and C and D)] [p2:pf A -> pf B -> pf C -> pf D -> pf Z] and_l A (B and C and D) Z p1 ([p3:pf A] [p4:pf (B and C and D)] and3_l B C D Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] p2 p3 x3 x4 x5)).
and5_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {Z:rep_div} pf (A and B and C and D and E) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [Z:rep_div] [p1:pf (A and B and C and D and E)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf Z] and_l A (B and C and D and E) Z p1 ([p3:pf A] [p4:pf (B and C and D and E)] and4_l B C D E Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] p2 p3 x3 x4 x5 x6)).
and6_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {Z:rep_div} pf (A and B and C and D and E and F) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [Z:rep_div] [p1:pf (A and B and C and D and E and F)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Z] and_l A (B and C and D and E and F) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F)] and5_l B C D E F Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] p2 p3 x3 x4 x5 x6 x7)).
and7_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {Z:rep_div} pf (A and B and C and D and E and F and G) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [Z:rep_div] [p1:pf (A and B and C and D and E and F and G)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Z] and_l A (B and C and D and E and F and G) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G)] and6_l B C D E F G Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] p2 p3 x3 x4 x5 x6 x7 x8)).
and8_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {Z:rep_div} pf (A and B and C and D and E and F and G and H) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [Z:rep_div] [p1:pf (A and B and C and D and E and F and G and H)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Z] and_l A (B and C and D and E and F and G and H) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H)] and7_l B C D E F G H Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] p2 p3 x3 x4 x5 x6 x7 x8 x9)).
and9_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {Z:rep_div} pf (A and B and C and D and E and F and G and H and I) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [Z:rep_div] [p1:pf (A and B and C and D and E and F and G and H and I)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Z] and_l A (B and C and D and E and F and G and H and I) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I)] and8_l B C D E F G H I Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10)).
and10_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {Z:rep_div} pf (A and B and C and D and E and F and G and H and I and J) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [Z:rep_div] [p1:pf (A and B and C and D and E and F and G and H and I and J)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Z] and_l A (B and C and D and E and F and G and H and I and J) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J)] and9_l B C D E F G H I J Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11)).
and11_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} {Z:rep_div} pf (A and B and C and D and E and F and G and H and I and J and K) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [Z:rep_div] [p1:pf (A and B and C and D and E and F and G and H and I and J and K)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K)] and10_l B C D E F G H I J K Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)).
and12_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} {L:rep_div} {Z:rep_div} pf (A and B and C and D and E and F and G and H and I and J and K and L) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [L:rep_div] [Z:rep_div] [p1:pf (A and B and C and D and E and F and G and H and I and J and K and L)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K and L) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K and L)] and11_l B C D E F G H I J K L Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] [x13:pf L] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)).
and13_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} {L:rep_div} {M:rep_div} {Z:rep_div} pf (A and B and C and D and E and F and G and H and I and J and K and L and M) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [L:rep_div] [M:rep_div] [Z:rep_div] [p1:pf (A and B and C and D and E and F and G and H and I and J and K and L and M)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K and L and M) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K and L and M)] and12_l B C D E F G H I J K L M Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] [x13:pf L] [x14:pf M] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14)).
and14_l : {A:rep_div} {B:rep_div} {C:rep_div} {D:rep_div} {E:rep_div} {F:rep_div} {G:rep_div} {H:rep_div} {I:rep_div} {J:rep_div} {K:rep_div} {L:rep_div} {M:rep_div} {N:rep_div} {Z:rep_div} pf (A and B and C and D and E and F and G and H and I and J and K and L and M and N) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf N -> pf Z) -> pf Z = [A:rep_div] [B:rep_div] [C:rep_div] [D:rep_div] [E:rep_div] [F:rep_div] [G:rep_div] [H:rep_div] [I:rep_div] [J:rep_div] [K:rep_div] [L:rep_div] [M:rep_div] [N:rep_div] [Z:rep_div] [p1:pf (A and B and C and D and E and F and G and H and I and J and K and L and M and N)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf N -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K and L and M and N) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K and L and M and N)] and13_l B C D E F G H I J K L M N Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] [x13:pf L] [x14:pf M] [x15:pf N] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15)).
or_e : {A:rep_div} {B:rep_div} {C:rep_div} pf (A or B) -> (pf A -> pf C) -> (pf B -> pf C) -> pf C = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf (A or B)] [p2:pf A -> pf C] [p3:pf B -> pf C] imp_e (B imp C) C (imp_e (A imp C) ((B imp C) imp C) (forall_e rep_times ([x3:rep_plus rep_times] (A imp x3) imp (B imp x3) imp x3) p1 C) (imp_i A C ([x3:pf A] p2 x3))) (imp_i B C ([x3:pf B] p3 x3)).
or_i1 : {A:rep_div} {B:rep_div} pf A -> pf (A or B) = [A:rep_div] [B:rep_div] [p1:pf A] forall_i rep_times ([x3:rep_plus rep_times] (A imp x3) imp (B imp x3) imp x3) ([C:rep_plus rep_times] imp_i (A imp C) ((B imp C) imp C) ([p2:pf (A imp C)] imp_i (B imp C) C ([p3:pf (B imp C)] imp_e A C p2 p1))).
or_i2 : {B:rep_div} {A:rep_div} pf B -> pf (A or B) = [B:rep_div] [A:rep_div] [p1:pf B] forall_i rep_times ([x3:rep_plus rep_times] (A imp x3) imp (B imp x3) imp x3) ([C:rep_plus rep_times] imp_i (A imp C) ((B imp C) imp C) ([p2:pf (A imp C)] imp_i (B imp C) C ([p3:pf (B imp C)] imp_e B C p3 p1))).
or3_e : {A1:rep_div} {A2:rep_div} {A3:rep_div} {C:rep_div} pf (A1 or A2 or A3) -> (pf A1 -> pf C) -> (pf A2 -> pf C) -> (pf A3 -> pf C) -> pf C = [A1:rep_div] [A2:rep_div] [A3:rep_div] [C:rep_div] [p1:pf (A1 or A2 or A3)] [q1:pf A1 -> pf C] [q2:pf A2 -> pf C] [q3:pf A3 -> pf C] or_e A1 (A2 or A3) C p1 ([x3:pf A1] q1 x3) ([p2:pf (A2 or A3)] or_e A2 A3 C p2 ([x3:pf A2] q2 x3) ([x3:pf A3] q3 x3)).
or3_i1 : {A:rep_div} {B:rep_div} {C:rep_div} pf A -> pf (A or B or C) = [A:rep_div] [B:rep_div] [C:rep_div] [q:pf A] or_i1 A (B or C) q.
or3_i2 : {B:rep_div} {A:rep_div} {C:rep_div} pf B -> pf (A or B or C) = [B:rep_div] [A:rep_div] [C:rep_div] [q:pf B] or_i2 (B or C) A (or_i1 B C q).
or3_i3 : {C:rep_div} {A:rep_div} {B:rep_div} pf C -> pf (A or B or C) = [C:rep_div] [A:rep_div] [B:rep_div] [q:pf C] or_i2 (B or C) A (or_i2 C B q).
or4_e : {A1:rep_div} {A2:rep_div} {A3:rep_div} {A4:rep_div} {C:rep_div} pf (A1 or A2 or A3 or A4) -> (pf A1 -> pf C) -> (pf A2 -> pf C) -> (pf A3 -> pf C) -> (pf A4 -> pf C) -> pf C = [A1:rep_div] [A2:rep_div] [A3:rep_div] [A4:rep_div] [C:rep_div] [p1:pf (A1 or A2 or A3 or A4)] [q1:pf A1 -> pf C] [q2:pf A2 -> pf C] [q3:pf A3 -> pf C] [q4:pf A4 -> pf C] or3_e A1 A2 (A3 or A4) C p1 ([x3:pf A1] q1 x3) ([x3:pf A2] q2 x3) ([p2:pf (A3 or A4)] or_e A3 A4 C p2 ([x3:pf A3] q3 x3) ([x3:pf A4] q4 x3)).
or4_i2 : {B:rep_div} {A:rep_div} {C:rep_div} {D:rep_div} pf B -> pf (A or B or C or D) = [B:rep_div] [A:rep_div] [C:rep_div] [D:rep_div] [q:pf B] or_i2 (B or C or D) A (or3_i1 B C D q).
or4_i3 : {C:rep_div} {A:rep_div} {B:rep_div} {D:rep_div} pf C -> pf (A or B or C or D) = [C:rep_div] [A:rep_div] [B:rep_div] [D:rep_div] [q:pf C] or_i2 (B or C or D) A (or3_i2 C B D q).
or_e1 : {A:rep_div} {B:rep_div} pf (A or B) -> pf (not B) -> pf A = [A:rep_div] [B:rep_div] [p1:pf (A or B)] [p2:pf (not B)] or_e A B A p1 ([p3:pf A] p3) ([p4:pf B] false_e A (imp_e B false p2 p4)).
or_e2 : {A:rep_div} {B:rep_div} pf (A or B) -> pf (not A) -> pf B = [A:rep_div] [B:rep_div] [p1:pf (A or B)] [p2:pf (not A)] or_e A B B p1 ([p3:pf A] false_e B (imp_e A false p2 p3)) ([p4:pf B] p4).
or_symm : {A:rep_div} {B:rep_div} pf (A or B) -> pf (B or A) = [A:rep_div] [B:rep_div] [p1:pf (A or B)] or_e A B (B or A) p1 ([p2:pf A] or_i2 A B p2) ([p2:pf B] or_i1 B A p2).
not_i : {A:rep_div} (pf A -> pf false) -> pf (not A) = [A:rep_div] [p1:pf A -> pf false] imp_i A false ([x3:pf A] p1 x3).
not_e : {A:rep_div} pf (not A) -> pf A -> pf false = [A:rep_div] [x3:pf (not A)] [x4:pf A] imp_e A false x3 x4.
not_e' : {A:rep_div} {B:rep_div} pf (not A) -> pf A -> pf B = [A:rep_div] [B:rep_div] [p1:pf (not A)] [p2:pf A] false_e B (not_e A p1 p2).
not_ei : {B:rep_div} {A:rep_div} pf (not B) -> (pf A -> pf B) -> pf (not A) = [B:rep_div] [A:rep_div] [p1:pf (not B)] [l8:pf A -> pf B] imp_i A false ([p2:pf A] imp_e B false p1 (l8 p2)).
not_not_i : {B:rep_div} pf B -> pf (not (not B)) = [B:rep_div] [p1:pf B] not_i (not B) ([p2:pf (not B)] not_e B p2 p1).
not_false : pf (not false) = not_i false ([p1:pf false] p1).
equiv_i : {A:rep_div} {B:rep_div} pf (A imp B) -> pf (B imp A) -> pf (A equiv B) = [A:rep_div] [B:rep_div] [x3:pf (A imp B)] [x4:pf (B imp A)] and_i (A imp B) (B imp A) x3 x4.
equiv_i2 : {A:rep_div} {B:rep_div} (pf A -> pf B) -> (pf B -> pf A) -> pf (A equiv B) = [A:rep_div] [B:rep_div] [q1:pf A -> pf B] [q2:pf B -> pf A] equiv_i A B (imp_i A B ([p3:pf A] q1 p3)) (imp_i B A ([p4:pf B] q2 p4)).
equiv_e1 : {A:rep_div} {B:rep_div} pf (A equiv B) -> pf A -> pf B = [A:rep_div] [B:rep_div] [q1:pf (A equiv B)] [q2:pf A] imp_e A B (and_e1 (A imp B) (B imp A) q1) q2.
equiv_e2 : {A:rep_div} {B:rep_div} pf (A equiv B) -> pf B -> pf A = [A:rep_div] [B:rep_div] [q1:pf (A equiv B)] [q2:pf B] imp_e B A (and_e2 (A imp B) (B imp A) q1) q2.
equiv_symm : {A:rep_div} {B:rep_div} pf (A equiv B) -> pf (B equiv A) = [A:rep_div] [B:rep_div] [q:pf (A equiv B)] and_i (B imp A) (A imp B) (and_e2 (A imp B) (B imp A) q) (and_e1 (A imp B) (B imp A) q).
equiv_refl : {A:rep_div} pf (A equiv A) = [A:rep_div] equiv_i2 A A ([q:pf A] q) ([q:pf A] q).
equiv_trans : {A:rep_div} {B:rep_div} {C:rep_div} pf (A equiv B) -> pf (B equiv C) -> pf (A equiv C) = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf (A equiv B)] [p2:pf (B equiv C)] equiv_i2 A C ([q:pf A] equiv_e1 B C p2 (equiv_e1 A B p1 q)) ([q:pf C] equiv_e2 A B p1 (equiv_e2 B C p2 q)).
equiv_true : {A:rep_div} {B:rep_div} pf A -> pf B -> pf (A equiv B) = [A:rep_div] [B:rep_div] [p1:pf A] [p2:pf B] equiv_i A B (imp_i A B ([p3:pf A] p2)) (imp_i B A ([p4:pf B] p1)).
equiv_false : {A:rep_div} {B:rep_div} pf (not A) -> pf (not B) -> pf (A equiv B) = [A:rep_div] [B:rep_div] [p1:pf (not A)] [p2:pf (not B)] equiv_i2 A B ([p3:pf A] not_e' A B p1 p3) ([p3:pf B] not_e' B A p2 p3).
equiv_not : {A:rep_div} {B:rep_div} pf (A equiv B) -> pf (not A equiv not B) = [A:rep_div] [B:rep_div] [p1:pf (A equiv B)] equiv_i2 (not A) (not B) ([p2:pf (not A)] not_i B ([p3:pf B] not_e A p2 (equiv_e2 A B p1 p3))) ([p2:pf (not B)] not_i A ([p3:pf A] not_e B p2 (equiv_e1 A B p1 p3))).
equiv_or_false : {B:rep_div} {A:rep_div} pf (not B) -> pf (A or B equiv A) = [B:rep_div] [A:rep_div] [p1:pf (not B)] equiv_i2 (A or B) A ([p2:pf (A or B)] or_e A B A p2 ([p3:pf A] p3) ([p4:pf B] false_e A (not_e B p1 p4))) ([x3:pf A] or_i1 A B x3).
equiv_or_false1 : {A:rep_div} {B:rep_div} pf (not A) -> pf (A or B equiv B) = [A:rep_div] [B:rep_div] [p1:pf (not A)] equiv_i2 (A or B) B ([p2:pf (A or B)] or_e A B B p2 ([p4:pf A] false_e B (not_e A p1 p4)) ([p5:pf B] p5)) ([x3:pf B] or_i2 B A x3).
equiv_or : {A:rep_div} {A':rep_div} {B:rep_div} {B':rep_div} pf (A equiv A') -> pf (B equiv B') -> pf (A or B equiv A' or B') = [A:rep_div] [A':rep_div] [B:rep_div] [B':rep_div] [p1:pf (A equiv A')] [p2:pf (B equiv B')] equiv_i (A or B) (A' or B') (imp_i (A or B) (A' or B') ([p3:pf (A or B)] or_e A B (A' or B') p3 ([p4:pf A] or_i1 A' B' (equiv_e1 A A' p1 p4)) ([p5:pf B] or_i2 B' A' (equiv_e1 B B' p2 p5)))) (imp_i (A' or B') (A or B) ([p4:pf (A' or B')] or_e A' B' (A or B) p4 ([p6:pf A'] or_i1 A B (equiv_e2 A A' p1 p6)) ([p7:pf B'] or_i2 B A (equiv_e2 B B' p2 p7)))).
equiv_and_true : {B:rep_div} {A:rep_div} pf B -> pf (A and B equiv A) = [B:rep_div] [A:rep_div] [p1:pf B] equiv_i2 (A and B) A ([x3:pf (A and B)] and_e1 A B x3) ([p3:pf A] and_i A B p3 p1).
equiv_and_true1 : {A:rep_div} {B:rep_div} pf A -> pf (A and B equiv B) = [A:rep_div] [B:rep_div] [p1:pf A] equiv_i2 (A and B) B ([x3:pf (A and B)] and_e2 A B x3) ([p3:pf B] and_i A B p1 p3).
equiv_and : {A:rep_div} {A':rep_div} {B:rep_div} {B':rep_div} pf (A equiv A') -> (pf A -> pf (B equiv B')) -> pf (A and B equiv A' and B') = [A:rep_div] [A':rep_div] [B:rep_div] [B':rep_div] [q1:pf (A equiv A')] [Fq:pf A -> pf (B equiv B')] equiv_i (A and B) (A' and B') (imp_i (A and B) (A' and B') ([Z:pf (A and B)] and_i A' B' (equiv_e1 A A' q1 (and_e1 A B Z)) (equiv_e1 B B' (imp_e A (B equiv B') (imp_i A (B equiv B') ([x3:pf A] Fq x3)) (and_e1 A B Z)) (and_e2 A B Z)))) (imp_i (A' and B') (A and B) ([Z:pf (A' and B')] and_i A B (equiv_e2 A A' q1 (and_e1 A' B' Z)) (equiv_e2 B B' (imp_e A (B equiv B') (imp_i A (B equiv B') ([x3:pf A] Fq x3)) (equiv_e2 A A' q1 (and_e1 A' B' Z))) (and_e2 A' B' Z)))).
equiv_and' : {A:rep_div} {A':rep_div} {B:rep_div} {B':rep_div} pf (A equiv A') -> pf (B equiv B') -> pf (A and B equiv A' and B') = [A:rep_div] [A':rep_div] [B:rep_div] [B':rep_div] [q1:pf (A equiv A')] [Fq:pf (B equiv B')] equiv_i2 (A and B) (A' and B') ([p1:pf (A and B)] and_i A' B' (equiv_e1 A A' q1 (and_e1 A B p1)) (equiv_e1 B B' Fq (and_e2 A B p1))) ([p1:pf (A' and B')] and_i A B (equiv_e2 A A' q1 (and_e1 A' B' p1)) (equiv_e2 B B' Fq (and_e2 A' B' p1))).
equiv_and_elim : {A:rep_div} {B:rep_div} {B':rep_div} pf A -> pf (A and B equiv A and B') -> pf (B equiv B') = [A:rep_div] [B:rep_div] [B':rep_div] [p1:pf A] [p2:pf (A and B equiv A and B')] equiv_i2 B B' ([p3:pf B] and_e2 A B' (equiv_e1 (A and B) (A and B') p2 (and_i A B p1 p3))) ([p4:pf B'] and_e2 A B (equiv_e2 (A and B) (A and B') p2 (and_i A B' p1 p4))).
equiv_forall : {X1:tp} {A:rep_plus X1 -> rep_div} {B:rep_plus X1 -> rep_div} ({x3:rep_plus X1} pf (A x3 equiv B x3)) -> pf (forall X1 ([x3:rep_plus X1] A x3) equiv forall X1 ([x3:rep_plus X1] B x3)) = [X1:tp] [A:rep_plus X1 -> rep_div] [B:rep_plus X1 -> rep_div] [p1:{x4:rep_plus X1} pf (A x4 equiv B x4)] equiv_i2 (forall X1 ([x3:rep_plus X1] A x3)) (forall X1 ([x3:rep_plus X1] B x3)) ([p2:pf (forall X1 ([x3:rep_plus X1] A x3))] forall_i X1 ([x3:rep_plus X1] B x3) ([x5:rep_plus X1] equiv_e1 (A x5) (B x5) (p1 x5) (forall_e X1 ([x3:rep_plus X1] A x3) p2 x5))) ([p3:pf (forall X1 ([x3:rep_plus X1] B x3))] forall_i X1 ([x3:rep_plus X1] A x3) ([x6:rep_plus X1] equiv_e2 (A x6) (B x6) (p1 x6) (forall_e X1 ([x3:rep_plus X1] B x3) p3 x6))).
equiv_exists : {X1:tp} {A:rep_plus X1 -> rep_div} {B:rep_plus X1 -> rep_div} ({x3:rep_plus X1} pf (A x3 equiv B x3)) -> pf (exists X1 ([x3:rep_plus X1] A x3) equiv exists X1 ([x3:rep_plus X1] B x3)) = [X1:tp] [A:rep_plus X1 -> rep_div] [B:rep_plus X1 -> rep_div] [p1:{x4:rep_plus X1} pf (A x4 equiv B x4)] equiv_i2 (exists X1 ([x3:rep_plus X1] A x3)) (exists X1 ([x3:rep_plus X1] B x3)) ([p2:pf (exists X1 ([x3:rep_plus X1] A x3))] exists_e X1 ([x3:rep_plus X1] A x3) (exists X1 ([x3:rep_plus X1] B x3)) p2 ([x5:rep_plus X1] [p3:pf (A x5)] exists_i X1 ([x3:rep_plus X1] B x3) x5 (equiv_e1 (A x5) (B x5) (p1 x5) p3))) ([p4:pf (exists X1 ([x3:rep_plus X1] B x3))] exists_e X1 ([x3:rep_plus X1] B x3) (exists X1 ([x3:rep_plus X1] A x3)) p4 ([x6:rep_plus X1] [p5:pf (B x6)] exists_i X1 ([x3:rep_plus X1] A x3) x6 (equiv_e2 (A x6) (B x6) (p1 x6) p5))).
equiv_imp : {A:rep_div} {A':rep_div} {B:rep_div} {B':rep_div} pf (A equiv A') -> pf (B equiv B') -> pf ((A imp B) equiv A' imp B') = [A:rep_div] [A':rep_div] [B:rep_div] [B':rep_div] [p1:pf (A equiv A')] [p2:pf (B equiv B')] equiv_i2 (A imp B) (A' imp B') ([p3:pf (A imp B)] imp_i A' B' ([p4:pf A'] equiv_e1 B B' p2 (imp_e A B p3 (equiv_e2 A A' p1 p4)))) ([p3:pf (A' imp B')] imp_i A B ([p4:pf A] equiv_e2 B B' p2 (imp_e A' B' p3 (equiv_e1 A A' p1 p4)))).
equiv_imp' : {A:rep_div} {A':rep_div} {B:rep_div} {B':rep_div} pf (A equiv A') -> (pf A -> pf (B equiv B')) -> pf ((A imp B) equiv A' imp B') = [A:rep_div] [A':rep_div] [B:rep_div] [B':rep_div] [p1:pf (A equiv A')] [p2:pf A -> pf (B equiv B')] equiv_i2 (A imp B) (A' imp B') ([p3:pf (A imp B)] imp_i A' B' ([p4:pf A'] equiv_e1 B B' (p2 (equiv_e2 A A' p1 p4)) (imp_e A B p3 (equiv_e2 A A' p1 p4)))) ([p3:pf (A' imp B')] imp_i A B ([p4:pf A] equiv_e2 B B' (p2 p4) (imp_e A' B' p3 (equiv_e1 A A' p1 p4)))).
if_i : {E:rep_div} {A:rep_div} {B:rep_div} (pf E -> pf A) -> (pf (not E) -> pf B) -> pf (if E A B) = [E:rep_div] [A:rep_div] [B:rep_div] [FQ1:pf E -> pf A] [FQ2:pf (not E) -> pf B] and_i (E imp A) (not E imp B) (imp_i E A ([x3:pf E] FQ1 x3)) (imp_i (not E) B ([x3:pf (not E)] FQ2 x3)).
if_i1 : {E:rep_div} {A:rep_div} {B:rep_div} pf E -> pf A -> pf (if E A B) = [E:rep_div] [A:rep_div] [B:rep_div] [Q1:pf E] [Q2:pf A] and_i (E imp A) ((E imp false) imp B) (imp_true A E Q2) (imp_i (E imp false) B ([Q':pf (E imp false)] false_e B (imp_e E false Q' Q1))).
if_i2 : {E:rep_div} {B:rep_div} {A:rep_div} pf (not E) -> pf B -> pf (if E A B) = [E:rep_div] [B:rep_div] [A:rep_div] [Q1:pf (not E)] [Q2:pf B] and_i (E imp A) (not E imp B) (imp_i E A ([Q':pf E] false_e A (imp_e E false Q1 Q'))) (imp_true B (not E) Q2).
if_e1 : {E:rep_div} {A:rep_div} {B:rep_div} pf (if E A B) -> pf E -> pf A = [E:rep_div] [A:rep_div] [B:rep_div] [Q1:pf (if E A B)] [Q2:pf E] imp_e E A (and_e1 (E imp A) (not E imp B) Q1) Q2.
if_e2 : {E:rep_div} {A:rep_div} {B:rep_div} pf (if E A B) -> pf (not E) -> pf B = [E:rep_div] [A:rep_div] [B:rep_div] [Q1:pf (if E A B)] [Q2:pf (not E)] imp_e (not E) B (and_e2 (E imp A) (not E imp B) Q1) Q2.
if_equiv1 : {A:rep_div} {B:rep_div} {C:rep_div} pf A -> pf (if A B C equiv B) = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf A] equiv_i2 (if A B C) B ([p2:pf (if A B C)] if_e1 A B C p2 p1) ([p2:pf B] if_i1 A B C p1 p2).
if_equiv2 : {A:rep_div} {B:rep_div} {C:rep_div} pf (not A) -> pf (if A B C equiv C) = [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf (not A)] equiv_i2 (if A B C) C ([p2:pf (if A B C)] if_e2 A B C p2 p1) ([p2:pf C] if_i2 A C B p1 p2).
equiv_if : {E:rep_div} {E':rep_div} {A:rep_div} {A':rep_div} {B:rep_div} {B':rep_div} pf (E equiv E') -> (pf E -> pf (A equiv A')) -> (pf (not E) -> pf (B equiv B')) -> pf (if E A B equiv if E' A' B') = [E:rep_div] [E':rep_div] [A:rep_div] [A':rep_div] [B:rep_div] [B':rep_div] [p1:pf (E equiv E')] [p2:pf E -> pf (A equiv A')] [p3:pf (not E) -> pf (B equiv B')] equiv_i2 (if E A B) (if E' A' B') ([p5:pf (if E A B)] if_i E' A' B' ([p6:pf E'] equiv_e1 A A' (p2 (equiv_e2 E E' p1 p6)) (if_e1 E A B p5 (equiv_e2 E E' p1 p6))) ([p7:pf (not E')] equiv_e1 B B' (p3 (equiv_e2 (not E) (not E') (equiv_not E E' p1) p7)) (if_e2 E A B p5 (equiv_e2 (not E) (not E') (equiv_not E E' p1) p7)))) ([p15:pf (if E' A' B')] if_i E A B ([p6:pf E] equiv_e2 A A' (p2 p6) (if_e1 E' A' B' p15 (equiv_e1 E E' p1 p6))) ([p7:pf (not E)] equiv_e2 B B' (p3 p7) (if_e2 E' A' B' p15 (equiv_e1 (not E) (not E') (equiv_not E E' p1) p7)))).
a_or_b_and_not_a : {A:rep_div} {B:rep_div} pf (A or B) -> pf (not A) -> pf B = [A:rep_div] [B:rep_div] [Q1:pf (A or B)] [Q2:pf (not A)] or_e A B B Q1 ([Q:pf A] false_e B (imp_e A false Q2 Q)) ([Q:pf B] Q).
not_or_not_not_and : {A:rep_div} {B:rep_div} pf (not A or not B) -> pf (not (A and B)) = [A:rep_div] [B:rep_div] [p1:pf (not A or not B)] or_e (not A) (not B) (not (A and B)) p1 ([q1:pf (not A)] not_i (A and B) ([q2:pf (A and B)] not_e A q1 (and_e1 A B q2))) ([q1:pf (not B)] not_i (A and B) ([q2:pf (A and B)] not_e B q1 (and_e2 A B q2))).
forall_imp_i : {X1:tp} {X2:rep_plus X1 -> rep_plus rep_times} {X3:rep_plus X1 -> rep_plus rep_times} ({x3:rep_plus X1} pf (X2 x3) -> pf (X3 x3)) -> pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3)) = [X1:tp] [X2:rep_plus X1 -> rep_plus rep_times] [X3:rep_plus X1 -> rep_plus rep_times] [l:{x3:rep_plus X1} pf (X2 x3) -> pf (X3 x3)] forall_i X1 ([x3:rep_plus X1] X2 x3 imp X3 x3) ([x3:rep_plus X1] imp_i (X2 x3) (X3 x3) ([p1:pf (X2 x3)] l x3 p1)).
forall_imp_e : {X1:tp} {X2:rep_plus X1 -> rep_plus rep_times} {X3:rep_plus X1 -> rep_plus rep_times} pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3)) -> ({a:rep_plus X1} pf (X2 a) -> pf (X3 a)) = [X1:tp] [X2:rep_plus X1 -> rep_plus rep_times] [X3:rep_plus X1 -> rep_plus rep_times] [p1:pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3))] [a:rep_plus X1] [x3:pf (X2 a)] imp_e (X2 a) (X3 a) (forall_e X1 ([x4:rep_plus X1] X2 x4 imp X3 x4) p1 a) x3.
forall_imp2_i : {X1:tp} {X2:rep_plus X1 -> rep_plus rep_times} {X3:rep_plus X1 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus rep_times} ({x3:rep_plus X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3)) -> pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3)) = [X1:tp] [X2:rep_plus X1 -> rep_plus rep_times] [X3:rep_plus X1 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus rep_times] [l:{x3:rep_plus X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3)] forall_i X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3) ([x3:rep_plus X1] imp2_i (X2 x3) (X3 x3) (X4 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] l x3 p1 x4)).
forall_imp2_e : {X1:tp} {X2:rep_plus X1 -> rep_plus rep_times} {X3:rep_plus X1 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus rep_times} pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3)) -> ({a:rep_plus X1} pf (X2 a) -> pf (X3 a) -> pf (X4 a)) = [X1:tp] [X2:rep_plus X1 -> rep_plus rep_times] [X3:rep_plus X1 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus rep_times] [p1:pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3))] [a:rep_plus X1] [x3:pf (X2 a)] [x4:pf (X3 a)] imp2_e (X2 a) (X3 a) (X4 a) (forall_e X1 ([x5:rep_plus X1] X2 x5 imp X3 x5 imp X4 x5) p1 a) x3 x4.
forall_imp3_i : {X1:tp} {X2:rep_plus X1 -> rep_plus rep_times} {X3:rep_plus X1 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus rep_times} ({x3:rep_plus X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3)) -> pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3)) = [X1:tp] [X2:rep_plus X1 -> rep_plus rep_times] [X3:rep_plus X1 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus rep_times] [l:{x3:rep_plus X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3)] forall_i X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3) ([x3:rep_plus X1] imp3_i (X2 x3) (X3 x3) (X4 x3) (X5 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] [x5:pf (X4 x3)] l x3 p1 x4 x5)).
forall_imp3_e : {X1:tp} {X2:rep_plus X1 -> rep_plus rep_times} {X3:rep_plus X1 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus rep_times} pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3)) -> ({a:rep_plus X1} pf (X2 a) -> pf (X3 a) -> pf (X4 a) -> pf (X5 a)) = [X1:tp] [X2:rep_plus X1 -> rep_plus rep_times] [X3:rep_plus X1 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus rep_times] [p1:pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3))] [a:rep_plus X1] [x3:pf (X2 a)] [x4:pf (X3 a)] [x5:pf (X4 a)] imp3_e (X2 a) (X3 a) (X4 a) (X5 a) (forall_e X1 ([x6:rep_plus X1] X2 x6 imp X3 x6 imp X4 x6 imp X5 x6) p1 a) x3 x4 x5.
forall_imp4_i : {X1:tp} {X2:rep_plus X1 -> rep_plus rep_times} {X3:rep_plus X1 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus rep_times} ({x3:rep_plus X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3)) -> pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3)) = [X1:tp] [X2:rep_plus X1 -> rep_plus rep_times] [X3:rep_plus X1 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus rep_times] [l:{x3:rep_plus X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3)] forall_i X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3) ([x3:rep_plus X1] imp4_i (X2 x3) (X3 x3) (X4 x3) (X5 x3) (X6 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] [x5:pf (X4 x3)] [x6:pf (X5 x3)] l x3 p1 x4 x5 x6)).
forall_imp5_i : {X1:tp} {X2:rep_plus X1 -> rep_plus rep_times} {X3:rep_plus X1 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus rep_times} ({x3:rep_plus X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3) -> pf (X7 x3)) -> pf (forall X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3 imp X7 x3)) = [X1:tp] [X2:rep_plus X1 -> rep_plus rep_times] [X3:rep_plus X1 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus rep_times] [l:{x3:rep_plus X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3) -> pf (X7 x3)] forall_i X1 ([x3:rep_plus X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3 imp X7 x3) ([x3:rep_plus X1] imp5_i (X2 x3) (X3 x3) (X4 x3) (X5 x3) (X6 x3) (X7 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] [x5:pf (X4 x3)] [x6:pf (X5 x3)] [x7:pf (X6 x3)] l x3 p1 x4 x5 x6 x7)).
forall2_imp_i : {X1:tp} {X2:tp} {X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} pf (X3 x3 x4) -> pf (X4 x3 x4)) -> pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4)) = [X1:tp] [X2:tp] [X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} pf (X3 x3 x4) -> pf (X4 x3 x4)] forall2_i X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4) ([x3:rep_plus X1] [y:rep_plus X2] imp_i (X3 x3 y) (X4 x3 y) ([x4:pf (X3 x3 y)] p1 x3 y x4)).
forall2_imp2_i : {X1:tp} {X2:tp} {X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4)) -> pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4)) = [X1:tp] [X2:tp] [X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4)] forall2_i X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4) ([x3:rep_plus X1] [y:rep_plus X2] imp2_i (X3 x3 y) (X4 x3 y) (X5 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] p1 x3 y x4 x5)).
forall2_imp3_i : {X1:tp} {X2:tp} {X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4)) -> pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4)) = [X1:tp] [X2:tp] [X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4)] forall2_i X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4) ([x3:rep_plus X1] [y:rep_plus X2] imp3_i (X3 x3 y) (X4 x3 y) (X5 x3 y) (X6 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] [x6:pf (X5 x3 y)] p1 x3 y x4 x5 x6)).
forall2_imp4_i : {X1:tp} {X2:tp} {X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4)) -> pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4)) = [X1:tp] [X2:tp] [X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4)] forall2_i X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4) ([x3:rep_plus X1] [y:rep_plus X2] imp4_i (X3 x3 y) (X4 x3 y) (X5 x3 y) (X6 x3 y) (X7 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] [x6:pf (X5 x3 y)] [x7:pf (X6 x3 y)] p1 x3 y x4 x5 x6 x7)).
forall2_imp5_i : {X1:tp} {X2:tp} {X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4) -> pf (X8 x3 x4)) -> pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4 imp X8 x3 x4)) = [X1:tp] [X2:tp] [X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4) -> pf (X8 x3 x4)] forall2_i X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4 imp X8 x3 x4) ([x3:rep_plus X1] [y:rep_plus X2] imp5_i (X3 x3 y) (X4 x3 y) (X5 x3 y) (X6 x3 y) (X7 x3 y) (X8 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] [x6:pf (X5 x3 y)] [x7:pf (X6 x3 y)] [x8:pf (X7 x3 y)] p1 x3 y x4 x5 x6 x7 x8)).
forall2_imp_e : {X1:tp} {X2:tp} {X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4)) -> ({x3:rep_plus X1} {y:rep_plus X2} pf (X3 x3 y) -> pf (X4 x3 y)) = [X1:tp] [X2:tp] [X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [p1:pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4))] [x4:rep_plus X1] [y:rep_plus X2] [x3:pf (X3 x4 y)] imp_e (X3 x4 y) (X4 x4 y) (forall2_e X1 X2 ([x5:rep_plus X1] [x6:rep_plus X2] X3 x5 x6 imp X4 x5 x6) p1 x4 y) x3.
forall2_imp2_e : {X1:tp} {X2:tp} {X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4)) -> ({x3:rep_plus X1} {y:rep_plus X2} pf (X3 x3 y) -> pf (X4 x3 y) -> pf (X5 x3 y)) = [X1:tp] [X2:tp] [X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [p1:pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4))] [x4:rep_plus X1] [y:rep_plus X2] [x3:pf (X3 x4 y)] [x5:pf (X4 x4 y)] imp2_e (X3 x4 y) (X4 x4 y) (X5 x4 y) (forall2_e X1 X2 ([x6:rep_plus X1] [x7:rep_plus X2] X3 x6 x7 imp X4 x6 x7 imp X5 x6 x7) p1 x4 y) x3 x5.
forall2_imp3_e : {X1:tp} {X2:tp} {X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4)) -> ({x3:rep_plus X1} {y:rep_plus X2} pf (X3 x3 y) -> pf (X4 x3 y) -> pf (X5 x3 y) -> pf (X6 x3 y)) = [X1:tp] [X2:tp] [X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [p1:pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4))] [x4:rep_plus X1] [y:rep_plus X2] [x3:pf (X3 x4 y)] [x5:pf (X4 x4 y)] [x6:pf (X5 x4 y)] imp3_e (X3 x4 y) (X4 x4 y) (X5 x4 y) (X6 x4 y) (forall2_e X1 X2 ([x7:rep_plus X1] [x8:rep_plus X2] X3 x7 x8 imp X4 x7 x8 imp X5 x7 x8 imp X6 x7 x8) p1 x4 y) x3 x5 x6.
forall2_imp4_e : {X1:tp} {X2:tp} {X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times} pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4)) -> ({x3:rep_plus X1} {y:rep_plus X2} pf (X3 x3 y) -> pf (X4 x3 y) -> pf (X5 x3 y) -> pf (X6 x3 y) -> pf (X7 x3 y)) = [X1:tp] [X2:tp] [X3:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus rep_times] [p1:pf (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4))] [x4:rep_plus X1] [y:rep_plus X2] [x3:pf (X3 x4 y)] [x5:pf (X4 x4 y)] [x6:pf (X5 x4 y)] [x7:pf (X6 x4 y)] imp4_e (X3 x4 y) (X4 x4 y) (X5 x4 y) (X6 x4 y) (X7 x4 y) (forall2_e X1 X2 ([x8:rep_plus X1] [x9:rep_plus X2] X3 x8 x9 imp X4 x8 x9 imp X5 x8 x9 imp X6 x8 x9 imp X7 x8 x9) p1 x4 y) x3 x5 x6 x7.
forall3_imp_i : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] imp_i (X4 x3 y z1) (X5 x3 y z1) ([x4:pf (X4 x3 y z1)] p1 x3 y z1 x4)).
forall3_imp2_i : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] imp2_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] p1 x3 y z1 x4 x5)).
forall3_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] imp3_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] p1 x3 y z1 x4 x5 x6)).
forall3_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] imp4_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) (X8 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] [x7:pf (X7 x3 y z1)] p1 x3 y z1 x4 x5 x6 x7)).
forall3_imp5_i : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] imp5_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) (X8 x3 y z1) (X9 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] [x7:pf (X7 x3 y z1)] [x8:pf (X8 x3 y z1)] p1 x3 y z1 x4 x5 x6 x7 x8)).
forall3_imp6_i : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5) -> pf (X10 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5 imp X10 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5) -> pf (X10 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5 imp X10 x3 x4 x5) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] imp6_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) (X8 x3 y z1) (X9 x3 y z1) (X10 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] [x7:pf (X7 x3 y z1)] [x8:pf (X8 x3 y z1)] [x9:pf (X9 x3 y z1)] p1 x3 y z1 x4 x5 x6 x7 x8 x9)).
forall3_imp_e : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [x3:pf (X4 x4 y z2)] imp_e (X4 x4 y z2) (X5 x4 y z2) (forall3_e X1 X2 X3 ([x5:rep_plus X1] [x6:rep_plus X2] [x7:rep_plus X3] X4 x5 x6 x7 imp X5 x5 x6 x7) p1 x4 y z2) x3.
forall3_imp2_e : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] imp2_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (forall3_e X1 X2 X3 ([x6:rep_plus X1] [x7:rep_plus X2] [x8:rep_plus X3] X4 x6 x7 x8 imp X5 x6 x7 x8 imp X6 x6 x7 x8) p1 x4 y z2) x3 x5.
forall3_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1) -> pf (X7 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] [x6:pf (X6 x4 y z2)] imp3_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (X7 x4 y z2) (forall3_e X1 X2 X3 ([x7:rep_plus X1] [x8:rep_plus X2] [x9:rep_plus X3] X4 x7 x8 x9 imp X5 x7 x8 x9 imp X6 x7 x8 x9 imp X7 x7 x8 x9) p1 x4 y z2) x3 x5 x6.
forall3_imp4_e : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1) -> pf (X7 x3 y z1) -> pf (X8 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] [x6:pf (X6 x4 y z2)] [x7:pf (X7 x4 y z2)] imp4_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (X7 x4 y z2) (X8 x4 y z2) (forall3_e X1 X2 X3 ([x8:rep_plus X1] [x9:rep_plus X2] [x10:rep_plus X3] X4 x8 x9 x10 imp X5 x8 x9 x10 imp X6 x8 x9 x10 imp X7 x8 x9 x10 imp X8 x8 x9 x10) p1 x4 y z2) x3 x5 x6 x7.
forall3_imp5_e : {X1:tp} {X2:tp} {X3:tp} {X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times} pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1) -> pf (X7 x3 y z1) -> pf (X8 x3 y z1) -> pf (X9 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus rep_times] [p1:pf (forall3 X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] [x6:pf (X6 x4 y z2)] [x7:pf (X7 x4 y z2)] [x8:pf (X8 x4 y z2)] imp5_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (X7 x4 y z2) (X8 x4 y z2) (X9 x4 y z2) (forall3_e X1 X2 X3 ([x9:rep_plus X1] [x10:rep_plus X2] [x11:rep_plus X3] X4 x9 x10 x11 imp X5 x9 x10 x11 imp X6 x9 x10 x11 imp X7 x9 x10 x11 imp X8 x9 x10 x11 imp X9 x9 x10 x11) p1 x4 y z2) x3 x5 x6 x7 x8.
forall4_imp_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] imp_i (X5 x3 y z1 u) (X6 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] p1 x3 y z1 u x4)).
forall4_imp2_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] imp2_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] p1 x3 y z1 u x4 x5)).
forall4_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] imp3_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) (X8 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] [x6:pf (X7 x3 y z1 u)] p1 x3 y z1 u x4 x5 x6)).
forall4_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] imp4_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) (X8 x3 y z1 u) (X9 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] [x6:pf (X7 x3 y z1 u)] [x7:pf (X8 x3 y z1 u)] p1 x3 y z1 u x4 x5 x6 x7)).
forall4_imp5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6) -> pf (X10 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6) -> pf (X10 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] imp5_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) (X8 x3 y z1 u) (X9 x3 y z1 u) (X10 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] [x6:pf (X7 x3 y z1 u)] [x7:pf (X8 x3 y z1 u)] [x8:pf (X9 x3 y z1 u)] p1 x3 y z1 u x4 x5 x6 x7 x8)).
forall4_imp2_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} {u:rep_plus X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [p1:pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [u:rep_plus X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] imp2_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x6:rep_plus X1] [x7:rep_plus X2] [x8:rep_plus X3] [x9:rep_plus X4] X5 x6 x7 x8 x9 imp X6 x6 x7 x8 x9 imp X7 x6 x7 x8 x9) p1 x4 y z2 u) x3 x5.
forall4_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} {u:rep_plus X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [p1:pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [u:rep_plus X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] imp3_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x7:rep_plus X1] [x8:rep_plus X2] [x9:rep_plus X3] [x10:rep_plus X4] X5 x7 x8 x9 x10 imp X6 x7 x8 x9 x10 imp X7 x7 x8 x9 x10 imp X8 x7 x8 x9 x10) p1 x4 y z2 u) x3 x5 x6.
forall4_imp4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} {u:rep_plus X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u) -> pf (X9 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [p1:pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [u:rep_plus X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] [x7:pf (X8 x4 y z2 u)] imp4_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (X9 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x8:rep_plus X1] [x9:rep_plus X2] [x10:rep_plus X3] [x11:rep_plus X4] X5 x8 x9 x10 x11 imp X6 x8 x9 x10 x11 imp X7 x8 x9 x10 x11 imp X8 x8 x9 x10 x11 imp X9 x8 x9 x10 x11) p1 x4 y z2 u) x3 x5 x6 x7.
forall4_imp5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} {u:rep_plus X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u) -> pf (X9 x3 y z1 u) -> pf (X10 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [p1:pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [u:rep_plus X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] [x7:pf (X8 x4 y z2 u)] [x8:pf (X9 x4 y z2 u)] imp5_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (X9 x4 y z2 u) (X10 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x9:rep_plus X1] [x10:rep_plus X2] [x11:rep_plus X3] [x12:rep_plus X4] X5 x9 x10 x11 x12 imp X6 x9 x10 x11 x12 imp X7 x9 x10 x11 x12 imp X8 x9 x10 x11 x12 imp X9 x9 x10 x11 x12 imp X10 x9 x10 x11 x12) p1 x4 y z2 u) x3 x5 x6 x7 x8.
forall4_imp6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} {X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times} pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6 imp X11 x3 x4 x5 x6)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} {u:rep_plus X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u) -> pf (X9 x3 y z1 u) -> pf (X10 x3 y z1 u) -> pf (X11 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus rep_times] [p1:pf (forall4 X1 X2 X3 X4 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6 imp X11 x3 x4 x5 x6))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [u:rep_plus X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] [x7:pf (X8 x4 y z2 u)] [x8:pf (X9 x4 y z2 u)] [x9:pf (X10 x4 y z2 u)] imp6_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (X9 x4 y z2 u) (X10 x4 y z2 u) (X11 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x10:rep_plus X1] [x11:rep_plus X2] [x12:rep_plus X3] [x13:rep_plus X4] X5 x10 x11 x12 x13 imp X6 x10 x11 x12 x13 imp X7 x10 x11 x12 x13 imp X8 x10 x11 x12 x13 imp X9 x10 x11 x12 x13 imp X10 x10 x11 x12 x13 imp X11 x10 x11 x12 x13) p1 x4 y z2 u) x3 x5 x6 x7 x8 x9.
forall5_imp_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7)] forall5_i X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] [v1:rep_plus X5] imp_i (X6 x3 y z1 u v1) (X7 x3 y z1 u v1) ([x4:pf (X6 x3 y z1 u v1)] p1 x3 y z1 u v1 x4)).
forall5_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7)] forall5_i X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] [v1:rep_plus X5] imp3_i (X6 x3 y z1 u v1) (X7 x3 y z1 u v1) (X8 x3 y z1 u v1) (X9 x3 y z1 u v1) ([x4:pf (X6 x3 y z1 u v1)] [x5:pf (X7 x3 y z1 u v1)] [x6:pf (X8 x3 y z1 u v1)] p1 x3 y z1 u v1 x4 x5 x6)).
forall5_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7) -> pf (X10 x3 x4 x5 x6 x7)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7 imp X10 x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7) -> pf (X10 x3 x4 x5 x6 x7)] forall5_i X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7 imp X10 x3 x4 x5 x6 x7) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] [v1:rep_plus X5] imp4_i (X6 x3 y z1 u v1) (X7 x3 y z1 u v1) (X8 x3 y z1 u v1) (X9 x3 y z1 u v1) (X10 x3 y z1 u v1) ([x4:pf (X6 x3 y z1 u v1)] [x5:pf (X7 x3 y z1 u v1)] [x6:pf (X8 x3 y z1 u v1)] [x7:pf (X9 x3 y z1 u v1)] p1 x3 y z1 u v1 x4 x5 x6 x7)).
forall5_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times} pf (forall5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} {u:rep_plus X4} {v1:rep_plus X5} pf (X6 x3 y z1 u v1) -> pf (X7 x3 y z1 u v1) -> pf (X8 x3 y z1 u v1) -> pf (X9 x3 y z1 u v1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus rep_times] [p1:pf (forall5 X1 X2 X3 X4 X5 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [u:rep_plus X4] [v2:rep_plus X5] [x3:pf (X6 x4 y z2 u v2)] [x5:pf (X7 x4 y z2 u v2)] [x6:pf (X8 x4 y z2 u v2)] imp3_e (X6 x4 y z2 u v2) (X7 x4 y z2 u v2) (X8 x4 y z2 u v2) (X9 x4 y z2 u v2) (forall5_e X1 X2 X3 X4 X5 ([x7:rep_plus X1] [x8:rep_plus X2] [x9:rep_plus X3] [x10:rep_plus X4] [x11:rep_plus X5] X6 x7 x8 x9 x10 x11 imp X7 x7 x8 x9 x10 x11 imp X8 x7 x8 x9 x10 x11 imp X9 x7 x8 x9 x10 x11) p1 x4 y z2 u v2) x3 x5 x6.
forall6_imp2_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8)] forall6_i X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] [v1:rep_plus X5] [w:rep_plus X6] imp2_i (X7 x3 y z1 u v1 w) (X8 x3 y z1 u v1 w) (X9 x3 y z1 u v1 w) ([x4:pf (X7 x3 y z1 u v1 w)] [x5:pf (X8 x3 y z1 u v1 w)] p1 x3 y z1 u v1 w x4 x5)).
forall6_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8)] forall6_i X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] [v1:rep_plus X5] [w:rep_plus X6] imp3_i (X7 x3 y z1 u v1 w) (X8 x3 y z1 u v1 w) (X9 x3 y z1 u v1 w) (X10 x3 y z1 u v1 w) ([x4:pf (X7 x3 y z1 u v1 w)] [x5:pf (X8 x3 y z1 u v1 w)] [x6:pf (X9 x3 y z1 u v1 w)] p1 x3 y z1 u v1 w x4 x5 x6)).
forall6_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8) -> pf (X11 x3 x4 x5 x6 x7 x8)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8) -> pf (X11 x3 x4 x5 x6 x7 x8)] forall6_i X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] [v1:rep_plus X5] [w:rep_plus X6] imp4_i (X7 x3 y z1 u v1 w) (X8 x3 y z1 u v1 w) (X9 x3 y z1 u v1 w) (X10 x3 y z1 u v1 w) (X11 x3 y z1 u v1 w) ([x4:pf (X7 x3 y z1 u v1 w)] [x5:pf (X8 x3 y z1 u v1 w)] [x6:pf (X9 x3 y z1 u v1 w)] [x7:pf (X10 x3 y z1 u v1 w)] p1 x3 y z1 u v1 w x4 x5 x6 x7)).
forall6_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} {u:rep_plus X4} {v1:rep_plus X5} {w:rep_plus X6} pf (X7 x3 y z1 u v1 w) -> pf (X8 x3 y z1 u v1 w) -> pf (X9 x3 y z1 u v1 w) -> pf (X10 x3 y z1 u v1 w)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [p1:pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [u:rep_plus X4] [v2:rep_plus X5] [w:rep_plus X6] [x3:pf (X7 x4 y z2 u v2 w)] [x5:pf (X8 x4 y z2 u v2 w)] [x6:pf (X9 x4 y z2 u v2 w)] imp3_e (X7 x4 y z2 u v2 w) (X8 x4 y z2 u v2 w) (X9 x4 y z2 u v2 w) (X10 x4 y z2 u v2 w) (forall6_e X1 X2 X3 X4 X5 X6 ([x7:rep_plus X1] [x8:rep_plus X2] [x9:rep_plus X3] [x10:rep_plus X4] [x11:rep_plus X5] [x12:rep_plus X6] X7 x7 x8 x9 x10 x11 x12 imp X8 x7 x8 x9 x10 x11 x12 imp X9 x7 x8 x9 x10 x11 x12 imp X10 x7 x8 x9 x10 x11 x12) p1 x4 y z2 u v2 w) x3 x5 x6.
forall6_imp4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} {X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times} pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8)) -> ({x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} {u:rep_plus X4} {v1:rep_plus X5} {w:rep_plus X6} pf (X7 x3 y z1 u v1 w) -> pf (X8 x3 y z1 u v1 w) -> pf (X9 x3 y z1 u v1 w) -> pf (X10 x3 y z1 u v1 w) -> pf (X11 x3 y z1 u v1 w)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus rep_times] [p1:pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8))] [x4:rep_plus X1] [y:rep_plus X2] [z2:rep_plus X3] [u:rep_plus X4] [v2:rep_plus X5] [w:rep_plus X6] [x3:pf (X7 x4 y z2 u v2 w)] [x5:pf (X8 x4 y z2 u v2 w)] [x6:pf (X9 x4 y z2 u v2 w)] [x7:pf (X10 x4 y z2 u v2 w)] imp4_e (X7 x4 y z2 u v2 w) (X8 x4 y z2 u v2 w) (X9 x4 y z2 u v2 w) (X10 x4 y z2 u v2 w) (X11 x4 y z2 u v2 w) (forall6_e X1 X2 X3 X4 X5 X6 ([x8:rep_plus X1] [x9:rep_plus X2] [x10:rep_plus X3] [x11:rep_plus X4] [x12:rep_plus X5] [x13:rep_plus X6] X7 x8 x9 x10 x11 x12 x13 imp X8 x8 x9 x10 x11 x12 x13 imp X9 x8 x9 x10 x11 x12 x13 imp X10 x8 x9 x10 x11 x12 x13 imp X11 x8 x9 x10 x11 x12 x13) p1 x4 y z2 u v2 w) x3 x5 x6 x7.
forall7_imp9_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times} {X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times} {X12:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times} {X13:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times} {X14:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times} {X15:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times} {X16:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times} {X17:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} {x9:rep_plus X7} pf (X8 x3 x4 x5 x6 x7 x8 x9) -> pf (X9 x3 x4 x5 x6 x7 x8 x9) -> pf (X10 x3 x4 x5 x6 x7 x8 x9) -> pf (X11 x3 x4 x5 x6 x7 x8 x9) -> pf (X12 x3 x4 x5 x6 x7 x8 x9) -> pf (X13 x3 x4 x5 x6 x7 x8 x9) -> pf (X14 x3 x4 x5 x6 x7 x8 x9) -> pf (X15 x3 x4 x5 x6 x7 x8 x9) -> pf (X16 x3 x4 x5 x6 x7 x8 x9) -> pf (X17 x3 x4 x5 x6 x7 x8 x9)) -> pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] X8 x3 x4 x5 x6 x7 x8 x9 imp X9 x3 x4 x5 x6 x7 x8 x9 imp X10 x3 x4 x5 x6 x7 x8 x9 imp X11 x3 x4 x5 x6 x7 x8 x9 imp X12 x3 x4 x5 x6 x7 x8 x9 imp X13 x3 x4 x5 x6 x7 x8 x9 imp X14 x3 x4 x5 x6 x7 x8 x9 imp X15 x3 x4 x5 x6 x7 x8 x9 imp X16 x3 x4 x5 x6 x7 x8 x9 imp X17 x3 x4 x5 x6 x7 x8 x9)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times] [X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times] [X12:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times] [X13:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times] [X14:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times] [X15:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times] [X16:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times] [X17:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} {x9:rep_plus X7} pf (X8 x3 x4 x5 x6 x7 x8 x9) -> pf (X9 x3 x4 x5 x6 x7 x8 x9) -> pf (X10 x3 x4 x5 x6 x7 x8 x9) -> pf (X11 x3 x4 x5 x6 x7 x8 x9) -> pf (X12 x3 x4 x5 x6 x7 x8 x9) -> pf (X13 x3 x4 x5 x6 x7 x8 x9) -> pf (X14 x3 x4 x5 x6 x7 x8 x9) -> pf (X15 x3 x4 x5 x6 x7 x8 x9) -> pf (X16 x3 x4 x5 x6 x7 x8 x9) -> pf (X17 x3 x4 x5 x6 x7 x8 x9)] forall7_i X1 X2 X3 X4 X5 X6 X7 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] X8 x3 x4 x5 x6 x7 x8 x9 imp X9 x3 x4 x5 x6 x7 x8 x9 imp X10 x3 x4 x5 x6 x7 x8 x9 imp X11 x3 x4 x5 x6 x7 x8 x9 imp X12 x3 x4 x5 x6 x7 x8 x9 imp X13 x3 x4 x5 x6 x7 x8 x9 imp X14 x3 x4 x5 x6 x7 x8 x9 imp X15 x3 x4 x5 x6 x7 x8 x9 imp X16 x3 x4 x5 x6 x7 x8 x9 imp X17 x3 x4 x5 x6 x7 x8 x9) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] [v1:rep_plus X5] [w:rep_plus X6] [r:rep_plus X7] imp9_i (X8 x3 y z1 u v1 w r) (X9 x3 y z1 u v1 w r) (X10 x3 y z1 u v1 w r) (X11 x3 y z1 u v1 w r) (X12 x3 y z1 u v1 w r) (X13 x3 y z1 u v1 w r) (X14 x3 y z1 u v1 w r) (X15 x3 y z1 u v1 w r) (X16 x3 y z1 u v1 w r) (X17 x3 y z1 u v1 w r) ([x4:pf (X8 x3 y z1 u v1 w r)] [x5:pf (X9 x3 y z1 u v1 w r)] [x6:pf (X10 x3 y z1 u v1 w r)] [x7:pf (X11 x3 y z1 u v1 w r)] [x8:pf (X12 x3 y z1 u v1 w r)] [x9:pf (X13 x3 y z1 u v1 w r)] [x10:pf (X14 x3 y z1 u v1 w r)] [x11:pf (X15 x3 y z1 u v1 w r)] [x12:pf (X16 x3 y z1 u v1 w r)] p1 x3 y z1 u v1 w r x4 x5 x6 x7 x8 x9 x10 x11 x12)).
forall8_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} {X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} {X12:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} {X13:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} {x9:rep_plus X7} {x10:rep_plus X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10)) -> pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [X12:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [X13:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} {x9:rep_plus X7} {x10:rep_plus X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10)] forall8_i X1 X2 X3 X4 X5 X6 X7 X8 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] [v1:rep_plus X5] [w:rep_plus X6] [r:rep_plus X7] [s:rep_plus X8] imp4_i (X9 x3 y z1 u v1 w r s) (X10 x3 y z1 u v1 w r s) (X11 x3 y z1 u v1 w r s) (X12 x3 y z1 u v1 w r s) (X13 x3 y z1 u v1 w r s) ([x4:pf (X9 x3 y z1 u v1 w r s)] [x5:pf (X10 x3 y z1 u v1 w r s)] [x6:pf (X11 x3 y z1 u v1 w r s)] [x7:pf (X12 x3 y z1 u v1 w r s)] p1 x3 y z1 u v1 w r s x4 x5 x6 x7)).
forall8_imp6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} {X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} {X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} {X12:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} {X13:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} {X14:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} {X15:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times} ({x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} {x9:rep_plus X7} {x10:rep_plus X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X14 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X15 x3 x4 x5 x6 x7 x8 x9 x10)) -> pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10 imp X14 x3 x4 x5 x6 x7 x8 x9 x10 imp X15 x3 x4 x5 x6 x7 x8 x9 x10)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [X10:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [X11:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [X12:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [X13:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [X14:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [X15:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_plus X4 -> rep_plus X5 -> rep_plus X6 -> rep_plus X7 -> rep_plus X8 -> rep_plus rep_times] [p1:{x3:rep_plus X1} {x4:rep_plus X2} {x5:rep_plus X3} {x6:rep_plus X4} {x7:rep_plus X5} {x8:rep_plus X6} {x9:rep_plus X7} {x10:rep_plus X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X14 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X15 x3 x4 x5 x6 x7 x8 x9 x10)] forall8_i X1 X2 X3 X4 X5 X6 X7 X8 ([x3:rep_plus X1] [x4:rep_plus X2] [x5:rep_plus X3] [x6:rep_plus X4] [x7:rep_plus X5] [x8:rep_plus X6] [x9:rep_plus X7] [x10:rep_plus X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10 imp X14 x3 x4 x5 x6 x7 x8 x9 x10 imp X15 x3 x4 x5 x6 x7 x8 x9 x10) ([x3:rep_plus X1] [y:rep_plus X2] [z1:rep_plus X3] [u:rep_plus X4] [v1:rep_plus X5] [w:rep_plus X6] [r:rep_plus X7] [s:rep_plus X8] imp6_i (X9 x3 y z1 u v1 w r s) (X10 x3 y z1 u v1 w r s) (X11 x3 y z1 u v1 w r s) (X12 x3 y z1 u v1 w r s) (X13 x3 y z1 u v1 w r s) (X14 x3 y z1 u v1 w r s) (X15 x3 y z1 u v1 w r s) ([x4:pf (X9 x3 y z1 u v1 w r s)] [x5:pf (X10 x3 y z1 u v1 w r s)] [x6:pf (X11 x3 y z1 u v1 w r s)] [x7:pf (X12 x3 y z1 u v1 w r s)] [x8:pf (X13 x3 y z1 u v1 w r s)] [x9:pf (X14 x3 y z1 u v1 w r s)] p1 x3 y z1 u v1 w r s x4 x5 x6 x7 x8 x9)).
exists_and_i : {T:tp} {A:rep_plus T -> rep_div} {B:rep_plus T -> rep_div} {x3:rep_plus T} pf (A x3) -> pf (B x3) -> pf (exists T ([x4:rep_plus T] A x4 and B x4)) = [T:tp] [A:rep_plus T -> rep_div] [B:rep_plus T -> rep_div] [x5:rep_plus T] [pA:pf (A x5)] [pB:pf (B x5)] exists_i T ([x3:rep_plus T] A x3 and B x3) x5 (and_i (A x5) (B x5) pA pB).
exists_and_e : {X1:tp} {A:rep_plus X1 -> rep_div} {B:rep_plus X1 -> rep_div} {C:rep_div} pf (exists X1 ([x3:rep_plus X1] A x3 and B x3)) -> ({x4:rep_plus X1} pf (A x4) -> pf (B x4) -> pf C) -> pf C = [X1:tp] [A:rep_plus X1 -> rep_div] [B:rep_plus X1 -> rep_div] [C:rep_div] [p1:pf (exists X1 ([x5:rep_plus X1] A x5 and B x5))] [p2:{x6:rep_plus X1} pf (A x6) -> pf (B x6) -> pf C] cut (forall X1 ([x3:rep_plus X1] A x3 imp B x3 imp C)) C (forall_imp2_i X1 ([x7:rep_plus X1] A x7) ([x3:rep_plus X1] B x3) ([x3:rep_plus X1] C) ([x3:rep_plus X1] [x4:pf (A x3)] [x5:pf (B x3)] p2 x3 x4 x5)) ([x3:pf (forall X1 ([x3:rep_plus X1] A x3 imp B x3 imp C))] exists_e X1 ([x4:rep_plus X1] A x4 and B x4) C p1 ([x8:rep_plus X1] [p3:pf (A x8 and B x8)] p2 x8 (and_e1 (A x8) (B x8) p3) (and_e2 (A x8) (B x8) p3))).
exists3_and6_i : {X1:tp} {X2:tp} {X3:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} {B:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} {C:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} {D:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} {E:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} {F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div} {x3:rep_plus X1} {y:rep_plus X2} {z1:rep_plus X3} pf (A x3 y z1) -> pf (B x3 y z1) -> pf (C x3 y z1) -> pf (D x3 y z1) -> pf (E x3 y z1) -> pf (F x3 y z1) -> pf (exists3 X1 X2 X3 ([x4:rep_plus X1] [y1:rep_plus X2] [z2:rep_plus X3] A x4 y1 z2 and B x4 y1 z2 and C x4 y1 z2 and D x4 y1 z2 and E x4 y1 z2 and F x4 y1 z2)) = [X1:tp] [X2:tp] [X3:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [B:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [C:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [D:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [E:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [F:rep_plus X1 -> rep_plus X2 -> rep_plus X3 -> rep_div] [x5:rep_plus X1] [y:rep_plus X2] [z3:rep_plus X3] [pA:pf (A x5 y z3)] [pB:pf (B x5 y z3)] [pC:pf (C x5 y z3)] [pD:pf (D x5 y z3)] [pE:pf (E x5 y z3)] [pF:pf (F x5 y z3)] exists3_i X1 X2 X3 ([x3:rep_plus X1] [x4:rep_plus X2] [x6:rep_plus X3] A x3 x4 x6 and B x3 x4 x6 and C x3 x4 x6 and D x3 x4 x6 and E x3 x4 x6 and F x3 x4 x6) x5 y z3 (and6_i (A x5 y z3) (B x5 y z3) (C x5 y z3) (D x5 y z3) (E x5 y z3) (F x5 y z3) pA pB pC pD pE pF).
not_not_e : {B:rep_div} pf ((B imp _frl_frm ([A:rep_div] A)) imp _frl_frm ([A:rep_div] A)) -> pf B = [B:rep_div] [x3:pf ((B imp _frl_frm ([A:rep_div] A)) imp _frl_frm ([A:rep_div] A))] _not_not_e B x3.
excluded_middle_x : {A:rep_div} pf (not A) -> pf (not (not A)) -> pf false = [A:rep_div] [P1:pf (A imp false)] [P2:pf (not A imp false)] imp_e (not A) false P2 P1.
excluded_middle : {A:rep_div} pf (A or not A) = [A:rep_div] forall_i rep_times ([x3:rep_plus rep_times] (A imp x3) imp ((A imp false) imp x3) imp x3) ([C:rep_plus rep_times] imp_i (A imp C) (((A imp false) imp C) imp C) ([P1:pf (A imp C)] imp_i ((A imp false) imp C) C ([P2:pf ((A imp false) imp C)] not_not_e C (imp_i (C imp false) false ([P3:pf (C imp false)] excluded_middle_x A (imp_i A false ([P4:pf A] imp_e C false P3 (imp_e A C P1 P4))) (imp_i (not A) false ([P5:pf (not A)] imp_e C false P3 (imp_e (A imp false) C P2 P5)))))))).
suppose_not : {A:rep_div} (pf (not A) -> pf false) -> pf A = [A:rep_div] [P1:pf (not A) -> pf false] or_e A (not A) A (excluded_middle A) ([P2:pf A] P2) ([P3:pf (not A)] false_e A (P1 P3)).
or_imp_i : {A:rep_div} {B:rep_div} pf (A imp B) -> pf (not A or B) = [A:rep_div] [B:rep_div] [Q:pf (A imp B)] or_e A (not A) (not A or B) (excluded_middle A) ([Q':pf A] or_i2 B (not A) (imp_e A B Q Q')) ([Q':pf (not A)] or_i1 (not A) B Q').
equiv_not_not : {A:rep_div} pf (A equiv not (not A)) = [A:rep_div] equiv_i A (not (not A)) (imp_i A (not (not A)) ([x3:pf A] not_not_i A x3)) (imp_i ((A imp _frl_frm ([A1:rep_div] A1)) imp _frl_frm ([A2:rep_div] A2)) A ([x3:pf ((A imp _frl_frm ([A3:rep_div] A3)) imp _frl_frm ([A4:rep_div] A4))] not_not_e A x3)).
not_AE_not : {X1:tp} {A:rep_plus X1 -> rep_div} pf (not (forall X1 ([x3:rep_plus X1] A x3))) -> pf (exists X1 ([X:rep_plus X1] not (A X))) = [X1:tp] [A:rep_plus X1 -> rep_div] [P1:pf (not (forall X1 ([x3:rep_plus X1] A x3)))] suppose_not (exists X1 ([X:rep_plus X1] not (A X))) ([P3:pf (not (exists X1 ([X:rep_plus X1] not (A X))))] not_e (forall X1 ([x3:rep_plus X1] A x3)) P1 (forall_i X1 ([x3:rep_plus X1] A x3) ([X:rep_plus X1] suppose_not (A X) ([P4:pf (not (A X))] not_e (exists X1 ([X2:rep_plus X1] not (A X2))) P3 (exists_i X1 ([x3:rep_plus X1] not (A x3)) X P4))))).
not_AE_not2 : {X1:tp} {X2:tp} {A:rep_plus X1 -> rep_plus X2 -> rep_div} pf (not (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] A x3 x4))) -> pf (exists2 X1 X2 ([X:rep_plus X1] [Y:rep_plus X2] not (A X Y))) = [X1:tp] [X2:tp] [A:rep_plus X1 -> rep_plus X2 -> rep_div] [P1:pf (not (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] A x3 x4)))] suppose_not (exists2 X1 X2 ([X:rep_plus X1] [Y:rep_plus X2] not (A X Y))) ([P3:pf (not (exists2 X1 X2 ([X:rep_plus X1] [Y:rep_plus X2] not (A X Y))))] not_e (forall2 X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] A x3 x4)) P1 (forall2_i X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] A x3 x4) ([X:rep_plus X1] [Y:rep_plus X2] suppose_not (A X Y) ([P4:pf (not (A X Y))] not_e (exists2 X1 X2 ([X3:rep_plus X1] [Y1:rep_plus X2] not (A X3 Y1))) P3 (exists2_i X1 X2 ([x3:rep_plus X1] [x4:rep_plus X2] not (A x3 x4)) X Y P4))))).
not_EA_not : {X1:tp} {A:rep_plus X1 -> rep_plus rep_times} pf (not (exists X1 ([x3:rep_plus X1] A x3))) -> pf (forall X1 ([X:rep_plus X1] not (A X))) = [X1:tp] [A:rep_plus X1 -> rep_plus rep_times] [P1:pf (not (exists X1 ([x3:rep_plus X1] A x3)))] not_not_e (forall X1 ([X:rep_plus X1] not (A X))) (not_ei (exists X1 ([x3:rep_plus X1] A x3)) (not (forall X1 ([X:rep_plus X1] not (A X)))) P1 ([P2:pf (not (forall X1 ([X:rep_plus X1] not (A X))))] exists_ei X1 ([x3:rep_plus X1] not (not (A x3))) ([x3:rep_plus X1] A x3) (not_AE_not X1 ([x3:rep_plus X1] not (A x3)) P2) ([X:rep_plus X1] [x3:pf ((A X imp _frl_frm ([A1:rep_div] A1)) imp _frl_frm ([A2:rep_div] A2))] not_not_e (A X) x3))).
demorgan_or_not : {A:rep_div} {B:rep_div} pf (not (A and B)) -> pf (not A or not B) = [A:rep_div] [B:rep_div] [Q:pf (not (A and B))] or_e A (not A) (not A or not B) (excluded_middle A) ([PA:pf A] or_e B (not B) (not A or not B) (excluded_middle B) ([PB:pf B] false_e (not A or not B) (imp_e (A and B) false Q (and_i A B PA PB))) ([NotPB:pf (not B)] or_i2 (not B) (not A) NotPB)) ([NotPA:pf (not A)] or_e B (not B) (not A or not B) (excluded_middle B) ([PB:pf B] or_i1 (not A) (not B) NotPA) ([NotPB:pf (not B)] or_i1 (not A) (not B) NotPA)).
demorgan_not_and : {A:rep_div} {B:rep_div} pf (not (A or B)) -> pf (not A and not B) = [A:rep_div] [B:rep_div] [p1:pf (not (A or B))] and_i (not A) (not B) (or_e A (not A) (not A) (excluded_middle A) ([pa:pf A] cut false (not A) (imp_e (A or B) false p1 (or_i1 A B pa)) ([x3:pf false] false_e (not A) x3)) ([pna:pf (not A)] pna)) (or_e B (not B) (not B) (excluded_middle B) ([pb:pf B] cut false (not B) (imp_e (A or B) false p1 (or_i2 B A pb)) ([x3:pf false] false_e (not B) x3)) ([pnb:pf (not B)] pnb)).
contrapositive1 : {A:rep_div} {B:rep_div} pf (A imp B) -> pf (not B imp not A) = [A:rep_div] [B:rep_div] [Q:pf (A imp B)] or_e (not A) B ((B imp false) imp not A) (or_imp_i A B Q) ([Q':pf (not A)] imp_i (B imp false) (not A) ([P_NOT_B:pf (B imp false)] Q')) ([Q':pf B] imp_i (B imp false) (not A) ([P_NOT_B:pf (B imp false)] false_e (not A) (imp_e B false P_NOT_B Q'))).
contrapositive2 : {B:rep_div} {A:rep_div} pf (not B imp not A) -> pf (A imp B) = [B:rep_div] [A:rep_div] [Q:pf (not B imp not A)] or_e (not (not B)) (not A) (A imp B) (or_imp_i (not B) (not A) Q) ([Q':pf (not (not B))] imp_i A B ([PA:pf A] not_not_e B Q')) ([Q':pf (not A)] imp_i A B ([PA:pf A] false_e B (imp_e A false Q' PA))).
equiv_not_i : {A:rep_div} {B:rep_div} pf (A equiv B) -> pf (not A equiv not B) = [A:rep_div] [B:rep_div] [P1:pf (A equiv B)] equiv_i (not A) (not B) (contrapositive1 B A (imp_i B A ([x3:pf B] equiv_e2 A B P1 x3))) (contrapositive1 A B (imp_i A B ([x3:pf A] equiv_e1 A B P1 x3))).
equiv_not_e : {A:rep_div} {B:rep_div} pf (not A equiv not B) -> pf (A equiv B) = [A:rep_div] [B:rep_div] [p1:pf (not A equiv not B)] equiv_i A B (contrapositive2 B A (imp_i (not B) (not A) ([x3:pf (not B)] equiv_e2 (not A) (not B) p1 x3))) (contrapositive2 A B (imp_i (not A) (not B) ([x3:pf (not A)] equiv_e1 (not A) (not B) p1 x3))).
if_e : {E:rep_div} {A:rep_div} {B:rep_div} {C:rep_div} pf (if E A B) -> (pf E -> pf A -> pf C) -> (pf (not E) -> pf B -> pf C) -> pf C = [E:rep_div] [A:rep_div] [B:rep_div] [C:rep_div] [p1:pf (if E A B)] [p2:pf E -> pf A -> pf C] [p3:pf (not E) -> pf B -> pf C] cut (if E A B) C p1 ([x3:pf (if E A B)] cut (E imp A imp C) C (imp2_i E A C ([x4:pf E] [x5:pf A] p2 x4 x5)) ([x4:pf (E imp A imp C)] cut (not E imp B imp C) C (imp2_i (not E) B C ([x5:pf (not E)] [x6:pf B] p3 x5 x6)) ([x5:pf (not E imp B imp C)] or_e E (not E) C (excluded_middle E) ([p4:pf E] p2 p4 (if_e1 E A B p1 p4)) ([p4:pf (not E)] p3 p4 (if_e2 E A B p1 p4))))).
+ : rep_plus num -> rep_plus num -> rep_plus num = [x3:rep_plus num] [x4:rep_plus num] plus x3 x4.
- : rep_plus num -> rep_plus num -> rep_plus num = [x3:rep_plus num] [x4:rep_plus num] minus x3 x4.
* : rep_plus num -> rep_plus num -> rep_plus num = [x3:rep_plus num] [x4:rep_plus num] times x3 x4.
>= : rep_plus num -> rep_plus num -> rep_plus rep_times = [x3:rep_plus num] [x4:rep_plus num] geq x3 x4.
> : rep_plus num -> rep_plus num -> rep_plus rep_times = [x3:rep_plus num] [x4:rep_plus num] gt x3 x4.
<= : rep_plus num -> rep_plus num -> rep_plus rep_times = [x3:rep_plus num] [x4:rep_plus num] leq x3 x4.
< : rep_plus num -> rep_plus num -> rep_plus rep_times = [x3:rep_plus num] [x4:rep_plus num] lt x3 x4.
plus_assoc : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (+ (+ A B) C) (+ A (+ B C))) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] _assoc_add A B C.
assoc_plus : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (+ A (+ B C)) (+ (+ A B) C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] symm num (+ (+ A B) C) (+ A (+ B C)) (plus_assoc A B C).
plus_zero : {A:rep_plus num} pf (== num (+ A zero) A) = [A:rep_plus num] _zero_add A.
zero_plus : {A:rep_plus num} pf (== num (+ zero A) A) = [A:rep_plus num] trans num (plus zero A) (plus A zero) A (_comm_add zero A) (plus_zero A).
plus_inv : {A:rep_plus num} pf (== num (- A A) zero) = [A:rep_plus num] _inv_add A.
inv_plus : {A:tnum} pf (== num (+ (neg A) A) zero) = [A:tnum] trans num (plus (neg A) A) (plus A (neg A)) zero (_comm_add (neg A) A) (plus_inv A).
comm_plus : {A:rep_plus num} {B:rep_plus num} pf (== num (+ A B) (+ B A)) = [A:rep_plus num] [B:rep_plus num] _comm_add A B.
plus_comm : {X1:rep_plus num} {X2:rep_plus num} pf (== num (+ X1 X2) (+ X2 X1)) = [X1:rep_plus num] [X2:rep_plus num] comm_plus X1 X2.
times_assoc : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (* (* A B) C) (* A (* B C))) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] _assoc_mult A B C.
assoc_times : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (* A (* B C)) (* (* A B) C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] symm num (* (* A B) C) (* A (* B C)) (times_assoc A B C).
times_one : {A:rep_plus num} pf (== num (* A one) A) = [A:rep_plus num] _zero_mult A.
one_times : {A:rep_plus num} pf (== num (* one A) A) = [A:rep_plus num] trans num (times one A) (times A one) A (_comm_mult one A) (times_one A).
comm_times : {A:rep_plus num} {B:rep_plus num} pf (== num (* A B) (* B A)) = [A:rep_plus num] [B:rep_plus num] _comm_mult A B.
distrib : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (* A (+ B C)) (+ (* A B) (* A C))) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] _distrib A B C.
distrib_right : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (* (+ A B) C) (+ (* A C) (* B C))) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] cut (== num (+ (* C A) (* C B)) (+ (* A C) (* B C))) (== num (* (+ A B) C) (+ (* A C) (* B C))) (congr2 num num (* A C) (* C A) (* B C) (* C B) ([i1:rep_plus num] [j:rep_plus num] == num (+ (* C A) (* C B)) (+ i1 j)) (comm_times A C) (comm_times B C) (refl num (+ (* C A) (* C B)))) ([p1:pf (== num (+ (* C A) (* C B)) (+ (* A C) (* B C)))] trans3 num (* (+ A B) C) (* C (+ A B)) (+ (* C A) (* C B)) (+ (* A C) (* B C)) (comm_times (+ A B) C) (distrib C A B) p1).
neg_neg_e : {A:tnum} pf (== num (neg (neg A)) A) = [A:tnum] cut (== num (- (- A A) (neg A)) (- zero (neg A))) (== num (neg (neg A)) A) (congr num (- A A) zero ([z1:rep_plus num] == num (- z1 (neg A)) (- zero (neg A))) (plus_inv A) (refl num (- zero (neg A)))) ([p1:pf (== num (- (+ A (neg A)) (neg A)) (+ zero (neg (neg A))))] cut (== num (+ A zero) (+ zero (neg (neg A)))) (== num (neg (neg A)) A) (congr num zero (- (neg A) (neg A)) ([z2:rep_plus num] == num (+ A z2) (+ zero (neg (neg A)))) (symm num (- (neg A) (neg A)) zero (plus_inv (neg A))) (trans num (+ A (+ (neg A) (neg (neg A)))) (+ (+ A (neg A)) (neg (neg A))) (+ zero (neg (neg A))) (assoc_plus A (neg A) (neg (neg A))) p1)) ([p2:pf (== num (+ A zero) (+ zero (neg (neg A))))] trans4 num (neg (neg A)) (+ (neg (neg A)) zero) (+ zero (neg (neg A))) (+ A zero) A (symm num (+ (neg (neg A)) zero) (neg (neg A)) (plus_zero (neg (neg A)))) (comm_plus (neg (neg A)) zero) (symm num (+ A zero) (+ zero (neg (neg A))) p2) (plus_zero A))).
neg_zero : pf (== num (neg zero) zero) = trans num (neg zero) (+ zero (neg zero)) zero (symm num (+ zero (neg zero)) (neg zero) (zero_plus (neg zero))) (plus_inv zero).
plus_cong : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (== num A B) -> pf (== num C D) -> pf (== num (+ A C) (+ B D)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (== num A B)] [p2:pf (== num C D)] congr2 num num A B C D ([i1:rep_plus num] [j:rep_plus num] == num (+ i1 j) (+ B D)) p1 p2 (refl num (+ B D)).
plus_cong2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num A B) -> pf (== num (+ C A) (+ C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num A B)] plus_cong C C A B (refl num C) p1.
plus_cong1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num A B) -> pf (== num (+ A C) (+ B C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num A B)] plus_cong A B C C p1 (refl num C).
plus_elim2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (+ A B) (+ C B)) -> pf (== num A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num (+ A B) (+ C B))] trans3 num A (+ (+ A B) (neg B)) (+ (+ C B) (neg B)) C (trans3 num A (+ A zero) (+ A (- B B)) (+ (+ A B) (neg B)) (symm num (+ A zero) A (plus_zero A)) (plus_cong2 zero (- B B) A (symm num (- B B) zero (plus_inv B))) (assoc_plus A B (neg B))) (plus_cong1 (+ A B) (+ C B) (neg B) p1) (trans3 num (+ (+ C B) (neg B)) (+ C (+ B (neg B))) (+ C zero) C (plus_assoc C B (neg B)) (plus_cong2 (- B B) zero C (plus_inv B)) (plus_zero C)).
plus_elim1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (+ A B) (+ A C)) -> pf (== num B C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num (+ A B) (+ A C))] plus_elim2 B A C (trans3 num (+ B A) (+ A B) (+ A C) (+ C A) (comm_plus B A) p1 (comm_plus A C)).
times_cong : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (== num A B) -> pf (== num C D) -> pf (== num (* A C) (* B D)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (== num A B)] [p2:pf (== num C D)] congr2 num num A B C D ([i1:rep_plus num] [j:rep_plus num] == num (* i1 j) (* B D)) p1 p2 (refl num (* B D)).
times_cong2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num A B) -> pf (== num (* C A) (* C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num A B)] times_cong C C A B (refl num C) p1.
times_cong1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num A B) -> pf (== num (* A C) (* B C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num A B)] times_cong A B C C p1 (refl num C).
neg_cong : {A:rep_plus num} {B:rep_plus num} pf (== num A B) -> pf (== num (neg A) (neg B)) = [A:rep_plus num] [B:rep_plus num] [p1:pf (== num A B)] congr num A B ([i1:rep_plus num] == num (neg i1) (neg B)) p1 (refl num (neg B)).
cancel_a+b-b : {A:rep_plus num} {B:rep_plus num} pf (== num (- (+ A B) B) A) = [A:rep_plus num] [B:rep_plus num] symm num A (+ (+ A B) (neg B)) (trans3 num A (+ A zero) (+ A (- B B)) (+ (+ A B) (neg B)) (symm num (+ A zero) A (plus_zero A)) (plus_cong2 zero (- B B) A (symm num (- B B) zero (plus_inv B))) (assoc_plus A B (neg B))).
cancel_a-b+b : {A:rep_plus num} {B:rep_plus num} pf (== num (+ (- A B) B) A) = [A:rep_plus num] [B:rep_plus num] symm num A (+ (+ A (neg B)) B) (trans4 num A (- (+ A B) B) (+ A (+ B (neg B))) (+ A (+ (neg B) B)) (+ (+ A (neg B)) B) (symm num (- (+ A B) B) A (cancel_a+b-b A B)) (plus_assoc A B (neg B)) (plus_cong2 (+ B (neg B)) (+ (neg B) B) A (comm_plus B (neg B))) (assoc_plus A (neg B) B)).
cancel_a+b-a : {A:rep_plus num} {B:rep_plus num} pf (== num (- (+ A B) A) B) = [A:rep_plus num] [B:rep_plus num] symm num B (+ (+ A B) (neg A)) (trans3 num B (+ (- B A) A) (+ A (- B A)) (+ (+ A B) (neg A)) (symm num (+ (- B A) A) B (cancel_a-b+b B A)) (comm_plus (- B A) A) (assoc_plus A B (neg A))).
cancel_a+b-a' : {A:rep_plus num} {B:rep_plus num} pf (== num (+ A (- B A)) B) = [A:rep_plus num] [B:rep_plus num] trans num (+ A (+ B (neg A))) (+ (+ A B) (neg A)) B (assoc_plus A B (neg A)) (cancel_a+b-a A B).
cancel_a-a+b : {A:rep_plus num} {B:rep_plus num} pf (== num (+ (- A A) B) B) = [A:rep_plus num] [B:rep_plus num] trans3 num (+ (+ A (neg A)) B) (+ B (+ A (neg A))) (+ (+ B A) (neg A)) B (comm_plus (+ A (neg A)) B) (assoc_plus B A (neg A)) (cancel_a+b-b B A).
cancel_a-a+b' : {A:rep_plus num} {B:rep_plus num} pf (== num (+ A (+ (neg A) B)) B) = [A:rep_plus num] [B:rep_plus num] trans num (+ A (+ (neg A) B)) (+ (+ A (neg A)) B) B (assoc_plus A (neg A) B) (cancel_a-a+b A B).
cancel_-a+a+b : {A:tnum} {B:rep_plus num} pf (== num (+ (+ (neg A) A) B) B) = [A:tnum] [B:rep_plus num] trans2 num (+ (+ (neg A) A) B) (+ (+ A (neg A)) B) B (plus_cong1 (+ (neg A) A) (+ A (neg A)) B (comm_plus (neg A) A)) (cancel_a-a+b A B).
cancel_-a+a+b' : {A:tnum} {B:rep_plus num} pf (== num (+ (neg A) (+ A B)) B) = [A:tnum] [B:rep_plus num] trans num (+ (neg A) (+ A B)) (+ (+ (neg A) A) B) B (assoc_plus (neg A) A B) (cancel_-a+a+b A B).
times_zero : {A:rep_plus num} pf (== num (* A zero) zero) = [A:rep_plus num] cut (== num (+ (* zero A) (* zero A)) (* zero A)) (== num (* A zero) zero) (trans2 num (+ (* zero A) (* zero A)) (* (+ zero zero) A) (* zero A) (symm num (* (+ zero zero) A) (+ (* zero A) (* zero A)) (distrib_right zero zero A)) (times_cong1 (+ zero zero) zero A (plus_zero zero))) ([p1:pf (== num (+ (* zero A) (* zero A)) (* zero A))] cut (== num (+ (+ (* zero A) (* zero A)) (neg (* zero A))) (+ (* zero A) (neg (* zero A)))) (== num (* A zero) zero) (plus_cong1 (+ (* zero A) (* zero A)) (* zero A) (neg (* zero A)) p1) ([p2:pf (== num (- (+ (* zero A) (* zero A)) (* zero A)) (- (* zero A) (* zero A)))] trans4 num (* A zero) (* zero A) (- (+ (* zero A) (* zero A)) (* zero A)) (- (* zero A) (* zero A)) zero (comm_times A zero) (symm num (- (+ (* zero A) (* zero A)) (* zero A)) (* zero A) (cancel_a+b-b (* zero A) (* zero A))) p2 (plus_inv (* zero A)))).
zero_times : {A:rep_plus num} pf (== num (* zero A) zero) = [A:rep_plus num] trans num (* zero A) (* A zero) zero (comm_times zero A) (times_zero A).
neg_times1 : {A:tnum} {B:rep_plus num} pf (== num (* (neg A) B) (neg (* A B))) = [A:tnum] [B:rep_plus num] cut (== num zero (+ (* A B) (* (neg A) B))) (== num (* (neg A) B) (neg (* A B))) (trans3 num zero (* zero B) (* (- A A) B) (+ (* A B) (* (neg A) B)) (symm num (* zero B) zero (zero_times B)) (times_cong1 zero (- A A) B (symm num (- A A) zero (plus_inv A))) (distrib_right A (neg A) B)) ([p1:pf (== num zero (+ (* A B) (* (neg A) B)))] symm num (neg (* A B)) (* (neg A) B) (trans3 num (neg (* A B)) (+ zero (neg (* A B))) (+ (+ (* A B) (* (neg A) B)) (neg (* A B))) (* (neg A) B) (symm num (+ zero (neg (* A B))) (neg (* A B)) (zero_plus (neg (* A B)))) (plus_cong1 zero (+ (* A B) (* (neg A) B)) (neg (* A B)) p1) (cancel_a+b-a (* A B) (* (neg A) B)))).
neg_times2 : {A:rep_plus num} {B:tnum} pf (== num (* A (neg B)) (neg (* A B))) = [A:rep_plus num] [B:tnum] trans3 num (* A (neg B)) (* (neg B) A) (neg (* B A)) (neg (* A B)) (comm_times A (neg B)) (neg_times1 B A) (neg_cong (* B A) (* A B) (comm_times B A)).
neg_times : {A:tnum} {B:tnum} pf (== num (* (neg A) (neg B)) (* A B)) = [A:tnum] [B:tnum] trans3 num (* (neg A) (neg B)) (neg (* (neg A) B)) (neg (neg (* A B))) (* A B) (neg_times2 (neg A) B) (neg_cong (* (neg A) B) (neg (* A B)) (neg_times1 A B)) (neg_neg_e (* A B)).
distrib_minus : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (* A (- B C)) (- (* A B) (* A C))) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] trans num (* A (+ B (neg C))) (+ (* A B) (* A (neg C))) (+ (* A B) (neg (* A C))) (distrib A B (neg C)) (plus_cong2 (* A (neg C)) (neg (* A C)) (* A B) (neg_times2 A C)).
distrib_minus_right : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (* (- A B) C) (- (* A C) (* B C))) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] trans num (* (+ A (neg B)) C) (+ (* A C) (* (neg B) C)) (+ (* A C) (neg (* B C))) (distrib_right A (neg B) C) (plus_cong2 (* (neg B) C) (neg (* B C)) (* A C) (neg_times1 B C)).
neg_plus : {A:tnum} {B:tnum} pf (== num (+ (neg A) (neg B)) (neg (+ A B))) = [A:tnum] [B:tnum] cut (== num (+ zero (+ (neg A) (neg B))) (+ (- (+ A B) (+ A B)) (+ (neg A) (neg B)))) (== num (+ (neg A) (neg B)) (neg (+ A B))) (plus_cong1 zero (- (+ A B) (+ A B)) (+ (neg A) (neg B)) (symm num (- (+ A B) (+ A B)) zero (plus_inv (+ A B)))) ([p1:pf (== num (+ zero (+ (neg A) (neg B))) (+ (- (+ A B) (+ A B)) (+ (neg A) (neg B))))] cut (== num (+ (neg A) (neg B)) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B))))) (== num (+ (neg A) (neg B)) (neg (+ A B))) (trans5 num (+ (neg A) (neg B)) (+ (+ (neg A) (neg B)) zero) (+ zero (+ (neg A) (neg B))) (+ (- (+ A B) (+ A B)) (+ (neg A) (neg B))) (+ (+ (neg (+ A B)) (+ A B)) (+ (neg A) (neg B))) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B)))) (symm num (+ (+ (neg A) (neg B)) zero) (+ (neg A) (neg B)) (plus_zero (+ (neg A) (neg B)))) (comm_plus (+ (neg A) (neg B)) zero) p1 (plus_cong1 (+ (+ A B) (neg (+ A B))) (+ (neg (+ A B)) (+ A B)) (+ (neg A) (neg B)) (comm_plus (+ A B) (neg (+ A B)))) (plus_assoc (neg (+ A B)) (+ A B) (+ (neg A) (neg B)))) ([p2:pf (== num (+ (neg A) (neg B)) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B)))))] cut (== num (+ (+ A B) (+ (neg A) (neg B))) zero) (== num (+ (neg A) (neg B)) (neg (+ A B))) (trans3 num (+ (+ A B) (+ (neg A) (neg B))) (+ (+ (+ A B) (neg A)) (neg B)) (+ B (neg B)) zero (assoc_plus (+ A B) (neg A) (neg B)) (plus_cong1 (- (+ A B) A) B (neg B) (cancel_a+b-a A B)) (plus_inv B)) ([p3:pf (== num (+ (+ A B) (+ (neg A) (neg B))) zero)] trans3 num (+ (neg A) (neg B)) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B)))) (+ (neg (+ A B)) zero) (neg (+ A B)) p2 (plus_cong2 (+ (+ A B) (+ (neg A) (neg B))) zero (neg (+ A B)) p3) (plus_zero (neg (+ A B)))))).
times_elim1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (!= num A zero) -> pf (== num (* A B) (* A C)) -> pf (== num B C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (!= num A zero)] [p2:pf (== num (* A B) (* A C))] cut (== num (* A (- B C)) zero) (== num B C) (trans3 num (* A (- B C)) (- (* A B) (* A C)) (+ (* A C) (neg (* A C))) zero (distrib_minus A B C) (plus_cong1 (* A B) (* A C) (neg (* A C)) p2) (plus_inv (* A C))) ([p3:pf (== num (* A (- B C)) zero)] or_e (eqn A zero) (eqn (- B C) zero) (== num B C) (_cancelation A (- B C) p3) ([pA:pf (== num A zero)] false_e (== num B C) (not_e (eq num A zero) p1 pA)) ([pB:pf (== num (- B C) zero)] trans3 num B (+ (- B C) C) (+ zero C) C (symm num (+ (- B C) C) B (cancel_a-b+b B C)) (plus_cong1 (- B C) zero C pB) (zero_plus C))).
neqlem : {X:rep_div} {X1:tp} {A:rep_plus X1} {B:rep_plus X1} (pf X -> pf (== X1 A B)) -> pf (!= X1 A B) -> pf (not X) = [X:rep_div] [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [l8:pf X -> pf (== X1 A B)] [p1:pf (!= X1 A B)] not_ei (eq X1 A B) X p1 ([x3:pf X] l8 x3).
neq_symm : {X1:tp} {X2:rep_plus X1} {X3:rep_plus X1} pf (!= X1 X2 X3) -> pf (not (== X1 X3 X2)) = [X1:tp] [X2:rep_plus X1] [X3:rep_plus X1] [x3:pf (!= X1 X2 X3)] neqlem (== X1 X3 X2) X1 X2 X3 ([x4:pf (== X1 X3 X2)] symm X1 X3 X2 x4) x3.
gtlem : {X:rep_div} {A:rep_plus num} {B:rep_plus num} (pf X -> pf (>= A B)) -> pf (< A B) -> pf (not X) = [X:rep_div] [A:rep_plus num] [B:rep_plus num] [l8:pf X -> pf (>= A B)] [p1:pf (< A B)] not_ei (geq A B) X p1 ([x3:pf X] l8 x3).
yes : {X1:rep_plus rep_times} pf X1 -> pf X1 = [X1:rep_plus rep_times] [p1:pf X1] cut X1 X1 p1 ([x3:pf X1] p1).
gt->geq->false : {A:rep_plus num} {B:rep_plus num} {X:rep_div} pf (> A B) -> pf (>= B A) -> pf X = [A:rep_plus num] [B:rep_plus num] [X:rep_div] [p1:pf (> A B)] [p2:pf (>= B A)] false_e X (not_e (geq B A) p1 p2).
geq->gt->false : {A:rep_plus num} {B:rep_plus num} {X:rep_div} pf (>= A B) -> pf (> B A) -> pf X = [A:rep_plus num] [B:rep_plus num] [X:rep_div] [p1:pf (>= A B)] [p2:pf (> B A)] gt->geq->false B A X p2 p1.
geq->lt->false : {A:rep_plus num} {B:rep_plus num} {X:rep_div} pf (>= A B) -> pf (< A B) -> pf X = [A:rep_plus num] [B:rep_plus num] [X:rep_div] [x3:pf (>= A B)] [x4:pf (< A B)] geq->gt->false A B X x3 x4.
gt->eq->false : {A:rep_plus num} {B:rep_plus num} {X:rep_div} pf (> A B) -> pf (== num A B) -> pf X = [A:rep_plus num] [B:rep_plus num] [X:rep_div] [p1:pf (> A B)] [p2:pf (== num A B)] gt->geq->false A B X p1 (congr num A B ([i1:rep_plus num] >= B i1) p2 (_ord_reflexivity B)).
eq->neq->false : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {X:rep_div} pf (== X1 A B) -> pf (!= X1 A B) -> pf X = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [X:rep_div] [p1:pf (== X1 A B)] [p2:pf (!= X1 A B)] false_e X (not_e (eq X1 A B) p2 p1).
geq->or_gt_eq : {A:rep_plus num} {B:rep_plus num} pf (>= A B) -> pf (> A B or == num A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (>= A B)] or_e (geq B A) (not (geq B A)) (not (geq B A) or eqn A B) (_ord_excluded_middle B A) ([pA:pf (geq B A)] or_i2 (eqn A B) (not (geq B A)) (_ord_antisymmetry A B p1 pA)) ([pB:pf (not (geq B A))] or_i1 (not (geq B A)) (eqn A B) pB).
geq->or_eq_gt : {A:rep_plus num} {B:rep_plus num} pf (>= A B) -> pf (== num A B or > A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (>= A B)] or_symm (> A B) (== num A B) (geq->or_gt_eq A B p1).
leq->or_lt_eq : {A:rep_plus num} {B:rep_plus num} pf (<= A B) -> pf (< A B or == num A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (<= A B)] or_e (> B A) (== num B A) (> B A or == num A B) (geq->or_gt_eq B A p1) ([pA:pf (> B A)] or_i1 (> B A) (== num A B) pA) ([pB:pf (== num B A)] or_i2 (== num A B) (> B A) (symm num B A pB)).
leq->or_eq_lt : {X1:rep_plus num} {X2:rep_plus num} pf (<= X1 X2) -> pf (== num X1 X2 or < X1 X2) = [X1:rep_plus num] [X2:rep_plus num] [p1:pf (<= X1 X2)] or_symm (< X1 X2) (== num X1 X2) (leq->or_lt_eq X1 X2 p1).
neq->or_gt_lt : {A:rep_plus num} {B:rep_plus num} pf (!= num A B) -> pf (> A B or < A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (!= num A B)] or_e (geq A B) (not (geq A B)) (> A B or not (geq A B)) (_ord_excluded_middle A B) ([pA:pf (geq A B)] or_e (> A B) (== num A B) (> A B or not (geq A B)) (geq->or_gt_eq A B pA) ([pa:pf (> A B)] or_i1 (> A B) (not (geq A B)) pa) ([pb:pf (== num A B)] false_e (> A B or not (geq A B)) (not_e (eq num A B) p1 pb))) ([pB:pf (not (geq A B))] or_i2 (not (geq A B)) (> A B) pB).
or_geq_gt : {A:rep_plus num} {B:rep_plus num} pf (>= A B or > B A) = [A:rep_plus num] [B:rep_plus num] _ord_excluded_middle A B.
or_geq_lt : {A:rep_plus num} {B:rep_plus num} pf (>= A B or < A B) = [A:rep_plus num] [B:rep_plus num] or_geq_gt A B.
or_leq_gt : {A:rep_plus num} {B:rep_plus num} pf (<= A B or > A B) = [A:rep_plus num] [B:rep_plus num] or_geq_gt B A.
or_gt_geq : {A:rep_plus num} {B:rep_plus num} pf (> A B or >= B A) = [A:rep_plus num] [B:rep_plus num] or_symm (>= B A) (> A B) (or_geq_gt B A).
or_gt_leq : {A:rep_plus num} {B:rep_plus num} pf (> A B or <= A B) = [A:rep_plus num] [B:rep_plus num] or_gt_geq A B.
or_gt_eq_lt : {A:rep_plus num} {B:rep_plus num} pf (> A B or == num A B or < A B) = [A:rep_plus num] [B:rep_plus num] or_e (> A B) (>= B A) (> A B or == num A B or > B A) (or_gt_geq A B) ([pA:pf (> A B)] or3_i1 (> A B) (== num A B) (> B A) pA) ([pB:pf (>= B A)] or_e (> B A) (== num B A) (> A B or == num A B or > B A) (geq->or_gt_eq B A pB) ([pa:pf (> B A)] or3_i3 (> B A) (> A B) (== num A B) pa) ([pb:pf (== num B A)] or3_i2 (== num A B) (> A B) (> B A) (symm num B A pb))).
eq->geq : {A:rep_plus num} {B:rep_plus num} pf (== num A B) -> pf (>= A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (== num A B)] congr num A B ([i1:rep_plus num] >= i1 B) p1 (_ord_reflexivity B).
eq->leq : {A:rep_plus num} {B:rep_plus num} pf (== num A B) -> pf (<= A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (== num A B)] eq->geq B A (symm num A B p1).
eq->not_gt : {A:rep_plus num} {B:rep_plus num} pf (== num A B) -> pf (not (> A B)) = [A:rep_plus num] [B:rep_plus num] [p1:pf (== num A B)] not_not_i (<= A B) (eq->leq A B p1).
gt->geq : {A:rep_plus num} {B:rep_plus num} pf (> A B) -> pf (>= A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (> A B)] or_e (geq A B) (geq B A) (geq A B) (_ord_dichotomy A B) ([pA:pf (geq A B)] pA) ([pB:pf (geq B A)] gt->geq->false A B (geq A B) p1 pB).
lt->leq : {A:rep_plus num} {B:rep_plus num} pf (< A B) -> pf (<= A B) = [A:rep_plus num] [B:rep_plus num] [x3:pf (< A B)] gt->geq B A x3.
gt->neq : {A:rep_plus num} {B:rep_plus num} pf (> A B) -> pf (!= num A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (>= B A imp false)] imp_i (eq num A B) false ([p2:pf (eq num A B)] imp_e (>= B A) false p1 (eq->geq B A (symm num A B p2))).
lt->neq : {A:rep_plus num} {B:rep_plus num} pf (< A B) -> pf (!= num A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (< A B)] neqlem (== num A B) num B A ([x3:pf (== num A B)] symm num A B x3) (gt->neq B A p1).
neq->geq->gt : {A:rep_plus num} {B:rep_plus num} pf (!= num A B) -> pf (>= A B) -> pf (> A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (!= num A B)] [p2:pf (>= A B)] or_e (> A B) (== num A B) (> A B) (geq->or_gt_eq A B p2) ([pA:pf (> A B)] pA) ([pB:pf (== num A B)] eq->neq->false num A B (> A B) pB p1).
neq->leq->lt : {A:rep_plus num} {B:rep_plus num} pf (!= num A B) -> pf (<= A B) -> pf (< A B) = [A:rep_plus num] [B:rep_plus num] [p1:pf (!= num A B)] [p2:pf (<= A B)] neq->geq->gt B A (neqlem (== num B A) num A B ([x3:pf (== num B A)] symm num B A x3) p1) p2.
geq->leq->eq : {A:rep_plus num} {B:rep_plus num} pf (>= A B) -> pf (<= A B) -> pf (== num A B) = [A:rep_plus num] [B:rep_plus num] [x3:pf (>= A B)] [x4:pf (<= A B)] _ord_antisymmetry A B x3 x4.
gt->not_leq : {A:rep_plus num} {B:rep_plus num} pf (> A B) -> pf (not (<= A B)) = [A:rep_plus num] [B:rep_plus num] [x3:pf (> A B)] yes (> A B) x3.
not_geq->lt : {A:rep_plus num} {B:rep_plus num} pf (not (>= A B)) -> pf (< A B) = [A:rep_plus num] [B:rep_plus num] [x3:pf (not (>= A B))] yes (not (>= A B)) x3.
geq->not_lt : {A:rep_plus num} {B:rep_plus num} pf (>= A B) -> pf (not (< A B)) = [A:rep_plus num] [B:rep_plus num] [x3:pf (>= A B)] not_not_i (>= A B) x3.
trans_geq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A B) -> pf (>= B C) -> pf (>= A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (>= A B)] [x4:pf (>= B C)] _ord_transitivity A B C x3 x4.
trans_leq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (<= A B) -> pf (<= B C) -> pf (<= A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (<= A B)] [p2:pf (<= B C)] trans_geq C B A p2 p1.
trans_gt : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> A B) -> pf (> B C) -> pf (> A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= B A imp false)] [p2:pf (> B C)] imp_i (>= C A) false ([p3:pf (>= C A)] imp_e (>= B A) false p1 (trans_geq B C A (gt->geq B C p2) p3)).
trans_lt : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (< A B) -> pf (< B C) -> pf (< A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (< A B)] [p2:pf (< B C)] trans_gt C B A p2 p1.
trans_gt_geq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> A B) -> pf (>= B C) -> pf (> A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (> A B)] [p2:pf (>= B C)] or_e (> A C) (>= C A) (> A C) (or_gt_geq A C) ([pA:pf (> A C)] pA) ([pB:pf (>= C A)] gt->geq->false A B (> A C) p1 (trans_geq B C A p2 pB)).
trans_geq_gt : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A B) -> pf (> B C) -> pf (> A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= A B)] [p2:pf (> B C)] or_e (> A C) (>= C A) (> A C) (or_gt_geq A C) ([pA:pf (> A C)] pA) ([pB:pf (>= C A)] gt->geq->false B C (> A C) p2 (trans_geq C A B pB p1)).
trans_lt_leq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (< A B) -> pf (<= B C) -> pf (< A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (< A B)] [p2:pf (<= B C)] trans_geq_gt C B A p2 p1.
trans_leq_lt : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (<= A B) -> pf (< B C) -> pf (< A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (<= A B)] [p2:pf (< B C)] trans_gt_geq C B A p2 p1.
trans_eq_neq : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {C:rep_plus X1} pf (== X1 A B) -> pf (!= X1 B C) -> pf (!= X1 A C) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [C:rep_plus X1] [p1:pf (== X1 A B)] [p2:pf (!= X1 B C)] congr X1 A B ([i1:rep_plus X1] != X1 i1 C) p1 p2.
trans_neq_eq : {X1:tp} {A:rep_plus X1} {B:rep_plus X1} {C:rep_plus X1} pf (!= X1 A B) -> pf (== X1 B C) -> pf (!= X1 A C) = [X1:tp] [A:rep_plus X1] [B:rep_plus X1] [C:rep_plus X1] [p1:pf (!= X1 A B)] [p2:pf (== X1 B C)] congr X1 C B ([i1:rep_plus X1] != X1 A i1) (symm X1 B C p2) p1.
trans_eq_geq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num A B) -> pf (>= B C) -> pf (>= A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num A B)] [p2:pf (>= B C)] congr num A B ([i1:rep_plus num] >= i1 C) p1 p2.
trans_geq_eq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A B) -> pf (== num B C) -> pf (>= A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= A B)] [p2:pf (== num B C)] congr num C B ([i1:rep_plus num] >= A i1) (symm num B C p2) p1.
trans_eq_leq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num A B) -> pf (<= B C) -> pf (<= A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num A B)] [p2:pf (<= B C)] congr num A B ([i1:rep_plus num] <= i1 C) p1 p2.
trans_leq_eq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (<= A B) -> pf (== num B C) -> pf (<= A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (<= A B)] [p2:pf (== num B C)] congr num C B ([i1:rep_plus num] <= A i1) (symm num B C p2) p1.
trans_eq_gt : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num A B) -> pf (> B C) -> pf (> A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num A B)] [p2:pf (> B C)] congr num A B ([i1:rep_plus num] > i1 C) p1 p2.
trans_gt_eq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> A B) -> pf (== num B C) -> pf (> A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (> A B)] [p2:pf (== num B C)] congr num C B ([i1:rep_plus num] > A i1) (symm num B C p2) p1.
trans_eq_lt : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num A B) -> pf (< B C) -> pf (< A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num A B)] [p2:pf (< B C)] congr num A B ([i1:rep_plus num] < i1 C) p1 p2.
trans_lt_eq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (< A B) -> pf (== num B C) -> pf (< A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (< A B)] [p2:pf (== num B C)] congr num C B ([i1:rep_plus num] < A i1) (symm num B C p2) p1.
trans_eq_geq_eq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (== num A B) -> pf (>= B C) -> pf (== num C D) -> pf (>= A D) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (== num A B)] [p2:pf (>= B C)] [p3:pf (== num C D)] trans_eq_geq A B D p1 (trans_geq_eq B C D p2 p3).
trans_eq_gt_eq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (== num A B) -> pf (> B C) -> pf (== num C D) -> pf (> A D) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (== num A B)] [p2:pf (> B C)] [p3:pf (== num C D)] trans_eq_gt A B D p1 (trans_gt_eq B C D p2 p3).
neq_times_closure : {A:rep_plus num} {B:rep_plus num} pf (!= num A zero) -> pf (!= num B zero) -> pf (!= num (* A B) zero) = [A:rep_plus num] [B:rep_plus num] [p1:pf (!= num A zero)] [p2:pf (!= num B zero)] not_i (eq num (times A B) zero) ([p3:pf (eq num (times A B) zero)] or_e (eqn A zero) (eqn B zero) false (_cancelation A B p3) ([x3:pf (eqn A zero)] not_e (eq num A zero) p1 x3) ([x3:pf (eqn B zero)] not_e (eq num B zero) p2 x3)).
geq_times_closure : {A:rep_plus num} {B:rep_plus num} pf (>= A zero) -> pf (>= B zero) -> pf (>= (* A B) zero) = [A:rep_plus num] [B:rep_plus num] [x3:pf (>= A zero)] [x4:pf (>= B zero)] _ord_mult_closure A B x3 x4.
gt_times_closure : {A:rep_plus num} {B:rep_plus num} pf (> A zero) -> pf (> B zero) -> pf (> (* A B) zero) = [A:rep_plus num] [B:rep_plus num] [p1:pf (> A zero)] [p2:pf (> B zero)] not_i (<= (* A B) zero) ([p3:pf (<= (* A B) zero)] cut (> (* A B) zero or == num (* A B) zero) false (geq->or_gt_eq (* A B) zero (geq_times_closure A B (gt->geq A zero p1) (gt->geq B zero p2))) ([p4:pf (> (* A B) zero or == num (* A B) zero)] or_e (> (* A B) zero) (== num (* A B) zero) false p4 ([pA:pf (> (* A B) zero)] gt->geq->false (* A B) zero false pA p3) ([pB:pf (== num (* A B) zero)] or_e (eqn A zero) (eqn B zero) false (_cancelation A B pB) ([pB1:pf (== num A zero)] not_e (eq num A zero) (gt->neq A zero p1) pB1) ([pB2:pf (== num B zero)] not_e (eq num B zero) (gt->neq B zero p2) pB2)))).
geq_plus_cong1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A B) -> pf (>= (+ A C) (+ B C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (>= A B)] _ord_add_closure A C B x3.
geq_plus_cong2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A B) -> pf (>= (+ C A) (+ C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= A B)] trans_eq_geq (+ C A) (+ A C) (+ C B) (comm_plus C A) (trans_geq_eq (+ A C) (+ B C) (+ C B) (geq_plus_cong1 A B C p1) (comm_plus B C)).
geq_plus_cong : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (>= A B) -> pf (>= C D) -> pf (>= (+ A C) (+ B D)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (>= A B)] [p2:pf (>= C D)] trans_geq (+ A C) (+ B C) (+ B D) (geq_plus_cong1 A B C p1) (geq_plus_cong2 C D B p2).
geq_plus_elim1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= (+ A B) (+ A C)) -> pf (>= B C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= (+ A B) (+ A C))] cut (>= (+ (+ (neg A) A) B) (+ (+ (neg A) A) C)) (>= B C) (trans_eq_geq (+ (+ (neg A) A) B) (+ (neg A) (+ A B)) (+ (+ (neg A) A) C) (plus_assoc (neg A) A B) (trans_geq_eq (+ (neg A) (+ A B)) (+ (neg A) (+ A C)) (+ (+ (neg A) A) C) (geq_plus_cong2 (+ A B) (+ A C) (neg A) p1) (assoc_plus (neg A) A C))) ([p2:pf (>= (+ (+ (neg A) A) B) (+ (+ (neg A) A) C))] trans_eq_geq B (+ (+ (neg A) A) B) C (symm num (+ (+ (neg A) A) B) B (cancel_-a+a+b A B)) (trans_geq_eq (+ (+ (neg A) A) B) (+ (+ (neg A) A) C) C p2 (cancel_-a+a+b A C))).
geq_plus_elim2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= (+ A B) (+ C B)) -> pf (>= A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= (+ A B) (+ C B))] geq_plus_elim1 B A C (trans_eq_geq (+ B A) (+ A B) (+ B C) (comm_plus B A) (trans_geq_eq (+ A B) (+ C B) (+ B C) p1 (comm_plus C B))).
geq_neg_cong : {A:rep_plus num} {B:rep_plus num} pf (>= A B) -> pf (<= (neg A) (neg B)) = [A:rep_plus num] [B:rep_plus num] [p1:pf (>= A B)] cut (>= (neg B) (+ B (+ (neg A) (neg B)))) (>= (neg B) (neg A)) (trans_eq_geq (neg B) (+ A (+ (neg A) (neg B))) (+ B (+ (neg A) (neg B))) (symm num (+ A (+ (neg A) (neg B))) (neg B) (cancel_a-a+b' A (neg B))) (geq_plus_cong1 A B (+ (neg A) (neg B)) p1)) ([p2:pf (>= (neg B) (+ B (- (neg A) B)))] trans_geq_eq (neg B) (+ B (- (neg A) B)) (neg A) p2 (cancel_a+b-a' B (neg A))).
geq_neg_elim : {A:tnum} {B:tnum} pf (>= (neg A) (neg B)) -> pf (<= A B) = [A:tnum] [B:tnum] [p1:pf (>= (neg A) (neg B))] cut (<= A (neg (neg B))) (<= A B) (trans_eq_leq A (neg (neg A)) (neg (neg B)) (symm num (neg (neg A)) A (neg_neg_e A)) (geq_neg_cong (neg A) (neg B) p1)) ([p2:pf (<= A (neg (neg B)))] trans_leq_eq A (neg (neg B)) B p2 (neg_neg_e B)).
geq_times_cong1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A zero) -> pf (>= B C) -> pf (>= (* B A) (* C A)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= A zero)] [p2:pf (>= B C)] cut (>= (+ B (neg C)) zero) (>= (* B A) (* C A)) (trans_geq_eq (+ B (neg C)) (+ C (neg C)) zero (geq_plus_cong1 B C (neg C) p2) (plus_inv C)) ([p3:pf (>= (- B C) zero)] cut (>= (- (* B A) (* C A)) zero) (>= (* B A) (* C A)) (trans_eq_geq (- (* B A) (* C A)) (* (- B C) A) zero (symm num (* (- B C) A) (- (* B A) (* C A)) (distrib_minus_right B C A)) (_ord_mult_closure (- B C) A p3 p1)) ([p4:pf (>= (- (* B A) (* C A)) zero)] cut (>= (* B A) (* C A)) (>= (* B A) (* C A)) (trans_eq_geq (* B A) (+ (- (* B A) (* C A)) (* C A)) (* C A) (symm num (+ (- (* B A) (* C A)) (* C A)) (* B A) (cancel_a-b+b (* B A) (* C A))) (trans_geq_eq (+ (- (* B A) (* C A)) (* C A)) (+ zero (* C A)) (* C A) (geq_plus_cong1 (- (* B A) (* C A)) zero (* C A) p4) (zero_plus (* C A)))) ([p5:pf (>= (* B A) (* C A))] p5))).
geq_times_cong2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A zero) -> pf (>= B C) -> pf (>= (* A B) (* A C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= A zero)] [p2:pf (>= B C)] trans_eq_geq (* A B) (* B A) (* A C) (comm_times A B) (trans_geq_eq (* B A) (* C A) (* A C) (geq_times_cong1 A B C p1 p2) (comm_times C A)).
geq_times_elim1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> A zero) -> pf (>= (* A B) (* A C)) -> pf (>= B C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (> A zero)] [p2:pf (>= (* A B) (* A C))] cut (>= (* A (- B C)) zero) (>= B C) (trans_eq_geq (* A (- B C)) (- (* A B) (* A C)) zero (distrib_minus A B C) (trans_geq_eq (+ (* A B) (neg (* A C))) (+ (* A C) (neg (* A C))) zero (geq_plus_cong1 (* A B) (* A C) (neg (* A C)) p2) (plus_inv (* A C)))) ([p3:pf (>= (* A (- B C)) zero)] or_e (>= B C) (> C B) (>= B C) (or_geq_gt B C) ([pA:pf (>= B C)] pA) ([pB:pf (> C B)] cut (> (+ C (neg B)) zero) (>= B C) (trans_gt_eq (+ C (neg B)) (+ B (neg B)) zero (gtlem (>= (+ B (neg B)) (+ C (neg B))) B C ([x3:pf (>= (+ B (neg B)) (+ C (neg B)))] geq_plus_elim2 B (neg B) C x3) pB) (plus_inv B)) ([p4:pf (> (- C B) zero)] cut (> (- (* A C) (* A B)) zero) (>= B C) (trans_eq_gt (- (* A C) (* A B)) (* A (- C B)) zero (symm num (* A (- C B)) (- (* A C) (* A B)) (distrib_minus A C B)) (gt_times_closure A (- C B) p1 p4)) ([p5:pf (> (- (* A C) (* A B)) zero)] cut (> (* A C) (* A B)) (>= B C) (trans_eq_gt (* A C) (+ (- (* A C) (* A B)) (* A B)) (* A B) (symm num (+ (- (* A C) (* A B)) (* A B)) (* A C) (cancel_a-b+b (* A C) (* A B))) (trans_gt_eq (+ (- (* A C) (* A B)) (* A B)) (+ zero (* A B)) (* A B) (gtlem (>= (+ zero (* A B)) (+ (- (* A C) (* A B)) (* A B))) zero (- (* A C) (* A B)) ([x3:pf (>= (+ zero (* A B)) (+ (- (* A C) (* A B)) (* A B)))] geq_plus_elim2 zero (* A B) (- (* A C) (* A B)) x3) p5) (zero_plus (* A B)))) ([p6:pf (< (* A B) (* A C))] gt->geq->false (* A C) (* A B) (>= B C) p6 p2))))).
geq_times_elim2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> A zero) -> pf (>= (* B A) (* C A)) -> pf (>= B C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (> A zero)] [p2:pf (>= (* B A) (* C A))] geq_times_elim1 A B C p1 (trans_eq_geq (* A B) (* B A) (* A C) (comm_times A B) (trans_geq_eq (* B A) (* C A) (* A C) p2 (comm_times C A))).
leq_plus_cong1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (<= A B) -> pf (<= (+ A C) (+ B C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (<= A B)] geq_plus_cong1 B A C x3.
leq_plus_cong2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (<= A B) -> pf (<= (+ C A) (+ C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (<= A B)] geq_plus_cong2 B A C x3.
leq_plus_elim2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (<= (+ A B) (+ C B)) -> pf (<= A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (<= (+ A B) (+ C B))] geq_plus_elim2 C B A x3.
leq_times_cong2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A zero) -> pf (<= B C) -> pf (<= (* A B) (* A C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (>= A zero)] [x4:pf (<= B C)] geq_times_cong2 A C B x3 x4.
leq_neg_cong : {A:rep_plus num} {B:rep_plus num} pf (<= A B) -> pf (>= (neg A) (neg B)) = [A:rep_plus num] [B:rep_plus num] [x3:pf (<= A B)] geq_neg_cong B A x3.
gt_plus_cong1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> A B) -> pf (> (+ A C) (+ B C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (> A B)] gtlem (>= (+ B C) (+ A C)) B A ([x4:pf (>= (+ B C) (+ A C))] geq_plus_elim2 B C A x4) x3.
gt_plus_cong2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> A B) -> pf (> (+ C A) (+ C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (> A B)] gtlem (>= (+ C B) (+ C A)) B A ([x4:pf (>= (+ C B) (+ C A))] geq_plus_elim1 C B A x4) x3.
gt_plus_cong : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (>= A B) -> pf (> C D) -> pf (> (+ A C) (+ B D)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (>= A B)] [p2:pf (> C D)] trans_geq_gt (+ A C) (+ B C) (+ B D) (geq_plus_cong1 A B C p1) (gt_plus_cong2 C D B p2).
gt_plus_elim1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> (+ A B) (+ A C)) -> pf (> B C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (> (+ A B) (+ A C))] gtlem (>= C B) (+ A C) (+ A B) ([x4:pf (>= C B)] geq_plus_cong2 C B A x4) x3.
gt_plus_elim2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> (+ A B) (+ C B)) -> pf (> A C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (> (+ A B) (+ C B))] gtlem (>= C A) (+ C B) (+ A B) ([x4:pf (>= C A)] geq_plus_cong1 C A B x4) x3.
gt_times_cong2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> A zero) -> pf (> B C) -> pf (> (* A B) (* A C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (> A zero)] [x3:pf (< C B)] gtlem (>= (* A C) (* A B)) C B ([x4:pf (>= (* A C) (* A B))] geq_times_elim1 A C B p1 x4) x3.
gt_times_elim1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A zero) -> pf (> (* A B) (* A C)) -> pf (> B C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= A zero)] [x3:pf (< (* A C) (* A B))] gtlem (>= C B) (* A C) (* A B) ([x4:pf (>= C B)] geq_times_cong2 A C B p1 x4) x3.
gt_times_elim2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A zero) -> pf (> (* B A) (* C A)) -> pf (> B C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= A zero)] [x3:pf (< (* C A) (* B A))] gtlem (>= C B) (* C A) (* B A) ([x4:pf (>= C B)] geq_times_cong1 A C B p1 x4) x3.
gt_neg_cong : {A:rep_plus num} {B:rep_plus num} pf (> A B) -> pf (< (neg A) (neg B)) = [A:rep_plus num] [B:rep_plus num] [x3:pf (> A B)] gtlem (>= (neg A) (neg B)) B A ([x4:pf (>= (neg A) (neg B))] geq_neg_elim A B x4) x3.
lt_plus_cong1 : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} pf (> X1 X2) -> pf (> (+ X1 X3) (+ X2 X3)) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] [x3:pf (> X1 X2)] gt_plus_cong1 X1 X2 X3 x3.
lt_plus_cong2 : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} pf (> X1 X2) -> pf (> (+ X3 X1) (+ X3 X2)) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] [x3:pf (> X1 X2)] gt_plus_cong2 X1 X2 X3 x3.
lt_plus_elim1 : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} pf (> (+ X1 X2) (+ X1 X3)) -> pf (> X2 X3) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] [x3:pf (> (+ X1 X2) (+ X1 X3))] gt_plus_elim1 X1 X2 X3 x3.
lt_times_cong2 : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} pf (> X1 zero) -> pf (> X2 X3) -> pf (> (* X1 X2) (* X1 X3)) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] [x3:pf (> X1 zero)] [x4:pf (> X2 X3)] gt_times_cong2 X1 X2 X3 x3 x4.
lt_neg_cong : {X1:rep_plus num} {X2:rep_plus num} pf (> X1 X2) -> pf (< (neg X1) (neg X2)) = [X1:rep_plus num] [X2:rep_plus num] [x3:pf (> X1 X2)] gt_neg_cong X1 X2 x3.
neq_plus_cong1 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (!= num A B) -> pf (!= num (+ A C) (+ B C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (!= num A B)] neqlem (== num (+ A C) (+ B C)) num A B ([x4:pf (== num (+ A C) (+ B C))] plus_elim2 A C B x4) x3.
eval_gt : {B:word32} {A:word32} / B A 0 -> pf (gt (const A) (const B)) = [B:word32] [A:word32] [p1:/ B A 0] cut (geq (const B) (times (const A) (const 0)) and not (geq (const B) (times (const A) (plus one (const 0))))) (> (const A) (const B)) (_eval_div B A 0 p1) ([p3:pf (>= (const B) (* (const A) (const 0)) and < (const B) (* (const A) (+ one zero)))] trans_eq_gt (const A) (* (const A) (+ one zero)) (const B) (trans num (const A) (* (const A) one) (* (const A) (+ one zero)) (symm num (* (const A) one) (const A) (times_one (const A))) (times_cong2 one (+ one zero) (const A) (symm num (+ one zero) one (plus_zero one)))) (and_e2 (>= (const B) (* (const A) (const 0))) (< (const B) (* (const A) (+ one zero))) p3)).
1>0 : / 0 1 0 = 0/1.
one>zero : pf (> one zero) = eval_gt 0 1 1>0.
or_eq_neq : {A:rep_plus num} {B:rep_plus num} pf (== num A B or != num A B) = [A:rep_plus num] [B:rep_plus num] or_e (> B A) (>= A B) (== num A B or != num A B) (or_gt_geq B A) ([pA:pf (> B A)] or_i2 (!= num A B) (== num A B) (lt->neq A B pA)) ([pB:pf (>= A B)] or_e (== num A B) (> A B) (== num A B or != num A B) (geq->or_eq_gt A B pB) ([pa:pf (== num A B)] or_i1 (== num A B) (!= num A B) pa) ([pb:pf (> A B)] or_i2 (!= num A B) (== num A B) (gt->neq A B pb))).
nomatch : tnum = zero.
match : tnum = one.
listify : tnum -> tnum -> tnum -> type = [a:tnum] [pos:tnum] [neg1:tnum] pf (== num a (- pos neg1)).
plusify : rep_plus num -> rep_plus num -> rep_plus num -> type = [a:rep_plus num] [x3:rep_plus num] [y:rep_plus num] pf (== num a (- x3 y)).
timesify : tnum -> tnum -> tnum -> tnum -> type = [b:tnum] [x3:tnum] [y:tnum] [sign2:tnum] pf (== num (* b sign2) (* x3 y)).
catchtimes : tnum -> tnum -> tnum -> tnum -> tnum -> rep_plus num -> rep_plus num -> type = [a:tnum] [b:tnum] [x3:tnum] [y:tnum] [sign2:tnum] [pos:rep_plus num] [neg1:rep_plus num] pf (== num (* b sign2) (* x3 y) imp == num (+ a b) (- pos neg1)).
trim : tnum -> tnum -> tnum -> tnum -> type = [a:tnum] [b:tnum] [c1:tnum] [d:tnum] pf (== num (- a b) (- c1 d)).
findarr_mult : tnum -> tnum -> tnum -> tnum -> type = [a:tnum] [b:tnum] [c1:tnum] [m:tnum] pf (== num a (* b c1) and == num m m).
rearrange : tnum -> tnum -> tnum -> tnum -> type = [a:tnum] [b:tnum] [c1:tnum] [d:tnum] pf (== num (- a b) (- c1 d)).
algebra_solver : rep_plus rep_times -> type = [a:rep_plus rep_times] pf a.
listify_imp : {A:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} plusify (+ zero A) Pos Neg -> listify A Pos Neg = [A:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [p1:pf (== num (+ zero A) (- Pos Neg))] trans3 num A (+ A zero) (+ zero A) (- Pos Neg) (symm num (+ A zero) A (plus_zero A)) (comm_plus A zero) p1.
timesify_neg : {B:rep_plus num} {C:rep_plus num} {X:tnum} {Y:tnum} {Sign:tnum} timesify (* B C) X Y Sign -> timesify (* B (neg C)) X Y (neg Sign) = [B:rep_plus num] [C:rep_plus num] [X:tnum] [Y:tnum] [Sign:tnum] [p1:pf (== num (* (* B C) Sign) (* X Y))] trans4 num (* (* B (neg C)) (neg Sign)) (* B (* (neg C) (neg Sign))) (* B (* C Sign)) (* (* B C) Sign) (* X Y) (times_assoc B (neg C) (neg Sign)) (times_cong2 (* (neg C) (neg Sign)) (* C Sign) B (neg_times C Sign)) (symm num (* (* B C) Sign) (* B (* C Sign)) (times_assoc B C Sign)) p1.
timesify_swap : {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} {X:tnum} {Y:tnum} {Sign:tnum} timesify (* (* B C) D) X Y Sign -> timesify (* B (* C D)) X Y Sign = [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [X:tnum] [Y:tnum] [Sign:tnum] [p1:timesify (* (* B C) D) X Y Sign] trans num (* (* B (* C D)) Sign) (* (* (* B C) D) Sign) (* X Y) (times_cong1 (* B (* C D)) (* (* B C) D) Sign (symm num (* (* B C) D) (* B (* C D)) (times_assoc B C D))) p1.
timesify_zero : {B:rep_plus num} timesify (* B zero) one zero one = [B:rep_plus num] trans3 num (* (* B zero) one) (* B zero) zero (* one zero) (times_one (* B zero)) (times_zero B) (symm num (* one zero) zero (times_zero one)).
timesify_remove : {B:tnum} {X:tnum} {Y:tnum} {Sign:tnum} timesify B X Y Sign -> timesify (* B one) X Y Sign = [B:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [p1:pf (== num (* B Sign) (* X Y))] cut (== num (* (* B one) Sign) (* (* B Sign) one)) (== num (* (* B one) Sign) (* X Y)) (trans3 num (* (* B one) Sign) (* B (* one Sign)) (* B (* Sign one)) (* (* B Sign) one) (times_assoc B one Sign) (times_cong2 (* one Sign) (* Sign one) B (comm_times one Sign)) (assoc_times B Sign one)) ([p2:pf (== num (* (* B one) Sign) (* (* B Sign) one))] trans3 num (* (* B one) Sign) (* (* B Sign) one) (* B Sign) (* X Y) p2 (times_one (* B Sign)) p1).
timesify_end_plus : {B:rep_plus num} {P:rep_plus num} {Q:rep_plus num} timesify (* B (+ P Q)) B (+ P Q) one = [B:rep_plus num] [P:rep_plus num] [Q:rep_plus num] times_one (* B (+ P Q)).
timesify_step : {B:tnum} {X:tnum} {Y:tnum} {Sign:tnum} {C:rep_plus num} timesify B X Y Sign -> timesify (* B C) (* X C) Y Sign = [B:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [C:rep_plus num] [p1:pf (== num (* B Sign) (* X Y))] trans3 num (* (* B C) Sign) (* (* B Sign) C) (* (* X Y) C) (* (* X C) Y) (trans3 num (* (* B C) Sign) (* B (* C Sign)) (* B (* Sign C)) (* (* B Sign) C) (times_assoc B C Sign) (times_cong2 (* C Sign) (* Sign C) B (comm_times C Sign)) (assoc_times B Sign C)) (times_cong1 (* B Sign) (* X Y) C p1) (trans3 num (* (* X Y) C) (* X (* Y C)) (* X (* C Y)) (* (* X C) Y) (times_assoc X Y C) (times_cong2 (* Y C) (* C Y) X (comm_times Y C)) (assoc_times X C Y)).
timesify_end_one : timesify one one one one = refl num (* one one).
catch_neg2 : {A:tnum} {B:tnum} {X:tnum} {Y:tnum} {Sign:tnum} {Pos:rep_plus num} {Neg:rep_plus num} catchtimes A B (neg X) Y Sign Pos Neg -> catchtimes A B X Y (neg Sign) Pos Neg = [A:tnum] [B:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [Pos:rep_plus num] [Neg:rep_plus num] [p1:pf (== num (* B Sign) (* (neg X) Y) imp == num (+ A B) (- Pos Neg))] imp_i (== num (* B (neg Sign)) (* X Y)) (== num (+ A B) (- Pos Neg)) ([p2:pf (== num (* B (neg Sign)) (* X Y))] cut (== num (* B Sign) (* (neg X) Y)) (== num (+ A B) (- Pos Neg)) (trans3 num (* B Sign) (neg (neg (* B Sign))) (neg (* X Y)) (* (neg X) Y) (symm num (neg (neg (* B Sign))) (* B Sign) (neg_neg_e (* B Sign))) (neg_cong (neg (* B Sign)) (* X Y) (trans num (neg (* B Sign)) (* B (neg Sign)) (* X Y) (symm num (* B (neg Sign)) (neg (* B Sign)) (neg_times2 B Sign)) p2)) (symm num (* (neg X) Y) (neg (* X Y)) (neg_times1 X Y))) ([p3:pf (== num (* B Sign) (* (neg X) Y))] imp_e (== num (* B Sign) (* (neg X) Y)) (== num (+ A B) (- Pos Neg)) p1 p3)).
catch_zero : {A:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} {B:tnum} {X:tnum} plusify A Pos Neg -> catchtimes A B X zero one Pos Neg = [A:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [B:tnum] [X:tnum] [p1:pf (== num A (- Pos Neg))] imp_i (== num (* B one) (* X zero)) (== num (+ A B) (- Pos Neg)) ([p2:pf (== num (* B one) (* X zero))] cut (== num B zero) (== num (+ A B) (- Pos Neg)) (trans3 num B (* B one) (* X zero) zero (symm num (* B one) B (times_one B)) p2 (times_zero X)) ([p3:pf (== num B zero)] trans3 num (+ A B) (+ A zero) A (- Pos Neg) (plus_cong2 B zero A p3) (plus_zero A) p1)).
catch_neg_one : {A:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} {B:tnum} {X:tnum} plusify A Pos Neg -> catchtimes A B (neg X) one one Pos (+ Neg X) = [A:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [B:tnum] [X:tnum] [p1:pf (== num A (- Pos Neg))] imp_i (== num (* B one) (* (neg X) one)) (== num (+ A B) (+ Pos (neg (+ Neg X)))) ([p2:pf (== num (* B one) (* (neg X) one))] cut (== num B (neg X)) (== num (+ A B) (+ Pos (neg (+ Neg X)))) (trans3 num B (* B one) (* (neg X) one) (neg X) (symm num (* B one) B (times_one B)) p2 (times_one (neg X))) ([p3:pf (== num B (neg X))] cut (== num (+ A B) (+ Pos (+ (neg Neg) (neg X)))) (== num (+ A B) (+ Pos (neg (+ Neg X)))) (trans2 num (+ A B) (+ (- Pos Neg) (neg X)) (+ Pos (+ (neg Neg) (neg X))) (plus_cong A (- Pos Neg) B (neg X) p1 p3) (plus_assoc Pos (neg Neg) (neg X))) ([p4:pf (== num (+ A B) (+ Pos (- (neg Neg) X)))] trans2 num (+ A B) (+ Pos (- (neg Neg) X)) (+ Pos (neg (+ Neg X))) p4 (plus_cong2 (+ (neg Neg) (neg X)) (neg (+ Neg X)) Pos (neg_plus Neg X))))).
catch_one : {A:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} {B:tnum} {X:tnum} plusify A Pos Neg -> catchtimes A B X one one (+ Pos X) Neg = [A:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [B:tnum] [X:tnum] [p1:pf (== num A (- Pos Neg))] imp_i (== num (* B one) (* X one)) (== num (+ A B) (+ (+ Pos X) (neg Neg))) ([p2:pf (== num (* B one) (* X one))] cut (== num B X) (== num (+ A B) (+ (+ Pos X) (neg Neg))) (trans3 num B (* B one) (* X one) X (symm num (* B one) B (times_one B)) p2 (times_one X)) ([p3:pf (== num B X)] trans4 num (+ A B) (+ (- Pos Neg) X) (+ Pos (+ (neg Neg) X)) (+ Pos (+ X (neg Neg))) (+ (+ Pos X) (neg Neg)) (plus_cong A (- Pos Neg) B X p1 p3) (plus_assoc Pos (neg Neg) X) (plus_cong2 (+ (neg Neg) X) (+ X (neg Neg)) Pos (comm_plus (neg Neg) X)) (assoc_plus Pos X (neg Neg)))).
catch_break : {A:rep_plus num} {X:rep_plus num} {P:rep_plus num} {Q:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} {B:tnum} plusify (+ (+ A (* X P)) (* X Q)) Pos Neg -> catchtimes A B X (+ P Q) one Pos Neg = [A:rep_plus num] [X:rep_plus num] [P:rep_plus num] [Q:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [B:tnum] [p1:pf (== num (+ (+ A (* X P)) (* X Q)) (- Pos Neg))] imp_i (== num (* B one) (* X (+ P Q))) (== num (+ A B) (- Pos Neg)) ([p2:pf (== num (* B one) (* X (+ P Q)))] cut (== num B (+ (* X P) (* X Q))) (== num (+ A B) (- Pos Neg)) (trans3 num B (* B one) (* X (+ P Q)) (+ (* X P) (* X Q)) (symm num (* B one) B (times_one B)) p2 (distrib X P Q)) ([p3:pf (== num B (+ (* X P) (* X Q)))] trans3 num (+ A B) (+ A (+ (* X P) (* X Q))) (+ (+ A (* X P)) (* X Q)) (- Pos Neg) (plus_cong2 B (+ (* X P) (* X Q)) A p3) (assoc_plus A (* X P) (* X Q)) p1)).
plusify_minus : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} plusify (- (- A B) C) Pos Neg -> plusify (- A (+ B C)) Pos Neg = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [p1:plusify (- (- A B) C) Pos Neg] trans3 num (+ A (neg (+ B C))) (+ A (+ (neg B) (neg C))) (+ (+ A (neg B)) (neg C)) (- Pos Neg) (plus_cong2 (neg (+ B C)) (+ (neg B) (neg C)) A (symm num (+ (neg B) (neg C)) (neg (+ B C)) (neg_plus B C))) (assoc_plus A (neg B) (neg C)) p1.
plusify_swap : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} plusify (+ (+ A B) C) Pos Neg -> plusify (+ A (+ B C)) Pos Neg = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [p1:plusify (+ (+ A B) C) Pos Neg] trans num (+ A (+ B C)) (+ (+ A B) C) (- Pos Neg) (assoc_plus A B C) p1.
plusify_neg_one : {A:rep_plus num} {B:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} plusify (- A B) Pos Neg -> plusify (+ A (* (neg one) B)) Pos Neg = [A:rep_plus num] [B:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [p1:plusify (- A B) Pos Neg] trans num (+ A (* (neg one) B)) (+ A (neg B)) (- Pos Neg) (plus_cong2 (* (neg one) B) (neg B) A (trans num (* (neg one) B) (neg (* one B)) (neg B) (neg_times1 one B) (neg_cong (* one B) B (one_times B)))) p1.
plusify_neg_one' : {A:rep_plus num} {B:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} plusify (- A B) Pos Neg -> plusify (+ A (* B (neg one))) Pos Neg = [A:rep_plus num] [B:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [p1:plusify (- A B) Pos Neg] trans num (+ A (* B (neg one))) (+ A (* (neg one) B)) (- Pos Neg) (plus_cong2 (* B (neg one)) (* (neg one) B) A (comm_times B (neg one))) (plusify_neg_one A B Pos Neg p1).
plusify_neg : {A:rep_plus num} {B:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} plusify (+ A B) Pos Neg -> plusify (- A (neg B)) Pos Neg = [A:rep_plus num] [B:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [p1:plusify (+ A B) Pos Neg] trans num (+ A (neg (neg B))) (+ A B) (- Pos Neg) (plus_cong2 (neg (neg B)) B A (neg_neg_e B)) p1.
plusify_remove : {A:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} plusify A Pos Neg -> plusify (+ A zero) Pos Neg = [A:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [p1:plusify A Pos Neg] trans num (+ A zero) A (- Pos Neg) (plus_zero A) p1.
plusify_step_mult_neg : {A:tnum} {B:rep_plus num} {C:tnum} {X:tnum} {Y:tnum} {Sign:tnum} {Pos:rep_plus num} {Neg:rep_plus num} catchtimes A (* B (neg C)) X Y Sign Pos Neg -> timesify (* (* one B) (neg C)) X Y Sign -> plusify (- A (* B C)) Pos Neg = [A:tnum] [B:rep_plus num] [C:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [Pos:rep_plus num] [Neg:rep_plus num] [p1:pf (== num (* (* B (neg C)) Sign) (* X Y) imp == num (+ A (* B (neg C))) (- Pos Neg))] [p2:pf (== num (* (* (* one B) (neg C)) Sign) (* X Y))] cut (== num (* (* B (neg C)) Sign) (* X Y)) (== num (+ A (neg (* B C))) (- Pos Neg)) (trans5 num (* (* B (neg C)) Sign) (* B (* (neg C) Sign)) (* one (* B (* (neg C) Sign))) (* (* one B) (* (neg C) Sign)) (* (* (* one B) (neg C)) Sign) (* X Y) (times_assoc B (neg C) Sign) (symm num (* one (* B (* (neg C) Sign))) (* B (* (neg C) Sign)) (one_times (* B (* (neg C) Sign)))) (assoc_times one B (* (neg C) Sign)) (assoc_times (* one B) (neg C) Sign) p2) ([p3:pf (== num (* (* B (neg C)) Sign) (* X Y))] cut (== num (+ A (* B (neg C))) (- Pos Neg)) (== num (+ A (neg (* B C))) (- Pos Neg)) (imp_e (== num (* (* B (neg C)) Sign) (* X Y)) (== num (+ A (* B (neg C))) (- Pos Neg)) p1 p3) ([p4:pf (== num (+ A (* B (neg C))) (- Pos Neg))] trans num (+ A (neg (* B C))) (+ A (* B (neg C))) (- Pos Neg) (plus_cong2 (neg (* B C)) (* B (neg C)) A (symm num (* B (neg C)) (neg (* B C)) (neg_times2 B C))) p4)).
plusify_step_mult : {A:tnum} {B:rep_plus num} {C:rep_plus num} {X:tnum} {Y:tnum} {Sign:tnum} {Pos:rep_plus num} {Neg:rep_plus num} catchtimes A (* B C) X Y Sign Pos Neg -> timesify (* (* one B) C) X Y Sign -> plusify (+ A (* B C)) Pos Neg = [A:tnum] [B:rep_plus num] [C:rep_plus num] [X:tnum] [Y:tnum] [Sign:tnum] [Pos:rep_plus num] [Neg:rep_plus num] [p1:pf (== num (* (* B C) Sign) (* X Y) imp == num (+ A (* B C)) (- Pos Neg))] [p2:pf (== num (* (* (* one B) C) Sign) (* X Y))] cut (== num (* (* B C) Sign) (* X Y)) (== num (+ A (* B C)) (- Pos Neg)) (trans5 num (* (* B C) Sign) (* B (* C Sign)) (* one (* B (* C Sign))) (* (* one B) (* C Sign)) (* (* (* one B) C) Sign) (* X Y) (times_assoc B C Sign) (symm num (* one (* B (* C Sign))) (* B (* C Sign)) (one_times (* B (* C Sign)))) (assoc_times one B (* C Sign)) (assoc_times (* one B) C Sign) p2) ([p3:pf (== num (* (* B C) Sign) (* X Y))] imp_e (== num (* (* B C) Sign) (* X Y)) (== num (+ A (* B C)) (- Pos Neg)) p1 p3).
plusify_step_neg_one : {A:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} plusify A Pos Neg -> plusify (- A one) Pos (+ Neg one) = [A:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [p1:pf (== num A (- Pos Neg))] trans3 num (+ A (neg one)) (+ (- Pos Neg) (neg one)) (+ Pos (+ (neg Neg) (neg one))) (+ Pos (neg (+ Neg one))) (plus_cong1 A (- Pos Neg) (neg one) p1) (plus_assoc Pos (neg Neg) (neg one)) (plus_cong2 (+ (neg Neg) (neg one)) (neg (+ Neg one)) Pos (neg_plus Neg one)).
plusify_step_one : {A:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} plusify A Pos Neg -> plusify (+ A one) (+ Pos one) Neg = [A:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [p1:pf (== num A (- Pos Neg))] trans4 num (+ A one) (+ (- Pos Neg) one) (+ Pos (+ (neg Neg) one)) (+ Pos (+ one (neg Neg))) (+ (+ Pos one) (neg Neg)) (plus_cong1 A (- Pos Neg) one p1) (plus_assoc Pos (neg Neg) one) (plus_cong2 (+ (neg Neg) one) (+ one (neg Neg)) Pos (comm_plus (neg Neg) one)) (assoc_plus Pos one (neg Neg)).
plusify_step_neg : {A:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} {B:rep_plus num} plusify A Pos Neg -> plusify (- A B) Pos (+ Neg (* one B)) = [A:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [B:rep_plus num] [p1:pf (== num A (- Pos Neg))] trans3 num (+ A (neg B)) (+ (- Pos Neg) (neg (* one B))) (+ Pos (+ (neg Neg) (neg (* one B)))) (+ Pos (neg (+ Neg (* one B)))) (plus_cong A (- Pos Neg) (neg B) (neg (* one B)) p1 (neg_cong B (* one B) (symm num (* one B) B (one_times B)))) (plus_assoc Pos (neg Neg) (neg (* one B))) (plus_cong2 (+ (neg Neg) (neg (* one B))) (neg (+ Neg (* one B))) Pos (neg_plus Neg (* one B))).
plusify_step : {A:rep_plus num} {Pos:rep_plus num} {Neg:rep_plus num} {B:rep_plus num} plusify A Pos Neg -> plusify (+ A B) (+ Pos (* one B)) Neg = [A:rep_plus num] [Pos:rep_plus num] [Neg:rep_plus num] [B:rep_plus num] [p1:pf (== num A (- Pos Neg))] trans num (+ A B) (+ (- Pos Neg) (* one B)) (+ (+ Pos (* one B)) (neg Neg)) (plus_cong A (- Pos Neg) B (* one B) p1 (symm num (* one B) B (one_times B))) (trans3 num (+ (+ Pos (neg Neg)) (* one B)) (+ Pos (+ (neg Neg) (* one B))) (+ Pos (+ (* one B) (neg Neg))) (+ (+ Pos (* one B)) (neg Neg)) (plus_assoc Pos (neg Neg) (* one B)) (plus_cong2 (+ (neg Neg) (* one B)) (+ (* one B) (neg Neg)) Pos (comm_plus (neg Neg) (* one B))) (assoc_plus Pos (* one B) (neg Neg))).
plusify_zero : plusify zero zero zero = symm num (- zero zero) zero (plus_inv zero).
trim_get : {A:rep_plus num} {C:rep_plus num} {B:rep_plus num} trim (+ A C) (+ B C) A B = [A:rep_plus num] [C:rep_plus num] [B:rep_plus num] cut (== num (+ (+ A C) (neg (+ B C))) (+ A (+ C (+ (neg B) (neg C))))) (== num (- (+ A C) (+ B C)) (- A B)) (trans num (+ (+ A C) (neg (+ B C))) (+ A (+ C (neg (+ B C)))) (+ A (+ C (+ (neg B) (neg C)))) (plus_assoc A C (neg (+ B C))) (plus_cong2 (+ C (neg (+ B C))) (+ C (+ (neg B) (neg C))) A (plus_cong2 (neg (+ B C)) (+ (neg B) (neg C)) C (symm num (+ (neg B) (neg C)) (neg (+ B C)) (neg_plus B C))))) ([p2:pf (== num (- (+ A C) (+ B C)) (+ A (+ C (- (neg B) C))))] cut (== num (+ A (+ C (+ (neg B) (neg C)))) (+ A (neg B))) (== num (- (+ A C) (+ B C)) (- A B)) (trans num (+ A (+ C (+ (neg B) (neg C)))) (+ A (+ (+ C (neg B)) (neg C))) (+ A (neg B)) (plus_cong2 (+ C (+ (neg B) (neg C))) (+ (+ C (neg B)) (neg C)) A (assoc_plus C (neg B) (neg C))) (plus_cong2 (- (+ C (neg B)) C) (neg B) A (cancel_a+b-a C (neg B)))) ([p3:pf (== num (+ A (+ C (- (neg B) C))) (- A B))] trans num (- (+ A C) (+ B C)) (+ A (+ C (- (neg B) C))) (- A B) p2 p3)).
trim_getmult : {C:tnum} {D:tnum} {A:rep_plus num} {B:rep_plus num} findarr_mult C D one nomatch -> trim (+ A C) (+ B D) A B = [C:tnum] [D:tnum] [A:rep_plus num] [B:rep_plus num] [p2:pf (== num C (* D one) and == num zero zero)] cut (== num C D) (== num (+ (+ A C) (neg (+ B D))) (+ A (neg B))) (trans num C (* D one) D (and_e1 (== num C (* D one)) (== num zero zero) p2) (times_one D)) ([p3:pf (== num C D)] cut (== num (- (- C B) D) (neg B)) (== num (+ (+ A C) (neg (+ B D))) (+ A (neg B))) (congr num D C ([i1:rep_plus num] == num (- (- C B) i1) (neg B)) (symm num C D p3) (cancel_a+b-a C (neg B))) ([p4:pf (== num (- (- C B) D) (neg B))] cut (== num (+ C (neg (+ B D))) (neg B)) (== num (+ (+ A C) (neg (+ B D))) (+ A (neg B))) (trans3 num (+ C (neg (+ B D))) (+ C (+ (neg B) (neg D))) (+ (+ C (neg B)) (neg D)) (neg B) (plus_cong2 (neg (+ B D)) (+ (neg B) (neg D)) C (symm num (+ (neg B) (neg D)) (neg (+ B D)) (neg_plus B D))) (assoc_plus C (neg B) (neg D)) p4) ([p5:pf (== num (- C (+ B D)) (neg B))] trans num (+ (+ A C) (neg (+ B D))) (+ A (+ C (neg (+ B D)))) (+ A (neg B)) (plus_assoc A C (neg (+ B D))) (plus_cong2 (- C (+ B D)) (neg B) A p5)))).
trim_step1 : {A:tnum} {B:tnum} {X:tnum} {Y:tnum} {C:rep_plus num} trim A B X Y -> trim (+ A C) B (+ X C) Y = [A:tnum] [B:tnum] [X:tnum] [Y:tnum] [C:rep_plus num] [p1:pf (== num (- A B) (- X Y))] cut (== num (+ (+ A C) (neg B)) (+ (+ X C) (neg Y))) (== num (- (+ A C) B) (- (+ X C) Y)) (trans3 num (+ (+ A C) (neg B)) (+ (+ A (neg B)) C) (+ (- X Y) C) (+ (+ X C) (neg Y)) (trans3 num (+ (+ A C) (neg B)) (+ A (+ C (neg B))) (+ A (+ (neg B) C)) (+ (+ A (neg B)) C) (plus_assoc A C (neg B)) (plus_cong2 (+ C (neg B)) (+ (neg B) C) A (comm_plus C (neg B))) (assoc_plus A (neg B) C)) (plus_cong1 (- A B) (- X Y) C p1) (trans3 num (+ (+ X (neg Y)) C) (+ X (+ (neg Y) C)) (+ X (+ C (neg Y))) (+ (+ X C) (neg Y)) (plus_assoc X (neg Y) C) (plus_cong2 (+ (neg Y) C) (+ C (neg Y)) X (comm_plus (neg Y) C)) (assoc_plus X C (neg Y)))) ([p2:pf (== num (- (+ A C) B) (- (+ X C) Y))] p2).
trim_step2 : {A:tnum} {B:tnum} {X:tnum} {Y:tnum} {C:rep_plus num} trim A B X Y -> trim A (+ B C) X (+ Y C) = [A:tnum] [B:tnum] [X:tnum] [Y:tnum] [C:rep_plus num] [p1:pf (== num (- A B) (- X Y))] trans3 num (+ A (neg (+ B C))) (+ A (+ (neg B) (neg C))) (+ X (+ (neg Y) (neg C))) (+ X (neg (+ Y C))) (plus_cong2 (neg (+ B C)) (+ (neg B) (neg C)) A (symm num (+ (neg B) (neg C)) (neg (+ B C)) (neg_plus B C))) (trans3 num (+ A (+ (neg B) (neg C))) (+ (+ A (neg B)) (neg C)) (+ (- X Y) (neg C)) (+ X (+ (neg Y) (neg C))) (assoc_plus A (neg B) (neg C)) (plus_cong1 (- A B) (- X Y) (neg C) p1) (plus_assoc X (neg Y) (neg C))) (plus_cong2 (+ (neg Y) (neg C)) (neg (+ Y C)) X (neg_plus Y C)).
fam_step : {X:tnum} {Y:tnum} {Z:tnum} {B:rep_plus num} {M:tnum} findarr_mult X Y Z match -> findarr_mult (* X B) (* Y B) Z M = [X:tnum] [Y:tnum] [Z:tnum] [B:rep_plus num] [M:tnum] [p1:pf (== num X (* Y Z) and == num match match)] cut (== num (* X B) (* (* Y B) Z)) (== num (* X B) (* (* Y B) Z) and == num M M) (trans num (* X B) (* (* Y Z) B) (* (* Y B) Z) (times_cong1 X (* Y Z) B (and_e1 (== num X (* Y Z)) (== num match match) p1)) (trans3 num (* (* Y Z) B) (* Y (* Z B)) (* Y (* B Z)) (* (* Y B) Z) (times_assoc Y Z B) (times_cong2 (* Z B) (* B Z) Y (comm_times Z B)) (assoc_times Y B Z))) ([p2:pf (== num (* X B) (* (* Y B) Z))] and_i (== num (* X B) (* (* Y B) Z)) (== num M M) p2 (refl num M)).
fam_swap : {X:tnum} {Y:tnum} {Z:rep_plus num} {B:rep_plus num} {M:tnum} findarr_mult X Y (* Z B) M -> findarr_mult X (* Y B) Z M = [X:tnum] [Y:tnum] [Z:rep_plus num] [B:rep_plus num] [M:tnum] [p1:pf (== num X (* Y (* Z B)) and == num M M)] cut (== num X (* Y (* Z B)) and == num M M) (== num X (* (* Y B) Z) and == num M M) p1 ([x3:pf (== num X (* Y (* Z B)) and == num M M)] and_i (== num X (* (* Y B) Z)) (== num M M) (trans3 num X (* Y (* Z B)) (* Y (* B Z)) (* (* Y B) Z) (and_e1 (== num X (* Y (* Z B))) (== num M M) p1) (times_cong2 (* Z B) (* B Z) Y (comm_times Z B)) (symm num (* (* Y B) Z) (* Y (* B Z)) (times_assoc Y B Z))) (refl num M)).
fam_finish : {M:tnum} findarr_mult one one one M = [M:tnum] and_i (== num one (* one one)) (== num M M) (symm num (* one one) one (times_one one)) (refl num M).
fam_one : {X:tnum} {Y:tnum} findarr_mult X Y one nomatch -> findarr_mult X one Y match = [X:tnum] [Y:tnum] [p1:pf (== num X (* Y one) and == num nomatch nomatch)] and_i (== num X (* one Y)) (== num match match) (trans num X (* Y one) (* one Y) (and_e1 (== num X (* Y one)) (== num nomatch nomatch) p1) (comm_times Y one)) (refl num match).
rearr_finish : rearrange zero zero zero zero = refl num (- zero zero).
rearr_end : {X:tnum} {Y:tnum} {A:tnum} {B:tnum} rearrange X Y zero zero -> trim A B X Y -> rearrange A B zero zero = [X:tnum] [Y:tnum] [A:tnum] [B:tnum] [p1:pf (== num (- X Y) (- zero zero))] [p2:pf (== num (- A B) (- X Y))] trans num (- A B) (- X Y) (- zero zero) p2 p1.
rearr_pos : {X:tnum} {Y:tnum} {A:tnum} {C:tnum} rearrange X Y zero zero -> trim A C X Y -> rearrange A zero C zero = [X:tnum] [Y:tnum] [A:tnum] [C:tnum] [p1:pf (== num (- X Y) (- zero zero))] [p2:pf (== num (- A C) (- X Y))] cut (== num (- A C) zero) (== num (+ A (neg zero)) (+ C (neg zero))) (trans3 num (- A C) (- X Y) (- zero zero) zero p2 p1 (plus_inv zero)) ([p3:pf (== num (- A C) zero)] cut (== num A C) (== num (+ A (neg zero)) (+ C (neg zero))) (trans3 num A (+ (- A C) C) (+ zero C) C (symm num (+ (- A C) C) A (cancel_a-b+b A C)) (plus_cong1 (- A C) zero C p3) (zero_plus C)) ([p4:pf (== num A C)] plus_cong1 A C (neg zero) p4)).
rearr_neg : {X:tnum} {Y:tnum} {B:tnum} {D:tnum} rearrange X Y zero zero -> trim B D X Y -> rearrange zero B zero D = [X:tnum] [Y:tnum] [B:tnum] [D:tnum] [p1:pf (== num (- X Y) (- zero zero))] [p2:pf (== num (- B D) (- X Y))] cut (== num (- B D) zero) (== num (+ zero (neg B)) (+ zero (neg D))) (trans3 num (- B D) (- X Y) (- zero zero) zero p2 p1 (plus_inv zero)) ([p3:pf (== num (- B D) zero)] cut (== num B D) (== num (+ zero (neg B)) (+ zero (neg D))) (trans3 num B (+ (- B D) D) (+ zero D) D (symm num (+ (- B D) D) B (cancel_a-b+b B D)) (plus_cong1 (- B D) zero D p3) (zero_plus D)) ([p4:pf (== num B D)] plus_cong2 (neg B) (neg D) zero (neg_cong B D p4))).
plus_swap : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (== num (- A B) (- C D)) -> pf (== num (- A C) (- B D)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (== num (- A B) (- C D))] cut (== num A (+ B (- C D))) (== num (- A C) (- B D)) (trans3 num A (+ (- A B) B) (+ (- C D) B) (+ B (- C D)) (symm num (+ (- A B) B) A (cancel_a-b+b A B)) (plus_cong1 (- A B) (- C D) B p1) (comm_plus (- C D) B)) ([p2:pf (== num A (+ B (- C D)))] cut (== num (+ A (neg C)) (+ B (neg D))) (== num (- A C) (- B D)) (trans3 num (+ A (neg C)) (+ (+ B (- C D)) (neg C)) (+ B (+ (- C D) (neg C))) (+ B (neg D)) (plus_cong1 A (+ B (- C D)) (neg C) p2) (plus_assoc B (- C D) (neg C)) (plus_cong2 (- (+ C (neg D)) C) (neg D) B (cancel_a+b-a C (neg D)))) ([p3:pf (== num (- A C) (- B D))] p3)).
plus_swap2 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (== num (+ A B) (+ C D)) -> pf (== num (- A D) (- C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (== num (+ A B) (+ C D))] cut (== num A (+ (+ C (neg B)) D)) (== num (+ A (neg D)) (- C B)) (trans5 num A (- (+ A B) B) (+ (+ C D) (neg B)) (+ C (+ D (neg B))) (+ C (+ (neg B) D)) (+ (+ C (neg B)) D) (symm num (- (+ A B) B) A (cancel_a+b-b A B)) (plus_cong1 (+ A B) (+ C D) (neg B) p1) (plus_assoc C D (neg B)) (plus_cong2 (+ D (neg B)) (+ (neg B) D) C (comm_plus D (neg B))) (assoc_plus C (neg B) D)) ([p2:pf (== num A (+ (- C B) D))] trans num (+ A (neg D)) (+ (+ (- C B) D) (neg D)) (- C B) (plus_cong1 A (+ (- C B) D) (neg D) p2) (cancel_a+b-b (- C B) D)).
rearr_one : {Z:tnum} {W:tnum} {Y:tnum} {X:tnum} {B:tnum} {A:tnum} {C:tnum} rearrange Z W Y zero -> trim X B Z W -> trim A C X Y -> rearrange A B C zero = [Z:tnum] [W:tnum] [Y:tnum] [X:tnum] [B:tnum] [A:tnum] [C:tnum] [p1:pf (== num (- Z W) (- Y zero))] [p2:pf (== num (- X B) (- Z W))] [p3:pf (== num (- A C) (- X Y))] cut (== num (- X Y) (- B zero)) (== num (- A B) (- C zero)) (plus_swap X B Y zero (trans num (- X B) (- Z W) (- Y zero) p2 p1)) ([p4:pf (== num (- X Y) (- B zero))] plus_swap A C B zero (trans num (- A C) (- X Y) (- B zero) p3 p4)).
rearr_two : {Z:tnum} {W:tnum} {Y:tnum} {A:tnum} {X:tnum} {B:tnum} {D:tnum} rearrange Z W zero Y -> trim A X Z W -> trim B D X Y -> rearrange A B zero D = [Z:tnum] [W:tnum] [Y:tnum] [A:tnum] [X:tnum] [B:tnum] [D:tnum] [p1:pf (== num (- Z W) (- zero Y))] [p2:pf (== num (- A X) (- Z W))] [p3:pf (== num (- B D) (- X Y))] cut (== num (- A zero) (- X Y)) (== num (- A B) (- zero D)) (plus_swap A X zero Y (trans num (- A X) (- Z W) (- zero Y) p2 p1)) ([p4:pf (== num (- A zero) (- X Y))] plus_swap A zero B D (trans num (- A zero) (- X Y) (- B D) p4 (symm num (- B D) (- X Y) p3))).
rearr_three : {Z:tnum} {W:tnum} {Y:tnum} {X:tnum} {B:tnum} {A:tnum} {C:tnum} rearrange Z W Y zero -> trim X B Z W -> trim A C X Y -> rearrange C zero A B = [Z:tnum] [W:tnum] [Y:tnum] [X:tnum] [B:tnum] [A:tnum] [C:tnum] [p1:rearrange Z W Y zero] [p2:trim X B Z W] [p3:trim A C X Y] symm num (- A B) (- C zero) (rearr_one Z W Y X B A C p1 p2 p3).
rearr_four : {Z:tnum} {W:tnum} {Y:tnum} {A:tnum} {X:tnum} {B:tnum} {D:tnum} rearrange Z W zero Y -> trim A X Z W -> trim B D X Y -> rearrange zero D A B = [Z:tnum] [W:tnum] [Y:tnum] [A:tnum] [X:tnum] [B:tnum] [D:tnum] [p1:rearrange Z W zero Y] [p2:trim A X Z W] [p3:trim B D X Y] symm num (- A B) (- zero D) (rearr_two Z W Y A X B D p1 p2 p3).
rearr_any1 : {X:tnum} {C:tnum} {Y:tnum} {D:tnum} {A:tnum} {B:tnum} rearrange X C Y D -> trim A B X Y -> rearrange A B C D = [X:tnum] [C:tnum] [Y:tnum] [D:tnum] [A:tnum] [B:tnum] [p1:pf (== num (- X C) (- Y D))] [p2:pf (== num (- A B) (- X Y))] trans num (- A B) (- X Y) (- C D) p2 (plus_swap X C Y D p1).
rearr_any2 : {X:tnum} {B:tnum} {Y:tnum} {D:tnum} {A:tnum} {C:tnum} rearrange X B Y D -> trim A C X Y -> rearrange A B C D = [X:tnum] [B:tnum] [Y:tnum] [D:tnum] [A:tnum] [C:tnum] [p1:pf (== num (- X B) (- Y D))] [p2:pf (== num (- A C) (- X Y))] plus_swap A C B D (trans num (- A C) (- X Y) (- B D) p2 (plus_swap X B Y D p1)).
solver_rearrange : {Pos:tnum} {Neg:tnum} {Pos':tnum} {Neg':tnum} {B:tnum} {A:tnum} rearrange Pos Neg Pos' Neg' -> listify B Pos' Neg' -> listify A Pos Neg -> algebra_solver (== num A B) = [Pos:tnum] [Neg:tnum] [Pos':tnum] [Neg':tnum] [B:tnum] [A:tnum] [p1:rearrange Pos Neg Pos' Neg'] [p2:listify B Pos' Neg'] [p3:listify A Pos Neg] trans3 num A (- Pos Neg) (- Pos' Neg') B p3 p1 (symm num B (- Pos' Neg') p2).
eq_arrange : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (== num (- A B) (- C D)) -> pf (== num A B) -> pf (== num C D) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (== num (- A B) (- C D))] [p2:pf (== num A B)] cut (== num (- C D) zero) (== num C D) (trans3 num (- C D) (- A B) (+ B (neg B)) zero (symm num (- A B) (- C D) p1) (plus_cong1 A B (neg B) p2) (plus_inv B)) ([p3:pf (== num (- C D) zero)] trans3 num C (+ (- C D) D) (+ zero D) D (symm num (+ (- C D) D) C (cancel_a-b+b C D)) (plus_cong1 (- C D) zero D p3) (zero_plus D)).
solver_eq : {A:rep_plus num} {D:rep_plus num} {C:rep_plus num} {B:rep_plus num} algebra_solver (== num (+ A D) (+ C B)) -> algebra_solver (== num A B imp == num C D) = [A:rep_plus num] [D:rep_plus num] [C:rep_plus num] [B:rep_plus num] [p1:algebra_solver (== num (+ A D) (+ C B))] imp_i (== num A B) (== num C D) ([p2:pf (== num A B)] eq_arrange A B C D (plus_swap2 A D C B p1) p2).
solver_eq_neg : {D:rep_plus num} {B:rep_plus num} {C:rep_plus num} {A:rep_plus num} algebra_solver (== num (+ D B) (+ C A)) -> algebra_solver (== num A B imp == num C D) = [D:rep_plus num] [B:rep_plus num] [C:rep_plus num] [A:rep_plus num] [p1:algebra_solver (== num (+ D B) (+ C A))] imp_i (== num A B) (== num C D) ([p2:pf (== num A B)] eq_arrange (neg A) (neg B) C D (plus_swap2 (neg A) D C (neg B) (trans num (+ (neg A) D) (+ D (neg A)) (- C B) (comm_plus (neg A) D) (plus_swap2 D B C A p1))) (neg_cong A B p2)).
geq_arrange : {A:rep_plus num} {D:rep_plus num} {C:rep_plus num} {B:rep_plus num} pf (== num (+ A D) (+ C B)) -> pf (>= A B) -> pf (>= C D) = [A:rep_plus num] [D:rep_plus num] [C:rep_plus num] [B:rep_plus num] [p0:pf (== num (+ A D) (+ C B))] [p1:pf (>= A B)] cut (== num (- A B) (- C D)) (>= C D) (plus_swap2 A D C B p0) ([p2:pf (== num (- A B) (- C D))] cut (>= (+ A (neg B)) zero) (>= C D) (trans_geq_eq (+ A (neg B)) (+ B (neg B)) zero (geq_plus_cong1 A B (neg B) p1) (plus_inv B)) ([p3:pf (>= (- A B) zero)] cut (>= (- C D) zero) (>= C D) (trans_eq_geq (- C D) (- A B) zero (symm num (- A B) (- C D) p2) p3) ([p4:pf (>= (- C D) zero)] cut (>= C (+ zero D)) (>= C D) (trans_eq_geq C (+ (- C D) D) (+ zero D) (symm num (+ (- C D) D) C (cancel_a-b+b C D)) (geq_plus_cong1 (- C D) zero D p4)) ([p5:pf (>= C (+ zero D))] trans_geq_eq C (+ zero D) D p5 (zero_plus D))))).
solver_geq : {A:rep_plus num} {D:rep_plus num} {C:rep_plus num} {B:rep_plus num} algebra_solver (== num (+ A D) (+ C B)) -> algebra_solver (>= A B imp >= C D) = [A:rep_plus num] [D:rep_plus num] [C:rep_plus num] [B:rep_plus num] [p1:algebra_solver (== num (+ A D) (+ C B))] imp_i (>= A B) (>= C D) ([p2:pf (>= A B)] geq_arrange A D C B p1 p2).
solver_gt : {C:rep_plus num} {D:rep_plus num} {A:rep_plus num} {B:rep_plus num} algebra_solver (>= C D imp >= A B) -> algebra_solver (< A B imp < C D) = [C:rep_plus num] [D:rep_plus num] [A:rep_plus num] [B:rep_plus num] [p1:algebra_solver (>= C D imp >= A B)] imp_i (not (>= A B)) (not (>= C D)) ([p2:pf (not (>= A B))] not_ei (>= A B) (>= C D) p2 ([x3:pf (>= C D)] imp_e (>= C D) (>= A B) p1 x3)).
__P : {a:rep_plus num} {b:rep_plus num} algebra_solver (== num a b imp == num (- a b) zero) = [a:rep_plus num] [b:rep_plus num] solver_eq a zero (- a b) b (solver_rearrange (+ zero (* one a)) zero (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (- a b) b) (+ a zero) (rearr_three zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero))))).
eq_shift : {A:rep_plus num} {B:rep_plus num} pf (== num A B) -> pf (== num (- A B) zero) = [A:rep_plus num] [B:rep_plus num] [x3:pf (== num A B)] imp_e (== num A B) (== num (- A B) zero) (__P A B) x3.
__P : {a:rep_plus num} {b:rep_plus num} algebra_solver (== num (- a b) zero imp == num a b) = [a:rep_plus num] [b:rep_plus num] solver_eq (- a b) b a zero (solver_rearrange (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ zero (* one a)) zero (+ a zero) (+ (- a b) b) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))).
eq_unshift : {A:rep_plus num} {B:rep_plus num} pf (== num (- A B) zero) -> pf (== num A B) = [A:rep_plus num] [B:rep_plus num] [x3:pf (== num (- A B) zero)] imp_e (== num (- A B) zero) (== num A B) (__P A B) x3.
neq_shift : {A:rep_plus num} {B:rep_plus num} pf (!= num A B) -> pf (!= num (- A B) zero) = [A:rep_plus num] [B:rep_plus num] [x3:pf (!= num A B)] neqlem (== num (- A B) zero) num A B ([x4:pf (== num (- A B) zero)] eq_unshift A B x4) x3.
__P : {a:rep_plus num} {b:rep_plus num} algebra_solver (>= a b imp >= (- a b) zero) = [a:rep_plus num] [b:rep_plus num] solver_geq a zero (- a b) b (solver_rearrange (+ zero (* one a)) zero (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (- a b) b) (+ a zero) (rearr_three zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero))))).
geq_shift : {A:rep_plus num} {B:rep_plus num} pf (>= A B) -> pf (>= (- A B) zero) = [A:rep_plus num] [B:rep_plus num] [x3:pf (>= A B)] imp_e (>= A B) (>= (- A B) zero) (__P A B) x3.
__P : {a:rep_plus num} {b:rep_plus num} algebra_solver (>= (- a b) zero imp >= a b) = [a:rep_plus num] [b:rep_plus num] solver_geq (- a b) b a zero (solver_rearrange (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ zero (* one a)) zero (+ a zero) (+ (- a b) b) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))).
geq_unshift : {A:rep_plus num} {B:rep_plus num} pf (>= (- A B) zero) -> pf (>= A B) = [A:rep_plus num] [B:rep_plus num] [x3:pf (>= (- A B) zero)] imp_e (>= (- A B) zero) (>= A B) (__P A B) x3.
__P : {a:rep_plus num} {b:rep_plus num} algebra_solver (<= a b imp <= (- a b) zero) = [a:rep_plus num] [b:rep_plus num] solver_geq b (- a b) zero a (solver_rearrange (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (+ zero (* one a)) zero (+ zero a) (+ b (- a b)) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_get (+ zero (* one b)) (* one a) zero)) (listify_imp (+ zero a) (+ zero (* one a)) zero (plusify_swap zero zero a (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))) (listify_imp (+ b (- a b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap zero b (- a b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap (+ zero b) a (neg b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero b) a) (+ (+ zero (* one b)) (* one a)) zero b (plusify_step (+ zero b) (+ zero (* one b)) zero a (plusify_step zero zero zero b plusify_zero))))))).
leq_shift : {A:rep_plus num} {B:rep_plus num} pf (<= A B) -> pf (<= (- A B) zero) = [A:rep_plus num] [B:rep_plus num] [x3:pf (<= A B)] imp_e (<= A B) (<= (- A B) zero) (__P A B) x3.
__P : {a:rep_plus num} {b:rep_plus num} algebra_solver (<= (- a b) zero imp <= a b) = [a:rep_plus num] [b:rep_plus num] solver_geq zero a b (- a b) (solver_rearrange (+ zero (* one a)) zero (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (+ b (- a b)) (+ zero a) (rearr_three zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_get (+ zero (* one b)) (* one a) zero)) (listify_imp (+ b (- a b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap zero b (- a b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap (+ zero b) a (neg b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero b) a) (+ (+ zero (* one b)) (* one a)) zero b (plusify_step (+ zero b) (+ zero (* one b)) zero a (plusify_step zero zero zero b plusify_zero)))))) (listify_imp (+ zero a) (+ zero (* one a)) zero (plusify_swap zero zero a (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero))))).
leq_unshift : {A:rep_plus num} {B:rep_plus num} pf (<= (- A B) zero) -> pf (<= A B) = [A:rep_plus num] [B:rep_plus num] [x3:pf (<= (- A B) zero)] imp_e (<= (- A B) zero) (<= A B) (__P A B) x3.
gt_shift : {A:rep_plus num} {B:rep_plus num} pf (> A B) -> pf (> (- A B) zero) = [A:rep_plus num] [B:rep_plus num] [x3:pf (> A B)] gtlem (<= (- A B) zero) B A ([x4:pf (<= (- A B) zero)] leq_unshift A B x4) x3.
lt_shift : {A:rep_plus num} {B:rep_plus num} pf (< A B) -> pf (< (- A B) zero) = [A:rep_plus num] [B:rep_plus num] [x3:pf (< A B)] gtlem (>= (- A B) zero) A B ([x4:pf (>= (- A B) zero)] geq_unshift A B x4) x3.
_swap1 : {a:rep_plus num} {b:rep_plus num} {c1:rep_plus num} algebra_solver (== num (+ a b) c1 imp == num a (- c1 b)) = [a:rep_plus num] [b:rep_plus num] [c2:rep_plus num] solver_eq (+ a b) (- c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (+ a b) (- c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_get (+ (+ zero (* one a)) (* one b)) (* one c2) (+ zero (* one a)))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (+ a b) (- c2 b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap zero (+ a b) (- c2 b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap (+ zero (+ a b)) c2 (neg b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero (+ a b)) c2) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) zero b (plusify_step (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero c2 (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
_swap2 : {a:rep_plus num} {b:rep_plus num} {c1:rep_plus num} algebra_solver (== num (- a b) c1 imp == num a (+ c1 b)) = [a:rep_plus num] [b:rep_plus num] [c2:rep_plus num] solver_eq (- a b) (+ c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (- a b) (+ c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_step1 (+ (+ zero (* one a)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one a)) (+ zero (* one a)) (* one b) (trim_get (+ zero (* one a)) (* one c2) (+ zero (* one a))))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) (+ c2 b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) (+ c2 b) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap (+ zero (- a b)) c2 b (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_step (+ (+ zero (- a b)) c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) b (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
eq_swap_a+b_c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (+ A B) C) -> pf (== num A (- C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (== num (+ A B) C)] imp_e (== num (+ A B) C) (== num A (- C B)) (_swap1 A B C) x3.
eq_swap_a_b+c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num A (+ B C)) -> pf (== num (- A C) B) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num A (+ B C))] symm num B (- A C) (eq_swap_a+b_c B C A (symm num A (+ B C) p1)).
eq_swap_a-b_c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (- A B) C) -> pf (== num A (+ C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (== num (- A B) C)] imp_e (== num (- A B) C) (== num A (+ C B)) (_swap2 A B C) x3.
eq_swap_a_b-c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num A (- B C)) -> pf (== num (+ A C) B) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num A (- B C))] symm num B (+ A C) (eq_swap_a-b_c B C A (symm num A (- B C) p1)).
_swap3 : {a:rep_plus num} {b:rep_plus num} {c1:rep_plus num} algebra_solver (>= (+ a b) c1 imp >= a (- c1 b)) = [a:rep_plus num] [b:rep_plus num] [c2:rep_plus num] solver_geq (+ a b) (- c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (+ a b) (- c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_get (+ (+ zero (* one a)) (* one b)) (* one c2) (+ zero (* one a)))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (+ a b) (- c2 b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap zero (+ a b) (- c2 b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap (+ zero (+ a b)) c2 (neg b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero (+ a b)) c2) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) zero b (plusify_step (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero c2 (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
_swap4 : {a:rep_plus num} {b:rep_plus num} {c1:rep_plus num} algebra_solver (>= a (+ b c1) imp >= (- a c1) b) = [a:rep_plus num] [b:rep_plus num] [c2:rep_plus num] solver_geq a b (- a c2) (+ b c2) (solver_rearrange (+ (+ zero (* one a)) (* one b)) zero (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (+ (- a c2) (+ b c2)) (+ a b) (rearr_three (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one c2)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ (+ zero (* one a)) (* one b)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one c2) zero) (trim_step1 (+ (+ zero (* one a)) (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) (+ zero (* one a)) (* one c2) (trim_get (+ zero (* one a)) (* one b) (+ zero (* one a))))) (listify_imp (+ (- a c2) (+ b c2)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (plusify_swap zero (- a c2) (+ b c2) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (plusify_swap (+ zero (- a c2)) b c2 (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (plusify_step (+ (+ zero (- a c2)) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one c2)) c2 (plusify_step (+ zero (- a c2)) (+ zero (* one a)) (+ zero (* one c2)) b (plusify_swap zero a (neg c2) (+ zero (* one a)) (+ zero (* one c2)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))))))) (listify_imp (+ a b) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))).
_swap5 : {a:rep_plus num} {b:rep_plus num} {c1:rep_plus num} algebra_solver (>= (- a b) c1 imp >= a (+ c1 b)) = [a:rep_plus num] [b:rep_plus num] [c2:rep_plus num] solver_geq (- a b) (+ c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (- a b) (+ c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_step1 (+ (+ zero (* one a)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one a)) (+ zero (* one a)) (* one b) (trim_get (+ zero (* one a)) (* one c2) (+ zero (* one a))))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) (+ c2 b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) (+ c2 b) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap (+ zero (- a b)) c2 b (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_step (+ (+ zero (- a b)) c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) b (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
geq_swap_a+b_c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= (+ A B) C) -> pf (>= A (- C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (>= (+ A B) C)] imp_e (>= (+ A B) C) (>= A (- C B)) (_swap3 A B C) x3.
geq_swap_a_b+c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A (+ B C)) -> pf (>= (- A C) B) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (>= A (+ B C))] imp_e (>= A (+ B C)) (>= (- A C) B) (_swap4 A B C) x3.
geq_swap_a-b_c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= (- A B) C) -> pf (>= A (+ C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (>= (- A B) C)] imp_e (>= (- A B) C) (>= A (+ C B)) (_swap5 A B C) x3.
leq_swap_a_b+c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (<= A (+ B C)) -> pf (<= (- A C) B) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (<= A (+ B C))] geq_swap_a+b_c B C A x3.
gt_swap_a+b_c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> (+ A B) C) -> pf (> A (- C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (> (+ A B) C)] gtlem (>= (- C B) A) C (+ A B) ([x4:pf (>= (- C B) A)] geq_swap_a-b_c C B A x4) x3.
gt_swap_a_b-c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (> A (- B C)) -> pf (> (+ A C) B) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (> A (- B C))] gtlem (>= B (+ A C)) (- B C) A ([x4:pf (>= B (+ A C))] geq_swap_a_b+c B A C x4) x3.
lt_swap_a_b+c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (< A (+ B C)) -> pf (< (- A C) B) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (< A (+ B C))] gt_swap_a+b_c B C A x3.
lt_swap_a-b_c : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (< (- A B) C) -> pf (< A (+ C B)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (< (- A B) C)] gt_swap_a_b-c C A B x3.
sign0 : {A:rep_plus num} pf (>= A zero) -> pf (== num (sign A) zero) = [A:rep_plus num] [x3:pf (>= A zero)] _sign0 A x3.
sign1 : {A:rep_plus num} pf (< A zero) -> pf (== num (sign A) one) = [A:rep_plus num] [x3:pf (< A zero)] _sign1 A x3.
__P : {a:tnum} {b:tnum} algebra_solver (== num (if1 one a b) a) = [a:tnum] [b:tnum] solver_rearrange (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ zero (* one a)) zero a (if1 one a b) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp a (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)) (listify_imp (if1 one a b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (times one a) (times (minus one one) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step_mult (+ zero (times one a)) (minus one one) b (* one b) (+ one (neg one)) one (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (catch_break (+ zero (times one a)) (* one b) one (neg one) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (* (minus one one) b) (plusify_neg_one' (+ (+ zero (times one a)) (* (* one b) one)) (* one b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step_mult_neg (+ (+ zero (times one a)) (* (* one b) one)) one b (* one b) one (neg one) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (catch_neg2 (+ (+ zero (times one a)) (* (* one b) one)) (* one (neg b)) (* one b) one one (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (catch_neg_one (+ (+ zero (times one a)) (* (* one b) one)) (+ (+ zero (* one a)) (* one b)) zero (* one (neg b)) (* one b) (plusify_step_mult (+ zero (times one a)) (* one b) one (* one b) one one (+ (+ zero (* one a)) (* one b)) zero (catch_one (+ zero (times one a)) (+ zero (* one a)) zero (* (* one b) one) (* one b) (plusify_step_mult zero one a (* one a) one one (+ zero (* one a)) zero (catch_one zero zero zero (* one a) (* one a) plusify_zero) (timesify_step (* one one) one one one a (timesify_remove one one one one timesify_end_one)))) (timesify_remove (* one (* one b)) (* one b) one one (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one))))))) (timesify_neg (* one one) b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one)))))) (timesify_step (* one (minus one one)) one (+ one (neg one)) one b (timesify_end_plus one one (neg one)))))).
if1_1 : {A:rep_plus num} {B:tnum} {C:tnum} pf (== num A one) -> pf (== num (if1 A B C) B) = [A:rep_plus num] [B:tnum] [C:tnum] [p1:pf (== num A one)] congr num A one ([i1:rep_plus num] == num (if1 i1 B C) B) p1 (__P B C).
ifgtz1 : {A:rep_plus num} {B:tnum} {C:tnum} pf (> A zero) -> pf (== num (ifgtz A B C) B) = [A:rep_plus num] [B:tnum] [C:tnum] [p1:pf (> A zero)] if1_1 (sign (neg A)) B C (sign1 (neg A) (trans_lt_eq (neg A) (neg zero) zero (gt_neg_cong A zero p1) neg_zero)).
__P : {a:tnum} {b:tnum} algebra_solver (== num (if1 zero a b) b) = [a:tnum] [b:tnum] solver_rearrange (+ zero (* one b)) zero (+ zero (* one b)) zero b (if1 zero a b) (rearr_pos zero zero (+ zero (* one b)) (+ zero (* one b)) rearr_finish (trim_get zero (* one b) zero)) (listify_imp b (+ zero (* one b)) zero (plusify_step zero zero zero b plusify_zero)) (listify_imp (if1 zero a b) (+ zero (* one b)) zero (plusify_swap zero (times zero a) (times (minus one zero) b) (+ zero (* one b)) zero (plusify_step_mult (+ zero (times zero a)) (minus one zero) b (* one b) (+ one (neg zero)) one (+ zero (* one b)) zero (catch_break (+ zero (times zero a)) (* one b) one (neg zero) (+ zero (* one b)) zero (* (minus one zero) b) (plusify_step_mult (+ (+ zero (times zero a)) (* (* one b) one)) (* one b) (neg zero) one zero (neg one) (+ zero (* one b)) zero (catch_neg2 (+ (+ zero (times zero a)) (* (* one b) one)) (* (* one b) (neg zero)) one zero one (+ zero (* one b)) zero (catch_zero (+ (+ zero (times zero a)) (* (* one b) one)) (+ zero (* one b)) zero (* (* one b) (neg zero)) (neg one) (plusify_step_mult (+ zero (times zero a)) (* one b) one (* one b) one one (+ zero (* one b)) zero (catch_one (+ zero (times zero a)) zero zero (* (* one b) one) (* one b) (plusify_step_mult zero zero a (* one a) zero one zero zero (catch_zero zero zero zero (* zero a) (* one a) plusify_zero) (timesify_step (* one zero) one zero one a (timesify_zero one)))) (timesify_remove (* one (* one b)) (* one b) one one (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one))))))) (timesify_neg (* one (* one b)) zero one zero one (timesify_zero (* one (* one b)))))) (timesify_step (* one (minus one zero)) one (+ one (neg zero)) one b (timesify_end_plus one one (neg zero)))))).
if1_0 : {A:rep_plus num} {B:tnum} {C:tnum} pf (== num A zero) -> pf (== num (if1 A B C) C) = [A:rep_plus num] [B:tnum] [C:tnum] [p1:pf (== num A zero)] congr num A zero ([i1:rep_plus num] == num (if1 i1 B C) C) p1 (__P B C).
ifgtz2 : {A:rep_plus num} {B:tnum} {C:tnum} pf (<= A zero) -> pf (== num (ifgtz A B C) C) = [A:rep_plus num] [B:tnum] [C:tnum] [p1:pf (<= A zero)] if1_0 (sign (neg A)) B C (sign0 (neg A) (trans_geq_eq (neg A) (neg zero) zero (leq_neg_cong A zero p1) neg_zero)).
ifeq_e1 : {A:rep_plus num} {B:rep_plus num} {C:tnum} {D:tnum} pf (== num A B) -> pf (== num (ifeq A B C D) C) = [A:rep_plus num] [B:rep_plus num] [C:tnum] [D:tnum] [p1:pf (== num A B)] cut (== num (ifgtz (- B A) D C) C) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) C) (ifgtz2 (- B A) D C (eq->geq zero (- B A) (symm num (- B A) zero (eq_shift B A (symm num A B p1))))) ([p2:pf (== num (ifgtz (- B A) D C) C)] cut (== num (ifgtz (- A B) D C) C) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) C) (ifgtz2 (- A B) D C (eq->geq zero (- A B) (symm num (- A B) zero (eq_shift A B p1)))) ([p3:pf (== num (ifgtz (minus A B) D C) C)] congr num (ifgtz (- B A) D C) C ([i1:rep_plus num] == num (ifgtz (minus A B) D i1) C) p2 p3)).
ifeq_e2 : {A:rep_plus num} {B:rep_plus num} {C:tnum} {D:tnum} pf (!= num A B) -> pf (== num (ifeq A B C D) D) = [A:rep_plus num] [B:rep_plus num] [C:tnum] [D:tnum] [p1:pf (!= num A B)] or_e (> A B) (< A B) (== num (ifgtz (- A B) D (ifgtz (- B A) D C)) D) (neq->or_gt_lt A B p1) ([pA:pf (> A B)] ifgtz1 (- A B) D (ifgtz (- B A) D C) (gt_shift A B pA)) ([pB:pf (< A B)] cut (== num (ifgtz (- A B) D D) D) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) D) (ifgtz2 (- A B) D D (lt->leq (- A B) zero (lt_shift A B pB))) ([pB1:pf (== num (ifgtz (- A B) D D) D)] cut (== num (ifgtz (- B A) D C) D) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) D) (ifgtz1 (- B A) D C (gt_shift B A pB)) ([pB2:pf (== num (ifgtz (- B A) D C) D)] congr num (ifgtz (- B A) D C) D ([i1:rep_plus num] == num (ifgtz (minus A B) D i1) D) pB2 pB1))).
times_geq_geq : {A:rep_plus num} {B:rep_plus num} pf (>= A zero) -> pf (>= B zero) -> pf (>= (* A B) zero) = [A:rep_plus num] [B:rep_plus num] [x3:pf (>= A zero)] [x4:pf (>= B zero)] geq_times_closure A B x3 x4.
times_geq_leq : {A:rep_plus num} {B:rep_plus num} pf (>= A zero) -> pf (<= B zero) -> pf (<= (* A B) zero) = [A:rep_plus num] [B:rep_plus num] [p1:pf (>= A zero)] [p2:pf (<= B zero)] cut (>= (neg B) zero) (<= (* A B) zero) (trans_geq_eq (neg B) (neg zero) zero (leq_neg_cong B zero p2) neg_zero) ([p3:pf (>= (neg B) zero)] cut (>= (neg (* A B)) zero) (<= (* A B) zero) (trans_eq_geq (neg (* A B)) (* A (neg B)) zero (symm num (* A (neg B)) (neg (* A B)) (neg_times2 A B)) (times_geq_geq A (neg B) p1 p3)) ([p4:pf (>= (neg (* A B)) zero)] geq_neg_elim (* A B) zero (trans_geq_eq (neg (* A B)) zero (neg zero) p4 (symm num (neg zero) zero neg_zero)))).
times_leq_geq : {A:rep_plus num} {B:rep_plus num} pf (<= A zero) -> pf (>= B zero) -> pf (<= (* A B) zero) = [A:rep_plus num] [B:rep_plus num] [p1:pf (<= A zero)] [p2:pf (>= B zero)] trans_eq_leq (* A B) (* B A) zero (comm_times A B) (times_geq_leq B A p2 p1).
times_gt_gt : {A:rep_plus num} {B:rep_plus num} pf (> A zero) -> pf (> B zero) -> pf (> (* A B) zero) = [A:rep_plus num] [B:rep_plus num] [x3:pf (> A zero)] [x4:pf (> B zero)] gt_times_closure A B x3 x4.
plus_geq_geq : {A:rep_plus num} {B:rep_plus num} pf (>= A zero) -> pf (>= B zero) -> pf (>= (+ A B) zero) = [A:rep_plus num] [B:rep_plus num] [p1:pf (>= A zero)] [p2:pf (>= B zero)] trans_geq_eq (+ A B) (+ zero zero) zero (geq_plus_cong A zero B zero p1 p2) (plus_zero zero).
incr_gt : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A zero) -> pf (> B C) -> pf (> (+ B A) C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= A zero)] [p2:pf (> B C)] trans_eq_gt_eq (+ B A) (+ A B) (+ zero C) C (comm_plus B A) (gt_plus_cong A zero B C p1 p2) (zero_plus C).
incr_lt : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A zero) -> pf (< B C) -> pf (< B (+ C A)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [x3:pf (>= A zero)] [x4:pf (< B C)] incr_gt A C B x3 x4.
incr_geq : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A zero) -> pf (>= B C) -> pf (>= (+ B A) C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= A zero)] [p2:pf (>= B C)] trans_eq_geq_eq (+ B A) (+ A B) (+ zero C) C (comm_plus B A) (geq_plus_cong A zero B C p1 p2) (zero_plus C).
decr_lt : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (>= A zero) -> pf (< B C) -> pf (< (- B A) C) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (>= A zero)] [p2:pf (< B C)] lt_swap_a_b+c B C A (incr_lt A B C p1 p2).
succpred : {A:tnum} pf (== num (succ (pred A)) A) = [A:tnum] cancel_a-b+b A one.
predsucc : {A:tnum} pf (== num (pred (succ A)) A) = [A:tnum] cancel_a+b-b A one.
_succ_gt : {a:tnum} algebra_solver (> one zero imp > (succ a) a) = [a:tnum] solver_gt a (succ a) zero one (solver_geq a one zero (succ a) (solver_rearrange (+ (+ zero (* one a)) one) zero (+ (+ zero (* one a)) one) zero (+ zero (succ a)) (+ a one) (rearr_pos (+ zero (* one a)) (+ zero (* one a)) (+ (+ zero (* one a)) one) (+ (+ zero (* one a)) one) (rearr_end zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) one (+ zero (* one a)))) (listify_imp (+ zero (succ a)) (+ (+ zero (* one a)) one) zero (plusify_swap zero zero (succ a) (+ (+ zero (* one a)) one) zero (plusify_swap (+ zero zero) a one (+ (+ zero (* one a)) one) zero (plusify_step_one (+ (+ zero zero) a) (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))))) (listify_imp (+ a one) (+ (+ zero (* one a)) one) zero (plusify_swap zero a one (+ (+ zero (* one a)) one) zero (plusify_step_one (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))))).
succ_gt : {A:tnum} pf (> (succ A) A) = [A:tnum] imp_e (> one zero) (> (succ A) A) (_succ_gt A) (eval_gt 0 1 1>0).
succ_lt : {A:rep_plus num} pf (< A (succ A)) = [A:rep_plus num] succ_gt A.
_pred_lt : {a:tnum} algebra_solver (> one zero imp < (pred a) a) = [a:tnum] solver_gt (pred a) a zero one (solver_geq (pred a) one zero a (solver_rearrange (+ (+ zero (* one a)) one) (+ zero one) (+ zero (* one a)) zero (+ zero a) (+ (pred a) one) (rearr_one zero zero zero (+ zero one) (+ zero one) (+ (+ zero (* one a)) one) (+ zero (* one a)) rearr_finish (trim_get zero one zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero one (trim_get zero (* one a) zero))) (listify_imp (+ zero a) (+ zero (* one a)) zero (plusify_swap zero zero a (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))) (listify_imp (+ (pred a) one) (+ (+ zero (* one a)) one) (+ zero one) (plusify_swap zero (pred a) one (+ (+ zero (* one a)) one) (+ zero one) (plusify_step_one (+ zero (pred a)) (+ zero (* one a)) (+ zero one) (plusify_swap zero a (neg one) (+ zero (* one a)) (+ zero one) (plusify_step_neg_one (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))))))).
pred_lt : {A:tnum} pf (< (pred A) A) = [A:tnum] imp_e (> one zero) (< (pred A) A) (_pred_lt A) (eval_gt 0 1 1>0).
pred_gt : {A:rep_plus num} pf (> A (pred A)) = [A:rep_plus num] pred_lt A.
_succa_preda : {a:tnum} algebra_solver (== num (* (succ a) (pred a)) (- (* a a) one)) = [a:tnum] solver_rearrange (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (+ zero (* (* one a) a)) (+ zero one) (- (* a a) one) (* (succ a) (pred a)) (rearr_any1 (+ zero (* (* one a) a)) (+ zero (* (* one a) a)) (+ zero one) (+ zero one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (rearr_any1 zero (+ zero one) zero (+ zero one) (+ zero (* (* one a) a)) (+ zero (* (* one a) a)) (rearr_neg zero zero (+ zero one) (+ zero one) rearr_finish (trim_get zero one zero)) (trim_get zero (* (* one a) a) zero)) (trim_step2 (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (+ zero (* (* one a) a)) zero one (trim_get (+ zero (* (* one a) a)) (* one a) zero))) (listify_imp (- (* a a) one) (+ zero (* (* one a) a)) (+ zero one) (plusify_swap zero (* a a) (neg one) (+ zero (* (* one a) a)) (+ zero one) (plusify_step_neg_one (+ zero (* a a)) (+ zero (* (* one a) a)) zero (plusify_step_mult zero a a (* (* one a) a) one one (+ zero (* (* one a) a)) zero (catch_one zero zero zero (* a a) (* (* one a) a) plusify_zero) (timesify_step (* one a) (* one a) one one a (timesify_step one one one one a timesify_end_one)))))) (listify_imp (* (succ a) (pred a)) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (plusify_step_mult zero (succ a) (pred a) (* one (succ a)) (+ a (neg one)) one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_break zero (* one (succ a)) a (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (* (succ a) (pred a)) (plusify_neg_one' (+ zero (* (* one (succ a)) a)) (* one (succ a)) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (plusify_step_mult_neg (+ zero (* (* one (succ a)) a)) one (succ a) (* one one) (+ a one) (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_neg2 (+ zero (* (* one (succ a)) a)) (* one (neg (succ a))) (* one one) (+ a one) one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_break (+ zero (* (* one (succ a)) a)) (neg (* one one)) a one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (* one (neg (succ a))) (plusify_step_mult (+ (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a)) (neg (* one one)) one one one (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_neg2 (+ (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a)) (* (neg (* one one)) one) one one one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_neg_one (+ (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a)) (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (* (neg (* one one)) one) one (plusify_step_mult (+ zero (* (* one (succ a)) a)) (neg (* one one)) a (* one a) one (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (catch_neg2 (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a) (* one a) one one (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (catch_neg_one (+ zero (* (* one (succ a)) a)) (+ (+ zero (* (* one a) a)) (* one a)) zero (* (neg (* one one)) a) (* one a) (plusify_step_mult zero (* one (succ a)) a (* (* one one) a) (+ a one) one (+ (+ zero (* (* one a) a)) (* one a)) zero (catch_break zero (* (* one one) a) a one (+ (+ zero (* (* one a) a)) (* one a)) zero (* (* one (succ a)) a) (plusify_step_mult (+ zero (* (* (* one one) a) a)) (* (* one one) a) one (* one a) one one (+ (+ zero (* (* one a) a)) (* one a)) zero (catch_one (+ zero (* (* (* one one) a) a)) (+ zero (* (* one a) a)) zero (* (* (* one one) a) one) (* one a) (plusify_step_mult zero (* (* one one) a) a (* (* one a) a) one one (+ zero (* (* one a) a)) zero (catch_one zero zero zero (* (* (* one one) a) a) (* (* one a) a) plusify_zero) (timesify_step (* one (* (* one one) a)) (* one a) one one a (timesify_swap one (* one one) a (* one a) one one (timesify_step (* one (* one one)) one one one a (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_remove (* one (* (* one one) a)) (* one a) one one (timesify_swap one (* one one) a (* one a) one one (timesify_step (* one (* one one)) one one one a (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_step (* one (* one (succ a))) (* one one) (+ a one) one a (timesify_swap one one (succ a) (* one one) (+ a one) one (timesify_end_plus (* one one) a one)))))) (timesify_step (* one (neg (* one one))) one one (neg one) a (timesify_neg one (* one one) one one one (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_remove (* one (neg (* one one))) one one (neg one) (timesify_neg one (* one one) one one one (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_neg (* one one) (succ a) (* one one) (+ a one) one (timesify_end_plus (* one one) a one))))) (timesify_end_plus (* one (succ a)) a (neg one)))).
succa_preda : {A:tnum} pf (== num (* (succ A) (pred A)) (- (* A A) one)) = [A:tnum] _succa_preda A.
pf_add_inv_cancel : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (+ A B) C) -> pf (== num B (+ (neg A) C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [p1:pf (== num (+ A B) C)] trans num B (- C A) (+ (neg A) C) (eq_swap_a+b_c B A C (trans num (+ B A) (+ A B) C (comm_plus B A) p1)) (comm_plus C (neg A)).
__P : {a:rep_plus num} {b:rep_plus num} algebra_solver (> b zero imp > (+ a b) a) = [a:rep_plus num] [b:rep_plus num] solver_gt a (+ a b) zero b (solver_geq a b zero (+ a b) (solver_rearrange (+ (+ zero (* one a)) (* one b)) zero (+ (+ zero (* one a)) (* one b)) zero (+ zero (+ a b)) (+ a b) (rearr_pos (+ zero (* one a)) (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ (+ zero (* one a)) (* one b)) (rearr_end zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) (+ zero (* one a)))) (listify_imp (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero zero (+ a b) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap (+ zero zero) a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ (+ zero zero) a) (+ zero (* one a)) zero b (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))))) (listify_imp (+ a b) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))).
greater_plus_pos : {A:rep_plus num} {B:rep_plus num} pf (> A zero) -> pf (> (+ B A) B) = [A:rep_plus num] [B:rep_plus num] [x3:pf (> A zero)] imp_e (> A zero) (> (+ B A) B) (__P B A) x3.
__P : {a:rep_plus num} {b:rep_plus num} algebra_solver (>= b zero imp >= (+ a b) a) = [a:rep_plus num] [b:rep_plus num] solver_geq b a (+ a b) zero (solver_rearrange (+ (+ zero (* one b)) (* one a)) zero (+ (+ zero (* one a)) (* one b)) zero (+ (+ a b) zero) (+ b a) (rearr_pos (+ zero (* one a)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one a)) (+ (+ zero (* one a)) (* one b)) (rearr_end zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_step1 (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) zero (+ zero (* one a)) (* one a) (trim_get zero (* one b) (+ zero (* one a))))) (listify_imp (+ (+ a b) zero) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero (+ a b) zero (+ (+ zero (* one a)) (* one b)) zero (plusify_remove (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (+ b a) (+ (+ zero (* one b)) (* one a)) zero (plusify_swap zero b a (+ (+ zero (* one b)) (* one a)) zero (plusify_step (+ zero b) (+ zero (* one b)) zero a (plusify_step zero zero zero b plusify_zero))))).
greatereq_plus_pos : {A:rep_plus num} {B:rep_plus num} pf (>= A zero) -> pf (>= (+ B A) B) = [A:rep_plus num] [B:rep_plus num] [x3:pf (>= A zero)] imp_e (>= A zero) (>= (+ B A) B) (__P B A) x3.
__P : {a:rep_plus num} {b:rep_plus num} algebra_solver (== num (+ (* a b) b) (* (+ a one) b)) = [a:rep_plus num] [b:rep_plus num] solver_rearrange (+ (+ zero (* (* one a) b)) (* one b)) zero (+ (+ zero (* (* one b) a)) (* one b)) zero (* (+ a one) b) (+ (* a b) b) (rearr_pos (+ zero (* (* one a) b)) (+ zero (* (* one b) a)) (+ (+ zero (* (* one a) b)) (* one b)) (+ (+ zero (* (* one b) a)) (* one b)) (rearr_end zero zero (+ zero (* (* one a) b)) (+ zero (* (* one b) a)) rearr_finish (trim_getmult (* (* one a) b) (* (* one b) a) zero zero (fam_swap (* (* one a) b) (* one b) one a nomatch (fam_step (* one a) one (* one a) b nomatch (fam_one (* one a) (* one a) (fam_step one one one a nomatch (fam_finish match))))))) (trim_get (+ zero (* (* one a) b)) (* one b) (+ zero (* (* one b) a)))) (listify_imp (* (+ a one) b) (+ (+ zero (* (* one b) a)) (* one b)) zero (plusify_step_mult zero (+ a one) b (* one b) (+ a one) one (+ (+ zero (* (* one b) a)) (* one b)) zero (catch_break zero (* one b) a one (+ (+ zero (* (* one b) a)) (* one b)) zero (* (+ a one) b) (plusify_step_mult (+ zero (* (* one b) a)) (* one b) one (* one b) one one (+ (+ zero (* (* one b) a)) (* one b)) zero (catch_one (+ zero (* (* one b) a)) (+ zero (* (* one b) a)) zero (* (* one b) one) (* one b) (plusify_step_mult zero (* one b) a (* (* one b) a) one one (+ zero (* (* one b) a)) zero (catch_one zero zero zero (* (* one b) a) (* (* one b) a) plusify_zero) (timesify_step (* one (* one b)) (* one b) one one a (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one)))))) (timesify_remove (* one (* one b)) (* one b) one one (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one)))))) (timesify_step (* one (+ a one)) one (+ a one) one b (timesify_end_plus one a one)))) (listify_imp (+ (* a b) b) (+ (+ zero (* (* one a) b)) (* one b)) zero (plusify_swap zero (* a b) b (+ (+ zero (* (* one a) b)) (* one b)) zero (plusify_step (+ zero (* a b)) (+ zero (* (* one a) b)) zero b (plusify_step_mult zero a b (* (* one a) b) one one (+ zero (* (* one a) b)) zero (catch_one zero zero zero (* a b) (* (* one a) b) plusify_zero) (timesify_step (* one a) (* one a) one one b (timesify_step one one one one a timesify_end_one)))))).
factor_right : {A:rep_plus num} {B:rep_plus num} pf (== num (+ (* A B) B) (* (+ A one) B)) = [A:rep_plus num] [B:rep_plus num] __P A B.
__P : {a:rep_plus num} {b:rep_plus num} {c1:rep_plus num} algebra_solver (== num (- a (- b c1)) (+ (- a b) c1)) = [a:rep_plus num] [b:rep_plus num] [c2:rep_plus num] solver_rearrange (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (+ (- a b) c2) (- a (- b c2)) (rearr_any2 (+ zero (* one a)) (+ zero (* one b)) (+ zero (* one a)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (rearr_any2 zero (+ zero (* one b)) zero (+ zero (* one b)) (+ zero (* one a)) (+ zero (* one a)) (rearr_neg zero zero (+ zero (* one b)) (+ zero (* one b)) rearr_finish (trim_get zero (* one b) zero)) (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one c2) (+ zero (* one a)))) (listify_imp (+ (- a b) c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_swap zero (- a b) c2 (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (- a (- b c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_swap zero a (neg (- b c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_minus (+ zero a) b (neg c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_neg (- (+ zero a) b) c2 (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_step (- (+ zero a) b) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))).
minus_assoc : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (- A (- B C)) (+ (- A B) C)) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] __P A B C.
__P : {a:rep_plus num} {b:rep_plus num} {c1:rep_plus num} algebra_solver (== num (- (- a b) c1) (- a (+ b c1))) = [a:rep_plus num] [b:rep_plus num] [c2:rep_plus num] solver_rearrange (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (- a (+ b c2)) (- (- a b) c2) (rearr_any2 zero (+ (+ zero (* one b)) (* one c2)) zero (+ (+ zero (* one b)) (* one c2)) (+ zero (* one a)) (+ zero (* one a)) (rearr_neg (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one b)) (* one c2)) (+ (+ zero (* one b)) (* one c2)) (rearr_end zero zero (+ zero (* one b)) (+ zero (* one b)) rearr_finish (trim_get zero (* one b) zero)) (trim_get (+ zero (* one b)) (* one c2) (+ zero (* one b)))) (trim_get zero (* one a) zero)) (listify_imp (- a (+ b c2)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_swap zero a (neg (+ b c2)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_minus (+ zero a) b c2 (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_step_neg (- (+ zero a) b) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (- (- a b) c2) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_swap zero (- a b) (neg c2) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_step_neg (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))).
minus_assoc3 : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} pf (== num (- (- A B) C) (- A (+ B C))) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] __P A B C.
plus_eq : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} pf (== num X1 X2) -> pf (== num (+ X3 X1) (+ X3 X2)) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] [x3:pf (== num X1 X2)] plus_cong2 X1 X2 X3 x3.
eq_plus : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} pf (== num X1 X2) -> pf (== num (+ X1 X3) (+ X2 X3)) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] [x3:pf (== num X1 X2)] plus_cong1 X1 X2 X3 x3.
plus_eq1 : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} pf (== num (+ X1 X2) (+ X3 X2)) -> pf (== num X1 X3) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] [x3:pf (== num (+ X1 X2) (+ X3 X2))] plus_elim2 X1 X2 X3 x3.
plus_eq2 : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} pf (== num (+ X1 X2) (+ X1 X3)) -> pf (== num X2 X3) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] [x3:pf (== num (+ X1 X2) (+ X1 X3))] plus_elim1 X1 X2 X3 x3.
minus_assoc2 : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} pf (== num (+ X1 (+ X2 X3)) (+ (+ X1 X2) X3)) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] assoc_plus X1 X2 X3.
pf_assoc_add1 : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} {X4:rep_plus num} pf (== num (+ (+ X1 X2) X3) X4) -> pf (== num (+ X1 (+ X2 X3)) X4) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] [X4:rep_plus num] [x3:pf (== num (+ (+ X1 X2) X3) X4)] trans num (+ X1 (+ X2 X3)) (+ (+ X1 X2) X3) X4 (assoc_plus X1 X2 X3) x3.
inv_add1 : {X1:rep_plus num} pf (== num zero (+ (neg X1) X1)) = [X1:rep_plus num] symm num (+ (neg X1) X1) zero (inv_plus X1).
inv_add2 : {X1:rep_plus num} pf (== num zero (- X1 X1)) = [X1:rep_plus num] symm num (- X1 X1) zero (plus_inv X1).
neg_neg_a_eq_a : {X1:rep_plus num} pf (== num (neg (neg X1)) X1) = [X1:rep_plus num] neg_neg_e X1.
gt_plus_cong_e : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus num} pf (> (+ X1 X2) (+ X3 X2)) -> pf (> X1 X3) = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus num] [x3:pf (> (+ X1 X2) (+ X3 X2))] gt_plus_elim2 X1 X2 X3 x3.
neg_prop : {X1:rep_plus num} {X2:rep_plus num} pf (>= X1 X2) -> pf (<= (neg X1) (neg X2)) = [X1:rep_plus num] [X2:rep_plus num] [x3:pf (>= X1 X2)] geq_neg_cong X1 X2 x3.
neg_prop' : {X1:rep_plus num} {X2:rep_plus num} pf (> X1 X2) -> pf (< (neg X1) (neg X2)) = [X1:rep_plus num] [X2:rep_plus num] [x3:pf (> X1 X2)] gt_neg_cong X1 X2 x3.
pf_greater_and_greatereq : {X1:rep_plus num} {X2:rep_plus num} {X3:rep_plus rep_times} pf (>= X1 X2) -> pf (> X2 X1) -> pf X3 = [X1:rep_plus num] [X2:rep_plus num] [X3:rep_plus rep_times] [x3:pf (>= X1 X2)] [x4:pf (> X2 X1)] geq->gt->false X1 X2 X3 x3 x4.
minus_cong : {X1:rep_plus num} {X2:rep_plus num} {A:rep_plus num} {B:rep_plus num} pf (== num X1 X2) -> pf (== num A B) -> pf (== num (+ X1 (neg A)) (+ X2 (neg B))) = [X1:rep_plus num] [X2:rep_plus num] [A:rep_plus num] [B:rep_plus num] [p1:pf (== num X1 X2)] [p2:pf (== num A B)] plus_cong X1 X2 (neg A) (neg B) p1 (neg_cong A B p2).
pf_neg_zero_zero : pf (== num (neg zero) zero) = neg_zero.
minus_zero : {X1:rep_plus num} pf (== num (+ X1 (neg zero)) X1) = [X1:rep_plus num] trans num (+ X1 (neg zero)) (+ X1 zero) X1 (plus_cong2 (neg zero) zero X1 neg_zero) (plus_zero X1).
pf_neg_sum_sum_negs : {X1:rep_plus num} {X2:rep_plus num} pf (== num (neg (+ X1 X2)) (+ (neg X1) (neg X2))) = [X1:rep_plus num] [X2:rep_plus num] symm num (+ (neg X1) (neg X2)) (neg (+ X1 X2)) (neg_plus X1 X2).
times_succ_distrib : {X1:rep_plus num} {X2:rep_plus num} pf (== num (* X1 (+ X2 one)) (+ (* X1 X2) X1)) = [X1:rep_plus num] [X2:rep_plus num] trans num (* X1 (+ X2 one)) (+ (* X1 X2) (* X1 one)) (+ (* X1 X2) X1) (distrib X1 X2 one) (plus_cong2 (* X1 one) X1 (* X1 X2) (times_one X1)).
gt_cong : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (== num A B) -> pf (== num C D) -> pf (> A C) -> pf (> B D) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (== num A B)] [p2:pf (== num C D)] [p3:pf (> A C)] trans_eq_gt B A D (symm num A B p1) (trans_gt_eq A C D p3 p2).
lt_cong : {A:rep_plus num} {B:rep_plus num} {C:rep_plus num} {D:rep_plus num} pf (== num A B) -> pf (== num C D) -> pf (< A C) -> pf (< B D) = [A:rep_plus num] [B:rep_plus num] [C:rep_plus num] [D:rep_plus num] [p1:pf (== num A B)] [p2:pf (== num C D)] [p3:pf (< A C)] trans_eq_lt B A D (symm num A B p1) (trans_lt_eq A C D p3 p2).
neg_property1 : {X1:rep_plus num} pf (>= X1 zero) -> pf (<= (neg X1) zero) = [X1:rep_plus num] [p1:pf (>= X1 zero)] trans_leq_eq (neg X1) (neg zero) zero (geq_neg_cong X1 zero p1) neg_zero.
neg_property1b : {X1:rep_plus num} pf (> X1 zero) -> pf (< (neg X1) zero) = [X1:rep_plus num] [p1:pf (> X1 zero)] trans_lt_eq (neg X1) (neg zero) zero (gt_neg_cong X1 zero p1) neg_zero.
neg_property2b : {X1:rep_plus num} pf (> zero X1) -> pf (> (neg X1) zero) = [X1:rep_plus num] [p1:pf (> zero X1)] trans_gt_eq (neg X1) (neg zero) zero (lt_neg_cong zero X1 p1) neg_zero.
leq_times_geq_rule : {A:rep_plus num} {B:rep_plus num} pf (<= A zero) -> pf (>= B zero) -> pf (<= (* A B) zero) = [A:rep_plus num] [B:rep_plus num] [x3:pf (<= A zero)] [x4:pf (>= B zero)] times_leq_geq A B x3 x4.
pf_zero_plus_one_geq_one : {X1:rep_plus num} pf (>= (+ zero X1) X1) = [X1:rep_plus num] eq->geq (+ zero X1) X1 (zero_plus X1).
not_geq_zero : {X1:rep_plus num} {X2:rep_plus num} pf (>= X1 X2) -> pf (>= (- X1 X2) zero) = [X1:rep_plus num] [X2:rep_plus num] [x3:pf (>= X1 X2)] geq_shift X1 X2 x3.
gt_eq_lt : {X1:rep_plus num} {X2:rep_plus num} pf (> X1 X2 or == num X1 X2 or < X1 X2) = [X1:rep_plus num] [X2:rep_plus num] or_gt_eq_lt X1 X2.
