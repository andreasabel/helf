%% Twelf %word32 preamble generated automatically by word32header.sh
word32 : type.
+ : word32 -> word32 -> word32 -> type.
* : word32 -> word32 -> word32 -> type.
/ : word32 -> word32 -> word32 -> type.
prove+ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} type.
proof+ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} prove+ X Y Z P.
prove* : {X:word32} {Y:word32} {Z:word32} {P:* X Y Z} type.
proof* : {X:word32} {Y:word32} {Z:word32} {P:* X Y Z} prove* X Y Z P.
prove/ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} type.
proof/ : {X:word32} {Y:word32} {Z:word32} {P:+ X Y Z} prove/ X Y Z P.

%% Numbers and arithmetic
0 : word32.
00 : word32.
01 : word32.
1 : word32.
02 : word32.
2 : word32.
3 : word32.
04 : word32.
4 : word32.
05 : word32.
5 : word32.
06 : word32.
6 : word32.
07 : word32.
7 : word32.
8 : word32.
09 : word32.
9 : word32.
10 : word32.
11 : word32.
12 : word32.
13 : word32.
14 : word32.
15 : word32.
16 : word32.
17 : word32.
18 : word32.
19 : word32.
20 : word32.
21 : word32.
22 : word32.
23 : word32.
24 : word32.
25 : word32.
26 : word32.
27 : word32.
28 : word32.
29 : word32.
30 : word32.
31 : word32.
32 : word32.
33 : word32.
34 : word32.
35 : word32.
36 : word32.
37 : word32.
38 : word32.
39 : word32.
40 : word32.
41 : word32.
42 : word32.
43 : word32.
44 : word32.
45 : word32.
46 : word32.
47 : word32.
48 : word32.
49 : word32.
50 : word32.
51 : word32.
52 : word32.
53 : word32.
54 : word32.
55 : word32.
56 : word32.
57 : word32.
58 : word32.
59 : word32.
60 : word32.
61 : word32.
62 : word32.
63 : word32.
64 : word32.
65 : word32.
66 : word32.
67 : word32.
69 : word32.
70 : word32.
71 : word32.
73 : word32.
74 : word32.
75 : word32.
77 : word32.
78 : word32.
79 : word32.
81 : word32.
82 : word32.
83 : word32.
85 : word32.
86 : word32.
87 : word32.
93 : word32.
97 : word32.
105 : word32.
110 : word32.
112 : word32.
116 : word32.
120 : word32.
125 : word32.
128 : word32.
159 : word32.
160 : word32.
191 : word32.
196 : word32.
198 : word32.
199 : word32.
200 : word32.
201 : word32.
203 : word32.
204 : word32.
205 : word32.
206 : word32.
209 : word32.
210 : word32.
211 : word32.
252 : word32.
255 : word32.
256 : word32.
286 : word32.
334 : word32.
400 : word32.
401 : word32.
501 : word32.
512 : word32.
995 : word32.
1000 : word32.
1002 : word32.
1024 : word32.
1027 : word32.
1030 : word32.
1045 : word32.
1049 : word32.
1058 : word32.
2004 : word32.
2005 : word32.
2048 : word32.
3980 : word32.
4092 : word32.
4096 : word32.
4232 : word32.
8192 : word32.
16384 : word32.
29387 : word32.
32768 : word32.
65535 : word32.
65536 : word32.
65537 : word32.
81329 : word32.
129872 : word32.
131072 : word32.
262144 : word32.
293765 : word32.
524288 : word32.
938275 : word32.
1048576 : word32.
2097152 : word32.
4194304 : word32.
8388608 : word32.
16777216 : word32.
33554432 : word32.
67108864 : word32.
92387895 : word32.
134217728 : word32.
268435456 : word32.
536870912 : word32.
1073741824 : word32.
2147483647 : word32.
2147483648 : word32.
4294967295 : word32.
0+0 : + 0 0 0 .
0+1 : + 0 1 1 .
0+10 : + 0 10 10 .
0+116 : + 0 116 116 .
0+13 : + 0 13 13 .
0+2 : + 0 2 2 .
0+22 : + 0 22 22 .
0+30 : + 0 30 30 .
0+32 : + 0 32 32 .
0+5 : + 0 5 5 .
0+7 : + 0 7 7 .
0+8 : + 0 8 8 .
0+9 : + 0 9 9 .
0/1 : / 0 1 0 .
0/10 : / 0 10 0 .
0/1000 : / 0 1000 0 .
0/11 : / 0 11 0 .
0/116 : / 0 116 0 .
0/12 : / 0 12 0 .
0/128 : / 0 128 0 .
0/13 : / 0 13 0 .
0/14 : / 0 14 0 .
0/15 : / 0 15 0 .
0/16 : / 0 16 0 .
0/17 : / 0 17 0 .
0/18 : / 0 18 0 .
0/19 : / 0 19 0 .
0/2 : / 0 2 0 .
0/20 : / 0 20 0 .
0/200 : / 0 200 0 .
0/21 : / 0 21 0 .
0/22 : / 0 22 0 .
0/23 : / 0 23 0 .
0/24 : / 0 24 0 .
0/25 : / 0 25 0 .
0/26 : / 0 26 0 .
0/27 : / 0 27 0 .
0/28 : / 0 28 0 .
0/29 : / 0 29 0 .
0/3 : / 0 3 0 .
0/30 : / 0 30 0 .
0/31 : / 0 31 0 .
0/32 : / 0 32 0 .
0/33 : / 0 33 0 .
0/34 : / 0 34 0 .
0/37 : / 0 37 0 .
0/38 : / 0 38 0 .
0/4 : / 0 4 0 .
0/41 : / 0 41 0 .
0/5 : / 0 5 0 .
0/6 : / 0 6 0 .
0/7 : / 0 7 0 .
0/8 : / 0 8 0 .
0/8192 : / 0 8192 0 .
0/9 : / 0 9 0 .
0/995 : / 0 995 0 .
1+1 : + 1 1 2 .
1+12 : + 1 12 13 .
1+3 : + 1 3 4 .
1/13 : / 1 13 0 .
1/2 : / 1 2 0 .
1/3 : / 1 3 0 .
1/32 : / 1 32 0 .
1/4 : / 1 4 0 .
10+1 : + 10 1 11 .
10+2 : + 10 2 12 .
10/32 : / 10 32 0 .
1024*4 : * 1024 4 4096 .
1024+1024 : + 1024 1024 2048 .
1027+3 : + 1027 3 1030 .
1030+15 : + 1030 15 1045 .
1045+13 : + 1045 13 1058 .
1048576+1048576 : + 1048576 1048576 2097152 .
1073741824+1073741824 : + 1073741824 1073741824 2147483648 .
11+1 : + 11 1 12 .
11/32 : / 11 32 0 .
116+3980 : + 116 3980 4096 .
12+1 : + 12 1 13 .
12/32 : / 12 32 0 .
125+3 : + 125 3 128 .
128+128 : + 128 128 256 .
128+31 : + 128 31 159 .
128/159 : / 128 159 0 .
13+0 : + 13 0 13 .
13+1 : + 13 1 14 .
13+1045 : + 13 1045 1058 .
13+14 : + 13 14 27 .
13+15 : + 13 15 28 .
13+2 : + 13 2 15 .
13/14 : / 13 14 0 .
13/200 : / 13 200 0 .
13/30 : / 13 30 0 .
13/31 : / 13 31 0 .
13/32 : / 13 32 0 .
13/33 : / 13 33 0 .
13/37 : / 13 37 0 .
13/38 : / 13 38 0 .
13/41 : / 13 41 0 .
131072+131072 : + 131072 131072 262144 .
134217728+134217728 : + 134217728 134217728 268435456 .
14+1 : + 14 1 15 .
14+15 : + 14 15 29 .
14+5 : + 14 5 19 .
14/1000 : / 14 1000 0 .
14/128 : / 14 128 0 .
14/15 : / 14 15 0 .
14/200 : / 14 200 0 .
14/30 : / 14 30 0 .
14/31 : / 14 31 0 .
14/32 : / 14 32 0 .
14/33 : / 14 33 0 .
14/34 : / 14 34 0 .
14/37 : / 14 37 0 .
14/38 : / 14 38 0 .
14/41 : / 14 41 0 .
15+1 : + 15 1 16 .
15+1030 : + 15 1030 1045 .
15+14 : + 15 14 29 .
15/16 : / 15 16 0 .
15/19 : / 15 19 0 .
15/29 : / 15 29 0 .
15/32 : / 15 32 0 .
159+1 : + 159 1 160 .
159/200 : / 159 200 0 .
16+1 : + 16 1 17 .
16+16 : + 16 16 32 .
16+8 : + 16 8 24 .
16/32 : / 16 32 0 .
16/4294967295 : / 16 4294967295 0 .
160/1000 : / 160 1000 0 .
16384*65536 : * 16384 65536 1073741824 .
16384+16384 : + 16384 16384 32768 .
16777216+16777216 : + 16777216 16777216 33554432 .
17+1 : + 17 1 18 .
17/32 : / 17 32 0 .
18+1 : + 18 1 19 .
18/32 : / 18 32 0 .
19+1 : + 19 1 20 .
19+15 : + 19 15 34 .
19+6 : + 19 6 25 .
19/32 : / 19 32 0 .
2*1 : * 2 1 2 .
2*1024 : * 2 1024 2048 .
2*1048576 : * 2 1048576 2097152 .
2*128 : * 2 128 256 .
2*131072 : * 2 131072 262144 .
2*134217728 : * 2 134217728 268435456 .
2*16 : * 2 16 32 .
2*16384 : * 2 16384 32768 .
2*16777216 : * 2 16777216 33554432 .
2*2 : * 2 2 4 .
2*2048 : * 2 2048 4096 .
2*2097152 : * 2 2097152 4194304 .
2*256 : * 2 256 512 .
2*262144 : * 2 262144 524288 .
2*268435456 : * 2 268435456 536870912 .
2*32 : * 2 32 64 .
2*32768 : * 2 32768 65536 .
2*33554432 : * 2 33554432 67108864 .
2*4 : * 2 4 8 .
2*4096 : * 2 4096 8192 .
2*4194304 : * 2 4194304 8388608 .
2*512 : * 2 512 1024 .
2*524288 : * 2 524288 1048576 .
2*536870912 : * 2 536870912 1073741824 .
2*64 : * 2 64 128 .
2*65536 : * 2 65536 131072 .
2*67108864 : * 2 67108864 134217728 .
2*8 : * 2 8 16 .
2*8192 : * 2 8192 16384 .
2*8388608 : * 2 8388608 16777216 .
2+1 : + 2 1 3 .
2+13 : + 2 13 15 .
2+34 : + 2 34 36 .
2/3 : / 2 3 0 .
2/32 : / 2 32 0 .
2/4 : / 2 4 0 .
20+1 : + 20 1 21 .
20/32 : / 20 32 0 .
2004/04 : / 2004 04 501 .
2004/05 : / 2004 05 400 .
2004/06 : / 2004 06 334 .
2004/07 : / 2004 07 286 .
2004/10 : / 2004 10 200 .
2005/02 : / 2005 02 1002 .
2005/05 : / 2005 05 401 .
2048+2048 : + 2048 2048 4096 .
2097152+2097152 : + 2097152 2097152 4194304 .
21+1 : + 21 1 22 .
21/32 : / 21 32 0 .
2147483647+1 : + 2147483647 1 2147483648 .
2147483647+2147483648 : + 2147483647 2147483648 4294967295 .
2147483647/4294967295 : / 2147483647 4294967295 0 .
2147483648/4294967295 : / 2147483648 4294967295 0 .
22+1 : + 22 1 23 .
22+3 : + 22 3 25 .
22/32 : / 22 32 0 .
23+1 : + 23 1 24 .
23/32 : / 23 32 0 .
24+1 : + 24 1 25 .
24+8 : + 24 8 32 .
24/32 : / 24 32 0 .
25+1 : + 25 1 26 .
25+4 : + 25 4 29 .
25+5 : + 25 5 30 .
25/32 : / 25 32 0 .
256*256 : * 256 256 65536 .
256+256 : + 256 256 512 .
26+1 : + 26 1 27 .
26/32 : / 26 32 0 .
262144+262144 : + 262144 262144 524288 .
268435456+268435456 : + 268435456 268435456 536870912 .
27+1 : + 27 1 28 .
27+2 : + 27 2 29 .
27/32 : / 27 32 0 .
28+0 : + 28 0 28 .
28+1 : + 28 1 29 .
28+2 : + 28 2 30 .
28+3 : + 28 3 31 .
28+6 : + 28 6 34 .
28/32 : / 28 32 0 .
29*4 : * 29 4 116 .
29+1 : + 29 1 30 .
29/200 : / 29 200 0 .
29/30 : / 29 30 0 .
29/31 : / 29 31 0 .
29/32 : / 29 32 0 .
29/33 : / 29 33 0 .
29/37 : / 29 37 0 .
29/38 : / 29 38 0 .
29/41 : / 29 41 0 .
3+1 : + 3 1 4 .
3+1027 : + 3 1027 1030 .
3/32 : / 3 32 0 .
30+1 : + 30 1 31 .
30+2 : + 30 2 32 .
30+6 : + 30 6 36 .
30/1000 : / 30 1000 0 .
30/128 : / 30 128 0 .
30/200 : / 30 200 0 .
30/31 : / 30 31 0 .
30/32 : / 30 32 0 .
30/33 : / 30 33 0 .
30/34 : / 30 34 0 .
30/37 : / 30 37 0 .
30/38 : / 30 38 0 .
30/41 : / 30 41 0 .
31+1 : + 31 1 32 .
31+128 : + 31 128 159 .
31+97 : + 31 97 128 .
31/128 : / 31 128 0 .
31/200 : / 31 200 0 .
31/32 : / 31 32 0 .
31/33 : / 31 33 0 .
31/34 : / 31 34 0 .
31/37 : / 31 37 0 .
31/38 : / 31 38 0 .
31/41 : / 31 41 0 .
32+0 : + 32 0 32 .
32+1 : + 32 1 33 .
32+3 : + 32 3 35 .
32+5 : + 32 5 37 .
32+6 : + 32 6 38 .
32+9 : + 32 9 41 .
32+995 : + 32 995 1027 .
32/1000 : / 32 1000 0 .
32/128 : / 32 128 0 .
32/200 : / 32 200 0 .
32/33 : / 32 33 0 .
32/34 : / 32 34 0 .
32/37 : / 32 37 0 .
32/38 : / 32 38 0 .
32/41 : / 32 41 0 .
32768+32768 : + 32768 32768 65536 .
33+1 : + 33 1 34 .
33/1000 : / 33 1000 0 .
33/128 : / 33 128 0 .
33/200 : / 33 200 0 .
33/34 : / 33 34 0 .
33/37 : / 33 37 0 .
33/38 : / 33 38 0 .
33/41 : / 33 41 0 .
33554432+33554432 : + 33554432 33554432 67108864 .
34+1 : + 34 1 35 .
34+2 : + 34 2 36 .
34/125 : / 34 125 0 .
34/200 : / 34 200 0 .
34/36 : / 34 36 0 .
34/37 : / 34 37 0 .
34/38 : / 34 38 0 .
34/41 : / 34 41 0 .
35+1 : + 35 1 36 .
35+15 : + 35 15 50 .
36+1 : + 36 1 37 .
36/200 : / 36 200 0 .
36/37 : / 36 37 0 .
36/38 : / 36 38 0 .
36/41 : / 36 41 0 .
37+1 : + 37 1 38 .
37/1000 : / 37 1000 0 .
37/128 : / 37 128 0 .
37/200 : / 37 200 0 .
37/38 : / 37 38 0 .
37/41 : / 37 41 0 .
38+1 : + 38 1 39 .
38/1000 : / 38 1000 0 .
38/128 : / 38 128 0 .
38/200 : / 38 200 0 .
38/41 : / 38 41 0 .
39+1 : + 39 1 40 .
3980+116 : + 3980 116 4096 .
3980+252 : + 3980 252 4232 .
4*0 : * 4 0 0 .
4*1058 : * 4 1058 4232 .
4*16384 : * 4 16384 65536 .
4*2 : * 4 2 8 .
4*63 : * 4 63 252 .
4*8 : * 4 8 32 .
4*995 : * 4 995 3980 .
4+1 : + 4 1 5 .
4+3 : + 4 3 7 .
4+4 : + 4 4 8 .
4/32 : / 4 32 0 .
4/4294967295 : / 4 4294967295 0 .
40+1 : + 40 1 41 .
4096+4096 : + 4096 4096 8192 .
4096/4294967295 : / 4096 4294967295 0 .
4096/8192 : / 4096 8192 0 .
41+1 : + 41 1 42 .
41/1000 : / 41 1000 0 .
41/128 : / 41 128 0 .
41/200 : / 41 200 0 .
4194304+4194304 : + 4194304 4194304 8388608 .
42+1 : + 42 1 43 .
43+1 : + 43 1 44 .
44+1 : + 44 1 45 .
45+1 : + 45 1 46 .
46+1 : + 46 1 47 .
47+1 : + 47 1 48 .
48+1 : + 48 1 49 .
49+1 : + 49 1 50 .
5+1 : + 5 1 6 .
5+8 : + 5 8 13 .
5+9 : + 5 9 14 .
5/32 : / 5 32 0 .
50+1 : + 50 1 51 .
50+13 : + 50 13 63 .
51+1 : + 51 1 52 .
512+512 : + 512 512 1024 .
52+1 : + 52 1 53 .
524288+524288 : + 524288 524288 1048576 .
53+1 : + 53 1 54 .
536870912+536870912 : + 536870912 536870912 1073741824 .
54+1 : + 54 1 55 .
55+1 : + 55 1 56 .
56+1 : + 56 1 57 .
57+1 : + 57 1 58 .
58+1 : + 58 1 59 .
58+58 : + 58 58 116 .
59+1 : + 59 1 60 .
6+1 : + 6 1 7 .
6/32 : / 6 32 0 .
60+1 : + 60 1 61 .
61+1 : + 61 1 62 .
62+1 : + 62 1 63 .
62+97 : + 62 97 159 .
63+1 : + 63 1 64 .
63+995 : + 63 995 1058 .
64+64 : + 64 64 128 .
65535+1 : + 65535 1 65536 .
65536+1 : + 65536 1 65537 .
65536+65536 : + 65536 65536 131072 .
65537*65535 : * 65537 65535 4294967295 .
67108864+67108864 : + 67108864 67108864 134217728 .
7+1 : + 7 1 8 .
7+5 : + 7 5 12 .
7/32 : / 7 32 0 .
8+1 : + 8 1 9 .
8+4 : + 8 4 12 .
8+7 : + 8 7 15 .
8+8 : + 8 8 16 .
8/32 : / 8 32 0 .
8/4294967295 : / 8 4294967295 0 .
8192+8192 : + 8192 8192 16384 .
8388608+8388608 : + 8388608 8388608 16777216 .
9+1 : + 9 1 10 .
9+1049 : + 9 1049 1058 .
9+3 : + 9 3 12 .
9/32 : / 9 32 0 .
995+32 : + 995 32 1027 .
995+63 : + 995 63 1058 .
% Copyright (c) 2004 Princeton University
%	$Id: logic.elf,v 1.17 2005/02/10 15:21:23 richards Exp $

tp     : type.
tm     : tp -> type.
form   : tp.
tform  : type = tm form. 
arrow  : tp -> tp -> tp.  %infix right 14 arrow.
pf     : tform -> type.

_lam    : {T1 : tp} {T2 : tp} (tm T1 -> tm T2) -> tm (T1 arrow T2).
_@      : {T1 : tp} {T2 : tp} tm (T1 arrow T2) -> tm T1 -> tm T2.
_forall : {T : tp} (tm T -> tform) -> tform.
imp     : tform -> tform -> tform.   %infix right 10 imp.

_beta_e  : {T1 : tp} {T2 : tp} {F : tm T1 -> tm T2} {X : tm T1}
  {P : tm T2 -> tform} pf (P (_@ T1 T2 (_lam T1 T2 F) X)) ->  pf (P (F X)).

_imp_i   : {A : tform} {B : tform} (pf A -> pf B) -> pf (A imp B).
_imp_e   : {A : tform} {B : tform} pf (A imp B) -> pf A -> pf B.

_forall_i:{T: tp} {A : tm T -> tform}({X : tm T} pf (A X)) -> pf (_forall T A).
_forall_e:{T: tp} {A : tm T -> tform} pf (_forall T A) -> {X : tm T} pf (A X).

pair     : tp -> tp -> tp.
_mkpair  : {T1 : tp} {T2 : tp} tm (T1 arrow T2 arrow pair T1 T2).
_fst     : {T1 : tp} {T2 : tp} tm (pair T1 T2 arrow T1).
_snd     : {T1 : tp} {T2 : tp} tm (pair T1 T2 arrow T2).

_fstpair : {T1 : tp} {T2 : tp} {X : tm T1} {Y : tm T2}
 pf (_forall (T1 arrow form) [f : tm (T1 arrow form)]
    (_@ T1 form f X) imp (_@ T1 form f (_@ (pair T1 T2) T1 (_fst T1 T2)
     (_@ T2 (pair T1 T2) (_@ T1 (T2 arrow pair T1 T2) (_mkpair T1 T2) X) Y)))).

_sndpair : {T1 : tp} {T2 : tp} {X : tm T1} {Y : tm T2}
 pf (_forall (T2 arrow form) [f : tm (T2 arrow form)]
    (_@ T2 form f Y) imp (_@ T2 form f (_@ (pair T1 T2) T2 (_snd T1 T2)
     (_@ T2 (pair T1 T2) (_@ T1 (T2 arrow pair T1 T2) (_mkpair T1 T2) X) Y)))).
% Copyright (c) 2004 Princeton University
%	$Id: coredefs.elf,v 1.49 2004/07/29 00:30:38 rsimmons Exp $

_frl_frm : (tform -> tform) -> tform = _forall form.

_@_f : {T : tp} tm (T arrow form) -> tm T -> tform = [T : tp] _@ T form.

_eq : {T : tp} tm T -> tm T -> tform =
 [T : tp][A : tm T][B : tm T]
  _forall (T arrow form) [P : tm (T arrow form)] _@_f T P B imp _@_f T P A.

and : tform -> tform -> tform =
 [A : tform][B : tform] _frl_frm [C : tform] (A imp B imp C) imp C.
%infix right 12 and.

or : tform -> tform -> tform =
 [A : tform][B : tform] _frl_frm [C : tform] (A imp C) imp (B imp C) imp C.
%infix right 11 or.

false : tform = _frl_frm [A : tform] A.

not : tform -> tform = [A : tform] A imp false.

equiv : tform -> tform -> tform =
 [A : tform][B : tform] (A imp B) and (B imp A).    %infix right 10 equiv.

_lam2  = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3]
  _lam T1 (T2 arrow T3) [x : tm T1] _lam T2 T3 (f x).

_lam3 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp]
        [f : tm T1 -> tm T2 -> tm T3 -> tm T4]
  _lam T1 (T2 arrow T3 arrow T4) [x : tm T1] _lam2 T2 T3 T4 (f x).

_lam4 = [T1 : tp] [T2 : tp] [T3 : tp] [T4 : tp] [T5 : tp]
        [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5]
  _lam T1 (T2 arrow T3 arrow T4 arrow T5) [x : tm T1] _lam3 T2 T3 T4 T5 (f x).

_@2 = [T1 : tp][T2 : tp][T3 : tp][f : tm (T1 arrow T2 arrow T3)]
 [x1 : tm T1] _@ T2 T3 (_@ T1 (T2 arrow T3) f x1).

_@3 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp]
 [f : tm (T1 arrow T2 arrow T3 arrow T4)][x1 : tm T1]
  _@2 T2 T3 T4 (_@ T1 (T2 arrow T3 arrow T4) f x1).

_@4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp]
 [f : tm (T1 arrow T2 arrow T3 arrow T4 arrow T5)][x1 : tm T1]
  _@3 T2 T3 T4 T5 (_@ T1 (T2 arrow T3 arrow T4 arrow T5) f x1).

_forall2 = [T1 : tp][T2 : tp][f : tm T1 -> tm T2 -> tform]
  _forall T1 [x : tm T1] _forall T2 (f x).

_forall3 = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3 -> tform]
  _forall T1 [x : tm T1] _forall2 T2 T3 (f x).

_forall4 = [T1 : tp][T2 : tp][T3 : tp][T4: tp]
           [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tform]
  _forall T1 [x : tm T1] _forall3 T2 T3 T4 (f x).

_forall5 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp]
	   [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tform]
  _forall T1 [x : tm T1] _forall4 T2 T3 T4 T5 (f x).

_forall6 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp][T6 : tp]
	   [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tm T6 -> tform]
  _forall T1 [x : tm T1] _forall5 T2 T3 T4 T5 T6 (f x).

_exists : {T : tp} (tm T -> tform) -> tform =
 [T : tp][F : tm T -> tform]
  _frl_frm [B : tform] (_forall T [X : tm T] F X imp B) imp B.

_exists2 = [T1 : tp][T2 : tp][f : tm T1 -> tm T2 -> tform]
  _exists T1 [x : tm T1] _exists T2 (f x).

_exists3 = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3 -> tform]
  _exists T1 [x : tm T1] _exists2 T2 T3 (f x).

app1 = [T1 : tp][T2 : tp][f : tm T1 -> tm T2][x1 : tm T1]
 _@ T1 T2 (_lam T1 T2 f) x1.

app2 = [T1 : tp][T2 : tp][T3 : tp][f : tm T1 -> tm T2 -> tm T3]
  _@2 T1 T2 T3 (_lam2 T1 T2 T3 f).

app3 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp]
  [f : tm T1 -> tm T2 -> tm T3 -> tm T4]
  _@3 T1 T2 T3 T4 (_lam3 T1 T2 T3 T4 f).

app4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5 : tp]
  [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5]
   _@4 T1 T2 T3 T4 T5 (_lam4 T1 T2 T3 T4 T5 f).

app5 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5: tp][T6 : tp]
 [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tm T6][x1 : tm T1]
  _@4 T2 T3 T4 T5 T6
    ((app1 T1 (T2 arrow T3 arrow T4 arrow T5 arrow T6)
     [x : tm T1] _lam4 T2 T3 T4 T5 T6 (f x)) x1).

app6 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][T5: tp][T6 : tp][T7 : tp]
 [f : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5 -> tm T6 -> tm T7]
 [x1 : tm T1][x2 : tm T2]
  _@4 T3 T4 T5 T6 T7
    ((app2 T1 T2 (T3 arrow T4 arrow T5 arrow T6 arrow T7)
     [x : tm T1][y : tm T2] _lam4 T3 T4 T5 T6 T7 (f x y)) x1 x2).

if : tform -> tform -> tform -> tform =
 [E : tform][A : tform][B : tform] (E imp A) and (not E imp B).

true : tform = not false.

xor : tform -> tform -> tform =
 [A : tform][B : tform] (A and (not B)) or ((not A) and B).
%infix right 11 xor.

_kleene_star : {T : tp} (tm T -> tm T -> tform) -> tm T -> tm T -> tform =
  [T : tp][R : tm T -> tm T -> tform][V : tm T][W : tm T] 
   _forall  (T arrow T arrow form) [S : tm (T arrow T arrow form)]
   (_forall T [Z : tm T] _@2 T T form S Z Z) imp
   (_forall3 T T T [X : tm T][Y : tm T][Z : tm T]
    (app2 T T form R X Y) imp (_@2 T T form S Y Z)
      imp (_@2 T T form S X Z)) imp
   (_@2 T T form S V W).

% Pairs out of pairs.
% Object vs Meta logic.
tuple2 : tp -> tp -> tp = pair.
_mktuple2 : {T1 : tp}{T2 : tp} tm T1 -> tm T2 -> tm (tuple2 T1 T2) =
 [T1 : tp][T2 : tp][x1 : tm T1][x2 : tm T2]
  _@2 T1 T2 (pair T1 T2) (_mkpair T1 T2) x1 x2.
_get1of2 = [T1 : tp][T2 : tp][p : tm (tuple2 T1 T2)]
 _@ (pair T1 T2) T1 (_fst T1 T2) p.
_get2of2 = [T1 : tp][T2 : tp][p : tm (tuple2 T1 T2)]
 _@ (pair T1 T2) T2 (_snd T1 T2) p.

% Quadruples out of pairs.
tuple4 : tp -> tp -> tp -> tp -> tp =
 [T1 : tp][T2 : tp][T3 : tp ][T4 : tp] pair (pair T1 T2) (pair T3 T4).
_mktuple4 : {T1 : tp}{T2 : tp}{T3 : tp}{T4 : tp}
           tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm (tuple4 T1 T2 T3 T4) =
 [T1 : tp][T2 : tp][T3 : tp][T4 : tp][x1 : tm T1][x2 : tm T2][x3 : tm T3]
 [x4 : tm T4] _@2 (pair T1 T2) (pair T3 T4) (tuple4 T1 T2 T3 T4)
                  (_mkpair (pair T1 T2) (pair T3 T4))
                  (_@2 T1 T2 (pair T1 T2) (_mkpair T1 T2) x1 x2)
                  (_@2 T3 T4 (pair T3 T4) (_mkpair T3 T4) x3 x4).

_get1of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T1 T2) T1 (_fst T1 T2)
    (_@ (tuple4 T1 T2 T3 T4) (pair T1 T2) (_fst (pair T1 T2) (pair T3 T4)) p).

_get2of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T1 T2) T2 (_snd T1 T2)
    (_@ (tuple4 T1 T2 T3 T4) (pair T1 T2) (_fst (pair T1 T2) (pair T3 T4)) p).

_get3of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T3 T4) T3 (_fst T3 T4)
    (_@ (tuple4 T1 T2 T3 T4) (pair T3 T4) (_snd (pair T1 T2) (pair T3 T4)) p).

_get4of4 = [T1 : tp][T2 : tp][T3 : tp][T4 : tp][p : tm (tuple4 T1 T2 T3 T4)]
  _@ (pair T3 T4) T4 (_snd T3 T4)
    (_@ (tuple4 T1 T2 T3 T4) (pair T3 T4) (_snd (pair T1 T2) (pair T3 T4)) p).
% Copyright (c) 2004 Princeton University
%	$Id: arith-fix-checker.elf,v 1.7 2004/04/22 10:47:38 appel Exp $

%use word32.

rep_type = word32.
rep_plus = +.
rep_times = *.
rep_div = /.
% Copyright (c) 2004 Princeton University
%	$Id: arith.elf,v 1.16 2004/04/22 10:47:38 appel Exp $

% Author : Neophytos Michael
%

num : tp.
tnum = tm num.

const : rep_type -> tnum.

isInt : tnum -> tform.

zero = const 0.
one  = const 1.

p_one  : pf (isInt one).

neg : tnum -> tnum.
eqn : tnum -> tnum -> tform = _eq num.

%
% The existece of negatives is an axiom.
%
_neg_exists : {N : tnum} pf (isInt N) -> pf (isInt (neg N)).

%
% The integers with addition (Z, +) form an abelian group.
%
plus : tnum -> tnum -> tnum.

_closure_add :
 {N : tnum}{M : tnum}pf (isInt N) -> pf (isInt M) -> pf (isInt (plus N M)).

_assoc_add : {A : tnum}{B : tnum}{C : tnum}
             pf (eqn (plus (plus A B) C) (plus A (plus B C))).

_comm_add : {A : tnum}{B : tnum} pf (eqn (plus A B) (plus B A)).

_zero_add : {A : tnum} pf (eqn (plus A zero) A).

_inv_add : {A : tnum} pf (eqn (plus A (neg A)) zero).

%
% The integers with multiplication (Z, *) form a monoid.
%
times : tnum -> tnum -> tnum.

_closure_mult : {N : tnum}{M : tnum}
                pf (isInt N) -> pf (isInt M) -> pf (isInt (times N M)).

_assoc_mult : {A : tnum}{B : tnum}{C : tnum}
              pf (eqn (times (times A B) C) (times A (times B C))).

_zero_mult : {A : tnum} pf (eqn (times A one) A).

_comm_mult : {A : tnum}{B : tnum} pf (eqn (times A B) (times B A)).

% The 1 != 0 rule. This rules out the trivial structure of the single
% element Ring.
one_neq_zero : pf ((eqn one zero) imp false).

%
% The distributive law of multiplication over addition.
%
_distrib : {A : tnum}{B : tnum}{C : tnum}
           pf (eqn (times A (plus B C)) (plus (times A B) (times A C))).

%
% The order relation on integers.
%
geq : tnum -> tnum -> tform.

_ord_reflexivity : {A : tnum} pf (geq A A).

_ord_transitivity : {A : tnum}{B : tnum}{C : tnum}
                    pf (geq A B) -> pf (geq B C) -> pf (geq A C).

_ord_dichotomy : {A : tnum}{B : tnum} pf ((geq A B) or (geq B A)).

_ord_add_closure : {A : tnum}{B : tnum}{C : tnum}
                   pf (geq A C) -> pf (geq (plus A B) (plus C B)).

_ord_mult_closure : {A : tnum}{B : tnum} pf (geq A zero) -> pf (geq B zero)
                     -> pf (geq (times A B) zero).

_ord_antisymmetry : {A : tnum}{B : tnum}
                    pf (geq A B) -> pf (geq B A) -> pf (eqn A B).

_ord_excluded_middle : {A : tnum}{B : tnum} pf ((geq A B) or not (geq A B)).

%
% The cancelation Axiom
%
_cancelation : {A : tnum}{B : tnum}
               pf (eqn (times A B) zero) -> pf ((eqn A zero) or (eqn B zero)).

%
% Finally the induction principle on the integers.
%
isNat = [n : tnum] (isInt n) and (geq n zero).

induction : {A : tnum -> tform}
            pf (A zero) ->
            ({n : tnum}pf (isNat n) -> pf (A n) -> pf (A (plus n one))) ->
            pf (_forall num [n : tnum] (isNat n) imp A n).

sign  : tnum -> tnum.
_sign0 : {N : tnum} pf (geq N zero) -> pf (eqn (sign N) zero).
_sign1 : {N : tnum} pf (geq N zero imp false) -> pf (eqn (sign N) one).

_eval_plus : {A : rep_type}{B : rep_type}{C : rep_type}
             rep_plus A B C -> pf (eqn (plus (const A) (const B)) (const C)).

_eval_times : {A : rep_type}{B : rep_type}{C : rep_type}
             rep_times A B C -> pf (eqn (times (const A) (const B)) (const C)).

_eval_div : {M : rep_type}{N : rep_type}{Q : rep_type} rep_div M N Q
           -> pf (geq (const M) (times (const N) (const Q)) and
                 (not (geq (const M) (times (const N) (plus one (const Q)))))).
% Copyright (c) 2004 Princeton University
%	$Id: arithdefs.elf,v 1.43 2004/10/07 22:39:18 gtan Exp $


_frl_n  : (tnum -> tform) -> tform = _forall num.
_exs_n  : (tnum -> tform) -> tform = _exists num.
_exs_n2 : (tnum -> tnum -> tform) -> tform = _exists2 num num.
_exs_n3 : (tnum -> tnum -> tnum -> tform) -> tform = _exists3 num num num.

minus : tnum -> tnum -> tnum = [x : tnum][y : tnum] plus x (neg y).

lt : tnum -> tnum -> tform = [x : tnum][y : tnum] not (geq x y).

gt : tnum -> tnum -> tform = [x : tnum][y : tnum] lt y x.

leq : tnum -> tnum -> tform = [x : tnum][y : tnum] geq y x.

if1: tnum -> tnum -> tnum -> tnum = 
 [A : tnum][B : tnum][C : tnum] plus (times A B) (times (minus one A) C).

ifgtz : tnum -> tnum -> tnum -> tnum = [x : tnum] if1 (sign (neg x)).

ifeq : tnum -> tnum -> tnum -> tnum -> tnum =
 [I : tnum][J : tnum][A : tnum][B : tnum]
  ifgtz (minus I J) B (ifgtz (minus J I) B A).

% Some symbolic constants.
two     : tnum = const 2.
three   : tnum = const 3.
four    : tnum = const 4.
seven   : tnum = const 7.
eight   : tnum = const 8.
ten     : tnum = const 10.
fifteen : tnum = const 15.
sixteen : tnum = const 16.

pred1 : tp -> type = [t1:tp] tm t1 -> tform.
pred2 : tp -> tp -> type = [t1:tp][t2:tp] tm t1 -> pred1 t2.
pred4 : tp -> tp -> tp -> tp -> type
  = [t1:tp][t2:tp][t3:tp][t4:tp] tm t1 -> tm t2 -> pred2 t3 t4.
pred5 : tp -> tp -> tp -> tp -> tp -> type
  = [t1:tp][t2:tp][t3:tp][t4:tp][t5:tp] tm t1 -> pred4 t2 t3 t4 t5.

high0 : type = pred2 form form.
high1 : type = {t1:tp} pred1 t1 -> pred1 t1 -> pred1 t1.
high2 : type = {t1:tp}{t2:tp} pred2 t1 t2 -> pred2 t1 t2 -> pred2 t1 t2.
high4 : type = {t1:tp}{t2:tp}{t3:tp}{t4:tp}
  pred4 t1 t2 t3 t4 -> pred4 t1 t2 t3 t4 -> pred4 t1 t2 t3 t4.
high5 : type = {t1:tp}{t2:tp}{t3:tp}{t4:tp}{t5:tp}
  pred5 t1 t2 t3 t4 t5 -> pred5 t1 t2 t3 t4 t5 -> pred5 t1 t2 t3 t4 t5.

%abbrev mkhigh1 : high0 -> high1 =
 [op:high0][t1:tp][h1:pred1 t1][h2:pred1 t1][x1:tm t1]
 op (app1 t1 form h1 x1) (app1 t1 form h2 x1).

%abbrev mkhigh2 : high0 -> high2 =
 [op:high0][t1:tp][t2:tp][h1:pred2 t1 t2][h2:pred2 t1 t2][x1:tm t1][x2:tm t2]
 op (app2 t1 t2 form h1 x1 x2) (app2 t1 t2 form h2 x1 x2).

%abbrev mkhigh4 : high0 -> high4 =
 [op:high0][t1:tp][t2:tp][t3:tp][t4:tp]
 [h1:pred4 t1 t2 t3 t4][h2:pred4 t1 t2 t3 t4]
 [x1:tm t1][x2:tm t2][x3:tm t3][x4:tm t4]
 op (app4 t1 t2 t3 t4 form h1 x1 x2 x3 x4)
    (app4 t1 t2 t3 t4 form h2 x1 x2 x3 x4).

%abbrev mkhigh5 : high0 -> high5 =
 [op:high0][t1:tp][t2:tp][t3:tp][t4:tp][t5:tp]
 [h1:pred5 t1 t2 t3 t4 t5][h2:pred5 t1 t2 t3 t4 t5]
 [x1:tm t1][x2:tm t2][x3:tm t3][x4:tm t4][x5:tm t5]
 op (app5 t1 t2 t3 t4 t5 form h1 x1 x2 x3 x4 x5)
    (app5 t1 t2 t3 t4 t5 form h2 x1 x2 x3 x4 x5).

%abbrev __and : pred2 form form = [a : tform][b : tform] a and b.
%abbrev __or  : pred2 form form = [a : tform][b : tform] a or b.

_&&  : high1 = mkhigh1 __and.
_&&2 : high2 = mkhigh2 __and.
_&&4 : high4 = mkhigh4 __and.
_||  : high1 = mkhigh1 __or.
_||2 : high2 = mkhigh2 __or.
_||4 : high4 = mkhigh4 __or.
_||5 : high5 = mkhigh5 __or.

% A high level not operator
_!! : {T : tp} (tm T -> tform) -> tm T -> tform =
 [T : tp][p : tm T -> tform][w : tm T] not (_@ T form (_lam T form p) w).

% These are used a lot in the trusted code so they've been moved here.
succ : tnum -> tnum = [n : tnum] plus n one.
pred : tnum -> tnum = [n : tnum] minus n one.

% The definitions of ncomp and sequences
% See core/sequence.elf

sequence : tp -> tp = [T : tp] num arrow T arrow form.

_ncomp : {T : tp} tm (T arrow T) -> tm num -> tm T -> tm T -> tform =
 [T : tp][F : tm (T arrow T)][N : tnum][X : tm T][Y : tm T]
   _forall ((T arrow T) arrow num arrow T arrow T arrow form)
    [NC : tm ((T arrow T) arrow num arrow T arrow T arrow form)]
      (_forall T [Z : tm T]
        _@4 (T arrow T) num T T form NC F zero Z Z) imp
      (_forall3 num T T [N' : tm num][Z1 : tm T][Z2 : tm T] 
             (isNat N') imp (gt N' zero) imp
             (_@4 (T arrow T) num T T form NC F (pred N') Z1 Z2) imp
             (_@4 (T arrow T) num T T form NC F N' Z1 (_@ T T F Z2))) imp
      (_@4 (T arrow T) num T T form NC F N X Y).

double : tm (num arrow num) = _lam num num [x : tnum] times two x.

_power2 : tnum ->  tnum -> tform =
 [a : tnum][b : tnum] (isNat a) and (_ncomp num double a one b).

bignum_base : rep_type = 256.
bignum      : tnum = zero.
dig         : tnum -> rep_type -> tnum =
 [x : tnum][d : rep_type] plus (times x (const bignum_base)) (const d).
%infix left 1000 dig.

pow2_8  : tnum = bignum dig 1 dig 0.
pow2_16 : tnum = bignum dig 1 dig 0 dig 0.
pow2_24 : tnum = bignum dig 1 dig 0 dig 0 dig 0.
pow2_32 : tnum = bignum dig 1 dig 0 dig 0 dig 0 dig 0.
pow2_64 : tnum = bignum dig 1 dig 0 dig 0 dig 0 dig 0 dig 0 dig 0 dig 0 dig 0.
pow2_31     = const 2147483648.

_abs : tnum -> tnum -> tform =
 [a : tnum][abs_a : tnum] if (geq a zero) (eqn abs_a a) (eqn abs_a (neg a)).

% Arithmetic modulo an integer
_divide_mod : tnum -> tnum -> tnum -> tnum -> tform =
 [m : tnum][n : tnum][q : tnum][r : tnum]
  (gt n zero) and
  (eqn m (plus (times q n) r)) and
  (isInt q) and geq r zero and lt r n.

_divide : tnum -> tnum -> tnum -> tform =
 [n : tnum][m : tnum][q : tnum] _exs_n [r : tnum] _divide_mod n m q r.

_modulo : tnum -> tnum -> tnum -> tform =
 [n: tnum][m : tnum][r : tnum] _exs_n [q : tnum] _divide_mod n m q r.

_modulo32 : tnum -> tnum -> tform =
 [n : tnum][res : tnum] _modulo n pow2_32 res.

_plus_mod16 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (plus a b) pow2_16 c.

_plus_mod32 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (plus a b) pow2_32 c.

_minus_mod32 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (minus a b) pow2_32 c.

_times_mod32 : tnum -> tnum -> tnum -> tform =
 [a : tnum][b : tnum][c : tnum] _modulo (times a b) pow2_32 c.

% Bitwise operations
_bits : tnum -> tnum -> tnum -> tnum -> tform =
 [r : tnum][l : tnum][v : tnum][word : tnum]
  _exs_n3 [pr : tnum][plr : tnum][shifted : tnum]
  (_power2 r pr) and
  (_power2 (succ (minus l r)) plr) and
  (_divide word pr shifted) and
  (_modulo shifted plr v).

_inrange2 : tnum -> tnum -> tnum -> tform =
  [lo:tnum][hi:tnum][x:tnum]
  isInt x and leq lo x and lt x hi.

_set_disjoint : {t: tp} (tm t -> tform) -> (tm t -> tform) -> tform =
  [t: tp] [s1: tm t -> tform] [s2: tm t -> tform]
  not (_exists t [x:tm t] s1 x and s2 x).

_rbits : rep_type -> rep_type -> tnum -> tnum -> tform =
 [r : rep_type][l : rep_type] _bits (const r) (const l).

% Number is even
even? : tnum -> tform = [m: tnum] _modulo m two zero.

% Number is a multiple of four
mult4? : tnum -> tform = [m: tnum] _modulo m four zero.
% Copyright (c) 2004 Princeton University
%	$Id: arith-fix-axioms.elf,v 1.4 2004/04/22 10:47:38 appel Exp $

% All rations are word32 (unsigned ints) for this theory.

_warning_not_portable_to_arith_rat : {C : rep_type} pf (isNat (const C)).
% Copyright (c) 2004 Princeton University
%	$Id: classic.elf,v 1.4 2004/04/22 10:47:39 appel Exp $

_not_not_e : {B : tform}
 pf ((B imp (_frl_frm [A : tform] A)) imp (_frl_frm [A : tform] A)) -> pf B.
% Copyright (c) 2004 Princeton University
%	$Id: ops.elf,v 1.87 2004/04/22 10:49:18 appel Exp $

registers : tp = num arrow num.
memory    : tp = num arrow num.

tregs : type = tm registers.
tmem  : type = tm memory.

program : tp = num arrow num arrow form.
__program__ : type = tm program.

_exs_r : (tregs -> tform) -> tform = _exists registers.

_readable   : tregs -> tmem -> tnum -> tform.
_writable   : tregs -> tmem -> tnum -> tform.
_executable : tregs -> tmem -> tnum -> tform.

instr : tp = registers arrow memory arrow registers arrow memory arrow form.
app_instr = _@4 registers memory registers memory form.

% no api steps for now
api_step : tm instr = 
  _lam4 registers memory registers memory form
   [r: tregs][m: tmem][r': tregs][m': tmem] false.

tnfn : tp -> tp -> type = [T1 : tp][T2 : tp] tm (T1 arrow T2).

upd_typ = [T1 : tp][T2 : tp] tnfn T1 T2 -> tnfn T1 T2 -> tm T1 -> tform.

_k0 = [T1 : tp][T2 : tp][f : tnfn T1 T2][f' : tnfn T1 T2][z : tm T1]
  _eq T2 (_@ T1 T2 f' z) (_@ T1 T2 f z).

_upd/cc = [T1 : tp][T2 : tp][d : tm T1][x : tm T2]
 [k : upd_typ T1 T2][f : tnfn T1 T2][f' : tnfn T1 T2][z : tm T1]
  if (_eq T1 z d) (_eq T2 (_@ T1 T2 f' d) x)
                  (_@3 (T1 arrow T2) (T1 arrow T2) T1 form
                      (_lam3 (T1 arrow T2) (T1 arrow T2) T1 form k) f f' z).

_upd : {T1 : tp}{T2 : tp} tnfn T1 T2 -> tm T1 -> tm T2 -> tnfn T1 T2 -> tform =
 [T1 : tp][T2 : tp][f : tnfn T1 T2][d : tm T1][x : tm T2][f' : tnfn T1 T2]
  _forall T1 [z : tm T1] _upd/cc T1 T2 d x (_k0 T1 T2) f f' z.

_upd2 = [T1 : tp][T2 : tp][f : tnfn T1 T2][d1 : tm T1][x1 : tm T2]
       [d2 : tm T1][x2 : tm T2][f' : tnfn T1 T2] _forall T1 [z : tm T1]
    _upd/cc T1 T2 d1 x1 (_upd/cc T1 T2 d2 x2 (_k0 T1 T2)) f f' z.

_upd3 = [T1 : tp][T2 : tp][f : tnfn T1 T2][d1 : tm T1][x1 : tm T2][d2 : tm T1]
  [x2 : tm T2][d3 : tm T1][x3 : tm T2][f' : tnfn T1 T2]
  _forall T1 [z : tm T1] _upd/cc T1 T2 d1 x1 (_upd/cc T1 T2 d2 x2
    (_upd/cc T1 T2 d3 x3 (_k0 T1 T2))) f f' z.

_upd4 = [T1 : tp][T2 : tp][f : tnfn T1 T2][d1 : tm T1][x1 : tm T2][d2 : tm T1]
  [x2 : tm T2][d3 : tm T1][x3 : tm T2][d4 : tm T1][x4 : tm T2][f' : tnfn T1 T2]
  _forall T1 [z : tm T1] _upd/cc T1 T2 d1 x1 (_upd/cc T1 T2 d2 x2
    (_upd/cc T1 T2 d3 x3 (_upd/cc T1 T2 d4 x4 (_k0 T1 T2)))) f f' z.

app1_pred = app1 num form.
app_get_t = app2 registers num.
app_get   = app_get_t num.
app_upd   = app4 registers num num registers form.
app_upd2  = app6 registers num num num num registers form.

updn_typ = tnfn num num -> tm num -> tm num -> tnfn num num -> tform.
updn2_typ = tnfn num num -> tm num -> tm num -> tm num -> tm num
             -> tnfn num num -> tform.
updn3_typ = tnfn num num -> tm num -> tm num -> tm num -> tm num
             -> tm num -> tm num -> tnfn num num -> tform.

updn  : updn_typ  = _upd num num.
updn2 : updn2_typ = _upd2 num num.
updn3 : updn3_typ = _upd3 num num.

strictify_num = [f : tform][c : tnum] app1_pred ([_ : tnum] f) c.

true_fn = strictify_num true.

get_mem = [m : tmem][a : tnum] _@ num num m a.
get_reg = [r : tregs][a : tnum] _@ num num r a.

_eq_mem : tmem -> tmem -> tform =
 [m : tmem][m' : tmem] _frl_n [i : tnum] eqn (get_mem m i) (get_mem m' i).

_eq_regs : tregs -> tregs -> tform =
 [r : tregs][r' : tregs]_frl_n [i : tnum] eqn (get_reg r i) (get_reg r' i).

_eq_hidden_regs: tregs -> tregs -> tform =
 [r : tregs][r' : tregs] _frl_n [i : tnum] 
    geq i (const 1000) imp eqn (get_reg r i) (get_reg r' i).

_is_word : tnum -> tform = [x : tnum] isNat x and lt x pow2_32.

_regmempred_extensional : (tregs -> tmem -> tnum -> tform) -> tform =
 [f : tregs -> tmem -> tnum -> tform] 
  _forall5 registers registers memory memory num
    [r : tregs][r' : tregs][m : tmem][m' : tmem][n : tnum] _eq_hidden_regs r r'
      imp (_frl_n [x : tm num]
	    not (_writable r m x) imp eqn (get_mem m x) (get_mem m' x))
      imp f r m n equiv f r' m' n.

_readable_extensional : pf (_regmempred_extensional _readable).
_writable_extensional : pf (_regmempred_extensional _writable).
_executable_extensional : pf (_regmempred_extensional _executable).
_executable_isword : {R:tregs} {M:tmem} {X:tnum}
                     pf (_executable R M X) -> pf (_is_word X).

instr_lam : (tregs -> tmem -> tregs -> tmem -> tform) -> tm instr =
 _lam4 registers memory registers memory form.

% This definition converts the byte input argument to the number of bits
% that are contained in the given number of bytes.
byte2bit = [bytes : tnum] times bytes eight.

% This definition makes sure that the bit pattern between "left" and "right"
% is identical in words "v1" and "v2".
eq_between = [right : tnum][left : tnum][v1 : tnum][v2 : tnum]
  _exs_n [t : tnum] _bits right left t v1 and _bits right left t v2.

% Sign extend an integer.  "msb" is the most significant bit of the
% number we are sign extending, "v" is the number itself and "vres" is
% the result of the sign extension. "v" must always be a positive
% integer.
sign_ext = [msb : tnum][v : tnum][vres : tnum]
  _exs_n [s : tnum]
   _bits msb msb s v and
   (if (eqn s zero) (eqn vres v)
                (_exs_n [p : tnum] (_power2 (succ msb) p) and
                                   (eqn vres (plus v (minus pow2_32 p))))).

% This definition forms the "address" and the "offset" arguments when
% given an unaligned argument.  It also ensures that the address is
% well aligned given the size of the value we are trying to fetch.
form_address = [u_address : tnum][alignment_bit : tnum][address : tnum]
               [offset : tnum][size : tnum]
  _bits zero alignment_bit offset u_address and
  _minus_mod32 u_address offset address and
  _modulo offset size zero.

% This definition is used to cast the value of a word to the appropriate
% size.  It is used by the load instructions to chop the value fetched
% from memory to the appopriate size.
chop_value = [m : tmem][address : tnum][offset : tnum][size : tnum][v : tnum]
  _exs_n2 [right : tnum][left : tnum]
    eqn left (minus (const 31) (byte2bit offset)) and
    eqn right (minus (succ left) (byte2bit size)) and
    _bits right left v (get_mem m address).

% This definition is used (in conjuction with the above) by the load
% instructions.  The function sign extends a value from the
% appropriate bit depending on the size.  After the value is choped
% then if we are dealing with a sign extending load the value fetched
% from memory must be sign-extended.
sign_extend_from_size = [v : tnum][signed : tform][size : tnum][vres : tnum]
  if signed (((eqn size one) and (sign_ext seven v vres)) or
             ((eqn size two) and (sign_ext fifteen v vres)) or
             ((eqn size four) and (eqn v vres)))
            (eqn v vres).

% This definition is used to fetch the value stored in a memory
% location due to a load instruction.  It performs sign extention and
% casting to the appropriate machine type.
fetch_value = [m : tmem][address : tnum][offset : tnum][signed : tform]
              [size : tnum][val : tnum]
 _exs_n [v : tnum] chop_value m address offset size v and
                   sign_extend_from_size v signed size val.

mk_stored_value_word = [reg_val : tnum][new_val : tnum] eqn new_val reg_val.

mk_stored_value_half =
 [mem_val : tnum][reg_val : tnum][offset : tnum][new_val : tnum]
  _exs_n2 [mp_right : tnum][mp_left : tnum] _exs_n2 [p1 : tnum][p2 : tnum]
   _power2 (byte2bit (minus four offset)) p2 and
   _power2 (byte2bit (minus (minus four offset) two)) p1 and
   _modulo mem_val p1 mp_right and
   _divide mem_val p2 mp_left and
   eqn new_val (plus (plus (times mp_left p2) (times reg_val p1)) mp_right).

mk_stored_value_byte =
 [mem_val : tnum][reg_val : tnum][offset : tnum][new_val : tnum]
  _exs_n2 [mp_left : tnum][mp_right : tnum] _exs_n2 [p1 : tnum][p2 : tnum]
   (_power2 (byte2bit (minus four offset)) p2) and
   (_power2 (byte2bit (pred (minus four offset))) p1) and
   _modulo mem_val p1 mp_right and
   _divide mem_val p2 mp_left and
   eqn new_val (plus (plus (times mp_left p2) (times reg_val p1)) mp_right).

% This definition is used for manufucturing the value to be stored
% into a memory location by the store kind of instructions.
make_stored_value : tmem -> tnum -> tnum -> tnum -> tnum -> tnum -> tform =
 [m : tmem][address : tnum][offset : tnum]
 [size : tnum][reg_val : tnum][new_val : tnum]
  _exs_n2 [mem_val : tnum][rval : tnum]
   (eqn mem_val (get_mem m address)) and
   (_bits zero (pred (byte2bit size)) rval reg_val) and
   ((eqn size four and mk_stored_value_word rval new_val) or
    (eqn size two  and mk_stored_value_half mem_val rval offset new_val) or
    (eqn size one  and mk_stored_value_byte mem_val rval offset new_val)).

% Operators for logical/Arithmetic operations.
alu_fun = tnum -> tnum -> tnum -> tform.

app_alu = app3 num num num form.
app_alu2 = app2 num num form.

% Logical
bitwise : (tform -> tform -> tform)-> alu_fun =
 [f : tform -> tform -> tform][x : tnum][y : tnum][z : tnum]
   _is_word z and
   _frl_n [i : tnum] (_bits i i one z)
        equiv ( _inrange2 zero (const 32) i and
                _@2 form form form (_lam2 form form form f)
                                 (_bits i i one x) (_bits i i one y)).

and_oper  : alu_fun = bitwise [x : tform][y : tform] x and y.
andn_oper : alu_fun = bitwise [x : tform][y : tform] x and not y.
or_oper   : alu_fun = bitwise [x : tform][y : tform] x or y.
orn_oper  : alu_fun = bitwise [x : tform][y : tform] x or not y.
xor_oper  : alu_fun = bitwise [x : tform][y : tform] x equiv not y.
xnor_oper : alu_fun = bitwise [x : tform][y : tform] x equiv y.

bits_0_31 : tnum -> tnum -> tform = _rbits 0 31.
get_lsb5  : tnum -> tnum -> tform = _rbits 0 4.

% Shift Left logical
shift_ll_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
 _exs_n2 [lsb5 : tnum][s : tnum]
  (get_lsb5 lsb5 y) and (_power2 lsb5 s) and (bits_0_31 z (times x s)).

% Shift right logical
shift_rl_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
 _exs_n [lsb5 : tnum] (get_lsb5 lsb5 y) and (_bits lsb5 (const 31) z x).

% Shift right arithmetic
shift_ra_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
 _exs_n2 [r : tnum][lsb5 : tnum]
  (shift_rl_oper x y r) and (get_lsb5 lsb5 y) and
  (sign_ext (minus (const 31) lsb5) r z).

% Negate in two's complement
neg_2s_comp = [c : tnum][x : tnum][y : tnum]
  if (eqn x zero) (eqn y zero) (eqn y (minus c x)).

neg_2s_comp_16 : tnum -> tnum -> tform = neg_2s_comp pow2_16.
neg_2s_comp_32 : tnum -> tnum -> tform = neg_2s_comp pow2_32.
neg_2s_comp_64 : tnum -> tnum -> tform = neg_2s_comp pow2_64.

% Arith plus
% commented out since it overlaps with _plus_mod32
% plus_mod32_oper = [x : tnum][y : tnum][z : tnum] bits_0_31 z (plus x y).

% Arith minus
% commented out since it overlaps with _minus_mod32
% minus_mod32_oper : alu_fun = [x : tnum][y : tnum][z : tnum]
%  _exs_n [negy : tnum] neg_2s_comp_32 y negy and bits_0_31 z (plus x negy).

% Floating point types
o_flt32 : tp = num.
o_flt64 : tp = pair o_flt32 o_flt32.
o_flt128 : tp = pair o_flt64 o_flt64.

flt32  : type = tm o_flt32.
flt64  : type = tm o_flt64.
flt128 : type = tm o_flt128.

mk_float64  = _mktuple2 num num.
mk_float128 = _mktuple4 num num num num.

% Convert ints to floats
int32->float32  : tnum -> flt32  -> tform.
int32->float64  : tnum -> flt64  -> tform.
int32->float128 : tnum -> flt128 -> tform.

% Convert floats to ints
float32->int32  : flt32 -> tnum -> tform.
float64->int32  : flt64 -> tnum -> tform.
float128->int32 : flt128 -> tnum -> tform.

% Convert floats to floats
float32->float64  : flt32 -> flt64 -> tform.
float32->float128 : flt32 -> flt128 -> tform.
float64->float32  : flt64 -> flt32 -> tform.
float64->float128 : flt64 -> flt128 -> tform.
float128->float32 : flt128 -> flt32 -> tform.
float128->float64 : flt128 -> flt64 -> tform.

% Floating point negate
float32_neg : flt32 -> flt32 -> tform.
float64_neg : flt64 -> flt64 -> tform.

% Floating point absolute value
float32_abs : flt32 -> flt32 -> tform.
float64_abs : flt64 -> flt64 -> tform.

% Floating point square root
float32_sqrt  : flt32 -> flt32 -> tform.
float64_sqrt  : flt64 -> flt64 -> tform.
float128_sqrt : flt128 -> flt128 -> tform.

% Floating point bin operators
float32_oper_type  : type = flt32 -> flt32 -> flt32 -> tform.
float64_oper_type  : type = flt64 -> flt64 -> flt64 -> tform.
float128_oper_type : type = flt128 -> flt128 -> flt128 -> tform.

% Floating point add, and subtract
float32_add  : float32_oper_type.
float64_add  : float64_oper_type.
float128_add : float128_oper_type.

float32_sub  : float32_oper_type.
float64_sub  : float64_oper_type.
float128_sub : float128_oper_type.

% Floating point multiply, and divide
float32_mul  : float32_oper_type.
float64_mul  : float64_oper_type.
float128_mul : float128_oper_type.

float32->64_mul  : flt32 -> flt32 -> flt64 -> tform.
float64->128_mul : flt64 -> flt64 -> flt128 -> tform.

float32_div  : float32_oper_type.
float64_div  : float64_oper_type.
float128_div : float128_oper_type.

% Ordering relations
float32_eq : flt32 -> flt32 -> tform.
float32_gt : flt32 -> flt32 -> tform.
float32_lt : flt32 -> flt32 -> tform.
float32_uo : flt32 -> flt32 -> tform.

float64_eq : flt64 -> flt64 -> tform.
float64_gt : flt64 -> flt64 -> tform.
float64_lt : flt64 -> flt64 -> tform.
float64_uo : flt64 -> flt64 -> tform.

float128_eq : flt128 -> flt128 -> tform.
float128_gt : flt128 -> flt128 -> tform.
float128_lt : flt128 -> flt128 -> tform.
float128_uo : flt128 -> flt128 -> tform.

app_upd_t = [T : tp] app6 registers num T registers memory memory form.

% Perform a unary floating point operation
float_unary_op =
 [T1 : tp][fs2c : tnum -> tform][getf : tregs -> tnum -> tm T1]
 [T2 : tp][upd  : tregs -> tnum -> tm T2 -> tregs -> tmem -> tmem -> tform]
 [f  : tm T1 -> tm T2 -> tform][fs2 : tnum][fd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  (app1_pred fs2c fs2) and
  (_exists T2 [v : tm T2] (app2 T1 T2 form f (app_get_t T1 getf r fs2) v) and
                          (app_upd_t T2 upd r fd v r' m m')).

% Perform a binary floating point operation
float_binary_op =
 [T1 : tp][fsc : tnum -> tform][getf : tregs -> tnum -> tm T1]
 [T2 : tp][upd : tregs -> tnum -> tm T2 -> tregs -> tmem -> tmem -> tform]
 [f : tm T1 -> tm T1 -> tm T2 -> tform][fs1 : tnum][fs2 : tnum][fd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (app1_pred fsc fs1) and (fsc fs2) and
   (_exists T2 [v : tm T2]
    (app3 T1 T1 T2 form f (app_get_t T1 getf r fs1)
                          (app_get_t T1 getf r fs2) v) and
   (app_upd_t T2 upd r fd v r' m m')).


pi_typ = tnum -> tform.
f_typ = [T : tp] tm T -> tnum -> tform.

&&n : pi_typ -> pi_typ -> pi_typ = _&& num. %infix right 5 &&n.

fld0 = [T : tp][p_pi : pi_typ][icons : tm T][ins : tm T][word : tnum]
 app1_pred p_pi word and _eq T ins icons.

fld1 = [T : tp][T1 : tp][f0 : f_typ T1][p_pi : pi_typ]
          [icons : tm T1 -> tm T][ins : tm T][word : tnum]
    _exists T1 [g : tm T1] (f0 g &&n fld0 T p_pi (icons g) ins) word.

fld2 = [T : tp][T1 : tp][T2 : tp]
  [f0 : f_typ T1][f1 : f_typ T2][p_pi : pi_typ]
  [icons : tm T1 -> tm T2 -> tm T][ins : tm T][word : tnum]
   _exists T1 [g : tm T1] (f0 g &&n fld1 T T2 f1 p_pi (icons g) ins) word.

fld3 = [T : tp][T1 : tp][T2 : tp][T3 : tp]
  [f0 : f_typ T1][f1 : f_typ T2][f2 : f_typ T3][p_pi : pi_typ]
  [icons : tm T1 -> tm T2 -> tm T3 -> tm T][ins : tm T][word : tnum]
    _exists T1  [g : tm T1] 
     (f0 g &&n fld2 T T2 T3 f1 f2 p_pi (icons g) ins) word.

fld4 = [T : tp][T1 : tp][T2 : tp][T3 : tp][T4 : tp]
  [f0 : f_typ T1][f1 : f_typ T2][f2 : f_typ T3][f3 : f_typ T4][p_pi : pi_typ]
  [icons : tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T][ins : tm T][word : tnum]
    _exists T1  [g : tm T1] 
     (f0 g &&n fld3 T T2 T3 T4 f1 f2 f3 p_pi (icons g) ins) word.

fld0i = fld0 instr.
fld1i = fld1 instr.
fld2i = fld2 instr.
fld3i = fld3 instr.
fld4i = fld4 instr.

field_typ = tnum -> tnum -> tform.
pat_typ = tnum -> tform.
%abbrev fldapp = [f : field_typ][v : rep_type] f (const v).

||2n = _||2 instr num. %infix right 4 ||2n.
% Copyright (c) 2004 Princeton University
%	$Id: float_axioms.elf,v 1.4 2004/04/22 10:49:17 appel Exp $


% The floating point axioms for the sparc V8 machine.

float32_range : flt32 -> tform =
 [v : flt32] (geq v zero and leq v (const 4294967295)).

float64_range : flt64 -> tform =
 [vp : flt64] float32_range (_get1of2 o_flt32 o_flt32 vp) and
              float32_range (_get2of2 o_flt32 o_flt32 vp).

float128_range : flt128 -> tform =
 [vpp : flt128] float64_range (_get1of2 o_flt64 o_flt64 vpp) and
                float64_range (_get2of2 o_flt64 o_flt64 vpp).

float_unary_prop : {T1 : tp}{T2 : tp} (tm T2 -> tform)
                    -> (tm T1 -> tm T2 -> tform) -> tform =
 [T1 : tp][T2 : tp][range : tm T2 -> tform][f : tm T1 -> tm T2 -> tform]
 _forall T1 [x : tm T1]
  (_exists T2 [y : tm T2] f x y) and
  (_forall2 T2 T2 [y : tm T2][y' : tm T2] f x y and f x y' imp _eq T2 y y') and
  (_forall T2 [y : tm T2] f x y imp range y).

float_unary_prop_32 : {T : tp} (tm T -> flt32 -> tform) -> tform =
 [T : tp] float_unary_prop T o_flt32  float32_range.
float_unary_prop_64 : {T : tp} (tm T -> flt64 -> tform) -> tform =
 [T : tp] float_unary_prop T o_flt64  float64_range.
float_unary_prop_128 : {T : tp} (tm T -> flt128 -> tform) -> tform =
 [T : tp] float_unary_prop T o_flt128 float128_range.

% Convert ints to floats axioms
int32->float32_axiom  : pf (float_unary_prop_32  num int32->float32).
int32->float64_axiom  : pf (float_unary_prop_64  num int32->float64).
int32->float128_axiom : pf (float_unary_prop_128 num int32->float128).

% Convert floats to ints
float32->int32_axiom  : pf (float_unary_prop_32 o_flt32  float32->int32).
float64->int32_axiom  : pf (float_unary_prop_32 o_flt64  float64->int32).
float128->int32_axiom : pf (float_unary_prop_32 o_flt128 float128->int32).

% Convert floats to floats
float32->float64_axiom  : pf (float_unary_prop_64  o_flt32  float32->float64).
float32->float128_axiom : pf (float_unary_prop_128 o_flt32  float32->float128).
float64->float32_axiom  : pf (float_unary_prop_32  o_flt64  float64->float32).
float64->float128_axiom : pf (float_unary_prop_128 o_flt64  float64->float128).
float128->float32_axiom : pf (float_unary_prop_32  o_flt128 float128->float32).
float128->float64_axiom : pf (float_unary_prop_64  o_flt128 float128->float64).

% Negate axiom
float32_neg_axiom : pf (float_unary_prop_32 o_flt32 float32_neg).
float64_neg_axiom : pf (float_unary_prop_64 o_flt64 float64_neg).

% Absolute value axiom
float32_abs_axiom : pf (float_unary_prop_32 o_flt32 float32_abs).
float64_abs_axiom : pf (float_unary_prop_64 o_flt64 float64_abs).

% Floating point square root
float32_sqrt_axiom  : pf (float_unary_prop_32  o_flt32  float32_sqrt).
float64_sqrt_axiom  : pf (float_unary_prop_64  o_flt64  float64_sqrt).
float128_sqrt_axiom : pf (float_unary_prop_128 o_flt128 float128_sqrt).

% Floating point bin operators

float_binary_prop : {T1 : tp} {T2 : tp}{T3 : tp}
         (tm T3 -> tform) -> (tm T1 -> tm T2 -> tm T3 -> tform) -> tform =
 [T1 : tp][T2 : tp][T3 : tp]
 [range : tm T3 -> tform][f : tm T1 -> tm T2 -> tm T3 -> tform]
  _forall2 T1 T2 [x1 : tm T1][x2 : tm T2]
   (_exists T3 [y : tm T3] f x1 x2 y) and
   (_forall2 T3 T3 [y : tm T3][y' : tm T3] (f x1 x2 y) and (f x1 x2 y')
                                           imp _eq T3 y y') and
   (_forall T3 [y : tm T3] (f x1 x2 y) imp (range y)).

float_binary_prop_32 :
 {T1:tp} {T2:tp} (tm T1 -> tm T2 -> tm o_flt32 -> tform) -> tform =
 [T1 : tp][T2 : tp] float_binary_prop T1 T2 o_flt32 float32_range.

float_binary_prop_64 :
 {T1:tp} {T2:tp} (tm T1 -> tm T2 -> tm o_flt64 -> tform) -> tform =
 [T1 : tp][T2 : tp] float_binary_prop T1 T2 o_flt64 float64_range.

float_binary_prop_128 :
 {T1:tp} {T2:tp}(tm T1 -> tm T2 -> tm o_flt128 -> tform) -> tform =
 [T1 : tp][T2 : tp] float_binary_prop T1 T2 o_flt128 float128_range.

% Floating point add and subtract axioms
float32_add_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_add).
float64_add_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_add).
float128_add_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_add).

float32_sub_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_sub).
float64_sub_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_sub).
float128_sub_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_sub).

% Floating point multiply, and divide axioms
float32_mul_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_mul).
float64_mul_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_mul).
float128_mul_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_mul).

float32->64_axiom  : pf (float_binary_prop_64 o_flt32 o_flt32 float32->64_mul).
float64->128_axiom: pf(float_binary_prop_128 o_flt64 o_flt64 float64->128_mul).

float32_div_axiom  : pf (float_binary_prop_32  o_flt32  o_flt32  float32_div).
float64_div_axiom  : pf (float_binary_prop_64  o_flt64  o_flt64  float64_div).
float128_div_axiom : pf (float_binary_prop_128 o_flt128 o_flt128 float128_div).

% Ordering axiom
cmptyp : tp -> type = [T : tp] tm T -> tm T -> tform.

float*_order : {T : tp} cmptyp T -> cmptyp T -> cmptyp T -> cmptyp T -> tform =
 [T : tp][eq : cmptyp T][gt : cmptyp T][lt : cmptyp T][uo : cmptyp T]
  _forall2 T T [x : tm T][y : tm T]
   (eq x y) xor (gt x y) xor (lt x y) xor (uo x y).

float32_order_axiom : pf (float*_order o_flt32
                            float32_eq float32_gt float32_lt float32_uo).

float64_order_axiom : pf (float*_order o_flt64
                            float64_eq float64_gt float64_lt float64_uo).

float128_order_axiom : pf (float*_order o_flt128
                             float128_eq float128_gt float128_lt float128_uo).
% Copyright (c) 2004 Princeton University
%	$Id: oper_types.elf,v 1.4 2004/04/22 10:49:20 appel Exp $


regaddr : tp = registers arrow num arrow form.

address_ : tp = registers arrow num arrow form.

reg_or_imm : tp = registers arrow num arrow form.

% Copyright (c) 2004 Princeton University
%	$Id: oper_injectors.elf,v 1.4 2004/04/22 10:49:20 appel Exp $


app_constr : tm reg_or_imm -> tregs -> tnum -> tform = _@2 registers num form.

inj_imode : tnum -> tm reg_or_imm = 
 [n : tnum] _lam2 registers num form
             [r : tregs][x : tnum] sign_ext (const 12) n x.

inj_rmode : tnum -> tm reg_or_imm =
 [i : tnum] _lam2 registers num form
             [r : tregs][x : tnum] eqn (get_reg r i) x.

inj_generalA : tnum -> tm reg_or_imm -> tm address_ =
  [rs1 : tnum][reg_imm : tm reg_or_imm]
    _lam2 registers num form [r : tregs][x : tnum]
     _exs_n [y : tnum] app_constr reg_imm r y and
                       _plus_mod32 (get_reg r rs1) y x.

inj_indexR : tnum -> tnum -> tm regaddr =
 [rs1 : tnum][rs2 : tnum]
  _lam2 registers num form [r : tregs][x : tnum]
    _plus_mod32 (get_reg r rs1) (get_reg r rs2) x.
% Copyright (c) 2004 Princeton University
%	$Id: instr_sem.elf,v 1.70 2004/06/01 21:38:09 gtan Exp $

% Instruction Semantics for the sparc V8 machine.

% We use numbers >= 32 to hold non-numbered machine registers.
pc    : tnum = const 32.     % The program counter
npc   : tnum = const 33.     % The next program counter
icc   : tnum = const 34.     % The 4 bit condition code register
fcc   : tnum = const 35.     % The 2 bit condition code register (floating)
y_reg : tnum = const 36.     % The Y register used for integer multiplication
icnt  : tnum = const 37.     % The number of instructions executed
                                 % this includes the current instruction
last_cbr    : tnum = const 38.   % The last time a cbr instr was executed
last_cmpfcc : tnum = const 39.   % The last time a cmpfcc instr was executed
last_wry    : tnum = const 40.   % The last time a wry instr was executed
opc         : tnum = const 41.   % The old pc i.e. the pc of the instr we are
                                 % currently executing
flt_offset : tnum = const 128. % Offset at which floating-point registers begin

% Compute the offset into the reg bank of floating point register "reg"
flt_num : tnum -> tnum = [reg : tnum] plus flt_offset reg.

% Get integer register.
get_ireg : tregs -> tnum -> tnum = get_reg.

% Get floating point register.
get_freg = [r : tregs][fd : tnum] get_reg r (flt_num fd).

set_from_icnt : tnum -> tregs -> tregs -> tform =
 [reg : tnum][r : tregs][r' : tregs] updn r reg (get_ireg r icnt) r'.

set_cbr    : tregs -> tregs -> tform = set_from_icnt last_cbr.
set_cmpfcc : tregs -> tregs -> tform = set_from_icnt last_cmpfcc.
set_wry    : tregs -> tregs -> tform = set_from_icnt last_wry.

cbr_in_progress? : tregs -> tform =
 [r : tregs] eqn (get_ireg r icnt) (succ (get_ireg r last_cbr)).
cmpfcc_in_progress? : tregs -> tform =
 [r : tregs] eqn (get_ireg r icnt) (succ (get_ireg r last_cmpfcc)).
wry_in_progress? : tregs -> tform =
 [r : tregs] lt (get_ireg r icnt) (plus (get_ireg r last_wry) four).

word_size   : tnum = four.    % The word size of the machine
word_bits   : tnum = pow2_32. % The word size in bits.
double_size : tnum = eight.   % The alignment of a double word
instr_size  : tnum = four.    % The instruction size

% The bit to look at to establish if the number is negative
sign_bit : rep_type = 31.
sign_bit? : tnum -> tnum -> tform = _rbits sign_bit sign_bit.

% The predicates that decides negativity, positiveness and nulity
negative? : tnum -> tform = sign_bit? one.
positive? : tnum -> tform = sign_bit? zero.
zero?     : tnum -> tform = [x : tnum] eqn x zero.

% Bit locations of the icc fields in the cc word
icc_n_bit : tnum = three.
icc_z_bit : tnum = two.
icc_v_bit : tnum = one.
icc_c_bit : tnum = zero.

% The bits below indicate the status of the 32-bit ALU result
% of the last instruction that modified the icc field
icc_n? : tnum -> tnum -> tform = _bits icc_n_bit icc_n_bit.
icc_z? : tnum -> tnum -> tform = _bits icc_z_bit icc_z_bit.
icc_v? : tnum -> tnum -> tform = _bits icc_v_bit icc_v_bit.
icc_c? : tnum -> tnum -> tform = _bits icc_c_bit icc_c_bit.

% Result was negative (1 = negative, 0 = non negative)
icc_n : tnum -> tform = icc_n? one.

% Result was zero (1 = zero, 0 = nonzero)
icc_z : tnum -> tform = icc_z? one.

% Result was out of range (overflow) (1 = overflow, 0 = no overflow)
icc_v : tnum -> tform = icc_v? one.

% This bit indicates whether a carry out or borrow occurred.  Carry is
% set on addition if there is a carry out of bit 31.  Carry is set on
% subtraction if there is a borrow into bit 31. (1 = carry, 0 = no carry)
icc_c : tnum -> tform = icc_c? one.

% Floating point condition codes (field of the fcc register)
fcc? : tnum -> tnum -> tform = _eq num.

% Equal (freg_rs1 = freg_rs2)
fcc_e : tnum -> tform = fcc? zero.

% Greater (freg_rs1 > freg_rs2)
fcc_g : tnum -> tform = fcc? two.

% Less (freg_rs1 < freg_rs2)
fcc_l : tnum -> tform = fcc? one.

% Unordered (freg_rs1 ? freg_rs2)
fcc_u : tnum -> tform = fcc? three.

% Update the icc register
upd_icc : tregs -> tnum -> tregs -> tform =
 [r : tregs][v : tnum][r' : tregs] updn r icc v r'.

% Set the fcc register
upd_fcc : tregs -> tnum -> tregs -> tform =
 [r : tregs][v : tnum][r' : tregs] updn r fcc v r'.

% Update a sparc machine integer reg (when target is zero do nothing).
upd_ireg = [r : tregs][rd : tnum][v : tnum][r' : tregs]
  updn2 r zero (get_reg r zero) rd v r'.

% Same as above for two registers.
upd_ireg2 = [r: tregs][rd1: tnum][v1: tnum][rd2: tnum][v2: tnum][r': tregs]
  updn3 r zero (get_reg r zero) rd1 v1 rd2 v2 r'.

% Update one sparc machine floating point register.
upd_freg = [r : tregs][fd : tnum][v : tnum][r' : tregs]
 updn r (flt_num fd) v r'.

% Update two sparc machine floating point registers.
upd_freg2 = [r: tregs][fd1: tnum][v1: tnum][fd2: tnum][v2: tnum][r': tregs]
 updn2 r (flt_num fd1) v1 (flt_num fd2) v2 r'.

% Update four sparc machine floating point registers.
upd_freg4 = [r : tregs][fd1 : tnum][v1 : tnum][fd2 : tnum][v2 : tnum]
            [fd3 : tnum][v3 : tnum][fd4 : tnum][v4 : tnum][r' : tregs]
 _exs_r [r'' : tregs] (updn2 r (flt_num fd1) v1 (flt_num fd2) v2 r'') and
                      (updn2 r'' (flt_num fd3) v3 (flt_num fd4) v4 r').

% This definition is true if the input argument "v" is indeed the value
% that is represented by "reg_imm" in the given register set.
load_reg_imm : tregs -> tm reg_or_imm -> tnum -> tform =
 [r : tregs][reg_imm : tm reg_or_imm][v : tnum] app_constr reg_imm r v.

% This definition is true if the input value "v" is indeed the result
% of the load generalA operation (see the syntax definition for sparc).
load_generalA : tregs -> tnum -> tm reg_or_imm -> tnum -> tform =
 [r : tregs][rs1 : tnum][reg_imm : tm reg_or_imm][v : tnum]
  _exs_n [v_reg_imm : tnum] load_reg_imm r reg_imm v_reg_imm and
                            _plus_mod32 (get_ireg r rs1) v_reg_imm v.

% This definition is true if the "address_" given is equal to the num
% supplied in the input variable "v".  It uses the definition of
% "generalA" defined above.  It also makes sure that the address is
% appropriately aligned.
load_address_align : tregs -> tm address_ -> tnum -> tnum -> tnum -> tform =
 [r : tregs][addr : tm address_][address : tnum][offset : tnum][size : tnum]
  _exs_n [v' : tnum] app_constr addr r v' and
                     form_address v' one address offset size.

load_address_align_aux =
 [read/write-able : tregs -> tmem -> tnum -> tform]
 [r : tregs][m : tmem][addr : tm address_]
 [address : tnum][offset : tnum][size : tnum]
  load_address_align r addr address offset size and
  _@3 registers memory num form 
    (_lam3 registers memory num form read/write-able) r m address.

% This definition computes the address we are trying to load from,
% makes sure that this address is readable and that it is
% appropriately aligned.
load_address_read_align = load_address_align_aux _readable.

% This definition computes the address we are trying to write to
% makes sure that this address is writable and that it is
% appropriately aligned.
load_address_write_align = load_address_align_aux _writable.

% Loadg
loadg_typ = tm address_ -> tnum -> tm instr.

% The load instruction family.
i_loadg : tform -> tnum -> updn_typ -> loadg_typ =
 [signed : tform][size : tnum][upd : updn_typ] [addr : tm address_][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [address : tnum][offset : tnum][value : tnum]
     (load_address_read_align r m addr address offset size) and
     (fetch_value m address offset signed size value) and
     (app_upd upd r rd value r')) and
    (_eq_mem m m').
                                        % Load Signed Byte
i_LDSB : tm address_ -> tnum -> tm instr = i_loadg true  (const 1) upd_ireg.
                                        % Load Signed Halfword
i_LDSH : tm address_ -> tnum -> tm instr = i_loadg true  (const 2) upd_ireg.
                                        % Load Unsigned Byte
i_LDUB : tm address_ -> tnum -> tm instr = i_loadg false (const 1) upd_ireg.
                                        % Load Unsigned Halfword
i_LDUH : tm address_ -> tnum -> tm instr = i_loadg false (const 2) upd_ireg.
                                        % Load Word
i_LD   : tm address_ -> tnum -> tm instr = i_loadg false (const 4) upd_ireg.

i_LDSTUB : tm address_ -> tnum -> tm instr =  % Atomic Load-Store Unsigned Byte
 [addr : tm address_][rd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exs_n3 [address : tnum][offset : tnum][value : tnum]
    _exs_n [value' : tnum]
    (load_address_read_align r m addr address offset one) and
    (fetch_value m address offset false one value) and
    (_writable r m address) and
    (make_stored_value m address offset one (const 255) value') and
    (upd_ireg r rd value r') and (updn m address value' m')).

i_SWAP_DOT : tm address_ -> tnum -> tm instr =  % Swap r Register with Memory
 [addr : tm address_][rd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exs_n3 [address : tnum][offset : tnum][value : tnum]
    (load_address_read_align r m addr address offset word_size) and
    (fetch_value m address offset false word_size value) and
    (_writable r m address) and
    (upd_ireg r rd value r') and (updn m address (get_ireg r rd) m')).

ldd_aux : updn2_typ -> tm address_ -> tnum -> tm instr =
 [upd : updn2_typ][addr : tm address_][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (even? rd) and
    (_exs_n3 [address : tnum][address' : tnum][offset : tnum]
     _exs_n3 [offset' : tnum][v1 : tnum][v2 : tnum]
     (load_address_read_align r m addr address offset double_size) and
     (fetch_value m address offset false word_size v1) and
     (_plus_mod32 address word_size address') and
     (_readable r m address') and
     (fetch_value m address' offset' false word_size v2) and
     (app_upd2 upd r rd v1 (plus rd one) v2 r')) and
    (_eq_mem m m').
                                               % Load Doubleword
i_LDD : tm address_ -> tnum -> tm instr = ldd_aux upd_ireg2.
                                               % Load Floating-point
i_LDF : tm address_ -> tnum -> tm instr = i_loadg false four upd_freg.
                                               % Load Double Floating-point
i_LDDF : tm address_ -> tnum -> tm instr = ldd_aux upd_freg2.

i_LDC  : tm address_ -> tnum -> tm instr.      % Load Coprocessor
i_LDDC : tm address_ -> tnum -> tm instr.      % Load Double Coprocessor

% Storeg
storeg_typ = tnum -> tm address_ -> tm instr.

% The store instruction family.
i_storeg =
 [size : tnum][get : tregs -> tnum -> tnum][rd : tnum][addr : tm address_]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [address : tnum][offset : tnum][value : tnum]
     (load_address_write_align r m addr address offset size) and
     (make_stored_value m address offset size (app_get get r rd) value) and
     (updn m address value m')) and
    (_eq_regs r r').
                                              % Store Byte
i_STB : tnum -> tm address_ -> tm instr = i_storeg one  get_ireg.
                                              % Store Halfword
i_STH : tnum -> tm address_ -> tm instr = i_storeg two  get_ireg.
                                              % Store Word
i_ST  : tnum -> tm address_ -> tm instr = i_storeg four get_ireg.

std_aux =
 [get : tregs -> tnum -> tnum][rd : tnum][addr : tm address_]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (even? rd) and
    (_exs_n3 [address : tnum][address' : tnum][offset : tnum]
     (load_address_write_align r m addr address offset double_size) and
     (eqn address'(plus address word_size)) and
     (_writable r m address') and
     (updn2 m address  (app_get get r rd)
              address' (app_get get r (plus rd one)) m')) and
    (_eq_regs r r').

i_STD : storeg_typ = std_aux get_ireg.          % Store Doubleword
                                                % Store Floating-point
i_STF : tnum -> tm address_ -> tm instr = i_storeg four get_freg.
                                                % Store Double Floating-point
i_STDF : tnum -> tm address_ -> tm instr = std_aux get_freg.

i_STC : tnum -> tm address_ -> tm instr.        % Store Coprocessor
i_STDC : tnum -> tm address_ -> tm instr.       % Store Double Coprocessor

loada_typ = tm regaddr -> tnum -> tnum -> tm instr.

i_loada : tnum -> tform -> loada_typ.

% Here FAS = From Alternative Space.
i_LDSBA : loada_typ = i_loada one true.         % Load Signed Byte FAS
i_LDSHA : loada_typ = i_loada two true.         % Load Signed Halfword FAS
i_LDUBA : loada_typ = i_loada one false.        % Load Unsigned Byte FAS
i_LDUHA : loada_typ = i_loada two false.        % Load Unsigned Halfword FAS
i_LDA   : loada_typ = i_loada word_size false.  % Load Word FAS
i_LDSTUBA : loada_typ.                 % Atomic Load-Store Unsigned Byte FAS

i_SWAPA : loada_typ.                   % Swap r Register with Memory FAS

i_LDDA : loada_typ.                    % Load Double Word FAS

storea_typ = tnum -> tm regaddr -> tnum -> tm instr.

i_storea : tnum -> storea_typ.

% Here IAS = Into Alternative Space.
i_STBA : storea_typ = i_storea (const 1).          % Store Byte IAS
i_STHA : storea_typ = i_storea (const 2).          % Store Halfword IAS
i_STA  : storea_typ = i_storea word_size.          % Store Word IAS

i_STDA : storea_typ.                               % Store Doubleword IAS

i_LDFSR : loadg_typ.         % Load Floating-point State Register
i_LDCSR : loadg_typ.         % Load Coprocessor State Register
i_STFSR : storeg_typ.        % Store Floating-point State Register
i_STCSR : storeg_typ.        % Store Coprocessor State Register
i_STDFQ : storeg_typ.        % Store Double Floating-point
                                    % deferred-trap Queue (**)
i_STDCQ : storeg_typ.        % Store Double Coprocessor
                                    % deferred-trap Queue (**)
i_RDY =                      % Read Y Register
  [rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (not (wry_in_progress? r)) and
    (upd_ireg r rd (get_ireg r y_reg) r') and (_eq_mem m m').

rd_instr_typ = tnum -> tm instr.

i_RDPSR : rd_instr_typ.         % Read Processor State Register (**)
i_RDWIM : rd_instr_typ.         % Read Window Invalid Mask Register (**)
i_RDTBR : rd_instr_typ.         % Read Trap Base Register (**)

i_WRY : tnum -> tm reg_or_imm -> tm instr =          % Write Y Register
 [rs1 : tnum][reg_imm : tm reg_or_imm]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exists3 num num registers [v : tnum][xor_v : tnum][r'' : tregs]
    (load_reg_imm r reg_imm v) and (xor_oper (get_ireg r rs1) v xor_v) and
    (upd_ireg r y_reg xor_v r'') and (set_wry r'' r')) and
   (_eq_mem m m').

rs1_reg_imm_typ : type = tnum -> tm reg_or_imm -> tm instr.

i_WRPSR : rs1_reg_imm_typ.      % Write PSR (**)
i_WRWIM : rs1_reg_imm_typ.      % Write Window Invalid Mask Reg (**)
i_WRTBR : rs1_reg_imm_typ.      % Write Trap Base Register (**)
i_RDASR : tnum -> tnum -> tm instr. % Read Ancillary State Register (***)

i_WRASR : tnum -> tm reg_or_imm -> tnum -> tm instr. % Write ASR (***)
i_STBAR : tm instr.                % Store Barrier

alu_typ = tnum -> tm reg_or_imm -> tnum -> tm instr.

% This definition computes the result of an alu operation based on
% whether or not a carry forward was specified.
compute_with_carry =
 [x : tform][func : alu_fun][r : tregs][rs1 : tnum][v : tnum][v' : tnum]
  if x (_exs_n2 [d : tnum][ires : tnum]
        (icc_c? d (get_ireg r icc)) and
        (app_alu func (get_ireg r rs1) v ires) and (app_alu func ires d v'))
       (func (get_ireg r rs1) v v').

% A condition-code function takes two operands and the result, and
% decides whether the corresponding cc should be set or not.
cc_fun = tnum -> tnum -> tnum -> tform.

% the cc_fun to set the cc to zero
%abbrev
cc_zero : cc_fun = [_ : tnum][_ : tnum][_ : tnum] false.

% The following predicates compute V and C condition codes for add instruction.
add_overflow : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  _exs_n3 [b1 : tnum][b2 : tnum][b3 : tnum]
   sign_bit? b1 w1 and sign_bit? b2 w2 and sign_bit? b3 res and
   eqn b1 b2 and not (eqn b1 b3).

add_carry : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  negative? w1 and negative? w2 or
  positive? res and (negative? w1 or negative? w2).

% The following predicates compute V and C condition codes for sub instruction.
sub_overflow : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  _exs_n3 [b1 : tnum][b2 : tnum][b3 : tnum]
   sign_bit? b1 w1 and sign_bit? b2 w2 and sign_bit? b3 res and
   not (eqn b1 b2) and not (eqn b1 b3).

sub_carry : cc_fun =
 [w1 : tnum][w2 : tnum][res : tnum]
  positive? w1 and negative? w2 or
  negative? res and (positive? w1 or negative? w2).

% Here the processor state register is updated after an alu instruction.
compute_new_icc : tnum -> tnum -> tnum -> cc_fun -> cc_fun -> tnum -> tform =
[w1 : tnum][w2 : tnum][res : tnum][v_fun : cc_fun][c_fun : cc_fun][vcc' : tnum]
 _exs_n3 [n : tnum][z : tnum][v : tnum] _exs_n [c : tnum]
  (if (negative? res)           (eqn n eight) (eqn n zero)) and
  (if (zero? res)               (eqn z four)  (eqn z zero)) and
  (if (app_alu v_fun w1 w2 res) (eqn v two)   (eqn v zero)) and
  (if (app_alu c_fun w1 w2 res) (eqn c one)   (eqn c zero)) and
  (eqn vcc' (plus n (plus z (plus v c)))).

% This definition implements the semantics of any alu operation (where
% any is as defined in "sparc/instr_sem.elf").  It relates the machine
% state (r, m) before the instruction occured to the state (r', m') at
% the end of the instruction.
i_aluxcc_aux : cc_fun -> cc_fun -> tform -> tform -> alu_fun -> alu_typ =
 [v_fun : cc_fun][c_fun : cc_fun][x : tform][cc : tform][func : alu_fun]
  [rs1 : tnum][reg_imm : tm reg_or_imm][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [v : tnum][v' : tnum][vcc' : tnum] _exs_r [r'' : tregs]
      (load_reg_imm r reg_imm v) and
      (compute_with_carry x func r rs1 v v') and
      (if cc (compute_new_icc (get_ireg r rs1) v v' v_fun c_fun vcc' and
              upd_icc r vcc' r'')
	     (_eq_regs r r'')) and
      (upd_ireg r'' rd v' r')) and
    (_eq_mem m m').

i_aluxcc : tform -> tform -> alu_fun -> alu_typ = i_aluxcc_aux cc_zero cc_zero.
i_aluxcc_x : tform -> alu_fun -> alu_typ = i_aluxcc true.
i_aluxcc_no_x : tform -> alu_fun -> alu_typ = i_aluxcc false.

mul_unsigned32->64 : tnum -> tnum -> tnum -> tform =
 [v1 : tnum][v2 : tnum][w : tnum] eqn w (times v1 v2).

mul_signed32->64 : tnum -> tnum -> tnum -> tform =
 [v1 : tnum][v2 : tnum][w : tnum]
  (_exs_n3 [s1 : tnum][s2 : tnum][v1' : tnum] _exs_n2 [v2' : tnum][res : tnum]
   (sign_bit? s1 v1) and (sign_bit? s2 v2) and
   (if (eqn s1 one) (neg_2s_comp_32 v1 v1') (eqn v1' v1)) and
   (if (eqn s2 one) (neg_2s_comp_32 v2 v2') (eqn v2' v2)) and
   (mul_unsigned32->64 v1' v2' res) and
   (if (not (eqn s1 s2)) (neg_2s_comp_32 res w) (eqn w res))).

i_multiply : tform -> alu_fun -> alu_typ =
 [cc : tform][fun : alu_fun][rs1 : tnum][reg_imm : tm reg_or_imm][rd : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exs_n3 [v1 : tnum][v2 : tnum][res : tnum]
     _exs_n2 [res1 : tnum][res2 : tnum] _exs_r [r'' : tregs]
     (eqn v1 (get_ireg r rs1)) and (load_reg_imm r reg_imm v2) and
     (app_alu fun v1 v2 res) and
     (_rbits 0 31 res1 res) and (_rbits 32 63 res2 res) and
     (if cc (_exs_n2 [n : tnum][z : tnum]
             (if (negative? res1) (eqn n eight) (eqn n zero)) and
             (if (zero? res1) (eqn z four) (eqn z zero)) and
             (upd_icc r (plus n z) r''))
            (_eq_regs r r'')) and
     (upd_ireg2 r'' rd res1 y_reg res2 r')) and
   (_eq_mem m m').

i_multiply_cc : alu_fun -> alu_typ = i_multiply true.
i_multiply_no_cc : alu_fun -> alu_typ = i_multiply false.

div_neg_res_overflow_method : tm form.

div_alu_typ = tnum -> tnum -> tnum -> tnum -> tform.

div_unsigned64->32 : div_alu_typ =
 [x1 : tnum][x2 : tnum][w : tnum][v : tnum]
  (_exs_n2 [quo : tnum][rem : tnum]
   (_divide_mod x1 x2 quo rem) and
   (if ((geq quo pow2_32) and (eqn rem (pred x2)))
       ((eqn v two) and (eqn w (pred pow2_32)))
       (eqn v zero) and (bits_0_31 w quo))).

div_signed64->32 : div_alu_typ =
 [x1 : tnum][x2 : tnum][w : tnum][v : tnum]
  (_exs_n2 [s1 : tnum][s2 : tnum] _exs_n2 [x1' : tnum][x2' : tnum]
   (_exs_n3 [quo : tnum][rem : tnum][quo_pos : tnum]
    _exs_n2 [rem_pos : tnum][quo_2s : tnum]
   (_rbits 63 63 s1 x1) and (sign_bit? s2 x2) and
   (if (eqn s1 one) (neg_2s_comp_64 x1 x1') (eqn x1' x1)) and
   (if (eqn s2 one) (neg_2s_comp_32 x2 x2') (eqn x2' x2)) and
   (_divide_mod x1' x2' quo_pos rem_pos) and
   (if (eqn s1 s2) ((eqn quo quo_pos) and (eqn quo_2s quo_pos))
                  ((eqn quo (neg quo_pos)) and
                   (neg_2s_comp_64 quo quo_2s))) and
   (if (eqn s1 zero) (eqn rem rem_pos)
                    (eqn rem (neg rem_pos))) and
   (if ((geq quo pow2_31) and (eqn rem (pred x2')))
      ((eqn v two) and (eqn w (pred pow2_31)))
      (if (leq quo (neg pow2_31))
        (if ((div_neg_res_overflow_method and (eqn rem (neg (pred x2')))) or
               (not div_neg_res_overflow_method and (eqn rem zero)))
           ((eqn v two) and (eqn w (neg pow2_31)))
           ((eqn v zero) and (bits_0_31 w quo_2s)))
         ((eqn v zero) and (bits_0_31 w quo_2s)))))).

i_divide : tform -> div_alu_typ -> tnum -> tm reg_or_imm -> tnum -> tm instr =
[cc : tform][fun : div_alu_typ][rs1 : tnum][reg_imm : tm reg_or_imm][rd : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (_exs_n3 [v1 : tnum][v2 : tnum][v3 : tnum]
    _exists2 num registers [res : tnum][r'' : tregs]
    _exs_n3 [n : tnum][z : tnum][v : tnum]
    _exs_n  [y: tnum]
     (if (wry_in_progress? r) (_is_word y) (eqn y (get_ireg r y_reg))) and
     (eqn v1 (get_ireg r rs1)) and (load_reg_imm r reg_imm v2) and
     (eqn v3 (plus v1 (times pow2_32 y))) and
     (fun v3 v2 res v) and
     (if cc ((if (negative? res) (eqn n eight) (eqn n zero)) and
             (if (zero? res) (eqn z four) (eqn z zero)) and
             (upd_icc r (plus n (plus z v)) r''))
            (_eq_regs r r'')) and
     (upd_ireg r'' rd res r')) and
   (_eq_mem m m').

i_divide_cc = i_divide true.
i_divide_no_cc = i_divide false.

% Logical
i_AND    = i_aluxcc_no_x false and_oper.  % And
i_ANDcc  = i_aluxcc_no_x true  and_oper.  % And and modify icc
i_ANDN   = i_aluxcc_no_x false andn_oper. % And not
i_ANDNcc = i_aluxcc_no_x true  andn_oper. % And not and modify icc
i_OR     = i_aluxcc_no_x false or_oper.   % Inclusive-Or
i_ORcc   = i_aluxcc_no_x true  or_oper.   % Inclusive-Or and modify icc
i_ORN    = i_aluxcc_no_x false orn_oper.  % Inclusive-Or not
i_ORNcc  = i_aluxcc_no_x true  orn_oper.  % Inclusive-Or not and modify icc
i_XOR    = i_aluxcc_no_x false xor_oper.  % Exclusive-Or
i_XORcc  = i_aluxcc_no_x true  xor_oper.  % Exclusive-Or and modify icc
i_XNOR   = i_aluxcc_no_x false xnor_oper. % Exclusive-NOr
i_XNORcc = i_aluxcc_no_x true  xnor_oper. % Exclusive-NOr and modify icc

% Shift
i_SLL = i_aluxcc_no_x false shift_ll_oper.     % Shift Left Logical
i_SRL = i_aluxcc_no_x false shift_rl_oper.     % Shift Right Logical
i_SRA = i_aluxcc_no_x false shift_ra_oper.     % Shift Right Arithmetic

% Arith
i_ADD     = i_aluxcc_no_x false _plus_mod32.  % Add
                                                  % Add and modify icc
i_ADDcc   = i_aluxcc_aux add_overflow add_carry false true _plus_mod32.
i_ADDX    = i_aluxcc_x false _plus_mod32.     % Add with Carry
                                               % Add with Carry and modify icc
i_ADDXcc  = i_aluxcc_aux add_overflow add_carry true  true _plus_mod32.

i_TADDcc   : alu_typ.            % Tagged Add and modify icc
i_TADDccTV : alu_typ.            % Tagged Add, modify icc and trap on overflow

i_SUB    = i_aluxcc_no_x false _minus_mod32.  % Subtract
                                                  % Subtract and modify icc
i_SUBcc  = i_aluxcc_aux sub_overflow sub_carry false true _minus_mod32.

i_SUBX   = i_aluxcc_x false _minus_mod32.   % Subtract with Carry
                                           % Subtract with Carry and modify icc
i_SUBXcc = i_aluxcc_aux sub_overflow sub_carry true true _minus_mod32.

i_TSUBcc   : alu_typ.           % Tagged Subtract and mod icc
i_TSUBccTV : alu_typ.           % Tagged Subtract, mod icc and trap on overflow

i_MULScc : alu_typ.             % Multiply step and modify icc

i_UMUL    = i_multiply_no_cc mul_unsigned32->64.  % U Int Mult
i_SMUL    = i_multiply_no_cc mul_signed32->64.    % S Int mult
i_UMULcc  = i_multiply_cc    mul_unsigned32->64.  % U Int Mult and w/ icc
i_SMULcc  = i_multiply_cc    mul_signed32->64.    % S Int mult w/ icc
i_UDIV    = i_divide_no_cc   div_unsigned64->32.  % U Int Div
i_SDIV    = i_divide_no_cc   div_signed64->32.    % S Int Div
i_UDIVcc  = i_divide_cc      div_unsigned64->32.  % U Int Div w/ icc
i_SDIVcc  = i_divide_cc      div_signed64->32.    % S Int Div w/ icc

i_SAVE    : alu_typ.                              % Save caller's window
i_RESTORE : alu_typ.                              % Restore caller's window

branch_typ = tnum -> tnum -> tm instr.

comp_btarget : tnum -> tnum -> tnum -> tform =
 [loc : tnum][disp : tnum][target : tnum]
  _exs_n2 [d1 : tnum][d2 : tnum] (sign_ext (const 21) disp d1) and
                                 (_times_mod32 four d1 d2) and
                                 (_plus_mod32 loc d2 target).

annul_instr : tregs -> tregs -> tform =
 [r : tregs][r' : tregs]
 _exists num [new_npc: tm num]
    _plus_mod32 (get_reg r npc) instr_size new_npc and
    updn2 r pc (get_ireg r npc) npc new_npc r'.

annul? : tnum -> tform = [x : tnum] (eqn x one).

branch_aux =
 [init_cond : tregs -> tform][get_cc : tregs -> tnum]
 [ba : tform][comp : tnum -> tform][a : tnum][disp : tnum]
   instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (init_cond r) and
    (_exs_r [r''' : tregs]
     (if (app1_pred comp (get_cc r))
         (_exists2 num registers [target : tnum][r'' : tregs]
           (comp_btarget (get_ireg r opc) disp target) and
           (updn r npc target r'') and
           (if (ba and annul? a) (annul_instr r'' r''')
                                   (_eq_regs r'' r''')))
         (if (annul? a) (annul_instr r r''')
                          (_eq_regs r r'''))) and
     (if ba (_eq_regs r''' r')
            (set_cbr r''' r'))) and
    (_eq_mem m m').

i_init_cond = [r : tregs] not (cbr_in_progress? r).
f_init_cond = [r : tregs] not (cbr_in_progress? r) and
                          not (cmpfcc_in_progress? r).

i_ibranch : tform -> (tnum -> tform) -> branch_typ =
 branch_aux i_init_cond [r : tregs] (get_ireg r icc).

i_fbranch : tform -> (tnum -> tform) -> branch_typ =
 branch_aux f_init_cond [r : tregs] (get_ireg r fcc).

i_cbranch  : (tnum -> tform) -> branch_typ.

cnd_bn   = strictify_num false.
cnd_be   = [vcc : tnum] (icc_z vcc).
cnd_ble  = [vcc : tnum] (icc_z vcc) or ((icc_n vcc) xor (icc_v vcc)).
cnd_bl   = [vcc : tnum] (icc_n vcc) xor (icc_v vcc).
cnd_bleu = [vcc : tnum] (icc_c vcc) or (icc_z vcc).
cnd_bcs  = [vcc : tnum] (icc_c vcc).
cnd_bneg = [vcc : tnum] (icc_n vcc).
cnd_bvs  = [vcc : tnum] (icc_v vcc).
cnd_ba   = strictify_num true.
cnd_bne  = [vcc : tnum] not (icc_z vcc).
cnd_bg   = [vcc : tnum] not ((icc_z vcc) or ((icc_n vcc) xor (icc_v vcc))).
cnd_bge  = [vcc : tnum] not ((icc_n vcc) xor (icc_v vcc)).
cnd_bgu  = [vcc : tnum] not ((icc_c vcc) or (icc_z vcc)).
cnd_bcc  = [vcc : tnum] not (icc_c vcc).
cnd_bpos = [vcc : tnum] not (icc_n vcc).
cnd_bvc  = [vcc : tnum] not (icc_v vcc).

nrBranch = i_ibranch false.  % Normal branch i.e. not a ba
baBranch = i_ibranch true.   % A ba branch - annul behavior differs

i_BN   = nrBranch cnd_bn.    % Branch Never
i_BE   = nrBranch cnd_be.    % Branch on Equal
i_BLE  = nrBranch cnd_ble.   % Branch on Less or Equal
i_BL   = nrBranch cnd_bl.    % Branch on Less
i_BLEU = nrBranch cnd_bleu.  % Branch on Less or Equal Unsigned
i_BCS  = nrBranch cnd_bcs.   % Branch on Carry Set (Less than, Unsigned)
i_BNEG = nrBranch cnd_bneg.  % Branch on Negative
i_BVS  = nrBranch cnd_bvs.   % Branch on Overflow Set
i_BA   = baBranch cnd_ba.    % Branch Always - the annul behavior
                             % is different for this instruction
i_BNE  = nrBranch cnd_bne.   % Branch on Not Equal
i_BG   = nrBranch cnd_bg.    % Branch on Greater
i_BGE  = nrBranch cnd_bge.   % Branch on Greater or Equal
i_BGU  = nrBranch cnd_bgu.   % Branch on Greater Unsigned
i_BCC  = nrBranch cnd_bcc.   % Branch on Carry Clear (Greater or eq Unsigned)
i_BPOS = nrBranch cnd_bpos.  % Branch on Positive
i_BVC  = nrBranch cnd_bvc.   % Branch on Overflow Set

% Floating point
cnd_fbn   = strictify_num false.
cnd_fbne  = [fsr : tnum] (fcc_l fsr) or (fcc_g fsr) or (fcc_u fsr).
cnd_fblg  = [fsr : tnum] (fcc_l fsr) or (fcc_g fsr).
cnd_fbul  = [fsr : tnum] (fcc_l fsr) or (fcc_u fsr).
cnd_fbl   = [fsr : tnum] (fcc_l fsr).
cnd_fbug  = [fsr : tnum] (fcc_g fsr) or (fcc_u fsr).
cnd_fbg   = [fsr : tnum] (fcc_g fsr).
cnd_fbu   = [fsr : tnum] (fcc_u fsr).
cnd_fba   = strictify_num true.
cnd_fbe   = [fsr : tnum] (fcc_e fsr).
cnd_fbue  = [fsr : tnum] (fcc_u fsr) or (fcc_e fsr).
cnd_fbge  = [fsr : tnum] (fcc_e fsr) or (fcc_g fsr).
cnd_fbuge = [fsr : tnum] (fcc_e fsr) or (fcc_g fsr) or (fcc_u fsr).
cnd_fble  = [fsr : tnum] (fcc_l fsr) or (fcc_e fsr).
cnd_fbule = [fsr : tnum] (fcc_e fsr) or (fcc_l fsr) or (fcc_u fsr).
cnd_fbo   = [fsr : tnum] (fcc_e fsr) or (fcc_l fsr) or (fcc_g fsr).

f_nrBranch = i_fbranch false.    % Normal branch i.e. not a ba
f_baBranch = i_fbranch true.     % A ba branch - annul behavior differs

i_FBN   = f_nrBranch cnd_fbn.    % Branch Never
i_FBNE  = f_nrBranch cnd_fbne.   % Branch on Not Equal
i_FBLG  = f_nrBranch cnd_fblg.   % Branch on Less or Greater
i_FBUL  = f_nrBranch cnd_fbul.   % Branch on Unordered or Less
i_FBL   = f_nrBranch cnd_fbl.    % Branch on Less
i_FBUG  = f_nrBranch cnd_fbug.   % Branch on Unordered or Greater
i_FBG   = f_nrBranch cnd_fbg.    % Branch on Greater
i_FBU   = f_nrBranch cnd_fbu.    % Branch on Unordered
i_FBA   = f_baBranch cnd_fba.    % Branch Always -- the annul behavior
                                 % is different for this instruction
i_FBE   = f_nrBranch cnd_fbe.    % Branch on Equal
i_FBUE  = f_nrBranch cnd_fbue.   % Branch on Unordered or Equal
i_FBGE  = f_nrBranch cnd_fbge.   % Branch on Greater or Equal
i_FBUGE = f_nrBranch cnd_fbuge.  % Branch on Unordered or Greater or Equal
i_FBLE  = f_nrBranch cnd_fble.   % Branch on Less or Equal
i_FBULE = f_nrBranch cnd_fbule.  % Branch on Unordered or Less or Equal
i_FBO   = f_nrBranch cnd_fbo.    % Branch on Unordered

always_false = strictify_num false.

i_CBN    = i_cbranch always_false.
i_CB123  = i_cbranch always_false.
i_CB12   = i_cbranch always_false.
i_CB13   = i_cbranch always_false.
i_CB1    = i_cbranch always_false.
i_CB23   = i_cbranch always_false.
i_CB2    = i_cbranch always_false.
i_CB3    = i_cbranch always_false.
i_CBA    = i_cbranch always_false.
i_CB0    = i_cbranch always_false.
i_CB03   = i_cbranch always_false.
i_CB02   = i_cbranch always_false.
i_CB023  = i_cbranch always_false.
i_CB01   = i_cbranch always_false.
i_CB013  = i_cbranch always_false.
i_CB012  = i_cbranch always_false.

i_CALL = [disp : tnum]                            % Call and Link
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (not (cbr_in_progress? r)) and
   (updn2 r fifteen (get_ireg r opc) npc (times four disp) r') and
   (_eq_mem m m').

% Get a floating point value from the register bank
get_float32 = get_freg.
get_float64 = [r : tregs][fs2 : tnum]
 mk_float64 (get_freg r fs2) (get_freg r (succ fs2)).

get_float128 = [r : tregs][fs2 : tnum]
 mk_float128 (get_freg r fs2) (get_freg r (succ fs2))
             (get_freg r (plus fs2 two)) (get_freg r (plus fs2 three)).

% Update the floating point register, and declare
% that there was no memory change
upd_freg32_no_mem_change =
 [r : tregs][fd : tnum][v : flt32][r' : tregs][m : tmem][m' : tmem]
  (upd_freg r fd v r') and (_eq_mem m m').

% Update a 64 bit floating point registers, and declare
% that there was no memory change
upd_freg64_no_mem_change =
 [r : tregs][fd : tnum][v : flt64][r' : tregs][m : tmem][m' : tmem]
  (even? fd) and
  (_exs_n2 [v1 : tnum][v2 : tnum]
   (_eq o_flt64 v (mk_float64 v1 v2)) and
   (upd_freg2 r fd v1 (succ fd) v2 r')) and
  (_eq_mem m m').

% Update a 128 bit floating point registers, and declare
% that there was no memory change
upd_freg128_no_mem_change =
 [r : tregs][fd : tnum][v : flt128][r' : tregs][m : tmem][m' : tmem]
  (mult4? fd) and
  (_exs_n2 [v1 : tnum][v2 : tnum] _exs_n2 [v3 : tnum][v4 : tnum]
   (_eq o_flt128 v (mk_float128 v1 v2 v3 v4)) and
   (upd_freg4 r fd v1 (succ fd) v2 (plus fd two) v3 (plus fd three) v4 r')) and
  (_eq_mem m m').

% Unary floating point operations
float_unary_op_32 = float_unary_op o_flt32 true_fn get_float32.

float_unary_op_32->32  = float_unary_op_32 o_flt32  upd_freg32_no_mem_change.
float_unary_op_32->64  = float_unary_op_32 o_flt64  upd_freg64_no_mem_change.
float_unary_op_32->128 = float_unary_op_32 o_flt128 upd_freg128_no_mem_change.

float_unary_op_64 = float_unary_op o_flt64 even? get_float64.

float_unary_op_64->32  = float_unary_op_64 o_flt32 upd_freg32_no_mem_change.
float_unary_op_64->64  = float_unary_op_64 o_flt64 upd_freg64_no_mem_change.
float_unary_op_64->128 = float_unary_op_64 o_flt128 upd_freg128_no_mem_change.

float_unary_op_128 = float_unary_op o_flt128 mult4? get_float128.

float_unary_op_128->32 = float_unary_op_128 o_flt32 upd_freg32_no_mem_change.
float_unary_op_128->64 = float_unary_op_128 o_flt64 upd_freg64_no_mem_change.
float_unary_op_128->128 =
 float_unary_op_128 o_flt128 upd_freg128_no_mem_change.

i_FMOVs  = float_unary_op_32->32 (_eq o_flt32).     % Move
i_FNEGs  = float_unary_op_32->32 float32_neg.       % Negate
i_FABSs  = float_unary_op_32->32 float32_abs.       % Absolute Value
i_FSQRTs = float_unary_op_32->32 float32_sqrt.      % Square Root Single

i_FSQRTd = float_unary_op_64->64 float64_sqrt.      % Square Root Double
i_FSQRTq = float_unary_op_128->128 float128_sqrt.   % Square Root Quad

i_FiTOs = float_unary_op_32->32 int32->float32.     % Convert Integer to Single
i_FsTOi = float_unary_op_32->32 float32->int32.     % Convert Single to Integer

i_FiTOd = float_unary_op_32->64 int32->float64.     % Convert Integer to Double

i_FsTOd = float_unary_op_32->64 float32->float64.   % Convert Single to Double

i_FiTOq = float_unary_op_32->128 int32->float128.   % Convert Integer to Quad
i_FsTOq = float_unary_op_32->128 float32->float128. % Convert Single to Quad

i_FdTOi = float_unary_op_64->32 float64->int32.     % Convert Double to Integer
i_FdTOs = float_unary_op_64->32 float64->float32.   % Convert Double to Single

i_FqTOs = float_unary_op_128->32 float128->float32. % Convert Quad to Single
i_FqTOi = float_unary_op_128->32 float128->int32.   % Convert Quad to Integer

i_FqTOd = float_unary_op_128->64 float128->float64. % Convert Quad to Double
i_FdTOq = float_unary_op_64->128 float64->float128. % Convert Double to Quad

% Binary floating point operations
float_bin_op_32 = float_binary_op o_flt32 true_fn get_float32.

float_bin_op_32->32 = float_bin_op_32 o_flt32 upd_freg32_no_mem_change.
float_bin_op_32->64 = float_bin_op_32 o_flt64 upd_freg64_no_mem_change.

float_bin_op_64 = float_binary_op o_flt64 even? get_float64.

float_bin_op_64->64  = float_bin_op_64 o_flt64 upd_freg64_no_mem_change.
float_bin_op_64->128 = float_bin_op_64 o_flt128 upd_freg128_no_mem_change.

float_bin_op_128 = float_binary_op o_flt128 mult4? get_float128.
float_bin_op_128->128 = float_bin_op_128 o_flt128 upd_freg128_no_mem_change.

i_FADDs = float_bin_op_32->32 float32_add.     % Add Single
i_FSUBs = float_bin_op_32->32 float32_sub.     % Subtract Single
i_FMULs = float_bin_op_32->32 float32_mul.     % Multiply Single
i_FDIVs = float_bin_op_32->32 float32_div.     % Divide Single

i_FADDd = float_bin_op_64->64 float64_add.     % Add Double
i_FSUBd = float_bin_op_64->64 float64_sub.     % Subtract Double
i_FMULd = float_bin_op_64->64 float64_mul.     % Multiply Double
i_FDIVd = float_bin_op_64->64 float64_div.     % Divide Double

i_FADDq = float_bin_op_128->128 float128_add.  % Add Quad
i_FSUBq = float_bin_op_128->128 float128_sub.  % Subtract Quad
i_FMULq = float_bin_op_128->128 float128_mul.  % Multiply Quad
i_FDIVq = float_bin_op_128->128 float128_div.  % Divide Quad

i_FsMULd = float_bin_op_32->64  float32->64_mul.  % Multiply Single to Double
i_FdMULq = float_bin_op_64->128 float64->128_mul. % Multiply Double to Quad

% The Compare instructions.
f_compare =
 [T : tp]
 [getf : tregs -> tnum -> tm T][ceq : tm T -> tm T -> tform]
 [clt : tm T -> tm T -> tform][cgt : tm T -> tm T -> tform]
 [ex  : tform][fs1 : tnum][fs2 : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
    (_exists3 T T num [v1 : tm T][v2 : tm T][fccv : tnum] _exs_r [r'' : tregs]
     (_eq T v1 (app_get_t T getf r fs1)) and
     (_eq T v2 (app_get_t T getf r fs2)) and 
     (if (ceq v1 v2) (eqn fccv zero)
        (if (clt v1 v2) (eqn fccv one)
           (if (cgt v1 v2) (eqn fccv two)
              (eqn fccv three)))) and
     (not (ex and (eqn fccv three))) and
     (upd_fcc r fccv r'') and (set_cmpfcc r'' r')) and
    (_eq_mem m m').

f_compare32  = f_compare o_flt32 get_float32 float32_eq float32_lt float32_gt.
f_compare64  = f_compare o_flt64 get_float64 float64_eq float64_lt float64_gt.
f_compare128 = f_compare o_flt128 get_float128 float128_eq float128_lt
                                               float128_gt.

i_FCMPs  = f_compare32  false. % Compare Single
i_FCMPEs = f_compare32  true.  % Compare Single and Exception if Unordered
i_FCMPd  = f_compare64  false. % Compare Double
i_FCMPEd = f_compare64  true.  % Compare Double and Exception if Unordered
i_FCMPq  = f_compare128 false. % Compare Quad
i_FCMPEq = f_compare128 true.  % Compare Quad and Exception if Unordered

i_FLUSH : tm address_ -> tm instr.  % Flush Instruction Memory

i_JMPL = [addr : tm address_][rd : tnum]      % Jump and Link
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (not (cbr_in_progress? r)) and
   (_exs_n2 [target : tnum][offset : tnum]
    (load_address_align r addr target offset word_size) and
    (upd_ireg2 r rd (get_ireg r opc) npc target r')) and
   (_eq_mem m m').

i_RETT : tm address_ -> tm instr.  % Return from Trap

trap_oper = tnum.
tn   : trap_oper = const 0.
te   : trap_oper = const 1.
tle  : trap_oper = const 2.
tl   : trap_oper = const 3.
tleu : trap_oper = const 4.
tcs  : trap_oper = const 5.
tneg : trap_oper = const 6.
tvs  : trap_oper = const 7.
ta   : trap_oper = const 8.
tne  : trap_oper = const 9.
tg   : trap_oper = const 10.
tge  : trap_oper = const 11.
tgu  : trap_oper = const 12.
tcc  : trap_oper = const 13.
tpos : trap_oper = const 14.
tvc  : trap_oper = const 15.

trap : trap_oper -> tm address_ -> tm instr.

i_TN   = trap tn.    % Trap Never
i_TE   = trap te.    % Trap on Equal
i_TLE  = trap tle.   % Trap on Less or Equal
i_TL   = trap tl.    % Trap on Less
i_TLEU = trap tleu.  % Trap on Less or Equal Unsigned
i_TCS  = trap tcs.   % Trap on Carry Set (Less Than, Unsigned)
i_TNEG = trap tneg.  % Trap on Negative
i_TVS  = trap tvs.   % Trap on Overflow Set
i_TA   = trap ta.    % Trap Always
i_TNE  = trap tne.   % Trap on Not Equal
i_TG   = trap tg.    % Trap on Greater
i_TGE  = trap tge.   % Trap on Greater or Equal
i_TGU  = trap tgu.   % Trap on Greater Unsigned
i_TCC  = trap tcc.   % Trap on Carry Clear (Greater then or Equal, Unsigned)
i_TPOS = trap tpos.  % Trap on Positive
i_TVC  = trap tvc.   % Trap on Overflow Clear
                             % The unimplemented instruction
                             % used when returning a structure in a C program
i_UNIMP : tnum -> tm instr =   
 [imm : tnum] instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  app1_pred ([_ : tnum] false) imm.

i_SETHI =                          % Set High 22 bits of r Register
 [rd : tnum][val : tnum]
  instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
   (upd_ireg r rd (times (const 1024) val) r') and (_eq_mem m m').

i_NOP = i_SETHI zero zero.
% Copyright (c) 2004 Princeton University
%	$Id: fields.elf,v 1.8 2004/04/22 10:49:20 appel Exp $

% 
% The encoding of the instruction fields.
% This is a machine generated file.  Do not edit!
% 
f_inst    : field_typ = _rbits 0 31.
f_op      : field_typ = _rbits 30 31.
f_disp30  : field_typ = _rbits 0 29.
f_rd      : field_typ = _rbits 25 29.
f_op2     : field_typ = _rbits 22 24.
f_imm22   : field_typ = _rbits 0 21.
f_a       : field_typ = _rbits 29 29.
f_cond    : field_typ = _rbits 25 28.
f_disp22  : field_typ = _rbits 0 21.
f_op3     : field_typ = _rbits 19 24.
f_rs1     : field_typ = _rbits 14 18.
f_i       : field_typ = _rbits 13 13.
f_asi     : field_typ = _rbits 5 12.
f_rs2     : field_typ = _rbits 0 4.
f_simm13  : field_typ = _rbits 0 12.
f_opf     : field_typ = _rbits 5 13.
f_fd      : field_typ = _rbits 25 29.
f_cd      : field_typ = _rbits 25 29.
f_fs1     : field_typ = _rbits 14 18.
f_fs2     : field_typ = _rbits 0 4.
f_rs1i    : field_typ = _rbits 14 18.
f_rdi     : field_typ = _rbits 25 29.
% Copyright (c) 2004 Princeton University
%	$Id: patterns.elf,v 1.9 2004/04/22 10:49:21 appel Exp $

% 
% The encoding of the instruction patterns.
% This is a machine generated file.  Do not edit!
% 

!!n : pat_typ -> pat_typ = _!! num.

p_TABLE_F2  : pat_typ = f_op (const 0).
p_CALL      : pat_typ = f_op (const 1).
p_TABLE_F3  : pat_typ = f_op (const 2).
p_TABLE_F4  : pat_typ = f_op (const 3).
p_UNIMP     : pat_typ = p_TABLE_F2 &&n f_op2 (const 0).
p_Bicc      : pat_typ = p_TABLE_F2 &&n f_op2 (const 2).
p_SETHI     : pat_typ = p_TABLE_F2 &&n f_op2 (const 4).
p_FBfcc     : pat_typ = p_TABLE_F2 &&n f_op2 (const 6).
p_CBccc     : pat_typ = p_TABLE_F2 &&n f_op2 (const 7).
p_ADD       : pat_typ = p_TABLE_F3 &&n f_op3 (const 0).
p_ADDcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 16).
p_TADDcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 32).
p_WRxxx     : pat_typ = p_TABLE_F3 &&n f_op3 (const 48).
p_AND       : pat_typ = p_TABLE_F3 &&n f_op3 (const 1).
p_ANDcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 17).
p_TSUBcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 33).
p_WRPSR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 49).
p_OR        : pat_typ = p_TABLE_F3 &&n f_op3 (const 2).
p_ORcc      : pat_typ = p_TABLE_F3 &&n f_op3 (const 18).
p_TADDccTV  : pat_typ = p_TABLE_F3 &&n f_op3 (const 34).
p_WRWIM     : pat_typ = p_TABLE_F3 &&n f_op3 (const 50).
p_XOR       : pat_typ = p_TABLE_F3 &&n f_op3 (const 3).
p_XORcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 19).
p_TSUBccTV  : pat_typ = p_TABLE_F3 &&n f_op3 (const 35).
p_WRTBR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 51).
p_SUB       : pat_typ = p_TABLE_F3 &&n f_op3 (const 4).
p_SUBcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 20).
p_MULScc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 36).
p_FPop1     : pat_typ = p_TABLE_F3 &&n f_op3 (const 52).
p_ANDN      : pat_typ = p_TABLE_F3 &&n f_op3 (const 5).
p_ANDNcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 21).
p_SLL       : pat_typ = p_TABLE_F3 &&n f_op3 (const 37).
p_FPop2     : pat_typ = p_TABLE_F3 &&n f_op3 (const 53).
p_ORN       : pat_typ = p_TABLE_F3 &&n f_op3 (const 6).
p_ORNcc     : pat_typ = p_TABLE_F3 &&n f_op3 (const 22).
p_SRL       : pat_typ = p_TABLE_F3 &&n f_op3 (const 38).
p_CPop1     : pat_typ = p_TABLE_F3 &&n f_op3 (const 54).
p_XNOR      : pat_typ = p_TABLE_F3 &&n f_op3 (const 7).
p_XNORcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 23).
p_SRA       : pat_typ = p_TABLE_F3 &&n f_op3 (const 39).
p_CPop2     : pat_typ = p_TABLE_F3 &&n f_op3 (const 55).
p_ADDX      : pat_typ = p_TABLE_F3 &&n f_op3 (const 8).
p_ADDXcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 24).
p_RDxxx     : pat_typ = p_TABLE_F3 &&n f_op3 (const 40).
p_JMPL      : pat_typ = p_TABLE_F3 &&n f_op3 (const 56).
p_RDPSR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 41).
p_RETT      : pat_typ = p_TABLE_F3 &&n f_op3 (const 57).
p_UMUL      : pat_typ = p_TABLE_F3 &&n f_op3 (const 10).
p_UMULcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 26).
p_RDWIM     : pat_typ = p_TABLE_F3 &&n f_op3 (const 42).
p_Ticc      : pat_typ = p_TABLE_F3 &&n f_op3 (const 58).
p_SMUL      : pat_typ = p_TABLE_F3 &&n f_op3 (const 11).
p_SMULcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 27).
p_RDTBR     : pat_typ = p_TABLE_F3 &&n f_op3 (const 43).
p_FLUSH     : pat_typ = p_TABLE_F3 &&n f_op3 (const 59).
p_SUBX      : pat_typ = p_TABLE_F3 &&n f_op3 (const 12).
p_SUBXcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 28).
p_SAVE      : pat_typ = p_TABLE_F3 &&n f_op3 (const 60).
p_RESTORE   : pat_typ = p_TABLE_F3 &&n f_op3 (const 61).
p_UDIV      : pat_typ = p_TABLE_F3 &&n f_op3 (const 14).
p_UDIVcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 30).
p_SDIV      : pat_typ = p_TABLE_F3 &&n f_op3 (const 15).
p_SDIVcc    : pat_typ = p_TABLE_F3 &&n f_op3 (const 31).
p_WRASR     : pat_typ = p_WRxxx &&n !!n (f_rd (const 0)).
p_WRY       : pat_typ = p_WRxxx &&n f_rd (const 0).
p_RDASR     : pat_typ = p_RDxxx &&n !!n (f_rs1 (const 0)) &&n !!n (f_rd (const 0)).
p_RDY       : pat_typ = p_RDxxx &&n f_rs1 (const 0).
p_STBAR     : pat_typ = p_RDxxx &&n f_rs1 (const 15) &&n f_rd (const 0).
p_LD        : pat_typ = p_TABLE_F4 &&n f_op3 (const 0).
p_LDA       : pat_typ = p_TABLE_F4 &&n f_op3 (const 16).
p_LDF       : pat_typ = p_TABLE_F4 &&n f_op3 (const 32).
p_LDC       : pat_typ = p_TABLE_F4 &&n f_op3 (const 48).
p_LDUB      : pat_typ = p_TABLE_F4 &&n f_op3 (const 1).
p_LDUBA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 17).
p_LDFSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 33).
p_LDCSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 49).
p_LDUH      : pat_typ = p_TABLE_F4 &&n f_op3 (const 2).
p_LDUHA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 18).
p_LDD       : pat_typ = p_TABLE_F4 &&n f_op3 (const 3).
p_LDDA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 19).
p_LDDF      : pat_typ = p_TABLE_F4 &&n f_op3 (const 35).
p_LDDC      : pat_typ = p_TABLE_F4 &&n f_op3 (const 51).
p_ST        : pat_typ = p_TABLE_F4 &&n f_op3 (const 4).
p_STA       : pat_typ = p_TABLE_F4 &&n f_op3 (const 20).
p_STF       : pat_typ = p_TABLE_F4 &&n f_op3 (const 36).
p_STC       : pat_typ = p_TABLE_F4 &&n f_op3 (const 52).
p_STB       : pat_typ = p_TABLE_F4 &&n f_op3 (const 5).
p_STBA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 21).
p_STFSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 37).
p_STCSR     : pat_typ = p_TABLE_F4 &&n f_op3 (const 53).
p_STH       : pat_typ = p_TABLE_F4 &&n f_op3 (const 6).
p_STHA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 22).
p_STDFQ     : pat_typ = p_TABLE_F4 &&n f_op3 (const 38).
p_STDCQ     : pat_typ = p_TABLE_F4 &&n f_op3 (const 54).
p_STD       : pat_typ = p_TABLE_F4 &&n f_op3 (const 7).
p_STDA      : pat_typ = p_TABLE_F4 &&n f_op3 (const 23).
p_STDF      : pat_typ = p_TABLE_F4 &&n f_op3 (const 39).
p_STDC      : pat_typ = p_TABLE_F4 &&n f_op3 (const 55).
p_LDSB      : pat_typ = p_TABLE_F4 &&n f_op3 (const 9).
p_LDSBA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 25).
p_LDSH      : pat_typ = p_TABLE_F4 &&n f_op3 (const 10).
p_LDSHA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 26).
p_LDSTUB    : pat_typ = p_TABLE_F4 &&n f_op3 (const 13).
p_LDSTUBA   : pat_typ = p_TABLE_F4 &&n f_op3 (const 29).
p_SWAP_DOT  : pat_typ = p_TABLE_F4 &&n f_op3 (const 15).
p_SWAPA     : pat_typ = p_TABLE_F4 &&n f_op3 (const 31).
p_FMOVs     : pat_typ = p_FPop1 &&n f_opf (const 1).
p_FNEGs     : pat_typ = p_FPop1 &&n f_opf (const 5).
p_FABSs     : pat_typ = p_FPop1 &&n f_opf (const 9).
p_FSQRTs    : pat_typ = p_FPop1 &&n f_opf (const 41).
p_FSQRTd    : pat_typ = p_FPop1 &&n f_opf (const 42).
p_FSQRTq    : pat_typ = p_FPop1 &&n f_opf (const 43).
p_FiTOs     : pat_typ = p_FPop1 &&n f_opf (const 196).
p_FdTOs     : pat_typ = p_FPop1 &&n f_opf (const 198).
p_FqTOs     : pat_typ = p_FPop1 &&n f_opf (const 199).
p_FiTOd     : pat_typ = p_FPop1 &&n f_opf (const 200).
p_FsTOd     : pat_typ = p_FPop1 &&n f_opf (const 201).
p_FqTOd     : pat_typ = p_FPop1 &&n f_opf (const 203).
p_FiTOq     : pat_typ = p_FPop1 &&n f_opf (const 204).
p_FsTOq     : pat_typ = p_FPop1 &&n f_opf (const 205).
p_FdTOq     : pat_typ = p_FPop1 &&n f_opf (const 206).
p_FsTOi     : pat_typ = p_FPop1 &&n f_opf (const 209).
p_FdTOi     : pat_typ = p_FPop1 &&n f_opf (const 210).
p_FqTOi     : pat_typ = p_FPop1 &&n f_opf (const 211).
p_FADDs     : pat_typ = p_FPop1 &&n f_opf (const 65).
p_FADDd     : pat_typ = p_FPop1 &&n f_opf (const 66).
p_FADDq     : pat_typ = p_FPop1 &&n f_opf (const 67).
p_FSUBs     : pat_typ = p_FPop1 &&n f_opf (const 69).
p_FSUBd     : pat_typ = p_FPop1 &&n f_opf (const 70).
p_FSUBq     : pat_typ = p_FPop1 &&n f_opf (const 71).
p_FMULs     : pat_typ = p_FPop1 &&n f_opf (const 73).
p_FMULd     : pat_typ = p_FPop1 &&n f_opf (const 74).
p_FMULq     : pat_typ = p_FPop1 &&n f_opf (const 75).
p_FDIVs     : pat_typ = p_FPop1 &&n f_opf (const 77).
p_FDIVd     : pat_typ = p_FPop1 &&n f_opf (const 78).
p_FDIVq     : pat_typ = p_FPop1 &&n f_opf (const 79).
p_FsMULd    : pat_typ = p_FPop1 &&n f_opf (const 105).
p_FdMULq    : pat_typ = p_FPop1 &&n f_opf (const 110).
p_FCMPs     : pat_typ = p_FPop2 &&n f_opf (const 81).
p_FCMPEs    : pat_typ = p_FPop2 &&n f_opf (const 85).
p_FCMPd     : pat_typ = p_FPop2 &&n f_opf (const 82).
p_FCMPEd    : pat_typ = p_FPop2 &&n f_opf (const 86).
p_FCMPq     : pat_typ = p_FPop2 &&n f_opf (const 83).
p_FCMPEq    : pat_typ = p_FPop2 &&n f_opf (const 87).
p_BN        : pat_typ = p_Bicc &&n f_cond (const 0).
p_BE        : pat_typ = p_Bicc &&n f_cond (const 1).
p_BLE       : pat_typ = p_Bicc &&n f_cond (const 2).
p_BL        : pat_typ = p_Bicc &&n f_cond (const 3).
p_BLEU      : pat_typ = p_Bicc &&n f_cond (const 4).
p_BCS       : pat_typ = p_Bicc &&n f_cond (const 5).
p_BNEG      : pat_typ = p_Bicc &&n f_cond (const 6).
p_BVS       : pat_typ = p_Bicc &&n f_cond (const 7).
p_BA        : pat_typ = p_Bicc &&n f_cond (const 8).
p_BNE       : pat_typ = p_Bicc &&n f_cond (const 9).
p_BG        : pat_typ = p_Bicc &&n f_cond (const 10).
p_BGE       : pat_typ = p_Bicc &&n f_cond (const 11).
p_BGU       : pat_typ = p_Bicc &&n f_cond (const 12).
p_BCC       : pat_typ = p_Bicc &&n f_cond (const 13).
p_BPOS      : pat_typ = p_Bicc &&n f_cond (const 14).
p_BVC       : pat_typ = p_Bicc &&n f_cond (const 15).
p_FBN       : pat_typ = p_FBfcc &&n f_cond (const 0).
p_FBNE      : pat_typ = p_FBfcc &&n f_cond (const 1).
p_FBLG      : pat_typ = p_FBfcc &&n f_cond (const 2).
p_FBUL      : pat_typ = p_FBfcc &&n f_cond (const 3).
p_FBL       : pat_typ = p_FBfcc &&n f_cond (const 4).
p_FBUG      : pat_typ = p_FBfcc &&n f_cond (const 5).
p_FBG       : pat_typ = p_FBfcc &&n f_cond (const 6).
p_FBU       : pat_typ = p_FBfcc &&n f_cond (const 7).
p_FBA       : pat_typ = p_FBfcc &&n f_cond (const 8).
p_FBE       : pat_typ = p_FBfcc &&n f_cond (const 9).
p_FBUE      : pat_typ = p_FBfcc &&n f_cond (const 10).
p_FBGE      : pat_typ = p_FBfcc &&n f_cond (const 11).
p_FBUGE     : pat_typ = p_FBfcc &&n f_cond (const 12).
p_FBLE      : pat_typ = p_FBfcc &&n f_cond (const 13).
p_FBULE     : pat_typ = p_FBfcc &&n f_cond (const 14).
p_FBO       : pat_typ = p_FBfcc &&n f_cond (const 15).
p_CBN       : pat_typ = p_CBccc &&n f_cond (const 0).
p_CB123     : pat_typ = p_CBccc &&n f_cond (const 1).
p_CB12      : pat_typ = p_CBccc &&n f_cond (const 2).
p_CB13      : pat_typ = p_CBccc &&n f_cond (const 3).
p_CB1       : pat_typ = p_CBccc &&n f_cond (const 4).
p_CB23      : pat_typ = p_CBccc &&n f_cond (const 5).
p_CB2       : pat_typ = p_CBccc &&n f_cond (const 6).
p_CB3       : pat_typ = p_CBccc &&n f_cond (const 7).
p_CBA       : pat_typ = p_CBccc &&n f_cond (const 8).
p_CB0       : pat_typ = p_CBccc &&n f_cond (const 9).
p_CB03      : pat_typ = p_CBccc &&n f_cond (const 10).
p_CB02      : pat_typ = p_CBccc &&n f_cond (const 11).
p_CB023     : pat_typ = p_CBccc &&n f_cond (const 12).
p_CB01      : pat_typ = p_CBccc &&n f_cond (const 13).
p_CB013     : pat_typ = p_CBccc &&n f_cond (const 14).
p_CB012     : pat_typ = p_CBccc &&n f_cond (const 15).
p_TN        : pat_typ = p_Ticc &&n f_cond (const 0).
p_TE        : pat_typ = p_Ticc &&n f_cond (const 1).
p_TLE       : pat_typ = p_Ticc &&n f_cond (const 2).
p_TL        : pat_typ = p_Ticc &&n f_cond (const 3).
p_TLEU      : pat_typ = p_Ticc &&n f_cond (const 4).
p_TCS       : pat_typ = p_Ticc &&n f_cond (const 5).
p_TNEG      : pat_typ = p_Ticc &&n f_cond (const 6).
p_TVS       : pat_typ = p_Ticc &&n f_cond (const 7).
p_TA        : pat_typ = p_Ticc &&n f_cond (const 8).
p_TNE       : pat_typ = p_Ticc &&n f_cond (const 9).
p_TG        : pat_typ = p_Ticc &&n f_cond (const 10).
p_TGE       : pat_typ = p_Ticc &&n f_cond (const 11).
p_TGU       : pat_typ = p_Ticc &&n f_cond (const 12).
p_TCC       : pat_typ = p_Ticc &&n f_cond (const 13).
p_TPOS      : pat_typ = p_Ticc &&n f_cond (const 14).
p_TVC       : pat_typ = p_Ticc &&n f_cond (const 15).
% Copyright (c) 2004 Princeton University
%	$Id: oper_selectors.elf,v 1.7 2004/04/22 10:49:20 appel Exp $

% 
% The encoding of the instruction operator selectors.
% This is a machine generated file.  Do not edit!
% 
||2_r :
 (tm reg_or_imm -> tm num -> tform) -> (tm reg_or_imm -> tm num -> tform)
  -> tm reg_or_imm -> tm num -> tform = _||2 reg_or_imm num.

sel_imode : tm reg_or_imm -> tnum -> tform =
    fld1 reg_or_imm num f_simm13 (f_i (const 1)) inj_imode.

% sel_imode : tm reg_or_imm -> tnum -> tform =
%   [obj : tm reg_or_imm][word : tnum]
%     f_i (const 1) word and
%     _exs_n [g1200 : tnum] f_simm13 g1200 word and
%                           _eq reg_or_imm obj (inj_imode g1200).

sel_rmode : tm reg_or_imm -> tnum -> tform =
   fld1 reg_or_imm num f_rs2 (f_i (const 0)) inj_rmode.

% sel_rmode : tm reg_or_imm -> tnum -> tform =
%   [obj : tm reg_or_imm][word : tnum]
%    f_i (const 0) word and
%    _exs_n [g1201 : tnum] f_rs2 g1201 word and
%                          _eq reg_or_imm obj (inj_rmode g1201).

oper_reg_or_imm : tm reg_or_imm -> tnum -> tform =
  ||2_r sel_imode sel_rmode.

sel_generalA : tm address_ -> tnum -> tform =
   fld2 address_ num reg_or_imm f_rs1 oper_reg_or_imm true_fn inj_generalA.

% sel_generalA : tm address_ -> tnum -> tform =
%   [obj : tm address_][word : tnum]
%     _exists2 num reg_or_imm [g1202 : tnum][g1203 : tm reg_or_imm]
%      (f_rs1 g1202 &&n oper_reg_or_imm g1203) word and
%      _eq address_ obj (inj_generalA g1202 g1203).

oper_address_ : tm address_ -> tnum -> tform =
 [obj : tm address_][word : tnum] sel_generalA obj word.

sel_indexR : tm regaddr -> tnum -> tform =
   fld2 regaddr num num f_rs1 f_rs2 (f_i (const 0)) inj_indexR.

%  [obj : tm regaddr][word : tnum]
%    f_i (const 0) word and
%    _exs_n2 [g1204 : tnum][g1205 : tnum]
%     (f_rs1 g1204 &&n f_rs2 g1205) word and
%     _eq regaddr obj (inj_indexR g1204 g1205).

oper_regaddr : tm regaddr -> tnum -> tform =
 [obj : tm regaddr][word : tnum] sel_indexR obj word.

% Copyright (c) 2004 Princeton University
%	$Id: instructions.elf,v 1.15 2004/04/22 10:49:20 appel Exp $

% 
% The encoding of the instructions.
% This is a machine generated file.  Do not edit!
% 
aux_loadg = fld2 instr address_ num oper_address_ f_rd.

ins_loadg =
  aux_loadg p_LDSB i_LDSB ||2n aux_loadg p_LDSH i_LDSH ||2n
  aux_loadg p_LDUB i_LDUB ||2n aux_loadg p_LDUH i_LDUH ||2n
  aux_loadg p_LD i_LD ||2n aux_loadg p_LDSTUB i_LDSTUB ||2n
  aux_loadg p_SWAP_DOT i_SWAP_DOT ||2n
  aux_loadg p_LDFSR i_LDFSR ||2n aux_loadg p_LDCSR i_LDCSR.

ins_LDD = fld2 instr address_ num oper_address_ f_rd p_LDD i_LDD.

ins_LDF = fld2 instr address_ num oper_address_ f_fd p_LDF i_LDF.

ins_LDDF = fld2 instr address_ num oper_address_ f_fd p_LDDF i_LDDF.

ins_LDC = fld2 instr address_ num oper_address_ f_cd p_LDC i_LDC.

ins_LDDC = fld2 instr address_ num oper_address_ f_cd p_LDDC i_LDDC.

aux_storeg = fld2 instr num address_ f_rd oper_address_.

ins_storeg =
  aux_storeg p_STB i_STB ||2n aux_storeg p_STH i_STH ||2n
  aux_storeg p_ST i_ST ||2n aux_storeg p_STFSR i_STFSR ||2n
  aux_storeg p_STCSR i_STCSR ||2n aux_storeg p_STDFQ i_STDFQ ||2n
  aux_storeg p_STDCQ i_STDCQ.

ins_STD = fld2 instr num address_ f_rd oper_address_ p_STD i_STD.

ins_STF = fld2 instr num address_ f_fd oper_address_ p_STF i_STF.

ins_STDF = fld2 instr num address_ f_fd oper_address_ p_STDF i_STDF.

ins_STC = fld2 instr num address_ f_cd oper_address_ p_STC i_STC.

ins_STDC = fld2 instr num address_ f_cd oper_address_ p_STDC i_STDC.

aux_loada = fld3 instr address_ num num oper_regaddr f_asi f_rd.

ins_loada =
  aux_loada p_LDSBA i_LDSBA ||2n aux_loada p_LDSHA i_LDSHA ||2n
  aux_loada p_LDUBA i_LDUBA ||2n aux_loada p_LDUHA i_LDUHA ||2n
  aux_loada p_LDA i_LDA ||2n aux_loada p_LDSTUBA i_LDSTUBA ||2n
  aux_loada p_SWAPA i_SWAPA.

ins_LDDA = fld3 instr address_ num num oper_regaddr f_asi f_rd p_LDDA i_LDDA.

aux_storea = fld3 instr num address_ num f_rd oper_regaddr f_asi.

ins_storea =
  aux_storea p_STBA i_STBA ||2n aux_storea p_STHA i_STHA ||2n
  aux_storea p_STA i_STA.

ins_STDA = fld3 instr num address_ num f_rd oper_regaddr f_asi p_STDA i_STDA.

ins_LDFSR = aux_loadg p_LDFSR i_LDFSR.

ins_LDCSR = aux_loadg p_LDCSR i_LDCSR.

ins_STFSR = aux_storeg p_STFSR i_STFSR.

ins_STCSR = aux_storeg p_STCSR i_STCSR.

ins_STDFQ = aux_storeg p_STDFQ i_STDFQ.

ins_STDCQ = aux_storeg p_STDCQ i_STDCQ.

ins_RDY = fld1 instr num f_rd p_RDY i_RDY.

ins_RDPSR = fld1 instr num f_rd p_RDPSR i_RDPSR.

ins_RDWIM = fld1 instr num f_rd p_RDWIM i_RDWIM.

ins_RDTBR = fld1 instr num f_rd p_RDTBR i_RDTBR.

ins_WRY = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRY i_WRY.

ins_WRPSR = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRPSR i_WRPSR.

ins_WRWIM = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRWIM i_WRWIM.

ins_WRTBR = fld2 instr num reg_or_imm f_rs1 oper_reg_or_imm p_WRTBR i_WRTBR.

ins_RDASR = fld2 instr num num f_rs1 f_rd p_RDASR i_RDASR.

ins_WRASR = fld3 instr num reg_or_imm num f_rs1 oper_reg_or_imm f_rd p_WRASR i_WRASR.

ins_STBAR = fld0 instr p_STBAR i_STBAR.

aux_alu = fld3 instr num reg_or_imm num f_rs1 oper_reg_or_imm f_rd.

ins_alu =
  aux_alu p_AND i_AND ||2n aux_alu p_ANDcc i_ANDcc ||2n
  aux_alu p_ANDN i_ANDN ||2n aux_alu p_ANDNcc i_ANDNcc ||2n
  aux_alu p_OR i_OR ||2n aux_alu p_ORcc i_ORcc ||2n
  aux_alu p_ORN i_ORN ||2n aux_alu p_ORNcc i_ORNcc ||2n
  aux_alu p_XOR i_XOR ||2n aux_alu p_XORcc i_XORcc ||2n
  aux_alu p_XNOR i_XNOR ||2n aux_alu p_XNORcc i_XNORcc ||2n
  aux_alu p_SLL i_SLL ||2n aux_alu p_SRL i_SRL ||2n
  aux_alu p_SRA i_SRA ||2n aux_alu p_ADD i_ADD ||2n
  aux_alu p_ADDcc i_ADDcc ||2n aux_alu p_ADDX i_ADDX ||2n
  aux_alu p_ADDXcc i_ADDXcc ||2n aux_alu p_TADDcc i_TADDcc ||2n
  aux_alu p_TADDccTV i_TADDccTV ||2n aux_alu p_SUB i_SUB ||2n
  aux_alu p_SUBcc i_SUBcc ||2n aux_alu p_SUBX i_SUBX ||2n
  aux_alu p_SUBXcc i_SUBXcc ||2n aux_alu p_TSUBcc i_TSUBcc ||2n
  aux_alu p_TSUBccTV i_TSUBccTV ||2n aux_alu p_MULScc i_MULScc ||2n
  aux_alu p_UMUL i_UMUL ||2n aux_alu p_SMUL i_SMUL ||2n
  aux_alu p_UMULcc i_UMULcc ||2n aux_alu p_SMULcc i_SMULcc ||2n
  aux_alu p_UDIV i_UDIV ||2n aux_alu p_SDIV i_SDIV ||2n
  aux_alu p_UDIVcc i_UDIVcc ||2n aux_alu p_SDIVcc i_SDIVcc ||2n
  aux_alu p_SAVE i_SAVE ||2n aux_alu p_RESTORE i_RESTORE.

aux_branch = fld2 instr num num f_a f_disp22.

ins_branch =
  aux_branch p_BN i_BN ||2n aux_branch p_BE i_BE ||2n
  aux_branch p_BLE i_BLE ||2n aux_branch p_BL i_BL ||2n
  aux_branch p_BLEU i_BLEU ||2n aux_branch p_BCS i_BCS ||2n
  aux_branch p_BNEG i_BNEG ||2n aux_branch p_BVS i_BVS ||2n
  aux_branch p_BA i_BA ||2n aux_branch p_BNE i_BNE ||2n
  aux_branch p_BG i_BG ||2n aux_branch p_BGE i_BGE ||2n
  aux_branch p_BGU i_BGU ||2n aux_branch p_BCC i_BCC ||2n
  aux_branch p_BPOS i_BPOS ||2n aux_branch p_BVC i_BVC ||2n
  aux_branch p_FBN i_FBN ||2n aux_branch p_FBNE i_FBNE ||2n
  aux_branch p_FBLG i_FBLG ||2n aux_branch p_FBUL i_FBUL ||2n
  aux_branch p_FBL i_FBL ||2n aux_branch p_FBUG i_FBUG ||2n
  aux_branch p_FBG i_FBG ||2n aux_branch p_FBU i_FBU ||2n
  aux_branch p_FBA i_FBA ||2n aux_branch p_FBE i_FBE ||2n
  aux_branch p_FBUE i_FBUE ||2n aux_branch p_FBGE i_FBGE ||2n
  aux_branch p_FBUGE i_FBUGE ||2n aux_branch p_FBLE i_FBLE ||2n
  aux_branch p_FBULE i_FBULE ||2n aux_branch p_FBO i_FBO ||2n
  aux_branch p_CBN i_CBN ||2n aux_branch p_CB123 i_CB123 ||2n
  aux_branch p_CB12 i_CB12 ||2n aux_branch p_CB13 i_CB13 ||2n
  aux_branch p_CB1 i_CB1 ||2n aux_branch p_CB23 i_CB23 ||2n
  aux_branch p_CB2 i_CB2 ||2n aux_branch p_CB3 i_CB3 ||2n
  aux_branch p_CBA i_CBA ||2n aux_branch p_CB0 i_CB0 ||2n
  aux_branch p_CB03 i_CB03 ||2n aux_branch p_CB02 i_CB02 ||2n
  aux_branch p_CB023 i_CB023 ||2n aux_branch p_CB01 i_CB01 ||2n
  aux_branch p_CB013 i_CB013 ||2n aux_branch p_CB012 i_CB012.

ins_CALL = fld1 instr num f_disp30 p_CALL i_CALL.

aux_float2s = fld2 instr num num f_fs2 f_fd.

ins_float2s =
  aux_float2s p_FMOVs i_FMOVs ||2n aux_float2s p_FNEGs i_FNEGs ||2n
  aux_float2s p_FABSs i_FABSs ||2n aux_float2s p_FSQRTs i_FSQRTs.

ins_FSQRTd = fld2 instr num num f_fs2 f_fd p_FSQRTd i_FSQRTd.

ins_FSQRTq = fld2 instr num num f_fs2 f_fd p_FSQRTq i_FSQRTq.

aux_FTOs = fld2 instr num num f_fs2 f_fd.

ins_FTOs = aux_FTOs p_FiTOs i_FiTOs ||2n aux_FTOs p_FsTOi i_FsTOi.

aux_FTOd = fld2 instr num num f_fs2 f_fd.

ins_FTOd = aux_FTOd p_FiTOd i_FiTOd ||2n aux_FTOd p_FsTOd i_FsTOd.

aux_FTOq = fld2 instr num num f_fs2 f_fd.

ins_FTOq = aux_FTOq p_FiTOq i_FiTOq ||2n aux_FTOq p_FsTOq i_FsTOq.

aux_FdTO = fld2 instr num num f_fs2 f_fd.

ins_FdTO = aux_FdTO p_FdTOi i_FdTOi ||2n aux_FdTO p_FdTOs i_FdTOs.

aux_FqTO = fld2 instr num num f_fs2 f_fd.

ins_FqTO = aux_FqTO p_FqTOs i_FqTOs ||2n aux_FqTO p_FqTOi i_FqTOi.

ins_FqTOd = fld2 instr num num f_fs2 f_fd p_FqTOd i_FqTOd.

ins_FdTOq = fld2 instr num num f_fs2 f_fd p_FdTOq i_FdTOq.

aux_float3s = fld3 instr num num num f_fs1 f_fs2 f_fd.

ins_float3s =
  aux_float3s p_FADDs i_FADDs ||2n aux_float3s p_FSUBs i_FSUBs ||2n
  aux_float3s p_FMULs i_FMULs ||2n aux_float3s p_FDIVs i_FDIVs.

aux_float3d = fld3 instr num num num f_fs1 f_fs2 f_fd.

ins_float3d =
  aux_float3d p_FADDd i_FADDd ||2n aux_float3d p_FSUBd i_FSUBd ||2n
  aux_float3d p_FMULd i_FMULd ||2n aux_float3d p_FDIVd i_FDIVd.

aux_float3q = fld3 instr num num num f_fs1 f_fs2 f_fd.

ins_float3q =
  aux_float3q p_FADDq i_FADDq ||2n aux_float3q p_FSUBq i_FSUBq ||2n
  aux_float3q p_FMULq i_FMULq ||2n aux_float3q p_FDIVq i_FDIVq.

ins_FsMULd = fld3 instr num num num f_fs1 f_fs2 f_fd p_FsMULd i_FsMULd.

ins_FdMULq = fld3 instr num num num f_fs1 f_fs2 f_fd p_FdMULq i_FdMULq.

aux_fcompares = fld2 instr num num f_fs1 f_fs2.

ins_fcompares =
  aux_fcompares p_FCMPs i_FCMPs ||2n aux_fcompares p_FCMPEs i_FCMPEs.

aux_fcompared = fld2 instr num num f_fs1 f_fs2.

ins_fcompared =
  aux_fcompared p_FCMPd i_FCMPd ||2n aux_fcompared p_FCMPEd i_FCMPEd.

aux_fcompareq = fld2 instr num num f_fs1 f_fs2.

ins_fcompareq =
  aux_fcompareq p_FCMPq i_FCMPq ||2n aux_fcompareq p_FCMPEq i_FCMPEq.

ins_FLUSH = fld1 instr address_ oper_address_ p_FLUSH i_FLUSH.

ins_JMPL = fld2 instr address_ num oper_address_ f_rd p_JMPL i_JMPL.

ins_RETT = fld1 instr address_ oper_address_ p_RETT i_RETT.

aux_trap = fld1 instr address_ oper_address_.

ins_trap =
  aux_trap p_TN i_TN ||2n aux_trap p_TE i_TE ||2n
  aux_trap p_TLE i_TLE ||2n aux_trap p_TL i_TL ||2n
  aux_trap p_TLEU i_TLEU ||2n aux_trap p_TCS i_TCS ||2n
  aux_trap p_TNEG i_TNEG ||2n aux_trap p_TVS i_TVS ||2n
  aux_trap p_TA i_TA ||2n aux_trap p_TNE i_TNE ||2n
  aux_trap p_TG i_TG ||2n aux_trap p_TGE i_TGE ||2n
  aux_trap p_TGU i_TGU ||2n aux_trap p_TCC i_TCC ||2n
  aux_trap p_TPOS i_TPOS ||2n aux_trap p_TVC i_TVC.

ins_UNIMP = fld1 instr num f_imm22 p_UNIMP i_UNIMP.

ins_SETHI = fld2 instr num num f_rd f_imm22 p_SETHI i_SETHI.

instruction =
 ins_loadg ||2n ins_LDD ||2n ins_LDF ||2n ins_LDDF ||2n ins_LDC ||2n
 ins_LDDC ||2n ins_storeg ||2n ins_STD ||2n ins_STF ||2n ins_STDF ||2n
 ins_STC ||2n ins_STDC ||2n ins_loada ||2n ins_LDDA ||2n ins_storea ||2n
 ins_STDA ||2n ins_RDY ||2n ins_RDPSR ||2n ins_RDWIM ||2n
 ins_RDTBR ||2n ins_WRY ||2n ins_WRPSR ||2n ins_WRWIM ||2n ins_WRTBR ||2n
% ins_RDASR ||2n ins_WRASR ||2n
 ins_STBAR ||2n ins_alu ||2n ins_branch ||2n
 ins_CALL ||2n ins_float2s ||2n ins_FSQRTd ||2n ins_FSQRTq ||2n ins_FTOs ||2n
 ins_FTOd ||2n ins_FTOq ||2n ins_FdTO ||2n ins_FqTO ||2n ins_FqTOd ||2n
 ins_FdTOq ||2n ins_float3s ||2n ins_float3d ||2n ins_float3q ||2n
 ins_FsMULd ||2n ins_FdMULq ||2n ins_fcompares ||2n ins_fcompared ||2n
 ins_fcompareq ||2n
 ins_FLUSH ||2n ins_JMPL ||2n ins_RETT ||2n
 ins_trap ||2n ins_UNIMP ||2n ins_SETHI.
% Copyright (c) 2004 Princeton University
%	$Id: step.elf,v 1.25 2004/04/22 10:49:21 appel Exp $

% Instruction Semantics for the sparc V8 machine.

genpc = tuple4 num num num num.                 % opc, pc, npc, icnt

_mk_gen_pc = _mktuple4 num num num num.
_get_opc   : tm genpc -> tnum = _get1of4 num num num num.
_get_pc    : tm genpc -> tnum = _get2of4 num num num num.
_get_npc   : tm genpc -> tnum = _get3of4 num num num num.
_get_icnt  : tm genpc -> tnum = _get4of4 num num num num.

% Change the genpc as if a nonjump instruction of size "num" executes
_nextpc : tnum -> tm genpc -> tm genpc =
 [n : tnum][g : tm genpc] _mk_gen_pc (_get_pc g) (_get_npc g)
                           (plus (_get_npc g) n) (succ (_get_icnt g)).

% Change the program counter as if a jump to "n" instruction executes
_nextpc_jmp = [n: tnum][g: tm genpc]
  _mk_gen_pc (_get_opc g) (_get_pc g) n (_get_icnt g).

% Some genpc's will continue
% execution in a straight line as long as no branch occurs.
% These relate to some location via the "normalpc" relation.
% Other genpc's have a latent branch about to occur; these
% relate to no single location.
_normalpc = [g : tm genpc][n : tnum]
  _exists num  [n+4:tm num]
    _is_word n and _modulo n word_size zero
    and _plus_mod32 n word_size n+4
    and eqn (_get_pc g) n and eqn (_get_npc g) n+4.

% The next location to fetch an instruction.
_nextinstr : tm genpc -> tnum = _get_pc.

% A generalized version of control_at.
_gen_control_at : tm genpc -> tregs -> tform =
 [g : tm genpc][r : tregs]
 eqn (get_reg r opc) (_get_opc g) and eqn (get_reg r pc) (_get_pc g) and
 eqn (get_reg r npc) (_get_npc g) and eqn (get_reg r icnt) (_get_icnt g).

% Modify the state r,m by setting the program counter to genpc
_setpc : tm genpc -> tm instr =
 [g : tm genpc] instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  _upd4 num num r opc (_get_opc g) pc (_get_pc g) npc (_get_npc g)
                  icnt (_get_icnt g) r' and _eq_mem m m'.

% Modify the state r,m by setting program counter to genpc
% and also update the count of the number of instructions executed
_updatepc : tm (registers arrow registers arrow form) =
 _lam2 registers registers form [r : tregs][r' : tregs]
   _exists num [new_npc: tm num]
      _plus_mod32 (get_reg r npc) four new_npc and
      _upd4 num num r opc (get_reg r pc) pc (get_reg r npc)
                      npc new_npc icnt (succ (get_reg r icnt)) r'.

% The decode relation specifying machine instruction syntax
_decode : tmem -> tnum -> tm instr -> tnum -> tform =
 [m : tmem][w : tnum][instr : tm instr][size : tnum]
  eqn size four and instruction instr (get_mem m w).
% Copyright (c) 2004 Princeton University
%	$Id: policy.elf,v 1.15 2005/05/31 15:22:30 gtan Exp $


% This file contains the machine-dependent parts of the conventions
% about register usage for proof-carrying code.
% It is loosely based on Standard ML of New Jersey 110.34.
% See, for example, src/runtime/mach-dep/SPARC.prim.asm  in
% the  SML/NJ 110.34 source distribution.

% 
% R#  REG   Convention
% 
%  0  %g0   always 0
%  1  %g1   
% ...
%  7  %g7   
%  8  %o0   standard link
%  9  %o1   alloc pointer  (boundary between allocated and available heap)
% 10  %o2   limit pointer  (end of available heap, minus 4096)
% 11  %o3   standard arg
% 12  %o4
% 13  %o5
% 14  %sp   stack pointer
% 15  %o7   return address (set by call instruction)
% 16  %l0
%  ...
% 23  %l7
% 24  %i0   
% ...
% 29  %i5   
% 30  %fp   frame pointer (don't touch)
% 31  %i7   saved pc (don't touch)
% 32  %pc   program counter
% 33  %npc  next program counter
% 34   icc   integer condition codes
% 35   fcc   floating-point condition codes
% 36  %y   high-order result of multiply instruction
% 37   icnt   number of instructions executed, including current instr
% 128 %f0  floating-point register 0
% 191 %f63 floating-point register 63
% 
% In our logical specifications, the register bank is a single array
% of integers.  The actual SPARC has several different register banks.
% The numbers in the R# column indicate where in our specification's
% register bank we put the corresponding SPARC register.  This is
% documented in logic/pccTCB/machines/sparc/instr_sem.elf.
% 
% The stack pointer points to a block of memory like this:
%  *	%fp = %sp+4096
%  *                    +-------------------+
%  *                    |                   |	
%  *                    .                   .
%  *			|                   |
%  *	%sp+116:	|  spill area       |
%  *			+-------------------+
%  *	%sp+112:	|        	    |
%  *			|   various uses    |
%  *	%sp:		|                   |
%  *			+-------------------+
% 
% Thus, the memory-resident temps are m[%sp+116],m[%sp+120],...,m[%sp+4092]
% 
% 

reg_stdarg    = const 8.
reg_stdlink   = const 9.
reg_allocptr  = const 10.
reg_limitptr  = const 11.
reg_storeptr  = const 5.
reg_sp        = const 14.
reg_stdcont   = const 15.
reg_fp        = const 30.
reg_savedpc   = const 31. 
ml_framesize  = const 4096.
ml_spillarea  = const 116.

% A heap-limit check consists of a comparison (limitptr minus allocptr)
% and a conditional branch.  When a standard SML/NJ function is called, 
% the comparison is done before the call, so as to make good use
% of the delay slot, and the conditional branch is done afterwards, inside
% the called function.  Thus, the carry flag is zero if and only if
% there is at least 4k of heap space left.  This relation between
% the condition codes, the limitptr, and the allocptr, is "limit_test".
%abbrev
_initial_machine_state =
[r : tregs][m : tmem]
   eqn (get_reg r zero) zero and eqn (get_reg r icnt) zero and
   mult4? (get_reg r reg_allocptr) and mult4? (get_reg r reg_limitptr).

_limit_test: tregs -> tform =
  [r : tregs] (not (icc_c (get_reg r icc)))
       equiv  (geq (get_reg r reg_limitptr) (get_reg r reg_allocptr)).

_return_address: tnum -> tregs -> tform =
  [x : tnum][r : tregs] eqn (plus (get_reg r reg_stdcont) (const 8)) x.

_reserved_regs : tnum -> tform =
  [x : tnum] eqn x reg_sp or eqn x reg_fp or eqn x reg_savedpc.
% Copyright (c) 2004 Princeton University
%	$Id: safety.elf,v 1.24 2004/06/19 20:30:07 gtan Exp $

_control_at = [x : tnum][r : tregs]
  _exists genpc [g : tm genpc]
     _gen_control_at g r and _normalpc g x
     and (gt (get_reg r icnt) (get_reg r last_cbr)).

_eq_reserved_regs : tregs -> tregs -> tform =
  [r : tregs][r0 : tregs]
   _frl_n [x : tnum] _reserved_regs x imp eqn (get_reg r x) (get_reg r0 x).

specified_step : tm instr =
 instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  _exists3 instr num num [i : tm instr][l : tnum][size : tnum]
  _exists2 genpc registers [g : tm genpc][r'' : tregs]
   _gen_control_at g r  and
   eqn (_nextinstr g) l  and
   _executable r m l and
   _decode m l i size and
   _eq_reserved_regs r r' and
   _@2 registers registers form _updatepc r r'' and
   app_instr i r'' m r' m'.

step : tm instr = instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  app_instr specified_step r m r' m'   or  app_instr api_step r m r' m'.

state = pair registers memory.
_mkstate = _mktuple2 registers memory.
fst_st = _get1of2 registers memory.
snd_st = _get2of2 registers memory.

_stepx: tm state -> tm state -> tform = [x : tm state][y : tm state]
   app_instr step (fst_st x) (snd_st x) (fst_st y) (snd_st y).

_step* : tm instr =
 instr_lam [r : tregs][m : tmem][r' : tregs][m' : tmem]
  _kleene_star state _stepx (_mkstate r m) (_mkstate r' m').

_safe : tregs -> tmem -> tform =
 [r : tregs][m : tmem]
  _forall2 registers memory [r' : tregs][m' : tmem]
    app_instr _step* r m r' m' imp
    _exists2 registers memory [r'' : tregs][m'' : tmem]
      app_instr step r' m' r'' m''.

prog_lam = _lam2 num num form.
prog_app = _@2 num num form.

_next_word : tm num -> tm program -> tm program =
 [n : tm num][f : tm program] prog_lam [i : tnum][j : tnum]
  (eqn i zero imp eqn j n) and
  (not (eqn i zero) imp prog_app f (pred i) j).

%infix right 15 _next_word.

next_word : rep_type -> tm program -> tm program =
 [w : rep_type][ws : tm program]
 (const w) _next_word ws.

%infix right 15 next_word.

no_more_words : tm program = prog_lam [_ : tnum][_ : tnum] false.

_prog_loaded_at : tm program -> tnum -> tregs -> tmem -> tform =
 [prog : tm program][start : tnum][r :tregs][m : tmem]
   _forall3 num num num [l : tnum][w : tnum][start+4l : tnum]
    prog_app prog l w imp
    _plus_mod32 start (times four l) start+4l imp
      eqn (get_mem m start+4l) w
      and _readable r m start+4l and _executable r m start+4l.
% Copyright (c) 2004 Princeton University
%	$Id: initial.elf,v 1.27 2004/05/26 12:06:54 appel Exp $

% Things that are supposed to be true, 
% not by hardware but by convention, about the 
% registers and memory at the beginning of execution.

% When the SML/NJ compiler generates code for a function, it uses
% one of several kinds of calling conventions:
% 
% ESCAPING FUNCTION:  A function that can be called from another module.
%   Any two escaping functions with the same (ML) type must have the
%   same calling convention.  The convention is,
% 
% reg_stdlink         the address of the function
% reg_limitptr         end of heap, minus 4096
% reg_storeptr         (used by generational g.c.)
% reg_allocptr         beginning of unallocated (available) heap
% reg_exncont      
% reg_sp              (access memory-resident temps through this)
% reg_stdarg          (number of arguments is determined by function's type)
% reg_stdcont         "return address"
% reg_stdclos         (access free variables through this)
% reg_varptr          (leave this alone)
% reg_fp               (leave this alone)
% program counter     (address of function being called)
% limit_test          (machine-dependent predicate)
% other registers are used to pass arguments as determined by
% the function's (ML) type.

% ESCAPING CONTINUATION:
% reg_limitptr         end of heap, minus 4096
% reg_storeptr         (used by generational g.c.)
% reg_allocptr         beginning of unallocated (available) heap
% reg_exncont     
% reg_sp              (access memory-resident temps through this)
% reg_stdarg          (number of arguments is determined by function's type)
% reg_stdcont         address of the function
% reg_varptr          (leave this alone)
% reg_fp              (leave this alone)
% program counter     (address of function being called)
% limit_test          (machine-dependent predicate)
% other registers are used to pass arguments as determined by
% the function's (ML) type.
% 
% KNOWN FUNCTION:  
%  The convention here is up to the compiler, but usually includes:
% reg_limitptr         end of heap, minus 4096
% reg_storeptr         (used by generational g.c.)
% reg_allocptr         beginning of unallocated (available) heap
% reg_exncont      
% reg_sp               (access memory-resident temps through this)
% base pointer	       (address of beginning of compilation unit + 4096)
% reg_fp               (leave this alone)
% program counter      (address of function being called)
% other registers are used to pass arguments as the compiler wishes.

% For our proof-carrying code prototype, let us assume that
% the initial entry point, address 0 of the compilation unit,
% is a function that takes one integer argument and returns one integer
% result.  Then we have, 


_block : (tnum -> tform) -> tnum -> tnum -> tform =
 [f : tnum -> tform][start : tnum][end : tnum] 
   _frl_n [x : tnum] leq start x imp lt x end imp f x.

_spill_area_rw : tregs -> tmem -> tform =
 [r : tregs][m : tmem] _block (_readable r m &&n _writable r m) 
                              (plus (get_reg r reg_sp) ml_spillarea)
                              (plus (get_reg r reg_sp) ml_framesize).

_heap_area_rw : tregs -> tmem -> tform =
 [r : tregs][m : tmem] _block (_readable r m &&n _writable r m) 
         (get_reg r reg_allocptr) (plus (get_reg r reg_limitptr) (const 4096)).

_spill_area : tregs -> tnum -> tform =
  [r : tregs]
    _inrange2 (plus (get_reg r reg_sp) ml_spillarea)
       (plus (get_reg r reg_sp) ml_framesize).

_heap_area : tregs -> tnum -> tform =
  [r : tregs]
    _inrange2 (get_reg r reg_allocptr)
       (plus (get_reg r reg_limitptr) (const 4096)).

_prog_area:  tm program -> tnum -> tnum -> tform =
  [prog: tm program][start: tnum][i: tnum]
    _exists2 num num [l: tnum][w: tnum]
    prog_app prog l w and _plus_mod32 start (times four l) i.

_all_fixnums : tregs -> tmem -> tform =
  [r : tregs][m : tmem]
    _frl_n [x : tnum] _is_word (get_mem m x) and _is_word (get_reg r x).

_return_type : tnum -> tregs -> tform =
  [x : tnum][r0 : tregs]
   _modulo x four zero and _is_word x and
   _forall2 registers memory [r : tregs][m : tmem]
     _eq_reserved_regs r r0 imp
     _control_at x r imp 
     _safe r m.

_initial_state : tm program -> tnum -> tregs -> tmem -> tform =
  [prog: tm program][start: tnum][r : tregs][m : tmem]
  _initial_machine_state r m  and
  _all_fixnums r m  and
  _spill_area_rw r m  and
  _heap_area_rw r m  and
  _set_disjoint num (_spill_area r) (_heap_area r)  and
  _set_disjoint num (_heap_area r) (_prog_area prog start)  and
  _set_disjoint num (_prog_area prog start) (_spill_area r)  and
  eqn (get_reg r reg_stdlink) start and
  _is_word (plus (get_reg r reg_limitptr) (const 4096)) and
  _return_type (plus (get_reg r reg_stdcont) (const 8)) r   and
  geq (plus (get_reg r reg_limitptr) (const 4096)) (get_reg r reg_allocptr) and
  _prog_loaded_at prog start r m   and
  _control_at start r.

_exists_initial_state:
  pf (_exists2 program num [prog: tm program][start: tnum]
      _exists2 registers memory [r: tregs][m: tmem]
      _initial_state prog start r m).% Copyright (c) 2004 Princeton University
%	$Id: policy.elf,v 1.14 2004/04/30 20:59:52 appel Exp $

safe_program: tm program -> tform =
 [prog : tm program]
  _forall3 num registers memory [start : tnum][r : tregs][m : tmem] 
   _initial_state prog start r m imp
   _safe r m.

%
% Example of a safety theorem:
%
% my_prog_is_safe: pf (safe_program (
% 81329 next_word
% 293765 next_word
% 93 next_word
% 29387 next_word
% 92387895 next_word
% 129872 next_word
% 938275 next_word
% no_more_words)).
% 

__safe__ : __program__ -> type = [prog: __program__] pf (safe_program prog).
% Copyright (c) 2004 Princeton University

hole: {A: tm form} pf A.
_termhole: {T: tp} tm T.
tphole: rep_type -> tp.
_predhole: {T1: tp}{T2: tp}{T: tp} (tm T1 -> tm T2 -> tm form) -> tm T =  
   [T1: tp][T2: tp][T: tp]
   [f: tm T1 -> tm T2 -> tm form]
   _@ (T1 arrow T2 arrow form) T
   (_termhole ((T1 arrow T2 arrow form) arrow T))
   (_lam2 T1 T2 form f).
bighole : {A:tform} pf A = [A:tform] hole A.
1ary : tp -> tp = [t:tp] t arrow t.
2ary : tp -> tp = [t:tp] t arrow 1ary t.
shadowed_0 : tp -> tp = [t:tp] t arrow form.
rel : tp -> tp -> tp = [t1:tp] [t2:tp] t1 arrow shadowed_0 t2.
rel3 : tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] t1 arrow rel t2 t3.
rel4 : tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] t1 arrow rel3 t2 t3 t4.
rel5 : tp -> tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] [t5:tp] t1 arrow rel4 t2 t3 t4 t5.
rel6 : tp -> tp -> tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] [t5:tp] [t6:tp] t1 arrow rel5 t2 t3 t4 t5 t6.
rel7 : tp -> tp -> tp -> tp -> tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] [t4:tp] [t5:tp] [t6:tp] [t7:tp] t1 arrow rel6 t2 t3 t4 t5 t6 t7.
eqrel : tp -> tp = [t:tp] rel t t.
eq_form : tm (eqrel form) = _lam2 form form form ([x3:tm form] [y:tm form] x3 equiv y).
_eq_x : {t:tp} tm (eqrel t) = [t:tp] _lam2 t t form ([x3:tm t] [x4:tm t] _eq t x3 x4).
eq_arith : tm (eqrel num) = _eq_x num.
compos_set : tp -> tp = [t:tp] 2ary (shadowed_0 t).
_emptyset : {t:tp} tm (shadowed_0 t) = [t:tp] _lam t form ([x3:tm t] false).
_singleton : {t:tp} tm (t arrow shadowed_0 t) = [t:tp] _lam2 t t form ([x3:tm t] [y:tm t] _eq t y x3).
_subset : {t:tp} tm (rel (shadowed_0 t) (shadowed_0 t)) = [t:tp] _lam2 (shadowed_0 t) (shadowed_0 t) form ([s1:tm (shadowed_0 t)] [s2:tm (shadowed_0 t)] _forall t ([x3:tm t] _@ t form s1 x3 imp _@ t form s2 x3)).
_set_equiv : {t:tp} tm (eqrel (shadowed_0 t)) = [t:tp] _lam2 (shadowed_0 t) (shadowed_0 t) form ([s1:tm (shadowed_0 t)] [s2:tm (shadowed_0 t)] _@2 (shadowed_0 t) (shadowed_0 t) form (_subset t) s1 s2 and _@2 (shadowed_0 t) (shadowed_0 t) form (_subset t) s2 s1).
_set_union : {t:tp} tm (compos_set t) = [t:tp] _lam3 (shadowed_0 t) (shadowed_0 t) t form ([s1:tm (shadowed_0 t)] [s2:tm (shadowed_0 t)] [x3:tm t] _@ t form s1 x3 or _@ t form s2 x3).
_set_intersection : {t:tp} tm (compos_set t) = [t:tp] _lam3 (shadowed_0 t) (shadowed_0 t) t form ([s1:tm (shadowed_0 t)] [s2:tm (shadowed_0 t)] [x3:tm t] _@ t form s1 x3 and _@ t form s2 x3).
_set_diff : {t:tp} tm (compos_set t) = [t:tp] _lam3 (shadowed_0 t) (shadowed_0 t) t form ([s1:tm (shadowed_0 t)] [s2:tm (shadowed_0 t)] [x3:tm t] _@ t form s1 x3 and not (_@ t form s2 x3)).
_set_compl : {t:tp} tm (1ary (shadowed_0 t)) = [t:tp] _lam2 (shadowed_0 t) t form ([s:tm (shadowed_0 t)] [x3:tm t] not (_@ t form s x3)).
_is_singleton : {t:tp} tm (rel (eqrel t) (shadowed_0 t)) = [t:tp] _lam2 (eqrel t) (shadowed_0 t) form ([eqt:tm (eqrel t)] [s:tm (shadowed_0 t)] _forall2 t t ([x3:tm t] [x4:tm t] _@ t form s x3 imp _@ t form s x4 imp _@2 t t form eqt x3 x4)).
inrange : tm (rel num num) = _lam2 num num form ([n:tm num] [i1:tm num] isInt i1 and geq i1 zero and lt i1 n).
inrange2 : tm (rel3 num num num) = _lam3 num num num form ([lo:tm num] [hi:tm num] [i1:tm num] isInt i1 and leq lo i1 and lt i1 hi).
_agree_over_set : {t1:tp} {t2:tp} tm (rel3 (shadowed_0 t1) (t1 arrow t2) (t1 arrow t2)) = [t1:tp] [t2:tp] _lam3 (t1 arrow form) (t1 arrow t2) (t1 arrow t2) form ([s:tm (t1 arrow form)] [m:tm (t1 arrow t2)] [m':tm (t1 arrow t2)] _forall t1 ([x3:tm t1] _@ t1 form s x3 imp _eq t2 (_@ t1 t2 m x3) (_@ t1 t2 m' x3))).
_agree_outside_set : {t1:tp} {t2:tp} tm (rel3 (shadowed_0 t1) (t1 arrow t2) (t1 arrow t2)) = [t1:tp] [t2:tp] _lam3 (t1 arrow form) (t1 arrow t2) (t1 arrow t2) form ([s:tm (t1 arrow form)] [m:tm (t1 arrow t2)] [m':tm (t1 arrow t2)] _forall t1 ([x3:tm t1] not (_@ t1 form s x3) imp _eq t2 (_@ t1 t2 m x3) (_@ t1 t2 m' x3))).
list : tp -> tp = [t:tp] rel num t.
_list_cons : {t:tp} tm (eqrel t arrow t arrow 1ary (list t)) = [t:tp] _lam3 (eqrel t) t (list t) (list t) ([eq_rel1:tm (eqrel t)] [hd:tm t] [lst:tm (list t)] _lam2 num t form ([i1:tm num] [x3:tm t] if (_eq num i1 zero) (_@2 t t form eq_rel1 x3 hd) (_@2 num t form lst (pred i1) x3))).
_list_nil : {t:tp} tm (list t) = [t:tp] _lam2 num t form ([i1:tm num] [x3:tm t] false).
_forall7 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} (tm a -> tm b -> tm c1 -> tm d -> tm e -> tm f -> tm g -> tform) -> tform = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [X:tm a -> tm b -> tm c2 -> tm d -> tm e -> tm f -> tm g -> tform] _forall a ([xa:tm a] _forall6 b c2 d e f g ([xb:tm b] [xc:tm c2] [xd:tm d] [xe:tm e] [xf:tm f] [xg:tm g] X xa xb xc xd xe xf xg)).
_forall8 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} {h:tp} (tm a -> tm b -> tm c1 -> tm d -> tm e -> tm f -> tm g -> tm h -> tform) -> tform = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [h:tp] [X:tm a -> tm b -> tm c2 -> tm d -> tm e -> tm f -> tm g -> tm h -> tform] _forall a ([xa:tm a] _forall7 b c2 d e f g h ([xb:tm b] [xc:tm c2] [xd:tm d] [xe:tm e] [xf:tm f] [xg:tm g] [xh:tm h] X xa xb xc xd xe xf xg xh)).
_forall9 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} {h:tp} {i1:tp} (tm a -> tm b -> tm c1 -> tm d -> tm e -> tm f -> tm g -> tm h -> tm i1 -> tform) -> tform = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [h:tp] [i2:tp] [X:tm a -> tm b -> tm c2 -> tm d -> tm e -> tm f -> tm g -> tm h -> tm i2 -> tform] _forall a ([xa:tm a] _forall8 b c2 d e f g h i2 ([xb:tm b] [xc:tm c2] [xd:tm d] [xe:tm e] [xf:tm f] [xg:tm g] [xh:tm h] [xi:tm i2] X xa xb xc xd xe xf xg xh xi)).
_forall10 : {a:tp} {b:tp} {c1:tp} {d:tp} {e:tp} {f:tp} {g:tp} {h:tp} {i1:tp} {j:tp} (tm a -> tm b -> tm c1 -> tm d -> tm e -> tm f -> tm g -> tm h -> tm i1 -> tm j -> tform) -> tform = [a:tp] [b:tp] [c2:tp] [d:tp] [e:tp] [f:tp] [g:tp] [h:tp] [i2:tp] [j:tp] [X:tm a -> tm b -> tm c2 -> tm d -> tm e -> tm f -> tm g -> tm h -> tm i2 -> tm j -> tform] _forall a ([xa:tm a] _forall9 b c2 d e f g h i2 j ([xb:tm b] [xc:tm c2] [xd:tm d] [xe:tm e] [xf:tm f] [xg:tm g] [xh:tm h] [xi:tm i2] [xj:tm j] X xa xb xc xd xe xf xg xh xi xj)).
forall : {T:tp} (tm T -> tform) -> tform = [T:tp] [x3:tm T -> tform] _forall T ([x4:tm T] x3 x4).
forall2 : {T1:tp} {T2:tp} (tm T1 -> tm T2 -> tform) -> tform = [T1:tp] [T2:tp] [x3:tm T1 -> tm T2 -> tform] _forall2 T1 T2 ([x4:tm T1] [x5:tm T2] x3 x4 x5).
forall3 : {T1:tp} {T2:tp} {T3:tp} (tm T1 -> tm T2 -> tm T3 -> tform) -> tform = [T1:tp] [T2:tp] [T3:tp] [x3:tm T1 -> tm T2 -> tm T3 -> tform] _forall3 T1 T2 T3 ([x4:tm T1] [x5:tm T2] [x6:tm T3] x3 x4 x5 x6).
forall4 : {A:tp} {B:tp} {C:tp} {D:tp} (tm A -> tm B -> tm C -> tm D -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [f:tm A -> tm B -> tm C -> tm D -> tform] _forall4 A B C D ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] f x3 x4 x5 x6).
forall5 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [f:tm A -> tm B -> tm C -> tm D -> tm E -> tform] _forall5 A B C D E ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] f x3 x4 x5 x6 x7).
forall6 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [f:tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tform] _forall6 A B C D E F ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] [x8:tm F] f x3 x4 x5 x6 x7 x8).
forall7 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [X:tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tform] _forall7 A B C D E F G ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] [x8:tm F] [x9:tm G] X x3 x4 x5 x6 x7 x8 x9).
forall8 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} {H:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [H:tp] [X:tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tform] _forall8 A B C D E F G H ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] [x8:tm F] [x9:tm G] [x10:tm H] X x3 x4 x5 x6 x7 x8 x9 x10).
forall9 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} {H:tp} {I:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tm I -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [H:tp] [I:tp] [X:tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tm I -> tform] _forall9 A B C D E F G H I ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] [x8:tm F] [x9:tm G] [x10:tm H] [x11:tm I] X x3 x4 x5 x6 x7 x8 x9 x10 x11).
forall10 : {A:tp} {B:tp} {C:tp} {D:tp} {E:tp} {F:tp} {G:tp} {H:tp} {I:tp} {J:tp} (tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tm I -> tm J -> tform) -> tform = [A:tp] [B:tp] [C:tp] [D:tp] [E:tp] [F:tp] [G:tp] [H:tp] [I:tp] [J:tp] [X:tm A -> tm B -> tm C -> tm D -> tm E -> tm F -> tm G -> tm H -> tm I -> tm J -> tform] _forall10 A B C D E F G H I J ([x3:tm A] [x4:tm B] [x5:tm C] [x6:tm D] [x7:tm E] [x8:tm F] [x9:tm G] [x10:tm H] [x11:tm I] [x12:tm J] X x3 x4 x5 x6 x7 x8 x9 x10 x11 x12).
exists : {T:tp} (tm T -> tm form) -> tm form = [T:tp] [x3:tm T -> tm form] _exists T ([x4:tm T] x3 x4).
exists2 : {T1:tp} {T2:tp} (tm T1 -> tm T2 -> tform) -> tform = [T1:tp] [T2:tp] [f:tm T1 -> tm T2 -> tform] _exists2 T1 T2 ([x3:tm T1] [x4:tm T2] f x3 x4).
exists3 : {T1:tp} {T2:tp} {T3:tp} (tm T1 -> tm T2 -> tm T3 -> tform) -> tform = [T1:tp] [T2:tp] [T3:tp] [f:tm T1 -> tm T2 -> tm T3 -> tform] _exists3 T1 T2 T3 ([x3:tm T1] [x4:tm T2] [x5:tm T3] f x3 x4 x5).
exists4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform) -> tm form = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] exists X1 ([x3:tm X1] exists3 X2 X3 X4 ([x4:tm X2] [x5:tm X3] [x6:tm X4] f x3 x4 x5 x6)).
exists5 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform) -> tm form = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] exists X1 ([x3:tm X1] exists4 X2 X3 X4 X5 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] f x3 x4 x5 x6 x7)).
exists6 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform) -> tm form = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] exists X1 ([x3:tm X1] exists5 X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] f x3 x4 x5 x6 x7 x8)).
eq : {T:tp} tm T -> tm T -> tform = [T:tp] [x3:tm T] [x4:tm T] _eq T x3 x4.
neq : {X1:tp} tm X1 -> tm X1 -> tform = [X1:tp] [a:tm X1] [b:tm X1] not (eq X1 a b).
== : {T:tp} tm T -> tm T -> tm form = [T:tp] [x3:tm T] [x4:tm T] _eq T x3 x4.
!= : {T:tp} tm T -> tm T -> tm form = [T:tp] [a:tm T] [b:tm T] not (eq T a b).
@ : {T1:tp} {T2:tp} tm (T1 arrow T2) -> tm T1 -> tm T2 = [T1:tp] [T2:tp] [x3:tm (T1 arrow T2)] [x4:tm T1] _@ T1 T2 x3 x4.
@1 : {X1:tp} {X2:tp} tm (X1 arrow X2) -> tm X1 -> tm X2 = [X1:tp] [X2:tp] [f:tm (X1 arrow X2)] [x3:tm X1] @ X1 X2 f x3.
@2 : {X1:tp} {X2:tp} {X3:tp} tm (X1 arrow X2 arrow X3) -> tm X1 -> tm X2 -> tm X3 = [X1:tp] [X2:tp] [X3:tp] [f:tm (X1 arrow X2 arrow X3)] [x3:tm X1] [x4:tm X2] @1 X2 X3 (@1 X1 (X2 arrow X3) f x3) x4.
@3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} tm (X1 arrow X2 arrow X3 arrow X4) -> tm X1 -> tm X2 -> tm X3 -> tm X4 = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [f:tm (X1 arrow X2 arrow X3 arrow X4)] [x3:tm X1] [x4:tm X2] [x5:tm X3] @2 X2 X3 X4 (@1 X1 (X2 arrow X3 arrow X4) f x3) x4 x5.
lam : {T1:tp} {T2:tp} (tm T1 -> tm T2) -> tm (T1 arrow T2) = [T1:tp] [T2:tp] [x3:tm T1 -> tm T2] _lam T1 T2 ([x4:tm T1] x3 x4).
lam2 : {T1:tp} {T2:tp} {T3:tp} (tm T1 -> tm T2 -> tm T3) -> tm (T1 arrow T2 arrow T3) = [T1:tp] [T2:tp] [T3:tp] [f:tm T1 -> tm T2 -> tm T3] _lam2 T1 T2 T3 ([x3:tm T1] [x4:tm T2] f x3 x4).
lam3 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} (tm T1 -> tm T2 -> tm T3 -> tm T4) -> tm (T1 arrow T2 arrow T3 arrow T4) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] [f:tm T1 -> tm T2 -> tm T3 -> tm T4] _lam3 T1 T2 T3 T4 ([x3:tm T1] [x4:tm T2] [x5:tm T3] f x3 x4 x5).
lam4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} {T5:tp} (tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5) -> tm (T1 arrow T2 arrow T3 arrow T4 arrow T5) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] [T5:tp] [f:tm T1 -> tm T2 -> tm T3 -> tm T4 -> tm T5] _lam4 T1 T2 T3 T4 T5 ([x3:tm T1] [x4:tm T2] [x5:tm T3] [x6:tm T4] f x3 x4 x5 x6).
lam5 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6) ([x3:tm X1] lam4 X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] f x3 x4 x5 x6 x7)).
lam6 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7) ([x3:tm X1] lam5 X2 X3 X4 X5 X6 X7 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] f x3 x4 x5 x6 x7 x8)).
lam7 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8) ([x3:tm X1] lam6 X2 X3 X4 X5 X6 X7 X8 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] f x3 x4 x5 x6 x7 x8 x9)).
lam8 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9) ([x3:tm X1] lam7 X2 X3 X4 X5 X6 X7 X8 X9 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] f x3 x4 x5 x6 x7 x8 x9 x10)).
lam9 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10) ([x3:tm X1] lam8 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] f x3 x4 x5 x6 x7 x8 x9 x10 x11)).
lam10 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11) ([x3:tm X1] lam9 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)).
lam11 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12) ([x3:tm X1] lam10 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] [x13:tm X11] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)).
lam12 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13) ([x3:tm X1] lam11 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] [x13:tm X11] [x14:tm X12] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14)).
lam13 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14) ([x3:tm X1] lam12 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] [x13:tm X11] [x14:tm X12] [x15:tm X13] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15)).
lam14 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {X15:tp} (tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14 -> tm X15) -> tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow X15) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [X15:tp] [f:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14 -> tm X15] lam X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow X15) ([x3:tm X1] lam13 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 X15 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] [x13:tm X11] [x14:tm X12] [x15:tm X13] [x16:tm X14] f x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)).
forall_i : {T:tp} {F:tm T -> tform} ({a:tm T} pf (F a)) -> pf (forall T ([x3:tm T] F x3)) = [T:tp] [F:tm T -> tform] [x3:{a:tm T} pf (F a)] _forall_i T ([x4:tm T] F x4) ([a:tm T] x3 a).
forall2_i : {X1:tp} {X2:tp} {F:tm X1 -> tm X2 -> tform} ({a:tm X1} {b:tm X2} pf (F a b)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] F x3 x4)) = [X1:tp] [X2:tp] [F:tm X1 -> tm X2 -> tform] [p1:{a:tm X1} {b:tm X2} pf (F a b)] forall_i X1 ([x3:tm X1] forall X2 ([x4:tm X2] F x3 x4)) ([x3:tm X1] forall_i X2 ([x4:tm X2] F x3 x4) ([a:tm X2] p1 x3 a)).
forall3_i : {X1:tp} {X2:tp} {X3:tp} {F:tm X1 -> tm X2 -> tm X3 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} pf (F a b c1)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] F x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [F:tm X1 -> tm X2 -> tm X3 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} pf (F a b c2)] forall_i X1 ([x3:tm X1] forall2 X2 X3 ([x4:tm X2] [x5:tm X3] F x3 x4 x5)) ([x3:tm X1] forall2_i X2 X3 ([x4:tm X2] [x5:tm X3] F x3 x4 x5) ([a:tm X2] [b:tm X3] p1 x3 a b)).
forall4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} pf (F a b c1 d)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] F x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} pf (F a b c2 d)] forall_i X1 ([x3:tm X1] forall3 X2 X3 X4 ([x4:tm X2] [x5:tm X3] [x6:tm X4] F x3 x4 x5 x6)) ([x3:tm X1] forall3_i X2 X3 X4 ([x4:tm X2] [x5:tm X3] [x6:tm X4] F x3 x4 x5 x6) ([a:tm X2] [b:tm X3] [c3:tm X4] p1 x3 a b c3)).
forall5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} pf (F a b c1 d e)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} pf (F a b c2 d e)] forall_i X1 ([x3:tm X1] forall4 X2 X3 X4 X5 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F x3 x4 x5 x6 x7)) ([x3:tm X1] forall4_i X2 X3 X4 X5 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F x3 x4 x5 x6 x7) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] p1 x3 a b c3 d)).
forall6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (F a b c1 d e f)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] F x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (F a b c2 d e f)] forall_i X1 ([x3:tm X1] forall5 X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] F x3 x4 x5 x6 x7 x8)) ([x3:tm X1] forall5_i X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] F x3 x4 x5 x6 x7 x8) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] [e:tm X6] p1 x3 a b c3 d e)).
forall7_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} pf (F a b c1 d e f g)) -> pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] F x3 x4 x5 x6 x7 x8 x9)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} pf (F a b c2 d e f g)] forall_i X1 ([x3:tm X1] forall6 X2 X3 X4 X5 X6 X7 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] F x3 x4 x5 x6 x7 x8 x9)) ([x3:tm X1] forall6_i X2 X3 X4 X5 X6 X7 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] F x3 x4 x5 x6 x7 x8 x9) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] [e:tm X6] [f:tm X7] p1 x3 a b c3 d e f)).
forall8_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} pf (F a b c1 d e f g h)) -> pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} pf (F a b c2 d e f g h)] forall_i X1 ([x3:tm X1] forall7 X2 X3 X4 X5 X6 X7 X8 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10)) ([x3:tm X1] forall7_i X2 X3 X4 X5 X6 X7 X8 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] [e:tm X6] [f:tm X7] [g:tm X8] p1 x3 a b c3 d e f g)).
forall9_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i1:tm X9} pf (F a b c1 d e f g h i1)) -> pf (forall9 X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i2:tm X9} pf (F a b c2 d e f g h i2)] forall_i X1 ([x3:tm X1] forall8 X2 X3 X4 X5 X6 X7 X8 X9 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) ([x3:tm X1] forall8_i X2 X3 X4 X5 X6 X7 X8 X9 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] [e:tm X6] [f:tm X7] [g:tm X8] [h:tm X9] p1 x3 a b c3 d e f g h)).
forall10_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform} ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i1:tm X9} {j:tm X10} pf (F a b c1 d e f g h i1 j)) -> pf (forall10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform] [p1:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i2:tm X9} {j:tm X10} pf (F a b c2 d e f g h i2 j)] forall_i X1 ([x3:tm X1] forall9 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) ([x3:tm X1] forall9_i X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12) ([a:tm X2] [b:tm X3] [c3:tm X4] [d:tm X5] [e:tm X6] [f:tm X7] [g:tm X8] [h:tm X9] [i3:tm X10] p1 x3 a b c3 d e f g h i3)).
forall_e : {T:tp} {F:tm T -> tform} pf (forall T ([x3:tm T] F x3)) -> ({a:tm T} pf (F a)) = [T:tp] [F:tm T -> tform] [x3:pf (forall T ([x3:tm T] F x3))] [a:tm T] _forall_e T ([x4:tm T] F x4) x3 a.
forall2_e : {X1:tp} {X2:tp} {F:tm X1 -> tm X2 -> tform} pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] F x3 x4)) -> ({a:tm X1} {b:tm X2} pf (F a b)) = [X1:tp] [X2:tp] [F:tm X1 -> tm X2 -> tform] [p1:pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] F x3 x4))] [a:tm X1] [b:tm X2] forall_e X2 ([x3:tm X2] F a x3) (forall_e X1 ([x3:tm X1] _forall X2 ([x4:tm X2] F x3 x4)) p1 a) b.
forall3_e : {X1:tp} {X2:tp} {X3:tp} {F:tm X1 -> tm X2 -> tm X3 -> tform} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] F x3 x4 x5)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} pf (F a b c1)) = [X1:tp] [X2:tp] [X3:tp] [F:tm X1 -> tm X2 -> tm X3 -> tform] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] F x3 x4 x5))] [a:tm X1] [b:tm X2] [c2:tm X3] forall_e X3 ([x3:tm X3] F a b x3) (forall2_e X1 X2 ([x3:tm X1] [x4:tm X2] _forall X3 ([x5:tm X3] F x3 x4 x5)) p1 a b) c2.
forall4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] F x3 x4 x5 x6)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} pf (F a b c1 d)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] F x3 x4 x5 x6))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] forall_e X4 ([x3:tm X4] F a b c2 x3) (forall3_e X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] _forall X4 ([x6:tm X4] F x3 x4 x5 x6)) p1 a b c2) d.
forall5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform} pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F x3 x4 x5 x6 x7)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} pf (F a b c1 d e)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] [p1:pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F x3 x4 x5 x6 x7))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] forall_e X5 ([x3:tm X5] F a b c2 d x3) (forall4_e X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] _forall X5 ([x7:tm X5] F x3 x4 x5 x6 x7)) p1 a b c2 d) e.
forall6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform} pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] F x3 x4 x5 x6 x7 x8)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (F a b c1 d e f)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] [p1:pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] F x3 x4 x5 x6 x7 x8))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] forall_e X6 ([x3:tm X6] F a b c2 d e x3) (forall5_e X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] _forall X6 ([x8:tm X6] F x3 x4 x5 x6 x7 x8)) p1 a b c2 d e) f.
forall7_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform} pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] F x3 x4 x5 x6 x7 x8 x9)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} pf (F a b c1 d e f g)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform] [p1:pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] F x3 x4 x5 x6 x7 x8 x9))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [g:tm X7] forall_e X7 ([x3:tm X7] F a b c2 d e f x3) (forall6_e X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] _forall X7 ([x9:tm X7] F x3 x4 x5 x6 x7 x8 x9)) p1 a b c2 d e f) g.
forall8_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform} pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} pf (F a b c1 d e f g h)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform] [p1:pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [g:tm X7] [h:tm X8] forall_e X8 ([x3:tm X8] F a b c2 d e f g x3) (forall7_e X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] _forall X8 ([x10:tm X8] F x3 x4 x5 x6 x7 x8 x9 x10)) p1 a b c2 d e f g) h.
forall9_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tform} pf (forall9 X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i1:tm X9} pf (F a b c1 d e f g h i1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tform] [p1:pf (forall9 X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [g:tm X7] [h:tm X8] [i2:tm X9] forall_e X9 ([x3:tm X9] F a b c2 d e f g h x3) (forall8_e X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] _forall X9 ([x11:tm X9] F x3 x4 x5 x6 x7 x8 x9 x10 x11)) p1 a b c2 d e f g h) i2.
forall10_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform} pf (forall10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} {g:tm X7} {h:tm X8} {i1:tm X9} {j:tm X10} pf (F a b c1 d e f g h i1 j)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [F:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform] [p1:pf (forall10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12))] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [g:tm X7] [h:tm X8] [i2:tm X9] [j:tm X10] forall_e X10 ([x3:tm X10] F a b c2 d e f g h i2 x3) (forall9_e X1 X2 X3 X4 X5 X6 X7 X8 X9 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] _forall X10 ([x12:tm X10] F x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) p1 a b c2 d e f g h i2) j.
exists_i : {T:tp} {A:tm T -> tform} {x3:tm T} pf (A x3) -> pf (exists T ([x4:tm T] A x4)) = [T:tp] [A:tm T -> tform] [x4:tm T] [p1:pf (A x4)] forall_i form ([x3:tm form] forall T ([x5:tm T] A x5 imp x3) imp x3) ([b:tform] _imp_i (forall T ([x6:tm T] A x6 imp b)) b ([p2:pf (forall T ([x7:tm T] A x7 imp b))] _imp_e (A x4) b (forall_e T ([x3:tm T] A x3 imp b) p2 x4) p1)).
exists2_i : {X1:tp} {X2:tp} {A:tm X1 -> tm X2 -> tform} {a:tm X1} {b:tm X2} pf (A a b) -> pf (exists2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4)) = [X1:tp] [X2:tp] [A:tm X1 -> tm X2 -> tform] [a:tm X1] [b:tm X2] [Q:pf (A a b)] exists_i X1 ([x3:tm X1] _exists X2 ([x4:tm X2] A x3 x4)) a (exists_i X2 ([x3:tm X2] A a x3) b Q).
exists3_i : {X1:tp} {X2:tp} {X3:tp} {A:tm X1 -> tm X2 -> tm X3 -> tform} {a:tm X1} {b:tm X2} {c1:tm X3} pf (A a b c1) -> pf (exists3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] A x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [A:tm X1 -> tm X2 -> tm X3 -> tform] [a:tm X1] [b:tm X2] [c2:tm X3] [Q:pf (A a b c2)] exists_i X1 ([x3:tm X1] _exists2 X2 X3 ([x4:tm X2] [x5:tm X3] A x3 x4 x5)) a (exists_i X2 ([x3:tm X2] _exists X3 ([x4:tm X3] A a x3 x4)) b (exists_i X3 ([x3:tm X3] A a b x3) c2 Q)).
exists4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform} {a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} pf (A a b c1 d) -> pf (exists4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] A x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [Q:pf (A a b c2 d)] exists_i X1 ([x3:tm X1] exists3 X2 X3 X4 ([x4:tm X2] [x5:tm X3] [x6:tm X4] A x3 x4 x5 x6)) a (exists_i X2 ([x3:tm X2] _exists2 X3 X4 ([x4:tm X3] [x5:tm X4] A a x3 x4 x5)) b (exists_i X3 ([x3:tm X3] _exists X4 ([x4:tm X4] A a b x3 x4)) c2 (exists_i X4 ([x3:tm X4] A a b c2 x3) d Q))).
exists5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform} {a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} pf (A a b c1 d e) -> pf (exists5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] A x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [Q:pf (A a b c2 d e)] exists_i X1 ([x3:tm X1] exists4 X2 X3 X4 X5 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] A x3 x4 x5 x6 x7)) a (exists_i X2 ([x3:tm X2] exists3 X3 X4 X5 ([x4:tm X3] [x5:tm X4] [x6:tm X5] A a x3 x4 x5 x6)) b (exists_i X3 ([x3:tm X3] _exists2 X4 X5 ([x4:tm X4] [x5:tm X5] A a b x3 x4 x5)) c2 (exists_i X4 ([x3:tm X4] _exists X5 ([x4:tm X5] A a b c2 x3 x4)) d (exists_i X5 ([x3:tm X5] A a b c2 d x3) e Q)))).
exists6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform} {a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (A a b c1 d e f) -> pf (exists6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] A x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] [a:tm X1] [b:tm X2] [c2:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [Q:pf (A a b c2 d e f)] exists_i X1 ([x3:tm X1] exists5 X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] A x3 x4 x5 x6 x7 x8)) a (exists_i X2 ([x3:tm X2] exists4 X3 X4 X5 X6 ([x4:tm X3] [x5:tm X4] [x6:tm X5] [x7:tm X6] A a x3 x4 x5 x6 x7)) b (exists_i X3 ([x3:tm X3] exists3 X4 X5 X6 ([x4:tm X4] [x5:tm X5] [x6:tm X6] A a b x3 x4 x5 x6)) c2 (exists_i X4 ([x3:tm X4] _exists2 X5 X6 ([x4:tm X5] [x5:tm X6] A a b c2 x3 x4 x5)) d (exists_i X5 ([x3:tm X5] _exists X6 ([x4:tm X6] A a b c2 d x3 x4)) e (exists_i X6 ([x3:tm X6] A a b c2 d e x3) f Q))))).
exists_e : {T:tp} {A:tm T -> tm form} {B:tform} pf (exists T ([x3:tm T] A x3)) -> ({x3:tm T} pf (A x3) -> pf B) -> pf B = [T:tp] [A:tm T -> tm form] [B:tform] [p1:pf (forall form ([b:tm form] forall T ([x4:tm T] A x4 imp b) imp b))] [p2:{x5:tm T} pf (A x5) -> pf B] _imp_e (forall T ([x6:tm T] A x6 imp B)) B (forall_e form ([x3:tm form] forall T ([x7:tm T] A x7 imp x3) imp x3) p1 B) (forall_i T ([x3:tm T] A x3 imp B) ([x8:tm T] _imp_i (A x8) B ([p3:pf (A x8)] p2 x8 p3))).
exists2_e : {X1:tp} {X2:tp} {A:tm X1 -> tm X2 -> tform} {B:tform} pf (exists2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4)) -> ({a:tm X1} {b:tm X2} pf (A a b) -> pf B) -> pf B = [X1:tp] [X2:tp] [A:tm X1 -> tm X2 -> tform] [B:tform] [p1:pf (exists2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4))] [p2:{a:tm X1} {b:tm X2} pf (A a b) -> pf B] exists_e X1 ([x3:tm X1] _exists X2 ([x4:tm X2] A x3 x4)) B p1 ([a:tm X1] [p3:pf (exists X2 ([b:tm X2] A a b))] exists_e X2 ([x3:tm X2] A a x3) B p3 ([b:tm X2] [p4:pf (A a b)] p2 a b p4)).
exists3_e : {X1:tp} {X2:tp} {X3:tp} {A:tm X1 -> tm X2 -> tm X3 -> tform} {B:tform} pf (exists3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] A x3 x4 x5)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} pf (A a b c1) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [A:tm X1 -> tm X2 -> tm X3 -> tform] [B:tform] [p1:pf (exists3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] A x3 x4 x5))] [p2:{a:tm X1} {b:tm X2} {c2:tm X3} pf (A a b c2) -> pf B] exists_e X1 ([x3:tm X1] _exists2 X2 X3 ([x4:tm X2] [x5:tm X3] A x3 x4 x5)) B p1 ([a:tm X1] [p3:pf (exists2 X2 X3 ([x3:tm X2] [x4:tm X3] A a x3 x4))] exists2_e X2 X3 ([x3:tm X2] [x4:tm X3] A a x3 x4) B p3 ([b:tm X2] [c3:tm X3] [p4:pf (A a b c3)] p2 a b c3 p4)).
exists4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform} {B:tform} pf (exists4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] A x3 x4 x5 x6)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} pf (A a b c1 d) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] [B:tform] [p1:pf (exists4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] A x3 x4 x5 x6))] [p2:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} pf (A a b c2 d) -> pf B] exists_e X1 ([x3:tm X1] exists3 X2 X3 X4 ([x4:tm X2] [x5:tm X3] [x6:tm X4] A x3 x4 x5 x6)) B p1 ([a:tm X1] [p3:pf (exists3 X2 X3 X4 ([x3:tm X2] [x4:tm X3] [x5:tm X4] A a x3 x4 x5))] exists3_e X2 X3 X4 ([x3:tm X2] [x4:tm X3] [x5:tm X4] A a x3 x4 x5) B p3 ([b:tm X2] [c3:tm X3] [d:tm X4] [p4:pf (A a b c3 d)] p2 a b c3 d p4)).
exists5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform} {B:tform} pf (exists5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] A x3 x4 x5 x6 x7)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} pf (A a b c1 d e) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] [B:tform] [p1:pf (exists5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] A x3 x4 x5 x6 x7))] [p2:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} pf (A a b c2 d e) -> pf B] exists_e X1 ([x3:tm X1] exists4 X2 X3 X4 X5 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] A x3 x4 x5 x6 x7)) B p1 ([a:tm X1] [p3:pf (exists4 X2 X3 X4 X5 ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X5] A a x3 x4 x5 x6))] exists4_e X2 X3 X4 X5 ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X5] A a x3 x4 x5 x6) B p3 ([b:tm X2] [c3:tm X3] [d:tm X4] [e:tm X5] [p4:pf (A a b c3 d e)] p2 a b c3 d e p4)).
exists6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform} {B:tform} pf (exists6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] A x3 x4 x5 x6 x7 x8)) -> ({a:tm X1} {b:tm X2} {c1:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (A a b c1 d e f) -> pf B) -> pf B = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [A:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] [B:tform] [p1:pf (exists6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] A x3 x4 x5 x6 x7 x8))] [p2:{a:tm X1} {b:tm X2} {c2:tm X3} {d:tm X4} {e:tm X5} {f:tm X6} pf (A a b c2 d e f) -> pf B] exists_e X1 ([x3:tm X1] exists5 X2 X3 X4 X5 X6 ([x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] A x3 x4 x5 x6 x7 x8)) B p1 ([a:tm X1] [p3:pf (exists5 X2 X3 X4 X5 X6 ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X5] [x7:tm X6] A a x3 x4 x5 x6 x7))] exists5_e X2 X3 X4 X5 X6 ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X5] [x7:tm X6] A a x3 x4 x5 x6 x7) B p3 ([b:tm X2] [c3:tm X3] [d:tm X4] [e:tm X5] [f:tm X6] [p4:pf (A a b c3 d e f)] p2 a b c3 d e f p4)).
exists_ei : {X1:tp} {A:tm X1 -> tm form} {B:tm X1 -> tform} pf (exists X1 ([x3:tm X1] A x3)) -> ({x3:tm X1} pf (A x3) -> pf (B x3)) -> pf (exists X1 ([x3:tm X1] B x3)) = [X1:tp] [A:tm X1 -> tm form] [B:tm X1 -> tform] [p1:pf (exists X1 ([x3:tm X1] A x3))] [l8:{x4:tm X1} pf (A x4) -> pf (B x4)] exists_e X1 ([x3:tm X1] A x3) (exists X1 ([x3:tm X1] B x3)) p1 ([x5:tm X1] [p2:pf (A x5)] exists_i X1 ([x3:tm X1] B x3) x5 (l8 x5 p2)).
beta_e : {T2:tp} {T1:tp} {F:tm T1 -> tm T2} {A:tm T1} {h:tm T2 -> tm form} pf (h (@ T1 T2 (_lam T1 T2 ([x3:tm T1] F x3)) A)) -> pf (h (F A)) = [T2:tp] [T1:tp] [F:tm T1 -> tm T2] [A:tm T1] [h:tm T2 -> tm form] [x3:pf (h (@ T1 T2 (_lam T1 T2 ([x3:tm T1] F x3)) A))] _beta_e T1 T2 ([x4:tm T1] F x4) A ([x4:tm T2] h x4) x3.
beta_i : {T2:tp} {T1:tp} {F:tm T1 -> tm T2} {A:tm T1} {h:tm T2 -> tm form} pf (h (F A)) -> pf (h (@ T1 T2 (lam T1 T2 ([x3:tm T1] F x3)) A)) = [T2:tp] [T1:tp] [F:tm T1 -> tm T2] [A:tm T1] [h:tm T2 -> tm form] [p1:pf (h (F A))] _imp_e (h (F A)) (h (@ T1 T2 (lam T1 T2 ([x3:tm T1] F x3)) A)) (beta_e T2 T1 ([x3:tm T1] F x3) A ([x3:tm T2] h x3 imp h (@ T1 T2 (lam T1 T2 ([x4:tm T1] F x4)) A)) (_imp_i (h (@ T1 T2 (_lam T1 T2 ([x3:tm T1] F x3)) A)) (h (@ T1 T2 (_lam T1 T2 ([x3:tm T1] F x3)) A)) ([p2:pf (h (@ T1 T2 (_lam T1 T2 ([x3:tm T1] F x3)) A))] p2))) p1.
cut : {A:tform} {B:tform} pf A -> (pf A -> pf B) -> pf B = [A:tform] [B:tform] [p1:pf A] [p2:pf A -> pf B] _imp_e A B (_imp_i A B ([x3:pf A] p2 x3)) p1.
refl : {X1:tp} {X:tm X1} pf (== X1 X X) = [X1:tp] [X:tm X1] forall_i (X1 arrow form) ([x3:tm (X1 arrow form)] _@_f X1 x3 X imp _@_f X1 x3 X) ([A:tm (X1 arrow form)] _imp_i (_@_f X1 A X) (_@_f X1 A X) ([P:pf (_@_f X1 A X)] P)).
congr : {T:tp} {A:tm T} {B:tm T} {h:tm T -> tform} pf (== T A B) -> pf (h B) -> pf (h A) = [T:tp] [A:tm T] [B:tm T] [h:tm T -> tform] [p1:pf (== T A B)] [p2:pf (h B)] beta_e form T ([x3:tm T] h x3) A ([i1:tm form] i1) (_imp_e (@ T form (lam T form ([x3:tm T] h x3)) B) (@ T form (lam T form ([x3:tm T] h x3)) A) (_forall_e (T arrow form) ([g:tm (T arrow form)] @ T form g B imp @ T form g A) p1 (lam T form ([x3:tm T] h x3))) (beta_i form T ([x3:tm T] h x3) B ([i2:tm form] i2) p2)).
congr2 : {TA:tp} {TB:tp} {A1:tm TA} {A2:tm TA} {B1:tm TB} {B2:tm TB} {h:tm TA -> tm TB -> tm form} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (h A2 B2) -> pf (h A1 B1) = [TA:tp] [TB:tp] [A1:tm TA] [A2:tm TA] [B1:tm TB] [B2:tm TB] [h:tm TA -> tm TB -> tm form] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [p1:pf (h A2 B2)] cut (forall2 TA TB ([x3:tm TA] [x4:tm TB] == form (h x3 x4) (h x3 x4))) (h A1 B1) (forall2_i TA TB ([x3:tm TA] [x4:tm TB] == form (h x3 x4) (h x3 x4)) ([a:tm TA] [b:tm TB] refl form (h a b))) ([p2:pf (forall2 TA TB ([a:tm TA] [b:tm TB] == form (h a b) (h a b)))] congr TB B1 B2 ([b:tm TB] h A1 b) eB (congr TA A1 A2 ([a:tm TA] h a B2) eA p1)).
congr3 : {TA:tp} {TB:tp} {TC:tp} {A1:tm TA} {A2:tm TA} {B1:tm TB} {B2:tm TB} {C1:tm TC} {C2:tm TC} {h:tm TA -> tm TB -> tm TC -> tm form} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (== TC C1 C2) -> pf (h A2 B2 C2) -> pf (h A1 B1 C1) = [TA:tp] [TB:tp] [TC:tp] [A1:tm TA] [A2:tm TA] [B1:tm TB] [B2:tm TB] [C1:tm TC] [C2:tm TC] [h:tm TA -> tm TB -> tm TC -> tm form] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [eC:pf (== TC C1 C2)] [p1:pf (h A2 B2 C2)] cut (forall3 TA TB TC ([x3:tm TA] [x4:tm TB] [x5:tm TC] == form (h x3 x4 x5) (h x3 x4 x5))) (h A1 B1 C1) (forall3_i TA TB TC ([x3:tm TA] [x4:tm TB] [x5:tm TC] == form (h x3 x4 x5) (h x3 x4 x5)) ([a:tm TA] [b:tm TB] [c1:tm TC] refl form (h a b c1))) ([p2:pf (forall3 TA TB TC ([a:tm TA] [b:tm TB] [c2:tm TC] == form (h a b c2) (h a b c2)))] congr TC C1 C2 ([c3:tm TC] h A1 B1 c3) eC (congr2 TA TB A1 A2 B1 B2 ([a:tm TA] [b:tm TB] h a b C2) eA eB p1)).
congr4 : {TA:tp} {TB:tp} {TC:tp} {TD:tp} {A1:tm TA} {A2:tm TA} {B1:tm TB} {B2:tm TB} {C1:tm TC} {C2:tm TC} {D1:tm TD} {D2:tm TD} {h:tm TA -> tm TB -> tm TC -> tm TD -> tm form} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (== TC C1 C2) -> pf (== TD D1 D2) -> pf (h A2 B2 C2 D2) -> pf (h A1 B1 C1 D1) = [TA:tp] [TB:tp] [TC:tp] [TD:tp] [A1:tm TA] [A2:tm TA] [B1:tm TB] [B2:tm TB] [C1:tm TC] [C2:tm TC] [D1:tm TD] [D2:tm TD] [h:tm TA -> tm TB -> tm TC -> tm TD -> tm form] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [eC:pf (== TC C1 C2)] [eD:pf (== TD D1 D2)] [p1:pf (h A2 B2 C2 D2)] cut (forall4 TA TB TC TD ([x3:tm TA] [x4:tm TB] [x5:tm TC] [x6:tm TD] == form (h x3 x4 x5 x6) (h x3 x4 x5 x6))) (h A1 B1 C1 D1) (forall4_i TA TB TC TD ([x3:tm TA] [x4:tm TB] [x5:tm TC] [x6:tm TD] == form (h x3 x4 x5 x6) (h x3 x4 x5 x6)) ([a:tm TA] [b:tm TB] [c1:tm TC] [d:tm TD] refl form (h a b c1 d))) ([p2:pf (forall4 TA TB TC TD ([a:tm TA] [b:tm TB] [c2:tm TC] [d:tm TD] == form (h a b c2 d) (h a b c2 d)))] congr2 TC TD C1 C2 D1 D2 ([c3:tm TC] [d:tm TD] h A1 B1 c3 d) eC eD (congr2 TA TB A1 A2 B1 B2 ([a:tm TA] [b:tm TB] h a b C2 D2) eA eB p1)).
congr5 : {TA:tp} {TB:tp} {TC:tp} {TD:tp} {TE:tp} {A1:tm TA} {A2:tm TA} {B1:tm TB} {B2:tm TB} {C1:tm TC} {C2:tm TC} {D1:tm TD} {D2:tm TD} {E1:tm TE} {E2:tm TE} {h:tm TA -> tm TB -> tm TC -> tm TD -> tm TE -> tm form} pf (== TA A1 A2) -> pf (== TB B1 B2) -> pf (== TC C1 C2) -> pf (== TD D1 D2) -> pf (== TE E1 E2) -> pf (h A2 B2 C2 D2 E2) -> pf (h A1 B1 C1 D1 E1) = [TA:tp] [TB:tp] [TC:tp] [TD:tp] [TE:tp] [A1:tm TA] [A2:tm TA] [B1:tm TB] [B2:tm TB] [C1:tm TC] [C2:tm TC] [D1:tm TD] [D2:tm TD] [E1:tm TE] [E2:tm TE] [h:tm TA -> tm TB -> tm TC -> tm TD -> tm TE -> tm form] [eA:pf (== TA A1 A2)] [eB:pf (== TB B1 B2)] [eC:pf (== TC C1 C2)] [eD:pf (== TD D1 D2)] [eE:pf (== TE E1 E2)] [p1:pf (h A2 B2 C2 D2 E2)] cut (forall5 TA TB TC TD TE ([x3:tm TA] [x4:tm TB] [x5:tm TC] [x6:tm TD] [x7:tm TE] == form (h x3 x4 x5 x6 x7) (h x3 x4 x5 x6 x7))) (h A1 B1 C1 D1 E1) (forall5_i TA TB TC TD TE ([x3:tm TA] [x4:tm TB] [x5:tm TC] [x6:tm TD] [x7:tm TE] == form (h x3 x4 x5 x6 x7) (h x3 x4 x5 x6 x7)) ([a:tm TA] [b:tm TB] [c1:tm TC] [d:tm TD] [e:tm TE] refl form (h a b c1 d e))) ([p2:pf (forall5 TA TB TC TD TE ([a:tm TA] [b:tm TB] [c2:tm TC] [d:tm TD] [e:tm TE] == form (h a b c2 d e) (h a b c2 d e)))] congr TE E1 E2 ([e:tm TE] h A1 B1 C1 D1 e) eE (congr4 TA TB TC TD A1 A2 B1 B2 C1 C2 D1 D2 ([a:tm TA] [b:tm TB] [c3:tm TC] [d:tm TD] h a b c3 d E2) eA eB eC eD p1)).
symm : {X1:tp} {A:tm X1} {B:tm X1} pf (== X1 A B) -> pf (== X1 B A) = [X1:tp] [A:tm X1] [B:tm X1] [p1:pf (== X1 A B)] congr X1 A B ([i1:tm X1] == X1 B i1) p1 (refl X1 B).
trans : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 A C) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] congr X1 C B ([i1:tm X1] eq X1 A i1) (symm X1 B C p2) p1.
trans2 : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 A C) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [x3:pf (== X1 A B)] [x4:pf (== X1 B C)] trans X1 A B C x3 x4.
trans3 : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} {D:tm X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 C D) -> pf (== X1 A D) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [D:tm X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] [p3:pf (== X1 C D)] trans X1 A C D (trans2 X1 A B C p1 p2) p3.
trans4 : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} {D:tm X1} {E:tm X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 C D) -> pf (== X1 D E) -> pf (== X1 A E) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [D:tm X1] [E:tm X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] [p3:pf (== X1 C D)] [p4:pf (== X1 D E)] trans X1 A D E (trans3 X1 A B C D p1 p2 p3) p4.
trans5 : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} {D:tm X1} {E:tm X1} {F:tm X1} pf (== X1 A B) -> pf (== X1 B C) -> pf (== X1 C D) -> pf (== X1 D E) -> pf (== X1 E F) -> pf (== X1 A F) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [D:tm X1] [E:tm X1] [F:tm X1] [p1:pf (== X1 A B)] [p2:pf (== X1 B C)] [p3:pf (== X1 C D)] [p4:pf (== X1 D E)] [p5:pf (== X1 E F)] trans X1 A E F (trans4 X1 A B C D E p1 p2 p3 p4) p5.
cut2 : {A:tform} {B:tform} {C:tform} pf A -> pf B -> (pf A -> pf B -> pf C) -> pf C = [A:tform] [B:tform] [C:tform] [p1:pf A] [p2:pf B] [p3:pf A -> pf B -> pf C] cut A C p1 ([z1:pf A] cut B C p2 ([z2:pf B] p3 z1 z2)).
cut3 : {A:tform} {B:tform} {C:tform} {Res:tform} pf A -> pf B -> pf C -> (pf A -> pf B -> pf C -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf A -> pf B -> pf C -> pf Res] cut2 A B Res p1 p2 ([z1:pf A] [z2:pf B] cut C Res p3 ([z3:pf C] p4 z1 z2 z3)).
cut4 : {A:tform} {B:tform} {C:tform} {D:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> (pf A -> pf B -> pf C -> pf D -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf A -> pf B -> pf C -> pf D -> pf Res] cut3 A B C Res p1 p2 p3 ([z1:pf A] [z2:pf B] [z3:pf C] cut D Res p4 ([z4:pf D] p5 z1 z2 z3 z4)).
cut5 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf A -> pf B -> pf C -> pf D -> pf E -> pf Res] cut4 A B C D Res p1 p2 p3 p4 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] cut E Res p5 ([z5:pf E] p6 z1 z2 z3 z4 z5)).
cut6 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Res] cut5 A B C D E Res p1 p2 p3 p4 p5 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] cut F Res p6 ([z6:pf F] p7 z1 z2 z3 z4 z5 z6)).
cut7 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Res] cut6 A B C D E F Res p1 p2 p3 p4 p5 p6 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] cut G Res p7 ([z7:pf G] p8 z1 z2 z3 z4 z5 z6 z7)).
cut8 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Res] cut7 A B C D E F G Res p1 p2 p3 p4 p5 p6 p7 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] cut H Res p8 ([z8:pf H] p9 z1 z2 z3 z4 z5 z6 z7 z8)).
cut9 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Res] cut8 A B C D E F G H Res p1 p2 p3 p4 p5 p6 p7 p8 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] cut I Res p9 ([z9:pf I] p10 z1 z2 z3 z4 z5 z6 z7 z8 z9)).
cut10 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut J Res p10 ([z10:pf J] p11 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10)).
cut12 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut3 J K L Res p10 p11 p12 ([z10:pf J] [z11:pf K] [z12:pf L] p13 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12)).
cut14 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} {O:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [O:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] [p14:pf O] [p15:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut5 J K L M O Res p10 p11 p12 p13 p14 ([z10:pf J] [z11:pf K] [z12:pf L] [z13:pf M] [z14:pf O] p15 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12 z13 z14)).
cut16 : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} {O:tform} {P:tform} {Q:tform} {Res:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf P -> pf Q -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf P -> pf Q -> pf Res) -> pf Res = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [O:tform] [P:tform] [Q:tform] [Res:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] [p14:pf O] [p15:pf P] [p16:pf Q] [p17:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf O -> pf P -> pf Q -> pf Res] cut9 A B C D E F G H I Res p1 p2 p3 p4 p5 p6 p7 p8 p9 ([z1:pf A] [z2:pf B] [z3:pf C] [z4:pf D] [z5:pf E] [z6:pf F] [z7:pf G] [z8:pf H] [z9:pf I] cut7 J K L M O P Q Res p10 p11 p12 p13 p14 p15 p16 ([z10:pf J] [z11:pf K] [z12:pf L] [z13:pf M] [z14:pf O] [z15:pf P] [z16:pf Q] p17 z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12 z13 z14 z15 z16)).
strictify : {X1:tp} {A:tform} tm X1 -> pf A -> pf A = [X1:tp] [A:tform] [x3:tm X1] [p1:pf A] cut (== X1 x3 x3) A (refl X1 x3) ([p2:pf (== X1 x3 x3)] p1).
strictify3 : {T1:tp} {T2:tp} {T3:tp} {A:tform} (tm T1 -> tm T2 -> tm T3) -> pf A -> pf A = [T1:tp] [T2:tp] [T3:tp] [A:tform] [f:tm T1 -> tm T2 -> tm T3] [p1:pf A] cut (forall2 T1 T2 ([x3:tm T1] [x4:tm T2] == T3 (f x3 x4) (f x3 x4))) A (forall2_i T1 T2 ([x3:tm T1] [x4:tm T2] == T3 (f x3 x4) (f x3 x4)) ([a:tm T1] [b:tm T2] refl T3 (f a b))) ([p2:pf (forall2 T1 T2 ([x3:tm T1] [y:tm T2] == T3 (f x3 y) (f x3 y)))] p1).
beta : {X1:tp} {X2:tp} {F:tm X2 -> tm X1} {A:tm X2} pf (== X1 (@ X2 X1 (lam X2 X1 ([x3:tm X2] F x3)) A) (F A)) = [X1:tp] [X2:tp] [F:tm X2 -> tm X1] [A:tm X2] forall_i (X1 arrow form) ([x3:tm (X1 arrow form)] @ X1 form x3 (F A) imp @ X1 form x3 (@ X2 X1 (lam X2 X1 ([x4:tm X2] F x4)) A)) ([g:tm (X1 arrow form)] _imp_i (@ X1 form g (F A)) (@ X1 form g (@ X2 X1 (lam X2 X1 ([x3:tm X2] F x3)) A)) ([p1:pf (@ X1 form g (F A))] beta_i X1 X2 ([x3:tm X2] F x3) A ([c1:tm X1] @ X1 form g c1) p1)).
beta1 : {X1:tp} {X2:tp} {X3:tm X2 -> tm X1} {X4:tm X2} pf (== X1 (@ X2 X1 (lam X2 X1 ([x3:tm X2] X3 x3)) X4) (X3 X4)) = [X1:tp] [X2:tp] [X3:tm X2 -> tm X1] [X4:tm X2] beta X1 X2 ([x3:tm X2] X3 x3) X4.
beta2 : {X1:tp} {X2:tp} {X3:tp} {F:tm X3 -> tm X2 -> tm X1} {A:tm X3} {B:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (lam2 X3 X2 X1 ([x3:tm X3] [x4:tm X2] F x3 x4)) A) B) (F A B)) = [X1:tp] [X2:tp] [X3:tp] [F:tm X3 -> tm X2 -> tm X1] [A:tm X3] [B:tm X2] congr (X2 arrow X1) (@ X3 (X2 arrow X1) (lam X3 (X2 arrow X1) ([x3:tm X3] _lam X2 X1 ([x4:tm X2] F x3 x4))) A) (_lam X2 X1 ([x3:tm X2] F A x3)) ([i1:tm (X2 arrow X1)] == X1 (@ X2 X1 i1 B) (F A B)) (beta (X2 arrow X1) X3 ([x3:tm X3] _lam X2 X1 ([x4:tm X2] F x3 x4)) A) (beta X1 X2 ([x3:tm X2] F A x3) B).
beta3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F:tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X4} {B:tm X3} {C:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (lam3 X4 X3 X2 X1 ([x3:tm X4] [x4:tm X3] [x5:tm X2] F x3 x4 x5)) A) B) C) (F A B C)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F:tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X4] [B:tm X3] [C:tm X2] congr (X2 arrow X1) (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (lam2 X4 X3 (X2 arrow X1) ([x3:tm X4] [x4:tm X3] _lam X2 X1 ([x5:tm X2] F x3 x4 x5))) A) B) (_lam X2 X1 ([x3:tm X2] F A B x3)) ([i1:tm (X2 arrow X1)] == X1 (@ X2 X1 i1 C) (F A B C)) (beta2 (X2 arrow X1) X3 X4 ([x3:tm X4] [x4:tm X3] _lam X2 X1 ([x5:tm X2] F x3 x4 x5)) A B) (beta X1 X2 ([x3:tm X2] F A B x3) C).
beta4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X5} {B:tm X4} {C:tm X3} {D:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (lam4 X5 X4 X3 X2 X1 ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] F x3 x4 x5 x6)) A) B) C) D) (F A B C D)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X5] [B:tm X4] [C:tm X3] [D:tm X2] congr (X3 arrow X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (lam2 X5 X4 (X3 arrow X2 arrow X1) ([x3:tm X5] [x4:tm X4] _lam2 X3 X2 X1 ([x5:tm X3] [x6:tm X2] F x3 x4 x5 x6))) A) B) (_lam2 X3 X2 X1 ([x3:tm X3] [x4:tm X2] F A B x3 x4)) ([i1:tm (X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) i1 C) D) (F A B C D)) (beta2 (X3 arrow X2 arrow X1) X4 X5 ([x3:tm X5] [x4:tm X4] _lam2 X3 X2 X1 ([x5:tm X3] [x6:tm X2] F x3 x4 x5 x6)) A B) (beta2 X1 X2 X3 ([x3:tm X3] [x4:tm X2] F A B x3 x4) C D).
beta5 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {F:tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X6} {B:tm X5} {C:tm X4} {D:tm X3} {E:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam5 X6 X5 X4 X3 X2 X1 ([x3:tm X6] [x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] F x3 x4 x5 x6 x7)) A) B) C) D) E) (F A B C D E)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [F:tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X6] [B:tm X5] [C:tm X4] [D:tm X3] [E:tm X2] congr (X2 arrow X1) (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X6 X5 X4 X3 (X2 arrow X1) ([x3:tm X6] [x4:tm X5] [x5:tm X4] [x6:tm X3] _lam X2 X1 ([x7:tm X2] F x3 x4 x5 x6 x7))) A) B) C) D) (_lam X2 X1 ([x3:tm X2] F A B C D x3)) ([i1:tm (X2 arrow X1)] == X1 (@ X2 X1 i1 E) (F A B C D E)) (beta4 (X2 arrow X1) X3 X4 X5 X6 ([x3:tm X6] [x4:tm X5] [x5:tm X4] [x6:tm X3] _lam X2 X1 ([x7:tm X2] F x3 x4 x5 x6 x7)) A B C D) (beta X1 X2 ([x3:tm X2] F A B C D x3) E).
beta6 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {Fun:tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X7} {B:tm X6} {C:tm X5} {D:tm X4} {E:tm X3} {F:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam6 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F) (Fun A B C D E F)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [Fun:tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X7] [B:tm X6] [C:tm X5] [D:tm X4] [E:tm X3] [F:tm X2] congr (X3 arrow X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X7 X6 X5 X4 (X3 arrow X2 arrow X1) ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] _lam2 X3 X2 X1 ([x7:tm X3] [x8:tm X2] Fun x3 x4 x5 x6 x7 x8))) A) B) C) D) (_lam2 X3 X2 X1 ([x3:tm X3] [x4:tm X2] Fun A B C D x3 x4)) ([i1:tm (X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) i1 E) F) (Fun A B C D E F)) (beta4 (X3 arrow X2 arrow X1) X4 X5 X6 X7 ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] _lam2 X3 X2 X1 ([x7:tm X3] [x8:tm X2] Fun x3 x4 x5 x6 x7 x8)) A B C D) (beta2 X1 X2 X3 ([x3:tm X3] [x4:tm X2] Fun A B C D x3 x4) E F).
beta7 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X8} {B:tm X7} {C:tm X6} {D:tm X5} {E:tm X4} {F:tm X3} {G:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam7 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G) (Fun A B C D E F G)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X8] [B:tm X7] [C:tm X6] [D:tm X5] [E:tm X4] [F:tm X3] [G:tm X2] congr (X4 arrow X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X8 X7 X6 X5 (X4 arrow X3 arrow X2 arrow X1) ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] _lam3 X4 X3 X2 X1 ([x7:tm X4] [x8:tm X3] [x9:tm X2] Fun x3 x4 x5 x6 x7 x8 x9))) A) B) C) D) (_lam3 X4 X3 X2 X1 ([x3:tm X4] [x4:tm X3] [x5:tm X2] Fun A B C D x3 x4 x5)) ([i1:tm (X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) i1 E) F) G) (Fun A B C D E F G)) (beta4 (X4 arrow X3 arrow X2 arrow X1) X5 X6 X7 X8 ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] _lam3 X4 X3 X2 X1 ([x7:tm X4] [x8:tm X3] [x9:tm X2] Fun x3 x4 x5 x6 x7 x8 x9)) A B C D) (beta3 X1 X2 X3 X4 ([x3:tm X4] [x4:tm X3] [x5:tm X2] Fun A B C D x3 x4 x5) E F G).
beta8 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {Fun:tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X9} {B:tm X8} {C:tm X7} {D:tm X6} {E:tm X5} {F:tm X4} {G:tm X3} {H:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X9] [x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [Fun:tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X9] [B:tm X8] [C:tm X7] [D:tm X6] [E:tm X5] [F:tm X4] [G:tm X3] [H:tm X2] congr (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam4 X9 X8 X7 X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) ([x3:tm X9] [x4:tm X8] [x5:tm X7] [x6:tm X6] lam4 X5 X4 X3 X2 X1 ([x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10))) A) B) C) D) (lam4 X5 X4 X3 X2 X1 ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] Fun A B C D x3 x4 x5 x6)) ([i1:tm (X5 arrow X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) i1 E) F) G) H) (Fun A B C D E F G H)) (beta4 (X5 arrow X4 arrow X3 arrow X2 arrow X1) X6 X7 X8 X9 ([x3:tm X9] [x4:tm X8] [x5:tm X7] [x6:tm X6] lam4 X5 X4 X3 X2 X1 ([x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A B C D) (beta4 X1 X2 X3 X4 X5 ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] Fun A B C D x3 x4 x5 x6) E F G H).
beta10 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {Fun:tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X11} {B:tm X10} {C:tm X9} {D:tm X8} {E:tm X7} {F:tm X6} {G:tm X5} {H:tm X4} {I:tm X3} {J:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam10 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X11] [x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] [x11:tm X3] [x12:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J) (Fun A B C D E F G H I J)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [Fun:tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X11] [B:tm X10] [C:tm X9] [D:tm X8] [E:tm X7] [F:tm X6] [G:tm X5] [H:tm X4] [I:tm X3] [J:tm X2] congr (X3 arrow X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X11 X10 X9 X8 X7 X6 X5 X4 (X3 arrow X2 arrow X1) ([x3:tm X11] [x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] _lam2 X3 X2 X1 ([x11:tm X3] [x12:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12))) A) B) C) D) E) F) G) H) (_lam2 X3 X2 X1 ([x3:tm X3] [x4:tm X2] Fun A B C D E F G H x3 x4)) ([i1:tm (X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) i1 I) J) (Fun A B C D E F G H I J)) (beta8 (X3 arrow X2 arrow X1) X4 X5 X6 X7 X8 X9 X10 X11 ([x3:tm X11] [x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] _lam2 X3 X2 X1 ([x11:tm X3] [x12:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A B C D E F G H) (beta2 X1 X2 X3 ([x3:tm X3] [x4:tm X2] Fun A B C D E F G H x3 x4) I J).
beta11 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {Fun:tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X12} {B:tm X11} {C:tm X10} {D:tm X9} {E:tm X8} {F:tm X7} {G:tm X6} {H:tm X5} {I:tm X4} {J:tm X3} {K:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam11 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X12] [x4:tm X11] [x5:tm X10] [x6:tm X9] [x7:tm X8] [x8:tm X7] [x9:tm X6] [x10:tm X5] [x11:tm X4] [x12:tm X3] [x13:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) K) (Fun A B C D E F G H I J K)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [Fun:tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X12] [B:tm X11] [C:tm X10] [D:tm X9] [E:tm X8] [F:tm X7] [G:tm X6] [H:tm X5] [I:tm X4] [J:tm X3] [K:tm X2] congr (X4 arrow X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X12 X11 X10 X9 X8 X7 X6 X5 (X4 arrow X3 arrow X2 arrow X1) ([x3:tm X12] [x4:tm X11] [x5:tm X10] [x6:tm X9] [x7:tm X8] [x8:tm X7] [x9:tm X6] [x10:tm X5] _lam3 X4 X3 X2 X1 ([x11:tm X4] [x12:tm X3] [x13:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13))) A) B) C) D) E) F) G) H) (_lam3 X4 X3 X2 X1 ([x3:tm X4] [x4:tm X3] [x5:tm X2] Fun A B C D E F G H x3 x4 x5)) ([i1:tm (X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) i1 I) J) K) (Fun A B C D E F G H I J K)) (beta8 (X4 arrow X3 arrow X2 arrow X1) X5 X6 X7 X8 X9 X10 X11 X12 ([x3:tm X12] [x4:tm X11] [x5:tm X10] [x6:tm X9] [x7:tm X8] [x8:tm X7] [x9:tm X6] [x10:tm X5] _lam3 X4 X3 X2 X1 ([x11:tm X4] [x12:tm X3] [x13:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A B C D E F G H) (beta3 X1 X2 X3 X4 ([x3:tm X4] [x4:tm X3] [x5:tm X2] Fun A B C D E F G H x3 x4 x5) I J K).
beta14 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {X15:tp} {Fun:tm X15 -> tm X14 -> tm X13 -> tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1} {A:tm X15} {B:tm X14} {C:tm X13} {D:tm X12} {E:tm X11} {F:tm X10} {G:tm X9} {H:tm X8} {I:tm X7} {J:tm X6} {K:tm X5} {L:tm X4} {M:tm X3} {N:tm X2} pf (== X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X15 (X14 arrow X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam14 X15 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X15] [x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] [x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [X15:tp] [Fun:tm X15 -> tm X14 -> tm X13 -> tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1] [A:tm X15] [B:tm X14] [C:tm X13] [D:tm X12] [E:tm X11] [F:tm X10] [G:tm X9] [H:tm X8] [I:tm X7] [J:tm X6] [K:tm X5] [L:tm X4] [M:tm X3] [N:tm X2] congr (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X15 (X14 arrow X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) (lam8 X15 X14 X13 X12 X11 X10 X9 X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) ([x3:tm X15] [x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] lam6 X7 X6 X5 X4 X3 X2 X1 ([x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16))) A) B) C) D) E) F) G) H) (lam6 X7 X6 X5 X4 X3 X2 X1 ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] Fun A B C D E F G H x3 x4 x5 x6 x7 x8)) ([i1:tm (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1)] == X1 (@ X2 X1 (@ X3 (X2 arrow X1) (@ X4 (X3 arrow X2 arrow X1) (@ X5 (X4 arrow X3 arrow X2 arrow X1) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) i1 I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N)) (beta8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1) X8 X9 X10 X11 X12 X13 X14 X15 ([x3:tm X15] [x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] lam6 X7 X6 X5 X4 X3 X2 X1 ([x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A B C D E F G H) (beta6 X1 X2 X3 X4 X5 X6 X7 ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] Fun A B C D E F G H x3 x4 x5 x6 x7 x8) I J K L M N).
congr_app : {X1:tp} {X2:tp} {X3:tm (X1 arrow X2)} {X4:tm (X1 arrow X2)} {Y1:tm X1} {Y2:tm X1} pf (== (X1 arrow X2) X3 X4) -> pf (== X1 Y1 Y2) -> pf (== X2 (@ X1 X2 X3 Y1) (@ X1 X2 X4 Y2)) = [X1:tp] [X2:tp] [X3:tm (X1 arrow X2)] [X4:tm (X1 arrow X2)] [Y1:tm X1] [Y2:tm X1] [p1:pf (== (X1 arrow X2) X3 X4)] [p2:pf (== X1 Y1 Y2)] congr (X1 arrow X2) X3 X4 ([W:tm (X1 arrow X2)] == X2 (@ X1 X2 W Y1) (@ X1 X2 X4 Y2)) p1 (congr X1 Y1 Y2 ([W:tm X1] == X2 (@ X1 X2 X4 W) (@ X1 X2 X4 Y2)) p2 (refl X2 (@ X1 X2 X4 Y2))).
congr_app_1 : {X1:tp} {X2:tp} {X3:tm (X1 arrow X2)} {X4:tm (X1 arrow X2)} {Y:tm X1} pf (== (X1 arrow X2) X3 X4) -> pf (== X2 (@ X1 X2 X3 Y) (@ X1 X2 X4 Y)) = [X1:tp] [X2:tp] [X3:tm (X1 arrow X2)] [X4:tm (X1 arrow X2)] [Y:tm X1] [p1:pf (== (X1 arrow X2) X3 X4)] congr_app X1 X2 X3 X4 Y Y p1 (refl X1 Y).
congr_app_2 : {X1:tp} {Y1:tm X1} {Y2:tm X1} {X2:tp} {X:tm (X1 arrow X2)} pf (== X1 Y1 Y2) -> pf (== X2 (@ X1 X2 X Y1) (@ X1 X2 X Y2)) = [X1:tp] [Y1:tm X1] [Y2:tm X1] [X2:tp] [X:tm (X1 arrow X2)] [p1:pf (== X1 Y1 Y2)] congr_app X1 X2 X X Y1 Y2 (refl (X1 arrow X2) X) p1.
congr_app2 : {X1:tp} {X2:tp} {X3:tp} {X4:tm (X1 arrow X2 arrow X3)} {X5:tm (X1 arrow X2 arrow X3)} {Y1:tm X1} {Y2:tm X1} {Z1:tm X2} {Z2:tm X2} pf (== (X1 arrow X2 arrow X3) X4 X5) -> pf (== X1 Y1 Y2) -> pf (== X2 Z1 Z2) -> pf (== X3 (@ X2 X3 (@ X1 (X2 arrow X3) X4 Y1) Z1) (@ X2 X3 (@ X1 (X2 arrow X3) X5 Y2) Z2)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm (X1 arrow X2 arrow X3)] [X5:tm (X1 arrow X2 arrow X3)] [Y1:tm X1] [Y2:tm X1] [Z1:tm X2] [Z2:tm X2] [p1:pf (== (X1 arrow X2 arrow X3) X4 X5)] [p2:pf (== X1 Y1 Y2)] [p3:pf (== X2 Z1 Z2)] congr3 (X1 arrow X2 arrow X3) X1 X2 X4 X5 Y1 Y2 Z1 Z2 ([u:tm (X1 arrow X2 arrow X3)] [v1:tm X1] [w:tm X2] == X3 (@ X2 X3 (@ X1 (X2 arrow X3) u v1) w) (@ X2 X3 (@ X1 (X2 arrow X3) X5 Y2) Z2)) p1 p2 p3 (refl X3 (@ X2 X3 (@ X1 (X2 arrow X3) X5 Y2) Z2)).
congr_app2_2 : {X1:tp} {Y1:tm X1} {Y2:tm X1} {X2:tp} {X3:tp} {X:tm (X1 arrow X3 arrow X2)} {Z:tm X3} pf (eq X1 Y1 Y2) -> pf (eq X2 (@ X3 X2 (@ X1 (X3 arrow X2) X Y1) Z) (@ X3 X2 (@ X1 (X3 arrow X2) X Y2) Z)) = [X1:tp] [Y1:tm X1] [Y2:tm X1] [X2:tp] [X3:tp] [X:tm (X1 arrow X3 arrow X2)] [Z:tm X3] [p1:pf (eq X1 Y1 Y2)] congr_app2 X1 X3 X2 X X Y1 Y2 Z Z (refl (X1 arrow X3 arrow X2) X) p1 (refl X3 Z).
congr_app3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {W1:tm (X1 arrow X2 arrow X3 arrow X4)} {W2:tm (X1 arrow X2 arrow X3 arrow X4)} {X5:tm X1} {X6:tm X1} {Y1:tm X2} {Y2:tm X2} {Z1:tm X3} {Z2:tm X3} pf (eq (X1 arrow X2 arrow X3 arrow X4) W1 W2) -> pf (eq X1 X5 X6) -> pf (eq X2 Y1 Y2) -> pf (eq X3 Z1 Z2) -> pf (eq X4 (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W1 X5) Y1) Z1) (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W2 X6) Y2) Z2)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [W1:tm (X1 arrow X2 arrow X3 arrow X4)] [W2:tm (X1 arrow X2 arrow X3 arrow X4)] [X5:tm X1] [X6:tm X1] [Y1:tm X2] [Y2:tm X2] [Z1:tm X3] [Z2:tm X3] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4) W1 W2)] [p2:pf (eq X1 X5 X6)] [p3:pf (eq X2 Y1 Y2)] [p4:pf (eq X3 Z1 Z2)] congr4 (X1 arrow X2 arrow X3 arrow X4) X1 X2 X3 W1 W2 X5 X6 Y1 Y2 Z1 Z2 ([u:tm (X1 arrow X2 arrow X3 arrow X4)] [v1:tm X1] [w:tm X2] [x3:tm X3] eq X4 (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) u v1) w) x3) (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W2 X6) Y2) Z2)) p1 p2 p3 p4 (refl X4 (@ X3 X4 (@ X2 (X3 arrow X4) (@ X1 (X2 arrow X3 arrow X4) W2 X6) Y2) Z2)).
def1_i : {X1:tp} {B:tm X1 -> tform} {X:tm X1} pf (B X) -> pf (@ X1 form (lam X1 form ([x3:tm X1] B x3)) X) = [X1:tp] [B:tm X1 -> tform] [X:tm X1] [x3:pf (B X)] congr form (@ X1 form (lam X1 form ([x4:tm X1] B x4)) X) (B X) ([i1:tm form] i1) (beta form X1 ([x4:tm X1] B x4) X) x3.
def1_e : {X1:tp} {B:tm X1 -> tm form} {X:tm X1} pf (@ X1 form (lam X1 form ([x3:tm X1] B x3)) X) -> pf (B X) = [X1:tp] [B:tm X1 -> tm form] [X:tm X1] [x3:pf (@ X1 form (lam X1 form ([x3:tm X1] B x3)) X)] congr form (B X) (@ X1 form (lam X1 form ([x4:tm X1] B x4)) X) ([i1:tm form] i1) (symm form (@ X1 form (lam X1 form ([x4:tm X1] B x4)) X) (B X) (beta form X1 ([x4:tm X1] B x4) X)) x3.
def2_i : {X1:tp} {X2:tp} {Fun:tm X1 -> tm X2 -> tform} {A:tm X1} {B:tm X2} pf (Fun A B) -> pf (@ X2 form (@ X1 (X2 arrow form) (lam2 X1 X2 form ([x3:tm X1] [x4:tm X2] Fun x3 x4)) A) B) = [X1:tp] [X2:tp] [Fun:tm X1 -> tm X2 -> tform] [A:tm X1] [B:tm X2] [x3:pf (Fun A B)] congr form (@ X2 form (@ X1 (X2 arrow form) (lam2 X1 X2 form ([x4:tm X1] [x5:tm X2] Fun x4 x5)) A) B) (Fun A B) ([i1:tm form] i1) (beta2 form X2 X1 ([x4:tm X1] [x5:tm X2] Fun x4 x5) A B) x3.
def2_e : {X1:tp} {X2:tp} {Fun:tm X2 -> tm X1 -> tm form} {A:tm X2} {B:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (lam2 X2 X1 form ([x3:tm X2] [x4:tm X1] Fun x3 x4)) A) B) -> pf (Fun A B) = [X1:tp] [X2:tp] [Fun:tm X2 -> tm X1 -> tm form] [A:tm X2] [B:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (lam2 X2 X1 form ([x3:tm X2] [x4:tm X1] Fun x3 x4)) A) B)] congr form (Fun A B) (@ X1 form (@ X2 (X1 arrow form) (lam2 X2 X1 form ([x4:tm X2] [x5:tm X1] Fun x4 x5)) A) B) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (lam2 X2 X1 form ([x4:tm X2] [x5:tm X1] Fun x4 x5)) A) B) (Fun A B) (beta2 form X1 X2 ([x4:tm X2] [x5:tm X1] Fun x4 x5) A B)) x3.
def3_i : {X1:tp} {X2:tp} {X3:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} pf (Fun A B C) -> pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (lam3 X1 X2 X3 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] Fun x3 x4 x5)) A) B) C) = [X1:tp] [X2:tp] [X3:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [x3:pf (Fun A B C)] congr form (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (lam3 X1 X2 X3 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] Fun x4 x5 x6)) A) B) C) (Fun A B C) ([i1:tm form] i1) (beta3 form X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] Fun x4 x5 x6) A B C) x3.
def3_e : {X1:tp} {X2:tp} {X3:tp} {Fun:tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X3} {B:tm X2} {C:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (lam3 X3 X2 X1 form ([x3:tm X3] [x4:tm X2] [x5:tm X1] Fun x3 x4 x5)) A) B) C) -> pf (Fun A B C) = [X1:tp] [X2:tp] [X3:tp] [Fun:tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X3] [B:tm X2] [C:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (lam3 X3 X2 X1 form ([x3:tm X3] [x4:tm X2] [x5:tm X1] Fun x3 x4 x5)) A) B) C)] congr form (Fun A B C) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (lam3 X3 X2 X1 form ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6)) A) B) C) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (lam3 X3 X2 X1 form ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6)) A) B) C) (Fun A B C) (beta3 form X1 X2 X3 ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6) A B C)) x3.
def4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} pf (Fun A B C D) -> pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) (lam4 X1 X2 X3 X4 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] Fun x3 x4 x5 x6)) A) B) C) D) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [x3:pf (Fun A B C D)] congr form (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) (lam4 X1 X2 X3 X4 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) ([i1:tm form] i1) (beta4 form X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] Fun x4 x5 x6 x7) A B C D) x3.
def4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X4} {B:tm X3} {C:tm X2} {D:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (lam4 X4 X3 X2 X1 form ([x3:tm X4] [x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x3 x4 x5 x6)) A) B) C) D) -> pf (Fun A B C D) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X4] [B:tm X3] [C:tm X2] [D:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (lam4 X4 X3 X2 X1 form ([x3:tm X4] [x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x3 x4 x5 x6)) A) B) C) D)] congr form (Fun A B C D) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (lam4 X4 X3 X2 X1 form ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7)) A) B) C) D) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (lam4 X4 X3 X2 X1 form ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) (beta4 form X1 X2 X3 X4 ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7) A B C D)) x3.
def5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} pf (Fun A B C D E) -> pf (@ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) (lam5 X1 X2 X3 X4 X5 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] Fun x3 x4 x5 x6 x7)) A) B) C) D) E) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [x3:pf (Fun A B C D E)] congr form (@ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) (lam5 X1 X2 X3 X4 X5 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) ([i1:tm form] i1) (beta5 form X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] Fun x4 x5 x6 x7 x8) A B C D E) x3.
def5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X5} {B:tm X4} {C:tm X3} {D:tm X2} {E:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (lam5 X5 X4 X3 X2 X1 form ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E) -> pf (Fun A B C D E) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X5] [B:tm X4] [C:tm X3] [D:tm X2] [E:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (lam5 X5 X4 X3 X2 X1 form ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E)] congr form (Fun A B C D E) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (lam5 X5 X4 X3 X2 X1 form ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (lam5 X5 X4 X3 X2 X1 form ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) (beta5 form X1 X2 X3 X4 X5 ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8) A B C D E)) x3.
def6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} pf (Fun A B C D E F) -> pf (@ X6 form (@ X5 (X6 arrow form) (@ X4 (X5 arrow X6 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow form) (lam6 X1 X2 X3 X4 X5 X6 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [x3:pf (Fun A B C D E F)] congr form (@ X6 form (@ X5 (X6 arrow form) (@ X4 (X5 arrow X6 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow form) (lam6 X1 X2 X3 X4 X5 X6 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] Fun x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) (Fun A B C D E F) ([i1:tm form] i1) (beta6 form X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] Fun x4 x5 x6 x7 x8 x9) A B C D E F) x3.
def6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {Fun:tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X6} {B:tm X5} {C:tm X4} {D:tm X3} {E:tm X2} {F:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam6 X6 X5 X4 X3 X2 X1 form ([x3:tm X6] [x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F) -> pf (Fun A B C D E F) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [Fun:tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X6] [B:tm X5] [C:tm X4] [D:tm X3] [E:tm X2] [F:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam6 X6 X5 X4 X3 X2 X1 form ([x3:tm X6] [x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x3 x4 x5 x6 x7 x8)) A) B) C) D) E) F)] congr form (Fun A B C D E F) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam6 X6 X5 X4 X3 X2 X1 form ([x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] [x9:tm X1] Fun x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam6 X6 X5 X4 X3 X2 X1 form ([x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] [x9:tm X1] Fun x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) (Fun A B C D E F) (beta6 form X1 X2 X3 X4 X5 X6 ([x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] [x9:tm X1] Fun x4 x5 x6 x7 x8 x9) A B C D E F)) x3.
def7_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} {G:tm X7} pf (Fun A B C D E F G) -> pf (@ X7 form (@ X6 (X7 arrow form) (@ X5 (X6 arrow X7 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow form) (lam7 X1 X2 X3 X4 X5 X6 X7 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [G:tm X7] [x3:pf (Fun A B C D E F G)] congr form (@ X7 form (@ X6 (X7 arrow form) (@ X5 (X6 arrow X7 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow form) (lam7 X1 X2 X3 X4 X5 X6 X7 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] Fun x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) (Fun A B C D E F G) ([i1:tm form] i1) (beta7 form X7 X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] Fun x4 x5 x6 x7 x8 x9 x10) A B C D E F G) x3.
def7_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {Fun:tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X7} {B:tm X6} {C:tm X5} {D:tm X4} {E:tm X3} {F:tm X2} {G:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam7 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] [x9:tm X1] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G) -> pf (Fun A B C D E F G) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [Fun:tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X7] [B:tm X6] [C:tm X5] [D:tm X4] [E:tm X3] [F:tm X2] [G:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam7 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X7] [x4:tm X6] [x5:tm X5] [x6:tm X4] [x7:tm X3] [x8:tm X2] [x9:tm X1] Fun x3 x4 x5 x6 x7 x8 x9)) A) B) C) D) E) F) G)] congr form (Fun A B C D E F G) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam7 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam7 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) (Fun A B C D E F G) (beta7 form X1 X2 X3 X4 X5 X6 X7 ([x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x4 x5 x6 x7 x8 x9 x10) A B C D E F G)) x3.
def8_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} {G:tm X7} {H:tm X8} pf (Fun A B C D E F G H) -> pf (@ X8 form (@ X7 (X8 arrow form) (@ X6 (X7 arrow X8 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [G:tm X7] [H:tm X8] [x3:pf (Fun A B C D E F G H)] congr form (@ X8 form (@ X7 (X8 arrow form) (@ X6 (X7 arrow X8 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow form) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) ([i1:tm form] i1) (beta8 form X8 X7 X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H) x3.
def8_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X8} {B:tm X7} {C:tm X6} {D:tm X5} {E:tm X4} {F:tm X3} {G:tm X2} {H:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H) -> pf (Fun A B C D E F G H) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X8] [B:tm X7] [C:tm X6] [D:tm X5] [E:tm X4] [F:tm X3] [G:tm X2] [H:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H)] congr form (Fun A B C D E F G H) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) (beta8 form X1 X2 X3 X4 X5 X6 X7 X8 ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H)) x3.
def10_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} {G:tm X7} {H:tm X8} {I:tm X9} {J:tm X10} pf (Fun A B C D E F G H I J) -> pf (@ X10 form (@ X9 (X10 arrow form) (@ X8 (X9 arrow X10 arrow form) (@ X7 (X8 arrow X9 arrow X10 arrow form) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (lam10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [G:tm X7] [H:tm X8] [I:tm X9] [J:tm X10] [x3:pf (Fun A B C D E F G H I J)] congr form (@ X10 form (@ X9 (X10 arrow form) (@ X8 (X9 arrow X10 arrow form) (@ X7 (X8 arrow X9 arrow X10 arrow form) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow form) (lam10 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] [x12:tm X9] [x13:tm X10] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) (Fun A B C D E F G H I J) ([i1:tm form] i1) (beta10 form X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] [x12:tm X9] [x13:tm X10] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) A B C D E F G H I J) x3.
def10_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {Fun:tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X10} {B:tm X9} {C:tm X8} {D:tm X7} {E:tm X6} {F:tm X5} {G:tm X4} {H:tm X3} {I:tm X2} {J:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X10] [x4:tm X9] [x5:tm X8] [x6:tm X7] [x7:tm X6] [x8:tm X5] [x9:tm X4] [x10:tm X3] [x11:tm X2] [x12:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J) -> pf (Fun A B C D E F G H I J) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [Fun:tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X10] [B:tm X9] [C:tm X8] [D:tm X7] [E:tm X6] [F:tm X5] [G:tm X4] [H:tm X3] [I:tm X2] [J:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X10] [x4:tm X9] [x5:tm X8] [x6:tm X7] [x7:tm X6] [x8:tm X5] [x9:tm X4] [x10:tm X3] [x11:tm X2] [x12:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)) A) B) C) D) E) F) G) H) I) J)] congr form (Fun A B C D E F G H I J) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] [x11:tm X3] [x12:tm X2] [x13:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam10 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] [x11:tm X3] [x12:tm X2] [x13:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)) A) B) C) D) E) F) G) H) I) J) (Fun A B C D E F G H I J) (beta10 form X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 ([x4:tm X10] [x5:tm X9] [x6:tm X8] [x7:tm X7] [x8:tm X6] [x9:tm X5] [x10:tm X4] [x11:tm X3] [x12:tm X2] [x13:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13) A B C D E F G H I J)) x3.
def14_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14 -> tform} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} {G:tm X7} {H:tm X8} {I:tm X9} {J:tm X10} {K:tm X11} {L:tm X12} {M:tm X13} {N:tm X14} pf (Fun A B C D E F G H I J K L M N) -> pf (@ X14 form (@ X13 (X14 arrow form) (@ X12 (X13 arrow X14 arrow form) (@ X11 (X12 arrow X13 arrow X14 arrow form) (@ X10 (X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X9 (X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X8 (X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X7 (X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (lam14 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 form ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] [x11:tm X9] [x12:tm X10] [x13:tm X11] [x14:tm X12] [x15:tm X13] [x16:tm X14] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm X11 -> tm X12 -> tm X13 -> tm X14 -> tform] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [G:tm X7] [H:tm X8] [I:tm X9] [J:tm X10] [K:tm X11] [L:tm X12] [M:tm X13] [N:tm X14] [x3:pf (Fun A B C D E F G H I J K L M N)] congr form (@ X14 form (@ X13 (X14 arrow form) (@ X12 (X13 arrow X14 arrow form) (@ X11 (X12 arrow X13 arrow X14 arrow form) (@ X10 (X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X9 (X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X8 (X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X7 (X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X5 (X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow X9 arrow X10 arrow X11 arrow X12 arrow X13 arrow X14 arrow form) (lam14 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 form ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] [x12:tm X9] [x13:tm X10] [x14:tm X11] [x15:tm X12] [x16:tm X13] [x17:tm X14] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N) ([i1:tm form] i1) (beta14 form X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] [x12:tm X9] [x13:tm X10] [x14:tm X11] [x15:tm X12] [x16:tm X13] [x17:tm X14] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17) A B C D E F G H I J K L M N) x3.
def14_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {X11:tp} {X12:tp} {X13:tp} {X14:tp} {Fun:tm X14 -> tm X13 -> tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form} {A:tm X14} {B:tm X13} {C:tm X12} {D:tm X11} {E:tm X10} {F:tm X9} {G:tm X8} {H:tm X7} {I:tm X6} {J:tm X5} {K:tm X4} {L:tm X3} {M:tm X2} {N:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X14] [x4:tm X13] [x5:tm X12] [x6:tm X11] [x7:tm X10] [x8:tm X9] [x9:tm X8] [x10:tm X7] [x11:tm X6] [x12:tm X5] [x13:tm X4] [x14:tm X3] [x15:tm X2] [x16:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) -> pf (Fun A B C D E F G H I J K L M N) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [X11:tp] [X12:tp] [X13:tp] [X14:tp] [Fun:tm X14 -> tm X13 -> tm X12 -> tm X11 -> tm X10 -> tm X9 -> tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm form] [A:tm X14] [B:tm X13] [C:tm X12] [D:tm X11] [E:tm X10] [F:tm X9] [G:tm X8] [H:tm X7] [I:tm X6] [J:tm X5] [K:tm X4] [L:tm X3] [M:tm X2] [N:tm X1] [x3:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x3:tm X14] [x4:tm X13] [x5:tm X12] [x6:tm X11] [x7:tm X10] [x8:tm X9] [x9:tm X8] [x10:tm X7] [x11:tm X6] [x12:tm X5] [x13:tm X4] [x14:tm X3] [x15:tm X2] [x16:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16)) A) B) C) D) E) F) G) H) I) J) K) L) M) N)] congr form (Fun A B C D E F G H I J K L M N) (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] [x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] [x17:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) ([i1:tm form] i1) (symm form (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X9 (X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X10 (X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X11 (X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X12 (X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X13 (X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (@ X14 (X13 arrow X12 arrow X11 arrow X10 arrow X9 arrow X8 arrow X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow form) (lam14 X14 X13 X12 X11 X10 X9 X8 X7 X6 X5 X4 X3 X2 X1 form ([x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] [x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] [x17:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17)) A) B) C) D) E) F) G) H) I) J) K) L) M) N) (Fun A B C D E F G H I J K L M N) (beta14 form X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 ([x4:tm X14] [x5:tm X13] [x6:tm X12] [x7:tm X11] [x8:tm X10] [x9:tm X9] [x10:tm X8] [x11:tm X7] [x12:tm X6] [x13:tm X5] [x14:tm X4] [x15:tm X3] [x16:tm X2] [x17:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17) A B C D E F G H I J K L M N)) x3.
gdef1_i : {T:tp} {X1:tp} {Fun:tm X1 -> tm T} {A:tm X1} {h:tm T -> tm form} pf (h (Fun A)) -> pf (h (@ X1 T (lam X1 T ([x3:tm X1] Fun x3)) A)) = [T:tp] [X1:tp] [Fun:tm X1 -> tm T] [A:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (Fun A))] congr T (@ X1 T (lam X1 T ([x4:tm X1] Fun x4)) A) (Fun A) ([x4:tm T] p1 x4) (beta T X1 ([x4:tm X1] Fun x4) A) x3.
gdef1_i2 : {T:tp} {U:tp} {X1:tp} {F1:tm X1 -> tm T} {A:tm X1} {X2:tp} {F2:tm X2 -> tm U} {B:tm X2} {h:tm T -> tm U -> tm form} pf (h (F1 A) (F2 B)) -> pf (h (@ X1 T (lam X1 T ([x3:tm X1] F1 x3)) A) (@ X2 U (lam X2 U ([x3:tm X2] F2 x3)) B)) = [T:tp] [U:tp] [X1:tp] [F1:tm X1 -> tm T] [A:tm X1] [X2:tp] [F2:tm X2 -> tm U] [B:tm X2] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (F1 A) (F2 B))] congr2 T U (@ X1 T (lam X1 T ([x4:tm X1] F1 x4)) A) (F1 A) (@ X2 U (lam X2 U ([x4:tm X2] F2 x4)) B) (F2 B) ([x4:tm T] [x5:tm U] p1 x4 x5) (beta T X1 ([x4:tm X1] F1 x4) A) (beta U X2 ([x4:tm X2] F2 x4) B) x3.
gdef1_e : {T:tp} {X1:tp} {Fun:tm X1 -> tm T} {A:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (lam X1 T ([x3:tm X1] Fun x3)) A)) -> pf (h (Fun A)) = [T:tp] [X1:tp] [Fun:tm X1 -> tm T] [A:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (lam X1 T ([x3:tm X1] Fun x3)) A))] congr T (Fun A) (@ X1 T (lam X1 T ([x4:tm X1] Fun x4)) A) ([x4:tm T] p1 x4) (symm T (@ X1 T (lam X1 T ([x4:tm X1] Fun x4)) A) (Fun A) (beta T X1 ([x4:tm X1] Fun x4) A)) x3.
gdef1_e2 : {T:tp} {U:tp} {X1:tp} {F1:tm X1 -> tm T} {A:tm X1} {X2:tp} {F2:tm X2 -> tm U} {B:tm X2} {h:tm T -> tm U -> tm form} pf (h (@ X1 T (lam X1 T ([x3:tm X1] F1 x3)) A) (@ X2 U (lam X2 U ([x3:tm X2] F2 x3)) B)) -> pf (h (F1 A) (F2 B)) = [T:tp] [U:tp] [X1:tp] [F1:tm X1 -> tm T] [A:tm X1] [X2:tp] [F2:tm X2 -> tm U] [B:tm X2] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (@ X1 T (lam X1 T ([x3:tm X1] F1 x3)) A) (@ X2 U (lam X2 U ([x3:tm X2] F2 x3)) B))] congr2 T U (F1 A) (@ X1 T (lam X1 T ([x4:tm X1] F1 x4)) A) (F2 B) (@ X2 U (lam X2 U ([x4:tm X2] F2 x4)) B) ([x4:tm T] [x5:tm U] p1 x4 x5) (symm T (@ X1 T (lam X1 T ([x4:tm X1] F1 x4)) A) (F1 A) (beta T X1 ([x4:tm X1] F1 x4) A)) (symm U (@ X2 U (lam X2 U ([x4:tm X2] F2 x4)) B) (F2 B) (beta U X2 ([x4:tm X2] F2 x4) B)) x3.
gdef2_i : {T:tp} {X1:tp} {X2:tp} {Fun:tm X1 -> tm X2 -> tm T} {A:tm X1} {B:tm X2} {h:tm T -> tm form} pf (h (Fun A B)) -> pf (h (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x3:tm X1] [x4:tm X2] Fun x3 x4)) A) B)) = [T:tp] [X1:tp] [X2:tp] [Fun:tm X1 -> tm X2 -> tm T] [A:tm X1] [B:tm X2] [p1:tm T -> tm form] [x3:pf (p1 (Fun A B))] congr T (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x4:tm X1] [x5:tm X2] Fun x4 x5)) A) B) (Fun A B) ([x4:tm T] p1 x4) (beta2 T X2 X1 ([x4:tm X1] [x5:tm X2] Fun x4 x5) A B) x3.
gdef2_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {F1:tm X1 -> tm X2 -> tm T} {A1:tm X1} {A2:tm X2} {X3:tp} {X4:tp} {F2:tm X3 -> tm X4 -> tm U} {B1:tm X3} {B2:tm X4} {h:tm T -> tm U -> tm form} pf (h (F1 A1 A2) (F2 B1 B2)) -> pf (h (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x3:tm X1] [x4:tm X2] F1 x3 x4)) A1) A2) (@ X4 U (@ X3 (X4 arrow U) (lam2 X3 X4 U ([x3:tm X3] [x4:tm X4] F2 x3 x4)) B1) B2)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [F1:tm X1 -> tm X2 -> tm T] [A1:tm X1] [A2:tm X2] [X3:tp] [X4:tp] [F2:tm X3 -> tm X4 -> tm U] [B1:tm X3] [B2:tm X4] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (F1 A1 A2) (F2 B1 B2))] congr2 T U (@ X2 T (@ X1 (X2 arrow T) (lam2 X1 X2 T ([x4:tm X1] [x5:tm X2] F1 x4 x5)) A1) A2) (F1 A1 A2) (@ X4 U (@ X3 (X4 arrow U) (lam2 X3 X4 U ([x4:tm X3] [x5:tm X4] F2 x4 x5)) B1) B2) (F2 B1 B2) ([x4:tm T] [x5:tm U] p1 x4 x5) (beta2 T X2 X1 ([x4:tm X1] [x5:tm X2] F1 x4 x5) A1 A2) (beta2 U X4 X3 ([x4:tm X3] [x5:tm X4] F2 x4 x5) B1 B2) x3.
gdef2_e : {T:tp} {X1:tp} {X2:tp} {Fun:tm X2 -> tm X1 -> tm T} {A:tm X2} {B:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x3:tm X2] [x4:tm X1] Fun x3 x4)) A) B)) -> pf (h (Fun A B)) = [T:tp] [X1:tp] [X2:tp] [Fun:tm X2 -> tm X1 -> tm T] [A:tm X2] [B:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x3:tm X2] [x4:tm X1] Fun x3 x4)) A) B))] congr T (Fun A B) (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x4:tm X2] [x5:tm X1] Fun x4 x5)) A) B) ([x4:tm T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (lam2 X2 X1 T ([x4:tm X2] [x5:tm X1] Fun x4 x5)) A) B) (Fun A B) (beta2 T X1 X2 ([x4:tm X2] [x5:tm X1] Fun x4 x5) A B)) x3.
gdef3_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm T} {A:tm X1} {B:tm X2} {C:tm X3} {h:tm T -> tm form} pf (h (Fun A B C)) -> pf (h (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] Fun x3 x4 x5)) A) B) C)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm T] [A:tm X1] [B:tm X2] [C:tm X3] [p1:tm T -> tm form] [x3:pf (p1 (Fun A B C))] congr T (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] Fun x4 x5 x6)) A) B) C) (Fun A B C) ([x4:tm T] p1 x4) (beta3 T X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] Fun x4 x5 x6) A B C) x3.
gdef3_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {X3:tp} {F1:tm X1 -> tm X2 -> tm X3 -> tm T} {A1:tm X1} {A2:tm X2} {A3:tm X3} {X4:tp} {X5:tp} {X6:tp} {F2:tm X4 -> tm X5 -> tm X6 -> tm U} {B1:tm X4} {B2:tm X5} {B3:tm X6} {h:tm T -> tm U -> tm form} pf (h (F1 A1 A2 A3) (F2 B1 B2 B3)) -> pf (h (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] F1 x3 x4 x5)) A1) A2) A3) (@ X6 U (@ X5 (X6 arrow U) (@ X4 (X5 arrow X6 arrow U) (lam3 X4 X5 X6 U ([x3:tm X4] [x4:tm X5] [x5:tm X6] F2 x3 x4 x5)) B1) B2) B3)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [X3:tp] [F1:tm X1 -> tm X2 -> tm X3 -> tm T] [A1:tm X1] [A2:tm X2] [A3:tm X3] [X4:tp] [X5:tp] [X6:tp] [F2:tm X4 -> tm X5 -> tm X6 -> tm U] [B1:tm X4] [B2:tm X5] [B3:tm X6] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (F1 A1 A2 A3) (F2 B1 B2 B3))] congr2 T U (@ X3 T (@ X2 (X3 arrow T) (@ X1 (X2 arrow X3 arrow T) (lam3 X1 X2 X3 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] F1 x4 x5 x6)) A1) A2) A3) (F1 A1 A2 A3) (@ X6 U (@ X5 (X6 arrow U) (@ X4 (X5 arrow X6 arrow U) (lam3 X4 X5 X6 U ([x4:tm X4] [x5:tm X5] [x6:tm X6] F2 x4 x5 x6)) B1) B2) B3) (F2 B1 B2 B3) ([x4:tm T] [x5:tm U] p1 x4 x5) (beta3 T X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] F1 x4 x5 x6) A1 A2 A3) (beta3 U X6 X5 X4 ([x4:tm X4] [x5:tm X5] [x6:tm X6] F2 x4 x5 x6) B1 B2 B3) x3.
gdef3_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {Fun:tm X3 -> tm X2 -> tm X1 -> tm T} {A:tm X3} {B:tm X2} {C:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x3:tm X3] [x4:tm X2] [x5:tm X1] Fun x3 x4 x5)) A) B) C)) -> pf (h (Fun A B C)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [Fun:tm X3 -> tm X2 -> tm X1 -> tm T] [A:tm X3] [B:tm X2] [C:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x3:tm X3] [x4:tm X2] [x5:tm X1] Fun x3 x4 x5)) A) B) C))] congr T (Fun A B C) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6)) A) B) C) ([x4:tm T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (lam3 X3 X2 X1 T ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6)) A) B) C) (Fun A B C) (beta3 T X1 X2 X3 ([x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x4 x5 x6) A B C)) x3.
gdef4_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm T} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {h:tm T -> tm form} pf (h (Fun A B C D)) -> pf (h (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] Fun x3 x4 x5 x6)) A) B) C) D)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm T] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [p1:tm T -> tm form] [x3:pf (p1 (Fun A B C D))] congr T (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) ([x4:tm T] p1 x4) (beta4 T X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] Fun x4 x5 x6 x7) A B C D) x3.
gdef4_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {F1:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm T} {A1:tm X1} {A2:tm X2} {A3:tm X3} {A4:tm X4} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {F2:tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm U} {B1:tm X5} {B2:tm X6} {B3:tm X7} {B4:tm X8} {h:tm T -> tm U -> tm form} pf (h (F1 A1 A2 A3 A4) (F2 B1 B2 B3 B4)) -> pf (h (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] F1 x3 x4 x5 x6)) A1) A2) A3) A4) (@ X8 U (@ X7 (X8 arrow U) (@ X6 (X7 arrow X8 arrow U) (@ X5 (X6 arrow X7 arrow X8 arrow U) (lam4 X5 X6 X7 X8 U ([x3:tm X5] [x4:tm X6] [x5:tm X7] [x6:tm X8] F2 x3 x4 x5 x6)) B1) B2) B3) B4)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [F1:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm T] [A1:tm X1] [A2:tm X2] [A3:tm X3] [A4:tm X4] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [F2:tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm U] [B1:tm X5] [B2:tm X6] [B3:tm X7] [B4:tm X8] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (F1 A1 A2 A3 A4) (F2 B1 B2 B3 B4))] congr2 T U (@ X4 T (@ X3 (X4 arrow T) (@ X2 (X3 arrow X4 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow T) (lam4 X1 X2 X3 X4 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] F1 x4 x5 x6 x7)) A1) A2) A3) A4) (F1 A1 A2 A3 A4) (@ X8 U (@ X7 (X8 arrow U) (@ X6 (X7 arrow X8 arrow U) (@ X5 (X6 arrow X7 arrow X8 arrow U) (lam4 X5 X6 X7 X8 U ([x4:tm X5] [x5:tm X6] [x6:tm X7] [x7:tm X8] F2 x4 x5 x6 x7)) B1) B2) B3) B4) (F2 B1 B2 B3 B4) ([x4:tm T] [x5:tm U] p1 x4 x5) (beta4 T X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] F1 x4 x5 x6 x7) A1 A2 A3 A4) (beta4 U X8 X7 X6 X5 ([x4:tm X5] [x5:tm X6] [x6:tm X7] [x7:tm X8] F2 x4 x5 x6 x7) B1 B2 B3 B4) x3.
gdef4_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Fun:tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T} {A:tm X4} {B:tm X3} {C:tm X2} {D:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x3:tm X4] [x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x3 x4 x5 x6)) A) B) C) D)) -> pf (h (Fun A B C D)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Fun:tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T] [A:tm X4] [B:tm X3] [C:tm X2] [D:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x3:tm X4] [x4:tm X3] [x5:tm X2] [x6:tm X1] Fun x3 x4 x5 x6)) A) B) C) D))] congr T (Fun A B C D) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7)) A) B) C) D) ([x4:tm T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (lam4 X4 X3 X2 X1 T ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7)) A) B) C) D) (Fun A B C D) (beta4 T X1 X2 X3 X4 ([x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x4 x5 x6 x7) A B C D)) x3.
gdef5_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm T} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {h:tm T -> tm form} pf (h (Fun A B C D E)) -> pf (h (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] Fun x3 x4 x5 x6 x7)) A) B) C) D) E)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm T] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [p1:tm T -> tm form] [x3:pf (p1 (Fun A B C D E))] congr T (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) ([x4:tm T] p1 x4) (beta5 T X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] Fun x4 x5 x6 x7 x8) A B C D E) x3.
gdef5_i2 : {T:tp} {U:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {F1:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm T} {A1:tm X1} {A2:tm X2} {A3:tm X3} {A4:tm X4} {A5:tm X5} {X6:tp} {X7:tp} {X8:tp} {X9:tp} {X10:tp} {F2:tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm U} {B1:tm X6} {B2:tm X7} {B3:tm X8} {B4:tm X9} {B5:tm X10} {h:tm T -> tm U -> tm form} pf (h (F1 A1 A2 A3 A4 A5) (F2 B1 B2 B3 B4 B5)) -> pf (h (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] F1 x3 x4 x5 x6 x7)) A1) A2) A3) A4) A5) (@ X10 U (@ X9 (X10 arrow U) (@ X8 (X9 arrow X10 arrow U) (@ X7 (X8 arrow X9 arrow X10 arrow U) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow U) (lam5 X6 X7 X8 X9 X10 U ([x3:tm X6] [x4:tm X7] [x5:tm X8] [x6:tm X9] [x7:tm X10] F2 x3 x4 x5 x6 x7)) B1) B2) B3) B4) B5)) = [T:tp] [U:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [F1:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm T] [A1:tm X1] [A2:tm X2] [A3:tm X3] [A4:tm X4] [A5:tm X5] [X6:tp] [X7:tp] [X8:tp] [X9:tp] [X10:tp] [F2:tm X6 -> tm X7 -> tm X8 -> tm X9 -> tm X10 -> tm U] [B1:tm X6] [B2:tm X7] [B3:tm X8] [B4:tm X9] [B5:tm X10] [p1:tm T -> tm U -> tm form] [x3:pf (p1 (F1 A1 A2 A3 A4 A5) (F2 B1 B2 B3 B4 B5))] congr2 T U (@ X5 T (@ X4 (X5 arrow T) (@ X3 (X4 arrow X5 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow T) (lam5 X1 X2 X3 X4 X5 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] F1 x4 x5 x6 x7 x8)) A1) A2) A3) A4) A5) (F1 A1 A2 A3 A4 A5) (@ X10 U (@ X9 (X10 arrow U) (@ X8 (X9 arrow X10 arrow U) (@ X7 (X8 arrow X9 arrow X10 arrow U) (@ X6 (X7 arrow X8 arrow X9 arrow X10 arrow U) (lam5 X6 X7 X8 X9 X10 U ([x4:tm X6] [x5:tm X7] [x6:tm X8] [x7:tm X9] [x8:tm X10] F2 x4 x5 x6 x7 x8)) B1) B2) B3) B4) B5) (F2 B1 B2 B3 B4 B5) ([x4:tm T] [x5:tm U] p1 x4 x5) (beta5 T X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] F1 x4 x5 x6 x7 x8) A1 A2 A3 A4 A5) (beta5 U X10 X9 X8 X7 X6 ([x4:tm X6] [x5:tm X7] [x6:tm X8] [x7:tm X9] [x8:tm X10] F2 x4 x5 x6 x7 x8) B1 B2 B3 B4 B5) x3.
gdef5_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {Fun:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T} {A:tm X5} {B:tm X4} {C:tm X3} {D:tm X2} {E:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E)) -> pf (h (Fun A B C D E)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [Fun:tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T] [A:tm X5] [B:tm X4] [C:tm X3] [D:tm X2] [E:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x3:tm X5] [x4:tm X4] [x5:tm X3] [x6:tm X2] [x7:tm X1] Fun x3 x4 x5 x6 x7)) A) B) C) D) E))] congr T (Fun A B C D E) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) ([x4:tm T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (lam5 X5 X4 X3 X2 X1 T ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8)) A) B) C) D) E) (Fun A B C D E) (beta5 T X1 X2 X3 X4 X5 ([x4:tm X5] [x5:tm X4] [x6:tm X3] [x7:tm X2] [x8:tm X1] Fun x4 x5 x6 x7 x8) A B C D E)) x3.
gdef8_i : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm T} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} {E:tm X5} {F:tm X6} {G:tm X7} {H:tm X8} {h:tm T -> tm form} pf (h (Fun A B C D E F G H)) -> pf (h (@ X8 T (@ X7 (X8 arrow T) (@ X6 (X7 arrow X8 arrow T) (@ X5 (X6 arrow X7 arrow X8 arrow T) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 T ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm T] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] [E:tm X5] [F:tm X6] [G:tm X7] [H:tm X8] [p1:tm T -> tm form] [x3:pf (p1 (Fun A B C D E F G H))] congr T (@ X8 T (@ X7 (X8 arrow T) (@ X6 (X7 arrow X8 arrow T) (@ X5 (X6 arrow X7 arrow X8 arrow T) (@ X4 (X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X3 (X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X2 (X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow X6 arrow X7 arrow X8 arrow T) (lam8 X1 X2 X3 X4 X5 X6 X7 X8 T ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) ([x4:tm T] p1 x4) (beta8 T X8 X7 X6 X5 X4 X3 X2 X1 ([x4:tm X1] [x5:tm X2] [x6:tm X3] [x7:tm X4] [x8:tm X5] [x9:tm X6] [x10:tm X7] [x11:tm X8] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H) x3.
gdef8_e : {T:tp} {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T} {A:tm X8} {B:tm X7} {C:tm X6} {D:tm X5} {E:tm X4} {F:tm X3} {G:tm X2} {H:tm X1} {h:tm T -> tm form} pf (h (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H)) -> pf (h (Fun A B C D E F G H)) = [T:tp] [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [Fun:tm X8 -> tm X7 -> tm X6 -> tm X5 -> tm X4 -> tm X3 -> tm X2 -> tm X1 -> tm T] [A:tm X8] [B:tm X7] [C:tm X6] [D:tm X5] [E:tm X4] [F:tm X3] [G:tm X2] [H:tm X1] [p1:tm T -> tm form] [x3:pf (p1 (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x3:tm X8] [x4:tm X7] [x5:tm X6] [x6:tm X5] [x7:tm X4] [x8:tm X3] [x9:tm X2] [x10:tm X1] Fun x3 x4 x5 x6 x7 x8 x9 x10)) A) B) C) D) E) F) G) H))] congr T (Fun A B C D E F G H) (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) ([x4:tm T] p1 x4) (symm T (@ X1 T (@ X2 (X1 arrow T) (@ X3 (X2 arrow X1 arrow T) (@ X4 (X3 arrow X2 arrow X1 arrow T) (@ X5 (X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X6 (X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X7 (X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (@ X8 (X7 arrow X6 arrow X5 arrow X4 arrow X3 arrow X2 arrow X1 arrow T) (lam8 X8 X7 X6 X5 X4 X3 X2 X1 T ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11)) A) B) C) D) E) F) G) H) (Fun A B C D E F G H) (beta8 T X1 X2 X3 X4 X5 X6 X7 X8 ([x4:tm X8] [x5:tm X7] [x6:tm X6] [x7:tm X5] [x8:tm X4] [x9:tm X3] [x10:tm X2] [x11:tm X1] Fun x4 x5 x6 x7 x8 x9 x10 x11) A B C D E F G H)) x3.
def1_congr : {X1:tp} {A0:tm (X1 arrow form)} {A1:tm (X1 arrow form)} {B0:tm X1} {B1:tm X1} pf (eq (X1 arrow form) A0 A1) -> pf (eq X1 B0 B1) -> pf (@ X1 form A1 B1) -> pf (@ X1 form A0 B0) = [X1:tp] [A0:tm (X1 arrow form)] [A1:tm (X1 arrow form)] [B0:tm X1] [B1:tm X1] [p1:pf (eq (X1 arrow form) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (@ X1 form A1 B1)] congr2 (X1 arrow form) X1 A0 A1 B0 B1 ([a:tm (X1 arrow form)] [b:tm X1] @ X1 form a b) p1 p2 p3.
def1_congr2 : {X1:tp} {A:tm X1} {B:tm X1} {X:tm (X1 arrow form)} pf (eq X1 A B) -> pf (@ X1 form X B) -> pf (@ X1 form X A) = [X1:tp] [A:tm X1] [B:tm X1] [X:tm (X1 arrow form)] [p1:pf (eq X1 A B)] [p2:pf (@ X1 form X B)] def1_congr X1 X X A B (refl (X1 arrow form) X) p1 p2.
def2_congr : {X1:tp} {X2:tp} {A0:tm (X1 arrow X2 arrow form)} {A1:tm (X1 arrow X2 arrow form)} {B0:tm X1} {B1:tm X1} {C0:tm X2} {C1:tm X2} pf (eq (X1 arrow X2 arrow form) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (@ X2 form (@ X1 (X2 arrow form) A1 B1) C1) -> pf (@ X2 form (@ X1 (X2 arrow form) A0 B0) C0) = [X1:tp] [X2:tp] [A0:tm (X1 arrow X2 arrow form)] [A1:tm (X1 arrow X2 arrow form)] [B0:tm X1] [B1:tm X1] [C0:tm X2] [C1:tm X2] [p1:pf (eq (X1 arrow X2 arrow form) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (@ X2 form (@ X1 (X2 arrow form) A1 B1) C1)] congr3 (X1 arrow X2 arrow form) X1 X2 A0 A1 B0 B1 C0 C1 ([a:tm (X1 arrow X2 arrow form)] [b:tm X1] [c1:tm X2] @ X2 form (@ X1 (X2 arrow form) a b) c1) p1 p2 p3 p4.
def2_congr1 : {X1:tp} {X2:tp} {A:tm (X1 arrow X2 arrow form)} {B:tm (X1 arrow X2 arrow form)} {X:tm X1} {Y:tm X2} pf (eq (X1 arrow X2 arrow form) A B) -> pf (@ X2 form (@ X1 (X2 arrow form) B X) Y) -> pf (@ X2 form (@ X1 (X2 arrow form) A X) Y) = [X1:tp] [X2:tp] [A:tm (X1 arrow X2 arrow form)] [B:tm (X1 arrow X2 arrow form)] [X:tm X1] [Y:tm X2] [p1:pf (eq (X1 arrow X2 arrow form) A B)] [p2:pf (@ X2 form (@ X1 (X2 arrow form) B X) Y)] def2_congr X1 X2 A B X X Y Y p1 (refl X1 X) (refl X2 Y) p2.
def2_congr2 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X:tm (X1 arrow X2 arrow form)} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X1 (X2 arrow form) X B) Y) -> pf (@ X2 form (@ X1 (X2 arrow form) X A) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X:tm (X1 arrow X2 arrow form)] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X1 (X2 arrow form) X B) Y)] def2_congr X1 X2 X X A B Y Y (refl (X1 arrow X2 arrow form) X) p1 (refl X2 Y) p2.
def2_congr3 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X:tm (X2 arrow X1 arrow form)} {Y:tm X2} pf (eq X1 A B) -> pf (@ X1 form (@ X2 (X1 arrow form) X Y) B) -> pf (@ X1 form (@ X2 (X1 arrow form) X Y) A) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X:tm (X2 arrow X1 arrow form)] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X1 form (@ X2 (X1 arrow form) X Y) B)] def2_congr X2 X1 X X Y Y A B (refl (X2 arrow X1 arrow form) X) (refl X2 Y) p1 p2.
def3_congr : {X1:tp} {X2:tp} {X3:tp} {A0:tm (X1 arrow X2 arrow X3 arrow form)} {A1:tm (X1 arrow X2 arrow X3 arrow form)} {B0:tm X1} {B1:tm X1} {C0:tm X2} {C1:tm X2} {D0:tm X3} {D1:tm X3} pf (eq (X1 arrow X2 arrow X3 arrow form) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (eq X3 D0 D1) -> pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) A1 B1) C1) D1) -> pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) A0 B0) C0) D0) = [X1:tp] [X2:tp] [X3:tp] [A0:tm (X1 arrow X2 arrow X3 arrow form)] [A1:tm (X1 arrow X2 arrow X3 arrow form)] [B0:tm X1] [B1:tm X1] [C0:tm X2] [C1:tm X2] [D0:tm X3] [D1:tm X3] [p1:pf (eq (X1 arrow X2 arrow X3 arrow form) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (eq X3 D0 D1)] [p5:pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) A1 B1) C1) D1)] congr4 (X1 arrow X2 arrow X3 arrow form) X1 X2 X3 A0 A1 B0 B1 C0 C1 D0 D1 ([a:tm (X1 arrow X2 arrow X3 arrow form)] [b:tm X1] [c1:tm X2] [d:tm X3] @ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) a b) c1) d) p1 p2 p3 p4 p5.
def3_congr1 : {X1:tp} {X2:tp} {X3:tp} {A:tm (X1 arrow X2 arrow X3 arrow form)} {B:tm (X1 arrow X2 arrow X3 arrow form)} {W:tm X1} {X:tm X2} {Y:tm X3} pf (eq (X1 arrow X2 arrow X3 arrow form) A B) -> pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) B W) X) Y) -> pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) A W) X) Y) = [X1:tp] [X2:tp] [X3:tp] [A:tm (X1 arrow X2 arrow X3 arrow form)] [B:tm (X1 arrow X2 arrow X3 arrow form)] [W:tm X1] [X:tm X2] [Y:tm X3] [p1:pf (eq (X1 arrow X2 arrow X3 arrow form) A B)] [p2:pf (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) B W) X) Y)] def3_congr X1 X2 X3 A B W W X X Y Y p1 (refl X1 W) (refl X2 X) (refl X3 Y) p2.
def3_congr2 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {W:tm (X1 arrow X3 arrow X2 arrow form)} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) W B) X) Y) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) W A) X) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [W:tm (X1 arrow X3 arrow X2 arrow form)] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) W B) X) Y)] def3_congr X1 X3 X2 W W A B X X Y Y (refl (X1 arrow X3 arrow X2 arrow form) W) p1 (refl X3 X) (refl X2 Y) p2.
def3_congr3 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {W:tm (X3 arrow X1 arrow X2 arrow form)} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) W X) B) Y) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) W X) A) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [W:tm (X3 arrow X1 arrow X2 arrow form)] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) W X) B) Y)] def3_congr X3 X1 X2 W W X X A B Y Y (refl (X3 arrow X1 arrow X2 arrow form) W) (refl X3 X) p1 (refl X2 Y) p2.
def3_congr4 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {W:tm (X3 arrow X2 arrow X1 arrow form)} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) W X) Y) B) -> pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) W X) Y) A) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [W:tm (X3 arrow X2 arrow X1 arrow form)] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) W X) Y) B)] def3_congr X3 X2 X1 W W X X Y Y A B (refl (X3 arrow X2 arrow X1 arrow form) W) (refl X3 X) (refl X2 Y) p1 p2.
def4_congr : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A0:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)} {A1:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)} {B0:tm X1} {B1:tm X1} {C0:tm X2} {C1:tm X2} {D0:tm X3} {D1:tm X3} {E0:tm X4} {E1:tm X4} pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow form) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (eq X3 D0 D1) -> pf (eq X4 E0 E1) -> pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) A1 B1) C1) D1) E1) -> pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) A0 B0) C0) D0) E0) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A0:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)] [A1:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)] [B0:tm X1] [B1:tm X1] [C0:tm X2] [C1:tm X2] [D0:tm X3] [D1:tm X3] [E0:tm X4] [E1:tm X4] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow form) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (eq X3 D0 D1)] [p5:pf (eq X4 E0 E1)] [p6:pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) A1 B1) C1) D1) E1)] congr5 (X1 arrow X2 arrow X3 arrow X4 arrow form) X1 X2 X3 X4 A0 A1 B0 B1 C0 C1 D0 D1 E0 E1 ([a:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)] [b:tm X1] [c1:tm X2] [d:tm X3] [e:tm X4] @ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) a b) c1) d) e) p1 p2 p3 p4 p5 p6.
def4_congr1 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)} {B:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)} {V:tm X1} {W:tm X2} {X:tm X3} {Y:tm X4} pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow form) A B) -> pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) B V) W) X) Y) -> pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) A V) W) X) Y) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)] [B:tm (X1 arrow X2 arrow X3 arrow X4 arrow form)] [V:tm X1] [W:tm X2] [X:tm X3] [Y:tm X4] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow form) A B)] [p2:pf (@ X4 form (@ X3 (X4 arrow form) (@ X2 (X3 arrow X4 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow form) B V) W) X) Y)] def4_congr X1 X2 X3 X4 A B V V W W X X Y Y p1 (refl X1 V) (refl X2 W) (refl X3 X) (refl X4 Y) p2.
def4_congr2 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {X4:tp} {V:tm (X1 arrow X4 arrow X3 arrow X2 arrow form)} {W:tm X4} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) V B) W) X) Y) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) V A) W) X) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [X4:tp] [V:tm (X1 arrow X4 arrow X3 arrow X2 arrow form)] [W:tm X4] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) V B) W) X) Y)] def4_congr X1 X4 X3 X2 V V A B W W X X Y Y (refl (X1 arrow X4 arrow X3 arrow X2 arrow form) V) p1 (refl X4 W) (refl X3 X) (refl X2 Y) p2.
def4_congr3 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {X4:tp} {V:tm (X4 arrow X1 arrow X3 arrow X2 arrow form)} {W:tm X4} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) (@ X4 (X1 arrow X3 arrow X2 arrow form) V W) B) X) Y) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) (@ X4 (X1 arrow X3 arrow X2 arrow form) V W) A) X) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [X4:tp] [V:tm (X4 arrow X1 arrow X3 arrow X2 arrow form)] [W:tm X4] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X3 (X2 arrow form) (@ X1 (X3 arrow X2 arrow form) (@ X4 (X1 arrow X3 arrow X2 arrow form) V W) B) X) Y)] def4_congr X4 X1 X3 X2 V V W W A B X X Y Y (refl (X4 arrow X1 arrow X3 arrow X2 arrow form) V) (refl X4 W) p1 (refl X3 X) (refl X2 Y) p2.
def4_congr4 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {X4:tp} {V:tm (X4 arrow X3 arrow X1 arrow X2 arrow form)} {W:tm X4} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) V W) X) B) Y) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) V W) X) A) Y) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [X4:tp] [V:tm (X4 arrow X3 arrow X1 arrow X2 arrow form)] [W:tm X4] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) V W) X) B) Y)] def4_congr X4 X3 X1 X2 V V W W X X A B Y Y (refl (X4 arrow X3 arrow X1 arrow X2 arrow form) V) (refl X4 W) (refl X3 X) p1 (refl X2 Y) p2.
def4_congr5 : {X1:tp} {A:tm X1} {B:tm X1} {X2:tp} {X3:tp} {X4:tp} {V:tm (X4 arrow X3 arrow X2 arrow X1 arrow form)} {W:tm X4} {X:tm X3} {Y:tm X2} pf (eq X1 A B) -> pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) V W) X) Y) B) -> pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) V W) X) Y) A) = [X1:tp] [A:tm X1] [B:tm X1] [X2:tp] [X3:tp] [X4:tp] [V:tm (X4 arrow X3 arrow X2 arrow X1 arrow form)] [W:tm X4] [X:tm X3] [Y:tm X2] [p1:pf (eq X1 A B)] [p2:pf (@ X1 form (@ X2 (X1 arrow form) (@ X3 (X2 arrow X1 arrow form) (@ X4 (X3 arrow X2 arrow X1 arrow form) V W) X) Y) B)] def4_congr X4 X3 X2 X1 V V W W X X Y Y A B (refl (X4 arrow X3 arrow X2 arrow X1 arrow form) V) (refl X4 W) (refl X3 X) (refl X2 Y) p1 p2.
def5_congr : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A0:tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form)} {A1:tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form)} {B0:tm X1} {B1:tm X1} {C0:tm X2} {C1:tm X2} {D0:tm X3} {D1:tm X3} {E0:tm X4} {E1:tm X4} {F0:tm X5} {F1:tm X5} pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form) A0 A1) -> pf (eq X1 B0 B1) -> pf (eq X2 C0 C1) -> pf (eq X3 D0 D1) -> pf (eq X4 E0 E1) -> pf (eq X5 F0 F1) -> pf (@ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) A1 B1) C1) D1) E1) F1) -> pf (@ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) A0 B0) C0) D0) E0) F0) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A0:tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form)] [A1:tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form)] [B0:tm X1] [B1:tm X1] [C0:tm X2] [C1:tm X2] [D0:tm X3] [D1:tm X3] [E0:tm X4] [E1:tm X4] [F0:tm X5] [F1:tm X5] [p1:pf (eq (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form) A0 A1)] [p2:pf (eq X1 B0 B1)] [p3:pf (eq X2 C0 C1)] [p4:pf (eq X3 D0 D1)] [p5:pf (eq X4 E0 E1)] [p6:pf (eq X5 F0 F1)] [p7:pf (@ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) A1 B1) C1) D1) E1) F1)] congr5 (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form) X1 X2 X3 X4 A0 A1 B0 B1 C0 C1 D0 D1 E0 E1 ([a:tm (X1 arrow X2 arrow X3 arrow X4 arrow X5 arrow form)] [b:tm X1] [c1:tm X2] [d:tm X3] [e:tm X4] @ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) a b) c1) d) e) F0) p1 p2 p3 p4 p5 (congr X5 F0 F1 ([f:tm X5] @ X5 form (@ X4 (X5 arrow form) (@ X3 (X4 arrow X5 arrow form) (@ X2 (X3 arrow X4 arrow X5 arrow form) (@ X1 (X2 arrow X3 arrow X4 arrow X5 arrow form) A1 B1) C1) D1) E1) f) p6 p7).
def5_congr2 : {X1:tp} {B0:tm X1} {B1:tm X1} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:tm (X1 arrow X5 arrow X4 arrow X3 arrow X2 arrow form)} {C:tm X5} {D:tm X4} {E:tm X3} {F:tm X2} pf (== X1 B0 B1) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow form) (@ X1 (X5 arrow X4 arrow X3 arrow X2 arrow form) A B1) C) D) E) F) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow form) (@ X1 (X5 arrow X4 arrow X3 arrow X2 arrow form) A B0) C) D) E) F) = [X1:tp] [B0:tm X1] [B1:tm X1] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:tm (X1 arrow X5 arrow X4 arrow X3 arrow X2 arrow form)] [C:tm X5] [D:tm X4] [E:tm X3] [F:tm X2] [p1:pf (== X1 B0 B1)] [p2:pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X2 arrow form) (@ X1 (X5 arrow X4 arrow X3 arrow X2 arrow form) A B1) C) D) E) F)] def5_congr X1 X5 X4 X3 X2 A A B0 B1 C C D D E E F F (refl (X1 arrow X5 arrow X4 arrow X3 arrow X2 arrow form) A) p1 (refl X5 C) (refl X4 D) (refl X3 E) (refl X2 F) p2.
def5_congr3 : {X1:tp} {C0:tm X1} {C1:tm X1} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:tm (X5 arrow X1 arrow X4 arrow X3 arrow X2 arrow form)} {B:tm X5} {D:tm X4} {E:tm X3} {F:tm X2} pf (== X1 C0 C1) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) (@ X5 (X1 arrow X4 arrow X3 arrow X2 arrow form) A B) C1) D) E) F) -> pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) (@ X5 (X1 arrow X4 arrow X3 arrow X2 arrow form) A B) C0) D) E) F) = [X1:tp] [C0:tm X1] [C1:tm X1] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:tm (X5 arrow X1 arrow X4 arrow X3 arrow X2 arrow form)] [B:tm X5] [D:tm X4] [E:tm X3] [F:tm X2] [p1:pf (== X1 C0 C1)] [p2:pf (@ X2 form (@ X3 (X2 arrow form) (@ X4 (X3 arrow X2 arrow form) (@ X1 (X4 arrow X3 arrow X2 arrow form) (@ X5 (X1 arrow X4 arrow X3 arrow X2 arrow form) A B) C1) D) E) F)] def5_congr X5 X1 X4 X3 X2 A A B B C0 C1 D D E E F F (refl (X5 arrow X1 arrow X4 arrow X3 arrow X2 arrow form) A) (refl X5 B) p1 (refl X4 D) (refl X3 E) (refl X2 F) p2.
def5_congr5 : {X1:tp} {E0:tm X1} {E1:tm X1} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {A:tm (X5 arrow X4 arrow X3 arrow X1 arrow X2 arrow form)} {B:tm X5} {C:tm X4} {D:tm X3} {F:tm X2} pf (== X1 E0 E1) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X1 arrow X2 arrow form) A B) C) D) E1) F) -> pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X1 arrow X2 arrow form) A B) C) D) E0) F) = [X1:tp] [E0:tm X1] [E1:tm X1] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [A:tm (X5 arrow X4 arrow X3 arrow X1 arrow X2 arrow form)] [B:tm X5] [C:tm X4] [D:tm X3] [F:tm X2] [p1:pf (== X1 E0 E1)] [p2:pf (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) (@ X4 (X3 arrow X1 arrow X2 arrow form) (@ X5 (X4 arrow X3 arrow X1 arrow X2 arrow form) A B) C) D) E1) F)] def5_congr X5 X4 X3 X1 X2 A A B B C C D D E0 E1 F F (refl (X5 arrow X4 arrow X3 arrow X1 arrow X2 arrow form) A) (refl X5 B) (refl X4 C) (refl X3 D) p1 (refl X2 F) p2.
imp_i : {A:tform} {B:tform} (pf A -> pf B) -> pf (A imp B) = [A:tform] [B:tform] [x3:pf A -> pf B] _imp_i A B ([x4:pf A] x3 x4).
imp2_i : {A:tform} {B:tform} {C:tform} (pf A -> pf B -> pf C) -> pf (A imp B imp C) = [A:tform] [B:tform] [C:tform] [p1:pf A -> pf B -> pf C] imp_i A (B imp C) ([p2:pf A] imp_i B C ([x3:pf B] p1 p2 x3)).
imp3_i : {A:tform} {B:tform} {C:tform} {D:tform} (pf A -> pf B -> pf C -> pf D) -> pf (A imp B imp C imp D) = [A:tform] [B:tform] [C:tform] [D:tform] [p1:pf A -> pf B -> pf C -> pf D] imp_i A (B imp C imp D) ([p2:pf A] imp2_i B C D ([x3:pf B] [x4:pf C] p1 p2 x3 x4)).
imp4_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} (pf A -> pf B -> pf C -> pf D -> pf E) -> pf (A imp B imp C imp D imp E) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E] imp_i A (B imp C imp D imp E) ([p2:pf A] imp3_i B C D E ([x3:pf B] [x4:pf C] [x5:pf D] p1 p2 x3 x4 x5)).
imp5_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F) -> pf (A imp B imp C imp D imp E imp F) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F] imp_i A (B imp C imp D imp E imp F) ([p2:pf A] imp4_i B C D E F ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] p1 p2 x3 x4 x5 x6)).
imp6_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G) -> pf (A imp B imp C imp D imp E imp F imp G) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G] imp_i A (B imp C imp D imp E imp F imp G) ([p2:pf A] imp5_i B C D E F G ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] p1 p2 x3 x4 x5 x6 x7)).
imp7_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H) -> pf (A imp B imp C imp D imp E imp F imp G imp H) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H] imp_i A (B imp C imp D imp E imp F imp G imp H) ([p2:pf A] imp6_i B C D E F G H ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] p1 p2 x3 x4 x5 x6 x7 x8)).
imp8_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I) -> pf (A imp B imp C imp D imp E imp F imp G imp H imp I) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I] imp_i A (B imp C imp D imp E imp F imp G imp H imp I) ([p2:pf A] imp7_i B C D E F G H I ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] p1 p2 x3 x4 x5 x6 x7 x8 x9)).
imp9_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J) -> pf (A imp B imp C imp D imp E imp F imp G imp H imp I imp J) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [p1:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J] imp_i A (B imp C imp D imp E imp F imp G imp H imp I imp J) ([p2:pf A] imp8_i B C D E F G H I J ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] p1 p2 x3 x4 x5 x6 x7 x8 x9 x10)).
imp_e : {A:tform} {B:tform} pf (A imp B) -> pf A -> pf B = [A:tform] [B:tform] [x3:pf (A imp B)] [x4:pf A] _imp_e A B x3 x4.
imp2_e : {A:tform} {B:tform} {C:tform} pf (A imp B imp C) -> pf A -> pf B -> pf C = [A:tform] [B:tform] [C:tform] [p1:pf (A imp B imp C)] [pA:pf A] [pX:pf B] imp_e B C (imp_e A (B imp C) p1 pA) pX.
imp3_e : {A:tform} {B:tform} {C:tform} {D:tform} pf (A imp B imp C imp D) -> pf A -> pf B -> pf C -> pf D = [A:tform] [B:tform] [C:tform] [D:tform] [p1:pf (A imp B imp C imp D)] [pA:pf A] [pX:pf B] [x3:pf C] imp2_e B C D (imp_e A (B imp C imp D) p1 pA) pX x3.
imp4_e : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} pf (A imp B imp C imp D imp E) -> pf A -> pf B -> pf C -> pf D -> pf E = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [p1:pf (A imp B imp C imp D imp E)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] imp3_e B C D E (imp_e A (B imp C imp D imp E) p1 pA) pX x3 x4.
imp5_e : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} pf (A imp B imp C imp D imp E imp F) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [p1:pf (A imp B imp C imp D imp E imp F)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] imp4_e B C D E F (imp_e A (B imp C imp D imp E imp F) p1 pA) pX x3 x4 x5.
imp6_e : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} pf (A imp B imp C imp D imp E imp F imp G) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [p1:pf (A imp B imp C imp D imp E imp F imp G)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] [x6:pf F] imp5_e B C D E F G (imp_e A (B imp C imp D imp E imp F imp G) p1 pA) pX x3 x4 x5 x6.
imp7_e : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} pf (A imp B imp C imp D imp E imp F imp G imp H) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [p1:pf (A imp B imp C imp D imp E imp F imp G imp H)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] [x6:pf F] [x7:pf G] imp6_e B C D E F G H (imp_e A (B imp C imp D imp E imp F imp G imp H) p1 pA) pX x3 x4 x5 x6 x7.
imp8_e : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} pf (A imp B imp C imp D imp E imp F imp G imp H imp I) -> pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [p1:pf (A imp B imp C imp D imp E imp F imp G imp H imp I)] [pA:pf A] [pX:pf B] [x3:pf C] [x4:pf D] [x5:pf E] [x6:pf F] [x7:pf G] [x8:pf H] imp7_e B C D E F G H I (imp_e A (B imp C imp D imp E imp F imp G imp H imp I) p1 pA) pX x3 x4 x5 x6 x7 x8.
imp_true : {B:tform} {A:tform} pf B -> pf (A imp B) = [B:tform] [A:tform] [p1:pf B] imp_i A B ([p2:pf A] p1).
true_i : pf true = imp_i false false ([x3:pf false] x3).
false_e : {A:tform} pf false -> pf A = [A:tform] [p1:pf false] forall_e form ([x3:tm form] x3) p1 A.
and_i : {A:tform} {B:tform} pf A -> pf B -> pf (A and B) = [A:tform] [B:tform] [p1:pf A] [p2:pf B] forall_i form ([x3:tm form] (A imp B imp x3) imp x3) ([x3:tm form] imp_i (A imp B imp x3) x3 ([p3:pf (A imp B imp x3)] imp_e B x3 (imp_e A (B imp x3) p3 p1) p2)).
and2_i : {X1:tm form} {X2:tm form} pf X1 -> pf X2 -> pf (X1 and X2) = [X1:tm form] [X2:tm form] [x3:pf X1] [x4:pf X2] and_i X1 X2 x3 x4.
and3_i : {A:tform} {B:tform} {C:tform} pf A -> pf B -> pf C -> pf (A and B and C) = [A:tform] [B:tform] [C:tform] [p1:pf A] [p2:pf B] [p3:pf C] and_i A (B and C) p1 (and_i B C p2 p3).
and4_i : {A:tform} {B:tform} {C:tform} {D:tform} pf A -> pf B -> pf C -> pf D -> pf (A and B and C and D) = [A:tform] [B:tform] [C:tform] [D:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] and_i A (B and C and D) p1 (and3_i B C D p2 p3 p4).
and5_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf (A and B and C and D and E) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] and_i A (B and C and D and E) p1 (and4_i B C D E p2 p3 p4 p5).
and6_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf (A and B and C and D and E and F) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] and_i A (B and C and D and E and F) p1 (and5_i B C D E F p2 p3 p4 p5 p6).
and7_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf (A and B and C and D and E and F and G) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] and_i A (B and C and D and E and F and G) p1 (and6_i B C D E F G p2 p3 p4 p5 p6 p7).
and8_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf (A and B and C and D and E and F and G and H) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] and_i A (B and C and D and E and F and G and H) p1 (and7_i B C D E F G H p2 p3 p4 p5 p6 p7 p8).
and9_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf (A and B and C and D and E and F and G and H and I) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] and_i A (B and C and D and E and F and G and H and I) p1 (and8_i B C D E F G H I p2 p3 p4 p5 p6 p7 p8 p9).
and10_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf (A and B and C and D and E and F and G and H and I and J) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] and_i A (B and C and D and E and F and G and H and I and J) p1 (and9_i B C D E F G H I J p2 p3 p4 p5 p6 p7 p8 p9 p10).
and11_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf (A and B and C and D and E and F and G and H and I and J and K) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] and_i A (B and C and D and E and F and G and H and I and J and K) p1 (and10_i B C D E F G H I J K p2 p3 p4 p5 p6 p7 p8 p9 p10 p11).
and12_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf (A and B and C and D and E and F and G and H and I and J and K and L) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] and_i A (B and C and D and E and F and G and H and I and J and K and L) p1 (and11_i B C D E F G H I J K L p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12).
and13_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf (A and B and C and D and E and F and G and H and I and J and K and L and M) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] and_i A (B and C and D and E and F and G and H and I and J and K and L and M) p1 (and12_i B C D E F G H I J K L M p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13).
and14_i : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} {N:tform} pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf N -> pf (A and B and C and D and E and F and G and H and I and J and K and L and M and N) = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [N:tform] [p1:pf A] [p2:pf B] [p3:pf C] [p4:pf D] [p5:pf E] [p6:pf F] [p7:pf G] [p8:pf H] [p9:pf I] [p10:pf J] [p11:pf K] [p12:pf L] [p13:pf M] [p14:pf N] and_i A (B and C and D and E and F and G and H and I and J and K and L and M and N) p1 (and13_i B C D E F G H I J K L M N p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14).
and_e1 : {A:tform} {B:tform} pf (A and B) -> pf A = [A:tform] [B:tform] [p1:pf (A and B)] imp_e (A imp B imp A) A (forall_e form ([x3:tm form] (A imp B imp x3) imp x3) p1 A) (imp_i A (B imp A) ([p2:pf A] imp_i B A ([p3:pf B] p2))).
and_e2 : {A:tform} {B:tform} pf (A and B) -> pf B = [A:tform] [B:tform] [p1:pf (A and B)] imp_e (A imp B imp B) B (forall_e form ([x3:tm form] (A imp B imp x3) imp x3) p1 B) (imp_i A (B imp B) ([p2:pf A] imp_i B B ([p3:pf B] p3))).
and3_e1 : {A:tform} {B:tform} {C:tform} pf (A and B and C) -> pf A = [A:tform] [B:tform] [C:tform] [x3:pf (A and B and C)] and_e1 A (B and C) x3.
and3_e2 : {A:tform} {B:tform} {C:tform} pf (A and B and C) -> pf B = [A:tform] [B:tform] [C:tform] [p1:pf (A and B and C)] and_e1 B C (and_e2 A (B and C) p1).
and3_e3 : {A:tform} {B:tform} {C:tform} pf (A and B and C) -> pf C = [A:tform] [B:tform] [C:tform] [p1:pf (A and B and C)] and_e2 B C (and_e2 A (B and C) p1).
and4_e4 : {A:tform} {B:tform} {C:tform} {D:tform} pf (A and B and C and D) -> pf D = [A:tform] [B:tform] [C:tform] [D:tform] [p1:pf (A and B and C and D)] and_e2 C D (and_e2 B (C and D) (and_e2 A (B and C and D) p1)).
and_l : {A:tform} {B:tform} {C:tform} pf (A and B) -> (pf A -> pf B -> pf C) -> pf C = [A:tform] [B:tform] [C:tform] [p1:pf (A and B)] [p2:pf A -> pf B -> pf C] imp_e B C (imp_e A (B imp C) (imp_i A (B imp C) ([p3:pf A] imp_i B C ([x3:pf B] p2 p3 x3))) (and_e1 A B p1)) (and_e2 A B p1).
and3_l : {A:tform} {B:tform} {C:tform} {D:tform} pf (A and B and C) -> (pf A -> pf B -> pf C -> pf D) -> pf D = [A:tform] [B:tform] [C:tform] [D:tform] [p1:pf (A and B and C)] [p2:pf A -> pf B -> pf C -> pf D] and_l A (B and C) D p1 ([p3:pf A] [p4:pf (B and C)] and_l B C D p4 ([p5:pf B] [p6:pf C] p2 p3 p5 p6)).
and4_l : {A:tform} {B:tform} {C:tform} {D:tform} {Z:tform} pf (A and B and C and D) -> (pf A -> pf B -> pf C -> pf D -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [Z:tform] [p1:pf (A and B and C and D)] [p2:pf A -> pf B -> pf C -> pf D -> pf Z] and_l A (B and C and D) Z p1 ([p3:pf A] [p4:pf (B and C and D)] and3_l B C D Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] p2 p3 x3 x4 x5)).
and5_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {Z:tform} pf (A and B and C and D and E) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [Z:tform] [p1:pf (A and B and C and D and E)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf Z] and_l A (B and C and D and E) Z p1 ([p3:pf A] [p4:pf (B and C and D and E)] and4_l B C D E Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] p2 p3 x3 x4 x5 x6)).
and6_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {Z:tform} pf (A and B and C and D and E and F) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [Z:tform] [p1:pf (A and B and C and D and E and F)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf Z] and_l A (B and C and D and E and F) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F)] and5_l B C D E F Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] p2 p3 x3 x4 x5 x6 x7)).
and7_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {Z:tform} pf (A and B and C and D and E and F and G) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf Z] and_l A (B and C and D and E and F and G) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G)] and6_l B C D E F G Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] p2 p3 x3 x4 x5 x6 x7 x8)).
and8_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {Z:tform} pf (A and B and C and D and E and F and G and H) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf Z] and_l A (B and C and D and E and F and G and H) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H)] and7_l B C D E F G H Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] p2 p3 x3 x4 x5 x6 x7 x8 x9)).
and9_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf Z] and_l A (B and C and D and E and F and G and H and I) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I)] and8_l B C D E F G H I Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10)).
and10_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I and J) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I and J)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf Z] and_l A (B and C and D and E and F and G and H and I and J) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J)] and9_l B C D E F G H I J Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11)).
and11_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I and J and K) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I and J and K)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K)] and10_l B C D E F G H I J K Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)).
and12_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I and J and K and L) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I and J and K and L)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K and L) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K and L)] and11_l B C D E F G H I J K L Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] [x13:pf L] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13)).
and13_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I and J and K and L and M) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I and J and K and L and M)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K and L and M) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K and L and M)] and12_l B C D E F G H I J K L M Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] [x13:pf L] [x14:pf M] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14)).
and14_l : {A:tform} {B:tform} {C:tform} {D:tform} {E:tform} {F:tform} {G:tform} {H:tform} {I:tform} {J:tform} {K:tform} {L:tform} {M:tform} {N:tform} {Z:tform} pf (A and B and C and D and E and F and G and H and I and J and K and L and M and N) -> (pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf N -> pf Z) -> pf Z = [A:tform] [B:tform] [C:tform] [D:tform] [E:tform] [F:tform] [G:tform] [H:tform] [I:tform] [J:tform] [K:tform] [L:tform] [M:tform] [N:tform] [Z:tform] [p1:pf (A and B and C and D and E and F and G and H and I and J and K and L and M and N)] [p2:pf A -> pf B -> pf C -> pf D -> pf E -> pf F -> pf G -> pf H -> pf I -> pf J -> pf K -> pf L -> pf M -> pf N -> pf Z] and_l A (B and C and D and E and F and G and H and I and J and K and L and M and N) Z p1 ([p3:pf A] [p4:pf (B and C and D and E and F and G and H and I and J and K and L and M and N)] and13_l B C D E F G H I J K L M N Z p4 ([x3:pf B] [x4:pf C] [x5:pf D] [x6:pf E] [x7:pf F] [x8:pf G] [x9:pf H] [x10:pf I] [x11:pf J] [x12:pf K] [x13:pf L] [x14:pf M] [x15:pf N] p2 p3 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15)).
or_e : {A:tform} {B:tform} {C:tform} pf (A or B) -> (pf A -> pf C) -> (pf B -> pf C) -> pf C = [A:tform] [B:tform] [C:tform] [p1:pf (A or B)] [p2:pf A -> pf C] [p3:pf B -> pf C] imp_e (B imp C) C (imp_e (A imp C) ((B imp C) imp C) (forall_e form ([x3:tm form] (A imp x3) imp (B imp x3) imp x3) p1 C) (imp_i A C ([x3:pf A] p2 x3))) (imp_i B C ([x3:pf B] p3 x3)).
or_i1 : {A:tform} {B:tform} pf A -> pf (A or B) = [A:tform] [B:tform] [p1:pf A] forall_i form ([x3:tm form] (A imp x3) imp (B imp x3) imp x3) ([C:tm form] imp_i (A imp C) ((B imp C) imp C) ([p2:pf (A imp C)] imp_i (B imp C) C ([p3:pf (B imp C)] imp_e A C p2 p1))).
or_i2 : {B:tform} {A:tform} pf B -> pf (A or B) = [B:tform] [A:tform] [p1:pf B] forall_i form ([x3:tm form] (A imp x3) imp (B imp x3) imp x3) ([C:tm form] imp_i (A imp C) ((B imp C) imp C) ([p2:pf (A imp C)] imp_i (B imp C) C ([p3:pf (B imp C)] imp_e B C p3 p1))).
or3_e : {A1:tform} {A2:tform} {A3:tform} {C:tform} pf (A1 or A2 or A3) -> (pf A1 -> pf C) -> (pf A2 -> pf C) -> (pf A3 -> pf C) -> pf C = [A1:tform] [A2:tform] [A3:tform] [C:tform] [p1:pf (A1 or A2 or A3)] [q1:pf A1 -> pf C] [q2:pf A2 -> pf C] [q3:pf A3 -> pf C] or_e A1 (A2 or A3) C p1 ([x3:pf A1] q1 x3) ([p2:pf (A2 or A3)] or_e A2 A3 C p2 ([x3:pf A2] q2 x3) ([x3:pf A3] q3 x3)).
or3_i1 : {A:tform} {B:tform} {C:tform} pf A -> pf (A or B or C) = [A:tform] [B:tform] [C:tform] [q:pf A] or_i1 A (B or C) q.
or3_i2 : {B:tform} {A:tform} {C:tform} pf B -> pf (A or B or C) = [B:tform] [A:tform] [C:tform] [q:pf B] or_i2 (B or C) A (or_i1 B C q).
or3_i3 : {C:tform} {A:tform} {B:tform} pf C -> pf (A or B or C) = [C:tform] [A:tform] [B:tform] [q:pf C] or_i2 (B or C) A (or_i2 C B q).
or4_e : {A1:tform} {A2:tform} {A3:tform} {A4:tform} {C:tform} pf (A1 or A2 or A3 or A4) -> (pf A1 -> pf C) -> (pf A2 -> pf C) -> (pf A3 -> pf C) -> (pf A4 -> pf C) -> pf C = [A1:tform] [A2:tform] [A3:tform] [A4:tform] [C:tform] [p1:pf (A1 or A2 or A3 or A4)] [q1:pf A1 -> pf C] [q2:pf A2 -> pf C] [q3:pf A3 -> pf C] [q4:pf A4 -> pf C] or3_e A1 A2 (A3 or A4) C p1 ([x3:pf A1] q1 x3) ([x3:pf A2] q2 x3) ([p2:pf (A3 or A4)] or_e A3 A4 C p2 ([x3:pf A3] q3 x3) ([x3:pf A4] q4 x3)).
or4_i2 : {B:tform} {A:tform} {C:tform} {D:tform} pf B -> pf (A or B or C or D) = [B:tform] [A:tform] [C:tform] [D:tform] [q:pf B] or_i2 (B or C or D) A (or3_i1 B C D q).
or4_i3 : {C:tform} {A:tform} {B:tform} {D:tform} pf C -> pf (A or B or C or D) = [C:tform] [A:tform] [B:tform] [D:tform] [q:pf C] or_i2 (B or C or D) A (or3_i2 C B D q).
or_e1 : {A:tform} {B:tform} pf (A or B) -> pf (not B) -> pf A = [A:tform] [B:tform] [p1:pf (A or B)] [p2:pf (not B)] or_e A B A p1 ([p3:pf A] p3) ([p4:pf B] false_e A (imp_e B false p2 p4)).
or_e2 : {A:tform} {B:tform} pf (A or B) -> pf (not A) -> pf B = [A:tform] [B:tform] [p1:pf (A or B)] [p2:pf (not A)] or_e A B B p1 ([p3:pf A] false_e B (imp_e A false p2 p3)) ([p4:pf B] p4).
or_symm : {A:tform} {B:tform} pf (A or B) -> pf (B or A) = [A:tform] [B:tform] [p1:pf (A or B)] or_e A B (B or A) p1 ([p2:pf A] or_i2 A B p2) ([p2:pf B] or_i1 B A p2).
not_i : {A:tform} (pf A -> pf false) -> pf (not A) = [A:tform] [p1:pf A -> pf false] imp_i A false ([x3:pf A] p1 x3).
not_e : {A:tform} pf (not A) -> pf A -> pf false = [A:tform] [x3:pf (not A)] [x4:pf A] imp_e A false x3 x4.
not_e' : {A:tform} {B:tform} pf (not A) -> pf A -> pf B = [A:tform] [B:tform] [p1:pf (not A)] [p2:pf A] false_e B (not_e A p1 p2).
not_ei : {B:tform} {A:tform} pf (not B) -> (pf A -> pf B) -> pf (not A) = [B:tform] [A:tform] [p1:pf (not B)] [l8:pf A -> pf B] imp_i A false ([p2:pf A] imp_e B false p1 (l8 p2)).
not_not_i : {B:tform} pf B -> pf (not (not B)) = [B:tform] [p1:pf B] not_i (not B) ([p2:pf (not B)] not_e B p2 p1).
not_false : pf (not false) = not_i false ([p1:pf false] p1).
equiv_i : {A:tform} {B:tform} pf (A imp B) -> pf (B imp A) -> pf (A equiv B) = [A:tform] [B:tform] [x3:pf (A imp B)] [x4:pf (B imp A)] and_i (A imp B) (B imp A) x3 x4.
equiv_i2 : {A:tform} {B:tform} (pf A -> pf B) -> (pf B -> pf A) -> pf (A equiv B) = [A:tform] [B:tform] [q1:pf A -> pf B] [q2:pf B -> pf A] equiv_i A B (imp_i A B ([p3:pf A] q1 p3)) (imp_i B A ([p4:pf B] q2 p4)).
equiv_e1 : {A:tform} {B:tform} pf (A equiv B) -> pf A -> pf B = [A:tform] [B:tform] [q1:pf (A equiv B)] [q2:pf A] imp_e A B (and_e1 (A imp B) (B imp A) q1) q2.
equiv_e2 : {A:tform} {B:tform} pf (A equiv B) -> pf B -> pf A = [A:tform] [B:tform] [q1:pf (A equiv B)] [q2:pf B] imp_e B A (and_e2 (A imp B) (B imp A) q1) q2.
equiv_symm : {A:tform} {B:tform} pf (A equiv B) -> pf (B equiv A) = [A:tform] [B:tform] [q:pf (A equiv B)] and_i (B imp A) (A imp B) (and_e2 (A imp B) (B imp A) q) (and_e1 (A imp B) (B imp A) q).
equiv_refl : {A:tform} pf (A equiv A) = [A:tform] equiv_i2 A A ([q:pf A] q) ([q:pf A] q).
equiv_trans : {A:tform} {B:tform} {C:tform} pf (A equiv B) -> pf (B equiv C) -> pf (A equiv C) = [A:tform] [B:tform] [C:tform] [p1:pf (A equiv B)] [p2:pf (B equiv C)] equiv_i2 A C ([q:pf A] equiv_e1 B C p2 (equiv_e1 A B p1 q)) ([q:pf C] equiv_e2 A B p1 (equiv_e2 B C p2 q)).
equiv_true : {A:tform} {B:tform} pf A -> pf B -> pf (A equiv B) = [A:tform] [B:tform] [p1:pf A] [p2:pf B] equiv_i A B (imp_i A B ([p3:pf A] p2)) (imp_i B A ([p4:pf B] p1)).
equiv_false : {A:tform} {B:tform} pf (not A) -> pf (not B) -> pf (A equiv B) = [A:tform] [B:tform] [p1:pf (not A)] [p2:pf (not B)] equiv_i2 A B ([p3:pf A] not_e' A B p1 p3) ([p3:pf B] not_e' B A p2 p3).
equiv_not : {A:tform} {B:tform} pf (A equiv B) -> pf (not A equiv not B) = [A:tform] [B:tform] [p1:pf (A equiv B)] equiv_i2 (not A) (not B) ([p2:pf (not A)] not_i B ([p3:pf B] not_e A p2 (equiv_e2 A B p1 p3))) ([p2:pf (not B)] not_i A ([p3:pf A] not_e B p2 (equiv_e1 A B p1 p3))).
equiv_or_false : {B:tform} {A:tform} pf (not B) -> pf (A or B equiv A) = [B:tform] [A:tform] [p1:pf (not B)] equiv_i2 (A or B) A ([p2:pf (A or B)] or_e A B A p2 ([p3:pf A] p3) ([p4:pf B] false_e A (not_e B p1 p4))) ([x3:pf A] or_i1 A B x3).
equiv_or_false1 : {A:tform} {B:tform} pf (not A) -> pf (A or B equiv B) = [A:tform] [B:tform] [p1:pf (not A)] equiv_i2 (A or B) B ([p2:pf (A or B)] or_e A B B p2 ([p4:pf A] false_e B (not_e A p1 p4)) ([p5:pf B] p5)) ([x3:pf B] or_i2 B A x3).
equiv_or : {A:tform} {A':tform} {B:tform} {B':tform} pf (A equiv A') -> pf (B equiv B') -> pf (A or B equiv A' or B') = [A:tform] [A':tform] [B:tform] [B':tform] [p1:pf (A equiv A')] [p2:pf (B equiv B')] equiv_i (A or B) (A' or B') (imp_i (A or B) (A' or B') ([p3:pf (A or B)] or_e A B (A' or B') p3 ([p4:pf A] or_i1 A' B' (equiv_e1 A A' p1 p4)) ([p5:pf B] or_i2 B' A' (equiv_e1 B B' p2 p5)))) (imp_i (A' or B') (A or B) ([p4:pf (A' or B')] or_e A' B' (A or B) p4 ([p6:pf A'] or_i1 A B (equiv_e2 A A' p1 p6)) ([p7:pf B'] or_i2 B A (equiv_e2 B B' p2 p7)))).
equiv_and_true : {B:tform} {A:tform} pf B -> pf (A and B equiv A) = [B:tform] [A:tform] [p1:pf B] equiv_i2 (A and B) A ([x3:pf (A and B)] and_e1 A B x3) ([p3:pf A] and_i A B p3 p1).
equiv_and_true1 : {A:tform} {B:tform} pf A -> pf (A and B equiv B) = [A:tform] [B:tform] [p1:pf A] equiv_i2 (A and B) B ([x3:pf (A and B)] and_e2 A B x3) ([p3:pf B] and_i A B p1 p3).
equiv_and : {A:tform} {A':tform} {B:tform} {B':tform} pf (A equiv A') -> (pf A -> pf (B equiv B')) -> pf (A and B equiv A' and B') = [A:tform] [A':tform] [B:tform] [B':tform] [q1:pf (A equiv A')] [Fq:pf A -> pf (B equiv B')] equiv_i (A and B) (A' and B') (imp_i (A and B) (A' and B') ([Z:pf (A and B)] and_i A' B' (equiv_e1 A A' q1 (and_e1 A B Z)) (equiv_e1 B B' (imp_e A (B equiv B') (imp_i A (B equiv B') ([x3:pf A] Fq x3)) (and_e1 A B Z)) (and_e2 A B Z)))) (imp_i (A' and B') (A and B) ([Z:pf (A' and B')] and_i A B (equiv_e2 A A' q1 (and_e1 A' B' Z)) (equiv_e2 B B' (imp_e A (B equiv B') (imp_i A (B equiv B') ([x3:pf A] Fq x3)) (equiv_e2 A A' q1 (and_e1 A' B' Z))) (and_e2 A' B' Z)))).
equiv_and' : {A:tform} {A':tform} {B:tform} {B':tform} pf (A equiv A') -> pf (B equiv B') -> pf (A and B equiv A' and B') = [A:tform] [A':tform] [B:tform] [B':tform] [q1:pf (A equiv A')] [Fq:pf (B equiv B')] equiv_i2 (A and B) (A' and B') ([p1:pf (A and B)] and_i A' B' (equiv_e1 A A' q1 (and_e1 A B p1)) (equiv_e1 B B' Fq (and_e2 A B p1))) ([p1:pf (A' and B')] and_i A B (equiv_e2 A A' q1 (and_e1 A' B' p1)) (equiv_e2 B B' Fq (and_e2 A' B' p1))).
equiv_and_elim : {A:tform} {B:tform} {B':tform} pf A -> pf (A and B equiv A and B') -> pf (B equiv B') = [A:tform] [B:tform] [B':tform] [p1:pf A] [p2:pf (A and B equiv A and B')] equiv_i2 B B' ([p3:pf B] and_e2 A B' (equiv_e1 (A and B) (A and B') p2 (and_i A B p1 p3))) ([p4:pf B'] and_e2 A B (equiv_e2 (A and B) (A and B') p2 (and_i A B' p1 p4))).
equiv_forall : {X1:tp} {A:tm X1 -> tform} {B:tm X1 -> tform} ({x3:tm X1} pf (A x3 equiv B x3)) -> pf (forall X1 ([x3:tm X1] A x3) equiv forall X1 ([x3:tm X1] B x3)) = [X1:tp] [A:tm X1 -> tform] [B:tm X1 -> tform] [p1:{x4:tm X1} pf (A x4 equiv B x4)] equiv_i2 (forall X1 ([x3:tm X1] A x3)) (forall X1 ([x3:tm X1] B x3)) ([p2:pf (forall X1 ([x3:tm X1] A x3))] forall_i X1 ([x3:tm X1] B x3) ([x5:tm X1] equiv_e1 (A x5) (B x5) (p1 x5) (forall_e X1 ([x3:tm X1] A x3) p2 x5))) ([p3:pf (forall X1 ([x3:tm X1] B x3))] forall_i X1 ([x3:tm X1] A x3) ([x6:tm X1] equiv_e2 (A x6) (B x6) (p1 x6) (forall_e X1 ([x3:tm X1] B x3) p3 x6))).
equiv_exists : {X1:tp} {A:tm X1 -> tform} {B:tm X1 -> tform} ({x3:tm X1} pf (A x3 equiv B x3)) -> pf (exists X1 ([x3:tm X1] A x3) equiv exists X1 ([x3:tm X1] B x3)) = [X1:tp] [A:tm X1 -> tform] [B:tm X1 -> tform] [p1:{x4:tm X1} pf (A x4 equiv B x4)] equiv_i2 (exists X1 ([x3:tm X1] A x3)) (exists X1 ([x3:tm X1] B x3)) ([p2:pf (exists X1 ([x3:tm X1] A x3))] exists_e X1 ([x3:tm X1] A x3) (exists X1 ([x3:tm X1] B x3)) p2 ([x5:tm X1] [p3:pf (A x5)] exists_i X1 ([x3:tm X1] B x3) x5 (equiv_e1 (A x5) (B x5) (p1 x5) p3))) ([p4:pf (exists X1 ([x3:tm X1] B x3))] exists_e X1 ([x3:tm X1] B x3) (exists X1 ([x3:tm X1] A x3)) p4 ([x6:tm X1] [p5:pf (B x6)] exists_i X1 ([x3:tm X1] A x3) x6 (equiv_e2 (A x6) (B x6) (p1 x6) p5))).
equiv_imp : {A:tform} {A':tform} {B:tform} {B':tform} pf (A equiv A') -> pf (B equiv B') -> pf ((A imp B) equiv A' imp B') = [A:tform] [A':tform] [B:tform] [B':tform] [p1:pf (A equiv A')] [p2:pf (B equiv B')] equiv_i2 (A imp B) (A' imp B') ([p3:pf (A imp B)] imp_i A' B' ([p4:pf A'] equiv_e1 B B' p2 (imp_e A B p3 (equiv_e2 A A' p1 p4)))) ([p3:pf (A' imp B')] imp_i A B ([p4:pf A] equiv_e2 B B' p2 (imp_e A' B' p3 (equiv_e1 A A' p1 p4)))).
equiv_imp' : {A:tform} {A':tform} {B:tform} {B':tform} pf (A equiv A') -> (pf A -> pf (B equiv B')) -> pf ((A imp B) equiv A' imp B') = [A:tform] [A':tform] [B:tform] [B':tform] [p1:pf (A equiv A')] [p2:pf A -> pf (B equiv B')] equiv_i2 (A imp B) (A' imp B') ([p3:pf (A imp B)] imp_i A' B' ([p4:pf A'] equiv_e1 B B' (p2 (equiv_e2 A A' p1 p4)) (imp_e A B p3 (equiv_e2 A A' p1 p4)))) ([p3:pf (A' imp B')] imp_i A B ([p4:pf A] equiv_e2 B B' (p2 p4) (imp_e A' B' p3 (equiv_e1 A A' p1 p4)))).
if_i : {E:tform} {A:tform} {B:tform} (pf E -> pf A) -> (pf (not E) -> pf B) -> pf (if E A B) = [E:tform] [A:tform] [B:tform] [FQ1:pf E -> pf A] [FQ2:pf (not E) -> pf B] and_i (E imp A) (not E imp B) (imp_i E A ([x3:pf E] FQ1 x3)) (imp_i (not E) B ([x3:pf (not E)] FQ2 x3)).
if_i1 : {E:tform} {A:tform} {B:tform} pf E -> pf A -> pf (if E A B) = [E:tform] [A:tform] [B:tform] [Q1:pf E] [Q2:pf A] and_i (E imp A) ((E imp false) imp B) (imp_true A E Q2) (imp_i (E imp false) B ([Q':pf (E imp false)] false_e B (imp_e E false Q' Q1))).
if_i2 : {E:tform} {B:tform} {A:tform} pf (not E) -> pf B -> pf (if E A B) = [E:tform] [B:tform] [A:tform] [Q1:pf (not E)] [Q2:pf B] and_i (E imp A) (not E imp B) (imp_i E A ([Q':pf E] false_e A (imp_e E false Q1 Q'))) (imp_true B (not E) Q2).
if_e1 : {E:tform} {A:tform} {B:tform} pf (if E A B) -> pf E -> pf A = [E:tform] [A:tform] [B:tform] [Q1:pf (if E A B)] [Q2:pf E] imp_e E A (and_e1 (E imp A) (not E imp B) Q1) Q2.
if_e2 : {E:tform} {A:tform} {B:tform} pf (if E A B) -> pf (not E) -> pf B = [E:tform] [A:tform] [B:tform] [Q1:pf (if E A B)] [Q2:pf (not E)] imp_e (not E) B (and_e2 (E imp A) (not E imp B) Q1) Q2.
if_equiv1 : {A:tform} {B:tform} {C:tform} pf A -> pf (if A B C equiv B) = [A:tform] [B:tform] [C:tform] [p1:pf A] equiv_i2 (if A B C) B ([p2:pf (if A B C)] if_e1 A B C p2 p1) ([p2:pf B] if_i1 A B C p1 p2).
if_equiv2 : {A:tform} {B:tform} {C:tform} pf (not A) -> pf (if A B C equiv C) = [A:tform] [B:tform] [C:tform] [p1:pf (not A)] equiv_i2 (if A B C) C ([p2:pf (if A B C)] if_e2 A B C p2 p1) ([p2:pf C] if_i2 A C B p1 p2).
equiv_if : {E:tform} {E':tform} {A:tform} {A':tform} {B:tform} {B':tform} pf (E equiv E') -> (pf E -> pf (A equiv A')) -> (pf (not E) -> pf (B equiv B')) -> pf (if E A B equiv if E' A' B') = [E:tform] [E':tform] [A:tform] [A':tform] [B:tform] [B':tform] [p1:pf (E equiv E')] [p2:pf E -> pf (A equiv A')] [p3:pf (not E) -> pf (B equiv B')] equiv_i2 (if E A B) (if E' A' B') ([p5:pf (if E A B)] if_i E' A' B' ([p6:pf E'] equiv_e1 A A' (p2 (equiv_e2 E E' p1 p6)) (if_e1 E A B p5 (equiv_e2 E E' p1 p6))) ([p7:pf (not E')] equiv_e1 B B' (p3 (equiv_e2 (not E) (not E') (equiv_not E E' p1) p7)) (if_e2 E A B p5 (equiv_e2 (not E) (not E') (equiv_not E E' p1) p7)))) ([p15:pf (if E' A' B')] if_i E A B ([p6:pf E] equiv_e2 A A' (p2 p6) (if_e1 E' A' B' p15 (equiv_e1 E E' p1 p6))) ([p7:pf (not E)] equiv_e2 B B' (p3 p7) (if_e2 E' A' B' p15 (equiv_e1 (not E) (not E') (equiv_not E E' p1) p7)))).
a_or_b_and_not_a : {A:tform} {B:tform} pf (A or B) -> pf (not A) -> pf B = [A:tform] [B:tform] [Q1:pf (A or B)] [Q2:pf (not A)] or_e A B B Q1 ([Q:pf A] false_e B (imp_e A false Q2 Q)) ([Q:pf B] Q).
not_or_not_not_and : {A:tform} {B:tform} pf (not A or not B) -> pf (not (A and B)) = [A:tform] [B:tform] [p1:pf (not A or not B)] or_e (not A) (not B) (not (A and B)) p1 ([q1:pf (not A)] not_i (A and B) ([q2:pf (A and B)] not_e A q1 (and_e1 A B q2))) ([q1:pf (not B)] not_i (A and B) ([q2:pf (A and B)] not_e B q1 (and_e2 A B q2))).
forall_imp_i : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} ({x3:tm X1} pf (X2 x3) -> pf (X3 x3)) -> pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [l:{x3:tm X1} pf (X2 x3) -> pf (X3 x3)] forall_i X1 ([x3:tm X1] X2 x3 imp X3 x3) ([x3:tm X1] imp_i (X2 x3) (X3 x3) ([p1:pf (X2 x3)] l x3 p1)).
forall_imp_e : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3)) -> ({a:tm X1} pf (X2 a) -> pf (X3 a)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [p1:pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3))] [a:tm X1] [x3:pf (X2 a)] imp_e (X2 a) (X3 a) (forall_e X1 ([x4:tm X1] X2 x4 imp X3 x4) p1 a) x3.
forall_imp2_i : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} ({x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3)) -> pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [l:{x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3)] forall_i X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3) ([x3:tm X1] imp2_i (X2 x3) (X3 x3) (X4 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] l x3 p1 x4)).
forall_imp2_e : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3)) -> ({a:tm X1} pf (X2 a) -> pf (X3 a) -> pf (X4 a)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [p1:pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3))] [a:tm X1] [x3:pf (X2 a)] [x4:pf (X3 a)] imp2_e (X2 a) (X3 a) (X4 a) (forall_e X1 ([x5:tm X1] X2 x5 imp X3 x5 imp X4 x5) p1 a) x3 x4.
forall_imp3_i : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} {X5:tm X1 -> tm form} ({x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3)) -> pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [X5:tm X1 -> tm form] [l:{x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3)] forall_i X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3) ([x3:tm X1] imp3_i (X2 x3) (X3 x3) (X4 x3) (X5 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] [x5:pf (X4 x3)] l x3 p1 x4 x5)).
forall_imp3_e : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} {X5:tm X1 -> tm form} pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3)) -> ({a:tm X1} pf (X2 a) -> pf (X3 a) -> pf (X4 a) -> pf (X5 a)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [X5:tm X1 -> tm form] [p1:pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3))] [a:tm X1] [x3:pf (X2 a)] [x4:pf (X3 a)] [x5:pf (X4 a)] imp3_e (X2 a) (X3 a) (X4 a) (X5 a) (forall_e X1 ([x6:tm X1] X2 x6 imp X3 x6 imp X4 x6 imp X5 x6) p1 a) x3 x4 x5.
forall_imp4_i : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} {X5:tm X1 -> tm form} {X6:tm X1 -> tm form} ({x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3)) -> pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [X5:tm X1 -> tm form] [X6:tm X1 -> tm form] [l:{x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3)] forall_i X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3) ([x3:tm X1] imp4_i (X2 x3) (X3 x3) (X4 x3) (X5 x3) (X6 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] [x5:pf (X4 x3)] [x6:pf (X5 x3)] l x3 p1 x4 x5 x6)).
forall_imp5_i : {X1:tp} {X2:tm X1 -> tm form} {X3:tm X1 -> tm form} {X4:tm X1 -> tm form} {X5:tm X1 -> tm form} {X6:tm X1 -> tm form} {X7:tm X1 -> tm form} ({x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3) -> pf (X7 x3)) -> pf (forall X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3 imp X7 x3)) = [X1:tp] [X2:tm X1 -> tm form] [X3:tm X1 -> tm form] [X4:tm X1 -> tm form] [X5:tm X1 -> tm form] [X6:tm X1 -> tm form] [X7:tm X1 -> tm form] [l:{x3:tm X1} pf (X2 x3) -> pf (X3 x3) -> pf (X4 x3) -> pf (X5 x3) -> pf (X6 x3) -> pf (X7 x3)] forall_i X1 ([x3:tm X1] X2 x3 imp X3 x3 imp X4 x3 imp X5 x3 imp X6 x3 imp X7 x3) ([x3:tm X1] imp5_i (X2 x3) (X3 x3) (X4 x3) (X5 x3) (X6 x3) (X7 x3) ([p1:pf (X2 x3)] [x4:pf (X3 x3)] [x5:pf (X4 x3)] [x6:pf (X5 x3)] [x7:pf (X6 x3)] l x3 p1 x4 x5 x6 x7)).
forall2_imp_i : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} ({x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [p1:{x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4)] forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4) ([x3:tm X1] [y:tm X2] imp_i (X3 x3 y) (X4 x3 y) ([x4:pf (X3 x3 y)] p1 x3 y x4)).
forall2_imp2_i : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} ({x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [p1:{x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4)] forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4) ([x3:tm X1] [y:tm X2] imp2_i (X3 x3 y) (X4 x3 y) (X5 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] p1 x3 y x4 x5)).
forall2_imp3_i : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} {X6:tm X1 -> tm X2 -> tm form} ({x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [X6:tm X1 -> tm X2 -> tm form] [p1:{x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4)] forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4) ([x3:tm X1] [y:tm X2] imp3_i (X3 x3 y) (X4 x3 y) (X5 x3 y) (X6 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] [x6:pf (X5 x3 y)] p1 x3 y x4 x5 x6)).
forall2_imp4_i : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} {X6:tm X1 -> tm X2 -> tm form} {X7:tm X1 -> tm X2 -> tm form} ({x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [X6:tm X1 -> tm X2 -> tm form] [X7:tm X1 -> tm X2 -> tm form] [p1:{x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4)] forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4) ([x3:tm X1] [y:tm X2] imp4_i (X3 x3 y) (X4 x3 y) (X5 x3 y) (X6 x3 y) (X7 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] [x6:pf (X5 x3 y)] [x7:pf (X6 x3 y)] p1 x3 y x4 x5 x6 x7)).
forall2_imp5_i : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} {X6:tm X1 -> tm X2 -> tm form} {X7:tm X1 -> tm X2 -> tm form} {X8:tm X1 -> tm X2 -> tm form} ({x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4) -> pf (X8 x3 x4)) -> pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4 imp X8 x3 x4)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [X6:tm X1 -> tm X2 -> tm form] [X7:tm X1 -> tm X2 -> tm form] [X8:tm X1 -> tm X2 -> tm form] [p1:{x3:tm X1} {x4:tm X2} pf (X3 x3 x4) -> pf (X4 x3 x4) -> pf (X5 x3 x4) -> pf (X6 x3 x4) -> pf (X7 x3 x4) -> pf (X8 x3 x4)] forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4 imp X8 x3 x4) ([x3:tm X1] [y:tm X2] imp5_i (X3 x3 y) (X4 x3 y) (X5 x3 y) (X6 x3 y) (X7 x3 y) (X8 x3 y) ([x4:pf (X3 x3 y)] [x5:pf (X4 x3 y)] [x6:pf (X5 x3 y)] [x7:pf (X6 x3 y)] [x8:pf (X7 x3 y)] p1 x3 y x4 x5 x6 x7 x8)).
forall2_imp_e : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4)) -> ({x3:tm X1} {y:tm X2} pf (X3 x3 y) -> pf (X4 x3 y)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [p1:pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4))] [x4:tm X1] [y:tm X2] [x3:pf (X3 x4 y)] imp_e (X3 x4 y) (X4 x4 y) (forall2_e X1 X2 ([x5:tm X1] [x6:tm X2] X3 x5 x6 imp X4 x5 x6) p1 x4 y) x3.
forall2_imp2_e : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4)) -> ({x3:tm X1} {y:tm X2} pf (X3 x3 y) -> pf (X4 x3 y) -> pf (X5 x3 y)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [p1:pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4))] [x4:tm X1] [y:tm X2] [x3:pf (X3 x4 y)] [x5:pf (X4 x4 y)] imp2_e (X3 x4 y) (X4 x4 y) (X5 x4 y) (forall2_e X1 X2 ([x6:tm X1] [x7:tm X2] X3 x6 x7 imp X4 x6 x7 imp X5 x6 x7) p1 x4 y) x3 x5.
forall2_imp3_e : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} {X6:tm X1 -> tm X2 -> tm form} pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4)) -> ({x3:tm X1} {y:tm X2} pf (X3 x3 y) -> pf (X4 x3 y) -> pf (X5 x3 y) -> pf (X6 x3 y)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [X6:tm X1 -> tm X2 -> tm form] [p1:pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4))] [x4:tm X1] [y:tm X2] [x3:pf (X3 x4 y)] [x5:pf (X4 x4 y)] [x6:pf (X5 x4 y)] imp3_e (X3 x4 y) (X4 x4 y) (X5 x4 y) (X6 x4 y) (forall2_e X1 X2 ([x7:tm X1] [x8:tm X2] X3 x7 x8 imp X4 x7 x8 imp X5 x7 x8 imp X6 x7 x8) p1 x4 y) x3 x5 x6.
forall2_imp4_e : {X1:tp} {X2:tp} {X3:tm X1 -> tm X2 -> tm form} {X4:tm X1 -> tm X2 -> tm form} {X5:tm X1 -> tm X2 -> tm form} {X6:tm X1 -> tm X2 -> tm form} {X7:tm X1 -> tm X2 -> tm form} pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4)) -> ({x3:tm X1} {y:tm X2} pf (X3 x3 y) -> pf (X4 x3 y) -> pf (X5 x3 y) -> pf (X6 x3 y) -> pf (X7 x3 y)) = [X1:tp] [X2:tp] [X3:tm X1 -> tm X2 -> tm form] [X4:tm X1 -> tm X2 -> tm form] [X5:tm X1 -> tm X2 -> tm form] [X6:tm X1 -> tm X2 -> tm form] [X7:tm X1 -> tm X2 -> tm form] [p1:pf (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] X3 x3 x4 imp X4 x3 x4 imp X5 x3 x4 imp X6 x3 x4 imp X7 x3 x4))] [x4:tm X1] [y:tm X2] [x3:pf (X3 x4 y)] [x5:pf (X4 x4 y)] [x6:pf (X5 x4 y)] [x7:pf (X6 x4 y)] imp4_e (X3 x4 y) (X4 x4 y) (X5 x4 y) (X6 x4 y) (X7 x4 y) (forall2_e X1 X2 ([x8:tm X1] [x9:tm X2] X3 x8 x9 imp X4 x8 x9 imp X5 x8 x9 imp X6 x8 x9 imp X7 x8 x9) p1 x4 y) x3 x5 x6 x7.
forall3_imp_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp_i (X4 x3 y z1) (X5 x3 y z1) ([x4:pf (X4 x3 y z1)] p1 x3 y z1 x4)).
forall3_imp2_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp2_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] p1 x3 y z1 x4 x5)).
forall3_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp3_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] p1 x3 y z1 x4 x5 x6)).
forall3_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp4_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) (X8 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] [x7:pf (X7 x3 y z1)] p1 x3 y z1 x4 x5 x6 x7)).
forall3_imp5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp5_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) (X8 x3 y z1) (X9 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] [x7:pf (X7 x3 y z1)] [x8:pf (X8 x3 y z1)] p1 x3 y z1 x4 x5 x6 x7 x8)).
forall3_imp6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5) -> pf (X10 x3 x4 x5)) -> pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5 imp X10 x3 x4 x5)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} pf (X4 x3 x4 x5) -> pf (X5 x3 x4 x5) -> pf (X6 x3 x4 x5) -> pf (X7 x3 x4 x5) -> pf (X8 x3 x4 x5) -> pf (X9 x3 x4 x5) -> pf (X10 x3 x4 x5)] forall3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5 imp X10 x3 x4 x5) ([x3:tm X1] [y:tm X2] [z1:tm X3] imp6_i (X4 x3 y z1) (X5 x3 y z1) (X6 x3 y z1) (X7 x3 y z1) (X8 x3 y z1) (X9 x3 y z1) (X10 x3 y z1) ([x4:pf (X4 x3 y z1)] [x5:pf (X5 x3 y z1)] [x6:pf (X6 x3 y z1)] [x7:pf (X7 x3 y z1)] [x8:pf (X8 x3 y z1)] [x9:pf (X9 x3 y z1)] p1 x3 y z1 x4 x5 x6 x7 x8 x9)).
forall3_imp_e : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5))] [x4:tm X1] [y:tm X2] [z2:tm X3] [x3:pf (X4 x4 y z2)] imp_e (X4 x4 y z2) (X5 x4 y z2) (forall3_e X1 X2 X3 ([x5:tm X1] [x6:tm X2] [x7:tm X3] X4 x5 x6 x7 imp X5 x5 x6 x7) p1 x4 y z2) x3.
forall3_imp2_e : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5))] [x4:tm X1] [y:tm X2] [z2:tm X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] imp2_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (forall3_e X1 X2 X3 ([x6:tm X1] [x7:tm X2] [x8:tm X3] X4 x6 x7 x8 imp X5 x6 x7 x8 imp X6 x6 x7 x8) p1 x4 y z2) x3 x5.
forall3_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1) -> pf (X7 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5))] [x4:tm X1] [y:tm X2] [z2:tm X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] [x6:pf (X6 x4 y z2)] imp3_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (X7 x4 y z2) (forall3_e X1 X2 X3 ([x7:tm X1] [x8:tm X2] [x9:tm X3] X4 x7 x8 x9 imp X5 x7 x8 x9 imp X6 x7 x8 x9 imp X7 x7 x8 x9) p1 x4 y z2) x3 x5 x6.
forall3_imp4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm form} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1) -> pf (X7 x3 y z1) -> pf (X8 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5))] [x4:tm X1] [y:tm X2] [z2:tm X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] [x6:pf (X6 x4 y z2)] [x7:pf (X7 x4 y z2)] imp4_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (X7 x4 y z2) (X8 x4 y z2) (forall3_e X1 X2 X3 ([x8:tm X1] [x9:tm X2] [x10:tm X3] X4 x8 x9 x10 imp X5 x8 x9 x10 imp X6 x8 x9 x10 imp X7 x8 x9 x10 imp X8 x8 x9 x10) p1 x4 y z2) x3 x5 x6 x7.
forall3_imp5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1 -> tm X2 -> tm X3 -> tm form} {X5:tm X1 -> tm X2 -> tm X3 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm form} pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} pf (X4 x3 y z1) -> pf (X5 x3 y z1) -> pf (X6 x3 y z1) -> pf (X7 x3 y z1) -> pf (X8 x3 y z1) -> pf (X9 x3 y z1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1 -> tm X2 -> tm X3 -> tm form] [X5:tm X1 -> tm X2 -> tm X3 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm form] [p1:pf (forall3 X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x5:tm X3] X4 x3 x4 x5 imp X5 x3 x4 x5 imp X6 x3 x4 x5 imp X7 x3 x4 x5 imp X8 x3 x4 x5 imp X9 x3 x4 x5))] [x4:tm X1] [y:tm X2] [z2:tm X3] [x3:pf (X4 x4 y z2)] [x5:pf (X5 x4 y z2)] [x6:pf (X6 x4 y z2)] [x7:pf (X7 x4 y z2)] [x8:pf (X8 x4 y z2)] imp5_e (X4 x4 y z2) (X5 x4 y z2) (X6 x4 y z2) (X7 x4 y z2) (X8 x4 y z2) (X9 x4 y z2) (forall3_e X1 X2 X3 ([x9:tm X1] [x10:tm X2] [x11:tm X3] X4 x9 x10 x11 imp X5 x9 x10 x11 imp X6 x9 x10 x11 imp X7 x9 x10 x11 imp X8 x9 x10 x11 imp X9 x9 x10 x11) p1 x4 y z2) x3 x5 x6 x7 x8.
forall4_imp_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] imp_i (X5 x3 y z1 u) (X6 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] p1 x3 y z1 u x4)).
forall4_imp2_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] imp2_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] p1 x3 y z1 u x4 x5)).
forall4_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] imp3_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) (X8 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] [x6:pf (X7 x3 y z1 u)] p1 x3 y z1 u x4 x5 x6)).
forall4_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] imp4_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) (X8 x3 y z1 u) (X9 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] [x6:pf (X7 x3 y z1 u)] [x7:pf (X8 x3 y z1 u)] p1 x3 y z1 u x4 x5 x6 x7)).
forall4_imp5_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6) -> pf (X10 x3 x4 x5 x6)) -> pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} pf (X5 x3 x4 x5 x6) -> pf (X6 x3 x4 x5 x6) -> pf (X7 x3 x4 x5 x6) -> pf (X8 x3 x4 x5 x6) -> pf (X9 x3 x4 x5 x6) -> pf (X10 x3 x4 x5 x6)] forall4_i X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] imp5_i (X5 x3 y z1 u) (X6 x3 y z1 u) (X7 x3 y z1 u) (X8 x3 y z1 u) (X9 x3 y z1 u) (X10 x3 y z1 u) ([x4:pf (X5 x3 y z1 u)] [x5:pf (X6 x3 y z1 u)] [x6:pf (X7 x3 y z1 u)] [x7:pf (X8 x3 y z1 u)] [x8:pf (X9 x3 y z1 u)] p1 x3 y z1 u x4 x5 x6 x7 x8)).
forall4_imp2_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] imp2_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x6:tm X1] [x7:tm X2] [x8:tm X3] [x9:tm X4] X5 x6 x7 x8 x9 imp X6 x6 x7 x8 x9 imp X7 x6 x7 x8 x9) p1 x4 y z2 u) x3 x5.
forall4_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] imp3_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x7:tm X1] [x8:tm X2] [x9:tm X3] [x10:tm X4] X5 x7 x8 x9 x10 imp X6 x7 x8 x9 x10 imp X7 x7 x8 x9 x10 imp X8 x7 x8 x9 x10) p1 x4 y z2 u) x3 x5 x6.
forall4_imp4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u) -> pf (X9 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] [x7:pf (X8 x4 y z2 u)] imp4_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (X9 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x8:tm X1] [x9:tm X2] [x10:tm X3] [x11:tm X4] X5 x8 x9 x10 x11 imp X6 x8 x9 x10 x11 imp X7 x8 x9 x10 x11 imp X8 x8 x9 x10 x11 imp X9 x8 x9 x10 x11) p1 x4 y z2 u) x3 x5 x6 x7.
forall4_imp5_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u) -> pf (X9 x3 y z1 u) -> pf (X10 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] [x7:pf (X8 x4 y z2 u)] [x8:pf (X9 x4 y z2 u)] imp5_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (X9 x4 y z2 u) (X10 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x9:tm X1] [x10:tm X2] [x11:tm X3] [x12:tm X4] X5 x9 x10 x11 x12 imp X6 x9 x10 x11 x12 imp X7 x9 x10 x11 x12 imp X8 x9 x10 x11 x12 imp X9 x9 x10 x11 x12 imp X10 x9 x10 x11 x12) p1 x4 y z2 u) x3 x5 x6 x7 x8.
forall4_imp6_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form} pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6 imp X11 x3 x4 x5 x6)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} pf (X5 x3 y z1 u) -> pf (X6 x3 y z1 u) -> pf (X7 x3 y z1 u) -> pf (X8 x3 y z1 u) -> pf (X9 x3 y z1 u) -> pf (X10 x3 y z1 u) -> pf (X11 x3 y z1 u)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm form] [p1:pf (forall4 X1 X2 X3 X4 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] X5 x3 x4 x5 x6 imp X6 x3 x4 x5 x6 imp X7 x3 x4 x5 x6 imp X8 x3 x4 x5 x6 imp X9 x3 x4 x5 x6 imp X10 x3 x4 x5 x6 imp X11 x3 x4 x5 x6))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [x3:pf (X5 x4 y z2 u)] [x5:pf (X6 x4 y z2 u)] [x6:pf (X7 x4 y z2 u)] [x7:pf (X8 x4 y z2 u)] [x8:pf (X9 x4 y z2 u)] [x9:pf (X10 x4 y z2 u)] imp6_e (X5 x4 y z2 u) (X6 x4 y z2 u) (X7 x4 y z2 u) (X8 x4 y z2 u) (X9 x4 y z2 u) (X10 x4 y z2 u) (X11 x4 y z2 u) (forall4_e X1 X2 X3 X4 ([x10:tm X1] [x11:tm X2] [x12:tm X3] [x13:tm X4] X5 x10 x11 x12 x13 imp X6 x10 x11 x12 x13 imp X7 x10 x11 x12 x13 imp X8 x10 x11 x12 x13 imp X9 x10 x11 x12 x13 imp X10 x10 x11 x12 x13 imp X11 x10 x11 x12 x13) p1 x4 y z2 u) x3 x5 x6 x7 x8 x9.
forall5_imp_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7)] forall5_i X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] imp_i (X6 x3 y z1 u v1) (X7 x3 y z1 u v1) ([x4:pf (X6 x3 y z1 u v1)] p1 x3 y z1 u v1 x4)).
forall5_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7)] forall5_i X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] imp3_i (X6 x3 y z1 u v1) (X7 x3 y z1 u v1) (X8 x3 y z1 u v1) (X9 x3 y z1 u v1) ([x4:pf (X6 x3 y z1 u v1)] [x5:pf (X7 x3 y z1 u v1)] [x6:pf (X8 x3 y z1 u v1)] p1 x3 y z1 u v1 x4 x5 x6)).
forall5_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7) -> pf (X10 x3 x4 x5 x6 x7)) -> pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7 imp X10 x3 x4 x5 x6 x7)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} pf (X6 x3 x4 x5 x6 x7) -> pf (X7 x3 x4 x5 x6 x7) -> pf (X8 x3 x4 x5 x6 x7) -> pf (X9 x3 x4 x5 x6 x7) -> pf (X10 x3 x4 x5 x6 x7)] forall5_i X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7 imp X10 x3 x4 x5 x6 x7) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] imp4_i (X6 x3 y z1 u v1) (X7 x3 y z1 u v1) (X8 x3 y z1 u v1) (X9 x3 y z1 u v1) (X10 x3 y z1 u v1) ([x4:pf (X6 x3 y z1 u v1)] [x5:pf (X7 x3 y z1 u v1)] [x6:pf (X8 x3 y z1 u v1)] [x7:pf (X9 x3 y z1 u v1)] p1 x3 y z1 u v1 x4 x5 x6 x7)).
forall5_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form} pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} {v1:tm X5} pf (X6 x3 y z1 u v1) -> pf (X7 x3 y z1 u v1) -> pf (X8 x3 y z1 u v1) -> pf (X9 x3 y z1 u v1)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm form] [p1:pf (forall5 X1 X2 X3 X4 X5 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] X6 x3 x4 x5 x6 x7 imp X7 x3 x4 x5 x6 x7 imp X8 x3 x4 x5 x6 x7 imp X9 x3 x4 x5 x6 x7))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [v2:tm X5] [x3:pf (X6 x4 y z2 u v2)] [x5:pf (X7 x4 y z2 u v2)] [x6:pf (X8 x4 y z2 u v2)] imp3_e (X6 x4 y z2 u v2) (X7 x4 y z2 u v2) (X8 x4 y z2 u v2) (X9 x4 y z2 u v2) (forall5_e X1 X2 X3 X4 X5 ([x7:tm X1] [x8:tm X2] [x9:tm X3] [x10:tm X4] [x11:tm X5] X6 x7 x8 x9 x10 x11 imp X7 x7 x8 x9 x10 x11 imp X8 x7 x8 x9 x10 x11 imp X9 x7 x8 x9 x10 x11) p1 x4 y z2 u v2) x3 x5 x6.
forall6_imp2_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8)] forall6_i X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] imp2_i (X7 x3 y z1 u v1 w) (X8 x3 y z1 u v1 w) (X9 x3 y z1 u v1 w) ([x4:pf (X7 x3 y z1 u v1 w)] [x5:pf (X8 x3 y z1 u v1 w)] p1 x3 y z1 u v1 w x4 x5)).
forall6_imp3_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8)] forall6_i X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] imp3_i (X7 x3 y z1 u v1 w) (X8 x3 y z1 u v1 w) (X9 x3 y z1 u v1 w) (X10 x3 y z1 u v1 w) ([x4:pf (X7 x3 y z1 u v1 w)] [x5:pf (X8 x3 y z1 u v1 w)] [x6:pf (X9 x3 y z1 u v1 w)] p1 x3 y z1 u v1 w x4 x5 x6)).
forall6_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8) -> pf (X11 x3 x4 x5 x6 x7 x8)) -> pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} pf (X7 x3 x4 x5 x6 x7 x8) -> pf (X8 x3 x4 x5 x6 x7 x8) -> pf (X9 x3 x4 x5 x6 x7 x8) -> pf (X10 x3 x4 x5 x6 x7 x8) -> pf (X11 x3 x4 x5 x6 x7 x8)] forall6_i X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] imp4_i (X7 x3 y z1 u v1 w) (X8 x3 y z1 u v1 w) (X9 x3 y z1 u v1 w) (X10 x3 y z1 u v1 w) (X11 x3 y z1 u v1 w) ([x4:pf (X7 x3 y z1 u v1 w)] [x5:pf (X8 x3 y z1 u v1 w)] [x6:pf (X9 x3 y z1 u v1 w)] [x7:pf (X10 x3 y z1 u v1 w)] p1 x3 y z1 u v1 w x4 x5 x6 x7)).
forall6_imp3_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} {v1:tm X5} {w:tm X6} pf (X7 x3 y z1 u v1 w) -> pf (X8 x3 y z1 u v1 w) -> pf (X9 x3 y z1 u v1 w) -> pf (X10 x3 y z1 u v1 w)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [p1:pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [v2:tm X5] [w:tm X6] [x3:pf (X7 x4 y z2 u v2 w)] [x5:pf (X8 x4 y z2 u v2 w)] [x6:pf (X9 x4 y z2 u v2 w)] imp3_e (X7 x4 y z2 u v2 w) (X8 x4 y z2 u v2 w) (X9 x4 y z2 u v2 w) (X10 x4 y z2 u v2 w) (forall6_e X1 X2 X3 X4 X5 X6 ([x7:tm X1] [x8:tm X2] [x9:tm X3] [x10:tm X4] [x11:tm X5] [x12:tm X6] X7 x7 x8 x9 x10 x11 x12 imp X8 x7 x8 x9 x10 x11 x12 imp X9 x7 x8 x9 x10 x11 x12 imp X10 x7 x8 x9 x10 x11 x12) p1 x4 y z2 u v2 w) x3 x5 x6.
forall6_imp4_e : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form} pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8)) -> ({x3:tm X1} {y:tm X2} {z1:tm X3} {u:tm X4} {v1:tm X5} {w:tm X6} pf (X7 x3 y z1 u v1 w) -> pf (X8 x3 y z1 u v1 w) -> pf (X9 x3 y z1 u v1 w) -> pf (X10 x3 y z1 u v1 w) -> pf (X11 x3 y z1 u v1 w)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm form] [p1:pf (forall6 X1 X2 X3 X4 X5 X6 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] X7 x3 x4 x5 x6 x7 x8 imp X8 x3 x4 x5 x6 x7 x8 imp X9 x3 x4 x5 x6 x7 x8 imp X10 x3 x4 x5 x6 x7 x8 imp X11 x3 x4 x5 x6 x7 x8))] [x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X4] [v2:tm X5] [w:tm X6] [x3:pf (X7 x4 y z2 u v2 w)] [x5:pf (X8 x4 y z2 u v2 w)] [x6:pf (X9 x4 y z2 u v2 w)] [x7:pf (X10 x4 y z2 u v2 w)] imp4_e (X7 x4 y z2 u v2 w) (X8 x4 y z2 u v2 w) (X9 x4 y z2 u v2 w) (X10 x4 y z2 u v2 w) (X11 x4 y z2 u v2 w) (forall6_e X1 X2 X3 X4 X5 X6 ([x8:tm X1] [x9:tm X2] [x10:tm X3] [x11:tm X4] [x12:tm X5] [x13:tm X6] X7 x8 x9 x10 x11 x12 x13 imp X8 x8 x9 x10 x11 x12 x13 imp X9 x8 x9 x10 x11 x12 x13 imp X10 x8 x9 x10 x11 x12 x13 imp X11 x8 x9 x10 x11 x12 x13) p1 x4 y z2 u v2 w) x3 x5 x6 x7.
forall7_imp9_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X14:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X15:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X16:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} {X17:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} pf (X8 x3 x4 x5 x6 x7 x8 x9) -> pf (X9 x3 x4 x5 x6 x7 x8 x9) -> pf (X10 x3 x4 x5 x6 x7 x8 x9) -> pf (X11 x3 x4 x5 x6 x7 x8 x9) -> pf (X12 x3 x4 x5 x6 x7 x8 x9) -> pf (X13 x3 x4 x5 x6 x7 x8 x9) -> pf (X14 x3 x4 x5 x6 x7 x8 x9) -> pf (X15 x3 x4 x5 x6 x7 x8 x9) -> pf (X16 x3 x4 x5 x6 x7 x8 x9) -> pf (X17 x3 x4 x5 x6 x7 x8 x9)) -> pf (forall7 X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] X8 x3 x4 x5 x6 x7 x8 x9 imp X9 x3 x4 x5 x6 x7 x8 x9 imp X10 x3 x4 x5 x6 x7 x8 x9 imp X11 x3 x4 x5 x6 x7 x8 x9 imp X12 x3 x4 x5 x6 x7 x8 x9 imp X13 x3 x4 x5 x6 x7 x8 x9 imp X14 x3 x4 x5 x6 x7 x8 x9 imp X15 x3 x4 x5 x6 x7 x8 x9 imp X16 x3 x4 x5 x6 x7 x8 x9 imp X17 x3 x4 x5 x6 x7 x8 x9)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X14:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X15:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X16:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [X17:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} pf (X8 x3 x4 x5 x6 x7 x8 x9) -> pf (X9 x3 x4 x5 x6 x7 x8 x9) -> pf (X10 x3 x4 x5 x6 x7 x8 x9) -> pf (X11 x3 x4 x5 x6 x7 x8 x9) -> pf (X12 x3 x4 x5 x6 x7 x8 x9) -> pf (X13 x3 x4 x5 x6 x7 x8 x9) -> pf (X14 x3 x4 x5 x6 x7 x8 x9) -> pf (X15 x3 x4 x5 x6 x7 x8 x9) -> pf (X16 x3 x4 x5 x6 x7 x8 x9) -> pf (X17 x3 x4 x5 x6 x7 x8 x9)] forall7_i X1 X2 X3 X4 X5 X6 X7 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] X8 x3 x4 x5 x6 x7 x8 x9 imp X9 x3 x4 x5 x6 x7 x8 x9 imp X10 x3 x4 x5 x6 x7 x8 x9 imp X11 x3 x4 x5 x6 x7 x8 x9 imp X12 x3 x4 x5 x6 x7 x8 x9 imp X13 x3 x4 x5 x6 x7 x8 x9 imp X14 x3 x4 x5 x6 x7 x8 x9 imp X15 x3 x4 x5 x6 x7 x8 x9 imp X16 x3 x4 x5 x6 x7 x8 x9 imp X17 x3 x4 x5 x6 x7 x8 x9) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] [r:tm X7] imp9_i (X8 x3 y z1 u v1 w r) (X9 x3 y z1 u v1 w r) (X10 x3 y z1 u v1 w r) (X11 x3 y z1 u v1 w r) (X12 x3 y z1 u v1 w r) (X13 x3 y z1 u v1 w r) (X14 x3 y z1 u v1 w r) (X15 x3 y z1 u v1 w r) (X16 x3 y z1 u v1 w r) (X17 x3 y z1 u v1 w r) ([x4:pf (X8 x3 y z1 u v1 w r)] [x5:pf (X9 x3 y z1 u v1 w r)] [x6:pf (X10 x3 y z1 u v1 w r)] [x7:pf (X11 x3 y z1 u v1 w r)] [x8:pf (X12 x3 y z1 u v1 w r)] [x9:pf (X13 x3 y z1 u v1 w r)] [x10:pf (X14 x3 y z1 u v1 w r)] [x11:pf (X15 x3 y z1 u v1 w r)] [x12:pf (X16 x3 y z1 u v1 w r)] p1 x3 y z1 u v1 w r x4 x5 x6 x7 x8 x9 x10 x11 x12)).
forall8_imp4_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} {x10:tm X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10)) -> pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} {x10:tm X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10)] forall8_i X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] [r:tm X7] [s:tm X8] imp4_i (X9 x3 y z1 u v1 w r s) (X10 x3 y z1 u v1 w r s) (X11 x3 y z1 u v1 w r s) (X12 x3 y z1 u v1 w r s) (X13 x3 y z1 u v1 w r s) ([x4:pf (X9 x3 y z1 u v1 w r s)] [x5:pf (X10 x3 y z1 u v1 w r s)] [x6:pf (X11 x3 y z1 u v1 w r s)] [x7:pf (X12 x3 y z1 u v1 w r s)] p1 x3 y z1 u v1 w r s x4 x5 x6 x7)).
forall8_imp6_i : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tp} {X6:tp} {X7:tp} {X8:tp} {X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X14:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} {X15:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form} ({x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} {x10:tm X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X14 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X15 x3 x4 x5 x6 x7 x8 x9 x10)) -> pf (forall8 X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10 imp X14 x3 x4 x5 x6 x7 x8 x9 x10 imp X15 x3 x4 x5 x6 x7 x8 x9 x10)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tp] [X6:tp] [X7:tp] [X8:tp] [X9:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X10:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X11:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X12:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X13:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X14:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [X15:tm X1 -> tm X2 -> tm X3 -> tm X4 -> tm X5 -> tm X6 -> tm X7 -> tm X8 -> tm form] [p1:{x3:tm X1} {x4:tm X2} {x5:tm X3} {x6:tm X4} {x7:tm X5} {x8:tm X6} {x9:tm X7} {x10:tm X8} pf (X9 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X10 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X11 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X12 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X13 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X14 x3 x4 x5 x6 x7 x8 x9 x10) -> pf (X15 x3 x4 x5 x6 x7 x8 x9 x10)] forall8_i X1 X2 X3 X4 X5 X6 X7 X8 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] [x7:tm X5] [x8:tm X6] [x9:tm X7] [x10:tm X8] X9 x3 x4 x5 x6 x7 x8 x9 x10 imp X10 x3 x4 x5 x6 x7 x8 x9 x10 imp X11 x3 x4 x5 x6 x7 x8 x9 x10 imp X12 x3 x4 x5 x6 x7 x8 x9 x10 imp X13 x3 x4 x5 x6 x7 x8 x9 x10 imp X14 x3 x4 x5 x6 x7 x8 x9 x10 imp X15 x3 x4 x5 x6 x7 x8 x9 x10) ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X4] [v1:tm X5] [w:tm X6] [r:tm X7] [s:tm X8] imp6_i (X9 x3 y z1 u v1 w r s) (X10 x3 y z1 u v1 w r s) (X11 x3 y z1 u v1 w r s) (X12 x3 y z1 u v1 w r s) (X13 x3 y z1 u v1 w r s) (X14 x3 y z1 u v1 w r s) (X15 x3 y z1 u v1 w r s) ([x4:pf (X9 x3 y z1 u v1 w r s)] [x5:pf (X10 x3 y z1 u v1 w r s)] [x6:pf (X11 x3 y z1 u v1 w r s)] [x7:pf (X12 x3 y z1 u v1 w r s)] [x8:pf (X13 x3 y z1 u v1 w r s)] [x9:pf (X14 x3 y z1 u v1 w r s)] p1 x3 y z1 u v1 w r s x4 x5 x6 x7 x8 x9)).
exists_and_i : {T:tp} {A:tm T -> tform} {B:tm T -> tform} {x3:tm T} pf (A x3) -> pf (B x3) -> pf (exists T ([x4:tm T] A x4 and B x4)) = [T:tp] [A:tm T -> tform] [B:tm T -> tform] [x5:tm T] [pA:pf (A x5)] [pB:pf (B x5)] exists_i T ([x3:tm T] A x3 and B x3) x5 (and_i (A x5) (B x5) pA pB).
exists_and_e : {X1:tp} {A:tm X1 -> tform} {B:tm X1 -> tform} {C:tform} pf (exists X1 ([x3:tm X1] A x3 and B x3)) -> ({x4:tm X1} pf (A x4) -> pf (B x4) -> pf C) -> pf C = [X1:tp] [A:tm X1 -> tform] [B:tm X1 -> tform] [C:tform] [p1:pf (exists X1 ([x5:tm X1] A x5 and B x5))] [p2:{x6:tm X1} pf (A x6) -> pf (B x6) -> pf C] cut (forall X1 ([x3:tm X1] A x3 imp B x3 imp C)) C (forall_imp2_i X1 ([x7:tm X1] A x7) ([x3:tm X1] B x3) ([x3:tm X1] C) ([x3:tm X1] [x4:pf (A x3)] [x5:pf (B x3)] p2 x3 x4 x5)) ([x3:pf (forall X1 ([x3:tm X1] A x3 imp B x3 imp C))] exists_e X1 ([x4:tm X1] A x4 and B x4) C p1 ([x8:tm X1] [p3:pf (A x8 and B x8)] p2 x8 (and_e1 (A x8) (B x8) p3) (and_e2 (A x8) (B x8) p3))).
exists3_and6_i : {X1:tp} {X2:tp} {X3:tp} {A:tm X1 -> tm X2 -> tm X3 -> tform} {B:tm X1 -> tm X2 -> tm X3 -> tform} {C:tm X1 -> tm X2 -> tm X3 -> tform} {D:tm X1 -> tm X2 -> tm X3 -> tform} {E:tm X1 -> tm X2 -> tm X3 -> tform} {F:tm X1 -> tm X2 -> tm X3 -> tform} {x3:tm X1} {y:tm X2} {z1:tm X3} pf (A x3 y z1) -> pf (B x3 y z1) -> pf (C x3 y z1) -> pf (D x3 y z1) -> pf (E x3 y z1) -> pf (F x3 y z1) -> pf (exists3 X1 X2 X3 ([x4:tm X1] [y1:tm X2] [z2:tm X3] A x4 y1 z2 and B x4 y1 z2 and C x4 y1 z2 and D x4 y1 z2 and E x4 y1 z2 and F x4 y1 z2)) = [X1:tp] [X2:tp] [X3:tp] [A:tm X1 -> tm X2 -> tm X3 -> tform] [B:tm X1 -> tm X2 -> tm X3 -> tform] [C:tm X1 -> tm X2 -> tm X3 -> tform] [D:tm X1 -> tm X2 -> tm X3 -> tform] [E:tm X1 -> tm X2 -> tm X3 -> tform] [F:tm X1 -> tm X2 -> tm X3 -> tform] [x5:tm X1] [y:tm X2] [z3:tm X3] [pA:pf (A x5 y z3)] [pB:pf (B x5 y z3)] [pC:pf (C x5 y z3)] [pD:pf (D x5 y z3)] [pE:pf (E x5 y z3)] [pF:pf (F x5 y z3)] exists3_i X1 X2 X3 ([x3:tm X1] [x4:tm X2] [x6:tm X3] A x3 x4 x6 and B x3 x4 x6 and C x3 x4 x6 and D x3 x4 x6 and E x3 x4 x6 and F x3 x4 x6) x5 y z3 (and6_i (A x5 y z3) (B x5 y z3) (C x5 y z3) (D x5 y z3) (E x5 y z3) (F x5 y z3) pA pB pC pD pE pF).
not_not_e : {B:tform} pf ((B imp _frl_frm ([A:tform] A)) imp _frl_frm ([A:tform] A)) -> pf B = [B:tform] [x3:pf ((B imp _frl_frm ([A:tform] A)) imp _frl_frm ([A:tform] A))] _not_not_e B x3.
excluded_middle_x : {A:tform} pf (not A) -> pf (not (not A)) -> pf false = [A:tform] [P1:pf (A imp false)] [P2:pf (not A imp false)] imp_e (not A) false P2 P1.
excluded_middle : {A:tform} pf (A or not A) = [A:tform] forall_i form ([x3:tm form] (A imp x3) imp ((A imp false) imp x3) imp x3) ([C:tm form] imp_i (A imp C) (((A imp false) imp C) imp C) ([P1:pf (A imp C)] imp_i ((A imp false) imp C) C ([P2:pf ((A imp false) imp C)] not_not_e C (imp_i (C imp false) false ([P3:pf (C imp false)] excluded_middle_x A (imp_i A false ([P4:pf A] imp_e C false P3 (imp_e A C P1 P4))) (imp_i (not A) false ([P5:pf (not A)] imp_e C false P3 (imp_e (A imp false) C P2 P5)))))))).
suppose_not : {A:tform} (pf (not A) -> pf false) -> pf A = [A:tform] [P1:pf (not A) -> pf false] or_e A (not A) A (excluded_middle A) ([P2:pf A] P2) ([P3:pf (not A)] false_e A (P1 P3)).
or_imp_i : {A:tform} {B:tform} pf (A imp B) -> pf (not A or B) = [A:tform] [B:tform] [Q:pf (A imp B)] or_e A (not A) (not A or B) (excluded_middle A) ([Q':pf A] or_i2 B (not A) (imp_e A B Q Q')) ([Q':pf (not A)] or_i1 (not A) B Q').
equiv_not_not : {A:tform} pf (A equiv not (not A)) = [A:tform] equiv_i A (not (not A)) (imp_i A (not (not A)) ([x3:pf A] not_not_i A x3)) (imp_i ((A imp _frl_frm ([A1:tform] A1)) imp _frl_frm ([A2:tform] A2)) A ([x3:pf ((A imp _frl_frm ([A3:tform] A3)) imp _frl_frm ([A4:tform] A4))] not_not_e A x3)).
not_AE_not : {X1:tp} {A:tm X1 -> tform} pf (not (forall X1 ([x3:tm X1] A x3))) -> pf (exists X1 ([X:tm X1] not (A X))) = [X1:tp] [A:tm X1 -> tform] [P1:pf (not (forall X1 ([x3:tm X1] A x3)))] suppose_not (exists X1 ([X:tm X1] not (A X))) ([P3:pf (not (exists X1 ([X:tm X1] not (A X))))] not_e (forall X1 ([x3:tm X1] A x3)) P1 (forall_i X1 ([x3:tm X1] A x3) ([X:tm X1] suppose_not (A X) ([P4:pf (not (A X))] not_e (exists X1 ([X2:tm X1] not (A X2))) P3 (exists_i X1 ([x3:tm X1] not (A x3)) X P4))))).
not_AE_not2 : {X1:tp} {X2:tp} {A:tm X1 -> tm X2 -> tform} pf (not (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4))) -> pf (exists2 X1 X2 ([X:tm X1] [Y:tm X2] not (A X Y))) = [X1:tp] [X2:tp] [A:tm X1 -> tm X2 -> tform] [P1:pf (not (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4)))] suppose_not (exists2 X1 X2 ([X:tm X1] [Y:tm X2] not (A X Y))) ([P3:pf (not (exists2 X1 X2 ([X:tm X1] [Y:tm X2] not (A X Y))))] not_e (forall2 X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4)) P1 (forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] A x3 x4) ([X:tm X1] [Y:tm X2] suppose_not (A X Y) ([P4:pf (not (A X Y))] not_e (exists2 X1 X2 ([X3:tm X1] [Y1:tm X2] not (A X3 Y1))) P3 (exists2_i X1 X2 ([x3:tm X1] [x4:tm X2] not (A x3 x4)) X Y P4))))).
not_EA_not : {X1:tp} {A:tm X1 -> tm form} pf (not (exists X1 ([x3:tm X1] A x3))) -> pf (forall X1 ([X:tm X1] not (A X))) = [X1:tp] [A:tm X1 -> tm form] [P1:pf (not (exists X1 ([x3:tm X1] A x3)))] not_not_e (forall X1 ([X:tm X1] not (A X))) (not_ei (exists X1 ([x3:tm X1] A x3)) (not (forall X1 ([X:tm X1] not (A X)))) P1 ([P2:pf (not (forall X1 ([X:tm X1] not (A X))))] exists_ei X1 ([x3:tm X1] not (not (A x3))) ([x3:tm X1] A x3) (not_AE_not X1 ([x3:tm X1] not (A x3)) P2) ([X:tm X1] [x3:pf ((A X imp _frl_frm ([A1:tform] A1)) imp _frl_frm ([A2:tform] A2))] not_not_e (A X) x3))).
demorgan_or_not : {A:tform} {B:tform} pf (not (A and B)) -> pf (not A or not B) = [A:tform] [B:tform] [Q:pf (not (A and B))] or_e A (not A) (not A or not B) (excluded_middle A) ([PA:pf A] or_e B (not B) (not A or not B) (excluded_middle B) ([PB:pf B] false_e (not A or not B) (imp_e (A and B) false Q (and_i A B PA PB))) ([NotPB:pf (not B)] or_i2 (not B) (not A) NotPB)) ([NotPA:pf (not A)] or_e B (not B) (not A or not B) (excluded_middle B) ([PB:pf B] or_i1 (not A) (not B) NotPA) ([NotPB:pf (not B)] or_i1 (not A) (not B) NotPA)).
demorgan_not_and : {A:tform} {B:tform} pf (not (A or B)) -> pf (not A and not B) = [A:tform] [B:tform] [p1:pf (not (A or B))] and_i (not A) (not B) (or_e A (not A) (not A) (excluded_middle A) ([pa:pf A] cut false (not A) (imp_e (A or B) false p1 (or_i1 A B pa)) ([x3:pf false] false_e (not A) x3)) ([pna:pf (not A)] pna)) (or_e B (not B) (not B) (excluded_middle B) ([pb:pf B] cut false (not B) (imp_e (A or B) false p1 (or_i2 B A pb)) ([x3:pf false] false_e (not B) x3)) ([pnb:pf (not B)] pnb)).
contrapositive1 : {A:tform} {B:tform} pf (A imp B) -> pf (not B imp not A) = [A:tform] [B:tform] [Q:pf (A imp B)] or_e (not A) B ((B imp false) imp not A) (or_imp_i A B Q) ([Q':pf (not A)] imp_i (B imp false) (not A) ([P_NOT_B:pf (B imp false)] Q')) ([Q':pf B] imp_i (B imp false) (not A) ([P_NOT_B:pf (B imp false)] false_e (not A) (imp_e B false P_NOT_B Q'))).
contrapositive2 : {B:tform} {A:tform} pf (not B imp not A) -> pf (A imp B) = [B:tform] [A:tform] [Q:pf (not B imp not A)] or_e (not (not B)) (not A) (A imp B) (or_imp_i (not B) (not A) Q) ([Q':pf (not (not B))] imp_i A B ([PA:pf A] not_not_e B Q')) ([Q':pf (not A)] imp_i A B ([PA:pf A] false_e B (imp_e A false Q' PA))).
equiv_not_i : {A:tform} {B:tform} pf (A equiv B) -> pf (not A equiv not B) = [A:tform] [B:tform] [P1:pf (A equiv B)] equiv_i (not A) (not B) (contrapositive1 B A (imp_i B A ([x3:pf B] equiv_e2 A B P1 x3))) (contrapositive1 A B (imp_i A B ([x3:pf A] equiv_e1 A B P1 x3))).
equiv_not_e : {A:tform} {B:tform} pf (not A equiv not B) -> pf (A equiv B) = [A:tform] [B:tform] [p1:pf (not A equiv not B)] equiv_i A B (contrapositive2 B A (imp_i (not B) (not A) ([x3:pf (not B)] equiv_e2 (not A) (not B) p1 x3))) (contrapositive2 A B (imp_i (not A) (not B) ([x3:pf (not A)] equiv_e1 (not A) (not B) p1 x3))).
if_e : {E:tform} {A:tform} {B:tform} {C:tform} pf (if E A B) -> (pf E -> pf A -> pf C) -> (pf (not E) -> pf B -> pf C) -> pf C = [E:tform] [A:tform] [B:tform] [C:tform] [p1:pf (if E A B)] [p2:pf E -> pf A -> pf C] [p3:pf (not E) -> pf B -> pf C] cut (if E A B) C p1 ([x3:pf (if E A B)] cut (E imp A imp C) C (imp2_i E A C ([x4:pf E] [x5:pf A] p2 x4 x5)) ([x4:pf (E imp A imp C)] cut (not E imp B imp C) C (imp2_i (not E) B C ([x5:pf (not E)] [x6:pf B] p3 x5 x6)) ([x5:pf (not E imp B imp C)] or_e E (not E) C (excluded_middle E) ([p4:pf E] p2 p4 (if_e1 E A B p1 p4)) ([p4:pf (not E)] p3 p4 (if_e2 E A B p1 p4))))).
+ : tm num -> tm num -> tm num = [x3:tm num] [x4:tm num] plus x3 x4.
- : tm num -> tm num -> tm num = [x3:tm num] [x4:tm num] minus x3 x4.
* : tm num -> tm num -> tm num = [x3:tm num] [x4:tm num] times x3 x4.
>= : tm num -> tm num -> tm form = [x3:tm num] [x4:tm num] geq x3 x4.
> : tm num -> tm num -> tm form = [x3:tm num] [x4:tm num] gt x3 x4.
<= : tm num -> tm num -> tm form = [x3:tm num] [x4:tm num] leq x3 x4.
< : tm num -> tm num -> tm form = [x3:tm num] [x4:tm num] lt x3 x4.
plus_assoc : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ (+ A B) C) (+ A (+ B C))) = [A:tm num] [B:tm num] [C:tm num] _assoc_add A B C.
assoc_plus : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ A (+ B C)) (+ (+ A B) C)) = [A:tm num] [B:tm num] [C:tm num] symm num (+ (+ A B) C) (+ A (+ B C)) (plus_assoc A B C).
plus_zero : {A:tm num} pf (== num (+ A zero) A) = [A:tm num] _zero_add A.
zero_plus : {A:tm num} pf (== num (+ zero A) A) = [A:tm num] trans num (plus zero A) (plus A zero) A (_comm_add zero A) (plus_zero A).
plus_inv : {A:tm num} pf (== num (- A A) zero) = [A:tm num] _inv_add A.
inv_plus : {A:tnum} pf (== num (+ (neg A) A) zero) = [A:tnum] trans num (plus (neg A) A) (plus A (neg A)) zero (_comm_add (neg A) A) (plus_inv A).
comm_plus : {A:tm num} {B:tm num} pf (== num (+ A B) (+ B A)) = [A:tm num] [B:tm num] _comm_add A B.
plus_comm : {X1:tm num} {X2:tm num} pf (== num (+ X1 X2) (+ X2 X1)) = [X1:tm num] [X2:tm num] comm_plus X1 X2.
times_assoc : {A:tm num} {B:tm num} {C:tm num} pf (== num (* (* A B) C) (* A (* B C))) = [A:tm num] [B:tm num] [C:tm num] _assoc_mult A B C.
assoc_times : {A:tm num} {B:tm num} {C:tm num} pf (== num (* A (* B C)) (* (* A B) C)) = [A:tm num] [B:tm num] [C:tm num] symm num (* (* A B) C) (* A (* B C)) (times_assoc A B C).
times_one : {A:tm num} pf (== num (* A one) A) = [A:tm num] _zero_mult A.
one_times : {A:tm num} pf (== num (* one A) A) = [A:tm num] trans num (times one A) (times A one) A (_comm_mult one A) (times_one A).
comm_times : {A:tm num} {B:tm num} pf (== num (* A B) (* B A)) = [A:tm num] [B:tm num] _comm_mult A B.
distrib : {A:tm num} {B:tm num} {C:tm num} pf (== num (* A (+ B C)) (+ (* A B) (* A C))) = [A:tm num] [B:tm num] [C:tm num] _distrib A B C.
distrib_right : {A:tm num} {B:tm num} {C:tm num} pf (== num (* (+ A B) C) (+ (* A C) (* B C))) = [A:tm num] [B:tm num] [C:tm num] cut (== num (+ (* C A) (* C B)) (+ (* A C) (* B C))) (== num (* (+ A B) C) (+ (* A C) (* B C))) (congr2 num num (* A C) (* C A) (* B C) (* C B) ([i1:tm num] [j:tm num] == num (+ (* C A) (* C B)) (+ i1 j)) (comm_times A C) (comm_times B C) (refl num (+ (* C A) (* C B)))) ([p1:pf (== num (+ (* C A) (* C B)) (+ (* A C) (* B C)))] trans3 num (* (+ A B) C) (* C (+ A B)) (+ (* C A) (* C B)) (+ (* A C) (* B C)) (comm_times (+ A B) C) (distrib C A B) p1).
neg_neg_e : {A:tnum} pf (== num (neg (neg A)) A) = [A:tnum] cut (== num (- (- A A) (neg A)) (- zero (neg A))) (== num (neg (neg A)) A) (congr num (- A A) zero ([z1:tm num] == num (- z1 (neg A)) (- zero (neg A))) (plus_inv A) (refl num (- zero (neg A)))) ([p1:pf (== num (- (+ A (neg A)) (neg A)) (+ zero (neg (neg A))))] cut (== num (+ A zero) (+ zero (neg (neg A)))) (== num (neg (neg A)) A) (congr num zero (- (neg A) (neg A)) ([z2:tm num] == num (+ A z2) (+ zero (neg (neg A)))) (symm num (- (neg A) (neg A)) zero (plus_inv (neg A))) (trans num (+ A (+ (neg A) (neg (neg A)))) (+ (+ A (neg A)) (neg (neg A))) (+ zero (neg (neg A))) (assoc_plus A (neg A) (neg (neg A))) p1)) ([p2:pf (== num (+ A zero) (+ zero (neg (neg A))))] trans4 num (neg (neg A)) (+ (neg (neg A)) zero) (+ zero (neg (neg A))) (+ A zero) A (symm num (+ (neg (neg A)) zero) (neg (neg A)) (plus_zero (neg (neg A)))) (comm_plus (neg (neg A)) zero) (symm num (+ A zero) (+ zero (neg (neg A))) p2) (plus_zero A))).
neg_zero : pf (== num (neg zero) zero) = trans num (neg zero) (+ zero (neg zero)) zero (symm num (+ zero (neg zero)) (neg zero) (zero_plus (neg zero))) (plus_inv zero).
plus_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (== num C D) -> pf (== num (+ A C) (+ B D)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (== num C D)] congr2 num num A B C D ([i1:tm num] [j:tm num] == num (+ i1 j) (+ B D)) p1 p2 (refl num (+ B D)).
plus_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (== num (+ C A) (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] plus_cong C C A B (refl num C) p1.
plus_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (== num (+ A C) (+ B C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] plus_cong A B C C p1 (refl num C).
plus_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ A B) (+ C B)) -> pf (== num A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num (+ A B) (+ C B))] trans3 num A (+ (+ A B) (neg B)) (+ (+ C B) (neg B)) C (trans3 num A (+ A zero) (+ A (- B B)) (+ (+ A B) (neg B)) (symm num (+ A zero) A (plus_zero A)) (plus_cong2 zero (- B B) A (symm num (- B B) zero (plus_inv B))) (assoc_plus A B (neg B))) (plus_cong1 (+ A B) (+ C B) (neg B) p1) (trans3 num (+ (+ C B) (neg B)) (+ C (+ B (neg B))) (+ C zero) C (plus_assoc C B (neg B)) (plus_cong2 (- B B) zero C (plus_inv B)) (plus_zero C)).
plus_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ A B) (+ A C)) -> pf (== num B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num (+ A B) (+ A C))] plus_elim2 B A C (trans3 num (+ B A) (+ A B) (+ A C) (+ C A) (comm_plus B A) p1 (comm_plus A C)).
times_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (== num C D) -> pf (== num (* A C) (* B D)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (== num C D)] congr2 num num A B C D ([i1:tm num] [j:tm num] == num (* i1 j) (* B D)) p1 p2 (refl num (* B D)).
times_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (== num (* C A) (* C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] times_cong C C A B (refl num C) p1.
times_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (== num (* A C) (* B C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] times_cong A B C C p1 (refl num C).
neg_cong : {A:tm num} {B:tm num} pf (== num A B) -> pf (== num (neg A) (neg B)) = [A:tm num] [B:tm num] [p1:pf (== num A B)] congr num A B ([i1:tm num] == num (neg i1) (neg B)) p1 (refl num (neg B)).
cancel_a+b-b : {A:tm num} {B:tm num} pf (== num (- (+ A B) B) A) = [A:tm num] [B:tm num] symm num A (+ (+ A B) (neg B)) (trans3 num A (+ A zero) (+ A (- B B)) (+ (+ A B) (neg B)) (symm num (+ A zero) A (plus_zero A)) (plus_cong2 zero (- B B) A (symm num (- B B) zero (plus_inv B))) (assoc_plus A B (neg B))).
cancel_a-b+b : {A:tm num} {B:tm num} pf (== num (+ (- A B) B) A) = [A:tm num] [B:tm num] symm num A (+ (+ A (neg B)) B) (trans4 num A (- (+ A B) B) (+ A (+ B (neg B))) (+ A (+ (neg B) B)) (+ (+ A (neg B)) B) (symm num (- (+ A B) B) A (cancel_a+b-b A B)) (plus_assoc A B (neg B)) (plus_cong2 (+ B (neg B)) (+ (neg B) B) A (comm_plus B (neg B))) (assoc_plus A (neg B) B)).
cancel_a+b-a : {A:tm num} {B:tm num} pf (== num (- (+ A B) A) B) = [A:tm num] [B:tm num] symm num B (+ (+ A B) (neg A)) (trans3 num B (+ (- B A) A) (+ A (- B A)) (+ (+ A B) (neg A)) (symm num (+ (- B A) A) B (cancel_a-b+b B A)) (comm_plus (- B A) A) (assoc_plus A B (neg A))).
cancel_a+b-a' : {A:tm num} {B:tm num} pf (== num (+ A (- B A)) B) = [A:tm num] [B:tm num] trans num (+ A (+ B (neg A))) (+ (+ A B) (neg A)) B (assoc_plus A B (neg A)) (cancel_a+b-a A B).
cancel_a-a+b : {A:tm num} {B:tm num} pf (== num (+ (- A A) B) B) = [A:tm num] [B:tm num] trans3 num (+ (+ A (neg A)) B) (+ B (+ A (neg A))) (+ (+ B A) (neg A)) B (comm_plus (+ A (neg A)) B) (assoc_plus B A (neg A)) (cancel_a+b-b B A).
cancel_a-a+b' : {A:tm num} {B:tm num} pf (== num (+ A (+ (neg A) B)) B) = [A:tm num] [B:tm num] trans num (+ A (+ (neg A) B)) (+ (+ A (neg A)) B) B (assoc_plus A (neg A) B) (cancel_a-a+b A B).
cancel_-a+a+b : {A:tnum} {B:tm num} pf (== num (+ (+ (neg A) A) B) B) = [A:tnum] [B:tm num] trans2 num (+ (+ (neg A) A) B) (+ (+ A (neg A)) B) B (plus_cong1 (+ (neg A) A) (+ A (neg A)) B (comm_plus (neg A) A)) (cancel_a-a+b A B).
cancel_-a+a+b' : {A:tnum} {B:tm num} pf (== num (+ (neg A) (+ A B)) B) = [A:tnum] [B:tm num] trans num (+ (neg A) (+ A B)) (+ (+ (neg A) A) B) B (assoc_plus (neg A) A B) (cancel_-a+a+b A B).
times_zero : {A:tm num} pf (== num (* A zero) zero) = [A:tm num] cut (== num (+ (* zero A) (* zero A)) (* zero A)) (== num (* A zero) zero) (trans2 num (+ (* zero A) (* zero A)) (* (+ zero zero) A) (* zero A) (symm num (* (+ zero zero) A) (+ (* zero A) (* zero A)) (distrib_right zero zero A)) (times_cong1 (+ zero zero) zero A (plus_zero zero))) ([p1:pf (== num (+ (* zero A) (* zero A)) (* zero A))] cut (== num (+ (+ (* zero A) (* zero A)) (neg (* zero A))) (+ (* zero A) (neg (* zero A)))) (== num (* A zero) zero) (plus_cong1 (+ (* zero A) (* zero A)) (* zero A) (neg (* zero A)) p1) ([p2:pf (== num (- (+ (* zero A) (* zero A)) (* zero A)) (- (* zero A) (* zero A)))] trans4 num (* A zero) (* zero A) (- (+ (* zero A) (* zero A)) (* zero A)) (- (* zero A) (* zero A)) zero (comm_times A zero) (symm num (- (+ (* zero A) (* zero A)) (* zero A)) (* zero A) (cancel_a+b-b (* zero A) (* zero A))) p2 (plus_inv (* zero A)))).
zero_times : {A:tm num} pf (== num (* zero A) zero) = [A:tm num] trans num (* zero A) (* A zero) zero (comm_times zero A) (times_zero A).
neg_times1 : {A:tnum} {B:tm num} pf (== num (* (neg A) B) (neg (* A B))) = [A:tnum] [B:tm num] cut (== num zero (+ (* A B) (* (neg A) B))) (== num (* (neg A) B) (neg (* A B))) (trans3 num zero (* zero B) (* (- A A) B) (+ (* A B) (* (neg A) B)) (symm num (* zero B) zero (zero_times B)) (times_cong1 zero (- A A) B (symm num (- A A) zero (plus_inv A))) (distrib_right A (neg A) B)) ([p1:pf (== num zero (+ (* A B) (* (neg A) B)))] symm num (neg (* A B)) (* (neg A) B) (trans3 num (neg (* A B)) (+ zero (neg (* A B))) (+ (+ (* A B) (* (neg A) B)) (neg (* A B))) (* (neg A) B) (symm num (+ zero (neg (* A B))) (neg (* A B)) (zero_plus (neg (* A B)))) (plus_cong1 zero (+ (* A B) (* (neg A) B)) (neg (* A B)) p1) (cancel_a+b-a (* A B) (* (neg A) B)))).
neg_times2 : {A:tm num} {B:tnum} pf (== num (* A (neg B)) (neg (* A B))) = [A:tm num] [B:tnum] trans3 num (* A (neg B)) (* (neg B) A) (neg (* B A)) (neg (* A B)) (comm_times A (neg B)) (neg_times1 B A) (neg_cong (* B A) (* A B) (comm_times B A)).
neg_times : {A:tnum} {B:tnum} pf (== num (* (neg A) (neg B)) (* A B)) = [A:tnum] [B:tnum] trans3 num (* (neg A) (neg B)) (neg (* (neg A) B)) (neg (neg (* A B))) (* A B) (neg_times2 (neg A) B) (neg_cong (* (neg A) B) (neg (* A B)) (neg_times1 A B)) (neg_neg_e (* A B)).
distrib_minus : {A:tm num} {B:tm num} {C:tm num} pf (== num (* A (- B C)) (- (* A B) (* A C))) = [A:tm num] [B:tm num] [C:tm num] trans num (* A (+ B (neg C))) (+ (* A B) (* A (neg C))) (+ (* A B) (neg (* A C))) (distrib A B (neg C)) (plus_cong2 (* A (neg C)) (neg (* A C)) (* A B) (neg_times2 A C)).
distrib_minus_right : {A:tm num} {B:tm num} {C:tm num} pf (== num (* (- A B) C) (- (* A C) (* B C))) = [A:tm num] [B:tm num] [C:tm num] trans num (* (+ A (neg B)) C) (+ (* A C) (* (neg B) C)) (+ (* A C) (neg (* B C))) (distrib_right A (neg B) C) (plus_cong2 (* (neg B) C) (neg (* B C)) (* A C) (neg_times1 B C)).
neg_plus : {A:tnum} {B:tnum} pf (== num (+ (neg A) (neg B)) (neg (+ A B))) = [A:tnum] [B:tnum] cut (== num (+ zero (+ (neg A) (neg B))) (+ (- (+ A B) (+ A B)) (+ (neg A) (neg B)))) (== num (+ (neg A) (neg B)) (neg (+ A B))) (plus_cong1 zero (- (+ A B) (+ A B)) (+ (neg A) (neg B)) (symm num (- (+ A B) (+ A B)) zero (plus_inv (+ A B)))) ([p1:pf (== num (+ zero (+ (neg A) (neg B))) (+ (- (+ A B) (+ A B)) (+ (neg A) (neg B))))] cut (== num (+ (neg A) (neg B)) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B))))) (== num (+ (neg A) (neg B)) (neg (+ A B))) (trans5 num (+ (neg A) (neg B)) (+ (+ (neg A) (neg B)) zero) (+ zero (+ (neg A) (neg B))) (+ (- (+ A B) (+ A B)) (+ (neg A) (neg B))) (+ (+ (neg (+ A B)) (+ A B)) (+ (neg A) (neg B))) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B)))) (symm num (+ (+ (neg A) (neg B)) zero) (+ (neg A) (neg B)) (plus_zero (+ (neg A) (neg B)))) (comm_plus (+ (neg A) (neg B)) zero) p1 (plus_cong1 (+ (+ A B) (neg (+ A B))) (+ (neg (+ A B)) (+ A B)) (+ (neg A) (neg B)) (comm_plus (+ A B) (neg (+ A B)))) (plus_assoc (neg (+ A B)) (+ A B) (+ (neg A) (neg B)))) ([p2:pf (== num (+ (neg A) (neg B)) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B)))))] cut (== num (+ (+ A B) (+ (neg A) (neg B))) zero) (== num (+ (neg A) (neg B)) (neg (+ A B))) (trans3 num (+ (+ A B) (+ (neg A) (neg B))) (+ (+ (+ A B) (neg A)) (neg B)) (+ B (neg B)) zero (assoc_plus (+ A B) (neg A) (neg B)) (plus_cong1 (- (+ A B) A) B (neg B) (cancel_a+b-a A B)) (plus_inv B)) ([p3:pf (== num (+ (+ A B) (+ (neg A) (neg B))) zero)] trans3 num (+ (neg A) (neg B)) (+ (neg (+ A B)) (+ (+ A B) (+ (neg A) (neg B)))) (+ (neg (+ A B)) zero) (neg (+ A B)) p2 (plus_cong2 (+ (+ A B) (+ (neg A) (neg B))) zero (neg (+ A B)) p3) (plus_zero (neg (+ A B)))))).
times_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (!= num A zero) -> pf (== num (* A B) (* A C)) -> pf (== num B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (!= num A zero)] [p2:pf (== num (* A B) (* A C))] cut (== num (* A (- B C)) zero) (== num B C) (trans3 num (* A (- B C)) (- (* A B) (* A C)) (+ (* A C) (neg (* A C))) zero (distrib_minus A B C) (plus_cong1 (* A B) (* A C) (neg (* A C)) p2) (plus_inv (* A C))) ([p3:pf (== num (* A (- B C)) zero)] or_e (eqn A zero) (eqn (- B C) zero) (== num B C) (_cancelation A (- B C) p3) ([pA:pf (== num A zero)] false_e (== num B C) (not_e (eq num A zero) p1 pA)) ([pB:pf (== num (- B C) zero)] trans3 num B (+ (- B C) C) (+ zero C) C (symm num (+ (- B C) C) B (cancel_a-b+b B C)) (plus_cong1 (- B C) zero C pB) (zero_plus C))).
neqlem : {X:tform} {X1:tp} {A:tm X1} {B:tm X1} (pf X -> pf (== X1 A B)) -> pf (!= X1 A B) -> pf (not X) = [X:tform] [X1:tp] [A:tm X1] [B:tm X1] [l8:pf X -> pf (== X1 A B)] [p1:pf (!= X1 A B)] not_ei (eq X1 A B) X p1 ([x3:pf X] l8 x3).
neq_symm : {X1:tp} {X2:tm X1} {X3:tm X1} pf (!= X1 X2 X3) -> pf (not (== X1 X3 X2)) = [X1:tp] [X2:tm X1] [X3:tm X1] [x3:pf (!= X1 X2 X3)] neqlem (== X1 X3 X2) X1 X2 X3 ([x4:pf (== X1 X3 X2)] symm X1 X3 X2 x4) x3.
gtlem : {X:tform} {A:tm num} {B:tm num} (pf X -> pf (>= A B)) -> pf (< A B) -> pf (not X) = [X:tform] [A:tm num] [B:tm num] [l8:pf X -> pf (>= A B)] [p1:pf (< A B)] not_ei (geq A B) X p1 ([x3:pf X] l8 x3).
yes : {X1:tm form} pf X1 -> pf X1 = [X1:tm form] [p1:pf X1] cut X1 X1 p1 ([x3:pf X1] p1).
gt->geq->false : {A:tm num} {B:tm num} {X:tform} pf (> A B) -> pf (>= B A) -> pf X = [A:tm num] [B:tm num] [X:tform] [p1:pf (> A B)] [p2:pf (>= B A)] false_e X (not_e (geq B A) p1 p2).
geq->gt->false : {A:tm num} {B:tm num} {X:tform} pf (>= A B) -> pf (> B A) -> pf X = [A:tm num] [B:tm num] [X:tform] [p1:pf (>= A B)] [p2:pf (> B A)] gt->geq->false B A X p2 p1.
gt->eq->false : {A:tm num} {B:tm num} {X:tform} pf (> A B) -> pf (== num A B) -> pf X = [A:tm num] [B:tm num] [X:tform] [p1:pf (> A B)] [p2:pf (== num A B)] gt->geq->false A B X p1 (congr num A B ([i1:tm num] >= B i1) p2 (_ord_reflexivity B)).
eq->neq->false : {X1:tp} {A:tm X1} {B:tm X1} {X:tform} pf (== X1 A B) -> pf (!= X1 A B) -> pf X = [X1:tp] [A:tm X1] [B:tm X1] [X:tform] [p1:pf (== X1 A B)] [p2:pf (!= X1 A B)] false_e X (not_e (eq X1 A B) p2 p1).
geq->or_gt_eq : {A:tm num} {B:tm num} pf (>= A B) -> pf (> A B or == num A B) = [A:tm num] [B:tm num] [p1:pf (>= A B)] or_e (geq B A) (not (geq B A)) (not (geq B A) or eqn A B) (_ord_excluded_middle B A) ([pA:pf (geq B A)] or_i2 (eqn A B) (not (geq B A)) (_ord_antisymmetry A B p1 pA)) ([pB:pf (not (geq B A))] or_i1 (not (geq B A)) (eqn A B) pB).
geq->or_eq_gt : {A:tm num} {B:tm num} pf (>= A B) -> pf (== num A B or > A B) = [A:tm num] [B:tm num] [p1:pf (>= A B)] or_symm (> A B) (== num A B) (geq->or_gt_eq A B p1).
leq->or_lt_eq : {A:tm num} {B:tm num} pf (<= A B) -> pf (< A B or == num A B) = [A:tm num] [B:tm num] [p1:pf (<= A B)] or_e (> B A) (== num B A) (> B A or == num A B) (geq->or_gt_eq B A p1) ([pA:pf (> B A)] or_i1 (> B A) (== num A B) pA) ([pB:pf (== num B A)] or_i2 (== num A B) (> B A) (symm num B A pB)).
leq->or_eq_lt : {X1:tm num} {X2:tm num} pf (<= X1 X2) -> pf (== num X1 X2 or < X1 X2) = [X1:tm num] [X2:tm num] [p1:pf (<= X1 X2)] or_symm (< X1 X2) (== num X1 X2) (leq->or_lt_eq X1 X2 p1).
neq->or_gt_lt : {A:tm num} {B:tm num} pf (!= num A B) -> pf (> A B or < A B) = [A:tm num] [B:tm num] [p1:pf (!= num A B)] or_e (geq A B) (not (geq A B)) (> A B or not (geq A B)) (_ord_excluded_middle A B) ([pA:pf (geq A B)] or_e (> A B) (== num A B) (> A B or not (geq A B)) (geq->or_gt_eq A B pA) ([pa:pf (> A B)] or_i1 (> A B) (not (geq A B)) pa) ([pb:pf (== num A B)] false_e (> A B or not (geq A B)) (not_e (eq num A B) p1 pb))) ([pB:pf (not (geq A B))] or_i2 (not (geq A B)) (> A B) pB).
or_geq_gt : {A:tm num} {B:tm num} pf (>= A B or > B A) = [A:tm num] [B:tm num] _ord_excluded_middle A B.
or_geq_lt : {A:tm num} {B:tm num} pf (>= A B or < A B) = [A:tm num] [B:tm num] or_geq_gt A B.
or_leq_gt : {A:tm num} {B:tm num} pf (<= A B or > A B) = [A:tm num] [B:tm num] or_geq_gt B A.
or_gt_geq : {A:tm num} {B:tm num} pf (> A B or >= B A) = [A:tm num] [B:tm num] or_symm (>= B A) (> A B) (or_geq_gt B A).
or_gt_leq : {A:tm num} {B:tm num} pf (> A B or <= A B) = [A:tm num] [B:tm num] or_gt_geq A B.
or_gt_eq_lt : {A:tm num} {B:tm num} pf (> A B or == num A B or < A B) = [A:tm num] [B:tm num] or_e (> A B) (>= B A) (> A B or == num A B or > B A) (or_gt_geq A B) ([pA:pf (> A B)] or3_i1 (> A B) (== num A B) (> B A) pA) ([pB:pf (>= B A)] or_e (> B A) (== num B A) (> A B or == num A B or > B A) (geq->or_gt_eq B A pB) ([pa:pf (> B A)] or3_i3 (> B A) (> A B) (== num A B) pa) ([pb:pf (== num B A)] or3_i2 (== num A B) (> A B) (> B A) (symm num B A pb))).
eq->geq : {A:tm num} {B:tm num} pf (== num A B) -> pf (>= A B) = [A:tm num] [B:tm num] [p1:pf (== num A B)] congr num A B ([i1:tm num] >= i1 B) p1 (_ord_reflexivity B).
eq->leq : {A:tm num} {B:tm num} pf (== num A B) -> pf (<= A B) = [A:tm num] [B:tm num] [p1:pf (== num A B)] eq->geq B A (symm num A B p1).
eq->not_gt : {A:tm num} {B:tm num} pf (== num A B) -> pf (not (> A B)) = [A:tm num] [B:tm num] [p1:pf (== num A B)] not_not_i (<= A B) (eq->leq A B p1).
gt->geq : {A:tm num} {B:tm num} pf (> A B) -> pf (>= A B) = [A:tm num] [B:tm num] [p1:pf (> A B)] or_e (geq A B) (geq B A) (geq A B) (_ord_dichotomy A B) ([pA:pf (geq A B)] pA) ([pB:pf (geq B A)] gt->geq->false A B (geq A B) p1 pB).
lt->leq : {A:tm num} {B:tm num} pf (< A B) -> pf (<= A B) = [A:tm num] [B:tm num] [x3:pf (< A B)] gt->geq B A x3.
gt->neq : {A:tm num} {B:tm num} pf (> A B) -> pf (!= num A B) = [A:tm num] [B:tm num] [p1:pf (>= B A imp false)] imp_i (eq num A B) false ([p2:pf (eq num A B)] imp_e (>= B A) false p1 (eq->geq B A (symm num A B p2))).
lt->neq : {A:tm num} {B:tm num} pf (< A B) -> pf (!= num A B) = [A:tm num] [B:tm num] [p1:pf (< A B)] neqlem (== num A B) num B A ([x3:pf (== num A B)] symm num A B x3) (gt->neq B A p1).
neq->geq->gt : {A:tm num} {B:tm num} pf (!= num A B) -> pf (>= A B) -> pf (> A B) = [A:tm num] [B:tm num] [p1:pf (!= num A B)] [p2:pf (>= A B)] or_e (> A B) (== num A B) (> A B) (geq->or_gt_eq A B p2) ([pA:pf (> A B)] pA) ([pB:pf (== num A B)] eq->neq->false num A B (> A B) pB p1).
neq->leq->lt : {A:tm num} {B:tm num} pf (!= num A B) -> pf (<= A B) -> pf (< A B) = [A:tm num] [B:tm num] [p1:pf (!= num A B)] [p2:pf (<= A B)] neq->geq->gt B A (neqlem (== num B A) num A B ([x3:pf (== num B A)] symm num B A x3) p1) p2.
geq->leq->eq : {A:tm num} {B:tm num} pf (>= A B) -> pf (<= A B) -> pf (== num A B) = [A:tm num] [B:tm num] [x3:pf (>= A B)] [x4:pf (<= A B)] _ord_antisymmetry A B x3 x4.
gt->not_leq : {A:tm num} {B:tm num} pf (> A B) -> pf (not (<= A B)) = [A:tm num] [B:tm num] [x3:pf (> A B)] yes (> A B) x3.
not_geq->lt : {A:tm num} {B:tm num} pf (not (>= A B)) -> pf (< A B) = [A:tm num] [B:tm num] [x3:pf (not (>= A B))] yes (not (>= A B)) x3.
geq->not_lt : {A:tm num} {B:tm num} pf (>= A B) -> pf (not (< A B)) = [A:tm num] [B:tm num] [x3:pf (>= A B)] not_not_i (>= A B) x3.
trans_geq : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (>= B C) -> pf (>= A C) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= A B)] [x4:pf (>= B C)] _ord_transitivity A B C x3 x4.
trans_leq : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (<= B C) -> pf (<= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (<= A B)] [p2:pf (<= B C)] trans_geq C B A p2 p1.
trans_gt : {A:tm num} {B:tm num} {C:tm num} pf (> A B) -> pf (> B C) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= B A imp false)] [p2:pf (> B C)] imp_i (>= C A) false ([p3:pf (>= C A)] imp_e (>= B A) false p1 (trans_geq B C A (gt->geq B C p2) p3)).
trans_lt : {A:tm num} {B:tm num} {C:tm num} pf (< A B) -> pf (< B C) -> pf (< A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (< A B)] [p2:pf (< B C)] trans_gt C B A p2 p1.
trans_gt_geq : {A:tm num} {B:tm num} {C:tm num} pf (> A B) -> pf (>= B C) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A B)] [p2:pf (>= B C)] or_e (> A C) (>= C A) (> A C) (or_gt_geq A C) ([pA:pf (> A C)] pA) ([pB:pf (>= C A)] gt->geq->false A B (> A C) p1 (trans_geq B C A p2 pB)).
trans_geq_gt : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (> B C) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] [p2:pf (> B C)] or_e (> A C) (>= C A) (> A C) (or_gt_geq A C) ([pA:pf (> A C)] pA) ([pB:pf (>= C A)] gt->geq->false B C (> A C) p2 (trans_geq C A B pB p1)).
trans_lt_leq : {A:tm num} {B:tm num} {C:tm num} pf (< A B) -> pf (<= B C) -> pf (< A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (< A B)] [p2:pf (<= B C)] trans_geq_gt C B A p2 p1.
trans_leq_lt : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (< B C) -> pf (< A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (<= A B)] [p2:pf (< B C)] trans_gt_geq C B A p2 p1.
trans_eq_neq : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} pf (== X1 A B) -> pf (!= X1 B C) -> pf (!= X1 A C) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [p1:pf (== X1 A B)] [p2:pf (!= X1 B C)] congr X1 A B ([i1:tm X1] != X1 i1 C) p1 p2.
trans_neq_eq : {X1:tp} {A:tm X1} {B:tm X1} {C:tm X1} pf (!= X1 A B) -> pf (== X1 B C) -> pf (!= X1 A C) = [X1:tp] [A:tm X1] [B:tm X1] [C:tm X1] [p1:pf (!= X1 A B)] [p2:pf (== X1 B C)] congr X1 C B ([i1:tm X1] != X1 A i1) (symm X1 B C p2) p1.
trans_eq_geq : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (>= B C) -> pf (>= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] [p2:pf (>= B C)] congr num A B ([i1:tm num] >= i1 C) p1 p2.
trans_geq_eq : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (== num B C) -> pf (>= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] [p2:pf (== num B C)] congr num C B ([i1:tm num] >= A i1) (symm num B C p2) p1.
trans_eq_leq : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (<= B C) -> pf (<= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] [p2:pf (<= B C)] congr num A B ([i1:tm num] <= i1 C) p1 p2.
trans_leq_eq : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (== num B C) -> pf (<= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (<= A B)] [p2:pf (== num B C)] congr num C B ([i1:tm num] <= A i1) (symm num B C p2) p1.
trans_eq_gt : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (> B C) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] [p2:pf (> B C)] congr num A B ([i1:tm num] > i1 C) p1 p2.
trans_gt_eq : {A:tm num} {B:tm num} {C:tm num} pf (> A B) -> pf (== num B C) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A B)] [p2:pf (== num B C)] congr num C B ([i1:tm num] > A i1) (symm num B C p2) p1.
trans_eq_lt : {A:tm num} {B:tm num} {C:tm num} pf (== num A B) -> pf (< B C) -> pf (< A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A B)] [p2:pf (< B C)] congr num A B ([i1:tm num] < i1 C) p1 p2.
trans_lt_eq : {A:tm num} {B:tm num} {C:tm num} pf (< A B) -> pf (== num B C) -> pf (< A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (< A B)] [p2:pf (== num B C)] congr num C B ([i1:tm num] < A i1) (symm num B C p2) p1.
trans_eq_geq_eq : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (>= B C) -> pf (== num C D) -> pf (>= A D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (>= B C)] [p3:pf (== num C D)] trans_eq_geq A B D p1 (trans_geq_eq B C D p2 p3).
trans_eq_gt_eq : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (> B C) -> pf (== num C D) -> pf (> A D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (> B C)] [p3:pf (== num C D)] trans_eq_gt A B D p1 (trans_gt_eq B C D p2 p3).
neq_times_closure : {A:tm num} {B:tm num} pf (!= num A zero) -> pf (!= num B zero) -> pf (!= num (* A B) zero) = [A:tm num] [B:tm num] [p1:pf (!= num A zero)] [p2:pf (!= num B zero)] not_i (eq num (times A B) zero) ([p3:pf (eq num (times A B) zero)] or_e (eqn A zero) (eqn B zero) false (_cancelation A B p3) ([x3:pf (eqn A zero)] not_e (eq num A zero) p1 x3) ([x3:pf (eqn B zero)] not_e (eq num B zero) p2 x3)).
geq_times_closure : {A:tm num} {B:tm num} pf (>= A zero) -> pf (>= B zero) -> pf (>= (* A B) zero) = [A:tm num] [B:tm num] [x3:pf (>= A zero)] [x4:pf (>= B zero)] _ord_mult_closure A B x3 x4.
gt_times_closure : {A:tm num} {B:tm num} pf (> A zero) -> pf (> B zero) -> pf (> (* A B) zero) = [A:tm num] [B:tm num] [p1:pf (> A zero)] [p2:pf (> B zero)] not_i (<= (* A B) zero) ([p3:pf (<= (* A B) zero)] cut (> (* A B) zero or == num (* A B) zero) false (geq->or_gt_eq (* A B) zero (geq_times_closure A B (gt->geq A zero p1) (gt->geq B zero p2))) ([p4:pf (> (* A B) zero or == num (* A B) zero)] or_e (> (* A B) zero) (== num (* A B) zero) false p4 ([pA:pf (> (* A B) zero)] gt->geq->false (* A B) zero false pA p3) ([pB:pf (== num (* A B) zero)] or_e (eqn A zero) (eqn B zero) false (_cancelation A B pB) ([pB1:pf (== num A zero)] not_e (eq num A zero) (gt->neq A zero p1) pB1) ([pB2:pf (== num B zero)] not_e (eq num B zero) (gt->neq B zero p2) pB2)))).
geq_plus_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (>= (+ A C) (+ B C)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= A B)] _ord_add_closure A C B x3.
geq_plus_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (>= (+ C A) (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] trans_eq_geq (+ C A) (+ A C) (+ C B) (comm_plus C A) (trans_geq_eq (+ A C) (+ B C) (+ C B) (geq_plus_cong1 A B C p1) (comm_plus B C)).
geq_plus_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (>= A B) -> pf (>= C D) -> pf (>= (+ A C) (+ B D)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (>= A B)] [p2:pf (>= C D)] trans_geq (+ A C) (+ B C) (+ B D) (geq_plus_cong1 A B C p1) (geq_plus_cong2 C D B p2).
geq_plus_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (>= (+ A B) (+ A C)) -> pf (>= B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= (+ A B) (+ A C))] cut (>= (+ (+ (neg A) A) B) (+ (+ (neg A) A) C)) (>= B C) (trans_eq_geq (+ (+ (neg A) A) B) (+ (neg A) (+ A B)) (+ (+ (neg A) A) C) (plus_assoc (neg A) A B) (trans_geq_eq (+ (neg A) (+ A B)) (+ (neg A) (+ A C)) (+ (+ (neg A) A) C) (geq_plus_cong2 (+ A B) (+ A C) (neg A) p1) (assoc_plus (neg A) A C))) ([p2:pf (>= (+ (+ (neg A) A) B) (+ (+ (neg A) A) C))] trans_eq_geq B (+ (+ (neg A) A) B) C (symm num (+ (+ (neg A) A) B) B (cancel_-a+a+b A B)) (trans_geq_eq (+ (+ (neg A) A) B) (+ (+ (neg A) A) C) C p2 (cancel_-a+a+b A C))).
geq_plus_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (>= (+ A B) (+ C B)) -> pf (>= A C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= (+ A B) (+ C B))] geq_plus_elim1 B A C (trans_eq_geq (+ B A) (+ A B) (+ B C) (comm_plus B A) (trans_geq_eq (+ A B) (+ C B) (+ B C) p1 (comm_plus C B))).
geq_neg_cong : {A:tm num} {B:tm num} pf (>= A B) -> pf (<= (neg A) (neg B)) = [A:tm num] [B:tm num] [p1:pf (>= A B)] cut (>= (neg B) (+ B (+ (neg A) (neg B)))) (>= (neg B) (neg A)) (trans_eq_geq (neg B) (+ A (+ (neg A) (neg B))) (+ B (+ (neg A) (neg B))) (symm num (+ A (+ (neg A) (neg B))) (neg B) (cancel_a-a+b' A (neg B))) (geq_plus_cong1 A B (+ (neg A) (neg B)) p1)) ([p2:pf (>= (neg B) (+ B (- (neg A) B)))] trans_geq_eq (neg B) (+ B (- (neg A) B)) (neg A) p2 (cancel_a+b-a' B (neg A))).
geq_neg_elim : {A:tnum} {B:tnum} pf (>= (neg A) (neg B)) -> pf (<= A B) = [A:tnum] [B:tnum] [p1:pf (>= (neg A) (neg B))] cut (<= A (neg (neg B))) (<= A B) (trans_eq_leq A (neg (neg A)) (neg (neg B)) (symm num (neg (neg A)) A (neg_neg_e A)) (geq_neg_cong (neg A) (neg B) p1)) ([p2:pf (<= A (neg (neg B)))] trans_leq_eq A (neg (neg B)) B p2 (neg_neg_e B)).
geq_times_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (>= B C) -> pf (>= (* B A) (* C A)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (>= B C)] cut (>= (+ B (neg C)) zero) (>= (* B A) (* C A)) (trans_geq_eq (+ B (neg C)) (+ C (neg C)) zero (geq_plus_cong1 B C (neg C) p2) (plus_inv C)) ([p3:pf (>= (- B C) zero)] cut (>= (- (* B A) (* C A)) zero) (>= (* B A) (* C A)) (trans_eq_geq (- (* B A) (* C A)) (* (- B C) A) zero (symm num (* (- B C) A) (- (* B A) (* C A)) (distrib_minus_right B C A)) (_ord_mult_closure (- B C) A p3 p1)) ([p4:pf (>= (- (* B A) (* C A)) zero)] cut (>= (* B A) (* C A)) (>= (* B A) (* C A)) (trans_eq_geq (* B A) (+ (- (* B A) (* C A)) (* C A)) (* C A) (symm num (+ (- (* B A) (* C A)) (* C A)) (* B A) (cancel_a-b+b (* B A) (* C A))) (trans_geq_eq (+ (- (* B A) (* C A)) (* C A)) (+ zero (* C A)) (* C A) (geq_plus_cong1 (- (* B A) (* C A)) zero (* C A) p4) (zero_plus (* C A)))) ([p5:pf (>= (* B A) (* C A))] p5))).
geq_times_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (>= B C) -> pf (>= (* A B) (* A C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (>= B C)] trans_eq_geq (* A B) (* B A) (* A C) (comm_times A B) (trans_geq_eq (* B A) (* C A) (* A C) (geq_times_cong1 A B C p1 p2) (comm_times C A)).
geq_times_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (> A zero) -> pf (>= (* A B) (* A C)) -> pf (>= B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A zero)] [p2:pf (>= (* A B) (* A C))] cut (>= (* A (- B C)) zero) (>= B C) (trans_eq_geq (* A (- B C)) (- (* A B) (* A C)) zero (distrib_minus A B C) (trans_geq_eq (+ (* A B) (neg (* A C))) (+ (* A C) (neg (* A C))) zero (geq_plus_cong1 (* A B) (* A C) (neg (* A C)) p2) (plus_inv (* A C)))) ([p3:pf (>= (* A (- B C)) zero)] or_e (>= B C) (> C B) (>= B C) (or_geq_gt B C) ([pA:pf (>= B C)] pA) ([pB:pf (> C B)] cut (> (+ C (neg B)) zero) (>= B C) (trans_gt_eq (+ C (neg B)) (+ B (neg B)) zero (gtlem (>= (+ B (neg B)) (+ C (neg B))) B C ([x3:pf (>= (+ B (neg B)) (+ C (neg B)))] geq_plus_elim2 B (neg B) C x3) pB) (plus_inv B)) ([p4:pf (> (- C B) zero)] cut (> (- (* A C) (* A B)) zero) (>= B C) (trans_eq_gt (- (* A C) (* A B)) (* A (- C B)) zero (symm num (* A (- C B)) (- (* A C) (* A B)) (distrib_minus A C B)) (gt_times_closure A (- C B) p1 p4)) ([p5:pf (> (- (* A C) (* A B)) zero)] cut (> (* A C) (* A B)) (>= B C) (trans_eq_gt (* A C) (+ (- (* A C) (* A B)) (* A B)) (* A B) (symm num (+ (- (* A C) (* A B)) (* A B)) (* A C) (cancel_a-b+b (* A C) (* A B))) (trans_gt_eq (+ (- (* A C) (* A B)) (* A B)) (+ zero (* A B)) (* A B) (gtlem (>= (+ zero (* A B)) (+ (- (* A C) (* A B)) (* A B))) zero (- (* A C) (* A B)) ([x3:pf (>= (+ zero (* A B)) (+ (- (* A C) (* A B)) (* A B)))] geq_plus_elim2 zero (* A B) (- (* A C) (* A B)) x3) p5) (zero_plus (* A B)))) ([p6:pf (< (* A B) (* A C))] gt->geq->false (* A C) (* A B) (>= B C) p6 p2))))).
geq_times_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (> A zero) -> pf (>= (* B A) (* C A)) -> pf (>= B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A zero)] [p2:pf (>= (* B A) (* C A))] geq_times_elim1 A B C p1 (trans_eq_geq (* A B) (* B A) (* A C) (comm_times A B) (trans_geq_eq (* B A) (* C A) (* A C) p2 (comm_times C A))).
leq_plus_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (<= (+ A C) (+ B C)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (<= A B)] geq_plus_cong1 B A C x3.
leq_plus_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (<= (+ C A) (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (<= A B)] geq_plus_cong2 B A C x3.
leq_plus_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (<= (+ A B) (+ C B)) -> pf (<= A C) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (<= (+ A B) (+ C B))] geq_plus_elim2 C B A x3.
leq_times_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (<= B C) -> pf (<= (* A B) (* A C)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= A zero)] [x4:pf (<= B C)] geq_times_cong2 A C B x3 x4.
leq_neg_cong : {A:tm num} {B:tm num} pf (<= A B) -> pf (>= (neg A) (neg B)) = [A:tm num] [B:tm num] [x3:pf (<= A B)] geq_neg_cong B A x3.
gt_plus_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (> A B) -> pf (> (+ A C) (+ B C)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> A B)] gtlem (>= (+ B C) (+ A C)) B A ([x4:pf (>= (+ B C) (+ A C))] geq_plus_elim2 B C A x4) x3.
gt_plus_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (> A B) -> pf (> (+ C A) (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> A B)] gtlem (>= (+ C B) (+ C A)) B A ([x4:pf (>= (+ C B) (+ C A))] geq_plus_elim1 C B A x4) x3.
gt_plus_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (>= A B) -> pf (> C D) -> pf (> (+ A C) (+ B D)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (>= A B)] [p2:pf (> C D)] trans_geq_gt (+ A C) (+ B C) (+ B D) (geq_plus_cong1 A B C p1) (gt_plus_cong2 C D B p2).
gt_plus_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (> (+ A B) (+ A C)) -> pf (> B C) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> (+ A B) (+ A C))] gtlem (>= C B) (+ A C) (+ A B) ([x4:pf (>= C B)] geq_plus_cong2 C B A x4) x3.
gt_plus_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (> (+ A B) (+ C B)) -> pf (> A C) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> (+ A B) (+ C B))] gtlem (>= C A) (+ C B) (+ A B) ([x4:pf (>= C A)] geq_plus_cong1 C A B x4) x3.
gt_times_cong2 : {A:tm num} {B:tm num} {C:tm num} pf (> A zero) -> pf (> B C) -> pf (> (* A B) (* A C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A zero)] [x3:pf (< C B)] gtlem (>= (* A C) (* A B)) C B ([x4:pf (>= (* A C) (* A B))] geq_times_elim1 A C B p1 x4) x3.
gt_times_elim1 : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (> (* A B) (* A C)) -> pf (> B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [x3:pf (< (* A C) (* A B))] gtlem (>= C B) (* A C) (* A B) ([x4:pf (>= C B)] geq_times_cong2 A C B p1 x4) x3.
gt_times_elim2 : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (> (* B A) (* C A)) -> pf (> B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [x3:pf (< (* C A) (* B A))] gtlem (>= C B) (* C A) (* B A) ([x4:pf (>= C B)] geq_times_cong1 A C B p1 x4) x3.
gt_neg_cong : {A:tm num} {B:tm num} pf (> A B) -> pf (< (neg A) (neg B)) = [A:tm num] [B:tm num] [x3:pf (> A B)] gtlem (>= (neg A) (neg B)) B A ([x4:pf (>= (neg A) (neg B))] geq_neg_elim A B x4) x3.
lt_plus_cong1 : {X1:tm num} {X2:tm num} {X3:tm num} pf (> X1 X2) -> pf (> (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> X1 X2)] gt_plus_cong1 X1 X2 X3 x3.
lt_plus_cong2 : {X1:tm num} {X2:tm num} {X3:tm num} pf (> X1 X2) -> pf (> (+ X3 X1) (+ X3 X2)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> X1 X2)] gt_plus_cong2 X1 X2 X3 x3.
lt_plus_elim1 : {X1:tm num} {X2:tm num} {X3:tm num} pf (> (+ X1 X2) (+ X1 X3)) -> pf (> X2 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> (+ X1 X2) (+ X1 X3))] gt_plus_elim1 X1 X2 X3 x3.
lt_times_cong2 : {X1:tm num} {X2:tm num} {X3:tm num} pf (> X1 zero) -> pf (> X2 X3) -> pf (> (* X1 X2) (* X1 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> X1 zero)] [x4:pf (> X2 X3)] gt_times_cong2 X1 X2 X3 x3 x4.
lt_neg_cong : {X1:tm num} {X2:tm num} pf (> X1 X2) -> pf (< (neg X1) (neg X2)) = [X1:tm num] [X2:tm num] [x3:pf (> X1 X2)] gt_neg_cong X1 X2 x3.
neq_plus_cong1 : {A:tm num} {B:tm num} {C:tm num} pf (!= num A B) -> pf (!= num (+ A C) (+ B C)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (!= num A B)] neqlem (== num (+ A C) (+ B C)) num A B ([x4:pf (== num (+ A C) (+ B C))] plus_elim2 A C B x4) x3.
eval_gt : {B:word32} {A:word32} rep_div B A 0 -> pf (gt (const A) (const B)) = [B:word32] [A:word32] [p1:rep_div B A 0] cut (geq (const B) (times (const A) (const 0)) and not (geq (const B) (times (const A) (plus one (const 0))))) (> (const A) (const B)) (_eval_div B A 0 p1) ([p3:pf (>= (const B) (* (const A) (const 0)) and < (const B) (* (const A) (+ one zero)))] trans_eq_gt (const A) (* (const A) (+ one zero)) (const B) (trans num (const A) (* (const A) one) (* (const A) (+ one zero)) (symm num (* (const A) one) (const A) (times_one (const A))) (times_cong2 one (+ one zero) (const A) (symm num (+ one zero) one (plus_zero one)))) (and_e2 (>= (const B) (* (const A) (const 0))) (< (const B) (* (const A) (+ one zero))) p3)).
1>0 : rep_div 0 1 0 = 0/1.
one>zero : pf (> one zero) = eval_gt 0 1 1>0.
or_eq_neq : {A:tm num} {B:tm num} pf (== num A B or != num A B) = [A:tm num] [B:tm num] or_e (> B A) (>= A B) (== num A B or != num A B) (or_gt_geq B A) ([pA:pf (> B A)] or_i2 (!= num A B) (== num A B) (lt->neq A B pA)) ([pB:pf (>= A B)] or_e (== num A B) (> A B) (== num A B or != num A B) (geq->or_eq_gt A B pB) ([pa:pf (== num A B)] or_i1 (== num A B) (!= num A B) pa) ([pb:pf (> A B)] or_i2 (!= num A B) (== num A B) (gt->neq A B pb))).
nomatch : tnum = zero.
match : tnum = one.
listify : tnum -> tnum -> tnum -> type = [a:tnum] [pos:tnum] [neg1:tnum] pf (== num a (- pos neg1)).
plusify : tm num -> tm num -> tm num -> type = [a:tm num] [x3:tm num] [y:tm num] pf (== num a (- x3 y)).
timesify : tnum -> tnum -> tnum -> tnum -> type = [b:tnum] [x3:tnum] [y:tnum] [sign2:tnum] pf (== num (* b sign2) (* x3 y)).
catchtimes : tnum -> tnum -> tnum -> tnum -> tnum -> tm num -> tm num -> type = [a:tnum] [b:tnum] [x3:tnum] [y:tnum] [sign2:tnum] [pos:tm num] [neg1:tm num] pf (== num (* b sign2) (* x3 y) imp == num (+ a b) (- pos neg1)).
trim : tnum -> tnum -> tnum -> tnum -> type = [a:tnum] [b:tnum] [c1:tnum] [d:tnum] pf (== num (- a b) (- c1 d)).
findarr_mult : tnum -> tnum -> tnum -> tnum -> type = [a:tnum] [b:tnum] [c1:tnum] [m:tnum] pf (== num a (* b c1) and == num m m).
rearrange : tnum -> tnum -> tnum -> tnum -> type = [a:tnum] [b:tnum] [c1:tnum] [d:tnum] pf (== num (- a b) (- c1 d)).
algebra_solver : tm form -> type = [a:tm form] pf a.
listify_imp : {A:tm num} {Pos:tm num} {Neg:tm num} plusify (+ zero A) Pos Neg -> listify A Pos Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [p1:pf (== num (+ zero A) (- Pos Neg))] trans3 num A (+ A zero) (+ zero A) (- Pos Neg) (symm num (+ A zero) A (plus_zero A)) (comm_plus A zero) p1.
timesify_neg : {B:tm num} {C:tm num} {X:tnum} {Y:tnum} {Sign:tnum} timesify (* B C) X Y Sign -> timesify (* B (neg C)) X Y (neg Sign) = [B:tm num] [C:tm num] [X:tnum] [Y:tnum] [Sign:tnum] [p1:pf (== num (* (* B C) Sign) (* X Y))] trans4 num (* (* B (neg C)) (neg Sign)) (* B (* (neg C) (neg Sign))) (* B (* C Sign)) (* (* B C) Sign) (* X Y) (times_assoc B (neg C) (neg Sign)) (times_cong2 (* (neg C) (neg Sign)) (* C Sign) B (neg_times C Sign)) (symm num (* (* B C) Sign) (* B (* C Sign)) (times_assoc B C Sign)) p1.
timesify_swap : {B:tm num} {C:tm num} {D:tm num} {X:tnum} {Y:tnum} {Sign:tnum} timesify (* (* B C) D) X Y Sign -> timesify (* B (* C D)) X Y Sign = [B:tm num] [C:tm num] [D:tm num] [X:tnum] [Y:tnum] [Sign:tnum] [p1:timesify (* (* B C) D) X Y Sign] trans num (* (* B (* C D)) Sign) (* (* (* B C) D) Sign) (* X Y) (times_cong1 (* B (* C D)) (* (* B C) D) Sign (symm num (* (* B C) D) (* B (* C D)) (times_assoc B C D))) p1.
timesify_zero : {B:tm num} timesify (* B zero) one zero one = [B:tm num] trans3 num (* (* B zero) one) (* B zero) zero (* one zero) (times_one (* B zero)) (times_zero B) (symm num (* one zero) zero (times_zero one)).
timesify_remove : {B:tnum} {X:tnum} {Y:tnum} {Sign:tnum} timesify B X Y Sign -> timesify (* B one) X Y Sign = [B:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [p1:pf (== num (* B Sign) (* X Y))] cut (== num (* (* B one) Sign) (* (* B Sign) one)) (== num (* (* B one) Sign) (* X Y)) (trans3 num (* (* B one) Sign) (* B (* one Sign)) (* B (* Sign one)) (* (* B Sign) one) (times_assoc B one Sign) (times_cong2 (* one Sign) (* Sign one) B (comm_times one Sign)) (assoc_times B Sign one)) ([p2:pf (== num (* (* B one) Sign) (* (* B Sign) one))] trans3 num (* (* B one) Sign) (* (* B Sign) one) (* B Sign) (* X Y) p2 (times_one (* B Sign)) p1).
timesify_end_plus : {B:tm num} {P:tm num} {Q:tm num} timesify (* B (+ P Q)) B (+ P Q) one = [B:tm num] [P:tm num] [Q:tm num] times_one (* B (+ P Q)).
timesify_step : {B:tnum} {X:tnum} {Y:tnum} {Sign:tnum} {C:tm num} timesify B X Y Sign -> timesify (* B C) (* X C) Y Sign = [B:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [C:tm num] [p1:pf (== num (* B Sign) (* X Y))] trans3 num (* (* B C) Sign) (* (* B Sign) C) (* (* X Y) C) (* (* X C) Y) (trans3 num (* (* B C) Sign) (* B (* C Sign)) (* B (* Sign C)) (* (* B Sign) C) (times_assoc B C Sign) (times_cong2 (* C Sign) (* Sign C) B (comm_times C Sign)) (assoc_times B Sign C)) (times_cong1 (* B Sign) (* X Y) C p1) (trans3 num (* (* X Y) C) (* X (* Y C)) (* X (* C Y)) (* (* X C) Y) (times_assoc X Y C) (times_cong2 (* Y C) (* C Y) X (comm_times Y C)) (assoc_times X C Y)).
timesify_end_one : timesify one one one one = refl num (* one one).
catch_neg2 : {A:tnum} {B:tnum} {X:tnum} {Y:tnum} {Sign:tnum} {Pos:tm num} {Neg:tm num} catchtimes A B (neg X) Y Sign Pos Neg -> catchtimes A B X Y (neg Sign) Pos Neg = [A:tnum] [B:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [Pos:tm num] [Neg:tm num] [p1:pf (== num (* B Sign) (* (neg X) Y) imp == num (+ A B) (- Pos Neg))] imp_i (== num (* B (neg Sign)) (* X Y)) (== num (+ A B) (- Pos Neg)) ([p2:pf (== num (* B (neg Sign)) (* X Y))] cut (== num (* B Sign) (* (neg X) Y)) (== num (+ A B) (- Pos Neg)) (trans3 num (* B Sign) (neg (neg (* B Sign))) (neg (* X Y)) (* (neg X) Y) (symm num (neg (neg (* B Sign))) (* B Sign) (neg_neg_e (* B Sign))) (neg_cong (neg (* B Sign)) (* X Y) (trans num (neg (* B Sign)) (* B (neg Sign)) (* X Y) (symm num (* B (neg Sign)) (neg (* B Sign)) (neg_times2 B Sign)) p2)) (symm num (* (neg X) Y) (neg (* X Y)) (neg_times1 X Y))) ([p3:pf (== num (* B Sign) (* (neg X) Y))] imp_e (== num (* B Sign) (* (neg X) Y)) (== num (+ A B) (- Pos Neg)) p1 p3)).
catch_zero : {A:tm num} {Pos:tm num} {Neg:tm num} {B:tnum} {X:tnum} plusify A Pos Neg -> catchtimes A B X zero one Pos Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [B:tnum] [X:tnum] [p1:pf (== num A (- Pos Neg))] imp_i (== num (* B one) (* X zero)) (== num (+ A B) (- Pos Neg)) ([p2:pf (== num (* B one) (* X zero))] cut (== num B zero) (== num (+ A B) (- Pos Neg)) (trans3 num B (* B one) (* X zero) zero (symm num (* B one) B (times_one B)) p2 (times_zero X)) ([p3:pf (== num B zero)] trans3 num (+ A B) (+ A zero) A (- Pos Neg) (plus_cong2 B zero A p3) (plus_zero A) p1)).
catch_neg_one : {A:tm num} {Pos:tm num} {Neg:tm num} {B:tnum} {X:tnum} plusify A Pos Neg -> catchtimes A B (neg X) one one Pos (+ Neg X) = [A:tm num] [Pos:tm num] [Neg:tm num] [B:tnum] [X:tnum] [p1:pf (== num A (- Pos Neg))] imp_i (== num (* B one) (* (neg X) one)) (== num (+ A B) (+ Pos (neg (+ Neg X)))) ([p2:pf (== num (* B one) (* (neg X) one))] cut (== num B (neg X)) (== num (+ A B) (+ Pos (neg (+ Neg X)))) (trans3 num B (* B one) (* (neg X) one) (neg X) (symm num (* B one) B (times_one B)) p2 (times_one (neg X))) ([p3:pf (== num B (neg X))] cut (== num (+ A B) (+ Pos (+ (neg Neg) (neg X)))) (== num (+ A B) (+ Pos (neg (+ Neg X)))) (trans2 num (+ A B) (+ (- Pos Neg) (neg X)) (+ Pos (+ (neg Neg) (neg X))) (plus_cong A (- Pos Neg) B (neg X) p1 p3) (plus_assoc Pos (neg Neg) (neg X))) ([p4:pf (== num (+ A B) (+ Pos (- (neg Neg) X)))] trans2 num (+ A B) (+ Pos (- (neg Neg) X)) (+ Pos (neg (+ Neg X))) p4 (plus_cong2 (+ (neg Neg) (neg X)) (neg (+ Neg X)) Pos (neg_plus Neg X))))).
catch_one : {A:tm num} {Pos:tm num} {Neg:tm num} {B:tnum} {X:tnum} plusify A Pos Neg -> catchtimes A B X one one (+ Pos X) Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [B:tnum] [X:tnum] [p1:pf (== num A (- Pos Neg))] imp_i (== num (* B one) (* X one)) (== num (+ A B) (+ (+ Pos X) (neg Neg))) ([p2:pf (== num (* B one) (* X one))] cut (== num B X) (== num (+ A B) (+ (+ Pos X) (neg Neg))) (trans3 num B (* B one) (* X one) X (symm num (* B one) B (times_one B)) p2 (times_one X)) ([p3:pf (== num B X)] trans4 num (+ A B) (+ (- Pos Neg) X) (+ Pos (+ (neg Neg) X)) (+ Pos (+ X (neg Neg))) (+ (+ Pos X) (neg Neg)) (plus_cong A (- Pos Neg) B X p1 p3) (plus_assoc Pos (neg Neg) X) (plus_cong2 (+ (neg Neg) X) (+ X (neg Neg)) Pos (comm_plus (neg Neg) X)) (assoc_plus Pos X (neg Neg)))).
catch_break : {A:tm num} {X:tm num} {P:tm num} {Q:tm num} {Pos:tm num} {Neg:tm num} {B:tnum} plusify (+ (+ A (* X P)) (* X Q)) Pos Neg -> catchtimes A B X (+ P Q) one Pos Neg = [A:tm num] [X:tm num] [P:tm num] [Q:tm num] [Pos:tm num] [Neg:tm num] [B:tnum] [p1:pf (== num (+ (+ A (* X P)) (* X Q)) (- Pos Neg))] imp_i (== num (* B one) (* X (+ P Q))) (== num (+ A B) (- Pos Neg)) ([p2:pf (== num (* B one) (* X (+ P Q)))] cut (== num B (+ (* X P) (* X Q))) (== num (+ A B) (- Pos Neg)) (trans3 num B (* B one) (* X (+ P Q)) (+ (* X P) (* X Q)) (symm num (* B one) B (times_one B)) p2 (distrib X P Q)) ([p3:pf (== num B (+ (* X P) (* X Q)))] trans3 num (+ A B) (+ A (+ (* X P) (* X Q))) (+ (+ A (* X P)) (* X Q)) (- Pos Neg) (plus_cong2 B (+ (* X P) (* X Q)) A p3) (assoc_plus A (* X P) (* X Q)) p1)).
plusify_minus : {A:tm num} {B:tm num} {C:tm num} {Pos:tm num} {Neg:tm num} plusify (- (- A B) C) Pos Neg -> plusify (- A (+ B C)) Pos Neg = [A:tm num] [B:tm num] [C:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify (- (- A B) C) Pos Neg] trans3 num (+ A (neg (+ B C))) (+ A (+ (neg B) (neg C))) (+ (+ A (neg B)) (neg C)) (- Pos Neg) (plus_cong2 (neg (+ B C)) (+ (neg B) (neg C)) A (symm num (+ (neg B) (neg C)) (neg (+ B C)) (neg_plus B C))) (assoc_plus A (neg B) (neg C)) p1.
plusify_swap : {A:tm num} {B:tm num} {C:tm num} {Pos:tm num} {Neg:tm num} plusify (+ (+ A B) C) Pos Neg -> plusify (+ A (+ B C)) Pos Neg = [A:tm num] [B:tm num] [C:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify (+ (+ A B) C) Pos Neg] trans num (+ A (+ B C)) (+ (+ A B) C) (- Pos Neg) (assoc_plus A B C) p1.
plusify_neg_one : {A:tm num} {B:tm num} {Pos:tm num} {Neg:tm num} plusify (- A B) Pos Neg -> plusify (+ A (* (neg one) B)) Pos Neg = [A:tm num] [B:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify (- A B) Pos Neg] trans num (+ A (* (neg one) B)) (+ A (neg B)) (- Pos Neg) (plus_cong2 (* (neg one) B) (neg B) A (trans num (* (neg one) B) (neg (* one B)) (neg B) (neg_times1 one B) (neg_cong (* one B) B (one_times B)))) p1.
plusify_neg_one' : {A:tm num} {B:tm num} {Pos:tm num} {Neg:tm num} plusify (- A B) Pos Neg -> plusify (+ A (* B (neg one))) Pos Neg = [A:tm num] [B:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify (- A B) Pos Neg] trans num (+ A (* B (neg one))) (+ A (* (neg one) B)) (- Pos Neg) (plus_cong2 (* B (neg one)) (* (neg one) B) A (comm_times B (neg one))) (plusify_neg_one A B Pos Neg p1).
plusify_neg : {A:tm num} {B:tm num} {Pos:tm num} {Neg:tm num} plusify (+ A B) Pos Neg -> plusify (- A (neg B)) Pos Neg = [A:tm num] [B:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify (+ A B) Pos Neg] trans num (+ A (neg (neg B))) (+ A B) (- Pos Neg) (plus_cong2 (neg (neg B)) B A (neg_neg_e B)) p1.
plusify_remove : {A:tm num} {Pos:tm num} {Neg:tm num} plusify A Pos Neg -> plusify (+ A zero) Pos Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [p1:plusify A Pos Neg] trans num (+ A zero) A (- Pos Neg) (plus_zero A) p1.
plusify_step_mult_neg : {A:tnum} {B:tm num} {C:tnum} {X:tnum} {Y:tnum} {Sign:tnum} {Pos:tm num} {Neg:tm num} catchtimes A (* B (neg C)) X Y Sign Pos Neg -> timesify (* (* one B) (neg C)) X Y Sign -> plusify (- A (* B C)) Pos Neg = [A:tnum] [B:tm num] [C:tnum] [X:tnum] [Y:tnum] [Sign:tnum] [Pos:tm num] [Neg:tm num] [p1:pf (== num (* (* B (neg C)) Sign) (* X Y) imp == num (+ A (* B (neg C))) (- Pos Neg))] [p2:pf (== num (* (* (* one B) (neg C)) Sign) (* X Y))] cut (== num (* (* B (neg C)) Sign) (* X Y)) (== num (+ A (neg (* B C))) (- Pos Neg)) (trans5 num (* (* B (neg C)) Sign) (* B (* (neg C) Sign)) (* one (* B (* (neg C) Sign))) (* (* one B) (* (neg C) Sign)) (* (* (* one B) (neg C)) Sign) (* X Y) (times_assoc B (neg C) Sign) (symm num (* one (* B (* (neg C) Sign))) (* B (* (neg C) Sign)) (one_times (* B (* (neg C) Sign)))) (assoc_times one B (* (neg C) Sign)) (assoc_times (* one B) (neg C) Sign) p2) ([p3:pf (== num (* (* B (neg C)) Sign) (* X Y))] cut (== num (+ A (* B (neg C))) (- Pos Neg)) (== num (+ A (neg (* B C))) (- Pos Neg)) (imp_e (== num (* (* B (neg C)) Sign) (* X Y)) (== num (+ A (* B (neg C))) (- Pos Neg)) p1 p3) ([p4:pf (== num (+ A (* B (neg C))) (- Pos Neg))] trans num (+ A (neg (* B C))) (+ A (* B (neg C))) (- Pos Neg) (plus_cong2 (neg (* B C)) (* B (neg C)) A (symm num (* B (neg C)) (neg (* B C)) (neg_times2 B C))) p4)).
plusify_step_mult : {A:tnum} {B:tm num} {C:tm num} {X:tnum} {Y:tnum} {Sign:tnum} {Pos:tm num} {Neg:tm num} catchtimes A (* B C) X Y Sign Pos Neg -> timesify (* (* one B) C) X Y Sign -> plusify (+ A (* B C)) Pos Neg = [A:tnum] [B:tm num] [C:tm num] [X:tnum] [Y:tnum] [Sign:tnum] [Pos:tm num] [Neg:tm num] [p1:pf (== num (* (* B C) Sign) (* X Y) imp == num (+ A (* B C)) (- Pos Neg))] [p2:pf (== num (* (* (* one B) C) Sign) (* X Y))] cut (== num (* (* B C) Sign) (* X Y)) (== num (+ A (* B C)) (- Pos Neg)) (trans5 num (* (* B C) Sign) (* B (* C Sign)) (* one (* B (* C Sign))) (* (* one B) (* C Sign)) (* (* (* one B) C) Sign) (* X Y) (times_assoc B C Sign) (symm num (* one (* B (* C Sign))) (* B (* C Sign)) (one_times (* B (* C Sign)))) (assoc_times one B (* C Sign)) (assoc_times (* one B) C Sign) p2) ([p3:pf (== num (* (* B C) Sign) (* X Y))] imp_e (== num (* (* B C) Sign) (* X Y)) (== num (+ A (* B C)) (- Pos Neg)) p1 p3).
plusify_step_neg_one : {A:tm num} {Pos:tm num} {Neg:tm num} plusify A Pos Neg -> plusify (- A one) Pos (+ Neg one) = [A:tm num] [Pos:tm num] [Neg:tm num] [p1:pf (== num A (- Pos Neg))] trans3 num (+ A (neg one)) (+ (- Pos Neg) (neg one)) (+ Pos (+ (neg Neg) (neg one))) (+ Pos (neg (+ Neg one))) (plus_cong1 A (- Pos Neg) (neg one) p1) (plus_assoc Pos (neg Neg) (neg one)) (plus_cong2 (+ (neg Neg) (neg one)) (neg (+ Neg one)) Pos (neg_plus Neg one)).
plusify_step_one : {A:tm num} {Pos:tm num} {Neg:tm num} plusify A Pos Neg -> plusify (+ A one) (+ Pos one) Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [p1:pf (== num A (- Pos Neg))] trans4 num (+ A one) (+ (- Pos Neg) one) (+ Pos (+ (neg Neg) one)) (+ Pos (+ one (neg Neg))) (+ (+ Pos one) (neg Neg)) (plus_cong1 A (- Pos Neg) one p1) (plus_assoc Pos (neg Neg) one) (plus_cong2 (+ (neg Neg) one) (+ one (neg Neg)) Pos (comm_plus (neg Neg) one)) (assoc_plus Pos one (neg Neg)).
plusify_step_neg : {A:tm num} {Pos:tm num} {Neg:tm num} {B:tm num} plusify A Pos Neg -> plusify (- A B) Pos (+ Neg (* one B)) = [A:tm num] [Pos:tm num] [Neg:tm num] [B:tm num] [p1:pf (== num A (- Pos Neg))] trans3 num (+ A (neg B)) (+ (- Pos Neg) (neg (* one B))) (+ Pos (+ (neg Neg) (neg (* one B)))) (+ Pos (neg (+ Neg (* one B)))) (plus_cong A (- Pos Neg) (neg B) (neg (* one B)) p1 (neg_cong B (* one B) (symm num (* one B) B (one_times B)))) (plus_assoc Pos (neg Neg) (neg (* one B))) (plus_cong2 (+ (neg Neg) (neg (* one B))) (neg (+ Neg (* one B))) Pos (neg_plus Neg (* one B))).
plusify_step : {A:tm num} {Pos:tm num} {Neg:tm num} {B:tm num} plusify A Pos Neg -> plusify (+ A B) (+ Pos (* one B)) Neg = [A:tm num] [Pos:tm num] [Neg:tm num] [B:tm num] [p1:pf (== num A (- Pos Neg))] trans num (+ A B) (+ (- Pos Neg) (* one B)) (+ (+ Pos (* one B)) (neg Neg)) (plus_cong A (- Pos Neg) B (* one B) p1 (symm num (* one B) B (one_times B))) (trans3 num (+ (+ Pos (neg Neg)) (* one B)) (+ Pos (+ (neg Neg) (* one B))) (+ Pos (+ (* one B) (neg Neg))) (+ (+ Pos (* one B)) (neg Neg)) (plus_assoc Pos (neg Neg) (* one B)) (plus_cong2 (+ (neg Neg) (* one B)) (+ (* one B) (neg Neg)) Pos (comm_plus (neg Neg) (* one B))) (assoc_plus Pos (* one B) (neg Neg))).
plusify_zero : plusify zero zero zero = symm num (- zero zero) zero (plus_inv zero).
trim_get : {A:tm num} {C:tm num} {B:tm num} trim (+ A C) (+ B C) A B = [A:tm num] [C:tm num] [B:tm num] cut (== num (+ (+ A C) (neg (+ B C))) (+ A (+ C (+ (neg B) (neg C))))) (== num (- (+ A C) (+ B C)) (- A B)) (trans num (+ (+ A C) (neg (+ B C))) (+ A (+ C (neg (+ B C)))) (+ A (+ C (+ (neg B) (neg C)))) (plus_assoc A C (neg (+ B C))) (plus_cong2 (+ C (neg (+ B C))) (+ C (+ (neg B) (neg C))) A (plus_cong2 (neg (+ B C)) (+ (neg B) (neg C)) C (symm num (+ (neg B) (neg C)) (neg (+ B C)) (neg_plus B C))))) ([p2:pf (== num (- (+ A C) (+ B C)) (+ A (+ C (- (neg B) C))))] cut (== num (+ A (+ C (+ (neg B) (neg C)))) (+ A (neg B))) (== num (- (+ A C) (+ B C)) (- A B)) (trans num (+ A (+ C (+ (neg B) (neg C)))) (+ A (+ (+ C (neg B)) (neg C))) (+ A (neg B)) (plus_cong2 (+ C (+ (neg B) (neg C))) (+ (+ C (neg B)) (neg C)) A (assoc_plus C (neg B) (neg C))) (plus_cong2 (- (+ C (neg B)) C) (neg B) A (cancel_a+b-a C (neg B)))) ([p3:pf (== num (+ A (+ C (- (neg B) C))) (- A B))] trans num (- (+ A C) (+ B C)) (+ A (+ C (- (neg B) C))) (- A B) p2 p3)).
trim_getmult : {C:tnum} {D:tnum} {A:tm num} {B:tm num} findarr_mult C D one nomatch -> trim (+ A C) (+ B D) A B = [C:tnum] [D:tnum] [A:tm num] [B:tm num] [p2:pf (== num C (* D one) and == num zero zero)] cut (== num C D) (== num (+ (+ A C) (neg (+ B D))) (+ A (neg B))) (trans num C (* D one) D (and_e1 (== num C (* D one)) (== num zero zero) p2) (times_one D)) ([p3:pf (== num C D)] cut (== num (- (- C B) D) (neg B)) (== num (+ (+ A C) (neg (+ B D))) (+ A (neg B))) (congr num D C ([i1:tm num] == num (- (- C B) i1) (neg B)) (symm num C D p3) (cancel_a+b-a C (neg B))) ([p4:pf (== num (- (- C B) D) (neg B))] cut (== num (+ C (neg (+ B D))) (neg B)) (== num (+ (+ A C) (neg (+ B D))) (+ A (neg B))) (trans3 num (+ C (neg (+ B D))) (+ C (+ (neg B) (neg D))) (+ (+ C (neg B)) (neg D)) (neg B) (plus_cong2 (neg (+ B D)) (+ (neg B) (neg D)) C (symm num (+ (neg B) (neg D)) (neg (+ B D)) (neg_plus B D))) (assoc_plus C (neg B) (neg D)) p4) ([p5:pf (== num (- C (+ B D)) (neg B))] trans num (+ (+ A C) (neg (+ B D))) (+ A (+ C (neg (+ B D)))) (+ A (neg B)) (plus_assoc A C (neg (+ B D))) (plus_cong2 (- C (+ B D)) (neg B) A p5)))).
trim_step1 : {A:tnum} {B:tnum} {X:tnum} {Y:tnum} {C:tm num} trim A B X Y -> trim (+ A C) B (+ X C) Y = [A:tnum] [B:tnum] [X:tnum] [Y:tnum] [C:tm num] [p1:pf (== num (- A B) (- X Y))] cut (== num (+ (+ A C) (neg B)) (+ (+ X C) (neg Y))) (== num (- (+ A C) B) (- (+ X C) Y)) (trans3 num (+ (+ A C) (neg B)) (+ (+ A (neg B)) C) (+ (- X Y) C) (+ (+ X C) (neg Y)) (trans3 num (+ (+ A C) (neg B)) (+ A (+ C (neg B))) (+ A (+ (neg B) C)) (+ (+ A (neg B)) C) (plus_assoc A C (neg B)) (plus_cong2 (+ C (neg B)) (+ (neg B) C) A (comm_plus C (neg B))) (assoc_plus A (neg B) C)) (plus_cong1 (- A B) (- X Y) C p1) (trans3 num (+ (+ X (neg Y)) C) (+ X (+ (neg Y) C)) (+ X (+ C (neg Y))) (+ (+ X C) (neg Y)) (plus_assoc X (neg Y) C) (plus_cong2 (+ (neg Y) C) (+ C (neg Y)) X (comm_plus (neg Y) C)) (assoc_plus X C (neg Y)))) ([p2:pf (== num (- (+ A C) B) (- (+ X C) Y))] p2).
trim_step2 : {A:tnum} {B:tnum} {X:tnum} {Y:tnum} {C:tm num} trim A B X Y -> trim A (+ B C) X (+ Y C) = [A:tnum] [B:tnum] [X:tnum] [Y:tnum] [C:tm num] [p1:pf (== num (- A B) (- X Y))] trans3 num (+ A (neg (+ B C))) (+ A (+ (neg B) (neg C))) (+ X (+ (neg Y) (neg C))) (+ X (neg (+ Y C))) (plus_cong2 (neg (+ B C)) (+ (neg B) (neg C)) A (symm num (+ (neg B) (neg C)) (neg (+ B C)) (neg_plus B C))) (trans3 num (+ A (+ (neg B) (neg C))) (+ (+ A (neg B)) (neg C)) (+ (- X Y) (neg C)) (+ X (+ (neg Y) (neg C))) (assoc_plus A (neg B) (neg C)) (plus_cong1 (- A B) (- X Y) (neg C) p1) (plus_assoc X (neg Y) (neg C))) (plus_cong2 (+ (neg Y) (neg C)) (neg (+ Y C)) X (neg_plus Y C)).
fam_step : {X:tnum} {Y:tnum} {Z:tnum} {B:tm num} {M:tnum} findarr_mult X Y Z match -> findarr_mult (* X B) (* Y B) Z M = [X:tnum] [Y:tnum] [Z:tnum] [B:tm num] [M:tnum] [p1:pf (== num X (* Y Z) and == num match match)] cut (== num (* X B) (* (* Y B) Z)) (== num (* X B) (* (* Y B) Z) and == num M M) (trans num (* X B) (* (* Y Z) B) (* (* Y B) Z) (times_cong1 X (* Y Z) B (and_e1 (== num X (* Y Z)) (== num match match) p1)) (trans3 num (* (* Y Z) B) (* Y (* Z B)) (* Y (* B Z)) (* (* Y B) Z) (times_assoc Y Z B) (times_cong2 (* Z B) (* B Z) Y (comm_times Z B)) (assoc_times Y B Z))) ([p2:pf (== num (* X B) (* (* Y B) Z))] and_i (== num (* X B) (* (* Y B) Z)) (== num M M) p2 (refl num M)).
fam_swap : {X:tnum} {Y:tnum} {Z:tm num} {B:tm num} {M:tnum} findarr_mult X Y (* Z B) M -> findarr_mult X (* Y B) Z M = [X:tnum] [Y:tnum] [Z:tm num] [B:tm num] [M:tnum] [p1:pf (== num X (* Y (* Z B)) and == num M M)] cut (== num X (* Y (* Z B)) and == num M M) (== num X (* (* Y B) Z) and == num M M) p1 ([x3:pf (== num X (* Y (* Z B)) and == num M M)] and_i (== num X (* (* Y B) Z)) (== num M M) (trans3 num X (* Y (* Z B)) (* Y (* B Z)) (* (* Y B) Z) (and_e1 (== num X (* Y (* Z B))) (== num M M) p1) (times_cong2 (* Z B) (* B Z) Y (comm_times Z B)) (symm num (* (* Y B) Z) (* Y (* B Z)) (times_assoc Y B Z))) (refl num M)).
fam_finish : {M:tnum} findarr_mult one one one M = [M:tnum] and_i (== num one (* one one)) (== num M M) (symm num (* one one) one (times_one one)) (refl num M).
fam_one : {X:tnum} {Y:tnum} findarr_mult X Y one nomatch -> findarr_mult X one Y match = [X:tnum] [Y:tnum] [p1:pf (== num X (* Y one) and == num nomatch nomatch)] and_i (== num X (* one Y)) (== num match match) (trans num X (* Y one) (* one Y) (and_e1 (== num X (* Y one)) (== num nomatch nomatch) p1) (comm_times Y one)) (refl num match).
rearr_finish : rearrange zero zero zero zero = refl num (- zero zero).
rearr_end : {X:tnum} {Y:tnum} {A:tnum} {B:tnum} rearrange X Y zero zero -> trim A B X Y -> rearrange A B zero zero = [X:tnum] [Y:tnum] [A:tnum] [B:tnum] [p1:pf (== num (- X Y) (- zero zero))] [p2:pf (== num (- A B) (- X Y))] trans num (- A B) (- X Y) (- zero zero) p2 p1.
rearr_pos : {X:tnum} {Y:tnum} {A:tnum} {C:tnum} rearrange X Y zero zero -> trim A C X Y -> rearrange A zero C zero = [X:tnum] [Y:tnum] [A:tnum] [C:tnum] [p1:pf (== num (- X Y) (- zero zero))] [p2:pf (== num (- A C) (- X Y))] cut (== num (- A C) zero) (== num (+ A (neg zero)) (+ C (neg zero))) (trans3 num (- A C) (- X Y) (- zero zero) zero p2 p1 (plus_inv zero)) ([p3:pf (== num (- A C) zero)] cut (== num A C) (== num (+ A (neg zero)) (+ C (neg zero))) (trans3 num A (+ (- A C) C) (+ zero C) C (symm num (+ (- A C) C) A (cancel_a-b+b A C)) (plus_cong1 (- A C) zero C p3) (zero_plus C)) ([p4:pf (== num A C)] plus_cong1 A C (neg zero) p4)).
rearr_neg : {X:tnum} {Y:tnum} {B:tnum} {D:tnum} rearrange X Y zero zero -> trim B D X Y -> rearrange zero B zero D = [X:tnum] [Y:tnum] [B:tnum] [D:tnum] [p1:pf (== num (- X Y) (- zero zero))] [p2:pf (== num (- B D) (- X Y))] cut (== num (- B D) zero) (== num (+ zero (neg B)) (+ zero (neg D))) (trans3 num (- B D) (- X Y) (- zero zero) zero p2 p1 (plus_inv zero)) ([p3:pf (== num (- B D) zero)] cut (== num B D) (== num (+ zero (neg B)) (+ zero (neg D))) (trans3 num B (+ (- B D) D) (+ zero D) D (symm num (+ (- B D) D) B (cancel_a-b+b B D)) (plus_cong1 (- B D) zero D p3) (zero_plus D)) ([p4:pf (== num B D)] plus_cong2 (neg B) (neg D) zero (neg_cong B D p4))).
plus_swap : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num (- A B) (- C D)) -> pf (== num (- A C) (- B D)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num (- A B) (- C D))] cut (== num A (+ B (- C D))) (== num (- A C) (- B D)) (trans3 num A (+ (- A B) B) (+ (- C D) B) (+ B (- C D)) (symm num (+ (- A B) B) A (cancel_a-b+b A B)) (plus_cong1 (- A B) (- C D) B p1) (comm_plus (- C D) B)) ([p2:pf (== num A (+ B (- C D)))] cut (== num (+ A (neg C)) (+ B (neg D))) (== num (- A C) (- B D)) (trans3 num (+ A (neg C)) (+ (+ B (- C D)) (neg C)) (+ B (+ (- C D) (neg C))) (+ B (neg D)) (plus_cong1 A (+ B (- C D)) (neg C) p2) (plus_assoc B (- C D) (neg C)) (plus_cong2 (- (+ C (neg D)) C) (neg D) B (cancel_a+b-a C (neg D)))) ([p3:pf (== num (- A C) (- B D))] p3)).
plus_swap2 : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num (+ A B) (+ C D)) -> pf (== num (- A D) (- C B)) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num (+ A B) (+ C D))] cut (== num A (+ (+ C (neg B)) D)) (== num (+ A (neg D)) (- C B)) (trans5 num A (- (+ A B) B) (+ (+ C D) (neg B)) (+ C (+ D (neg B))) (+ C (+ (neg B) D)) (+ (+ C (neg B)) D) (symm num (- (+ A B) B) A (cancel_a+b-b A B)) (plus_cong1 (+ A B) (+ C D) (neg B) p1) (plus_assoc C D (neg B)) (plus_cong2 (+ D (neg B)) (+ (neg B) D) C (comm_plus D (neg B))) (assoc_plus C (neg B) D)) ([p2:pf (== num A (+ (- C B) D))] trans num (+ A (neg D)) (+ (+ (- C B) D) (neg D)) (- C B) (plus_cong1 A (+ (- C B) D) (neg D) p2) (cancel_a+b-b (- C B) D)).
rearr_one : {Z:tnum} {W:tnum} {Y:tnum} {X:tnum} {B:tnum} {A:tnum} {C:tnum} rearrange Z W Y zero -> trim X B Z W -> trim A C X Y -> rearrange A B C zero = [Z:tnum] [W:tnum] [Y:tnum] [X:tnum] [B:tnum] [A:tnum] [C:tnum] [p1:pf (== num (- Z W) (- Y zero))] [p2:pf (== num (- X B) (- Z W))] [p3:pf (== num (- A C) (- X Y))] cut (== num (- X Y) (- B zero)) (== num (- A B) (- C zero)) (plus_swap X B Y zero (trans num (- X B) (- Z W) (- Y zero) p2 p1)) ([p4:pf (== num (- X Y) (- B zero))] plus_swap A C B zero (trans num (- A C) (- X Y) (- B zero) p3 p4)).
rearr_two : {Z:tnum} {W:tnum} {Y:tnum} {A:tnum} {X:tnum} {B:tnum} {D:tnum} rearrange Z W zero Y -> trim A X Z W -> trim B D X Y -> rearrange A B zero D = [Z:tnum] [W:tnum] [Y:tnum] [A:tnum] [X:tnum] [B:tnum] [D:tnum] [p1:pf (== num (- Z W) (- zero Y))] [p2:pf (== num (- A X) (- Z W))] [p3:pf (== num (- B D) (- X Y))] cut (== num (- A zero) (- X Y)) (== num (- A B) (- zero D)) (plus_swap A X zero Y (trans num (- A X) (- Z W) (- zero Y) p2 p1)) ([p4:pf (== num (- A zero) (- X Y))] plus_swap A zero B D (trans num (- A zero) (- X Y) (- B D) p4 (symm num (- B D) (- X Y) p3))).
rearr_three : {Z:tnum} {W:tnum} {Y:tnum} {X:tnum} {B:tnum} {A:tnum} {C:tnum} rearrange Z W Y zero -> trim X B Z W -> trim A C X Y -> rearrange C zero A B = [Z:tnum] [W:tnum] [Y:tnum] [X:tnum] [B:tnum] [A:tnum] [C:tnum] [p1:rearrange Z W Y zero] [p2:trim X B Z W] [p3:trim A C X Y] symm num (- A B) (- C zero) (rearr_one Z W Y X B A C p1 p2 p3).
rearr_four : {Z:tnum} {W:tnum} {Y:tnum} {A:tnum} {X:tnum} {B:tnum} {D:tnum} rearrange Z W zero Y -> trim A X Z W -> trim B D X Y -> rearrange zero D A B = [Z:tnum] [W:tnum] [Y:tnum] [A:tnum] [X:tnum] [B:tnum] [D:tnum] [p1:rearrange Z W zero Y] [p2:trim A X Z W] [p3:trim B D X Y] symm num (- A B) (- zero D) (rearr_two Z W Y A X B D p1 p2 p3).
rearr_any1 : {X:tnum} {C:tnum} {Y:tnum} {D:tnum} {A:tnum} {B:tnum} rearrange X C Y D -> trim A B X Y -> rearrange A B C D = [X:tnum] [C:tnum] [Y:tnum] [D:tnum] [A:tnum] [B:tnum] [p1:pf (== num (- X C) (- Y D))] [p2:pf (== num (- A B) (- X Y))] trans num (- A B) (- X Y) (- C D) p2 (plus_swap X C Y D p1).
rearr_any2 : {X:tnum} {B:tnum} {Y:tnum} {D:tnum} {A:tnum} {C:tnum} rearrange X B Y D -> trim A C X Y -> rearrange A B C D = [X:tnum] [B:tnum] [Y:tnum] [D:tnum] [A:tnum] [C:tnum] [p1:pf (== num (- X B) (- Y D))] [p2:pf (== num (- A C) (- X Y))] plus_swap A C B D (trans num (- A C) (- X Y) (- B D) p2 (plus_swap X B Y D p1)).
solver_rearrange : {Pos:tnum} {Neg:tnum} {Pos':tnum} {Neg':tnum} {B:tnum} {A:tnum} rearrange Pos Neg Pos' Neg' -> listify B Pos' Neg' -> listify A Pos Neg -> algebra_solver (== num A B) = [Pos:tnum] [Neg:tnum] [Pos':tnum] [Neg':tnum] [B:tnum] [A:tnum] [p1:rearrange Pos Neg Pos' Neg'] [p2:listify B Pos' Neg'] [p3:listify A Pos Neg] trans3 num A (- Pos Neg) (- Pos' Neg') B p3 p1 (symm num B (- Pos' Neg') p2).
eq_arrange : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num (- A B) (- C D)) -> pf (== num A B) -> pf (== num C D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num (- A B) (- C D))] [p2:pf (== num A B)] cut (== num (- C D) zero) (== num C D) (trans3 num (- C D) (- A B) (+ B (neg B)) zero (symm num (- A B) (- C D) p1) (plus_cong1 A B (neg B) p2) (plus_inv B)) ([p3:pf (== num (- C D) zero)] trans3 num C (+ (- C D) D) (+ zero D) D (symm num (+ (- C D) D) C (cancel_a-b+b C D)) (plus_cong1 (- C D) zero D p3) (zero_plus D)).
solver_eq : {A:tm num} {D:tm num} {C:tm num} {B:tm num} algebra_solver (== num (+ A D) (+ C B)) -> algebra_solver (== num A B imp == num C D) = [A:tm num] [D:tm num] [C:tm num] [B:tm num] [p1:algebra_solver (== num (+ A D) (+ C B))] imp_i (== num A B) (== num C D) ([p2:pf (== num A B)] eq_arrange A B C D (plus_swap2 A D C B p1) p2).
solver_eq_neg : {D:tm num} {B:tm num} {C:tm num} {A:tm num} algebra_solver (== num (+ D B) (+ C A)) -> algebra_solver (== num A B imp == num C D) = [D:tm num] [B:tm num] [C:tm num] [A:tm num] [p1:algebra_solver (== num (+ D B) (+ C A))] imp_i (== num A B) (== num C D) ([p2:pf (== num A B)] eq_arrange (neg A) (neg B) C D (plus_swap2 (neg A) D C (neg B) (trans num (+ (neg A) D) (+ D (neg A)) (- C B) (comm_plus (neg A) D) (plus_swap2 D B C A p1))) (neg_cong A B p2)).
geq_arrange : {A:tm num} {D:tm num} {C:tm num} {B:tm num} pf (== num (+ A D) (+ C B)) -> pf (>= A B) -> pf (>= C D) = [A:tm num] [D:tm num] [C:tm num] [B:tm num] [p0:pf (== num (+ A D) (+ C B))] [p1:pf (>= A B)] cut (== num (- A B) (- C D)) (>= C D) (plus_swap2 A D C B p0) ([p2:pf (== num (- A B) (- C D))] cut (>= (+ A (neg B)) zero) (>= C D) (trans_geq_eq (+ A (neg B)) (+ B (neg B)) zero (geq_plus_cong1 A B (neg B) p1) (plus_inv B)) ([p3:pf (>= (- A B) zero)] cut (>= (- C D) zero) (>= C D) (trans_eq_geq (- C D) (- A B) zero (symm num (- A B) (- C D) p2) p3) ([p4:pf (>= (- C D) zero)] cut (>= C (+ zero D)) (>= C D) (trans_eq_geq C (+ (- C D) D) (+ zero D) (symm num (+ (- C D) D) C (cancel_a-b+b C D)) (geq_plus_cong1 (- C D) zero D p4)) ([p5:pf (>= C (+ zero D))] trans_geq_eq C (+ zero D) D p5 (zero_plus D))))).
solver_geq : {A:tm num} {D:tm num} {C:tm num} {B:tm num} algebra_solver (== num (+ A D) (+ C B)) -> algebra_solver (>= A B imp >= C D) = [A:tm num] [D:tm num] [C:tm num] [B:tm num] [p1:algebra_solver (== num (+ A D) (+ C B))] imp_i (>= A B) (>= C D) ([p2:pf (>= A B)] geq_arrange A D C B p1 p2).
solver_gt : {C:tm num} {D:tm num} {A:tm num} {B:tm num} algebra_solver (>= C D imp >= A B) -> algebra_solver (< A B imp < C D) = [C:tm num] [D:tm num] [A:tm num] [B:tm num] [p1:algebra_solver (>= C D imp >= A B)] imp_i (not (>= A B)) (not (>= C D)) ([p2:pf (not (>= A B))] not_ei (>= A B) (>= C D) p2 ([x3:pf (>= C D)] imp_e (>= C D) (>= A B) p1 x3)).
__P : {a:tm num} {b:tm num} algebra_solver (== num a b imp == num (- a b) zero) = [a:tm num] [b:tm num] solver_eq a zero (- a b) b (solver_rearrange (+ zero (* one a)) zero (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (- a b) b) (+ a zero) (rearr_three zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero))))).
eq_shift : {A:tm num} {B:tm num} pf (== num A B) -> pf (== num (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (== num A B)] imp_e (== num A B) (== num (- A B) zero) (__P A B) x3.
__P : {a:tm num} {b:tm num} algebra_solver (== num (- a b) zero imp == num a b) = [a:tm num] [b:tm num] solver_eq (- a b) b a zero (solver_rearrange (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ zero (* one a)) zero (+ a zero) (+ (- a b) b) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))).
eq_unshift : {A:tm num} {B:tm num} pf (== num (- A B) zero) -> pf (== num A B) = [A:tm num] [B:tm num] [x3:pf (== num (- A B) zero)] imp_e (== num (- A B) zero) (== num A B) (__P A B) x3.
neq_shift : {A:tm num} {B:tm num} pf (!= num A B) -> pf (!= num (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (!= num A B)] neqlem (== num (- A B) zero) num A B ([x4:pf (== num (- A B) zero)] eq_unshift A B x4) x3.
__P : {a:tm num} {b:tm num} algebra_solver (>= a b imp >= (- a b) zero) = [a:tm num] [b:tm num] solver_geq a zero (- a b) b (solver_rearrange (+ zero (* one a)) zero (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (- a b) b) (+ a zero) (rearr_three zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero))))).
geq_shift : {A:tm num} {B:tm num} pf (>= A B) -> pf (>= (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (>= A B)] imp_e (>= A B) (>= (- A B) zero) (__P A B) x3.
__P : {a:tm num} {b:tm num} algebra_solver (>= (- a b) zero imp >= a b) = [a:tm num] [b:tm num] solver_geq (- a b) b a zero (solver_rearrange (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ zero (* one a)) zero (+ a zero) (+ (- a b) b) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp (+ a zero) (+ zero (* one a)) zero (plusify_swap zero a zero (+ zero (* one a)) zero (plusify_remove (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) b (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) b (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))).
geq_unshift : {A:tm num} {B:tm num} pf (>= (- A B) zero) -> pf (>= A B) = [A:tm num] [B:tm num] [x3:pf (>= (- A B) zero)] imp_e (>= (- A B) zero) (>= A B) (__P A B) x3.
__P : {a:tm num} {b:tm num} algebra_solver (<= a b imp <= (- a b) zero) = [a:tm num] [b:tm num] solver_geq b (- a b) zero a (solver_rearrange (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (+ zero (* one a)) zero (+ zero a) (+ b (- a b)) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_get (+ zero (* one b)) (* one a) zero)) (listify_imp (+ zero a) (+ zero (* one a)) zero (plusify_swap zero zero a (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))) (listify_imp (+ b (- a b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap zero b (- a b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap (+ zero b) a (neg b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero b) a) (+ (+ zero (* one b)) (* one a)) zero b (plusify_step (+ zero b) (+ zero (* one b)) zero a (plusify_step zero zero zero b plusify_zero))))))).
leq_shift : {A:tm num} {B:tm num} pf (<= A B) -> pf (<= (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (<= A B)] imp_e (<= A B) (<= (- A B) zero) (__P A B) x3.
__P : {a:tm num} {b:tm num} algebra_solver (<= (- a b) zero imp <= a b) = [a:tm num] [b:tm num] solver_geq zero a b (- a b) (solver_rearrange (+ zero (* one a)) zero (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (+ b (- a b)) (+ zero a) (rearr_three zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_get (+ zero (* one b)) (* one a) zero)) (listify_imp (+ b (- a b)) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap zero b (- a b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_swap (+ zero b) a (neg b) (+ (+ zero (* one b)) (* one a)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero b) a) (+ (+ zero (* one b)) (* one a)) zero b (plusify_step (+ zero b) (+ zero (* one b)) zero a (plusify_step zero zero zero b plusify_zero)))))) (listify_imp (+ zero a) (+ zero (* one a)) zero (plusify_swap zero zero a (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero))))).
leq_unshift : {A:tm num} {B:tm num} pf (<= (- A B) zero) -> pf (<= A B) = [A:tm num] [B:tm num] [x3:pf (<= (- A B) zero)] imp_e (<= (- A B) zero) (<= A B) (__P A B) x3.
gt_shift : {A:tm num} {B:tm num} pf (> A B) -> pf (> (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (> A B)] gtlem (<= (- A B) zero) B A ([x4:pf (<= (- A B) zero)] leq_unshift A B x4) x3.
lt_shift : {A:tm num} {B:tm num} pf (< A B) -> pf (< (- A B) zero) = [A:tm num] [B:tm num] [x3:pf (< A B)] gtlem (>= (- A B) zero) A B ([x4:pf (>= (- A B) zero)] geq_unshift A B x4) x3.
_swap1 : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (== num (+ a b) c1 imp == num a (- c1 b)) = [a:tm num] [b:tm num] [c2:tm num] solver_eq (+ a b) (- c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (+ a b) (- c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_get (+ (+ zero (* one a)) (* one b)) (* one c2) (+ zero (* one a)))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (+ a b) (- c2 b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap zero (+ a b) (- c2 b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap (+ zero (+ a b)) c2 (neg b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero (+ a b)) c2) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) zero b (plusify_step (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero c2 (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
_swap2 : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (== num (- a b) c1 imp == num a (+ c1 b)) = [a:tm num] [b:tm num] [c2:tm num] solver_eq (- a b) (+ c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (- a b) (+ c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_step1 (+ (+ zero (* one a)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one a)) (+ zero (* one a)) (* one b) (trim_get (+ zero (* one a)) (* one c2) (+ zero (* one a))))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) (+ c2 b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) (+ c2 b) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap (+ zero (- a b)) c2 b (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_step (+ (+ zero (- a b)) c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) b (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
eq_swap_a+b_c : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ A B) C) -> pf (== num A (- C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (== num (+ A B) C)] imp_e (== num (+ A B) C) (== num A (- C B)) (_swap1 A B C) x3.
eq_swap_a_b+c : {A:tm num} {B:tm num} {C:tm num} pf (== num A (+ B C)) -> pf (== num (- A C) B) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num A (+ B C))] symm num B (- A C) (eq_swap_a+b_c B C A (symm num A (+ B C) p1)).
eq_swap_a-b_c : {A:tm num} {B:tm num} {C:tm num} pf (== num (- A B) C) -> pf (== num A (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (== num (- A B) C)] imp_e (== num (- A B) C) (== num A (+ C B)) (_swap2 A B C) x3.
_swap3 : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (>= (+ a b) c1 imp >= a (- c1 b)) = [a:tm num] [b:tm num] [c2:tm num] solver_geq (+ a b) (- c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (+ a b) (- c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_get (+ (+ zero (* one a)) (* one b)) (* one c2) (+ zero (* one a)))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (+ a b) (- c2 b)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap zero (+ a b) (- c2 b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_swap (+ zero (+ a b)) c2 (neg b) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one b)) (plusify_step_neg (+ (+ zero (+ a b)) c2) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) zero b (plusify_step (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero c2 (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
_swap4 : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (>= a (+ b c1) imp >= (- a c1) b) = [a:tm num] [b:tm num] [c2:tm num] solver_geq a b (- a c2) (+ b c2) (solver_rearrange (+ (+ zero (* one a)) (* one b)) zero (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (+ (- a c2) (+ b c2)) (+ a b) (rearr_three (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one c2)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ (+ zero (* one a)) (* one b)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one c2) zero) (trim_step1 (+ (+ zero (* one a)) (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) (+ zero (* one a)) (* one c2) (trim_get (+ zero (* one a)) (* one b) (+ zero (* one a))))) (listify_imp (+ (- a c2) (+ b c2)) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (plusify_swap zero (- a c2) (+ b c2) (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (plusify_swap (+ zero (- a c2)) b c2 (+ (+ (+ zero (* one a)) (* one b)) (* one c2)) (+ zero (* one c2)) (plusify_step (+ (+ zero (- a c2)) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one c2)) c2 (plusify_step (+ zero (- a c2)) (+ zero (* one a)) (+ zero (* one c2)) b (plusify_swap zero a (neg c2) (+ zero (* one a)) (+ zero (* one c2)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))))))) (listify_imp (+ a b) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))).
_swap5 : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (>= (- a b) c1 imp >= a (+ c1 b)) = [a:tm num] [b:tm num] [c2:tm num] solver_geq (- a b) (+ c2 b) a c2 (solver_rearrange (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) zero (+ a c2) (+ (- a b) (+ c2 b)) (rearr_one (+ zero (* one a)) zero (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ (+ zero (* one a)) (* one c2)) (rearr_pos zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) zero) (trim_step1 (+ (+ zero (* one a)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one a)) (+ zero (* one a)) (* one b) (trim_get (+ zero (* one a)) (* one c2) (+ zero (* one a))))) (listify_imp (+ a c2) (+ (+ zero (* one a)) (* one c2)) zero (plusify_swap zero a c2 (+ (+ zero (* one a)) (* one c2)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero c2 (plusify_step zero zero zero a plusify_zero)))) (listify_imp (+ (- a b) (+ c2 b)) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap zero (- a b) (+ c2 b) (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_swap (+ zero (- a b)) c2 b (+ (+ (+ zero (* one a)) (* one c2)) (* one b)) (+ zero (* one b)) (plusify_step (+ (+ zero (- a b)) c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) b (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))))).
geq_swap_a+b_c : {A:tm num} {B:tm num} {C:tm num} pf (>= (+ A B) C) -> pf (>= A (- C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= (+ A B) C)] imp_e (>= (+ A B) C) (>= A (- C B)) (_swap3 A B C) x3.
geq_swap_a_b+c : {A:tm num} {B:tm num} {C:tm num} pf (>= A (+ B C)) -> pf (>= (- A C) B) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= A (+ B C))] imp_e (>= A (+ B C)) (>= (- A C) B) (_swap4 A B C) x3.
geq_swap_a-b_c : {A:tm num} {B:tm num} {C:tm num} pf (>= (- A B) C) -> pf (>= A (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= (- A B) C)] imp_e (>= (- A B) C) (>= A (+ C B)) (_swap5 A B C) x3.
leq_swap_a_b+c : {A:tm num} {B:tm num} {C:tm num} pf (<= A (+ B C)) -> pf (<= (- A C) B) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (<= A (+ B C))] geq_swap_a+b_c B C A x3.
gt_swap_a+b_c : {A:tm num} {B:tm num} {C:tm num} pf (> (+ A B) C) -> pf (> A (- C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> (+ A B) C)] gtlem (>= (- C B) A) C (+ A B) ([x4:pf (>= (- C B) A)] geq_swap_a-b_c C B A x4) x3.
gt_swap_a_b-c : {A:tm num} {B:tm num} {C:tm num} pf (> A (- B C)) -> pf (> (+ A C) B) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (> A (- B C))] gtlem (>= B (+ A C)) (- B C) A ([x4:pf (>= B (+ A C))] geq_swap_a_b+c B A C x4) x3.
lt_swap_a_b+c : {A:tm num} {B:tm num} {C:tm num} pf (< A (+ B C)) -> pf (< (- A C) B) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (< A (+ B C))] gt_swap_a+b_c B C A x3.
lt_swap_a-b_c : {A:tm num} {B:tm num} {C:tm num} pf (< (- A B) C) -> pf (< A (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (< (- A B) C)] gt_swap_a_b-c C A B x3.
sign0 : {A:tm num} pf (>= A zero) -> pf (== num (sign A) zero) = [A:tm num] [x3:pf (>= A zero)] _sign0 A x3.
sign1 : {A:tm num} pf (< A zero) -> pf (== num (sign A) one) = [A:tm num] [x3:pf (< A zero)] _sign1 A x3.
__P : {a:tnum} {b:tnum} algebra_solver (== num (if1 one a b) a) = [a:tnum] [b:tnum] solver_rearrange (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (+ zero (* one a)) zero a (if1 one a b) (rearr_one zero zero zero (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) (+ zero (* one a)) rearr_finish (trim_get zero (* one b) zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero (* one b) (trim_get zero (* one a) zero))) (listify_imp a (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)) (listify_imp (if1 one a b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_swap zero (times one a) (times (minus one one) b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step_mult (+ zero (times one a)) (minus one one) b (* one b) (+ one (neg one)) one (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (catch_break (+ zero (times one a)) (* one b) one (neg one) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (* (minus one one) b) (plusify_neg_one' (+ (+ zero (times one a)) (* (* one b) one)) (* one b) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (plusify_step_mult_neg (+ (+ zero (times one a)) (* (* one b) one)) one b (* one b) one (neg one) (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (catch_neg2 (+ (+ zero (times one a)) (* (* one b) one)) (* one (neg b)) (* one b) one one (+ (+ zero (* one a)) (* one b)) (+ zero (* one b)) (catch_neg_one (+ (+ zero (times one a)) (* (* one b) one)) (+ (+ zero (* one a)) (* one b)) zero (* one (neg b)) (* one b) (plusify_step_mult (+ zero (times one a)) (* one b) one (* one b) one one (+ (+ zero (* one a)) (* one b)) zero (catch_one (+ zero (times one a)) (+ zero (* one a)) zero (* (* one b) one) (* one b) (plusify_step_mult zero one a (* one a) one one (+ zero (* one a)) zero (catch_one zero zero zero (* one a) (* one a) plusify_zero) (timesify_step (* one one) one one one a (timesify_remove one one one one timesify_end_one)))) (timesify_remove (* one (* one b)) (* one b) one one (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one))))))) (timesify_neg (* one one) b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one)))))) (timesify_step (* one (minus one one)) one (+ one (neg one)) one b (timesify_end_plus one one (neg one)))))).
if1_1 : {A:tm num} {B:tnum} {C:tnum} pf (== num A one) -> pf (== num (if1 A B C) B) = [A:tm num] [B:tnum] [C:tnum] [p1:pf (== num A one)] congr num A one ([i1:tm num] == num (if1 i1 B C) B) p1 (__P B C).
ifgtz1 : {A:tm num} {B:tnum} {C:tnum} pf (> A zero) -> pf (== num (ifgtz A B C) B) = [A:tm num] [B:tnum] [C:tnum] [p1:pf (> A zero)] if1_1 (sign (neg A)) B C (sign1 (neg A) (trans_lt_eq (neg A) (neg zero) zero (gt_neg_cong A zero p1) neg_zero)).
__P : {a:tnum} {b:tnum} algebra_solver (== num (if1 zero a b) b) = [a:tnum] [b:tnum] solver_rearrange (+ zero (* one b)) zero (+ zero (* one b)) zero b (if1 zero a b) (rearr_pos zero zero (+ zero (* one b)) (+ zero (* one b)) rearr_finish (trim_get zero (* one b) zero)) (listify_imp b (+ zero (* one b)) zero (plusify_step zero zero zero b plusify_zero)) (listify_imp (if1 zero a b) (+ zero (* one b)) zero (plusify_swap zero (times zero a) (times (minus one zero) b) (+ zero (* one b)) zero (plusify_step_mult (+ zero (times zero a)) (minus one zero) b (* one b) (+ one (neg zero)) one (+ zero (* one b)) zero (catch_break (+ zero (times zero a)) (* one b) one (neg zero) (+ zero (* one b)) zero (* (minus one zero) b) (plusify_step_mult (+ (+ zero (times zero a)) (* (* one b) one)) (* one b) (neg zero) one zero (neg one) (+ zero (* one b)) zero (catch_neg2 (+ (+ zero (times zero a)) (* (* one b) one)) (* (* one b) (neg zero)) one zero one (+ zero (* one b)) zero (catch_zero (+ (+ zero (times zero a)) (* (* one b) one)) (+ zero (* one b)) zero (* (* one b) (neg zero)) (neg one) (plusify_step_mult (+ zero (times zero a)) (* one b) one (* one b) one one (+ zero (* one b)) zero (catch_one (+ zero (times zero a)) zero zero (* (* one b) one) (* one b) (plusify_step_mult zero zero a (* one a) zero one zero zero (catch_zero zero zero zero (* zero a) (* one a) plusify_zero) (timesify_step (* one zero) one zero one a (timesify_zero one)))) (timesify_remove (* one (* one b)) (* one b) one one (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one))))))) (timesify_neg (* one (* one b)) zero one zero one (timesify_zero (* one (* one b)))))) (timesify_step (* one (minus one zero)) one (+ one (neg zero)) one b (timesify_end_plus one one (neg zero)))))).
if1_0 : {A:tm num} {B:tnum} {C:tnum} pf (== num A zero) -> pf (== num (if1 A B C) C) = [A:tm num] [B:tnum] [C:tnum] [p1:pf (== num A zero)] congr num A zero ([i1:tm num] == num (if1 i1 B C) C) p1 (__P B C).
ifgtz2 : {A:tm num} {B:tnum} {C:tnum} pf (<= A zero) -> pf (== num (ifgtz A B C) C) = [A:tm num] [B:tnum] [C:tnum] [p1:pf (<= A zero)] if1_0 (sign (neg A)) B C (sign0 (neg A) (trans_geq_eq (neg A) (neg zero) zero (leq_neg_cong A zero p1) neg_zero)).
ifeq_e1 : {A:tm num} {B:tm num} {C:tnum} {D:tnum} pf (== num A B) -> pf (== num (ifeq A B C D) C) = [A:tm num] [B:tm num] [C:tnum] [D:tnum] [p1:pf (== num A B)] cut (== num (ifgtz (- B A) D C) C) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) C) (ifgtz2 (- B A) D C (eq->geq zero (- B A) (symm num (- B A) zero (eq_shift B A (symm num A B p1))))) ([p2:pf (== num (ifgtz (- B A) D C) C)] cut (== num (ifgtz (- A B) D C) C) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) C) (ifgtz2 (- A B) D C (eq->geq zero (- A B) (symm num (- A B) zero (eq_shift A B p1)))) ([p3:pf (== num (ifgtz (minus A B) D C) C)] congr num (ifgtz (- B A) D C) C ([i1:tm num] == num (ifgtz (minus A B) D i1) C) p2 p3)).
ifeq_e2 : {A:tm num} {B:tm num} {C:tnum} {D:tnum} pf (!= num A B) -> pf (== num (ifeq A B C D) D) = [A:tm num] [B:tm num] [C:tnum] [D:tnum] [p1:pf (!= num A B)] or_e (> A B) (< A B) (== num (ifgtz (- A B) D (ifgtz (- B A) D C)) D) (neq->or_gt_lt A B p1) ([pA:pf (> A B)] ifgtz1 (- A B) D (ifgtz (- B A) D C) (gt_shift A B pA)) ([pB:pf (< A B)] cut (== num (ifgtz (- A B) D D) D) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) D) (ifgtz2 (- A B) D D (lt->leq (- A B) zero (lt_shift A B pB))) ([pB1:pf (== num (ifgtz (- A B) D D) D)] cut (== num (ifgtz (- B A) D C) D) (== num (ifgtz (minus A B) D (ifgtz (- B A) D C)) D) (ifgtz1 (- B A) D C (gt_shift B A pB)) ([pB2:pf (== num (ifgtz (- B A) D C) D)] congr num (ifgtz (- B A) D C) D ([i1:tm num] == num (ifgtz (minus A B) D i1) D) pB2 pB1))).
times_geq_geq : {A:tm num} {B:tm num} pf (>= A zero) -> pf (>= B zero) -> pf (>= (* A B) zero) = [A:tm num] [B:tm num] [x3:pf (>= A zero)] [x4:pf (>= B zero)] geq_times_closure A B x3 x4.
times_geq_leq : {A:tm num} {B:tm num} pf (>= A zero) -> pf (<= B zero) -> pf (<= (* A B) zero) = [A:tm num] [B:tm num] [p1:pf (>= A zero)] [p2:pf (<= B zero)] cut (>= (neg B) zero) (<= (* A B) zero) (trans_geq_eq (neg B) (neg zero) zero (leq_neg_cong B zero p2) neg_zero) ([p3:pf (>= (neg B) zero)] cut (>= (neg (* A B)) zero) (<= (* A B) zero) (trans_eq_geq (neg (* A B)) (* A (neg B)) zero (symm num (* A (neg B)) (neg (* A B)) (neg_times2 A B)) (times_geq_geq A (neg B) p1 p3)) ([p4:pf (>= (neg (* A B)) zero)] geq_neg_elim (* A B) zero (trans_geq_eq (neg (* A B)) zero (neg zero) p4 (symm num (neg zero) zero neg_zero)))).
times_leq_geq : {A:tm num} {B:tm num} pf (<= A zero) -> pf (>= B zero) -> pf (<= (* A B) zero) = [A:tm num] [B:tm num] [p1:pf (<= A zero)] [p2:pf (>= B zero)] trans_eq_leq (* A B) (* B A) zero (comm_times A B) (times_geq_leq B A p2 p1).
times_gt_gt : {A:tm num} {B:tm num} pf (> A zero) -> pf (> B zero) -> pf (> (* A B) zero) = [A:tm num] [B:tm num] [x3:pf (> A zero)] [x4:pf (> B zero)] gt_times_closure A B x3 x4.
plus_geq_geq : {A:tm num} {B:tm num} pf (>= A zero) -> pf (>= B zero) -> pf (>= (+ A B) zero) = [A:tm num] [B:tm num] [p1:pf (>= A zero)] [p2:pf (>= B zero)] trans_geq_eq (+ A B) (+ zero zero) zero (geq_plus_cong A zero B zero p1 p2) (plus_zero zero).
incr_gt : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (> B C) -> pf (> (+ B A) C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (> B C)] trans_eq_gt_eq (+ B A) (+ A B) (+ zero C) C (comm_plus B A) (gt_plus_cong A zero B C p1 p2) (zero_plus C).
incr_lt : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (< B C) -> pf (< B (+ C A)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (>= A zero)] [x4:pf (< B C)] incr_gt A C B x3 x4.
incr_geq : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (>= B C) -> pf (>= (+ B A) C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (>= B C)] trans_eq_geq_eq (+ B A) (+ A B) (+ zero C) C (comm_plus B A) (geq_plus_cong A zero B C p1 p2) (zero_plus C).
decr_lt : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (< B C) -> pf (< (- B A) C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (< B C)] lt_swap_a_b+c B C A (incr_lt A B C p1 p2).
succpred : {A:tnum} pf (== num (succ (pred A)) A) = [A:tnum] cancel_a-b+b A one.
predsucc : {A:tnum} pf (== num (pred (succ A)) A) = [A:tnum] cancel_a+b-b A one.
_succ_gt : {a:tnum} algebra_solver (> one zero imp > (succ a) a) = [a:tnum] solver_gt a (succ a) zero one (solver_geq a one zero (succ a) (solver_rearrange (+ (+ zero (* one a)) one) zero (+ (+ zero (* one a)) one) zero (+ zero (succ a)) (+ a one) (rearr_pos (+ zero (* one a)) (+ zero (* one a)) (+ (+ zero (* one a)) one) (+ (+ zero (* one a)) one) (rearr_end zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) one (+ zero (* one a)))) (listify_imp (+ zero (succ a)) (+ (+ zero (* one a)) one) zero (plusify_swap zero zero (succ a) (+ (+ zero (* one a)) one) zero (plusify_swap (+ zero zero) a one (+ (+ zero (* one a)) one) zero (plusify_step_one (+ (+ zero zero) a) (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))))) (listify_imp (+ a one) (+ (+ zero (* one a)) one) zero (plusify_swap zero a one (+ (+ zero (* one a)) one) zero (plusify_step_one (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))))).
succ_gt : {A:tnum} pf (> (succ A) A) = [A:tnum] imp_e (> one zero) (> (succ A) A) (_succ_gt A) (eval_gt 0 1 1>0).
succ_lt : {A:tm num} pf (< A (succ A)) = [A:tm num] succ_gt A.
_pred_lt : {a:tnum} algebra_solver (> one zero imp < (pred a) a) = [a:tnum] solver_gt (pred a) a zero one (solver_geq (pred a) one zero a (solver_rearrange (+ (+ zero (* one a)) one) (+ zero one) (+ zero (* one a)) zero (+ zero a) (+ (pred a) one) (rearr_one zero zero zero (+ zero one) (+ zero one) (+ (+ zero (* one a)) one) (+ zero (* one a)) rearr_finish (trim_get zero one zero) (trim_step1 (+ zero (* one a)) (+ zero (* one a)) zero zero one (trim_get zero (* one a) zero))) (listify_imp (+ zero a) (+ zero (* one a)) zero (plusify_swap zero zero a (+ zero (* one a)) zero (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))) (listify_imp (+ (pred a) one) (+ (+ zero (* one a)) one) (+ zero one) (plusify_swap zero (pred a) one (+ (+ zero (* one a)) one) (+ zero one) (plusify_step_one (+ zero (pred a)) (+ zero (* one a)) (+ zero one) (plusify_swap zero a (neg one) (+ zero (* one a)) (+ zero one) (plusify_step_neg_one (+ zero a) (+ zero (* one a)) zero (plusify_step zero zero zero a plusify_zero)))))))).
pred_lt : {A:tnum} pf (< (pred A) A) = [A:tnum] imp_e (> one zero) (< (pred A) A) (_pred_lt A) (eval_gt 0 1 1>0).
pred_gt : {A:tm num} pf (> A (pred A)) = [A:tm num] pred_lt A.
_succa_preda : {a:tnum} algebra_solver (== num (* (succ a) (pred a)) (- (* a a) one)) = [a:tnum] solver_rearrange (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (+ zero (* (* one a) a)) (+ zero one) (- (* a a) one) (* (succ a) (pred a)) (rearr_any1 (+ zero (* (* one a) a)) (+ zero (* (* one a) a)) (+ zero one) (+ zero one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (rearr_any1 zero (+ zero one) zero (+ zero one) (+ zero (* (* one a) a)) (+ zero (* (* one a) a)) (rearr_neg zero zero (+ zero one) (+ zero one) rearr_finish (trim_get zero one zero)) (trim_get zero (* (* one a) a) zero)) (trim_step2 (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (+ zero (* (* one a) a)) zero one (trim_get (+ zero (* (* one a) a)) (* one a) zero))) (listify_imp (- (* a a) one) (+ zero (* (* one a) a)) (+ zero one) (plusify_swap zero (* a a) (neg one) (+ zero (* (* one a) a)) (+ zero one) (plusify_step_neg_one (+ zero (* a a)) (+ zero (* (* one a) a)) zero (plusify_step_mult zero a a (* (* one a) a) one one (+ zero (* (* one a) a)) zero (catch_one zero zero zero (* a a) (* (* one a) a) plusify_zero) (timesify_step (* one a) (* one a) one one a (timesify_step one one one one a timesify_end_one)))))) (listify_imp (* (succ a) (pred a)) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (plusify_step_mult zero (succ a) (pred a) (* one (succ a)) (+ a (neg one)) one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_break zero (* one (succ a)) a (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (* (succ a) (pred a)) (plusify_neg_one' (+ zero (* (* one (succ a)) a)) (* one (succ a)) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (plusify_step_mult_neg (+ zero (* (* one (succ a)) a)) one (succ a) (* one one) (+ a one) (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_neg2 (+ zero (* (* one (succ a)) a)) (* one (neg (succ a))) (* one one) (+ a one) one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_break (+ zero (* (* one (succ a)) a)) (neg (* one one)) a one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (* one (neg (succ a))) (plusify_step_mult (+ (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a)) (neg (* one one)) one one one (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_neg2 (+ (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a)) (* (neg (* one one)) one) one one one (+ (+ zero (* (* one a) a)) (* one a)) (+ (+ zero (* one a)) one) (catch_neg_one (+ (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a)) (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (* (neg (* one one)) one) one (plusify_step_mult (+ zero (* (* one (succ a)) a)) (neg (* one one)) a (* one a) one (neg one) (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (catch_neg2 (+ zero (* (* one (succ a)) a)) (* (neg (* one one)) a) (* one a) one one (+ (+ zero (* (* one a) a)) (* one a)) (+ zero (* one a)) (catch_neg_one (+ zero (* (* one (succ a)) a)) (+ (+ zero (* (* one a) a)) (* one a)) zero (* (neg (* one one)) a) (* one a) (plusify_step_mult zero (* one (succ a)) a (* (* one one) a) (+ a one) one (+ (+ zero (* (* one a) a)) (* one a)) zero (catch_break zero (* (* one one) a) a one (+ (+ zero (* (* one a) a)) (* one a)) zero (* (* one (succ a)) a) (plusify_step_mult (+ zero (* (* (* one one) a) a)) (* (* one one) a) one (* one a) one one (+ (+ zero (* (* one a) a)) (* one a)) zero (catch_one (+ zero (* (* (* one one) a) a)) (+ zero (* (* one a) a)) zero (* (* (* one one) a) one) (* one a) (plusify_step_mult zero (* (* one one) a) a (* (* one a) a) one one (+ zero (* (* one a) a)) zero (catch_one zero zero zero (* (* (* one one) a) a) (* (* one a) a) plusify_zero) (timesify_step (* one (* (* one one) a)) (* one a) one one a (timesify_swap one (* one one) a (* one a) one one (timesify_step (* one (* one one)) one one one a (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_remove (* one (* (* one one) a)) (* one a) one one (timesify_swap one (* one one) a (* one a) one one (timesify_step (* one (* one one)) one one one a (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_step (* one (* one (succ a))) (* one one) (+ a one) one a (timesify_swap one one (succ a) (* one one) (+ a one) one (timesify_end_plus (* one one) a one)))))) (timesify_step (* one (neg (* one one))) one one (neg one) a (timesify_neg one (* one one) one one one (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_remove (* one (neg (* one one))) one one (neg one) (timesify_neg one (* one one) one one one (timesify_swap one one one one one one (timesify_remove (* one one) one one one (timesify_remove one one one one timesify_end_one)))))))) (timesify_neg (* one one) (succ a) (* one one) (+ a one) one (timesify_end_plus (* one one) a one))))) (timesify_end_plus (* one (succ a)) a (neg one)))).
succa_preda : {A:tnum} pf (== num (* (succ A) (pred A)) (- (* A A) one)) = [A:tnum] _succa_preda A.
pf_add_inv_cancel : {A:tm num} {B:tm num} {C:tm num} pf (== num (+ A B) C) -> pf (== num B (+ (neg A) C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (== num (+ A B) C)] trans num B (- C A) (+ (neg A) C) (eq_swap_a+b_c B A C (trans num (+ B A) (+ A B) C (comm_plus B A) p1)) (comm_plus C (neg A)).
__P : {a:tm num} {b:tm num} algebra_solver (> b zero imp > (+ a b) a) = [a:tm num] [b:tm num] solver_gt a (+ a b) zero b (solver_geq a b zero (+ a b) (solver_rearrange (+ (+ zero (* one a)) (* one b)) zero (+ (+ zero (* one a)) (* one b)) zero (+ zero (+ a b)) (+ a b) (rearr_pos (+ zero (* one a)) (+ zero (* one a)) (+ (+ zero (* one a)) (* one b)) (+ (+ zero (* one a)) (* one b)) (rearr_end zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one b) (+ zero (* one a)))) (listify_imp (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero zero (+ a b) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap (+ zero zero) a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ (+ zero zero) a) (+ zero (* one a)) zero b (plusify_step (+ zero zero) zero zero a (plusify_remove zero zero zero plusify_zero)))))) (listify_imp (+ a b) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))).
greater_plus_pos : {A:tm num} {B:tm num} pf (> A zero) -> pf (> (+ B A) B) = [A:tm num] [B:tm num] [x3:pf (> A zero)] imp_e (> A zero) (> (+ B A) B) (__P B A) x3.
__P : {a:tm num} {b:tm num} algebra_solver (>= b zero imp >= (+ a b) a) = [a:tm num] [b:tm num] solver_geq b a (+ a b) zero (solver_rearrange (+ (+ zero (* one b)) (* one a)) zero (+ (+ zero (* one a)) (* one b)) zero (+ (+ a b) zero) (+ b a) (rearr_pos (+ zero (* one a)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one a)) (+ (+ zero (* one a)) (* one b)) (rearr_end zero zero (+ zero (* one a)) (+ zero (* one a)) rearr_finish (trim_get zero (* one a) zero)) (trim_step1 (+ zero (* one b)) (+ (+ zero (* one a)) (* one b)) zero (+ zero (* one a)) (* one a) (trim_get zero (* one b) (+ zero (* one a))))) (listify_imp (+ (+ a b) zero) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero (+ a b) zero (+ (+ zero (* one a)) (* one b)) zero (plusify_remove (+ zero (+ a b)) (+ (+ zero (* one a)) (* one b)) zero (plusify_swap zero a b (+ (+ zero (* one a)) (* one b)) zero (plusify_step (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (+ b a) (+ (+ zero (* one b)) (* one a)) zero (plusify_swap zero b a (+ (+ zero (* one b)) (* one a)) zero (plusify_step (+ zero b) (+ zero (* one b)) zero a (plusify_step zero zero zero b plusify_zero))))).
greatereq_plus_pos : {A:tm num} {B:tm num} pf (>= A zero) -> pf (>= (+ B A) B) = [A:tm num] [B:tm num] [x3:pf (>= A zero)] imp_e (>= A zero) (>= (+ B A) B) (__P B A) x3.
__P : {a:tm num} {b:tm num} algebra_solver (== num (+ (* a b) b) (* (+ a one) b)) = [a:tm num] [b:tm num] solver_rearrange (+ (+ zero (* (* one a) b)) (* one b)) zero (+ (+ zero (* (* one b) a)) (* one b)) zero (* (+ a one) b) (+ (* a b) b) (rearr_pos (+ zero (* (* one a) b)) (+ zero (* (* one b) a)) (+ (+ zero (* (* one a) b)) (* one b)) (+ (+ zero (* (* one b) a)) (* one b)) (rearr_end zero zero (+ zero (* (* one a) b)) (+ zero (* (* one b) a)) rearr_finish (trim_getmult (* (* one a) b) (* (* one b) a) zero zero (fam_swap (* (* one a) b) (* one b) one a nomatch (fam_step (* one a) one (* one a) b nomatch (fam_one (* one a) (* one a) (fam_step one one one a nomatch (fam_finish match))))))) (trim_get (+ zero (* (* one a) b)) (* one b) (+ zero (* (* one b) a)))) (listify_imp (* (+ a one) b) (+ (+ zero (* (* one b) a)) (* one b)) zero (plusify_step_mult zero (+ a one) b (* one b) (+ a one) one (+ (+ zero (* (* one b) a)) (* one b)) zero (catch_break zero (* one b) a one (+ (+ zero (* (* one b) a)) (* one b)) zero (* (+ a one) b) (plusify_step_mult (+ zero (* (* one b) a)) (* one b) one (* one b) one one (+ (+ zero (* (* one b) a)) (* one b)) zero (catch_one (+ zero (* (* one b) a)) (+ zero (* (* one b) a)) zero (* (* one b) one) (* one b) (plusify_step_mult zero (* one b) a (* (* one b) a) one one (+ zero (* (* one b) a)) zero (catch_one zero zero zero (* (* one b) a) (* (* one b) a) plusify_zero) (timesify_step (* one (* one b)) (* one b) one one a (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one)))))) (timesify_remove (* one (* one b)) (* one b) one one (timesify_swap one one b (* one b) one one (timesify_step (* one one) one one one b (timesify_remove one one one one timesify_end_one)))))) (timesify_step (* one (+ a one)) one (+ a one) one b (timesify_end_plus one a one)))) (listify_imp (+ (* a b) b) (+ (+ zero (* (* one a) b)) (* one b)) zero (plusify_swap zero (* a b) b (+ (+ zero (* (* one a) b)) (* one b)) zero (plusify_step (+ zero (* a b)) (+ zero (* (* one a) b)) zero b (plusify_step_mult zero a b (* (* one a) b) one one (+ zero (* (* one a) b)) zero (catch_one zero zero zero (* a b) (* (* one a) b) plusify_zero) (timesify_step (* one a) (* one a) one one b (timesify_step one one one one a timesify_end_one)))))).
factor_right : {A:tm num} {B:tm num} pf (== num (+ (* A B) B) (* (+ A one) B)) = [A:tm num] [B:tm num] __P A B.
__P : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (== num (- a (- b c1)) (+ (- a b) c1)) = [a:tm num] [b:tm num] [c2:tm num] solver_rearrange (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (+ (- a b) c2) (- a (- b c2)) (rearr_any2 (+ zero (* one a)) (+ zero (* one b)) (+ zero (* one a)) (+ zero (* one b)) (+ (+ zero (* one a)) (* one c2)) (+ (+ zero (* one a)) (* one c2)) (rearr_any2 zero (+ zero (* one b)) zero (+ zero (* one b)) (+ zero (* one a)) (+ zero (* one a)) (rearr_neg zero zero (+ zero (* one b)) (+ zero (* one b)) rearr_finish (trim_get zero (* one b) zero)) (trim_get zero (* one a) zero)) (trim_get (+ zero (* one a)) (* one c2) (+ zero (* one a)))) (listify_imp (+ (- a b) c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_swap zero (- a b) c2 (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_step (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (- a (- b c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_swap zero a (neg (- b c2)) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_minus (+ zero a) b (neg c2) (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_neg (- (+ zero a) b) c2 (+ (+ zero (* one a)) (* one c2)) (+ zero (* one b)) (plusify_step (- (+ zero a) b) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero))))))).
minus_assoc : {A:tm num} {B:tm num} {C:tm num} pf (== num (- A (- B C)) (+ (- A B) C)) = [A:tm num] [B:tm num] [C:tm num] __P A B C.
__P : {a:tm num} {b:tm num} {c1:tm num} algebra_solver (== num (- (- a b) c1) (- a (+ b c1))) = [a:tm num] [b:tm num] [c2:tm num] solver_rearrange (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (- a (+ b c2)) (- (- a b) c2) (rearr_any2 zero (+ (+ zero (* one b)) (* one c2)) zero (+ (+ zero (* one b)) (* one c2)) (+ zero (* one a)) (+ zero (* one a)) (rearr_neg (+ zero (* one b)) (+ zero (* one b)) (+ (+ zero (* one b)) (* one c2)) (+ (+ zero (* one b)) (* one c2)) (rearr_end zero zero (+ zero (* one b)) (+ zero (* one b)) rearr_finish (trim_get zero (* one b) zero)) (trim_get (+ zero (* one b)) (* one c2) (+ zero (* one b)))) (trim_get zero (* one a) zero)) (listify_imp (- a (+ b c2)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_swap zero a (neg (+ b c2)) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_minus (+ zero a) b c2 (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_step_neg (- (+ zero a) b) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))) (listify_imp (- (- a b) c2) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_swap zero (- a b) (neg c2) (+ zero (* one a)) (+ (+ zero (* one b)) (* one c2)) (plusify_step_neg (+ zero (- a b)) (+ zero (* one a)) (+ zero (* one b)) c2 (plusify_swap zero a (neg b) (+ zero (* one a)) (+ zero (* one b)) (plusify_step_neg (+ zero a) (+ zero (* one a)) zero b (plusify_step zero zero zero a plusify_zero)))))).
minus_assoc3 : {A:tm num} {B:tm num} {C:tm num} pf (== num (- (- A B) C) (- A (+ B C))) = [A:tm num] [B:tm num] [C:tm num] __P A B C.
plus_eq : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num X1 X2) -> pf (== num (+ X3 X1) (+ X3 X2)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num X1 X2)] plus_cong2 X1 X2 X3 x3.
eq_plus : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num X1 X2) -> pf (== num (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num X1 X2)] plus_cong1 X1 X2 X3 x3.
plus_eq1 : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num (+ X1 X2) (+ X3 X2)) -> pf (== num X1 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num (+ X1 X2) (+ X3 X2))] plus_elim2 X1 X2 X3 x3.
plus_eq2 : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num (+ X1 X2) (+ X1 X3)) -> pf (== num X2 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num (+ X1 X2) (+ X1 X3))] plus_elim1 X1 X2 X3 x3.
minus_assoc2 : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num (+ X1 (+ X2 X3)) (+ (+ X1 X2) X3)) = [X1:tm num] [X2:tm num] [X3:tm num] assoc_plus X1 X2 X3.
pf_assoc_add1 : {X1:tm num} {X2:tm num} {X3:tm num} {X4:tm num} pf (== num (+ (+ X1 X2) X3) X4) -> pf (== num (+ X1 (+ X2 X3)) X4) = [X1:tm num] [X2:tm num] [X3:tm num] [X4:tm num] [x3:pf (== num (+ (+ X1 X2) X3) X4)] trans num (+ X1 (+ X2 X3)) (+ (+ X1 X2) X3) X4 (assoc_plus X1 X2 X3) x3.
inv_add1 : {X1:tm num} pf (== num zero (+ (neg X1) X1)) = [X1:tm num] symm num (+ (neg X1) X1) zero (inv_plus X1).
inv_add2 : {X1:tm num} pf (== num zero (- X1 X1)) = [X1:tm num] symm num (- X1 X1) zero (plus_inv X1).
neg_neg_a_eq_a : {X1:tm num} pf (== num (neg (neg X1)) X1) = [X1:tm num] neg_neg_e X1.
gt_plus_cong_e : {X1:tm num} {X2:tm num} {X3:tm num} pf (> (+ X1 X2) (+ X3 X2)) -> pf (> X1 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> (+ X1 X2) (+ X3 X2))] gt_plus_elim2 X1 X2 X3 x3.
neg_prop : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (<= (neg X1) (neg X2)) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] geq_neg_cong X1 X2 x3.
neg_prop' : {X1:tm num} {X2:tm num} pf (> X1 X2) -> pf (< (neg X1) (neg X2)) = [X1:tm num] [X2:tm num] [x3:pf (> X1 X2)] gt_neg_cong X1 X2 x3.
pf_greater_and_greatereq : {X1:tm num} {X2:tm num} {X3:tm form} pf (>= X1 X2) -> pf (> X2 X1) -> pf X3 = [X1:tm num] [X2:tm num] [X3:tm form] [x3:pf (>= X1 X2)] [x4:pf (> X2 X1)] geq->gt->false X1 X2 X3 x3 x4.
minus_cong : {X1:tm num} {X2:tm num} {A:tm num} {B:tm num} pf (== num X1 X2) -> pf (== num A B) -> pf (== num (+ X1 (neg A)) (+ X2 (neg B))) = [X1:tm num] [X2:tm num] [A:tm num] [B:tm num] [p1:pf (== num X1 X2)] [p2:pf (== num A B)] plus_cong X1 X2 (neg A) (neg B) p1 (neg_cong A B p2).
pf_neg_zero_zero : pf (== num (neg zero) zero) = neg_zero.
minus_zero : {X1:tm num} pf (== num (+ X1 (neg zero)) X1) = [X1:tm num] trans num (+ X1 (neg zero)) (+ X1 zero) X1 (plus_cong2 (neg zero) zero X1 neg_zero) (plus_zero X1).
pf_neg_sum_sum_negs : {X1:tm num} {X2:tm num} pf (== num (neg (+ X1 X2)) (+ (neg X1) (neg X2))) = [X1:tm num] [X2:tm num] symm num (+ (neg X1) (neg X2)) (neg (+ X1 X2)) (neg_plus X1 X2).
times_succ_distrib : {X1:tm num} {X2:tm num} pf (== num (* X1 (+ X2 one)) (+ (* X1 X2) X1)) = [X1:tm num] [X2:tm num] trans num (* X1 (+ X2 one)) (+ (* X1 X2) (* X1 one)) (+ (* X1 X2) X1) (distrib X1 X2 one) (plus_cong2 (* X1 one) X1 (* X1 X2) (times_one X1)).
gt_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (== num C D) -> pf (> A C) -> pf (> B D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (== num C D)] [p3:pf (> A C)] trans_eq_gt B A D (symm num A B p1) (trans_gt_eq A C D p3 p2).
lt_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (== num C D) -> pf (< A C) -> pf (< B D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (== num C D)] [p3:pf (< A C)] trans_eq_lt B A D (symm num A B p1) (trans_lt_eq A C D p3 p2).
neg_property1 : {X1:tm num} pf (>= X1 zero) -> pf (<= (neg X1) zero) = [X1:tm num] [p1:pf (>= X1 zero)] trans_leq_eq (neg X1) (neg zero) zero (geq_neg_cong X1 zero p1) neg_zero.
neg_property1b : {X1:tm num} pf (> X1 zero) -> pf (< (neg X1) zero) = [X1:tm num] [p1:pf (> X1 zero)] trans_lt_eq (neg X1) (neg zero) zero (gt_neg_cong X1 zero p1) neg_zero.
neg_property2b : {X1:tm num} pf (> zero X1) -> pf (> (neg X1) zero) = [X1:tm num] [p1:pf (> zero X1)] trans_gt_eq (neg X1) (neg zero) zero (lt_neg_cong zero X1 p1) neg_zero.
leq_times_geq_rule : {A:tm num} {B:tm num} pf (<= A zero) -> pf (>= B zero) -> pf (<= (* A B) zero) = [A:tm num] [B:tm num] [x3:pf (<= A zero)] [x4:pf (>= B zero)] times_leq_geq A B x3 x4.
pf_zero_plus_one_geq_one : {X1:tm num} pf (>= (+ zero X1) X1) = [X1:tm num] eq->geq (+ zero X1) X1 (zero_plus X1).
not_geq_zero : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (>= (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] geq_shift X1 X2 x3.
gt_eq_lt : {X1:tm num} {X2:tm num} pf (> X1 X2 or == num X1 X2 or < X1 X2) = [X1:tm num] [X2:tm num] or_gt_eq_lt X1 X2.
gt_not_lt_eq : {X1:tm num} {X2:tm num} pf (> X1 X2) -> pf (not (<= X1 X2)) = [X1:tm num] [X2:tm num] [x3:pf (> X1 X2)] gt->not_leq X1 X2 x3.
succ_greater : {X1:tm num} pf (> (succ X1) X1) = [X1:tm num] succ_gt X1.
greater1_0 : pf (gt (const 1) (const 0)) = eval_gt 0 1 1>0.
times_cong : {X1:tm num} {X2:tm num} {X3:tm num} {X4:tm num} pf (== num X1 X2) -> pf (== num X3 X4) -> pf (== num (* X1 X3) (* X2 X4)) = [X1:tm num] [X2:tm num] [X3:tm num] [X4:tm num] [x3:pf (== num X1 X2)] [x4:pf (== num X3 X4)] times_cong X1 X2 X3 X4 x3 x4.
not_greatereq_lt : {X1:tm num} {X2:tm num} pf (not (>= X1 X2)) -> pf (< X1 X2) = [X1:tm num] [X2:tm num] [x3:pf (not (>= X1 X2))] not_geq->lt X1 X2 x3.
greatereq_not_lt : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (not (< X1 X2)) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] geq->not_lt X1 X2 x3.
assoc_symm_add : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num (+ (+ X1 X2) X3) (+ (+ X1 X3) X2)) = [X1:tm num] [X2:tm num] [X3:tm num] trans3 num (+ (+ X1 X2) X3) (+ X1 (+ X2 X3)) (+ X1 (+ X3 X2)) (+ (+ X1 X3) X2) (plus_assoc X1 X2 X3) (plus_cong2 (+ X2 X3) (+ X3 X2) X1 (comm_plus X2 X3)) (assoc_plus X1 X3 X2).
greater_or_eq : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (== num X1 X2 or > X1 X2) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] geq->or_eq_gt X1 X2 x3.
leq_or_eq : {X1:tm num} {X2:tm num} pf (<= X1 X2) -> pf (== num X1 X2 or < X1 X2) = [X1:tm num] [X2:tm num] [p1:pf (<= X1 X2)] leq->or_eq_lt X1 X2 p1.
greatereq_cong : {A:tm num} {B:tm num} {C:tm num} {D:tm num} pf (== num A B) -> pf (== num C D) -> pf (>= A C) -> pf (>= B D) = [A:tm num] [B:tm num] [C:tm num] [D:tm num] [p1:pf (== num A B)] [p2:pf (== num C D)] [p3:pf (>= A C)] trans_eq_geq B A D (symm num A B p1) (trans_geq_eq A C D p3 p2).
greatereq_plus_cong : {X1:tm num} {X2:tm num} {X3:tm num} pf (>= X1 X2) -> pf (>= (+ X3 X1) (+ X3 X2)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (>= X1 X2)] geq_plus_cong2 X1 X2 X3 x3.
greatereq_plus_cong2 : {X1:tm num} {X2:tm num} {X3:tm num} pf (>= X1 X2) -> pf (>= (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (>= X1 X2)] geq_plus_cong1 X1 X2 X3 x3.
ord_add_closure_e : {X1:tm num} {X2:tm num} {X3:tm num} pf (>= (+ X1 X2) (+ X3 X2)) -> pf (>= X1 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (>= (+ X1 X2) (+ X3 X2))] geq_plus_elim2 X1 X2 X3 x3.
num_eq_excluded_middle : {X1:tm num} {X2:tm num} pf (== num X1 X2 or != num X1 X2) = [X1:tm num] [X2:tm num] or_eq_neq X1 X2.
not_eq_minus : {X1:tm num} {X2:tm num} pf (!= num X1 X2) -> pf (!= num (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (!= num X1 X2)] neq_shift X1 X2 x3.
not_eq->plus_not_eq : {X1:tm num} {X2:tm num} {X3:tm num} pf (!= num X1 X2) -> pf (!= num (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (!= num X1 X2)] neq_plus_cong1 X1 X2 X3 x3.
greater_add_closure : {X1:tm num} {X2:tm num} {X3:tm num} pf (> X1 X2) -> pf (> (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> X1 X2)] gt_plus_cong1 X1 X2 X3 x3.
lt_add_closure : {X1:tm num} {X2:tm num} {X3:tm num} pf (> X1 X2) -> pf (> (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> X1 X2)] lt_plus_cong1 X1 X2 X3 x3.
gtzero1 : {X1:tm num} {X2:tm num} pf (> X1 X2) -> pf (> (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (> X1 X2)] gt_shift X1 X2 x3.
gtzero2 : {X1:tm num} {X2:tm num} pf (< X1 X2) -> pf (< (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (< X1 X2)] lt_shift X1 X2 x3.
geqzero1 : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (>= (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] geq_shift X1 X2 x3.
geqzero1' : {X1:tm num} {X2:tm num} pf (>= (- X1 X2) zero) -> pf (>= X1 X2) = [X1:tm num] [X2:tm num] [x3:pf (>= (- X1 X2) zero)] geq_unshift X1 X2 x3.
geqzero2 : {X1:tm num} {X2:tm num} pf (<= X1 X2) -> pf (<= (- X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (<= X1 X2)] leq_shift X1 X2 x3.
geq_times_pos : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (> C zero) -> pf (>= (* A C) (* B C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] [p2:pf (> C zero)] geq_times_cong1 C A B (gt->geq C zero p2) p1.
geq_times_pos0 : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (>= C zero) -> pf (>= (* A C) (* B C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] [p2:pf (>= C zero)] geq_times_cong1 C A B p2 p1.
geq_times_pos' : {A:tm num} {B:tm num} {C:tm num} pf (>= A B) -> pf (> C zero) -> pf (>= (* C A) (* C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A B)] [p2:pf (> C zero)] geq_times_cong2 C A B (gt->geq C zero p2) p1.
leq_times_pos' : {A:tm num} {B:tm num} {C:tm num} pf (<= A B) -> pf (> C zero) -> pf (<= (* C A) (* C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (<= A B)] [p2:pf (> C zero)] leq_times_cong2 C A B (gt->geq C zero p2) p1.
geq_geq_plus : {X1:tm num} {X2:tm num} {X3:tm num} {X4:tm num} pf (>= X1 X2) -> pf (>= X3 X4) -> pf (>= (+ X1 X3) (+ X2 X4)) = [X1:tm num] [X2:tm num] [X3:tm num] [X4:tm num] [x3:pf (>= X1 X2)] [x4:pf (>= X3 X4)] geq_plus_cong X1 X2 X3 X4 x3 x4.
geq_gt_plus : {X1:tm num} {X2:tm num} {X3:tm num} {X4:tm num} pf (>= X1 X2) -> pf (> X3 X4) -> pf (> (+ X1 X3) (+ X2 X4)) = [X1:tm num] [X2:tm num] [X3:tm num] [X4:tm num] [x3:pf (>= X1 X2)] [x4:pf (> X3 X4)] gt_plus_cong X1 X2 X3 X4 x3 x4.
minus1_less : {X1:tm num} pf (< (pred X1) X1) = [X1:tm num] pred_lt X1.
cancel : {X1:tm num} {X2:tm num} {X3:tm num} pf (!= num X1 zero) -> pf (== num (* X1 X2) (* X1 X3)) -> pf (== num X2 X3) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (!= num X1 zero)] [x4:pf (== num (* X1 X2) (* X1 X3))] times_elim1 X1 X2 X3 x3 x4.
neq_mult_closure : {X1:tm num} {X2:tm num} pf (!= num X1 zero) -> pf (!= num X2 zero) -> pf (!= num (* X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (!= num X1 zero)] [x4:pf (!= num X2 zero)] neq_times_closure X1 X2 x3 x4.
lt_times_pos' : {A:tm num} {B:tm num} {C:tm num} pf (< A B) -> pf (> C zero) -> pf (< (* C A) (* C B)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (< A B)] [p2:pf (> C zero)] lt_times_cong2 C B A p2 p1.
gt_cancel : {A:tm num} {B:tm num} {C:tm num} pf (> A zero) -> pf (> (* A B) (* A C)) -> pf (> B C) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (> A zero)] [x3:pf (> (* A B) (* A C))] gt_times_elim1 A B C (gt->geq A zero p1) x3.
greater_plus1_i : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (> (succ X1) X2) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 X2)] trans_gt_geq (succ X1) X1 X2 (succ_gt X1) x3.
lt_pred_lt : {X1:tm num} {X2:tm num} {X3:tm num} pf (< (- X1 X2) X3) -> pf (< X1 (+ X3 X2)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (< (- X1 X2) X3)] lt_swap_a-b_c X1 X2 X3 x3.
less_inc : {X1:tm num} {X2:tm num} {C:tnum} pf (< X1 X2) -> pf (geq C zero) -> pf (< X1 (+ X2 C)) = [X1:tm num] [X2:tm num] [C:tnum] [p1:pf (< X1 X2)] [p2:pf (geq C zero)] incr_lt C X1 X2 p2 p1.
neq->succ_neq : {X1:tm num} {X2:tm num} {X3:tm num} pf (!= num X1 X2) -> pf (!= num (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (!= num X1 X2)] neq_plus_cong1 X1 X2 X3 x3.
eq->eq_succ : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num X1 X2) -> pf (== num (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num X1 X2)] plus_cong1 X1 X2 X3 x3.
eq->eq_pred : {X1:tm num} {X2:tm num} {X3:tm num} pf (== num X1 X2) -> pf (== num (+ X1 X3) (+ X2 X3)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (== num X1 X2)] plus_cong1 X1 X2 X3 x3.
eq_m_succn->eq_predm_n : {X1:tm num} {X2:tm num} {X3:tm num} {X4:tm num} {X5:tm num} {X6:tm num} pf ((== num X1 (+ X2 X3) imp == num (- X1 X3) X2) and (== num (- X4 X5) X6 imp == num X4 (+ X6 X5))) = [X1:tm num] [X2:tm num] [X3:tm num] [X4:tm num] [X5:tm num] [X6:tm num] and_i (== num X1 (+ X2 X3) imp == num (- X1 X3) X2) (== num (- X4 X5) X6 imp == num X4 (+ X6 X5)) (imp_i (== num X1 (+ X2 X3)) (== num (- X1 X3) X2) ([x3:pf (== num X1 (+ X2 X3))] eq_swap_a_b+c X1 X2 X3 x3)) (imp_i (== num (- X4 X5) X6) (== num X4 (+ X6 X5)) ([x3:pf (== num (- X4 X5) X6)] eq_swap_a-b_c X4 X5 X6 x3)).
less_plus1_i : {X1:tm num} {X2:tm num} pf (<= X1 X2) -> pf (< X1 (succ X2)) = [X1:tm num] [X2:tm num] [p1:pf (<= X1 X2)] trans_leq_lt X1 X2 (succ X2) p1 (succ_lt X2).
greatereq_plus1_e : {X1:tm num} {X2:tm num} pf (>= X1 (succ X2)) -> pf (> X1 X2) = [X1:tm num] [X2:tm num] [p1:pf (>= X1 (succ X2))] trans_geq_gt X1 (succ X2) X2 p1 (succ_gt X2).
greater_minus1_i : {X1:tm num} {X2:tm num} pf (>= X1 X2) -> pf (> X1 (pred X2)) = [X1:tm num] [X2:tm num] [p1:pf (>= X1 X2)] trans_geq_gt X1 X2 (pred X2) p1 (pred_gt X2).
lesseq_minus1_e : {X1:tm num} {X2:tm num} pf (<= X1 (pred X2)) -> pf (< X1 X2) = [X1:tm num] [X2:tm num] [p1:pf (<= X1 (pred X2))] trans_leq_lt X1 (pred X2) X2 p1 (pred_lt X2).
not_refl_gt : {X1:tm num} {X2:tm form} pf (> X1 X1 imp X2) = [X1:tm num] [X2:tm form] imp_i (> X1 X1) X2 ([p1:pf (> X1 X1)] gt->eq->false X1 X1 X2 p1 (refl num X1)).
greater_inc : {X1:tm num} {X2:tm num} {C:tm num} pf (> X1 X2) -> pf (> C zero) -> pf (> (+ X1 C) X2) = [X1:tm num] [X2:tm num] [C:tm num] [p1:pf (> X1 X2)] [p2:pf (> C zero)] incr_gt C X1 X2 (gt->geq C zero p2) p1.
less_dec : {A:tm num} {B:tm num} {C:tm num} pf (< A B) -> pf (>= C zero) -> pf (< (- A C) B) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (< A B)] [p2:pf (>= C zero)] decr_lt C A B p2 p1.
lt_succ_gt : {X1:tm num} {X2:tm num} {X3:tm num} pf (< X1 (+ X2 X3)) -> pf (< (- X1 X3) X2) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (< X1 (+ X2 X3))] lt_swap_a_b+c X1 X2 X3 x3.
leq_succ_leq_pred : {X1:tm num} {X2:tm num} {X3:tm num} pf (<= X1 (+ X2 X3)) -> pf (<= (- X1 X3) X2) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (<= X1 (+ X2 X3))] leq_swap_a_b+c X1 X2 X3 x3.
not_geq_pred_gt : {X1:tm num} {X2:tm num} pf (> zero (- X1 X2)) -> pf (> X2 X1) = [X1:tm num] [X2:tm num] [p1:pf (> zero (- X1 X2))] trans_eq_gt X2 (+ zero X2) X1 (symm num (+ zero X2) X2 (zero_plus X2)) (gt_swap_a_b-c zero X1 X2 p1).
pf_minus_cancel' : {A:tm num} {B:tm num} {C:tm num} pf (== num (- A B) C) -> pf (== num A (+ C B)) = [A:tm num] [B:tm num] [C:tm num] [x3:pf (== num (- A B) C)] eq_swap_a-b_c A B C x3.
geq_zero_plus : {X1:tm num} {X2:tm num} pf (>= X1 zero) -> pf (>= X2 zero) -> pf (>= (+ X1 X2) zero) = [X1:tm num] [X2:tm num] [x3:pf (>= X1 zero)] [x4:pf (>= X2 zero)] plus_geq_geq X1 X2 x3 x4.
greater_inc1 : {X1:tm num} {X2:tm num} {X3:tm num} pf (> (+ X1 X2) X3) -> pf (> X1 (- X3 X2)) = [X1:tm num] [X2:tm num] [X3:tm num] [x3:pf (> (+ X1 X2) X3)] gt_swap_a+b_c X1 X2 X3 x3.
notsymm : {X1:tp} {X2:tm X1} {X3:tm X1} pf (!= X1 X2 X3) -> pf (not (== X1 X3 X2)) = [X1:tp] [X2:tm X1] [X3:tm X1] [x3:pf (!= X1 X2 X3)] neqlem (== X1 X3 X2) X1 X2 X3 ([x4:pf (== X1 X3 X2)] symm X1 X3 X2 x4) x3.
neq_refl : {X1:tp} {A:tm X1} {X:tform} pf (!= X1 A A) -> pf X = [X1:tp] [A:tm X1] [X:tform] [p1:pf (!= X1 A A)] not_e' (eq X1 A A) X p1 (refl X1 A).
neg_exists : {N:tnum} pf (isInt N) -> pf (isInt (neg N)) = [N:tnum] [x3:pf (isInt N)] _neg_exists N x3.
closure_add : {N:tnum} {M:tnum} pf (isInt N) -> pf (isInt M) -> pf (isInt (plus N M)) = [N:tnum] [M:tnum] [x3:pf (isInt N)] [x4:pf (isInt M)] _closure_add N M x3 x4.
assoc_add : {A:tnum} {B:tnum} {C:tnum} pf (eqn (plus (plus A B) C) (plus A (plus B C))) = [A:tnum] [B:tnum] [C:tnum] _assoc_add A B C.
comm_add : {A:tnum} {B:tnum} pf (eqn (plus A B) (plus B A)) = [A:tnum] [B:tnum] _comm_add A B.
inv_add : {A:tnum} pf (eqn (plus A (neg A)) zero) = [A:tnum] _inv_add A.
closure_mult : {N:tnum} {M:tnum} pf (isInt N) -> pf (isInt M) -> pf (isInt (times N M)) = [N:tnum] [M:tnum] [x3:pf (isInt N)] [x4:pf (isInt M)] _closure_mult N M x3 x4.
assoc_mult : {A:tnum} {B:tnum} {C:tnum} pf (eqn (times (times A B) C) (times A (times B C))) = [A:tnum] [B:tnum] [C:tnum] _assoc_mult A B C.
zero_mult : {A:tnum} pf (eqn (times A one) A) = [A:tnum] _zero_mult A.
comm_mult : {A:tnum} {B:tnum} pf (eqn (times A B) (times B A)) = [A:tnum] [B:tnum] _comm_mult A B.
ord_reflexivity : {A:tnum} pf (geq A A) = [A:tnum] _ord_reflexivity A.
ord_add_closure : {A:tnum} {C:tnum} {B:tnum} pf (geq A C) -> pf (geq (plus A B) (plus C B)) = [A:tnum] [C:tnum] [B:tnum] [x3:pf (geq A C)] _ord_add_closure A B C x3.
ord_mult_closure : {A:tnum} {B:tnum} pf (geq A zero) -> pf (geq B zero) -> pf (geq (times A B) zero) = [A:tnum] [B:tnum] [x3:pf (geq A zero)] [x4:pf (geq B zero)] _ord_mult_closure A B x3 x4.
ord_antisymmetry : {A:tnum} {B:tnum} pf (geq A B) -> pf (geq B A) -> pf (eqn A B) = [A:tnum] [B:tnum] [x3:pf (geq A B)] [x4:pf (geq B A)] _ord_antisymmetry A B x3 x4.
ord_transitivity : {A:tnum} {B:tnum} {C:tnum} pf (geq A B) -> pf (geq B C) -> pf (geq A C) = [A:tnum] [B:tnum] [C:tnum] [x3:pf (geq A B)] [x4:pf (geq B C)] _ord_transitivity A B C x3 x4.
ord_excluded_middle : {A:tnum} {B:tnum} pf (geq A B or not (geq A B)) = [A:tnum] [B:tnum] _ord_excluded_middle A B.
times_geq : {A:tm num} {B:tm num} {C:tm num} pf (>= A zero) -> pf (>= B C) -> pf (>= (* A B) (* A C)) = [A:tm num] [B:tm num] [C:tm num] [p1:pf (>= A zero)] [p2:pf (>= B C)] geq_unshift (* A B) (* A C) (trans_eq_geq (- (* A B) (* A C)) (* A (- B C)) zero (symm num (* A (- B C)) (- (* A B) (* A C)) (distrib_minus A B C)) (times_geq_geq A (- B C) p1 (geq_shift B C p2))).
induction' : {N:tnum} {f:tm num -> tm form} pf (f zero) -> ({n:tm num} pf (isNat n) -> pf (f n) -> pf (f (succ n))) -> pf (isNat N) -> pf (f N) = [N:tnum] [f:tm num -> tm form] [p1:pf (f zero)] [q1:{n:tm num} pf (isNat n) -> pf (f n) -> pf (f (succ n))] [x3:pf (isNat N)] forall_imp_e num ([a:tm num] isNat a) ([a:tm num] f a) (induction ([x4:tnum] f x4) p1 ([n:tnum] [x4:pf (isNat n)] [x5:pf (f n)] q1 n x4 x5)) N x3.
isInt_congr : {A:tm num} {B:tm num} pf (== num A B) -> pf (isInt B) -> pf (isInt A) = [A:tm num] [B:tm num] [x3:pf (== num A B)] [x4:pf (isInt B)] congr num A B ([i1:tm num] isInt i1) x3 x4.
isInt_plus : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (isInt (+ A B)) = [A:tnum] [B:tnum] [x3:pf (isInt A)] [x4:pf (isInt B)] _closure_add A B x3 x4.
isInt_neg : {A:tnum} pf (isInt A) -> pf (isInt (neg A)) = [A:tnum] [x3:pf (isInt A)] _neg_exists A x3.
isInt_minus : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (isInt (- A B)) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] isInt_plus A (neg B) p1 (isInt_neg B p2).
isInt_times : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (isInt (* A B)) = [A:tnum] [B:tnum] [x3:pf (isInt A)] [x4:pf (isInt B)] _closure_mult A B x3 x4.
isInt_plus_e : {A:tm num} {B:tm num} pf (isInt (+ A B)) -> pf (isInt B) -> pf (isInt A) = [A:tm num] [B:tm num] [p1:pf (isInt (+ A B))] [p2:pf (isInt B)] isInt_congr A (- (+ A B) B) (symm num (- (+ A B) B) A (cancel_a+b-b A B)) (isInt_minus (+ A B) B p1 p2).
p_zero : pf (isInt zero) = congr num zero (- one one) ([z1:tm num] isInt z1) (symm num (- one one) zero (plus_inv one)) (isInt_plus one (neg one) p_one (isInt_neg one p_one)).
isInt_succ_i : {A:tnum} pf (isInt A) -> pf (isInt (succ A)) = [A:tnum] [p1:pf (isInt A)] isInt_plus A one p1 p_one.
isInt_succ_e : {A:tnum} pf (isInt (succ A)) -> pf (isInt A) = [A:tnum] [p1:pf (isInt (succ A))] isInt_plus_e A one p1 p_one.
isInt_pred_i : {A:tnum} pf (isInt A) -> pf (isInt (pred A)) = [A:tnum] [p1:pf (isInt A)] isInt_minus A one p1 p_one.
isInt_pred_e : {A:tnum} pf (isInt (pred A)) -> pf (isInt A) = [A:tnum] [p1:pf (isInt (pred A))] isInt_plus_e A (neg one) p1 (isInt_neg one p_one).
pred_n : tm num -> tm form = [n:tm num] geq n zero and not (eq num n zero) imp geq n one.
pred_fun : {N:tnum} pf (isNat N) -> pf (pred_n N) -> pf (pred_n (plus N one)) = [N:tm num] [Q1:pf (isNat N)] [Q2:pf (pred_n N)] cut (pred_n N) (geq (plus N one) zero and not (eq num (plus N one) zero) imp geq (plus N one) one) Q2 ([x3:pf (pred_n N)] imp_i (geq (plus N one) zero and not (eq num (plus N one) zero)) (geq (plus N one) one) ([x4:pf (geq (plus N one) zero and not (eq num (plus N one) zero))] cut (>= (+ N one) (+ zero one)) (geq (plus N one) one) (geq_plus_cong1 N zero one (and_e2 (isInt N) (geq N zero) Q1)) ([Q3:pf (geq (plus N one) (plus zero one))] congr num one (+ zero one) ([Z:tm num] geq (plus N one) Z) (symm num (+ zero one) one (trans num (+ zero one) (+ one zero) one (comm_plus zero one) (plus_zero one))) Q3))).
red_int_prop : {X:tnum} pf (isNat X) -> pf (not (eq num X zero)) -> pf (geq X one) = [X:tnum] [Q1:pf (isNat X)] [Q2:pf (not (eq num X zero))] cut (geq zero zero and (== num zero zero imp false) imp geq zero one) (geq X one) (imp_i (geq zero zero and (== num zero zero imp false)) (geq zero one) ([Q:pf (geq zero zero and (== num zero zero imp false))] false_e (geq zero one) (imp_e (== num zero zero) false (and_e2 (geq zero zero) (== num zero zero imp false) Q) (refl num zero)))) ([P0:pf (pred_n zero)] imp_e (geq X zero and not (eq num X zero)) (geq X one) (imp_e (isNat X) (pred_n X) (forall_e num ([x3:tm num] isNat x3 imp pred_n x3) (induction ([x3:tnum] pred_n x3) P0 ([n:tnum] [x3:pf (isNat n)] [x4:pf (pred_n n)] pred_fun n x3 x4)) X) Q1) (and_i (geq X zero) (not (eq num X zero)) (and_e2 (isInt X) (geq X zero) Q1) Q2)).
int_gt_succ_i : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (> A B) -> pf (>= A (succ B)) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [p3:pf (> A B)] cut (isInt (- A B)) (>= A (+ B one)) (isInt_minus A B p1 p2) ([p4:pf (isInt (- A B))] cut (>= (- A B) zero) (>= A (+ B one)) (gt->geq (- A B) zero (gt_shift A B p3)) ([p5:pf (>= (- A B) zero)] cut (geq (- A B) one) (>= A (+ B one)) (red_int_prop (- A B) (and_i (isInt (- A B)) (>= (- A B) zero) p4 p5) (gt->neq (- A B) zero (gt_shift A B p3))) ([p6:pf (>= (- A B) one)] trans_geq_eq A (+ one B) (+ B one) (geq_swap_a-b_c A B one p6) (comm_plus one B)))).
int_lt_succ_i : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (< A B) -> pf (<= (succ A) B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [x3:pf (> B A)] int_gt_succ_i B A p2 p1 x3.
int_gt_pred_i : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (> A B) -> pf (>= (pred A) B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [p3:pf (> A B)] geq_swap_a_b+c A B one (int_gt_succ_i A B p1 p2 p3).
int_lt_pred_i : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (< A B) -> pf (<= A (pred B)) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [x3:pf (> B A)] int_gt_pred_i B A p2 p1 x3.
int_gt_succ_e : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (> (succ A) B) -> pf (>= A B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [p3:pf (> (succ A) B)] trans_eq_geq A (- (+ A one) one) B (symm num (- (+ A one) one) A (cancel_a+b-b A one)) (int_gt_pred_i (succ A) B (isInt_succ_i A p1) p2 p3).
int_lt_succ_e : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (< A (succ B)) -> pf (<= A B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [x3:pf (> (succ B) A)] int_gt_succ_e B A p2 p1 x3.
int_gt_pred_e : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (> A (pred B)) -> pf (>= A B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [p3:pf (> A (pred B))] trans_geq_eq A (succ (pred B)) B (int_gt_succ_i A (pred B) p1 (isInt_pred_i B p2) p3) (cancel_a-b+b B one).
int_lt_pred_e : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (< (pred A) B) -> pf (<= A B) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [x3:pf (> B (pred A))] int_gt_pred_e B A p2 p1 x3.
n_zero : pf (isNat zero) = and_i (isInt zero) (>= zero zero) p_zero (eq->geq zero zero (refl num zero)).
n_one : pf (isNat one) = and_i (isInt one) (>= one zero) p_one (gt->geq one zero (trans_eq_gt one (+ zero one) zero (symm num (+ zero one) one (zero_plus one)) (succ_gt zero))).
isNat_i : {A:tnum} pf (isInt A) -> pf (>= A zero) -> pf (isNat A) = [A:tnum] [x3:pf (isInt A)] [x4:pf (>= A zero)] and_i (isInt A) (>= A zero) x3 x4.
isNat->isInt : {A:tnum} pf (isNat A) -> pf (isInt A) = [A:tnum] [x3:pf (isNat A)] and_e1 (isInt A) (geq A zero) x3.
isNat->geq_zero : {A:tnum} pf (isNat A) -> pf (>= A zero) = [A:tnum] [x3:pf (isNat A)] and_e2 (isInt A) (geq A zero) x3.
isNat->succ_gt_zero : {A:tnum} pf (isNat A) -> pf (> (succ A) zero) = [A:tnum] [p1:pf (isNat A)] trans_gt_geq (succ A) A zero (succ_gt A) (isNat->geq_zero A p1).
isNat_pred->gt_zero : {A:tnum} pf (isNat (pred A)) -> pf (gt A zero) = [A:tnum] [p1:pf (isNat (pred A))] trans_eq_gt A (+ (- A one) one) zero (symm num (+ (- A one) one) A (cancel_a-b+b A one)) (isNat->succ_gt_zero (pred A) p1).
isNat_congr : {A:tm num} {B:tm num} pf (== num A B) -> pf (isNat B) -> pf (isNat A) = [A:tm num] [B:tm num] [x3:pf (== num A B)] [x4:pf (isNat B)] congr num A B ([i1:tm num] isNat i1) x3 x4.
isNat_plus : {A:tnum} {B:tnum} pf (isNat A) -> pf (isNat B) -> pf (isNat (+ A B)) = [A:tnum] [B:tnum] [p1:pf (isNat A)] [p2:pf (isNat B)] isNat_i (+ A B) (isInt_plus A B (isNat->isInt A p1) (isNat->isInt B p2)) (trans_geq_eq (+ A B) (+ zero zero) zero (geq_plus_cong A zero B zero (isNat->geq_zero A p1) (isNat->geq_zero B p2)) (plus_zero zero)).
isNat_minus : {A:tnum} {B:tnum} pf (isInt A) -> pf (isInt B) -> pf (>= A B) -> pf (isNat (- A B)) = [A:tnum] [B:tnum] [p1:pf (isInt A)] [p2:pf (isInt B)] [p3:pf (>= A B)] isNat_i (- A B) (isInt_minus A B p1 p2) (geq_shift A B p3).
isNat_times : {A:tnum} {B:tnum} pf (isNat A) -> pf (isNat B) -> pf (isNat (* A B)) = [A:tnum] [B:tnum] [p1:pf (isNat A)] [p2:pf (isNat B)] isNat_i (* A B) (isInt_times A B (isNat->isInt A p1) (isNat->isInt B p2)) (trans_geq_eq (* A B) (* A zero) zero (geq_times_cong2 A B zero (isNat->geq_zero A p1) (isNat->geq_zero B p2)) (times_zero A)).
isNat_succ_i : {A:tnum} pf (isNat A) -> pf (isNat (succ A)) = [A:tnum] [p1:pf (isNat A)] isNat_plus A one p1 n_one.
isNat_pred_i : {A:tnum} pf (isNat A) -> pf (gt A zero) -> pf (isNat (pred A)) = [A:tnum] [p1:pf (isNat A)] [p2:pf (gt A zero)] isNat_i (pred A) (isInt_pred_i A (isNat->isInt A p1)) (int_gt_pred_i A zero (isNat->isInt A p1) p_zero p2).
isNat_pred_i' : {A:tnum} pf (isNat A) -> pf (neq num A zero) -> pf (isNat (pred A)) = [A:tnum] [p1:pf (isNat A)] [p2:pf (neq num A zero)] isNat_pred_i A p1 (neq->geq->gt A zero p2 (isNat->geq_zero A p1)).
isNat_pred_e : {A:tnum} pf (isNat (pred A)) -> pf (isNat A) = [A:tnum] [p1:pf (isNat (pred A))] isNat_congr A (+ (- A one) one) (symm num (+ (- A one) one) A (cancel_a-b+b A one)) (isNat_succ_i (pred A) p1).
isNat_pred->geq_one : {A:tnum} pf (isNat (pred A)) -> pf (geq A one) = [A:tnum] [p2:pf (isNat (pred A))] cut (gt A zero) (>= A one) (isNat_pred->gt_zero A p2) ([p4:pf (gt A zero)] cut (>= A (succ zero)) (>= A one) (int_gt_succ_i A zero (isNat->isInt A (isNat_pred_e A p2)) p_zero p4) ([p6:pf (geq A (succ zero))] trans_geq A (succ zero) one p6 (eq->geq (+ zero one) one (zero_plus one)))).
isNat_dichotomy : {N:tnum} {A:tform} pf (isNat N) -> (pf (eq num N zero) -> pf A) -> (pf (geq N one) -> pf A) -> pf A = [N:tnum] [A:tform] [p2:pf (isNat N)] [p4:pf (eq num N zero) -> pf A] [p6:pf (geq N one) -> pf A] cut3 (isNat N) (eq num N zero imp A) (geq N one imp A) A p2 (imp_i (eq num N zero) A ([x3:pf (eq num N zero)] p4 x3)) (imp_i (geq N one) A ([x3:pf (geq N one)] p6 x3)) ([x3:pf (isNat N)] [x4:pf (eq num N zero imp A)] [x5:pf (geq N one imp A)] or_e (== num N zero) (> N zero) A (geq->or_eq_gt N zero (and_e2 (isInt N) (geq N zero) p2)) ([p10:pf (eq num N zero)] p4 p10) ([p10:pf (gt N zero)] cut (>= N one) A (trans_geq N (succ zero) one (int_gt_succ_i N zero (isNat->isInt N p2) p_zero p10) (eq->geq (+ zero one) one (zero_plus one))) ([p12:pf (geq N one)] p6 p12))).
isNat_dichotomy' : {N:tnum} {A:tform} pf (isNat N) -> (pf (leq N zero) -> pf A) -> (pf (gt N zero) -> pf A) -> pf A = [N:tnum] [A:tform] [p1:pf (isNat N)] [q1:pf (leq N zero) -> pf A] [x3:pf (> N zero) -> pf A] or_e (== num N zero) (> N zero) A (geq->or_eq_gt N zero (isNat->geq_zero N p1)) ([p2:pf (eq num N zero)] cut (<= N zero) A (eq->leq N zero p2) ([x4:pf (<= N zero)] q1 x4)) ([x4:pf (> N zero)] x3 x4).
int_inbetween : {X:tnum} {N:tnum} pf (isInt X) -> pf (isInt N) -> pf (gt X (pred N)) -> pf (lt X (succ N)) -> pf (eq num X N) = [X:tnum] [N:tnum] [p2:pf (isInt X)] [p4:pf (isInt N)] [p6:pf (gt X (pred N))] [p8:pf (lt X (succ N))] cut4 (isInt X) (isInt N) (gt X (pred N)) (lt X (succ N)) (== num X N) p2 p4 p6 p8 ([x3:pf (isInt X)] [x4:pf (isInt N)] [x5:pf (gt X (pred N))] [x6:pf (lt X (succ N))] cut (>= X N) (== num X N) (trans_geq X (succ (pred N)) N (int_gt_succ_i X (pred N) p2 (isInt_pred_i N p4) p6) (eq->geq (succ (pred N)) N (succpred N))) ([p10:pf (geq X N)] cut (>= N X) (== num X N) (trans_geq N (pred (succ N)) X (eq->geq N (pred (succ N)) (symm num (pred (succ N)) N (predsucc N))) (int_lt_pred_i X (succ N) p2 (isInt_succ_i N p4) p8)) ([p12:pf (geq N X)] geq->leq->eq X N p10 p12))).
greatereq_plus1_i : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (> X1 X2) -> pf (>= X1 (succ X2)) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (> X1 X2)] int_gt_succ_i X1 X2 x3 x4 x5.
less_plus1_e : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (< X1 (succ X2)) -> pf (<= X1 X2) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (< X1 (succ X2))] int_lt_succ_e X1 X2 x3 x4 x5.
greater_minus1_e : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (> X1 (pred X2)) -> pf (>= X1 X2) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (> X1 (pred X2))] int_gt_pred_e X1 X2 x3 x4 x5.
greater_greater_eq_minus1 : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (> X1 X2) -> pf (>= (pred X1) X2) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (> X1 X2)] int_gt_pred_i X1 X2 x3 x4 x5.
lesseq_minus1_i : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (< X1 X2) -> pf (<= X1 (pred X2)) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (< X1 X2)] int_lt_pred_i X1 X2 x3 x4 x5.
lesseq_plus1_i : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (< X1 X2) -> pf (<= (succ X1) X2) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] [x5:pf (< X1 X2)] int_lt_succ_i X1 X2 x3 x4 x5.
isNat_succ_gt_zero : {X1:tm num} pf (isNat X1) -> pf (> (succ X1) zero) = [X1:tm num] [x3:pf (isNat X1)] isNat->succ_gt_zero X1 x3.
isNat_succ_neq_zero : {X1:tm num} pf (isNat X1) -> pf (!= num (succ X1) zero) = [X1:tm num] [p1:pf (isNat X1)] gt->neq (succ X1) zero (isNat->succ_gt_zero X1 p1).
nat_diff : {I:tnum} {J:tnum} pf (isNat I) -> pf (isInt J) -> pf (>= I J) -> pf (isNat (- I J)) = [I:tnum] [J:tnum] [p1:pf (isNat I)] [p2:pf (isInt J)] [x3:pf (>= I J)] isNat_minus I J (isNat->isInt I p1) p2 x3.
closure_minus : {X1:tm num} {X2:tm num} pf (isInt X1) -> pf (isInt X2) -> pf (isInt (- X1 X2)) = [X1:tm num] [X2:tm num] [x3:pf (isInt X1)] [x4:pf (isInt X2)] isInt_minus X1 X2 x3 x4.
nat_sum : {X1:tm num} {X2:tm num} pf (isNat X1) -> pf (isNat X2) -> pf (isNat (+ X1 X2)) = [X1:tm num] [X2:tm num] [x3:pf (isNat X1)] [x4:pf (isNat X2)] isNat_plus X1 X2 x3 x4.
nat_prod : {X1:tm num} {X2:tm num} pf (isNat X1) -> pf (isNat X2) -> pf (isNat (* X1 X2)) = [X1:tm num] [X2:tm num] [x3:pf (isNat X1)] [x4:pf (isNat X2)] isNat_times X1 X2 x3 x4.
isNat_pred_>=1 : {X1:tm num} pf (isNat (pred X1)) -> pf (geq X1 one) = [X1:tm num] [x3:pf (isNat (pred X1))] isNat_pred->geq_one X1 x3.
isNat_pred_>0 : {X1:tm num} pf (isNat (pred X1)) -> pf (gt X1 zero) = [X1:tm num] [x3:pf (isNat (pred X1))] isNat_pred->gt_zero X1 x3.
shadowed_2 : word32 -> tnum = [x3:word32] const x3.
fourteen : tnum = shadowed_2 14.
pow2_30 : tnum = shadowed_2 1073741824.
rep_maxint32 : word32 = 4294967295.
maxint32 : tnum = shadowed_2 rep_maxint32.
1024*4 : rep_times 1024 4 4096 = 1024*4.
256*256 : rep_times 256 256 65536 = 256*256.
65536+1 : rep_plus 65536 1 65537 = 65536+1.
65535+1 : rep_plus 65535 1 65536 = 65535+1.
65537*65535 : rep_times 65537 65535 4294967295 = 65537*65535.
4*16384 : rep_times 4 16384 65536 = 4*16384.
16384*65536 : rep_times 16384 65536 1073741824 = 16384*65536.
1+1=2 : rep_plus 1 1 2 = 1+1.
eval_plus : {A:word32} {B:word32} {C:word32} rep_plus A B C -> pf (== num (+ (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C)) = [A:word32] [B:word32] [C:word32] [x3:rep_plus A B C] _eval_plus A B C x3.
eval_times : {A:word32} {B:word32} {C:word32} rep_times A B C -> pf (== num (* (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C)) = [A:word32] [B:word32] [C:word32] [x3:rep_times A B C] _eval_times A B C x3.
eval_div : {M:word32} {N:word32} {Q:word32} rep_div M N Q -> pf (>= (shadowed_2 M) (* (shadowed_2 N) (shadowed_2 Q)) and < (shadowed_2 M) (* (shadowed_2 N) (+ one (shadowed_2 Q)))) = [M:word32] [N:word32] [Q:word32] [x3:rep_div M N Q] _eval_div M N Q x3.
eval_geq : {A:word32} {B:word32} {C:word32} rep_plus A B C -> pf (>= (const B) zero) -> pf (>= (const C) (const A)) = [A:word32] [B:word32] [C:word32] [p1:rep_plus A B C] [p2:pf (>= (const B) zero)] cut (== num (+ (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C)) (>= (shadowed_2 C) (shadowed_2 A)) (eval_plus A B C p1) ([p3:pf (== num (+ (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C))] cut (>= (+ (shadowed_2 C) (const B)) (shadowed_2 C)) (>= (shadowed_2 C) (shadowed_2 A)) (trans_geq_eq (+ (shadowed_2 C) (const B)) (+ (shadowed_2 C) zero) (shadowed_2 C) (geq_plus_cong2 (const B) zero (shadowed_2 C) p2) (plus_zero (shadowed_2 C))) ([p4:pf (>= (+ (shadowed_2 C) (shadowed_2 B)) (shadowed_2 C))] cut (>= (+ (shadowed_2 C) (shadowed_2 B)) (+ (shadowed_2 A) (shadowed_2 B))) (>= (shadowed_2 C) (shadowed_2 A)) (trans_geq (+ (shadowed_2 C) (shadowed_2 B)) (shadowed_2 C) (+ (shadowed_2 A) (shadowed_2 B)) p4 (eq->geq (shadowed_2 C) (+ (shadowed_2 A) (shadowed_2 B)) (symm num (+ (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C) p3))) ([p5:pf (>= (+ (shadowed_2 C) (shadowed_2 B)) (+ (shadowed_2 A) (shadowed_2 B)))] geq_plus_elim2 (shadowed_2 C) (shadowed_2 B) (shadowed_2 A) p5))).
eval_gt : {B:word32} {A:word32} rep_div B A 0 -> pf (> (shadowed_2 A) (shadowed_2 B)) = [B:word32] [A:word32] [p1:rep_div B A 0] cut (>= (shadowed_2 B) (* (shadowed_2 A) (shadowed_2 0)) and < (shadowed_2 B) (* (shadowed_2 A) (+ one (shadowed_2 0)))) (> (shadowed_2 A) (shadowed_2 B)) (eval_div B A 0 p1) ([p3:pf (>= (shadowed_2 B) (* (shadowed_2 A) zero) and < (shadowed_2 B) (* (shadowed_2 A) (+ one zero)))] trans_eq_gt (shadowed_2 A) (* (shadowed_2 A) (+ one zero)) (shadowed_2 B) (trans num (shadowed_2 A) (* (shadowed_2 A) one) (* (shadowed_2 A) (+ one zero)) (symm num (* (shadowed_2 A) one) (shadowed_2 A) (times_one (shadowed_2 A))) (times_cong2 one (+ one zero) (shadowed_2 A) (symm num (+ one zero) one (plus_zero one)))) (and_e2 (>= (shadowed_2 B) (* (shadowed_2 A) zero)) (< (shadowed_2 B) (* (shadowed_2 A) (+ one zero))) p3)).
eval_minus : {B-A:word32} {A:word32} {B:word32} rep_plus B-A A B -> pf (== num (- (shadowed_2 B) (shadowed_2 A)) (shadowed_2 B-A)) = [B-A:word32] [A:word32] [B:word32] [p1:rep_plus B-A A B] trans num (+ (shadowed_2 B) (neg (shadowed_2 A))) (+ (+ (shadowed_2 B-A) (shadowed_2 A)) (neg (shadowed_2 A))) (shadowed_2 B-A) (symm num (+ (+ (shadowed_2 B-A) (shadowed_2 A)) (neg (shadowed_2 A))) (+ (shadowed_2 B) (neg (shadowed_2 A))) (plus_cong1 (+ (shadowed_2 B-A) (shadowed_2 A)) (shadowed_2 B) (neg (shadowed_2 A)) (eval_plus B-A A B p1))) (cancel_a+b-b (shadowed_2 B-A) (shadowed_2 A)).
eval_minus' : {A:word32} {B-A:word32} {B:word32} rep_plus A B-A B -> pf (== num (- (shadowed_2 B) (shadowed_2 A)) (shadowed_2 B-A)) = [A:word32] [B-A:word32] [B:word32] [p1:rep_plus A B-A B] trans num (+ (shadowed_2 B) (neg (shadowed_2 A))) (+ (+ (shadowed_2 A) (shadowed_2 B-A)) (neg (shadowed_2 A))) (shadowed_2 B-A) (symm num (+ (+ (shadowed_2 A) (shadowed_2 B-A)) (neg (shadowed_2 A))) (+ (shadowed_2 B) (neg (shadowed_2 A))) (plus_cong1 (+ (shadowed_2 A) (shadowed_2 B-A)) (shadowed_2 B) (neg (shadowed_2 A)) (eval_plus A B-A B p1))) (cancel_a+b-a (shadowed_2 A) (shadowed_2 B-A)).
two_times_eq_plus : {A:tnum} pf (eq num (times two A) (plus A A)) = [A:tnum] trans num (* (shadowed_2 2) A) (* (+ (shadowed_2 1) (shadowed_2 1)) A) (+ A A) (times_cong (shadowed_2 2) (+ (shadowed_2 1) (shadowed_2 1)) A A (symm num (+ (shadowed_2 1) (shadowed_2 1)) (shadowed_2 2) (eval_plus 1 1 2 1+1=2)) (refl num A)) (trans num (* (+ one one) A) (+ (* one A) (* one A)) (+ A A) (distrib_right one one A) (plus_cong (* one A) A (* one A) A (one_times A) (one_times A))).
dig0lem : {N:tnum} pf (== num (N dig 0) (* N (shadowed_2 bignum_base))) = [N:tnum] plus_zero (times N (const bignum_base)).
dig0lem1 : {A:tm num} {B:tm num} pf (== num A B) -> pf (== num (A dig 0) (* B (shadowed_2 bignum_base))) = [A:tm num] [B:tm num] [p1:pf (== num A B)] congr num B A ([z1:tm num] == num (A dig 0) (* z1 (shadowed_2 bignum_base))) (symm num A B p1) (dig0lem A).
pow2_32_eq_65536*65536 : pf (== num pow2_32 (* (shadowed_2 65536) (shadowed_2 65536))) = cut (eq num (plus (* zero (const bignum_base)) one) one) (eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) (shadowed_2 65536))) (congr num (* zero (const bignum_base)) zero ([z1:tm num] eq num (plus z1 one) one) (zero_times (const bignum_base)) (zero_plus one)) ([p1:pf (eq num (bignum dig 1) one)] cut (== num (bignum dig 1 dig 0) (shadowed_2 bignum_base)) (eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) (shadowed_2 65536))) (trans num (bignum dig 1 dig 0) (* one (shadowed_2 bignum_base)) (shadowed_2 bignum_base) (dig0lem1 (bignum dig 1) one p1) (one_times (shadowed_2 bignum_base))) ([p2:pf (eq num (bignum dig 1 dig 0) (const bignum_base))] cut (== num (bignum dig 1 dig 0 dig 0) (shadowed_2 65536)) (eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) (shadowed_2 65536))) (trans num (bignum dig 1 dig 0 dig 0) (* (const bignum_base) (shadowed_2 bignum_base)) (shadowed_2 65536) (dig0lem1 (bignum dig 1 dig 0) (const bignum_base) p2) (eval_times 256 256 65536 256*256)) ([p3:pf (eq num (bignum dig 1 dig 0 dig 0) (const 65536))] cut (== num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (* (const 65536) (* (shadowed_2 bignum_base) (shadowed_2 bignum_base)))) (eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) (shadowed_2 65536))) (trans num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (* (* (const 65536) (shadowed_2 bignum_base)) (shadowed_2 bignum_base)) (* (const 65536) (* (shadowed_2 bignum_base) (shadowed_2 bignum_base))) (dig0lem1 (bignum dig 1 dig 0 dig 0 dig 0) (* (const 65536) (shadowed_2 bignum_base)) (dig0lem1 (bignum dig 1 dig 0 dig 0) (const 65536) p3)) (times_assoc (const 65536) (shadowed_2 bignum_base) (shadowed_2 bignum_base))) ([p4:pf (eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) (times (const bignum_base) (const bignum_base))))] congr num (shadowed_2 65536) (* (shadowed_2 256) (shadowed_2 256)) ([z2:tm num] eq num (bignum dig 1 dig 0 dig 0 dig 0 dig 0) (times (const 65536) z2)) (symm num (* (shadowed_2 256) (shadowed_2 256)) (shadowed_2 65536) (eval_times 256 256 65536 256*256)) p4)))).
pow2_32_eq_4*pow2_30 : pf (== num pow2_32 (* four pow2_30)) = trans num pow2_32 (* (shadowed_2 65536) (shadowed_2 65536)) (* (shadowed_2 4) (shadowed_2 1073741824)) pow2_32_eq_65536*65536 (trans num (* (shadowed_2 65536) (shadowed_2 65536)) (* (* (shadowed_2 4) (shadowed_2 16384)) (shadowed_2 65536)) (* (shadowed_2 4) (shadowed_2 1073741824)) (times_cong (shadowed_2 65536) (* (shadowed_2 4) (shadowed_2 16384)) (shadowed_2 65536) (shadowed_2 65536) (symm num (* (shadowed_2 4) (shadowed_2 16384)) (shadowed_2 65536) (eval_times 4 16384 65536 4*16384)) (refl num (shadowed_2 65536))) (trans num (* (* (shadowed_2 4) (shadowed_2 16384)) (shadowed_2 65536)) (* (shadowed_2 4) (* (shadowed_2 16384) (shadowed_2 65536))) (* (shadowed_2 4) (shadowed_2 1073741824)) (times_assoc (shadowed_2 4) (shadowed_2 16384) (shadowed_2 65536)) (times_cong (shadowed_2 4) (shadowed_2 4) (* (shadowed_2 16384) (shadowed_2 65536)) (shadowed_2 1073741824) (refl num (shadowed_2 4)) (eval_times 16384 65536 1073741824 16384*65536)))).
pow2_32eq : pf (== num pow2_32 (succ maxint32)) = cut (== num (* (shadowed_2 65537) (shadowed_2 65535)) (pred (* (shadowed_2 65536) (shadowed_2 65536)))) (== num pow2_32 (succ maxint32)) (congr2 num num (shadowed_2 65537) (+ (shadowed_2 65536) (shadowed_2 1)) (shadowed_2 65535) (- (shadowed_2 65536) (shadowed_2 1)) ([y:tm num] [z1:tm num] == num (* y z1) (pred (* (shadowed_2 65536) (shadowed_2 65536)))) (symm num (+ (shadowed_2 65536) (shadowed_2 1)) (shadowed_2 65537) (eval_plus 65536 1 65537 65536+1)) (symm num (- (shadowed_2 65536) (shadowed_2 1)) (shadowed_2 65535) (eval_minus 65535 1 65536 65535+1)) (succa_preda (shadowed_2 65536))) ([p11:pf (== num (* (shadowed_2 65537) (shadowed_2 65535)) (pred (* (shadowed_2 65536) (shadowed_2 65536))))] cut (== num (pred (* (shadowed_2 65536) (shadowed_2 65536))) (shadowed_2 4294967295)) (== num pow2_32 (succ maxint32)) (trans num (pred (* (shadowed_2 65536) (shadowed_2 65536))) (* (shadowed_2 65537) (shadowed_2 65535)) (shadowed_2 4294967295) (symm num (* (shadowed_2 65537) (shadowed_2 65535)) (pred (* (shadowed_2 65536) (shadowed_2 65536))) p11) (eval_times 65537 65535 4294967295 65537*65535)) ([p12:pf (== num (pred (* (shadowed_2 65536) (shadowed_2 65536))) maxint32)] cut (eq num (succ (pred (* (shadowed_2 65536) (shadowed_2 65536)))) (succ maxint32)) (== num pow2_32 (succ maxint32)) (congr num (pred (* (shadowed_2 65536) (shadowed_2 65536))) maxint32 ([z2:tm num] eq num (succ z2) (succ maxint32)) p12 (refl num (succ maxint32))) ([p13:pf (== num (+ (- (* (const 65536) (const 65536)) one) one) (succ maxint32))] cut (== num (* (const 65536) (const 65536)) (succ maxint32)) (== num pow2_32 (succ maxint32)) (trans num (* (const 65536) (const 65536)) (+ (- (* (const 65536) (const 65536)) one) one) (succ maxint32) (symm num (+ (- (* (const 65536) (const 65536)) one) one) (* (const 65536) (const 65536)) (cancel_a-b+b (* (const 65536) (const 65536)) one)) p13) ([p14:pf (== num (* (const 65536) (const 65536)) (succ maxint32))] trans num pow2_32 (* (shadowed_2 65536) (shadowed_2 65536)) (succ maxint32) pow2_32_eq_65536*65536 p14)))).
eval_plus_isInt : {A:word32} {B:word32} {C:word32} pf (isInt (plus (const A) (const B))) -> rep_plus A B C -> pf (isInt (const C)) = [A:word32] [B:word32] [C:word32] [p1:pf (isInt (plus (const A) (const B)))] [p2:rep_plus A B C] congr num (shadowed_2 C) (+ (shadowed_2 A) (shadowed_2 B)) ([x3:tm num] isInt x3) (symm num (+ (shadowed_2 A) (shadowed_2 B)) (shadowed_2 C) (eval_plus A B C p2)) p1.
isIntNPlusOne : {N:word32} {N':word32} pf (isInt (const N)) -> rep_plus N 1 N' -> pf (isInt (const N')) = [N:word32] [N':word32] [p1:pf (isInt (const N))] [p2:rep_plus N 1 N'] eval_plus_isInt N 1 N' (closure_add (const N) one p1 p_one) p2.
isIntNPlusN : {N:word32} {N+N:word32} pf (isInt (const N)) -> rep_plus N N N+N -> pf (isInt (const N+N)) = [N:word32] [N+N:word32] [p1:pf (isInt (const N))] [p2:rep_plus N N N+N] eval_plus_isInt N N N+N (closure_add (const N) (const N) p1 p1) p2.
_proof : {i1:tm num} {n:tnum} algebra_solver (== num i1 (succ n) imp == num (pred i1) n) = [i2:tm num] [n:tnum] solver_eq i2 n (pred i2) (succ n) (solver_rearrange (+ (+ zero (* one i2)) (* one n)) zero (+ (+ (+ zero (* one i2)) (* one n)) one) (+ zero one) (+ (pred i2) (succ n)) (+ i2 n) (rearr_three (+ zero (* one i2)) zero (+ zero (* one i2)) (+ (+ zero (* one i2)) one) (+ zero one) (+ (+ (+ zero (* one i2)) (* one n)) one) (+ (+ zero (* one i2)) (* one n)) (rearr_pos zero zero (+ zero (* one i2)) (+ zero (* one i2)) rearr_finish (trim_get zero (* one i2) zero)) (trim_get (+ zero (* one i2)) one zero) (trim_step1 (+ (+ zero (* one i2)) (* one n)) (+ (+ zero (* one i2)) (* one n)) (+ zero (* one i2)) (+ zero (* one i2)) one (trim_get (+ zero (* one i2)) (* one n) (+ zero (* one i2))))) (listify_imp (+ (pred i2) (succ n)) (+ (+ (+ zero (* one i2)) (* one n)) one) (+ zero one) (plusify_swap zero (pred i2) (succ n) (+ (+ (+ zero (* one i2)) (* one n)) one) (+ zero one) (plusify_swap (+ zero (pred i2)) n one (+ (+ (+ zero (* one i2)) (* one n)) one) (+ zero one) (plusify_step_one (+ (+ zero (pred i2)) n) (+ (+ zero (* one i2)) (* one n)) (+ zero one) (plusify_step (+ zero (pred i2)) (+ zero (* one i2)) (+ zero one) n (plusify_swap zero i2 (neg one) (+ zero (* one i2)) (+ zero one) (plusify_step_neg_one (+ zero i2) (+ zero (* one i2)) zero (plusify_step zero zero zero i2 plusify_zero)))))))) (listify_imp (+ i2 n) (+ (+ zero (* one i2)) (* one n)) zero (plusify_swap zero i2 n (+ (+ zero (* one i2)) (* one n)) zero (plusify_step (+ zero i2) (+ zero (* one i2)) zero n (plusify_step zero zero zero i2 plusify_zero))))).
isIntPredNPlusN : {N:word32} {N-1:word32} {N+N-1:word32} pf (isInt (const N)) -> rep_plus N-1 1 N -> rep_plus N-1 N N+N-1 -> pf (isInt (const N+N-1)) = [N:word32] [N-1:word32] [N+N-1:word32] [p1:pf (isInt (const N))] [p2:rep_plus N-1 1 N] [p3:rep_plus N-1 N N+N-1] cut (== num (pred (const N)) (const N-1)) (isInt (const N+N-1)) (imp_e (== num (const N) (succ (const N-1))) (== num (pred (const N)) (const N-1)) (_proof (const N) (const N-1)) (symm num (+ (shadowed_2 N-1) (shadowed_2 1)) (shadowed_2 N) (eval_plus N-1 1 N p2))) ([p4:pf (eq num (pred (const N)) (const N-1))] cut (isInt (const N-1)) (isInt (const N+N-1)) (congr num (const N-1) (pred (const N)) ([x3:tm num] isInt x3) (symm num (pred (const N)) (const N-1) p4) (isInt_pred_i (const N) p1)) ([p5:pf (isInt (const N-1))] eval_plus_isInt N-1 N N+N-1 (closure_add (const N-1) (const N) p5 p1) p3)).
pfSucc0 : rep_plus 0 1 1 = 0+1.
pfSucc1 : rep_plus 1 1 2 = 1+1.
pfSucc2 : rep_plus 2 1 3 = 2+1.
pfSucc3 : rep_plus 3 1 4 = 3+1.
pfSucc4 : rep_plus 4 1 5 = 4+1.
pfSucc5 : rep_plus 5 1 6 = 5+1.
pfSucc6 : rep_plus 6 1 7 = 6+1.
pfSucc7 : rep_plus 7 1 8 = 7+1.
pfSucc8 : rep_plus 8 1 9 = 8+1.
pfSucc9 : rep_plus 9 1 10 = 9+1.
pfSucc10 : rep_plus 10 1 11 = 10+1.
pfSucc11 : rep_plus 11 1 12 = 11+1.
pfSucc12 : rep_plus 12 1 13 = 12+1.
pfSucc13 : rep_plus 13 1 14 = 13+1.
pfSucc14 : rep_plus 14 1 15 = 14+1.
pfSucc15 : rep_plus 15 1 16 = 15+1.
pfSucc16 : rep_plus 16 1 17 = 16+1.
pfSucc17 : rep_plus 17 1 18 = 17+1.
pfSucc18 : rep_plus 18 1 19 = 18+1.
pfSucc19 : rep_plus 19 1 20 = 19+1.
pfSucc20 : rep_plus 20 1 21 = 20+1.
pfSucc21 : rep_plus 21 1 22 = 21+1.
pfSucc22 : rep_plus 22 1 23 = 22+1.
pfSucc23 : rep_plus 23 1 24 = 23+1.
pfSucc24 : rep_plus 24 1 25 = 24+1.
pfSucc25 : rep_plus 25 1 26 = 25+1.
pfSucc26 : rep_plus 26 1 27 = 26+1.
pfSucc27 : rep_plus 27 1 28 = 27+1.
pfSucc28 : rep_plus 28 1 29 = 28+1.
pfSucc29 : rep_plus 29 1 30 = 29+1.
pfSucc30 : rep_plus 30 1 31 = 30+1.
pfSucc31 : rep_plus 31 1 32 = 31+1.
pfSucc32 : rep_plus 32 1 33 = 32+1.
pfSucc33 : rep_plus 33 1 34 = 33+1.
pfSucc34 : rep_plus 34 1 35 = 34+1.
pfSucc35 : rep_plus 35 1 36 = 35+1.
pfSucc36 : rep_plus 36 1 37 = 36+1.
pfSucc37 : rep_plus 37 1 38 = 37+1.
pfSucc38 : rep_plus 38 1 39 = 38+1.
pfSucc39 : rep_plus 39 1 40 = 39+1.
pfSucc40 : rep_plus 40 1 41 = 40+1.
pfSucc41 : rep_plus 41 1 42 = 41+1.
pfSucc42 : rep_plus 42 1 43 = 42+1.
pfSucc43 : rep_plus 43 1 44 = 43+1.
pfSucc44 : rep_plus 44 1 45 = 44+1.
pfSucc45 : rep_plus 45 1 46 = 45+1.
pfSucc46 : rep_plus 46 1 47 = 46+1.
pfSucc47 : rep_plus 47 1 48 = 47+1.
pfSucc48 : rep_plus 48 1 49 = 48+1.
pfSucc49 : rep_plus 49 1 50 = 49+1.
pfSucc50 : rep_plus 50 1 51 = 50+1.
pfSucc51 : rep_plus 51 1 52 = 51+1.
pfSucc52 : rep_plus 52 1 53 = 52+1.
pfSucc53 : rep_plus 53 1 54 = 53+1.
pfSucc54 : rep_plus 54 1 55 = 54+1.
pfSucc55 : rep_plus 55 1 56 = 55+1.
pfSucc56 : rep_plus 56 1 57 = 56+1.
pfSucc57 : rep_plus 57 1 58 = 57+1.
pfSucc58 : rep_plus 58 1 59 = 58+1.
pfSucc59 : rep_plus 59 1 60 = 59+1.
pfSucc60 : rep_plus 60 1 61 = 60+1.
pfSucc61 : rep_plus 61 1 62 = 61+1.
pfSucc62 : rep_plus 62 1 63 = 62+1.
pfSucc63 : rep_plus 63 1 64 = 63+1.
pfMultSucc0 : rep_times 2 1 2 = 2*1.
pfMultSucc1 : rep_times 2 2 4 = 2*2.
pfMultSucc2 : rep_times 2 4 8 = 2*4.
pfMultSucc3 : rep_times 2 8 16 = 2*8.
pfMultSucc4 : rep_times 2 16 32 = 2*16.
pfMultSucc5 : rep_times 2 32 64 = 2*32.
pfMultSucc6 : rep_times 2 64 128 = 2*64.
pfMultSucc7 : rep_times 2 128 256 = 2*128.
pfMultSucc8 : rep_times 2 256 512 = 2*256.
pfMultSucc9 : rep_times 2 512 1024 = 2*512.
pfMultSucc10 : rep_times 2 1024 2048 = 2*1024.
pfMultSucc11 : rep_times 2 2048 4096 = 2*2048.
pfMultSucc12 : rep_times 2 4096 8192 = 2*4096.
pfMultSucc13 : rep_times 2 8192 16384 = 2*8192.
pfMultSucc14 : rep_times 2 16384 32768 = 2*16384.
pfMultSucc15 : rep_times 2 32768 65536 = 2*32768.
pfMultSucc16 : rep_times 2 65536 131072 = 2*65536.
pfMultSucc17 : rep_times 2 131072 262144 = 2*131072.
pfMultSucc18 : rep_times 2 262144 524288 = 2*262144.
pfMultSucc19 : rep_times 2 524288 1048576 = 2*524288.
pfMultSucc20 : rep_times 2 1048576 2097152 = 2*1048576.
pfMultSucc21 : rep_times 2 2097152 4194304 = 2*2097152.
pfMultSucc22 : rep_times 2 4194304 8388608 = 2*4194304.
pfMultSucc23 : rep_times 2 8388608 16777216 = 2*8388608.
pfMultSucc24 : rep_times 2 16777216 33554432 = 2*16777216.
pfMultSucc25 : rep_times 2 33554432 67108864 = 2*33554432.
pfMultSucc26 : rep_times 2 67108864 134217728 = 2*67108864.
pfMultSucc27 : rep_times 2 134217728 268435456 = 2*134217728.
pfMultSucc28 : rep_times 2 268435456 536870912 = 2*268435456.
pfMultSucc29 : rep_times 2 536870912 1073741824 = 2*536870912.
pfInt0 : pf (isInt zero) = p_zero.
pfInt1 : pf (isInt (const 1)) = isIntNPlusOne 0 1 pfInt0 pfSucc0.
pfInt2 : pf (isInt (const 2)) = isIntNPlusOne 1 2 pfInt1 pfSucc1.
pfInt3 : pf (isInt (const 3)) = isIntNPlusOne 2 3 pfInt2 pfSucc2.
pfInt4 : pf (isInt (const 4)) = isIntNPlusOne 3 4 pfInt3 pfSucc3.
pfInt5 : pf (isInt (const 5)) = isIntNPlusOne 4 5 pfInt4 pfSucc4.
pfInt6 : pf (isInt (const 6)) = isIntNPlusOne 5 6 pfInt5 pfSucc5.
pfInt7 : pf (isInt (const 7)) = isIntNPlusOne 6 7 pfInt6 pfSucc6.
pfInt8 : pf (isInt (const 8)) = isIntNPlusOne 7 8 pfInt7 pfSucc7.
pfInt9 : pf (isInt (const 9)) = isIntNPlusOne 8 9 pfInt8 pfSucc8.
pfInt10 : pf (isInt (const 10)) = isIntNPlusOne 9 10 pfInt9 pfSucc9.
pfInt11 : pf (isInt (const 11)) = isIntNPlusOne 10 11 pfInt10 pfSucc10.
pfInt12 : pf (isInt (const 12)) = isIntNPlusOne 11 12 pfInt11 pfSucc11.
pfInt13 : pf (isInt (const 13)) = isIntNPlusOne 12 13 pfInt12 pfSucc12.
pfInt14 : pf (isInt (const 14)) = isIntNPlusOne 13 14 pfInt13 pfSucc13.
pfInt15 : pf (isInt (const 15)) = isIntNPlusOne 14 15 pfInt14 pfSucc14.
pfInt16 : pf (isInt (const 16)) = isIntNPlusOne 15 16 pfInt15 pfSucc15.
pfInt17 : pf (isInt (const 17)) = isIntNPlusOne 16 17 pfInt16 pfSucc16.
pfInt18 : pf (isInt (const 18)) = isIntNPlusOne 17 18 pfInt17 pfSucc17.
pfInt19 : pf (isInt (const 19)) = isIntNPlusOne 18 19 pfInt18 pfSucc18.
pfInt20 : pf (isInt (const 20)) = isIntNPlusOne 19 20 pfInt19 pfSucc19.
pfInt21 : pf (isInt (const 21)) = isIntNPlusOne 20 21 pfInt20 pfSucc20.
pfInt22 : pf (isInt (const 22)) = isIntNPlusOne 21 22 pfInt21 pfSucc21.
pfInt23 : pf (isInt (const 23)) = isIntNPlusOne 22 23 pfInt22 pfSucc22.
pfInt24 : pf (isInt (const 24)) = isIntNPlusOne 23 24 pfInt23 pfSucc23.
pfInt25 : pf (isInt (const 25)) = isIntNPlusOne 24 25 pfInt24 pfSucc24.
pfInt26 : pf (isInt (const 26)) = isIntNPlusOne 25 26 pfInt25 pfSucc25.
pfInt27 : pf (isInt (const 27)) = isIntNPlusOne 26 27 pfInt26 pfSucc26.
pfInt28 : pf (isInt (const 28)) = isIntNPlusOne 27 28 pfInt27 pfSucc27.
pfInt29 : pf (isInt (const 29)) = isIntNPlusOne 28 29 pfInt28 pfSucc28.
pfInt30 : pf (isInt (const 30)) = isIntNPlusOne 29 30 pfInt29 pfSucc29.
pfInt31 : pf (isInt (const 31)) = isIntNPlusOne 30 31 pfInt30 pfSucc30.
pfInt32 : pf (isInt (const 32)) = isIntNPlusOne 31 32 pfInt31 pfSucc31.
pfInt33 : pf (isInt (const 33)) = isIntNPlusOne 32 33 pfInt32 pfSucc32.
pfInt34 : pf (isInt (const 34)) = isIntNPlusOne 33 34 pfInt33 pfSucc33.
pfInt35 : pf (isInt (const 35)) = isIntNPlusOne 34 35 pfInt34 pfSucc34.
pfInt36 : pf (isInt (const 36)) = isIntNPlusOne 35 36 pfInt35 pfSucc35.
pfInt37 : pf (isInt (const 37)) = isIntNPlusOne 36 37 pfInt36 pfSucc36.
pfInt38 : pf (isInt (const 38)) = isIntNPlusOne 37 38 pfInt37 pfSucc37.
pfInt39 : pf (isInt (const 39)) = isIntNPlusOne 38 39 pfInt38 pfSucc38.
pfInt40 : pf (isInt (const 40)) = isIntNPlusOne 39 40 pfInt39 pfSucc39.
pfInt41 : pf (isInt (const 41)) = isIntNPlusOne 40 41 pfInt40 pfSucc40.
pfInt42 : pf (isInt (const 42)) = isIntNPlusOne 41 42 pfInt41 pfSucc41.
pfInt43 : pf (isInt (const 43)) = isIntNPlusOne 42 43 pfInt42 pfSucc42.
pfInt44 : pf (isInt (const 44)) = isIntNPlusOne 43 44 pfInt43 pfSucc43.
pfInt45 : pf (isInt (const 45)) = isIntNPlusOne 44 45 pfInt44 pfSucc44.
pfInt46 : pf (isInt (const 46)) = isIntNPlusOne 45 46 pfInt45 pfSucc45.
pfInt47 : pf (isInt (const 47)) = isIntNPlusOne 46 47 pfInt46 pfSucc46.
pfInt48 : pf (isInt (const 48)) = isIntNPlusOne 47 48 pfInt47 pfSucc47.
pfInt49 : pf (isInt (const 49)) = isIntNPlusOne 48 49 pfInt48 pfSucc48.
pfInt50 : pf (isInt (const 50)) = isIntNPlusOne 49 50 pfInt49 pfSucc49.
pfInt51 : pf (isInt (const 51)) = isIntNPlusOne 50 51 pfInt50 pfSucc50.
pfInt52 : pf (isInt (const 52)) = isIntNPlusOne 51 52 pfInt51 pfSucc51.
pfInt53 : pf (isInt (const 53)) = isIntNPlusOne 52 53 pfInt52 pfSucc52.
pfInt54 : pf (isInt (const 54)) = isIntNPlusOne 53 54 pfInt53 pfSucc53.
pfInt55 : pf (isInt (const 55)) = isIntNPlusOne 54 55 pfInt54 pfSucc54.
pfInt56 : pf (isInt (const 56)) = isIntNPlusOne 55 56 pfInt55 pfSucc55.
pfInt57 : pf (isInt (const 57)) = isIntNPlusOne 56 57 pfInt56 pfSucc56.
pfInt58 : pf (isInt (const 58)) = isIntNPlusOne 57 58 pfInt57 pfSucc57.
pfInt59 : pf (isInt (const 59)) = isIntNPlusOne 58 59 pfInt58 pfSucc58.
pfInt60 : pf (isInt (const 60)) = isIntNPlusOne 59 60 pfInt59 pfSucc59.
pfInt61 : pf (isInt (const 61)) = isIntNPlusOne 60 61 pfInt60 pfSucc60.
pfInt62 : pf (isInt (const 62)) = isIntNPlusOne 61 62 pfInt61 pfSucc61.
pfInt63 : pf (isInt (const 63)) = isIntNPlusOne 62 63 pfInt62 pfSucc62.
pfInt64 : pf (isInt (const 64)) = isIntNPlusOne 63 64 pfInt63 pfSucc63.
x : rep_plus 58 58 116 = 58+58.
pfInt116 : pf (isInt (const 116)) = isIntNPlusN 58 116 pfInt58 x.
x : rep_plus 64 64 128 = 64+64.
pfInt128 : pf (isInt (const 128)) = isIntNPlusN 64 128 pfInt64 x.
x : rep_plus 128 128 256 = 128+128.
pfInt256 : pf (isInt (const 256)) = isIntNPlusN 128 256 pfInt128 x.
x : rep_plus 256 256 512 = 256+256.
pfInt512 : pf (isInt (const 512)) = isIntNPlusN 256 512 pfInt256 x.
x : rep_plus 512 512 1024 = 512+512.
pfInt1024 : pf (isInt (const 1024)) = isIntNPlusN 512 1024 pfInt512 x.
x : rep_plus 1024 1024 2048 = 1024+1024.
pfInt2048 : pf (isInt (const 2048)) = isIntNPlusN 1024 2048 pfInt1024 x.
x : rep_plus 2048 2048 4096 = 2048+2048.
pfInt4096 : pf (isInt (const 4096)) = isIntNPlusN 2048 4096 pfInt2048 x.
4096+4096 : rep_plus 4096 4096 8192 = 4096+4096.
pfInt8192 : pf (isInt (const 8192)) = isIntNPlusN 4096 8192 pfInt4096 4096+4096.
x : rep_plus 8192 8192 16384 = 8192+8192.
pfInt16384 : pf (isInt (const 16384)) = isIntNPlusN 8192 16384 pfInt8192 x.
x : rep_plus 16384 16384 32768 = 16384+16384.
pfInt32768 : pf (isInt (const 32768)) = isIntNPlusN 16384 32768 pfInt16384 x.
x : rep_plus 32768 32768 65536 = 32768+32768.
pfInt65536 : pf (isInt (const 65536)) = isIntNPlusN 32768 65536 pfInt32768 x.
x : rep_plus 65536 65536 131072 = 65536+65536.
pfInt131072 : pf (isInt (const 131072)) = isIntNPlusN 65536 131072 pfInt65536 x.
x : rep_plus 131072 131072 262144 = 131072+131072.
pfInt262144 : pf (isInt (const 262144)) = isIntNPlusN 131072 262144 pfInt131072 x.
x : rep_plus 262144 262144 524288 = 262144+262144.
pfInt524288 : pf (isInt (const 524288)) = isIntNPlusN 262144 524288 pfInt262144 x.
x : rep_plus 524288 524288 1048576 = 524288+524288.
pfInt1048576 : pf (isInt (const 1048576)) = isIntNPlusN 524288 1048576 pfInt524288 x.
1048576+1048576 : rep_plus 1048576 1048576 2097152 = 1048576+1048576.
pfInt2097152 : pf (isInt (const 2097152)) = isIntNPlusN 1048576 2097152 pfInt1048576 1048576+1048576.
2097152+2097152 : rep_plus 2097152 2097152 4194304 = 2097152+2097152.
pfInt4194304 : pf (isInt (const 4194304)) = isIntNPlusN 2097152 4194304 pfInt2097152 2097152+2097152.
x : rep_plus 4194304 4194304 8388608 = 4194304+4194304.
pfInt8388608 : pf (isInt (const 8388608)) = isIntNPlusN 4194304 8388608 pfInt4194304 x.
x : rep_plus 8388608 8388608 16777216 = 8388608+8388608.
pfInt16777216 : pf (isInt (const 16777216)) = isIntNPlusN 8388608 16777216 pfInt8388608 x.
x : rep_plus 16777216 16777216 33554432 = 16777216+16777216.
pfInt33554432 : pf (isInt (const 33554432)) = isIntNPlusN 16777216 33554432 pfInt16777216 x.
x : rep_plus 33554432 33554432 67108864 = 33554432+33554432.
pfInt67108864 : pf (isInt (const 67108864)) = isIntNPlusN 33554432 67108864 pfInt33554432 x.
x : rep_plus 67108864 67108864 134217728 = 67108864+67108864.
pfInt134217728 : pf (isInt (const 134217728)) = isIntNPlusN 67108864 134217728 pfInt67108864 x.
x : rep_plus 134217728 134217728 268435456 = 134217728+134217728.
pfInt268435456 : pf (isInt (const 268435456)) = isIntNPlusN 134217728 268435456 pfInt134217728 x.
x : rep_plus 268435456 268435456 536870912 = 268435456+268435456.
pfInt536870912 : pf (isInt (const 536870912)) = isIntNPlusN 268435456 536870912 pfInt268435456 x.
x : rep_plus 536870912 536870912 1073741824 = 536870912+536870912.
pfInt1073741824 : pf (isInt (const 1073741824)) = isIntNPlusN 536870912 1073741824 pfInt536870912 x.
x : rep_plus 1073741824 1073741824 2147483648 = 1073741824+1073741824.
isInt_2^31 : pf (isInt (const 2147483648)) = isIntNPlusN 1073741824 2147483648 pfInt1073741824 x.
x1 : rep_plus 2147483647 1 2147483648 = 2147483647+1.
x2 : rep_plus 2147483647 2147483648 rep_maxint32 = 2147483647+2147483648.
isInt_maxint32 : pf (isInt maxint32) = isIntPredNPlusN 2147483648 2147483647 rep_maxint32 isInt_2^31 x1 x2.
pf1>0 : pf (gt (const 1) zero) = eval_gt 0 1 1>0.
z : rep_div 0 2 0 = 0/2.
pf2>0 : pf (gt (const 2) zero) = eval_gt 0 2 z.
z : rep_div 0 3 0 = 0/3.
pf3>0 : pf (gt (const 3) zero) = eval_gt 0 3 z.
z : rep_div 0 4 0 = 0/4.
pf4>0 : pf (gt (const 4) zero) = eval_gt 0 4 z.
z : rep_div 0 8 0 = 0/8.
pf8>0 : pf (gt (const 8) zero) = eval_gt 0 8 z.
z : rep_div 0 14 0 = 0/14.
pf14>0 : pf (gt (const 14) zero) = eval_gt 0 14 z.
z : rep_div 0 30 0 = 0/30.
pf30>0 : pf (gt (const 30) zero) = eval_gt 0 30 z.
z : rep_div 0 31 0 = 0/31.
pf31>0 : pf (gt (const 31) zero) = eval_gt 0 31 z.
z : rep_div 0 32 0 = 0/32.
pf32>0 : pf (gt (const 32) zero) = eval_gt 0 32 z.
z : rep_div 0 33 0 = 0/33.
pf33>0 : pf (gt (const 33) zero) = eval_gt 0 33 z.
z : rep_div 0 116 0 = 0/116.
pf116>0 : pf (gt (const 116) zero) = eval_gt 0 116 z.
z : rep_div 1 2 0 = 1/2.
pf1<2 : pf (lt (const 1) (const 2)) = eval_gt 1 2 z.
z : rep_div 1 4 0 = 1/4.
pf1<4 : pf (lt (const 1) (const 4)) = eval_gt 1 4 z.
z : rep_div 2 4 0 = 2/4.
pf2<4 : pf (lt (const 2) (const 4)) = eval_gt 2 4 z.
z : rep_div 15 16 0 = 15/16.
pf15<16 : pf (lt (const 15) (const 16)) = eval_gt 15 16 z.
z : rep_div 7 32 0 = 7/32.
pf7<32 : pf (lt (const 7) (const 32)) = eval_gt 7 32 z.
z : rep_div 15 32 0 = 15/32.
pf15<32 : pf (lt (const 15) (const 32)) = eval_gt 15 32 z.
z : rep_div 32 34 0 = 32/34.
pf32<34 : pf (lt (const 32) (const 34)) = eval_gt 32 34 z.
z : rep_div 16 rep_maxint32 0 = 16/4294967295.
pf16<maxint32 : pf (lt sixteen maxint32) = eval_gt 16 rep_maxint32 z.
z : rep_div 4096 8192 0 = 4096/8192.
pf4096<8192 : pf (lt (const 4096) (const 8192)) = eval_gt 4096 8192 z.
z : rep_div 4096 rep_maxint32 0 = 4096/4294967295.
pf4096<maxint32 : pf (lt (const 4096) maxint32) = eval_gt 4096 rep_maxint32 z.
z : rep_times 4 2 8 = 4*2.
pf4*2 : pf (eq num (times (const 4) (const 2)) (const 8)) = eval_times 4 2 8 z.
z : rep_times 4 995 3980 = 4*995.
pf4*995 : pf (eq num (times (const 4) (const 995)) (const 3980)) = eval_times 4 995 3980 z.
z : rep_times 29 4 116 = 29*4.
pf29*4 : pf (eq num (times (const 29) (const 4)) (const 116)) = eval_times 29 4 116 z.
z : rep_plus 4 4 8 = 4+4.
pf4+4 : pf (eq num (plus four four) eight) = eval_plus 4 4 8 z.
z : rep_plus 116 3980 4096 = 116+3980.
pf116+3980 : pf (eq num (plus (const 116) (const 3980)) (const 4096)) = eval_plus 116 3980 4096 z.
z : rep_plus 995 63 1058 = 995+63.
pf995+63 : pf (eq num (plus (const 995) (const 63)) (const 1058)) = eval_plus 995 63 1058 z.
pfpred1 : pf (eq num (pred one) zero) = eq_swap_a_b+c (shadowed_2 1) (shadowed_2 0) (shadowed_2 1) (symm num (+ (shadowed_2 0) (shadowed_2 1)) (shadowed_2 1) (eval_plus 0 1 1 0+1)).
pfpred2 : pf (eq num (pred two) one) = eq_swap_a_b+c (shadowed_2 2) (shadowed_2 1) (shadowed_2 1) (symm num (+ (shadowed_2 1) (shadowed_2 1)) (shadowed_2 2) (eval_plus 1 1 2 1+1=2)).
eq! : {T:tp} tm T -> tm T -> type = [T:tp] [n1:tm T] [n2:tm T] pf (eq T n1 n2).
plus_rule1 : {C1:word32} {C2:word32} {C:word32} {V2:tm num} {V1:tm num} rep_plus C1 C2 C -> eq! num V2 (const C2) -> eq! num V1 (const C1) -> eq! num (plus V1 V2) (const C) = [C1:word32] [C2:word32] [C:word32] [V2:tm num] [V1:tm num] [p2:rep_plus C1 C2 C] [p4:eq! num V2 (const C2)] [p6:eq! num V1 (const C1)] cut (== num (+ (shadowed_2 C1) (shadowed_2 C2)) (shadowed_2 C)) (== num (+ V1 V2) (const C)) (eval_plus C1 C2 C p2) ([p8:pf (eq num (plus (const C1) (const C2)) (const C))] trans num (+ V1 V2) (+ (const C1) (const C2)) (const C) (plus_cong V1 (const C1) V2 (const C2) p6 p4) p8).
plus_rule2 : {C:word32} eq! num (const C) (const C) = [C:word32] refl num (const C).
min : tm num -> tm num -> tm num = [x3:tm num] [y:tm num] ifgtz (minus x3 y) y x3.
max : tm num -> tm num -> tm num = [x3:tm num] [y:tm num] ifgtz (minus x3 y) x3 y.
min_gt : {X:tnum} {Y:tnum} pf (gt X Y) -> pf (eq num (min X Y) Y) = [X:tnum] [Y:tnum] [p1:pf (gt X Y)] ifgtz1 (- X Y) Y X (gt_shift X Y p1).
max_gt : {X:tnum} {Y:tnum} pf (gt X Y) -> pf (eq num (max X Y) X) = [X:tnum] [Y:tnum] [p1:pf (gt X Y)] ifgtz1 (- X Y) X Y (gt_shift X Y p1).
min_leq : {X:tnum} {Y:tnum} pf (leq X Y) -> pf (eq num (min X Y) X) = [X:tnum] [Y:tnum] [p1:pf (leq X Y)] ifgtz2 (- X Y) Y X (leq_shift X Y p1).
max_leq : {X:tnum} {Y:tnum} pf (leq X Y) -> pf (eq num (max X Y) Y) = [X:tnum] [Y:tnum] [p1:pf (leq X Y)] ifgtz2 (- X Y) X Y (leq_shift X Y p1).
max_eq : {X:tm num} pf (eq num (max X X) X) = [X:tm num] max_leq X X (eq->leq X X (refl num X)).
max_geq : {X:tnum} {Y:tnum} pf (geq X Y) -> pf (eq num (max X Y) X) = [X:tnum] [Y:tnum] [p1:pf (geq X Y)] or_e (>= Y X) (< Y X) (== num (max X Y) X) (or_geq_lt Y X) ([p2:pf (geq Y X)] cut (== num X Y) (== num (max X Y) X) (geq->leq->eq X Y p1 p2) ([p3:pf (eq num X Y)] trans num (max X Y) Y X (max_leq X Y p2) (symm num X Y p3))) ([p2:pf (gt X Y)] max_gt X Y p2).
max_comm : {X:tm num} {Y:tm num} pf (eq num (max X Y) (max Y X)) = [X:tm num] [Y:tm num] or_e (>= Y X) (< Y X) (== num (max X Y) (max Y X)) (or_geq_lt Y X) ([p1:pf (leq X Y)] trans num (max X Y) Y (max Y X) (max_leq X Y p1) (symm num (max Y X) Y (max_geq Y X p1))) ([p2:pf (gt X Y)] trans num (max X Y) X (max Y X) (max_gt X Y p2) (symm num (max Y X) X (max_leq Y X (lt->leq Y X p2)))).
max_geq1 : {A:tm num} {B:tm num} pf (geq (max A B) A) = [A:tm num] [B:tm num] or_e (> A B) (<= A B) (>= (max A B) A) (or_gt_leq A B) ([p1:pf (> A B)] eq->geq (max A B) A (max_geq A B (gt->geq A B p1))) ([p2:pf (<= A B)] congr num (max A B) B ([z1:tm num] geq z1 A) (max_leq A B p2) p2).
max_geq2 : {A:tm num} {B:tm num} pf (geq (max A B) B) = [A:tm num] [B:tm num] or_e (> A B) (<= A B) (>= (max A B) B) (or_gt_leq A B) ([p6:pf (> A B)] trans_geq (max A B) A B (max_geq1 A B) (gt->geq A B p6)) ([p1:pf (<= A B)] eq->geq (max A B) B (max_leq A B p1)).
max_prop : {A:tm num} {B:tm num} {f:tm num -> tform} pf (f A) -> pf (f B) -> pf (f (max A B)) = [A:tm num] [B:tm num] [f:tm num -> tform] [p1:pf (f A)] [p2:pf (f B)] or_e (<= A B) (> A B) (f (max A B)) (or_leq_gt A B) ([p3:pf (leq A B)] congr num (max A B) B ([x3:tm num] f x3) (max_leq A B p3) p2) ([p4:pf (gt A B)] congr num (max A B) A ([x3:tm num] f x3) (max_gt A B p4) p1).
min_leq1 : {A:tm num} {B:tm num} pf (leq (min A B) A) = [A:tm num] [B:tm num] or_e (>= B A) (< B A) (<= (min A B) A) (or_geq_lt B A) ([p1:pf (geq B A)] eq->leq (min A B) A (min_leq A B p1)) ([p2:pf (lt B A)] trans_leq (min A B) B A (eq->leq (min A B) B (min_gt A B p2)) (lt->leq B A p2)).
min_leq2 : {A:tm num} {B:tm num} pf (leq (min A B) B) = [A:tm num] [B:tm num] or_e (>= B A) (< B A) (<= (min A B) B) (or_geq_lt B A) ([p1:pf (geq B A)] trans_leq (min A B) A B (eq->leq (min A B) A (min_leq A B p1)) p1) ([p2:pf (lt B A)] eq->leq (min A B) B (min_gt A B p2)).
min_prop : {A:tm num} {B:tm num} {f:tm num -> tform} pf (f A) -> pf (f B) -> pf (f (min A B)) = [A:tm num] [B:tm num] [f:tm num -> tform] [p1:pf (f A)] [p2:pf (f B)] or_e (>= B A) (< B A) (f (min A B)) (or_geq_lt B A) ([p3:pf (leq A B)] congr num (min A B) A ([x3:tm num] f x3) (min_leq A B p3) p1) ([p4:pf (gt A B)] congr num (min A B) B ([x3:tm num] f x3) (min_gt A B p4) p2).
inrange2_i : {I:tnum} {Lo:tnum} {Hi:tnum} pf (isInt I) -> pf (geq I Lo) -> pf (lt I Hi) -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) = [I:tnum] [Lo:tnum] [Hi:tnum] [p1:pf (isInt I)] [p2:pf (geq I Lo)] [p3:pf (lt I Hi)] def3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) Lo Hi I (and3_i (isInt I) (geq I Lo) (lt I Hi) p1 p2 p3).
inrange2_e : {Lo:tm num} {Hi:tm num} {I:tm num} {C:tform} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) -> (pf (isInt I) -> pf (geq I Lo) -> pf (lt I Hi) -> pf C) -> pf C = [Lo:tm num] [Hi:tm num] [I:tm num] [C:tform] [p1:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)] [q1:pf (isInt I) -> pf (geq I Lo) -> pf (lt I Hi) -> pf C] and3_l (isInt I) (leq Lo I) (lt I Hi) C (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) Lo Hi I p1) ([p2:pf (isInt I)] [p3:pf (geq I Lo)] [p4:pf (lt I Hi)] q1 p2 p3 p4).
inrange2_isInt : {Lo:tm num} {Hi:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) -> pf (isInt I) = [Lo:tm num] [Hi:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)] and3_l (isInt I) (leq Lo I) (lt I Hi) (isInt I) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) Lo Hi I p1) ([p2:pf (isInt I)] [x3:pf (leq Lo I)] [x4:pf (lt I Hi)] p2).
inrange2_e2 : {Lo:tm num} {Hi:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) -> pf (geq I Lo) = [Lo:tm num] [Hi:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)] and3_l (isInt I) (leq Lo I) (lt I Hi) (leq Lo I) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) Lo Hi I p1) ([x3:pf (isInt I)] [p2:pf (leq Lo I)] [x4:pf (lt I Hi)] p2).
inrange2_e3 : {Lo:tm num} {Hi:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) -> pf (lt I Hi) = [Lo:tm num] [Hi:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)] and3_l (isInt I) (leq Lo I) (lt I Hi) (lt I Hi) (def3_e num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) Lo Hi I p1) ([x3:pf (isInt I)] [x4:pf (leq Lo I)] [p2:pf (lt I Hi)] p2).
inrange2_zero_equiv_inrange : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 zero) N) I equiv @ num form (@ num (shadowed_0 num) inrange N) I) = [N:tm num] [I:tm num] congr2 form form (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4)) zero) N) I) (isInt I and leq zero I and lt I N) (@ num form (@ num (num arrow form) (lam2 num num form ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3)) N) I) (isInt I and geq I zero and lt I N) ([u:tm form] [v1:tm form] u equiv v1) (beta3 form num num num ([x3:tm num] [x4:tm num] [x5:tm num] isInt x5 and leq x3 x5 and lt x5 x4) zero N I) (beta2 form num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I) (equiv_refl (isInt I and leq zero I and lt I N)).
not_inrange2 : {I:tnum} {Lo:tnum} {Hi:tnum} pf (lt I Lo or geq I Hi) -> pf (not (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)) = [I:tnum] [Lo:tnum] [Hi:tnum] [p1:pf (lt I Lo or geq I Hi)] not_i (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I) ([p2:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) I)] inrange2_e Lo Hi I false p2 ([p3:pf (isInt I)] [p4:pf (geq I Lo)] [p5:pf (lt I Hi)] or_e (lt I Lo) (geq I Hi) false p1 ([p6:pf (lt I Lo)] pf_greater_and_greatereq I Lo false p4 p6) ([p7:pf (geq I Hi)] pf_greater_and_greatereq I Hi false p7 p5))).
inrange_i : {I:tnum} {N:tnum} pf (isInt I) -> pf (geq I zero) -> pf (lt I N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) = [I:tnum] [N:tnum] [p1:pf (isInt I)] [p2:pf (geq I zero)] [p3:pf (lt I N)] def2_i num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I (and3_i (isInt I) (geq I zero) (lt I N) p1 p2 p3).
inrange_i2 : {I:tnum} {N:tnum} pf (isNat I) -> pf (lt I N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) = [I:tnum] [N:tnum] [p1:pf (isNat I)] [p2:pf (lt I N)] inrange_i I N (isNat->isInt I p1) (isNat->geq_zero I p1) p2.
inrange_e : {N:tm num} {I:tm num} {C:tform} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> (pf (isInt I) -> pf (geq I zero) -> pf (lt I N) -> pf C) -> pf C = [N:tm num] [I:tm num] [C:tform] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] [q1:pf (isInt I) -> pf (geq I zero) -> pf (lt I N) -> pf C] and3_l (isInt I) (geq I zero) (lt I N) C (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I p1) ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I N)] q1 p2 p3 p4).
inrange_e1 : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (isInt I) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and3_l (isInt I) (geq I zero) (lt I N) (isInt I) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I p1) ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I N)] p2).
inrange_e2 : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (geq I zero) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and3_l (isInt I) (geq I zero) (lt I N) (geq I zero) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I p1) ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I N)] p3).
inrange_e3 : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (lt I N) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and3_l (isInt I) (geq I zero) (lt I N) (lt I N) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I p1) ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I N)] p4).
inrange_trans_succ : {K:tm num} {J:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange K) J) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ J)) I) -> pf (@ num form (@ num (shadowed_0 num) inrange K) I) = [K:tm num] [J:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange K) J)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange (succ J)) I)] inrange_e K J (@ num form (@ num (shadowed_0 num) inrange K) I) p1 ([p3:pf (isInt J)] [p4:pf (geq J zero)] [p5:pf (gt K J)] inrange_e (succ J) I (@ num form (@ num (shadowed_0 num) inrange K) I) p2 ([p6:pf (isInt I)] [p7:pf (geq I zero)] [p8:pf (gt (succ J) I)] cut (<= I J) (@ num form (@ num (shadowed_0 num) inrange K) I) (less_plus1_e I J p6 p3 p8) ([p9:pf (geq J I)] inrange_i I K p6 p7 (trans_gt_geq K J I p5 p9)))).
inrange_isNat : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (isNat I) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and_i (isInt I) (geq I zero) (inrange_e1 N I p1) (inrange_e2 N I p1).
inrange_isNat' : {N:tnum} {I:tm num} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (isNat (minus N I)) = [N:tnum] [I:tm num] [p1:pf (isNat N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] and_i (isInt (plus N (neg I))) (>= (- N I) zero) (closure_add N (neg I) (isNat->isInt N p1) (neg_exists I (inrange_e1 N I p2))) (cut (>= N I) (>= (- N I) zero) (gt->geq N I (inrange_e3 N I p2)) ([q22:pf (geq N I)] not_geq_zero N I q22)).
inrange2->inrange : {X:tnum} {Lo:tm num} {Hi:tm num} pf (isNat X) -> pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) X) -> pf (@ num form (@ num (shadowed_0 num) inrange Hi) X) = [X:tnum] [Lo:tm num] [Hi:tm num] [p1:pf (isNat X)] [p2:pf (@ num form (@ num (shadowed_0 num) (@ num (rel num num) inrange2 Lo) Hi) X)] inrange_i X Hi (isNat->isInt X p1) (isNat->geq_zero X p1) (inrange2_e3 Lo Hi X p2).
inrange_succ_e : {N:tnum} {I:tm num} pf (isInt N) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (leq I N) = [N:tnum] [I:tm num] [p1:pf (isInt N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] less_plus1_e I N (inrange_e1 (succ N) I p2) p1 (inrange_e3 (succ N) I p2).
inrange_succ_e' : {N:tnum} {I:tm num} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (leq I N) = [N:tnum] [I:tm num] [p1:pf (isNat N)] [x3:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] inrange_succ_e N I (isNat->isInt N p1) x3.
inrange_succ_leq : {N:tnum} {I:tm num} pf (isInt N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (leq (succ I) N) = [N:tnum] [I:tm num] [p1:pf (isInt N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] greatereq_plus1_i N I p1 (inrange_e1 N I p2) (inrange_e3 N I p2).
inrange_succ_leq' : {N:tnum} {I:tm num} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (leq (succ I) N) = [N:tnum] [I:tm num] [p1:pf (isNat N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_succ_leq N I (isNat->isInt N p1) p2.
inrange_e3' : {N:tnum} {I:tm num} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (leq I (pred N)) = [N:tnum] [I:tm num] [p1:pf (isNat N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] lesseq_minus1_i I N (inrange_e1 N I p2) (isNat->isInt N p1) (inrange_e3 N I p2).
inrange_succ_trans : {K:tnum} {J:tm num} {I:tm num} pf (isInt K) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ K)) J) -> pf (@ num form (@ num (shadowed_0 num) inrange J) I) -> pf (@ num form (@ num (shadowed_0 num) inrange K) I) = [K:tnum] [J:tm num] [I:tm num] [p0:pf (isInt K)] [p1:pf (@ num form (@ num (shadowed_0 num) inrange (succ K)) J)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange J) I)] inrange_i2 I K (inrange_isNat J I p2) (trans_geq_gt K J I (inrange_succ_e K J p0 p1) (inrange_e3 J I p2)).
inrange_step : {N:tnum} {I:tm num} pf (isInt N) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (eq num I N or @ num form (@ num (shadowed_0 num) inrange N) I) = [N:tnum] [I:tm num] [p1:pf (isInt N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] inrange_e (succ N) I (== num I N or @ num form (@ num (shadowed_0 num) inrange N) I) p2 ([p3:pf (isInt I)] [p4:pf (geq I zero)] [p5:pf (lt I (succ N))] or_e (== num N I) (> N I) (== num I N or @ num form (@ num (shadowed_0 num) inrange N) I) (greater_or_eq N I (less_plus1_e I N p3 p1 p5)) ([p6:pf (eq num N I)] or_i1 (== num I N) (@ num form (@ num (shadowed_0 num) inrange N) I) (symm num N I p6)) ([p6:pf (lt I N)] or_i2 (@ num form (@ num (shadowed_0 num) inrange N) I) (== num I N) (inrange_i I N p3 p4 p6))).
inrange_gt_0 : {M:tm num} {N:tm num} pf (@ num form (@ num (shadowed_0 num) inrange M) N) -> pf (gt M zero) = [M:tm num] [N:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange M) N)] inrange_e M N (> M zero) p1 ([p2:pf (isInt N)] [p3:pf (geq N zero)] [p4:pf (lt N M)] trans_gt_geq M N zero p4 p3).
not_inrange_zero : {I:tm num} pf (not (@ num form (@ num (shadowed_0 num) inrange zero) I)) = [I:tm num] not_i (@ num form (@ num (shadowed_0 num) inrange zero) I) ([p1:pf (@ num form (@ num (shadowed_0 num) inrange zero) I)] inrange_e zero I false p1 ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I zero)] not_e (geq I zero) p4 p3)).
inrange_one : {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange one) I) -> pf (eq num I zero) = [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange one) I)] inrange_e one I (eqn I zero) p1 ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I one)] ord_antisymmetry I zero p3 (less_plus1_e I zero p2 p_zero (congr num (+ zero one) one ([z1:tm num] lt I z1) (zero_plus one) p4))).
inrange_succ_n : {N:tnum} pf (isNat N) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) N) = [N:tnum] [p1:pf (isNat N)] inrange_i N (succ N) (and_e1 (isInt N) (geq N zero) p1) (and_e2 (isInt N) (geq N zero) p1) (succ_greater N).
inrange_succ_i : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ I)) I) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_succ_n I (inrange_isNat N I p1).
inrange_pred_right : {I:tnum} {N:tm num} pf (gt I zero) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) = [I:tnum] [N:tm num] [p1:pf (gt I zero)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_e N I (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) p2 ([p3:pf (isInt I)] [x3:pf (geq I zero)] [p4:pf (lt I N)] inrange_i (pred I) N (isInt_pred_i I p3) (greater_greater_eq_minus1 I zero p3 p_zero p1) (trans_lt (pred I) I N (minus1_less I) p4)).
inrange_pred_n : {N:tnum} pf (isNat N) -> pf (gt N zero) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) = [N:tnum] [p1:pf (isNat N)] [p2:pf (gt N zero)] inrange_i (pred N) N (isInt_pred_i N (and_e1 (isInt N) (geq N zero) p1)) (greater_greater_eq_minus1 N zero (and_e1 (isInt N) (geq N zero) p1) p_zero p2) (lesseq_minus1_e (pred N) N (eq->leq (pred N) (pred N) (refl num (pred N)))).
inrange_pred_n' : {N:tnum} pf (isNat (pred N)) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) = [N:tnum] [p1:pf (isNat (pred N))] cut (isNat (pred N)) (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) p1 ([x3:pf (isNat (pred N))] cut (isNat N) (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) (isNat_pred_e N p1) ([p2:pf (isNat N)] and_l (isInt (pred N)) (geq (pred N) zero) (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) p1 ([p3:pf (isInt (pred N))] [p4:pf (geq (pred N) zero)] cut (> N zero) (@ num form (@ num (shadowed_0 num) inrange N) (pred N)) (gt_cong (succ (pred N)) N zero zero (succpred N) (refl num zero) (greater_plus1_i (pred N) zero p4)) ([p6:pf (gt N zero)] inrange_pred_n N p2 p6)))).
inrange_expand : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_e N I (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) p1 ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I N)] inrange_i I (succ N) p2 p3 (trans_lt I N (succ N) p4 (succ_greater N))).
inrange_offset : {M:tnum} {I:tnum} {N:tm num} pf (isInt M) -> pf (geq (plus I M) zero) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (plus N M)) (plus I M)) = [M:tnum] [I:tnum] [N:tm num] [p1:pf (isInt M)] [p2:pf (geq (plus I M) zero)] [p3:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_e N I (@ num form (@ num (shadowed_0 num) inrange (+ N M)) (plus I M)) p3 ([p4:pf (isInt I)] [p5:pf (geq I zero)] [p6:pf (lt I N)] inrange_i (plus I M) (+ N M) (closure_add I M p4 p1) p2 (gt_plus_cong1 N I M p6)).
inrange_offset_pred : {I:tnum} {N:tm num} pf (gt I zero) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) (pred I)) = [I:tnum] [N:tm num] [p1:pf (gt I zero)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_offset (neg one) I N (neg_exists one p_one) (lesseq_minus1_i zero I p_zero (inrange_e1 N I p2) p1) p2.
inrange_expand' : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) (succ I)) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_offset one I N p_one (gt->geq (succ I) zero (less_plus1_i zero I (inrange_e2 N I p1))) p1.
inrange_expand'n : {N:tm num} {I:tm num} {M:tnum} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (isNat M) -> pf (@ num form (@ num (shadowed_0 num) inrange (plus N M)) (plus I M)) = [N:tm num] [I:tm num] [M:tnum] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] [p1b:pf (isNat M)] inrange_offset M I N (isNat->isInt M p1b) (geq_zero_plus I M (inrange_e2 N I p1) (isNat->geq_zero M p1b)) p1.
inrange_expand2 : {N:tm num} {I:tm num} {M:tnum} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (leq N M) -> pf (@ num form (@ num (shadowed_0 num) inrange M) I) = [N:tm num] [I:tm num] [M:tnum] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] [p4:pf (leq N M)] inrange_e N I (@ num form (@ num (shadowed_0 num) inrange M) I) p2 ([p5:pf (isInt I)] [p6:pf (geq I zero)] [p7:pf (lt I N)] inrange_i I M p5 p6 (trans_lt_leq I N M p7 p4)).
inrange_trans : {K:tm num} {J:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange K) J) -> pf (@ num form (@ num (shadowed_0 num) inrange J) I) -> pf (@ num form (@ num (shadowed_0 num) inrange K) I) = [K:tm num] [J:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange K) J)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange J) I)] inrange_trans_succ K J I p1 (inrange_expand J I p2).
inrange_succ_not_inrange_pred : {N:tnum} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) (pred I))) -> pf (eq num I zero) = [N:tnum] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] [p2:pf (not (@ num form (@ num (shadowed_0 num) inrange N) (pred I)))] and3_l (isInt I) (geq I zero) (lt I (succ N)) (eq num I zero) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) (succ N) I p1) ([p11:pf (isInt I)] [p12:pf (geq I zero)] [p13:pf (lt I (succ N))] or_e (not (isInt (pred I))) (not (geq (pred I) zero and lt (pred I) N)) (eq num I zero) (demorgan_or_not (isInt (pred I)) (geq (pred I) zero and lt (pred I) N) (gdef2_e form num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N (pred I) ([Z:tm form] not Z) p2)) ([p3:pf (not (isInt (pred I)))] cut (isInt (plus I (neg one))) (eq num I zero) (closure_add I (neg one) p11 (neg_exists one p_one)) ([p31:pf (isInt (pred I))] false_e (eq num I zero) (not_e (isInt (pred I)) p3 p31))) ([p4:pf (not (geq (pred I) zero and lt (pred I) N))] or_e (not (geq (pred I) zero)) (not (lt (pred I) N)) (eq num I zero) (demorgan_or_not (geq (pred I) zero) (lt (pred I) N) p4) ([p5:pf (not (geq (pred I) zero))] cut (> one I) (eq num I zero) (not_geq_pred_gt I one p5) ([p51:pf (gt one I)] or_e (== num I zero) (> I zero) (eq num I zero) (greater_or_eq I zero p12) ([p6:pf (eq num I zero)] p6) ([p7:pf (gt I zero)] cut (>= I (succ zero)) (eq num I zero) (greatereq_plus1_i I zero p11 p_zero p7) ([p71:pf (geq I (succ zero))] cut (geq I one) (eq num I zero) (congr num one (+ zero one) ([Z:tm num] geq I Z) (symm num (+ zero one) one (zero_plus one)) p71) ([p72:pf (geq I one)] false_e (eq num I zero) (pf_greater_and_greatereq I one false p72 p51)))))) ([p8:pf (not (lt (pred I) N))] false_e (eq num I zero) (excluded_middle_x (<= N (- I one)) (gt_not_lt_eq N (- I one) (lt_succ_gt I N one p13)) p8)))).
not_inrange_n : {I:tm num} {N:tm num} pf (eq num I N) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) = [I:tm num] [N:tm num] [p1:pf (eq num I N)] not_i (@ num form (@ num (shadowed_0 num) inrange N) I) ([p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] cut (!= num I N) false (lt->neq I N (inrange_e3 N I p2)) ([p3:pf (not (eq num I N))] not_e (eq num I N) p3 p1)).
inrange_expand_not : {N:tnum} {I:tm num} pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) = [N:tnum] [I:tm num] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))] not_i (@ num form (@ num (shadowed_0 num) inrange N) I) ([p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] not_e (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) p1 (inrange_expand N I p2)).
not_inrange_geq : {N:tm num} {I:tm num} pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) -> pf (isNat I) -> pf (geq I N) = [N:tm num] [I:tm num] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange N) I))] [p2:pf (isNat I)] cut (not (isInt I and geq I zero and lt I N)) (geq I N) (gdef2_e form num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I ([z1:tm form] not z1) p1) ([p3:pf (not (isInt I and geq I zero and lt I N))] cut (not (isInt I) or not (geq I zero and lt I N)) (geq I N) (demorgan_or_not (isInt I) (geq I zero and lt I N) p3) ([p4:pf (not (isInt I) or not (geq I zero and lt I N))] cut (not (not (isInt I))) (geq I N) (equiv_e1 (isInt I) (not (not (isInt I))) (equiv_not_not (isInt I)) (and_e1 (isInt I) (geq I zero) p2)) ([p41:pf (not (not (isInt I)))] cut (not (geq I zero and lt I N)) (geq I N) (or_e2 (not (isInt I)) (not (geq I zero and lt I N)) p4 p41) ([p5:pf (not (geq I zero and lt I N))] cut (not (geq I zero) or not (lt I N)) (geq I N) (demorgan_or_not (geq I zero) (lt I N) p5) ([p6:pf (not (geq I zero) or not (lt I N))] cut (not (not (geq I zero))) (geq I N) (equiv_e1 (geq I zero) (not (not (geq I zero))) (equiv_not_not (geq I zero)) (and_e2 (isInt I) (geq I zero) p2)) ([p61:pf (not (not (geq I zero)))] cut (not (lt I N)) (geq I N) (or_e2 (not (geq I zero)) (not (lt I N)) p6 p61) ([p7:pf (not (lt I N))] equiv_e2 (geq I N) (not (not (geq I N))) (equiv_not_not (geq I N)) p7))))))).
inrange_shift : {N:tnum} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) -> pf (not (eq num I zero)) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) = [N:tnum] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] [p2:pf (not (eq num I zero))] cut (> I zero) (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) (neq->geq->gt I zero p2 (inrange_e2 (succ N) I p1)) ([p3:pf (gt I zero)] cut (> (+ (succ N) (neg one)) (+ I (neg one))) (@ num form (@ num (shadowed_0 num) inrange N) (pred I)) (lt_add_closure (succ N) I (neg one) (inrange_e3 (succ N) I p1)) ([p4:pf (lt (pred I) (pred (succ N)))] inrange_i (pred I) N (isInt_pred_i I (inrange_e1 (succ N) I p1)) (greater_greater_eq_minus1 I zero (inrange_e1 (succ N) I p1) p_zero p3) (congr num N (pred (succ N)) ([z1:tm num] lt (pred I) z1) (symm num (pred (succ N)) N (predsucc N)) p4))).
inrange_shift2 : {N:tnum} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) -> pf (@ num form (@ num (shadowed_0 num) inrange N) (succ I)) = [N:tnum] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) I)] and3_l (isInt I) (geq I zero) (lt I (pred N)) (@ num form (@ num (shadowed_0 num) inrange N) (succ I)) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) (pred N) I p1) ([p2:pf (isInt I)] [p3:pf (geq I zero)] [p4:pf (lt I (pred N))] inrange_i (succ I) N (isInt_succ_i I p2) (gt->geq (succ I) zero (trans_gt_geq (succ I) I zero (succ_gt I) p3)) (congr num N (succ (pred N)) ([z1:tm num] lt (succ I) z1) (symm num (succ (pred N)) N (succpred N)) (lt_add_closure (pred N) I one p4))).
not_inrange_zero1 : {N:tnum} pf (geq zero N) -> pf (forall num ([i1:tm num] not (@ num form (@ num (shadowed_0 num) inrange N) i1))) = [N:tnum] [p1:pf (geq zero N)] or_e (== num zero N) (> zero N) (forall num ([x3:tm num] not (@ num form (@ num (shadowed_0 num) inrange N) x3))) (greater_or_eq zero N p1) ([p2:pf (eq num zero N)] forall_i num ([x3:tm num] not (@ num form (@ num (shadowed_0 num) inrange N) x3)) ([i2:tm num] congr num N zero ([z1:tm num] not (@ num form (@ num (shadowed_0 num) inrange z1) i2)) (symm num zero N p2) (not_inrange_zero i2))) ([p3:pf (gt zero N)] forall_i num ([x3:tm num] not (@ num form (@ num (shadowed_0 num) inrange N) x3)) ([i3:tm num] suppose_not (not (@ num form (@ num (shadowed_0 num) inrange N) i3)) ([p4:pf (not (not (@ num form (@ num (shadowed_0 num) inrange N) i3)))] cut (@ num form (@ num (shadowed_0 num) inrange N) i3) false (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange N) i3) (not (not (@ num form (@ num (shadowed_0 num) inrange N) i3))) (equiv_not_not (@ num form (@ num (shadowed_0 num) inrange N) i3)) p4) ([p5:pf (@ num form (@ num (shadowed_0 num) inrange N) i3)] cut (not (<= zero N)) false (gt_not_lt_eq zero N p3) ([p6:pf (lt N zero)] cut (< i3 zero) false (trans_lt i3 N zero (inrange_e3 N i3 p5) p6) ([p7:pf (lt i3 zero)] pf_greater_and_greatereq i3 zero false (inrange_e2 N i3 p5) p7)))))).
not_inrange_zero2 : {N:tnum} {I:tm num} pf (isNat N) -> pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) -> pf (not (eq num I zero)) = [N:tnum] [I:tm num] [p1:pf (isNat N)] [p2:pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))] suppose_not (not (eq num I zero)) ([p3:pf (not (not (eq num I zero)))] cut (eq num I zero) false (equiv_e2 (eq num I zero) (not (not (eq num I zero))) (equiv_not_not (eq num I zero)) p3) ([p4:pf (eq num I zero)] cut (> (succ N) zero) false (trans_gt_geq (succ N) N zero (succ_gt N) (isNat->geq_zero N p1)) ([p5:pf (gt (succ N) zero)] cut (@ num form (@ num (shadowed_0 num) inrange (succ N)) zero) false (inrange_i zero (succ N) p_zero (eq->geq zero zero (refl num zero)) (gt_not_lt_eq (succ N) zero p5)) ([p6:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) zero)] cut (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) false (congr num I zero ([z1:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) z1) p4 p6) ([p7:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] not_e (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) p2 p7))))).
inrange_zero : {N:tnum} pf (gt N zero) -> pf (@ num form (@ num (shadowed_0 num) inrange N) zero) = [N:tnum] [p1:pf (gt N zero)] inrange_i zero N p_zero (ord_reflexivity zero) (gt_not_lt_eq N zero p1).
inrange_expand'_not : {N:tm num} {I:tm num} pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) -> pf (not (eq num (succ I) zero)) -> pf (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) (succ I))) = [N:tm num] [I:tm num] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange N) I))] [p2:pf (not (eq num (succ I) zero))] not_ei (@ num form (@ num (shadowed_0 num) inrange N) I) (@ num form (@ num (shadowed_0 num) inrange (succ N)) (succ I)) p1 ([p3:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) (succ I))] cut (> (succ I) zero) (@ num form (@ num (shadowed_0 num) inrange N) I) (neq->geq->gt (succ I) zero p2 (inrange_e2 (succ N) (succ I) p3)) ([p4:pf (gt (succ I) zero)] cut (>= (pred (succ I)) zero) (@ num form (@ num (shadowed_0 num) inrange N) I) (greater_greater_eq_minus1 (succ I) zero (inrange_e1 (succ N) (succ I) p3) p_zero p4) ([p5:pf (geq (pred (succ I)) zero)] cut (> (+ (succ N) (neg one)) (+ (succ I) (neg one))) (@ num form (@ num (shadowed_0 num) inrange N) I) (lt_add_closure (succ N) (succ I) (neg one) (inrange_e3 (succ N) (succ I) p3)) ([p6:pf (lt (pred (succ I)) (pred (succ N)))] inrange_i I N (isInt_succ_e I (inrange_e1 (succ N) (succ I) p3)) (congr num I (pred (succ I)) ([z1:tm num] geq z1 zero) (symm num (pred (succ I)) I (predsucc I)) p5) (congr num N (pred (succ N)) ([z2:tm num] lt I z2) (symm num (pred (succ N)) N (predsucc N)) (congr num I (pred (succ I)) ([z3:tm num] lt z3 (pred (succ N))) (symm num (pred (succ I)) I (predsucc I)) p6)))))).
inrange_plus_not : {B:tnum} {A:tnum} {I:tm num} pf (geq B zero) -> pf (not (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I)) -> pf (not (@ num form (@ num (shadowed_0 num) inrange A) I)) = [B:tnum] [A:tnum] [I:tm num] [p0:pf (geq B zero)] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I))] not_ei (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I) (@ num form (@ num (shadowed_0 num) inrange A) I) p1 ([p2:pf (@ num form (@ num (shadowed_0 num) inrange A) I)] inrange_i I (+ A B) (inrange_e1 A I p2) (inrange_e2 A I p2) (less_inc I A B (inrange_e3 A I p2) p0)).
inrange_shift' : {A:tnum} {B:tm num} {I:tnum} pf (isNat A) -> pf (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) -> pf (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) = [A:tnum] [B:tm num] [I:tnum] [p1:pf (isNat A)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange B) (minus I A))] cut (isInt (plus (minus I A) A)) (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (closure_add (minus I A) A (inrange_e1 B (minus I A) p2) (isNat->isInt A p1)) ([p3:pf (isInt (plus (minus I A) A))] cut (geq (plus (minus I A) A) (plus zero A)) (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (ord_add_closure (minus I A) zero A (inrange_e2 B (minus I A) p2)) ([p4:pf (geq (plus (minus I A) A) (plus zero A))] cut (geq (plus (minus I A) A) zero) (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (ord_transitivity (plus (minus I A) A) (plus zero A) zero p4 (congr num (+ zero A) A ([z1:tm num] geq z1 zero) (zero_plus A) (isNat->geq_zero A p1))) ([p5:pf (geq (plus (minus I A) A) zero)] cut (> (+ B A) (+ (minus I A) A)) (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (lt_add_closure B (minus I A) A (inrange_e3 B (minus I A) p2)) ([p6:pf (lt (plus (minus I A) A) (plus B A))] cut (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I) (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (inrange_i I (plus A B) (congr num I (+ (- I A) A) ([z2:tm num] isInt z2) (symm num (+ (- I A) A) I (cancel_a-b+b I A)) p3) (congr num I (+ (- I A) A) ([z3:tm num] geq z3 zero) (symm num (+ (- I A) A) I (cancel_a-b+b I A)) p5) (congr2 num num I (+ (- I A) A) (plus A B) (plus B A) ([z1:tm num] [z2:tm num] lt z1 z2) (symm num (+ (- I A) A) I (cancel_a-b+b I A)) (comm_add A B) p6)) ([p7:pf (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I)] congr num (plus B A) (plus A B) ([z4:tm num] @ num form (@ num (shadowed_0 num) inrange z4) I) (comm_add B A) p7))))).
inrange_shift'_not : {A:tnum} {B:tnum} {I:tm num} pf (isNat A) -> pf (not (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I)) -> pf (not (@ num form (@ num (shadowed_0 num) inrange B) (minus I A))) = [A:tnum] [B:tnum] [I:tm num] [p1:pf (isNat A)] [p2:pf (not (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I))] not_ei (@ num form (@ num (shadowed_0 num) inrange (plus B A)) I) (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) p2 ([p3:pf (@ num form (@ num (shadowed_0 num) inrange B) (minus I A))] inrange_shift' A B I p1 p3).
inrange_shrink_not : {N:tnum} {I:tm num} pf (isInt N) -> pf (not (eq num I (pred N))) -> pf (not (@ num form (@ num (shadowed_0 num) inrange (pred N)) I)) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) = [N:tnum] [I:tm num] [p0:pf (isInt N)] [p2:pf (not (eq num I (pred N)))] [p1:pf (not (@ num form (@ num (shadowed_0 num) inrange (pred N)) I))] not_ei (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) (@ num form (@ num (shadowed_0 num) inrange N) I) p1 ([p3:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] cut (<= I (pred N)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) (lesseq_minus1_i I N (inrange_e1 N I p3) p0 (inrange_e3 N I p3)) ([p4:pf (leq I (pred N))] inrange_i I (pred N) (inrange_e1 N I p3) (inrange_e2 N I p3) (neq->leq->lt I (pred N) p2 p4))).
inrange_shrink' : {A:tnum} {I:tnum} {B:tnum} pf (isNat A) -> pf (not (lt I A)) -> pf (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I) -> pf (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) = [A:tnum] [I:tnum] [B:tnum] [p1:pf (isNat A)] [p2:pf (not (lt I A))] [p3:pf (@ num form (@ num (shadowed_0 num) inrange (plus A B)) I)] cut (isInt (plus I (neg A))) (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) (closure_add I (neg A) (inrange_e1 (plus A B) I p3) (neg_exists A (isNat->isInt A p1))) ([p4:pf (isInt (minus I A))] cut (geq I A) (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) (equiv_e2 (geq I A) (not (not (geq I A))) (equiv_not_not (geq I A)) p2) ([p21:pf (geq I A)] cut (geq (minus I A) zero) (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) (congr num zero (- A A) ([z1:tm num] geq (minus I A) z1) (inv_add2 A) (greatereq_plus_cong2 I A (neg A) p21)) ([p5:pf (geq (minus I A) zero)] cut (lt (minus I A) B) (@ num form (@ num (shadowed_0 num) inrange B) (minus I A)) (congr num B (- (+ A B) A) ([z2:tm num] lt (minus I A) z2) (symm num (- (+ A B) A) B (cancel_a+b-a A B)) (lt_add_closure (plus A B) I (neg A) (inrange_e3 (plus A B) I p3))) ([p6:pf (lt (minus I A) B)] inrange_i (minus I A) B p4 p5 p6)))).
inrange_shrink : {N:tm num} {I:tm num} pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (isInt N) -> pf (not (eq num I (pred N))) -> pf (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) = [N:tm num] [I:tm num] [p1:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] [p2:pf (isInt N)] [p3:pf (not (eq num I (pred N)))] and3_l (isInt I) (geq I zero) (lt I N) (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) (def2_e num num ([x3:tm num] [x4:tm num] isInt x4 and geq x4 zero and lt x4 x3) N I p1) ([p4:pf (isInt I)] [p5:pf (geq I zero)] [p6:pf (lt I N)] cut (<= I (pred N)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) (lesseq_minus1_i I N p4 p2 p6) ([p61:pf (leq I (pred N))] cut (< I (pred N)) (@ num form (@ num (shadowed_0 num) inrange (pred N)) I) (neq->leq->lt I (pred N) p3 p61) ([p62:pf (lt I (pred N))] inrange_i I (pred N) p4 p5 p62))).
inrange_step' : {N:tnum} {I:tm num} pf (isInt N) -> pf (not (@ num form (@ num (shadowed_0 num) inrange N) I)) -> pf (eq num I N or not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) = [N:tnum] [I:tm num] [p1:pf (isInt N)] [p2:pf (not (@ num form (@ num (shadowed_0 num) inrange N) I))] suppose_not (eq num I N or not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) ([q1:pf (not (eq num I N or not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)))] cut (not (eq num I N) and not (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))) false (demorgan_not_and (eq num I N) (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) q1) ([q2:pf (not (eq num I N) and not (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)))] cut (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) false (equiv_e2 (@ num form (@ num (shadowed_0 num) inrange (succ N)) I) (not (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))) (equiv_not_not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)) (and_e2 (not (eq num I N)) (not (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))) q2)) ([q3:pf (@ num form (@ num (shadowed_0 num) inrange (succ N)) I)] cut (@ num form (@ num (shadowed_0 num) inrange (pred (succ N))) I) false (inrange_shrink (succ N) I q3 (isInt_succ_i N p1) (congr num (pred (succ N)) N ([z1:tm num] not (eq num I z1)) (predsucc N) (and_e1 (not (eq num I N)) (not (not (@ num form (@ num (shadowed_0 num) inrange (succ N)) I))) q2))) ([q4:pf (@ num form (@ num (shadowed_0 num) inrange (pred (succ N))) I)] cut (@ num form (@ num (shadowed_0 num) inrange N) I) false (congr num N (pred (succ N)) ([z2:tm num] @ num form (@ num (shadowed_0 num) inrange z2) I) (symm num (pred (succ N)) N (predsucc N)) q4) ([q5:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] not_e (@ num form (@ num (shadowed_0 num) inrange N) I) p2 q5))))).
inrange_expand'' : {N':tnum} {N:tnum} {I:tm num} pf (geq N' N) -> pf (@ num form (@ num (shadowed_0 num) inrange N) I) -> pf (@ num form (@ num (shadowed_0 num) inrange N') I) = [N':tnum] [N:tnum] [I:tm num] [p1:pf (geq N' N)] [p2:pf (@ num form (@ num (shadowed_0 num) inrange N) I)] inrange_i I N' (inrange_e1 N I p2) (inrange_e2 N I p2) (trans_geq_gt N' N I p1 (inrange_e3 N I p2)).
leastn_hyp : (tm num -> tform) -> tm num -> tform = [f:tm num -> tform] [n:tm num] exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k) imp exists num ([i1:tm num] isNat i1 and f i1 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp not (f j))).
leastn_zero : {F:tm num -> tform} pf (leastn_hyp ([x3:tm num] F x3) zero) = [F:tm num -> tform] imp_i (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange zero) k and F k)) (exists num ([i1:tm num] isNat i1 and F i1 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp not (F j)))) ([p1:pf (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange zero) k and F k))] exists_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange zero) x3 and F x3) (exists num ([i2:tm num] isNat i2 and F i2 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i2) j imp not (F j)))) p1 ([k:tm num] [p2:pf (@ num form (@ num (shadowed_0 num) inrange zero) k and F k)] and_l (@ num form (@ num (shadowed_0 num) inrange zero) k) (F k) (exists num ([i3:tm num] isNat i3 and F i3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i3) j imp not (F j)))) p2 ([p3:pf (@ num form (@ num (shadowed_0 num) inrange zero) k)] [x3:pf (F k)] false_e (exists num ([i4:tm num] isNat i4 and F i4 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i4) j imp not (F j)))) (not_e (@ num form (@ num (shadowed_0 num) inrange zero) k) (not_inrange_zero k) p3)))).
leastn_step : {f:tm num -> tform} {n:tnum} pf (isNat n) -> pf (leastn_hyp ([x3:tm num] f x3) n) -> pf (leastn_hyp ([x3:tm num] f x3) (succ n)) = [f:tm num -> tform] [n:tnum] [p1:pf (isNat n)] [p2:pf (leastn_hyp ([x3:tm num] f x3) n)] imp_i (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) k and f k)) (exists num ([i1:tm num] isNat i1 and f i1 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp not (f j)))) ([p3:pf (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) k and f k))] or_e (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k)) (not (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k))) (exists num ([i2:tm num] isNat i2 and f i2 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i2) j imp not (f j)))) (excluded_middle (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k))) ([p11:pf (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k))] imp_e (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k)) (exists num ([i3:tm num] isNat i3 and f i3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i3) j imp not (f j)))) p2 p11) ([p31:pf (not (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange n) k and f k)))] exists_e num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ n)) x3 and f x3) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) p3 ([k:tm num] [p32:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) k and f k)] and_l (@ num form (@ num (shadowed_0 num) inrange (succ n)) k) (f k) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) p32 ([p33:pf (@ num form (@ num (shadowed_0 num) inrange (succ n)) k)] [p34:pf (f k)] cut (not (@ num form (@ num (shadowed_0 num) inrange n) k)) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) (not_i (@ num form (@ num (shadowed_0 num) inrange n) k) ([p35:pf (@ num form (@ num (shadowed_0 num) inrange n) k)] not_e (exists num ([k1:tm num] @ num form (@ num (shadowed_0 num) inrange n) k1 and f k1)) p31 (exists_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 and f x3) k (and_i (@ num form (@ num (shadowed_0 num) inrange n) k) (f k) p35 p34)))) ([p36:pf (not (@ num form (@ num (shadowed_0 num) inrange n) k))] cut (eq num k n or not (@ num form (@ num (shadowed_0 num) inrange (succ n)) k)) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) (inrange_step' n k (isNat->isInt n p1) p36) ([p37:pf (eq num k n or not (@ num form (@ num (shadowed_0 num) inrange (succ n)) k))] cut (eq num k n) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) (or_e1 (eq num k n) (not (@ num form (@ num (shadowed_0 num) inrange (succ n)) k)) p37 (not_not_i (@ num form (@ num (shadowed_0 num) inrange (succ n)) k) p33)) ([p38:pf (eq num k n)] cut (f n) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) (congr num n k ([x3:tm num] f x3) (symm num k n p38) p34) ([p41:pf (f n)] cut (forall num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 imp not (f x3))) (exists num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j)))) (forall_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 imp not (f x3)) ([j:tm num] imp_i (@ num form (@ num (shadowed_0 num) inrange n) j) (not (f j)) ([p42:pf (@ num form (@ num (shadowed_0 num) inrange n) j)] not_i (f j) ([p43:pf (f j)] not_e (exists num ([k2:tm num] @ num form (@ num (shadowed_0 num) inrange n) k2 and f k2)) p31 (exists_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange n) x3 and f x3) j (and_i (@ num form (@ num (shadowed_0 num) inrange n) j) (f j) p42 p43)))))) ([p45:pf (forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange n) j imp not (f j)))] exists_i num ([x3:tm num] isNat x3 and f x3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange x3) j imp not (f j))) n (and3_i (isNat n) (f n) (forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange n) j imp not (f j))) p1 p41 p45)))))))))).
leastn : {N:tnum} {f:tnum -> tform} pf (isNat N) -> pf (f N) -> pf (exists num ([i1:tm num] isNat i1 and f i1 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i1) j imp not (f j)))) = [N:tnum] [f:tnum -> tform] [p1:pf (isNat N)] [p2:pf (f N)] cut (leastn_hyp ([x3:tm num] f x3) (succ N)) (exists num ([i2:tm num] isNat i2 and f i2 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i2) j imp not (f j)))) (forall_imp_e num ([a:tm num] isNat a) ([a:tm num] leastn_hyp ([x3:tm num] f x3) a) (induction ([x3:tnum] leastn_hyp ([x4:tm num] f x4) x3) (leastn_zero ([x3:tm num] f x3)) ([n:tnum] [x3:pf (isNat n)] [x4:pf (leastn_hyp ([x4:tm num] f x4) n)] leastn_step ([x5:tm num] f x5) n x3 x4)) (succ N) (isNat_succ_i N p1)) ([p3:pf (leastn_hyp ([x3:tm num] f x3) (succ N))] cut (exists num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) x3 and f x3)) (exists num ([i3:tm num] isNat i3 and f i3 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i3) j imp not (f j)))) (exists_i num ([x3:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) x3 and f x3) N (and_i (@ num form (@ num (shadowed_0 num) inrange (succ N)) N) (f N) (inrange_succ_n N p1) p2)) ([p4:pf (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) k and f k))] imp_e (exists num ([k:tm num] @ num form (@ num (shadowed_0 num) inrange (succ N)) k and f k)) (exists num ([i4:tm num] isNat i4 and f i4 and forall num ([j:tm num] @ num form (@ num (shadowed_0 num) inrange i4) j imp not (f j)))) p3 p4)).
subset : {T:tp} tm (rel (shadowed_0 T) (shadowed_0 T)) = [T:tp] _subset T.
set_equiv : {T:tp} tm (eqrel (shadowed_0 T)) = [T:tp] _set_equiv T.
subset_i : {T:tp} {S1:tm (T arrow form)} {S2:tm (T arrow form)} ({x3:tm T} pf (@ T form S1 x3) -> pf (@ T form S2 x3)) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) S2) = [T:tp] [S1:tm (T arrow form)] [S2:tm (T arrow form)] [q1:{x4:tm T} pf (@ T form S1 x4) -> pf (@ T form S2 x4)] def2_i (shadowed_0 T) (shadowed_0 T) ([x3:tm (shadowed_0 T)] [x4:tm (shadowed_0 T)] _forall T ([x5:tm T] _@ T form x3 x5 imp _@ T form x4 x5)) S1 S2 (forall_imp_i T ([x6:tm T] @ T form S1 x6) ([x3:tm T] @ T form S2 x3) ([x7:tm T] [p1:pf (@ T form S1 x7)] q1 x7 p1)).
subset_e : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {X:tm X1} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2) -> pf (@ X1 form S1 X) -> pf (@ X1 form S2 X) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [X:tm X1] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2)] [p2:pf (@ X1 form S1 X)] forall_imp_e X1 ([a:tm X1] _@ X1 form S1 a) ([a:tm X1] _@ X1 form S2 a) (def2_e (shadowed_0 X1) (shadowed_0 X1) ([x3:tm (shadowed_0 X1)] [x4:tm (shadowed_0 X1)] _forall X1 ([x5:tm X1] _@ X1 form x3 x5 imp _@ X1 form x4 x5)) S1 S2 p1) X p2.
set_equiv_i : {T:tp} {S1:tm (T arrow form)} {S2:tm (T arrow form)} pf (forall T ([x3:tm T] @ T form S1 x3 equiv @ T form S2 x3)) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S2) = [T:tp] [S1:tm (T arrow form)] [S2:tm (T arrow form)] [p1:pf (forall T ([x4:tm T] @ T form S1 x4 equiv @ T form S2 x4))] def2_i (shadowed_0 T) (shadowed_0 T) ([x3:tm (shadowed_0 T)] [x4:tm (shadowed_0 T)] _@2 (shadowed_0 T) (shadowed_0 T) form (_subset T) x3 x4 and _@2 (shadowed_0 T) (shadowed_0 T) form (_subset T) x4 x3) S1 S2 (and_i (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S1) S2) (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (subset T) S2) S1) (subset_i T S1 S2 ([x5:tm T] [p2:pf (@ T form S1 x5)] equiv_e1 (@ T form S1 x5) (@ T form S2 x5) (forall_e T ([x3:tm T] @ T form S1 x3 equiv @ T form S2 x3) p1 x5) p2)) (subset_i T S2 S1 ([x6:tm T] [p2:pf (@ T form S2 x6)] equiv_e2 (@ T form S1 x6) (@ T form S2 x6) (forall_e T ([x3:tm T] @ T form S1 x3 equiv @ T form S2 x3) p1 x6) p2))).
set_equiv_i1 : {T:tp} {S1:tm (T arrow form)} {S2:tm (T arrow form)} ({x3:tm T} pf (@ T form S1 x3 equiv @ T form S2 x3)) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S2) = [T:tp] [S1:tm (T arrow form)] [S2:tm (T arrow form)] [p1:{x4:tm T} pf (@ T form S1 x4 equiv @ T form S2 x4)] set_equiv_i T S1 S2 (forall_i T ([x3:tm T] @ T form S1 x3 equiv @ T form S2 x3) ([a:tm T] p1 a)).
set_equiv_i2 : {T:tp} {S1:tm (T arrow form)} {S2:tm (T arrow form)} ({x3:tm T} pf (@ T form S1 x3) -> pf (@ T form S2 x3)) -> ({x4:tm T} pf (@ T form S2 x4) -> pf (@ T form S1 x4)) -> pf (@ (shadowed_0 T) form (@ (shadowed_0 T) (shadowed_0 (shadowed_0 T)) (set_equiv T) S1) S2) = [T:tp] [S1:tm (T arrow form)] [S2:tm (T arrow form)] [q1:{x5:tm T} pf (@ T form S1 x5) -> pf (@ T form S2 x5)] [q2:{x6:tm T} pf (@ T form S2 x6) -> pf (@ T form S1 x6)] set_equiv_i T S1 S2 (forall_i T ([x3:tm T] @ T form S1 x3 equiv @ T form S2 x3) ([x7:tm T] equiv_i (@ T form S1 x7) (@ T form S2 x7) (imp_i (@ T form S1 x7) (@ T form S2 x7) ([p1:pf (@ T form S1 x7)] imp_e (@ T form S1 x7) (@ T form S2 x7) (imp_i (@ T form S1 x7) (@ T form S2 x7) ([x3:pf (@ T form S1 x7)] q1 x7 x3)) p1)) (imp_i (@ T form S2 x7) (@ T form S1 x7) ([p1:pf (@ T form S2 x7)] imp_e (@ T form S2 x7) (@ T form S1 x7) (imp_i (@ T form S2 x7) (@ T form S1 x7) ([x3:pf (@ T form S2 x7)] q2 x7 x3)) p1)))).
set_equiv_i3 : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S1) -> pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2)] [p4:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S1)] set_equiv_i2 X1 S1 S2 ([x3:tm X1] [p6:pf (@ X1 form S1 x3)] subset_e X1 S1 S2 x3 p2 p6) ([x4:tm X1] [p6:pf (@ X1 form S2 x4)] subset_e X1 S2 S1 x4 p4 p6).
set_equiv_e : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {X:tm X1} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) -> pf (@ X1 form S1 X equiv @ X1 form S2 X) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [X:tm X1] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2)] and_l (_@2 (shadowed_0 X1) (shadowed_0 X1) form (_subset X1) S1 S2) (_@2 (shadowed_0 X1) (shadowed_0 X1) form (_subset X1) S2 S1) (@ X1 form S1 X equiv @ X1 form S2 X) (def2_e (shadowed_0 X1) (shadowed_0 X1) ([x3:tm (shadowed_0 X1)] [x4:tm (shadowed_0 X1)] _@2 (shadowed_0 X1) (shadowed_0 X1) form (_subset X1) x3 x4 and _@2 (shadowed_0 X1) (shadowed_0 X1) form (_subset X1) x4 x3) S1 S2 p1) ([p2:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S1) S2)] [p3:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (subset X1) S2) S1)] equiv_i (@ X1 form S1 X) (@ X1 form S2 X) (imp_i (@ X1 form S1 X) (@ X1 form S2 X) ([p4:pf (@ X1 form S1 X)] subset_e X1 S1 S2 X p2 p4)) (imp_i (@ X1 form S2 X) (@ X1 form S1 X) ([p4:pf (@ X1 form S2 X)] subset_e X1 S2 S1 X p3 p4))).
set_equiv_e1 : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {X:tm X1} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) -> pf (@ X1 form S1 X) -> pf (@ X1 form S2 X) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [X:tm X1] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2)] [p2:pf (@ X1 form S1 X)] equiv_e1 (@ X1 form S1 X) (@ X1 form S2 X) (set_equiv_e X1 S1 S2 X p1) p2.
set_equiv_e2 : {X1:tp} {S1:tm (shadowed_0 X1)} {S2:tm (shadowed_0 X1)} {X:tm X1} pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2) -> pf (@ X1 form S2 X) -> pf (@ X1 form S1 X) = [X1:tp] [S1:tm (shadowed_0 X1)] [S2:tm (shadowed_0 X1)] [X:tm X1] [p1:pf (@ (shadowed_0 X1) form (@ (shadowed_0 X1) (shadowed_0 (shadowed_0 X1)) (set_equiv X1) S1) S2)] [p2:pf (@ X1 form S2 X)] equiv_e2 (@ X1 form S1 X) (@ X1 form S2 X) (set_equiv_e X1 S1 S2 X p1) p2.
domain : {T1:tp} {T2:tp} tm (rel (rel T1 T2) T1) = [T1:tp] [T2:tp] lam2 (T1 arrow T2 arrow form) T1 form ([r:tm (T1 arrow T2 arrow form)] [x3:tm T1] exists T2 ([y:tm T2] @ T2 form (@ T1 (T2 arrow form) r x3) y)).
subrel : {T:tp} {U:tp} tm (rel (rel T U) (rel T U)) = [T:tp] [U:tp] lam2 (T arrow U arrow form) (T arrow U arrow form) form ([f:tm (T arrow U arrow form)] [g:tm (T arrow U arrow form)] forall2 T U ([s:tm T] [s':tm U] @ U form (@ T (U arrow form) f s) s' imp @ U form (@ T (U arrow form) g s) s')).
emptyrel : {T:tp} {U:tp} tm (rel T U) = [T:tp] [U:tp] lam2 T U form ([x3:tm T] [y:tm U] false).
rel_union : {T:tp} {U:tp} tm (2ary (rel T U)) = [T:tp] [U:tp] lam2 (T arrow U arrow form) (T arrow U arrow form) (T arrow U arrow form) ([f:tm (T arrow U arrow form)] [g:tm (T arrow U arrow form)] lam2 T U form ([x3:tm T] [y:tm U] @ U form (@ T (U arrow form) f x3) y or @ U form (@ T (U arrow form) g x3) y)).
rel_intersect : {T:tp} {U:tp} tm (2ary (rel T U)) = [T:tp] [U:tp] lam2 (T arrow U arrow form) (T arrow U arrow form) (T arrow U arrow form) ([f:tm (T arrow U arrow form)] [g:tm (T arrow U arrow form)] lam2 T U form ([x3:tm T] [y:tm U] @ U form (@ T (U arrow form) f x3) y and @ U form (@ T (U arrow form) g x3) y)).
reflexive : {T:tp} tm (shadowed_0 (rel T T)) = [T:tp] lam (T arrow T arrow form) form ([r:tm (T arrow T arrow form)] forall T ([x3:tm T] @ T form (@ T (T arrow form) r x3) x3)).
symmetric : {T:tp} tm (shadowed_0 (rel T T)) = [T:tp] lam (T arrow T arrow form) form ([r:tm (T arrow T arrow form)] forall2 T T ([x3:tm T] [y:tm T] @ T form (@ T (T arrow form) r x3) y imp @ T form (@ T (T arrow form) r y) x3)).
transitive : {T:tp} tm (shadowed_0 (rel T T)) = [T:tp] lam (T arrow T arrow form) form ([r:tm (T arrow T arrow form)] forall3 T T T ([x3:tm T] [y:tm T] [z1:tm T] @ T form (@ T (T arrow form) r x3) y imp @ T form (@ T (T arrow form) r y) z1 imp @ T form (@ T (T arrow form) r x3) z1)).
domain_i : {X1:tp} {X2:tp} {R:tm (X2 arrow X1 arrow form)} {X:tm X2} {Y:tm X1} pf (@ X1 form (@ X2 (X1 arrow form) R X) Y) -> pf (@ X2 form (@ (rel X2 X1) (shadowed_0 X2) (domain X2 X1) R) X) = [X1:tp] [X2:tp] [R:tm (X2 arrow X1 arrow form)] [X:tm X2] [Y:tm X1] [p1:pf (@ X1 form (@ X2 (X1 arrow form) R X) Y)] def2_i (rel X2 X1) X2 ([x3:tm (rel X2 X1)] [x4:tm X2] exists X1 ([y:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x4) y)) R X (exists_i X1 ([x3:tm X1] @ X1 form (@ X2 (X1 arrow form) R X) x3) Y p1).
domain_e : {X1:tp} {X2:tp} {R:tm (rel X1 X2)} {X:tm X1} {A:tform} pf (@ X1 form (@ (rel X1 X2) (shadowed_0 X1) (domain X1 X2) R) X) -> ({y:tm X2} pf (@ X2 form (@ X1 (shadowed_0 X2) R X) y) -> pf A) -> pf A = [X1:tp] [X2:tp] [R:tm (rel X1 X2)] [X:tm X1] [A:tform] [p2:pf (@ X1 form (@ (rel X1 X2) (shadowed_0 X1) (domain X1 X2) R) X)] [p4:{y:tm X2} pf (@ X2 form (@ X1 (shadowed_0 X2) R X) y) -> pf A] exists_e X2 ([x3:tm X2] @ X2 form (@ X1 (X2 arrow form) R X) x3) A (def2_e X1 (rel X1 X2) ([x3:tm (rel X1 X2)] [x4:tm X1] exists X2 ([y:tm X2] @ X2 form (@ X1 (X2 arrow form) x3 x4) y)) R X p2) ([y:tm X2] [p6:pf (@ X2 form (@ X1 (X2 arrow form) R X) y)] p4 y p6).
reflexive_lemma : {T:tp} tm (rel T T) -> tm T -> type = [T:tp] [r:tm (rel T T)] [x3:tm T] pf (@ T form (@ T (shadowed_0 T) r x3) x3).
reflexive_i : {T:tp} {R:tm (rel T T)} ({x3:tm T} reflexive_lemma T R x3) -> pf (@ (rel T T) form (reflexive T) R) = [T:tp] [R:tm (rel T T)] [q1:{x4:tm T} reflexive_lemma T R x4] def1_i (rel T T) ([x3:tm (rel T T)] forall T ([x5:tm T] @ T form (@ T (T arrow form) x3 x5) x5)) R (forall_i T ([x3:tm T] @ T form (@ T (shadowed_0 T) R x3) x3) ([a:tm T] q1 a)).
reflexive_e : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} pf (@ (rel X1 X1) form (reflexive X1) R) -> reflexive_lemma X1 R X = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [p1:pf (@ (rel X1 X1) form (reflexive X1) R)] forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) R x3) x3) (def1_e (rel X1 X1) ([x3:tm (rel X1 X1)] forall X1 ([x4:tm X1] @ X1 form (@ X1 (X1 arrow form) x3 x4) x4)) R p1) X.
symmetric_lemma : {T:tp} tm (rel T T) -> tm T -> tm T -> type = [T:tp] [r:tm (rel T T)] [x3:tm T] [x4:tm T] pf (@ T form (@ T (shadowed_0 T) r x3) x4) -> pf (@ T form (@ T (shadowed_0 T) r x4) x3).
symmetric_i : {T:tp} {R:tm (rel T T)} ({x3:tm T} {y:tm T} symmetric_lemma T R x3 y) -> pf (@ (rel T T) form (symmetric T) R) = [T:tp] [R:tm (rel T T)] [q1:{x4:tm T} {y:tm T} symmetric_lemma T R x4 y] def1_i (rel T T) ([x3:tm (rel T T)] forall2 T T ([x5:tm T] [y:tm T] @ T form (@ T (T arrow form) x3 x5) y imp @ T form (@ T (T arrow form) x3 y) x5)) R (forall2_imp_i T T ([x3:tm T] [x4:tm T] @ T form (@ T (shadowed_0 T) R x3) x4) ([x3:tm T] [x4:tm T] @ T form (@ T (shadowed_0 T) R x4) x3) ([x3:tm T] [x4:tm T] [x5:pf (@ T form (@ T (shadowed_0 T) R x3) x4)] q1 x3 x4 x5)).
symmetric_e : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (@ (rel X1 X1) form (symmetric X1) R) -> symmetric_lemma X1 R X Y = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (rel X1 X1) form (symmetric X1) R)] [x3:pf (@ X1 form (@ X1 (X1 arrow form) R X) Y)] forall2_imp_e X1 X1 ([x4:tm X1] [y:tm X1] @ X1 form (@ X1 (X1 arrow form) R x4) y) ([x5:tm X1] [y:tm X1] @ X1 form (@ X1 (X1 arrow form) R y) x5) (def1_e (rel X1 X1) ([x4:tm (rel X1 X1)] forall2 X1 X1 ([x6:tm X1] [y:tm X1] @ X1 form (@ X1 (X1 arrow form) x4 x6) y imp @ X1 form (@ X1 (X1 arrow form) x4 y) x6)) R p1) X Y x3.
transitive_lemma : {T:tp} tm (rel T T) -> tm T -> tm T -> tm T -> type = [T:tp] [r:tm (rel T T)] [x3:tm T] [x4:tm T] [x5:tm T] pf (@ T form (@ T (shadowed_0 T) r x3) x4) -> pf (@ T form (@ T (shadowed_0 T) r x4) x5) -> pf (@ T form (@ T (shadowed_0 T) r x3) x5).
transitive_i : {T:tp} {R:tm (rel T T)} ({x3:tm T} {y:tm T} {z1:tm T} transitive_lemma T R x3 y z1) -> pf (@ (rel T T) form (transitive T) R) = [T:tp] [R:tm (rel T T)] [q1:{x4:tm T} {y:tm T} {z2:tm T} transitive_lemma T R x4 y z2] def1_i (rel T T) ([x3:tm (rel T T)] forall3 T T T ([x5:tm T] [y:tm T] [z3:tm T] @ T form (@ T (T arrow form) x3 x5) y imp @ T form (@ T (T arrow form) x3 y) z3 imp @ T form (@ T (T arrow form) x3 x5) z3)) R (forall3_imp2_i T T T ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x3) x4) ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x4) x5) ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x3) x5) ([x3:tm T] [x4:tm T] [x5:tm T] [x6:pf (@ T form (@ T (shadowed_0 T) R x3) x4)] [x7:pf (@ T form (@ T (shadowed_0 T) R x4) x5)] q1 x3 x4 x5 x6 x7)).
transitive_e : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (@ (rel X1 X1) form (transitive X1) R) -> transitive_lemma X1 R X Y Z = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [p1:pf (@ (rel X1 X1) form (transitive X1) R)] [x3:pf (@ X1 form (@ X1 (X1 arrow form) R X) Y)] [x4:pf (@ X1 form (@ X1 (X1 arrow form) R Y) Z)] forall3_imp2_e X1 X1 X1 ([x5:tm X1] [y:tm X1] [z1:tm X1] @ X1 form (@ X1 (X1 arrow form) R x5) y) ([x6:tm X1] [y:tm X1] [z2:tm X1] @ X1 form (@ X1 (X1 arrow form) R y) z2) ([x7:tm X1] [y:tm X1] [z3:tm X1] @ X1 form (@ X1 (X1 arrow form) R x7) z3) (def1_e (rel X1 X1) ([x5:tm (rel X1 X1)] forall3 X1 X1 X1 ([x8:tm X1] [y:tm X1] [z4:tm X1] @ X1 form (@ X1 (X1 arrow form) x5 x8) y imp @ X1 form (@ X1 (X1 arrow form) x5 y) z4 imp @ X1 form (@ X1 (X1 arrow form) x5 x8) z4)) R p1) X Y Z x3 x4.
subrel_i : {X1:tp} {X2:tp} {F:tm (X1 arrow X2 arrow form)} {G:tm (X1 arrow X2 arrow form)} ({x3:tm X1} {y:tm X2} pf (@ X2 form (@ X1 (X2 arrow form) F x3) y) -> pf (@ X2 form (@ X1 (X2 arrow form) G x3) y)) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) G) = [X1:tp] [X2:tp] [F:tm (X1 arrow X2 arrow form)] [G:tm (X1 arrow X2 arrow form)] [p1:{x4:tm X1} {y:tm X2} pf (@ X2 form (@ X1 (X2 arrow form) F x4) y) -> pf (@ X2 form (@ X1 (X2 arrow form) G x4) y)] def2_i (rel X1 X2) (rel X1 X2) ([x3:tm (rel X1 X2)] [x4:tm (rel X1 X2)] forall2 X1 X2 ([s:tm X1] [s':tm X2] @ X2 form (@ X1 (X2 arrow form) x3 s) s' imp @ X2 form (@ X1 (X2 arrow form) x4 s) s')) F G (forall2_i X1 X2 ([x3:tm X1] [x4:tm X2] @ X2 form (@ X1 (X2 arrow form) F x3) x4 imp @ X2 form (@ X1 (X2 arrow form) G x3) x4) ([x5:tm X1] [y:tm X2] imp_i (@ X2 form (@ X1 (X2 arrow form) F x5) y) (@ X2 form (@ X1 (X2 arrow form) G x5) y) ([p2:pf (@ X2 form (@ X1 (X2 arrow form) F x5) y)] p1 x5 y p2))).
subrel_e : {X1:tp} {X2:tp} {F:tm (rel X1 X2)} {G:tm (rel X1 X2)} {X:tm X1} {Y:tm X2} pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) G) -> pf (@ X2 form (@ X1 (shadowed_0 X2) F X) Y) -> pf (@ X2 form (@ X1 (shadowed_0 X2) G X) Y) = [X1:tp] [X2:tp] [F:tm (rel X1 X2)] [G:tm (rel X1 X2)] [X:tm X1] [Y:tm X2] [p1:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) G)] [p2:pf (@ X2 form (@ X1 (shadowed_0 X2) F X) Y)] imp_e (@ X2 form (@ X1 (X2 arrow form) F X) Y) (@ X2 form (@ X1 (X2 arrow form) G X) Y) (forall2_e X1 X2 ([x3:tm X1] [x4:tm X2] @ X2 form (@ X1 (X2 arrow form) F x3) x4 imp @ X2 form (@ X1 (X2 arrow form) G x3) x4) (def2_e (rel X1 X2) (rel X1 X2) ([x3:tm (rel X1 X2)] [x4:tm (rel X1 X2)] forall2 X1 X2 ([s:tm X1] [s':tm X2] @ X2 form (@ X1 (X2 arrow form) x3 s) s' imp @ X2 form (@ X1 (X2 arrow form) x4 s) s')) F G p1) X Y) p2.
subrel_refl : {X1:tp} {X2:tp} {F:tm (rel X1 X2)} pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) F) = [X1:tp] [X2:tp] [F:tm (rel X1 X2)] subrel_i X1 X2 F F ([x3:tm X1] [y:tm X2] [p1:pf (@ X2 form (@ X1 (X2 arrow form) F x3) y)] p1).
subrel_trans : {X1:tp} {X2:tp} {F:tm (rel X1 X2)} {G:tm (rel X1 X2)} {H:tm (rel X1 X2)} pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) G) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) G) H) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) H) = [X1:tp] [X2:tp] [F:tm (rel X1 X2)] [G:tm (rel X1 X2)] [H:tm (rel X1 X2)] [p1:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) F) G)] [p2:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) G) H)] subrel_i X1 X2 F H ([x3:tm X1] [y:tm X2] [p3:pf (@ X2 form (@ X1 (shadowed_0 X2) F x3) y)] subrel_e X1 X2 G H x3 y p2 (subrel_e X1 X2 F G x3 y p1 p3)).
rel_intersect_i : {X1:tp} {X2:tp} {F:tm (X2 arrow X1 arrow form)} {X:tm X2} {Y:tm X1} {G:tm (X2 arrow X1 arrow form)} pf (@ X1 form (@ X2 (X1 arrow form) F X) Y) -> pf (@ X1 form (@ X2 (X1 arrow form) G X) Y) -> pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_intersect X2 X1) F) G) X) Y) = [X1:tp] [X2:tp] [F:tm (X2 arrow X1 arrow form)] [X:tm X2] [Y:tm X1] [G:tm (X2 arrow X1 arrow form)] [p1:pf (@ X1 form (@ X2 (X1 arrow form) F X) Y)] [p2:pf (@ X1 form (@ X2 (X1 arrow form) G X) Y)] def4_i (rel X2 X1) (rel X2 X1) X2 X1 ([x3:tm (rel X2 X1)] [x4:tm (rel X2 X1)] [x5:tm X2] [x6:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x5) x6 and @ X1 form (@ X2 (X1 arrow form) x4 x5) x6) F G X Y (and_i (@ X1 form (@ X2 (X1 arrow form) F X) Y) (@ X1 form (@ X2 (X1 arrow form) G X) Y) p1 p2).
rel_intersect_e1 : {X1:tp} {X2:tp} {F:tm (rel X2 X1)} {G:tm (rel X2 X1)} {X:tm X2} {Y:tm X1} pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_intersect X2 X1) F) G) X) Y) -> pf (@ X1 form (@ X2 (shadowed_0 X1) F X) Y) = [X1:tp] [X2:tp] [F:tm (rel X2 X1)] [G:tm (rel X2 X1)] [X:tm X2] [Y:tm X1] [p1:pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_intersect X2 X1) F) G) X) Y)] and_e1 (@ X1 form (@ X2 (X1 arrow form) F X) Y) (@ X1 form (@ X2 (X1 arrow form) G X) Y) (def4_e X1 X2 (rel X2 X1) (rel X2 X1) ([x3:tm (rel X2 X1)] [x4:tm (rel X2 X1)] [x5:tm X2] [x6:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x5) x6 and @ X1 form (@ X2 (X1 arrow form) x4 x5) x6) F G X Y p1).
rel_intersect_e2 : {X1:tp} {X2:tp} {F:tm (rel X2 X1)} {G:tm (rel X2 X1)} {X:tm X2} {Y:tm X1} pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_intersect X2 X1) F) G) X) Y) -> pf (@ X1 form (@ X2 (shadowed_0 X1) G X) Y) = [X1:tp] [X2:tp] [F:tm (rel X2 X1)] [G:tm (rel X2 X1)] [X:tm X2] [Y:tm X1] [p1:pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_intersect X2 X1) F) G) X) Y)] and_e2 (@ X1 form (@ X2 (X1 arrow form) F X) Y) (@ X1 form (@ X2 (X1 arrow form) G X) Y) (def4_e X1 X2 (rel X2 X1) (rel X2 X1) ([x3:tm (rel X2 X1)] [x4:tm (rel X2 X1)] [x5:tm X2] [x6:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x5) x6 and @ X1 form (@ X2 (X1 arrow form) x4 x5) x6) F G X Y p1).
rel_union_i1 : {X1:tp} {X2:tp} {F:tm (X2 arrow X1 arrow form)} {X:tm X2} {Y:tm X1} {G:tm (rel X2 X1)} pf (@ X1 form (@ X2 (X1 arrow form) F X) Y) -> pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_union X2 X1) F) G) X) Y) = [X1:tp] [X2:tp] [F:tm (X2 arrow X1 arrow form)] [X:tm X2] [Y:tm X1] [G:tm (rel X2 X1)] [p1:pf (@ X1 form (@ X2 (X1 arrow form) F X) Y)] def4_i (rel X2 X1) (rel X2 X1) X2 X1 ([x3:tm (rel X2 X1)] [x4:tm (rel X2 X1)] [x5:tm X2] [x6:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x5) x6 or @ X1 form (@ X2 (X1 arrow form) x4 x5) x6) F G X Y (or_i1 (@ X1 form (@ X2 (X1 arrow form) F X) Y) (@ X1 form (@ X2 (X1 arrow form) G X) Y) p1).
rel_union_i2 : {X1:tp} {X2:tp} {G:tm (X2 arrow X1 arrow form)} {X:tm X2} {Y:tm X1} {F:tm (rel X2 X1)} pf (@ X1 form (@ X2 (X1 arrow form) G X) Y) -> pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_union X2 X1) F) G) X) Y) = [X1:tp] [X2:tp] [G:tm (X2 arrow X1 arrow form)] [X:tm X2] [Y:tm X1] [F:tm (rel X2 X1)] [p1:pf (@ X1 form (@ X2 (X1 arrow form) G X) Y)] def4_i (rel X2 X1) (rel X2 X1) X2 X1 ([x3:tm (rel X2 X1)] [x4:tm (rel X2 X1)] [x5:tm X2] [x6:tm X1] @ X1 form (@ X2 (X1 arrow form) x3 x5) x6 or @ X1 form (@ X2 (X1 arrow form) x4 x5) x6) F G X Y (or_i2 (@ X1 form (@ X2 (X1 arrow form) G X) Y) (@ X1 form (@ X2 (X1 arrow form) F X) Y) p1).
rel_union_e : {X1:tp} {X2:tp} {F:tm (rel X2 X1)} {G:tm (rel X2 X1)} {X:tm X2} {Y:tm X1} {A:tform} pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_union X2 X1) F) G) X) Y) -> (pf (@ X1 form (@ X2 (shadowed_0 X1) F X) Y) -> pf A) -> (pf (@ X1 form (@ X2 (shadowed_0 X1) G X) Y) -> pf A) -> pf A = [X1:tp] [X2:tp] [F:tm (rel X2 X1)] [G:tm (rel X2 X1)] [X:tm X2] [Y:tm X1] [A:tform] [p1:pf (@ X1 form (@ X2 (shadowed_0 X1) (@ (rel X2 X1) (rel X2 X1) (@ (rel X2 X1) (1ary (rel X2 X1)) (rel_union X2 X1) F) G) X) Y)] [x3:pf (@ X1 form (@ X2 (X1 arrow form) F X) Y) -> pf A] [x4:pf (@ X1 form (@ X2 (X1 arrow form) G X) Y) -> pf A] or_e (@ X1 form (@ X2 (X1 arrow form) F X) Y) (@ X1 form (@ X2 (X1 arrow form) G X) Y) A (def4_e X1 X2 (rel X2 X1) (rel X2 X1) ([x5:tm (rel X2 X1)] [x6:tm (rel X2 X1)] [x7:tm X2] [x8:tm X1] @ X1 form (@ X2 (X1 arrow form) x5 x7) x8 or @ X1 form (@ X2 (X1 arrow form) x6 x7) x8) F G X Y p1) ([x5:pf (@ X1 form (@ X2 (X1 arrow form) F X) Y)] x3 x5) ([x5:pf (@ X1 form (@ X2 (X1 arrow form) G X) Y)] x4 x5).
eq++ : {Ta:tp} {Tb:tp} tm (shadowed_0 Ta arrow eqrel Ta arrow eqrel Tb arrow eqrel (Ta arrow Tb)) = [Ta:tp] [Tb:tp] lam3 (Ta arrow form) (Ta arrow Ta arrow form) (Tb arrow Tb arrow form) ((Ta arrow Tb) arrow (Ta arrow Tb) arrow form) ([sa:tm (Ta arrow form)] [eq_a:tm (Ta arrow Ta arrow form)] [eq_b:tm (Tb arrow Tb arrow form)] lam2 (Ta arrow Tb) (Ta arrow Tb) form ([f:tm (Ta arrow Tb)] [g:tm (Ta arrow Tb)] forall2 Ta Ta ([x3:tm Ta] [y:tm Ta] @ Ta form sa x3 imp @ Ta form sa y imp @ Ta form (@ Ta (Ta arrow form) eq_a x3) y imp @ Tb form (@ Tb (Tb arrow form) eq_b (@ Ta Tb f x3)) (@ Ta Tb f y) imp @ Tb form (@ Tb (Tb arrow form) eq_b (@ Ta Tb g x3)) (@ Ta Tb g y) imp @ Tb form (@ Tb (Tb arrow form) eq_b (@ Ta Tb f x3)) (@ Ta Tb g y)))).
eq+ : {Ta:tp} {Tb:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel (Ta arrow Tb)) = [Ta:tp] [Tb:tp] @ (shadowed_0 Ta) (eqrel Ta arrow eqrel Tb arrow eqrel (Ta arrow Tb)) (eq++ Ta Tb) (lam Ta form ([x3:tm Ta] true)).
eq_x : {T:tp} tm (eqrel T) = [T:tp] lam2 T T form ([x3:tm T] [x4:tm T] eq T x3 x4).
eq_rel : {Ta:tp} {Tb:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel (rel Ta Tb)) = [Ta:tp] [Tb:tp] lam2 (eqrel Ta) (eqrel Tb) (eqrel (Ta arrow Tb arrow form)) ([H1:tm (eqrel Ta)] [H2:tm (eqrel Tb)] @ (eqrel (Tb arrow form)) (eqrel (Ta arrow Tb arrow form)) (@ (eqrel Ta) (eqrel (Tb arrow form) arrow eqrel (Ta arrow Tb arrow form)) (eq+ Ta (Tb arrow form)) H1) (@ (eqrel form) (eqrel (Tb arrow form)) (@ (eqrel Tb) (eqrel form arrow eqrel (Tb arrow form)) (eq+ Tb form) H2) eq_form)).
rel_refl : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} pf (@ (rel X1 X1) form (reflexive X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) X) = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [x3:pf (@ (rel X1 X1) form (reflexive X1) R)] reflexive_e X1 R X x3.
rel_symm : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (@ (rel X1 X1) form (symmetric X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) X) = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [x3:pf (@ (rel X1 X1) form (symmetric X1) R)] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] symmetric_e X1 R X Y x3 x4.
rel_trans : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (@ (rel X1 X1) form (transitive X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Z) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Z) = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [x3:pf (@ (rel X1 X1) form (transitive X1) R)] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] [x5:pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Z)] transitive_e X1 R X Y Z x3 x4 x5.
eq_form_i : {X:tform} {Y:tform} pf (X equiv Y) -> pf (@ form form (@ form (shadowed_0 form) eq_form X) Y) = [X:tform] [Y:tform] [x3:pf (X equiv Y)] def2_i form form ([x4:tm form] [x5:tm form] x4 equiv x5) X Y x3.
eq_form_i' : {X:tform} {Y:tform} (pf X -> pf Y) -> (pf Y -> pf X) -> pf (@ form form (@ form (shadowed_0 form) eq_form X) Y) = [X:tform] [Y:tform] [q1:pf X -> pf Y] [q2:pf Y -> pf X] def2_i form form ([x3:tm form] [x4:tm form] x3 equiv x4) X Y (equiv_i2 X Y ([x3:pf X] q1 x3) ([x3:pf Y] q2 x3)).
eq_form_e : {X:tm form} {Y:tm form} pf (@ form form (@ form (shadowed_0 form) eq_form X) Y) -> pf (X equiv Y) = [X:tm form] [Y:tm form] [x3:pf (@ form form (@ form (shadowed_0 form) eq_form X) Y)] def2_e form form ([x4:tm form] [x5:tm form] x4 equiv x5) X Y x3.
eq_form_e1 : {X:tm form} {Y:tm form} pf (@ form form (@ form (shadowed_0 form) eq_form X) Y) -> pf X -> pf Y = [X:tm form] [Y:tm form] [p1:pf (@ form form (@ form (shadowed_0 form) eq_form X) Y)] [x3:pf X] equiv_e1 X Y (eq_form_e X Y p1) x3.
eq_form_e2 : {X:tm form} {Y:tm form} pf (@ form form (@ form (shadowed_0 form) eq_form X) Y) -> pf Y -> pf X = [X:tm form] [Y:tm form] [p1:pf (@ form form (@ form (shadowed_0 form) eq_form X) Y)] [x3:pf Y] equiv_e2 X Y (eq_form_e X Y p1) x3.
eq_x_i : {X1:tp} {X:tm X1} {Y:tm X1} pf (eq X1 X Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (eq_x X1) X) Y) = [X1:tp] [X:tm X1] [Y:tm X1] [x3:pf (eq X1 X Y)] def2_i X1 X1 ([x4:tm X1] [x5:tm X1] eq X1 x4 x5) X Y x3.
eq_x_e : {X1:tp} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (shadowed_0 X1) (eq_x X1) X) Y) -> pf (eq X1 X Y) = [X1:tp] [X:tm X1] [Y:tm X1] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) (eq_x X1) X) Y)] def2_e X1 X1 ([x4:tm X1] [x5:tm X1] eq X1 x4 x5) X Y x3.
eq_arith_i : {X:tm num} {Y:tm num} pf (eq num X Y) -> pf (@ num form (@ num (shadowed_0 num) eq_arith X) Y) = [X:tm num] [Y:tm num] [x3:pf (eq num X Y)] def2_i num num ([x4:tm num] [x5:tm num] _eq num x4 x5) X Y x3.
eq_arith_e : {X:tm num} {Y:tm num} pf (@ num form (@ num (shadowed_0 num) eq_arith X) Y) -> pf (eq num X Y) = [X:tm num] [Y:tm num] [x3:pf (@ num form (@ num (shadowed_0 num) eq_arith X) Y)] def2_e num num ([x4:tm num] [x5:tm num] _eq num x4 x5) X Y x3.
valideqv : {T:tp} tm (eqrel T arrow form) = [T:tp] lam (rel T T) form ([R:tm (rel T T)] @ (rel T T) form (reflexive T) R and @ (rel T T) form (symmetric T) R and @ (rel T T) form (transitive T) R).
valideqv_i : {X1:tp} {R:tm (rel X1 X1)} pf (@ (rel X1 X1) form (reflexive X1) R) -> pf (@ (rel X1 X1) form (symmetric X1) R) -> pf (@ (rel X1 X1) form (transitive X1) R) -> pf (@ (eqrel X1) form (valideqv X1) R) = [X1:tp] [R:tm (rel X1 X1)] [p1:pf (@ (rel X1 X1) form (reflexive X1) R)] [p2:pf (@ (rel X1 X1) form (symmetric X1) R)] [p3:pf (@ (rel X1 X1) form (transitive X1) R)] def1_i (eqrel X1) ([x3:tm (eqrel X1)] @ (rel X1 X1) form (reflexive X1) x3 and @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R (and3_i (@ (rel X1 X1) form (reflexive X1) R) (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) p1 p2 p3).
valideqv_e1 : {X1:tp} {R:tm (eqrel X1)} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ (rel X1 X1) form (reflexive X1) R) = [X1:tp] [R:tm (eqrel X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) R)] and3_e1 (@ (rel X1 X1) form (reflexive X1) R) (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) (def1_e (eqrel X1) ([x3:tm (eqrel X1)] @ (rel X1 X1) form (reflexive X1) x3 and @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R p1).
valideqv_e2 : {X1:tp} {R:tm (eqrel X1)} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ (rel X1 X1) form (symmetric X1) R) = [X1:tp] [R:tm (eqrel X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) R)] and3_e2 (@ (rel X1 X1) form (reflexive X1) R) (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) (def1_e (eqrel X1) ([x3:tm (eqrel X1)] @ (rel X1 X1) form (reflexive X1) x3 and @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R p1).
valideqv_e3 : {X1:tp} {R:tm (eqrel X1)} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ (rel X1 X1) form (transitive X1) R) = [X1:tp] [R:tm (eqrel X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) R)] and3_e3 (@ (rel X1 X1) form (reflexive X1) R) (@ (rel X1 X1) form (symmetric X1) R) (@ (rel X1 X1) form (transitive X1) R) (def1_e (eqrel X1) ([x3:tm (eqrel X1)] @ (rel X1 X1) form (reflexive X1) x3 and @ (rel X1 X1) form (symmetric X1) x3 and @ (rel X1 X1) form (transitive X1) x3) R p1).
eqv_refl : {X1:tp} {R:tm (eqrel X1)} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) X) = [X1:tp] [R:tm (eqrel X1)] [X:tm X1] [P1:pf (@ (eqrel X1) form (valideqv X1) R)] reflexive_e X1 R X (valideqv_e1 X1 R P1).
eqv_symm : {X1:tp} {R:tm (eqrel X1)} {X:tm X1} {Y:tm X1} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) X) = [X1:tp] [R:tm (eqrel X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (eqrel X1) form (valideqv X1) R)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] symmetric_e X1 R X Y (valideqv_e2 X1 R p1) x3.
eqv_trans : {X1:tp} {R:tm (eqrel X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (@ (eqrel X1) form (valideqv X1) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Z) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Z) = [X1:tp] [R:tm (eqrel X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [p1:pf (@ (eqrel X1) form (valideqv X1) R)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) Y)] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Z)] transitive_e X1 R X Y Z (valideqv_e3 X1 R p1) x3 x4.
eq++_i : {Ta:tp} {Sa:tm (Ta arrow form)} {Ha:tm (Ta arrow Ta arrow form)} {X1:tp} {Hb:tm (X1 arrow X1 arrow form)} {F:tm (Ta arrow X1)} {G:tm (Ta arrow X1)} ({x3:tm Ta} {y:tm Ta} pf (@ Ta form Sa x3) -> pf (@ Ta form Sa y) -> pf (@ Ta form (@ Ta (Ta arrow form) Ha x3) y) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x3)) (@ Ta X1 F y)) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 G x3)) (@ Ta X1 G y)) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x3)) (@ Ta X1 G y))) -> pf (@ (Ta arrow X1) form (@ (Ta arrow X1) (shadowed_0 (Ta arrow X1)) (@ (eqrel X1) (eqrel (Ta arrow X1)) (@ (eqrel Ta) (eqrel X1 arrow eqrel (Ta arrow X1)) (@ (shadowed_0 Ta) (eqrel Ta arrow eqrel X1 arrow eqrel (Ta arrow X1)) (eq++ Ta X1) Sa) Ha) Hb) F) G) = [Ta:tp] [Sa:tm (Ta arrow form)] [Ha:tm (Ta arrow Ta arrow form)] [X1:tp] [Hb:tm (X1 arrow X1 arrow form)] [F:tm (Ta arrow X1)] [G:tm (Ta arrow X1)] [q1:{x4:tm Ta} {y:tm Ta} pf (@ Ta form Sa x4) -> pf (@ Ta form Sa y) -> pf (@ Ta form (@ Ta (Ta arrow form) Ha x4) y) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x4)) (@ Ta X1 F y)) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 G x4)) (@ Ta X1 G y)) -> pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x4)) (@ Ta X1 G y))] def5_i (shadowed_0 Ta) (eqrel Ta) (eqrel X1) (Ta arrow X1) (Ta arrow X1) ([x3:tm (shadowed_0 Ta)] [x4:tm (eqrel Ta)] [x5:tm (eqrel X1)] [x6:tm (Ta arrow X1)] [x7:tm (Ta arrow X1)] forall2 Ta Ta ([x8:tm Ta] [y:tm Ta] @ Ta form x3 x8 imp @ Ta form x3 y imp @ Ta form (@ Ta (Ta arrow form) x4 x8) y imp @ X1 form (@ X1 (X1 arrow form) x5 (@ Ta X1 x6 x8)) (@ Ta X1 x6 y) imp @ X1 form (@ X1 (X1 arrow form) x5 (@ Ta X1 x7 x8)) (@ Ta X1 x7 y) imp @ X1 form (@ X1 (X1 arrow form) x5 (@ Ta X1 x6 x8)) (@ Ta X1 x7 y))) Sa Ha Hb F G (forall2_i Ta Ta ([x3:tm Ta] [x4:tm Ta] @ Ta form Sa x3 imp @ Ta form Sa x4 imp @ Ta form (@ Ta (Ta arrow form) Ha x3) x4 imp @ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x3)) (@ Ta X1 F x4) imp @ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 G x3)) (@ Ta X1 G x4) imp @ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x3)) (@ Ta X1 G x4)) ([x9:tm Ta] [y:tm Ta] imp5_i (@ Ta form Sa x9) (@ Ta form Sa y) (@ Ta form (@ Ta (Ta arrow form) Ha x9) y) (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x9)) (@ Ta X1 F y)) (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 G x9)) (@ Ta X1 G y)) (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x9)) (@ Ta X1 G y)) ([x3:pf (@ Ta form Sa x9)] [x4:pf (@ Ta form Sa y)] [x5:pf (@ Ta form (@ Ta (Ta arrow form) Ha x9) y)] [x6:pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 F x9)) (@ Ta X1 F y))] [x7:pf (@ X1 form (@ X1 (X1 arrow form) Hb (@ Ta X1 G x9)) (@ Ta X1 G y))] q1 x9 y x3 x4 x5 x6 x7))).
eq++_e : {X1:tp} {X2:tp} {Sa:tm (shadowed_0 X1)} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {F:tm (X1 arrow X2)} {G:tm (X1 arrow X2)} {X:tm X1} {Y:tm X1} pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb) F) G) -> pf (@ X1 form Sa X) -> pf (@ X1 form Sa Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Ha X) Y) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 F Y)) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 G X)) (@ X1 X2 G Y)) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 G Y)) = [X1:tp] [X2:tp] [Sa:tm (shadowed_0 X1)] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [F:tm (X1 arrow X2)] [G:tm (X1 arrow X2)] [X:tm X1] [Y:tm X1] [p1:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb) F) G)] [x3:pf (@ X1 form Sa X)] [x4:pf (@ X1 form Sa Y)] [x5:pf (@ X1 form (@ X1 (X1 arrow form) Ha X) Y)] [x6:pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 F X)) (@ X1 X2 F Y))] [x7:pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 G X)) (@ X1 X2 G Y))] imp5_e (@ X1 form Sa X) (@ X1 form Sa Y) (@ X1 form (@ X1 (X1 arrow form) Ha X) Y) (@ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 F X)) (@ X1 X2 F Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 G X)) (@ X1 X2 G Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 F X)) (@ X1 X2 G Y)) (forall2_e X1 X1 ([x8:tm X1] [x9:tm X1] @ X1 form Sa x8 imp @ X1 form Sa x9 imp @ X1 form (@ X1 (X1 arrow form) Ha x8) x9 imp @ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 F x8)) (@ X1 X2 F x9) imp @ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 G x8)) (@ X1 X2 G x9) imp @ X2 form (@ X2 (X2 arrow form) Hb (@ X1 X2 F x8)) (@ X1 X2 G x9)) (def5_e (X1 arrow X2) (X1 arrow X2) (eqrel X2) (eqrel X1) (shadowed_0 X1) ([x8:tm (shadowed_0 X1)] [x9:tm (eqrel X1)] [x10:tm (eqrel X2)] [x11:tm (X1 arrow X2)] [x12:tm (X1 arrow X2)] forall2 X1 X1 ([x13:tm X1] [y:tm X1] @ X1 form x8 x13 imp @ X1 form x8 y imp @ X1 form (@ X1 (X1 arrow form) x9 x13) y imp @ X2 form (@ X2 (X2 arrow form) x10 (@ X1 X2 x11 x13)) (@ X1 X2 x11 y) imp @ X2 form (@ X2 (X2 arrow form) x10 (@ X1 X2 x12 x13)) (@ X1 X2 x12 y) imp @ X2 form (@ X2 (X2 arrow form) x10 (@ X1 X2 x11 x13)) (@ X1 X2 x12 y))) Sa Ha Hb F G p1) X Y) x3 x4 x5 x6 x7.
eq+_e : {X1:tp} {X2:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {F:tm (X1 arrow X2)} {G:tm (X1 arrow X2)} {X:tm X1} {Y:tm X1} pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Ha) Hb) F) G) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Ha X) Y) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 F Y)) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 G X)) (@ X1 X2 G Y)) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 G Y)) = [X1:tp] [X2:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [F:tm (X1 arrow X2)] [G:tm (X1 arrow X2)] [X:tm X1] [Y:tm X1] [p1:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Ha) Hb) F) G)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) Ha X) Y)] [x4:pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 F Y))] [x5:pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 G X)) (@ X1 X2 G Y))] eq++_e X1 X2 (lam X1 form ([x6:tm X1] true)) Ha Hb F G X Y p1 (def1_i X1 ([x6:tm X1] true) X true_i) (def1_i X1 ([x6:tm X1] true) Y true_i) x3 x4 x5.
eq_rel3 : {Ta:tp} {Tb:tp} {Tc:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel Tc arrow eqrel (rel3 Ta Tb Tc)) = [Ta:tp] [Tb:tp] [Tc:tp] lam3 (eqrel Ta) (eqrel Tb) (eqrel Tc) (eqrel (Ta arrow rel Tb Tc)) ([h1:tm (eqrel Ta)] [h2:tm (eqrel Tb)] [h3:tm (eqrel Tc)] @ (eqrel (rel Tb Tc)) (eqrel (Ta arrow rel Tb Tc)) (@ (eqrel Ta) (eqrel (rel Tb Tc) arrow eqrel (Ta arrow rel Tb Tc)) (eq+ Ta (rel Tb Tc)) h1) (@ (eqrel Tc) (eqrel (rel Tb Tc)) (@ (eqrel Tb) (eqrel Tc arrow eqrel (rel Tb Tc)) (eq_rel Tb Tc) h2) h3)).
eq_rel4 : {Ta:tp} {Tb:tp} {Tc:tp} {Td:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel Tc arrow eqrel Td arrow eqrel (rel4 Ta Tb Tc Td)) = [Ta:tp] [Tb:tp] [Tc:tp] [Td:tp] lam4 (eqrel Ta) (eqrel Tb) (eqrel Tc) (eqrel Td) (eqrel (Ta arrow rel3 Tb Tc Td)) ([h1:tm (eqrel Ta)] [h2:tm (eqrel Tb)] [h3:tm (eqrel Tc)] [h4:tm (eqrel Td)] @ (eqrel (rel3 Tb Tc Td)) (eqrel (Ta arrow rel3 Tb Tc Td)) (@ (eqrel Ta) (eqrel (rel3 Tb Tc Td) arrow eqrel (Ta arrow rel3 Tb Tc Td)) (eq+ Ta (rel3 Tb Tc Td)) h1) (@ (eqrel Td) (eqrel (rel3 Tb Tc Td)) (@ (eqrel Tc) (eqrel Td arrow eqrel (rel3 Tb Tc Td)) (@ (eqrel Tb) (eqrel Tc arrow eqrel Td arrow eqrel (rel3 Tb Tc Td)) (eq_rel3 Tb Tc Td) h2) h3) h4)).
eq_weaken : {X1:tp} {Eq:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (@ (rel X1 X1) form (reflexive X1) Eq) -> pf (eq X1 X Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq X) Y) = [X1:tp] [Eq:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (rel X1 X1) form (reflexive X1) Eq)] [p2:pf (eq X1 X Y)] congr X1 Y X ([z1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) Eq X) z1) (symm X1 X Y p2) (reflexive_e X1 Eq X p1).
eq++_i2 : {X1:tp} {Eq2:tm (eqrel X1)} {T1:tp} {Dom:tm (T1 arrow form)} {F:tm (T1 arrow X1)} {G:tm (T1 arrow X1)} {X2:tm (T1 arrow T1 arrow form)} pf (@ (eqrel X1) form (valideqv X1) Eq2) -> ({x3:tm T1} pf (@ T1 form Dom x3) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq2 (@ T1 X1 F x3)) (@ T1 X1 G x3))) -> pf (@ (T1 arrow X1) form (@ (T1 arrow X1) (shadowed_0 (T1 arrow X1)) (@ (eqrel X1) (eqrel (T1 arrow X1)) (@ (eqrel T1) (eqrel X1 arrow eqrel (T1 arrow X1)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel X1 arrow eqrel (T1 arrow X1)) (eq++ T1 X1) Dom) X2) Eq2) F) G) = [X1:tp] [Eq2:tm (eqrel X1)] [T1:tp] [Dom:tm (T1 arrow form)] [F:tm (T1 arrow X1)] [G:tm (T1 arrow X1)] [X2:tm (T1 arrow T1 arrow form)] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [q1:{x4:tm T1} pf (@ T1 form Dom x4) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq2 (@ T1 X1 F x4)) (@ T1 X1 G x4))] eq++_i T1 Dom X2 X1 Eq2 F G ([x5:tm T1] [x6:tm T1] [x3:pf (@ T1 form Dom x5)] [p2:pf (@ T1 form Dom x6)] [x4:pf (@ T1 form (@ T1 (T1 arrow form) X2 x5) x6)] [p3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq2 (@ T1 X1 F x5)) (@ T1 X1 F x6))] [x7:pf (@ X1 form (@ X1 (X1 arrow form) Eq2 (@ T1 X1 G x5)) (@ T1 X1 G x6))] eqv_trans X1 Eq2 (@ T1 X1 F x5) (@ T1 X1 F x6) (@ T1 X1 G x6) p1 p3 (q1 x6 p2)).
eq++_e2 : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {Dom:tm (shadowed_0 X1)} {F:tm (X1 arrow X2)} {G:tm (X1 arrow X2)} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Dom) Eq1) Eq2) F) G) -> pf (@ X1 form Dom X) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Eq2 (@ X1 X2 F X)) (@ X1 X2 G X)) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [Dom:tm (shadowed_0 X1)] [F:tm (X1 arrow X2)] [G:tm (X1 arrow X2)] [X:tm X1] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Dom) Eq1) Eq2) F) G)] [p8:pf (@ X1 form Dom X)] eq++_e X1 X2 Dom Eq1 Eq2 F G X X p6 p8 p8 (eqv_refl X1 Eq1 X p2) (eqv_refl X2 Eq2 (@ X1 X2 F X) p4) (eqv_refl X2 Eq2 (@ X1 X2 G X) p4).
eq++_congr : {X1:tp} {Sa:tm (X1 arrow form)} {X:tm X1} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {F:tm (X1 arrow X2)} {F':tm (X1 arrow X2)} pf (@ X1 form Sa X) -> pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb) F) F') -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 F' X)) = [X1:tp] [Sa:tm (X1 arrow form)] [X:tm X1] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [F:tm (X1 arrow X2)] [F':tm (X1 arrow X2)] [p1:pf (@ X1 form Sa X)] [p2:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p3:pf (@ (eqrel X2) form (valideqv X2) Hb)] [p4:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb) F) F')] eq++_e X1 X2 Sa Ha Hb F F' X X p4 p1 p1 (eqv_refl X1 Ha X p2) (eqv_refl X2 Hb (@ X1 X2 F X) p3) (eqv_refl X2 Hb (@ X1 X2 F' X) p3).
eq++_reflexive : {T1:tp} {T2:tp} {Dom:tm (shadowed_0 T1)} {Eq1:tm (eqrel T1)} {Eq2:tm (eqrel T2)} pf (@ (rel (T1 arrow T2) (T1 arrow T2)) form (reflexive (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2)) = [T1:tp] [T2:tp] [Dom:tm (shadowed_0 T1)] [Eq1:tm (eqrel T1)] [Eq2:tm (eqrel T2)] reflexive_i (T1 arrow T2) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) ([f:tm (T1 arrow T2)] eq++_i T1 Dom Eq1 T2 Eq2 f f ([x3:tm T1] [y:tm T1] [x4:pf (@ T1 form Dom x3)] [x5:pf (@ T1 form Dom y)] [x6:pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x3) y)] [x7:pf (@ T2 form (@ T2 (T2 arrow form) Eq2 (@ T1 T2 f x3)) (@ T1 T2 f y))] [p3:pf (@ T2 form (@ T2 (shadowed_0 T2) Eq2 (@ T1 T2 f x3)) (@ T1 T2 f y))] p3)).
eq++_symmetric : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} {Dom:tm (shadowed_0 T1)} pf (@ (rel T1 T1) form (symmetric T1) Eq1) -> pf (@ (rel T2 T2) form (symmetric T2) Eq2) -> pf (@ (rel (T1 arrow T2) (T1 arrow T2)) form (symmetric (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [Dom:tm (shadowed_0 T1)] [p1:pf (@ (rel T1 T1) form (symmetric T1) Eq1)] [p2:pf (@ (rel T2 T2) form (symmetric T2) Eq2)] symmetric_i (T1 arrow T2) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) ([f:tm (T1 arrow T2)] [g:tm (T1 arrow T2)] [p3:pf (@ (T1 arrow T2) form (@ (T1 arrow T2) (shadowed_0 (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) f) g)] eq++_i T1 Dom Eq1 T2 Eq2 g f ([x3:tm T1] [y:tm T1] [p4:pf (@ T1 form Dom x3)] [p5:pf (@ T1 form Dom y)] [p6:pf (@ T1 form (@ T1 (shadowed_0 T1) Eq1 x3) y)] [p7:pf (@ T2 form (@ T2 (shadowed_0 T2) Eq2 (@ T1 T2 g x3)) (@ T1 T2 g y))] [p8:pf (@ T2 form (@ T2 (shadowed_0 T2) Eq2 (@ T1 T2 f x3)) (@ T1 T2 f y))] symmetric_e T2 Eq2 (@ T1 T2 f y) (@ T1 T2 g x3) p2 (eq++_e T1 T2 Dom Eq1 Eq2 f g y x3 p3 p5 p4 (symmetric_e T1 Eq1 x3 y p1 p6) (symmetric_e T2 Eq2 (@ T1 T2 f x3) (@ T1 T2 f y) p2 p8) (symmetric_e T2 Eq2 (@ T1 T2 g x3) (@ T1 T2 g y) p2 p7)))).
eq++_transitive : {T1:tp} {Eq1:tm (eqrel T1)} {T2:tp} {Eq2:tm (eqrel T2)} {Dom:tm (shadowed_0 T1)} pf (@ (eqrel T1) form (valideqv T1) Eq1) -> pf (@ (eqrel T2) form (valideqv T2) Eq2) -> pf (@ (rel (T1 arrow T2) (T1 arrow T2)) form (transitive (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2)) = [T1:tp] [Eq1:tm (eqrel T1)] [T2:tp] [Eq2:tm (eqrel T2)] [Dom:tm (shadowed_0 T1)] [p1:pf (@ (eqrel T1) form (valideqv T1) Eq1)] [p2:pf (@ (eqrel T2) form (valideqv T2) Eq2)] transitive_i (T1 arrow T2) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) ([f:tm (T1 arrow T2)] [g:tm (T1 arrow T2)] [h:tm (T1 arrow T2)] [p3:pf (@ (T1 arrow T2) form (@ (T1 arrow T2) (shadowed_0 (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) f) g)] [p4:pf (@ (T1 arrow T2) form (@ (T1 arrow T2) (shadowed_0 (T1 arrow T2)) (@ (eqrel T2) (eqrel (T1 arrow T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (T1 arrow T2)) (@ (shadowed_0 T1) (eqrel T1 arrow eqrel T2 arrow eqrel (T1 arrow T2)) (eq++ T1 T2) Dom) Eq1) Eq2) g) h)] eq++_i T1 Dom Eq1 T2 Eq2 f h ([x3:tm T1] [y:tm T1] [p5:pf (@ T1 form Dom x3)] [p6:pf (@ T1 form Dom y)] [p7:pf (@ T1 form (@ T1 (shadowed_0 T1) Eq1 x3) y)] [p8:pf (@ T2 form (@ T2 (shadowed_0 T2) Eq2 (@ T1 T2 f x3)) (@ T1 T2 f y))] [p9:pf (@ T2 form (@ T2 (shadowed_0 T2) Eq2 (@ T1 T2 h x3)) (@ T1 T2 h y))] eqv_trans T2 Eq2 (@ T1 T2 f x3) (@ T1 T2 g x3) (@ T1 T2 h y) p2 (eq++_congr T1 Dom x3 Eq1 T2 Eq2 f g p5 p1 p2 p3) (eqv_trans T2 Eq2 (@ T1 T2 g x3) (@ T1 T2 h x3) (@ T1 T2 h y) p2 (eq++_congr T1 Dom x3 Eq1 T2 Eq2 g h p5 p1 p2 p4) p9))).
valideqv_eq++ : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {Sa:tm (shadowed_0 X1)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel (X1 arrow X2)) form (valideqv (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [Sa:tm (shadowed_0 X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] valideqv_i (X1 arrow X2) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (@ (shadowed_0 X1) (eqrel X1 arrow eqrel X2 arrow eqrel (X1 arrow X2)) (eq++ X1 X2) Sa) Ha) Hb) (eq++_reflexive X1 X2 Sa Ha Hb) (eq++_symmetric X1 Ha X2 Hb Sa (valideqv_e2 X1 Ha p1) (valideqv_e2 X2 Hb p2)) (eq++_transitive X1 Ha X2 Hb Sa p1 p2).
eq+_i2 : {X1:tp} {Eq2:tm (eqrel X1)} {T1:tp} {F:tm (T1 arrow X1)} {G:tm (T1 arrow X1)} {X2:tm (T1 arrow T1 arrow form)} pf (@ (eqrel X1) form (valideqv X1) Eq2) -> ({x3:tm T1} pf (@ X1 form (@ X1 (shadowed_0 X1) Eq2 (@ T1 X1 F x3)) (@ T1 X1 G x3))) -> pf (@ (T1 arrow X1) form (@ (T1 arrow X1) (shadowed_0 (T1 arrow X1)) (@ (eqrel X1) (eqrel (T1 arrow X1)) (@ (eqrel T1) (eqrel X1 arrow eqrel (T1 arrow X1)) (eq+ T1 X1) X2) Eq2) F) G) = [X1:tp] [Eq2:tm (eqrel X1)] [T1:tp] [F:tm (T1 arrow X1)] [G:tm (T1 arrow X1)] [X2:tm (T1 arrow T1 arrow form)] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [q1:{x4:tm T1} pf (@ X1 form (@ X1 (shadowed_0 X1) Eq2 (@ T1 X1 F x4)) (@ T1 X1 G x4))] eq++_i2 X1 Eq2 T1 (lam T1 form ([x5:tm T1] true)) F G X2 p1 ([x6:tm T1] [x3:pf (@ T1 form (lam T1 form ([x7:tm T1] true)) x6)] q1 x6).
eq+_e2 : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {F:tm (X1 arrow X2)} {G:tm (X1 arrow X2)} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Eq1) Eq2) F) G) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Eq2 (@ X1 X2 F X)) (@ X1 X2 G X)) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [F:tm (X1 arrow X2)] [G:tm (X1 arrow X2)] [X:tm X1] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Eq1) Eq2) F) G)] eq++_e2 X1 Eq1 X2 Eq2 (lam X1 form ([x3:tm X1] true)) F G X p2 p4 p6 (def1_i X1 ([x3:tm X1] true) X true_i).
eq+_congr : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {F:tm (X1 arrow X2)} {F':tm (X1 arrow X2)} {X:tm X1} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Ha) Hb) F) F') -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ X1 X2 F X)) (@ X1 X2 F' X)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [F:tm (X1 arrow X2)] [F':tm (X1 arrow X2)] [X:tm X1] [x3:pf (@ (eqrel X1) form (valideqv X1) Ha)] [x4:pf (@ (eqrel X2) form (valideqv X2) Hb)] [x5:pf (@ (X1 arrow X2) form (@ (X1 arrow X2) (shadowed_0 (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Ha) Hb) F) F')] eq++_congr X1 (lam X1 form ([x6:tm X1] true)) X Ha X2 Hb F F' (def1_i X1 ([x6:tm X1] true) X true_i) x3 x4 x5.
valideqv_eq+ : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel (X1 arrow X2)) form (valideqv (X1 arrow X2)) (@ (eqrel X2) (eqrel (X1 arrow X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2)) (eq+ X1 X2) Ha) Hb)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [x3:pf (@ (eqrel X1) form (valideqv X1) Ha)] [x4:pf (@ (eqrel X2) form (valideqv X2) Hb)] valideqv_eq++ X1 Ha X2 Hb (lam X1 form ([x5:tm X1] true)) x3 x4.
eq_form_reflexive : pf (@ (rel form form) form (reflexive form) eq_form) = reflexive_i form eq_form ([x3:tm form] eq_form_i x3 x3 (equiv_refl x3)).
eq_form_symmetric : pf (@ (rel form form) form (symmetric form) eq_form) = symmetric_i form eq_form ([x3:tm form] [y:tm form] [p1:pf (@ form form (@ form (shadowed_0 form) eq_form x3) y)] eq_form_i y x3 (equiv_symm x3 y (eq_form_e x3 y p1))).
eq_form_transitive : pf (@ (rel form form) form (transitive form) eq_form) = transitive_i form eq_form ([x3:tm form] [y:tm form] [z1:tm form] [p1:pf (@ form form (@ form (shadowed_0 form) eq_form x3) y)] [p2:pf (@ form form (@ form (shadowed_0 form) eq_form y) z1)] eq_form_i x3 z1 (equiv_trans x3 y z1 (eq_form_e x3 y p1) (eq_form_e y z1 p2))).
valideqv_eq_form : pf (@ (eqrel form) form (valideqv form) eq_form) = valideqv_i form eq_form eq_form_reflexive eq_form_symmetric eq_form_transitive.
eq_x_refl : {X1:tp} {X:tm X1} pf (@ X1 form (@ X1 (shadowed_0 X1) (eq_x X1) X) X) = [X1:tp] [X:tm X1] eq_x_i X1 X X (refl X1 X).
eq_x_reflexive : {T:tp} pf (@ (rel T T) form (reflexive T) (eq_x T)) = [T:tp] reflexive_i T (eq_x T) ([x3:tm T] eq_x_i T x3 x3 (refl T x3)).
eq_x_symmetric : {T:tp} pf (@ (rel T T) form (symmetric T) (eq_x T)) = [T:tp] symmetric_i T (eq_x T) ([x3:tm T] [y:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (eq_x T) x3) y)] eq_x_i T y x3 (symm T x3 y (eq_x_e T x3 y p1))).
eq_x_transitive : {T:tp} pf (@ (rel T T) form (transitive T) (eq_x T)) = [T:tp] transitive_i T (eq_x T) ([x3:tm T] [y:tm T] [z1:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (eq_x T) x3) y)] [p2:pf (@ T form (@ T (shadowed_0 T) (eq_x T) y) z1)] eq_x_i T x3 z1 (trans T x3 y z1 (eq_x_e T x3 y p1) (eq_x_e T y z1 p2))).
valideqv_eq_x : {X1:tp} pf (@ (eqrel X1) form (valideqv X1) (eq_x X1)) = [X1:tp] valideqv_i X1 (eq_x X1) (eq_x_reflexive X1) (eq_x_symmetric X1) (eq_x_transitive X1).
eq_rel_i : {X1:tp} {Eq2:tm (eqrel X1)} {X2:tp} {R1:tm (X2 arrow X1 arrow form)} {R2:tm (X2 arrow X1 arrow form)} {Eq1:tm (eqrel X2)} pf (@ (eqrel X1) form (valideqv X1) Eq2) -> ({x3:tm X2} {x4:tm X1} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ X2 (X1 arrow form) R1 x3) x4)) (@ X1 form (@ X2 (X1 arrow form) R2 x3) x4))) -> pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (@ (eqrel X1) (eqrel (rel X2 X1)) (@ (eqrel X2) (eqrel X1 arrow eqrel (rel X2 X1)) (eq_rel X2 X1) Eq1) Eq2) R1) R2) = [X1:tp] [Eq2:tm (eqrel X1)] [X2:tp] [R1:tm (X2 arrow X1 arrow form)] [R2:tm (X2 arrow X1 arrow form)] [Eq1:tm (eqrel X2)] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [p4:{x5:tm X2} {x6:tm X1} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ X2 (X1 arrow form) R1 x5) x6)) (@ X1 form (@ X2 (X1 arrow form) R2 x5) x6))] cut2 (@ (eqrel X1) form (valideqv X1) Eq2) (forall2 X2 X1 ([x3:tm X2] [x4:tm X1] @ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ X2 (X1 arrow form) R1 x3) x4)) (@ X1 form (@ X2 (X1 arrow form) R2 x3) x4))) (@ (X2 arrow X1 arrow form) form (@ (X2 arrow X1 arrow form) ((X2 arrow X1 arrow form) arrow form) (@ (eqrel X1) ((X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) (@ (eqrel X2) (eqrel X1 arrow (X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) (lam2 (eqrel X2) (eqrel X1) ((X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) ([x3:tm (eqrel X2)] [x4:tm (eqrel X1)] @ (eqrel (X1 arrow form)) (eqrel (X2 arrow X1 arrow form)) (@ (eqrel X2) (eqrel (X1 arrow form) arrow eqrel (X2 arrow X1 arrow form)) (eq+ X2 (X1 arrow form)) x3) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) x4) eq_form))) Eq1) Eq2) R1) R2) p2 (forall2_i X2 X1 ([x3:tm X2] [x4:tm X1] @ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ X2 (X1 arrow form) R1 x3) x4)) (@ X1 form (@ X2 (X1 arrow form) R2 x3) x4)) ([a:tm X2] [b:tm X1] p4 a b)) ([x3:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [x4:pf (forall2 X2 X1 ([x4:tm X2] [x5:tm X1] @ form form (@ form (shadowed_0 form) eq_form (@ X1 form (@ X2 (X1 arrow form) R1 x4) x5)) (@ X1 form (@ X2 (X1 arrow form) R2 x4) x5)))] def2_congr1 (X2 arrow X1 arrow form) (X2 arrow X1 arrow form) (@ (eqrel X1) ((X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) (@ (eqrel X2) (eqrel X1 arrow (X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) (lam2 (eqrel X2) (eqrel X1) ((X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) ([x5:tm (eqrel X2)] [x6:tm (eqrel X1)] @ (eqrel (X1 arrow form)) (eqrel (X2 arrow X1 arrow form)) (@ (eqrel X2) (eqrel (X1 arrow form) arrow eqrel (X2 arrow X1 arrow form)) (eq+ X2 (X1 arrow form)) x5) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) x6) eq_form))) Eq1) Eq2) (@ (eqrel (X1 arrow form)) (eqrel (X2 arrow X1 arrow form)) (@ (eqrel X2) (eqrel (X1 arrow form) arrow eqrel (X2 arrow X1 arrow form)) (eq+ X2 (X1 arrow form)) Eq1) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq2) eq_form)) R1 R2 (beta2 ((X2 arrow X1 arrow form) arrow (X2 arrow X1 arrow form) arrow form) (eqrel X1) (eqrel X2) ([x5:tm (eqrel X2)] [x6:tm (eqrel X1)] @ (eqrel (X1 arrow form)) (eqrel (X2 arrow X1 arrow form)) (@ (eqrel X2) (eqrel (X1 arrow form) arrow eqrel (X2 arrow X1 arrow form)) (eq+ X2 (X1 arrow form)) x5) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) x6) eq_form)) Eq1 Eq2) (eq+_i2 (X1 arrow form) (@ (eqrel form) (eqrel (X1 arrow form)) (@ (eqrel X1) (eqrel form arrow eqrel (X1 arrow form)) (eq+ X1 form) Eq2) eq_form) X2 R1 R2 Eq1 (valideqv_eq+ X1 Eq2 form eq_form p2 valideqv_eq_form) ([x7:tm X2] eq+_i2 form eq_form X1 (@ X2 (X1 arrow form) R1 x7) (@ X2 (X1 arrow form) R2 x7) Eq2 valideqv_eq_form ([x8:tm X1] p4 x7 x8)))).
eq_rel_i2 : {X1:tp} {EqB:tm (eqrel X1)} {X2:tp} {R1:tm (rel X2 X1)} {R2:tm (rel X2 X1)} {EqA:tm (eqrel X2)} pf (@ (eqrel X1) form (valideqv X1) EqB) -> pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (subrel X2 X1) R1) R2) -> pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (subrel X2 X1) R2) R1) -> pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (@ (eqrel X1) (eqrel (rel X2 X1)) (@ (eqrel X2) (eqrel X1 arrow eqrel (rel X2 X1)) (eq_rel X2 X1) EqA) EqB) R1) R2) = [X1:tp] [EqB:tm (eqrel X1)] [X2:tp] [R1:tm (rel X2 X1)] [R2:tm (rel X2 X1)] [EqA:tm (eqrel X2)] [p3:pf (@ (eqrel X1) form (valideqv X1) EqB)] [p1:pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (subrel X2 X1) R1) R2)] [p2:pf (@ (rel X2 X1) form (@ (rel X2 X1) (shadowed_0 (rel X2 X1)) (subrel X2 X1) R2) R1)] eq_rel_i X1 EqB X2 R1 R2 EqA p3 ([x3:tm X2] [x4:tm X1] eq_form_i' (@ X1 form (@ X2 (shadowed_0 X1) R1 x3) x4) (@ X1 form (@ X2 (shadowed_0 X1) R2 x3) x4) ([p6:pf (@ X1 form (@ X2 (shadowed_0 X1) R1 x3) x4)] subrel_e X2 X1 R1 R2 x3 x4 p1 p6) ([p6:pf (@ X1 form (@ X2 (shadowed_0 X1) R2 x3) x4)] subrel_e X2 X1 R2 R1 x3 x4 p2 p6)).
eq_arith_symmetric : pf (@ (rel num num) form (symmetric num) eq_arith) = eq_x_symmetric num.
eq_arith_transitive : pf (@ (rel num num) form (transitive num) eq_arith) = eq_x_transitive num.
valideqv_eq_arith : pf (@ (eqrel num) form (valideqv num) eq_arith) = valideqv_eq_x num.
eq_arith_refl : {X:tm num} pf (@ num form (@ num (shadowed_0 num) eq_arith X) X) = [X:tm num] eqv_refl num eq_arith X valideqv_eq_arith.
valideqv_eq_rel : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel (rel X1 X2)) form (valideqv (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] congr (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X2) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel X2 arrow eqrel (X1 arrow X2 arrow form)) (lam2 (eqrel X1) (eqrel X2) (eqrel (X1 arrow X2 arrow form)) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form))) Ha) Hb) (@ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) Ha) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Hb) eq_form)) ([z1:tm (eqrel (X1 arrow X2 arrow form))] @ (eqrel (X1 arrow X2 arrow form)) form (valideqv (X1 arrow X2 arrow form)) z1) (beta2 (eqrel (X1 arrow X2 arrow form)) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form)) Ha Hb) (valideqv_eq+ X1 Ha (X2 arrow form) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Hb) eq_form) p1 (valideqv_eq+ X2 Hb form eq_form p2 valideqv_eq_form)).
eq_rel3_i : {X1:tp} {Eq2:tm (eqrel X1)} {X2:tp} {Eq3:tm (eqrel X2)} {X3:tp} {R1:tm (X3 arrow X1 arrow X2 arrow form)} {R2:tm (X3 arrow X1 arrow X2 arrow form)} {Eq1:tm (eqrel X3)} pf (@ (eqrel X1) form (valideqv X1) Eq2) -> pf (@ (eqrel X2) form (valideqv X2) Eq3) -> ({x3:tm X3} {x4:tm X1} {x5:tm X2} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) R1 x3) x4) x5)) (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) R2 x3) x4) x5))) -> pf (@ (rel3 X3 X1 X2) form (@ (rel3 X3 X1 X2) (shadowed_0 (rel3 X3 X1 X2)) (@ (eqrel X2) (eqrel (rel3 X3 X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel3 X3 X1 X2)) (@ (eqrel X3) (eqrel X1 arrow eqrel X2 arrow eqrel (rel3 X3 X1 X2)) (eq_rel3 X3 X1 X2) Eq1) Eq2) Eq3) R1) R2) = [X1:tp] [Eq2:tm (eqrel X1)] [X2:tp] [Eq3:tm (eqrel X2)] [X3:tp] [R1:tm (X3 arrow X1 arrow X2 arrow form)] [R2:tm (X3 arrow X1 arrow X2 arrow form)] [Eq1:tm (eqrel X3)] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq3)] [p6:{x6:tm X3} {x7:tm X1} {x3:tm X2} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) R1 x6) x7) x3)) (@ X2 form (@ X1 (X2 arrow form) (@ X3 (X1 arrow X2 arrow form) R2 x6) x7) x3))] def2_congr1 (X3 arrow rel X1 X2) (X3 arrow rel X1 X2) (@ (eqrel X2) ((X3 arrow rel X1 X2) arrow (X3 arrow rel X1 X2) arrow form) (@ (eqrel X1) (eqrel X2 arrow (X3 arrow rel X1 X2) arrow (X3 arrow rel X1 X2) arrow form) (@ (eqrel X3) (eqrel X1 arrow eqrel X2 arrow (X3 arrow rel X1 X2) arrow (X3 arrow rel X1 X2) arrow form) (lam3 (eqrel X3) (eqrel X1) (eqrel X2) ((X3 arrow rel X1 X2) arrow (X3 arrow rel X1 X2) arrow form) ([x3:tm (eqrel X3)] [x4:tm (eqrel X1)] [x5:tm (eqrel X2)] @ (eqrel (rel X1 X2)) (eqrel (X3 arrow rel X1 X2)) (@ (eqrel X3) (eqrel (rel X1 X2) arrow eqrel (X3 arrow rel X1 X2)) (eq+ X3 (rel X1 X2)) x3) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) x4) x5))) Eq1) Eq2) Eq3) (@ (eqrel (rel X1 X2)) (eqrel (X3 arrow rel X1 X2)) (@ (eqrel X3) (eqrel (rel X1 X2) arrow eqrel (X3 arrow rel X1 X2)) (eq+ X3 (rel X1 X2)) Eq1) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq2) Eq3)) R1 R2 (beta3 ((X3 arrow rel X1 X2) arrow (X3 arrow rel X1 X2) arrow form) (eqrel X2) (eqrel X1) (eqrel X3) ([x3:tm (eqrel X3)] [x4:tm (eqrel X1)] [x5:tm (eqrel X2)] @ (eqrel (rel X1 X2)) (eqrel (X3 arrow rel X1 X2)) (@ (eqrel X3) (eqrel (rel X1 X2) arrow eqrel (X3 arrow rel X1 X2)) (eq+ X3 (rel X1 X2)) x3) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) x4) x5)) Eq1 Eq2 Eq3) (eq+_i2 (rel X1 X2) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq2) Eq3) X3 R1 R2 Eq1 (valideqv_eq_rel X1 Eq2 X2 Eq3 p2 p4) ([x8:tm X3] eq_rel_i X2 Eq3 X1 (@ X3 (X1 arrow X2 arrow form) R1 x8) (@ X3 (X1 arrow X2 arrow form) R2 x8) Eq2 p4 ([x9:tm X1] [x3:tm X2] p6 x8 x9 x3))).
valideqv_eq_rel3 : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {X3:tp} {Hc:tm (eqrel X3)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel X3) form (valideqv X3) Hc) -> pf (@ (eqrel (rel3 X1 X2 X3)) form (valideqv (rel3 X1 X2 X3)) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) Ha) Hb) Hc)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [X3:tp] [Hc:tm (eqrel X3)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] [p3:pf (@ (eqrel X3) form (valideqv X3) Hc)] congr (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X3) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (X1 arrow rel X2 X3)) (lam3 (eqrel X1) (eqrel X2) (eqrel X3) (eqrel (X1 arrow rel X2 X3)) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] @ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) x3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) x4) x5))) Ha) Hb) Hc) (@ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) Ha) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Hb) Hc)) ([z1:tm (eqrel (X1 arrow rel X2 X3))] @ (eqrel (X1 arrow rel X2 X3)) form (valideqv (X1 arrow rel X2 X3)) z1) (beta3 (eqrel (X1 arrow rel X2 X3)) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] @ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) x3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) x4) x5)) Ha Hb Hc) (valideqv_eq+ X1 Ha (rel X2 X3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Hb) Hc) p1 (valideqv_eq_rel X2 Hb X3 Hc p2 p3)).
eq_rel_congr : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {R:tm (rel X1 X2)} {R':tm (rel X1 X2)} {X:tm X1} {Y:tm X2} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb) R) R') -> pf (@ X2 form (@ X1 (shadowed_0 X2) R X) Y) -> pf (@ X2 form (@ X1 (shadowed_0 X2) R' X) Y) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [R:tm (rel X1 X2)] [R':tm (rel X1 X2)] [X:tm X1] [Y:tm X2] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] [p3:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb) R) R')] [p4:pf (@ X2 form (@ X1 (shadowed_0 X2) R X) Y)] eq_form_e1 (@ X2 form (@ X1 (X2 arrow form) R X) Y) (@ X2 form (@ X1 (X2 arrow form) R' X) Y) (eq+_congr X2 Hb form eq_form (@ X1 (X2 arrow form) R X) (@ X1 (X2 arrow form) R' X) Y p2 valideqv_eq_form (eq+_congr X1 Ha (X2 arrow form) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Hb) eq_form) R R' X p1 (valideqv_eq+ X2 Hb form eq_form p2 valideqv_eq_form) (gdef2_e (rel X1 X2 arrow rel X1 X2 arrow form) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form)) Ha Hb ([z1:tm (rel X1 X2 arrow rel X1 X2 arrow form)] @ (rel X1 X2) form (@ (rel X1 X2) (rel X1 X2 arrow form) z1 R) R') p3))) p4.
eq_rel_e : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {R1:tm (rel X1 X2)} {R2:tm (rel X1 X2)} {X:tm X1} {Y:tm X2} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R1) R2) -> pf (@ form form (@ form (shadowed_0 form) eq_form (@ X2 form (@ X1 (shadowed_0 X2) R1 X) Y)) (@ X2 form (@ X1 (shadowed_0 X2) R2 X) Y)) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [R1:tm (rel X1 X2)] [R2:tm (rel X1 X2)] [X:tm X1] [Y:tm X2] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R1) R2)] cut (@ (X2 arrow form) form (@ (X2 arrow form) (shadowed_0 (X2 arrow form)) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Eq2) eq_form) (@ X1 (X2 arrow form) R1 X)) (@ X1 (X2 arrow form) R2 X)) (@ form form (@ form (shadowed_0 form) eq_form (@ X2 form (@ X1 (shadowed_0 X2) R1 X) Y)) (@ X2 form (@ X1 (shadowed_0 X2) R2 X) Y)) (eq+_e2 X1 Eq1 (X2 arrow form) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Eq2) eq_form) R1 R2 X p2 (valideqv_eq+ X2 Eq2 form eq_form p4 valideqv_eq_form) (def2_congr1 (rel X1 X2) (rel X1 X2) (@ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) Eq1) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Eq2) eq_form)) (@ (eqrel X2) (rel X1 X2 arrow rel X1 X2 arrow form) (@ (eqrel X1) (eqrel X2 arrow rel X1 X2 arrow rel X1 X2 arrow form) (lam2 (eqrel X1) (eqrel X2) (rel X1 X2 arrow rel X1 X2 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form))) Eq1) Eq2) R1 R2 (symm (rel X1 X2 arrow rel X1 X2 arrow form) (@ (eqrel X2) (rel X1 X2 arrow rel X1 X2 arrow form) (@ (eqrel X1) (eqrel X2 arrow rel X1 X2 arrow rel X1 X2 arrow form) (lam2 (eqrel X1) (eqrel X2) (rel X1 X2 arrow rel X1 X2 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form))) Eq1) Eq2) (@ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) Eq1) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Eq2) eq_form)) (beta2 (rel X1 X2 arrow rel X1 X2 arrow form) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] @ (eqrel (X2 arrow form)) (eqrel (X1 arrow X2 arrow form)) (@ (eqrel X1) (eqrel (X2 arrow form) arrow eqrel (X1 arrow X2 arrow form)) (eq+ X1 (X2 arrow form)) x3) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) x4) eq_form)) Eq1 Eq2)) p6)) ([p10:pf (@ (X2 arrow form) form (@ (X2 arrow form) (shadowed_0 (X2 arrow form)) (@ (eqrel form) (eqrel (X2 arrow form)) (@ (eqrel X2) (eqrel form arrow eqrel (X2 arrow form)) (eq+ X2 form) Eq2) eq_form) (@ X1 (shadowed_0 X2) R1 X)) (@ X1 (shadowed_0 X2) R2 X))] eq+_e2 X2 Eq2 form eq_form (@ X1 (shadowed_0 X2) R1 X) (@ X1 (shadowed_0 X2) R2 X) Y p4 valideqv_eq_form p10).
eq_rel_e1 : {A:tp} {Ha:tm (eqrel A)} {B:tp} {Hb:tm (eqrel B)} {R:tm (rel A B)} {R':tm (rel A B)} pf (@ (eqrel A) form (valideqv A) Ha) -> pf (@ (eqrel B) form (valideqv B) Hb) -> pf (@ (rel A B) form (@ (rel A B) (shadowed_0 (rel A B)) (@ (eqrel B) (eqrel (rel A B)) (@ (eqrel A) (eqrel B arrow eqrel (rel A B)) (eq_rel A B) Ha) Hb) R) R') -> pf (@ (rel A B) form (@ (rel A B) (shadowed_0 (rel A B)) (subrel A B) R) R') = [A:tp] [Ha:tm (eqrel A)] [B:tp] [Hb:tm (eqrel B)] [R:tm (rel A B)] [R':tm (rel A B)] [p1:pf (@ (eqrel A) form (valideqv A) Ha)] [p2:pf (@ (eqrel B) form (valideqv B) Hb)] [p3:pf (@ (rel A B) form (@ (rel A B) (shadowed_0 (rel A B)) (@ (eqrel B) (eqrel (rel A B)) (@ (eqrel A) (eqrel B arrow eqrel (rel A B)) (eq_rel A B) Ha) Hb) R) R')] subrel_i A B R R' ([x3:tm A] [y:tm B] [p4:pf (@ B form (@ A (shadowed_0 B) R x3) y)] eq_rel_congr A Ha B Hb R R' x3 y p1 p2 p3 p4).
eq_rel_e2 : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {R:tm (rel X1 X2)} {R':tm (rel X1 X2)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb) R) R') -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R') R) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [R:tm (rel X1 X2)] [R':tm (rel X1 X2)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] [p3:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb) R) R')] eq_rel_e1 X1 Ha X2 Hb R' R p1 p2 (eqv_symm (rel X1 X2) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Ha) Hb) R R' (valideqv_eq_rel X1 Ha X2 Hb p1 p2) p3).
subrel_congr : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {R1:tm (rel X1 X2)} {R1':tm (rel X1 X2)} {R2:tm (rel X1 X2)} {R2':tm (rel X1 X2)} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R1) R1') -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R2) R2') -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1') R2') -> pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1) R2) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [R1:tm (rel X1 X2)] [R1':tm (rel X1 X2)] [R2:tm (rel X1 X2)] [R2':tm (rel X1 X2)] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R1) R1')] [p8:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X2) (eqrel (rel X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (rel X1 X2)) (eq_rel X1 X2) Eq1) Eq2) R2) R2')] [p10:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1') R2')] cut (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1) R1') (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1) R2) (eq_rel_e1 X1 Eq1 X2 Eq2 R1 R1' p2 p4 p6) ([p14:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1) R1')] cut (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R2') R2) (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R1) R2) (eq_rel_e2 X1 Eq1 X2 Eq2 R2 R2' p2 p4 p8) ([p16:pf (@ (rel X1 X2) form (@ (rel X1 X2) (shadowed_0 (rel X1 X2)) (subrel X1 X2) R2') R2)] subrel_trans X1 X2 R1 R1' R2 p14 (subrel_trans X1 X2 R1' R2' R2 p10 p16))).
eq_rel3_e : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {X3:tp} {Eq3:tm (eqrel X3)} {R1:tm (rel3 X1 X2 X3)} {R2:tm (rel3 X1 X2 X3)} {X:tm X1} {Y:tm X2} {Z:tm X3} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (eqrel X3) form (valideqv X3) Eq3) -> pf (@ (rel3 X1 X2 X3) form (@ (rel3 X1 X2 X3) (shadowed_0 (rel3 X1 X2 X3)) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) Eq1) Eq2) Eq3) R1) R2) -> pf (@ form form (@ form (shadowed_0 form) eq_form (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R1 X) Y) Z)) (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R2 X) Y) Z)) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [X3:tp] [Eq3:tm (eqrel X3)] [R1:tm (rel3 X1 X2 X3)] [R2:tm (rel3 X1 X2 X3)] [X:tm X1] [Y:tm X2] [Z:tm X3] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (eqrel X3) form (valideqv X3) Eq3)] [p8:pf (@ (rel3 X1 X2 X3) form (@ (rel3 X1 X2 X3) (shadowed_0 (rel3 X1 X2 X3)) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) Eq1) Eq2) Eq3) R1) R2)] cut (@ (rel X2 X3) form (@ (rel X2 X3) (shadowed_0 (rel X2 X3)) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Eq2) Eq3) (@ X1 (rel X2 X3) R1 X)) (@ X1 (rel X2 X3) R2 X)) (@ form form (@ form (shadowed_0 form) eq_form (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R1 X) Y) Z)) (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R2 X) Y) Z)) (eq+_e2 X1 Eq1 (rel X2 X3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Eq2) Eq3) R1 R2 X p2 (valideqv_eq_rel X2 Eq2 X3 Eq3 p4 p6) (def2_congr1 (rel3 X1 X2 X3) (rel3 X1 X2 X3) (@ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) Eq1) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Eq2) Eq3)) (@ (eqrel X3) (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (@ (eqrel X2) (eqrel X3 arrow rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (lam3 (eqrel X1) (eqrel X2) (eqrel X3) (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] @ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) x3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) x4) x5))) Eq1) Eq2) Eq3) R1 R2 (symm (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (@ (eqrel X3) (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (@ (eqrel X2) (eqrel X3 arrow rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (lam3 (eqrel X1) (eqrel X2) (eqrel X3) (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] @ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) x3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) x4) x5))) Eq1) Eq2) Eq3) (@ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) Eq1) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Eq2) Eq3)) (beta3 (rel3 X1 X2 X3 arrow rel3 X1 X2 X3 arrow form) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] @ (eqrel (rel X2 X3)) (eqrel (X1 arrow rel X2 X3)) (@ (eqrel X1) (eqrel (rel X2 X3) arrow eqrel (X1 arrow rel X2 X3)) (eq+ X1 (rel X2 X3)) x3) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) x4) x5)) Eq1 Eq2 Eq3)) p8)) ([p10:pf (@ (rel X2 X3) form (@ (rel X2 X3) (shadowed_0 (rel X2 X3)) (@ (eqrel X3) (eqrel (rel X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel X2 X3)) (eq_rel X2 X3) Eq2) Eq3) (@ X1 (rel X2 X3) R1 X)) (@ X1 (rel X2 X3) R2 X))] eq_rel_e X2 Eq2 X3 Eq3 (@ X1 (rel X2 X3) R1 X) (@ X1 (rel X2 X3) R2 X) Y Z p4 p6 p10).
eq_rel4_i : {X1:tp} {Eq2:tm (eqrel X1)} {X2:tp} {Eq3:tm (eqrel X2)} {X3:tp} {Eq4:tm (eqrel X3)} {X4:tp} {R1:tm (X4 arrow X1 arrow X2 arrow X3 arrow form)} {R2:tm (X4 arrow X1 arrow X2 arrow X3 arrow form)} {Eq1:tm (eqrel X4)} pf (@ (eqrel X1) form (valideqv X1) Eq2) -> pf (@ (eqrel X2) form (valideqv X2) Eq3) -> pf (@ (eqrel X3) form (valideqv X3) Eq4) -> ({x3:tm X4} {x4:tm X1} {x5:tm X2} {x6:tm X3} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (@ X4 (X1 arrow X2 arrow X3 arrow form) R1 x3) x4) x5) x6)) (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (@ X4 (X1 arrow X2 arrow X3 arrow form) R2 x3) x4) x5) x6))) -> pf (@ (rel4 X4 X1 X2 X3) form (@ (rel4 X4 X1 X2 X3) (shadowed_0 (rel4 X4 X1 X2 X3)) (@ (eqrel X3) (eqrel (rel4 X4 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel4 X4 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel4 X4 X1 X2 X3)) (@ (eqrel X4) (eqrel X1 arrow eqrel X2 arrow eqrel X3 arrow eqrel (rel4 X4 X1 X2 X3)) (eq_rel4 X4 X1 X2 X3) Eq1) Eq2) Eq3) Eq4) R1) R2) = [X1:tp] [Eq2:tm (eqrel X1)] [X2:tp] [Eq3:tm (eqrel X2)] [X3:tp] [Eq4:tm (eqrel X3)] [X4:tp] [R1:tm (X4 arrow X1 arrow X2 arrow X3 arrow form)] [R2:tm (X4 arrow X1 arrow X2 arrow X3 arrow form)] [Eq1:tm (eqrel X4)] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq2)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq3)] [p6:pf (@ (eqrel X3) form (valideqv X3) Eq4)] [p8:{x7:tm X4} {x8:tm X1} {x3:tm X2} {x4:tm X3} pf (@ form form (@ form (shadowed_0 form) eq_form (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (@ X4 (X1 arrow X2 arrow X3 arrow form) R1 x7) x8) x3) x4)) (@ X3 form (@ X2 (X3 arrow form) (@ X1 (X2 arrow X3 arrow form) (@ X4 (X1 arrow X2 arrow X3 arrow form) R2 x7) x8) x3) x4))] def2_congr1 (X4 arrow rel3 X1 X2 X3) (X4 arrow rel3 X1 X2 X3) (@ (eqrel X3) ((X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) (@ (eqrel X2) (eqrel X3 arrow (X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow (X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) (@ (eqrel X4) (eqrel X1 arrow eqrel X2 arrow eqrel X3 arrow (X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) (lam4 (eqrel X4) (eqrel X1) (eqrel X2) (eqrel X3) ((X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) ([x3:tm (eqrel X4)] [x4:tm (eqrel X1)] [x5:tm (eqrel X2)] [x6:tm (eqrel X3)] @ (eqrel (rel3 X1 X2 X3)) (eqrel (X4 arrow rel3 X1 X2 X3)) (@ (eqrel X4) (eqrel (rel3 X1 X2 X3) arrow eqrel (X4 arrow rel3 X1 X2 X3)) (eq+ X4 (rel3 X1 X2 X3)) x3) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) x4) x5) x6))) Eq1) Eq2) Eq3) Eq4) (@ (eqrel (rel3 X1 X2 X3)) (eqrel (X4 arrow rel3 X1 X2 X3)) (@ (eqrel X4) (eqrel (rel3 X1 X2 X3) arrow eqrel (X4 arrow rel3 X1 X2 X3)) (eq+ X4 (rel3 X1 X2 X3)) Eq1) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) Eq2) Eq3) Eq4)) R1 R2 (beta4 ((X4 arrow rel3 X1 X2 X3) arrow (X4 arrow rel3 X1 X2 X3) arrow form) (eqrel X3) (eqrel X2) (eqrel X1) (eqrel X4) ([x3:tm (eqrel X4)] [x4:tm (eqrel X1)] [x5:tm (eqrel X2)] [x6:tm (eqrel X3)] @ (eqrel (rel3 X1 X2 X3)) (eqrel (X4 arrow rel3 X1 X2 X3)) (@ (eqrel X4) (eqrel (rel3 X1 X2 X3) arrow eqrel (X4 arrow rel3 X1 X2 X3)) (eq+ X4 (rel3 X1 X2 X3)) x3) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) x4) x5) x6)) Eq1 Eq2 Eq3 Eq4) (eq+_i2 (rel3 X1 X2 X3) (@ (eqrel X3) (eqrel (rel3 X1 X2 X3)) (@ (eqrel X2) (eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel (rel3 X1 X2 X3)) (eq_rel3 X1 X2 X3) Eq2) Eq3) Eq4) X4 R1 R2 Eq1 (valideqv_eq_rel3 X1 Eq2 X2 Eq3 X3 Eq4 p2 p4 p6) ([x9:tm X4] eq_rel3_i X2 Eq3 X3 Eq4 X1 (@ X4 (X1 arrow X2 arrow X3 arrow form) R1 x9) (@ X4 (X1 arrow X2 arrow X3 arrow form) R2 x9) Eq2 p4 p6 ([x10:tm X1] [x3:tm X2] [x4:tm X3] p8 x9 x10 x3 x4))).
eq_rel4_e : {X1:tp} {Eq1:tm (eqrel X1)} {X2:tp} {Eq2:tm (eqrel X2)} {X3:tp} {Eq3:tm (eqrel X3)} {X4:tp} {Eq4:tm (eqrel X4)} {R1:tm (rel4 X1 X2 X3 X4)} {R2:tm (rel4 X1 X2 X3 X4)} {X5:tm X1} {X6:tm X2} {X7:tm X3} {X8:tm X4} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X2) form (valideqv X2) Eq2) -> pf (@ (eqrel X3) form (valideqv X3) Eq3) -> pf (@ (eqrel X4) form (valideqv X4) Eq4) -> pf (@ (rel4 X1 X2 X3 X4) form (@ (rel4 X1 X2 X3 X4) (shadowed_0 (rel4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (eq_rel4 X1 X2 X3 X4) Eq1) Eq2) Eq3) Eq4) R1) R2) -> pf (@ form form (@ form (shadowed_0 form) eq_form (@ X4 form (@ X3 (shadowed_0 X4) (@ X2 (rel X3 X4) (@ X1 (rel3 X2 X3 X4) R1 X5) X6) X7) X8)) (@ X4 form (@ X3 (shadowed_0 X4) (@ X2 (rel X3 X4) (@ X1 (rel3 X2 X3 X4) R2 X5) X6) X7) X8)) = [X1:tp] [Eq1:tm (eqrel X1)] [X2:tp] [Eq2:tm (eqrel X2)] [X3:tp] [Eq3:tm (eqrel X3)] [X4:tp] [Eq4:tm (eqrel X4)] [R1:tm (rel4 X1 X2 X3 X4)] [R2:tm (rel4 X1 X2 X3 X4)] [X5:tm X1] [X6:tm X2] [X7:tm X3] [X8:tm X4] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p4:pf (@ (eqrel X2) form (valideqv X2) Eq2)] [p6:pf (@ (eqrel X3) form (valideqv X3) Eq3)] [p8:pf (@ (eqrel X4) form (valideqv X4) Eq4)] [p10:pf (@ (rel4 X1 X2 X3 X4) form (@ (rel4 X1 X2 X3 X4) (shadowed_0 (rel4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (rel4 X1 X2 X3 X4)) (eq_rel4 X1 X2 X3 X4) Eq1) Eq2) Eq3) Eq4) R1) R2)] cut (@ (rel3 X2 X3 X4) form (@ (rel3 X2 X3 X4) (shadowed_0 (rel3 X2 X3 X4)) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) Eq2) Eq3) Eq4) (@ X1 (rel3 X2 X3 X4) R1 X5)) (@ X1 (rel3 X2 X3 X4) R2 X5)) (@ form form (@ form (shadowed_0 form) eq_form (@ X4 form (@ X3 (shadowed_0 X4) (@ X2 (rel X3 X4) (@ X1 (rel3 X2 X3 X4) R1 X5) X6) X7) X8)) (@ X4 form (@ X3 (shadowed_0 X4) (@ X2 (rel X3 X4) (@ X1 (rel3 X2 X3 X4) R2 X5) X6) X7) X8)) (eq+_e2 X1 Eq1 (rel3 X2 X3 X4) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) Eq2) Eq3) Eq4) R1 R2 X5 p2 (valideqv_eq_rel3 X2 Eq2 X3 Eq3 X4 Eq4 p4 p6 p8) (def2_congr1 (rel4 X1 X2 X3 X4) (rel4 X1 X2 X3 X4) (@ (eqrel (rel3 X2 X3 X4)) (eqrel (X1 arrow rel3 X2 X3 X4)) (@ (eqrel X1) (eqrel (rel3 X2 X3 X4) arrow eqrel (X1 arrow rel3 X2 X3 X4)) (eq+ X1 (rel3 X2 X3 X4)) Eq1) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) Eq2) Eq3) Eq4)) (@ (eqrel X4) (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X3) (eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (lam4 (eqrel X1) (eqrel X2) (eqrel X3) (eqrel X4) (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] @ (eqrel (rel3 X2 X3 X4)) (eqrel (X1 arrow rel3 X2 X3 X4)) (@ (eqrel X1) (eqrel (rel3 X2 X3 X4) arrow eqrel (X1 arrow rel3 X2 X3 X4)) (eq+ X1 (rel3 X2 X3 X4)) x3) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) x4) x5) x6))) Eq1) Eq2) Eq3) Eq4) R1 R2 (symm (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X4) (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X3) (eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (lam4 (eqrel X1) (eqrel X2) (eqrel X3) (eqrel X4) (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] @ (eqrel (rel3 X2 X3 X4)) (eqrel (X1 arrow rel3 X2 X3 X4)) (@ (eqrel X1) (eqrel (rel3 X2 X3 X4) arrow eqrel (X1 arrow rel3 X2 X3 X4)) (eq+ X1 (rel3 X2 X3 X4)) x3) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) x4) x5) x6))) Eq1) Eq2) Eq3) Eq4) (@ (eqrel (rel3 X2 X3 X4)) (eqrel (X1 arrow rel3 X2 X3 X4)) (@ (eqrel X1) (eqrel (rel3 X2 X3 X4) arrow eqrel (X1 arrow rel3 X2 X3 X4)) (eq+ X1 (rel3 X2 X3 X4)) Eq1) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) Eq2) Eq3) Eq4)) (beta4 (rel4 X1 X2 X3 X4 arrow rel4 X1 X2 X3 X4 arrow form) (eqrel X4) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] @ (eqrel (rel3 X2 X3 X4)) (eqrel (X1 arrow rel3 X2 X3 X4)) (@ (eqrel X1) (eqrel (rel3 X2 X3 X4) arrow eqrel (X1 arrow rel3 X2 X3 X4)) (eq+ X1 (rel3 X2 X3 X4)) x3) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) x4) x5) x6)) Eq1 Eq2 Eq3 Eq4)) p10)) ([p20:pf (@ (rel3 X2 X3 X4) form (@ (rel3 X2 X3 X4) (shadowed_0 (rel3 X2 X3 X4)) (@ (eqrel X4) (eqrel (rel3 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (rel3 X2 X3 X4)) (eq_rel3 X2 X3 X4) Eq2) Eq3) Eq4) (@ X1 (rel3 X2 X3 X4) R1 X5)) (@ X1 (rel3 X2 X3 X4) R2 X5))] eq_rel3_e X2 Eq2 X3 Eq3 X4 Eq4 (@ X1 (rel3 X2 X3 X4) R1 X5) (@ X1 (rel3 X2 X3 X4) R2 X5) X6 X7 X8 p4 p6 p8 p20).
rel_intersect_refl : {X1:tp} {Eq1:tm (rel X1 X1)} {Eq2:tm (rel X1 X1)} {X:tm X1} pf (@ (rel X1 X1) form (reflexive X1) Eq1) -> pf (@ (rel X1 X1) form (reflexive X1) Eq2) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) X) = [X1:tp] [Eq1:tm (rel X1 X1)] [Eq2:tm (rel X1 X1)] [X:tm X1] [p1:pf (@ (rel X1 X1) form (reflexive X1) Eq1)] [p2:pf (@ (rel X1 X1) form (reflexive X1) Eq2)] rel_intersect_i X1 X1 Eq1 X X Eq2 (reflexive_e X1 Eq1 X p1) (reflexive_e X1 Eq2 X p2).
rel_intersect_reflexive : {T:tp} {Eq1:tm (rel T T)} {Eq2:tm (rel T T)} pf (@ (rel T T) form (reflexive T) Eq1) -> pf (@ (rel T T) form (reflexive T) Eq2) -> pf (@ (rel T T) form (reflexive T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2)) = [T:tp] [Eq1:tm (rel T T)] [Eq2:tm (rel T T)] [p1:pf (@ (rel T T) form (reflexive T) Eq1)] [p2:pf (@ (rel T T) form (reflexive T) Eq2)] reflexive_i T (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) ([x3:tm T] rel_intersect_refl T Eq1 Eq2 x3 p1 p2).
rel_intersect_symm : {X1:tp} {Eq1:tm (rel X1 X1)} {Eq2:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (@ (rel X1 X1) form (symmetric X1) Eq1) -> pf (@ (rel X1 X1) form (symmetric X1) Eq2) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) Y) X) = [X1:tp] [Eq1:tm (rel X1 X1)] [Eq2:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ (rel X1 X1) form (symmetric X1) Eq1)] [p2:pf (@ (rel X1 X1) form (symmetric X1) Eq2)] [p3:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) Y)] rel_intersect_i X1 X1 Eq1 Y X Eq2 (symmetric_e X1 Eq1 X Y p1 (rel_intersect_e1 X1 X1 Eq1 Eq2 X Y p3)) (symmetric_e X1 Eq2 X Y p2 (rel_intersect_e2 X1 X1 Eq1 Eq2 X Y p3)).
rel_intersect_symmetric : {T:tp} {Eq1:tm (rel T T)} {Eq2:tm (rel T T)} pf (@ (rel T T) form (symmetric T) Eq1) -> pf (@ (rel T T) form (symmetric T) Eq2) -> pf (@ (rel T T) form (symmetric T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2)) = [T:tp] [Eq1:tm (rel T T)] [Eq2:tm (rel T T)] [p1:pf (@ (rel T T) form (symmetric T) Eq1)] [p2:pf (@ (rel T T) form (symmetric T) Eq2)] symmetric_i T (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) ([x3:tm T] [y:tm T] [x4:pf (@ T form (@ T (shadowed_0 T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) x3) y)] rel_intersect_symm T Eq1 Eq2 x3 y p1 p2 x4).
rel_intersect_trans : {X1:tp} {Eq1:tm (rel X1 X1)} {Eq2:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (@ (rel X1 X1) form (transitive X1) Eq1) -> pf (@ (rel X1 X1) form (transitive X1) Eq2) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) Y) Z) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) Z) = [X1:tp] [Eq1:tm (rel X1 X1)] [Eq2:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [p1:pf (@ (rel X1 X1) form (transitive X1) Eq1)] [p2:pf (@ (rel X1 X1) form (transitive X1) Eq2)] [p3:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) X) Y)] [p4:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) Y) Z)] rel_intersect_i X1 X1 Eq1 X Z Eq2 (transitive_e X1 Eq1 X Y Z p1 (rel_intersect_e1 X1 X1 Eq1 Eq2 X Y p3) (rel_intersect_e1 X1 X1 Eq1 Eq2 Y Z p4)) (transitive_e X1 Eq2 X Y Z p2 (rel_intersect_e2 X1 X1 Eq1 Eq2 X Y p3) (rel_intersect_e2 X1 X1 Eq1 Eq2 Y Z p4)).
rel_intersect_transitive : {T:tp} {Eq1:tm (rel T T)} {Eq2:tm (rel T T)} pf (@ (rel T T) form (transitive T) Eq1) -> pf (@ (rel T T) form (transitive T) Eq2) -> pf (@ (rel T T) form (transitive T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2)) = [T:tp] [Eq1:tm (rel T T)] [Eq2:tm (rel T T)] [p1:pf (@ (rel T T) form (transitive T) Eq1)] [p2:pf (@ (rel T T) form (transitive T) Eq2)] transitive_i T (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) ([x3:tm T] [y:tm T] [z1:tm T] [x4:pf (@ T form (@ T (shadowed_0 T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) x3) y)] [x5:pf (@ T form (@ T (shadowed_0 T) (@ (rel T T) (rel T T) (@ (rel T T) (1ary (rel T T)) (rel_intersect T T) Eq1) Eq2) y) z1)] rel_intersect_trans T Eq1 Eq2 x3 y z1 p1 p2 x4 x5).
valideqv_rel_intersect : {X1:tp} {Eq1:tm (eqrel X1)} {Eq2:tm (eqrel X1)} pf (@ (eqrel X1) form (valideqv X1) Eq1) -> pf (@ (eqrel X1) form (valideqv X1) Eq2) -> pf (@ (eqrel X1) form (valideqv X1) (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2)) = [X1:tp] [Eq1:tm (eqrel X1)] [Eq2:tm (eqrel X1)] [p1:pf (@ (eqrel X1) form (valideqv X1) Eq1)] [p2:pf (@ (eqrel X1) form (valideqv X1) Eq2)] valideqv_i X1 (@ (rel X1 X1) (rel X1 X1) (@ (rel X1 X1) (1ary (rel X1 X1)) (rel_intersect X1 X1) Eq1) Eq2) (rel_intersect_reflexive X1 Eq1 Eq2 (valideqv_e1 X1 Eq1 p1) (valideqv_e1 X1 Eq2 p2)) (rel_intersect_symmetric X1 Eq1 Eq2 (valideqv_e2 X1 Eq1 p1) (valideqv_e2 X1 Eq2 p2)) (rel_intersect_transitive X1 Eq1 Eq2 (valideqv_e3 X1 Eq1 p1) (valideqv_e3 X1 Eq2 p2)).
ncomp_rel : {T:tp} tm (rel T T arrow num arrow rel T T) = [T:tp] lam4 (T arrow T arrow form) num T T form ([r:tm (T arrow T arrow form)] [n:tm num] [x3:tm T] [y:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr r) zero) z1) z1) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr r) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) r z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr r) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr r) n) x3) y)).
kleene_star : {T:tp} tm ((T arrow T arrow form) arrow T arrow T arrow form) = [T:tp] lam (T arrow T arrow form) (T arrow T arrow form) ([R:tm (T arrow T arrow form)] lam2 T T form ([V:tm T] [W:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) S Z) Z) imp forall3 T T T ([X:tm T] [Y:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X) Y imp @ T form (@ T (T arrow form) S Y) Z imp @ T form (@ T (T arrow form) S X) Z) imp @ T form (@ T (T arrow form) S V) W))).
ncomp_rel_isNat_pred : {T:tp} tm (rel T T arrow num arrow rel T T) = [T:tp] lam4 (rel T T) num T T form ([r:tm (rel T T)] [n:tm num] [x3:tm T] [y:tm T] isNat n).
ncomp_rel_isNat : {T:tp} {R:tm (rel T T)} {N:tm num} {X:tm T} {Y:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y) -> pf (isNat N) = [T:tp] [R:tm (rel T T)] [N:tm num] [X:tm T] [Y:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y)] def4_e T T num (T arrow T arrow form) ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] isNat x4) R N X Y (imp2_e (forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_isNat_pred T) R) zero) z1) z1)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_isNat_pred T) R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_isNat_pred T) R) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_isNat_pred T) R) N) X) Y) (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) N) X) Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z3) z3) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R N X Y p1) (ncomp_rel_isNat_pred T)) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] isNat x5)) R) zero) x3) x3) ([z4:tm T] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] isNat x4) R zero z4 z4 n_zero)) (forall4_i num T T T ([x3:tm num] [x4:tm T] [x5:tm T] [x6:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_isNat_pred T) R) (pred x3)) x4) x5 imp @ T form (@ T (shadowed_0 T) R x5) x6 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x7:tm (T arrow T arrow form)] [x8:tm num] [x9:tm T] [x10:tm T] isNat x8)) R) x3) x4) x6) ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] imp4_i (isNat n') (gt n' zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_isNat_pred T) R) (pred n')) z1) z2) (@ T form (@ T (shadowed_0 T) R z2) z3) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] isNat x4)) R) n') z1) z3) ([p2:pf (isNat n')] [p3:pf (gt n' zero)] [p4:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_isNat_pred T) R) (pred n')) z1) z2)] [p5:pf (@ T form (@ T (shadowed_0 T) R z2) z3)] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] isNat x4) R n' z1 z3 p2)))).
ncomp_rel_zero : {T:tp} {R:tm (rel T T)} {X:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) X) X) = [T:tp] [R:tm (rel T T)] [X:tm T] def4_i (rel T T) num T T ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z1) z1) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R zero X X (forall_i (rel T T arrow num arrow rel T T) ([x3:tm (rel T T arrow num arrow rel T T)] forall T ([z2:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) n') z1) z3) imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) zero) X) X) ([nr:tm (rel T T arrow num arrow rel T T)] imp2_i (forall T ([z3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) z3) z3)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) n') z1) z3)) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) X) X) ([p1:pf (forall T ([z4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) z4) z4))] [p2:pf (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) n') z1) z3))] forall_e T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) x3) x3) p1 X))).
ncomp_rel_succ : {T:tp} {R:tm (rel T T)} {N:tm num} {X:tm T} {Y:tm T} {Z:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y) -> pf (@ T form (@ T (shadowed_0 T) R Y) Z) -> pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (succ N)) X) Z) = [T:tp] [R:tm (rel T T)] [N:tm num] [X:tm T] [Y:tm T] [Z:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y)] [p2:pf (@ T form (@ T (shadowed_0 T) R Y) Z)] def4_i (rel T T) num T T ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z1) z1) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R (succ N) X Z (forall_i (rel T T arrow num arrow rel T T) ([x3:tm (rel T T arrow num arrow rel T T)] forall T ([z2:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) n') z1) z3) imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) x3 R) (succ N)) X) Z) ([nr:tm (rel T T arrow num arrow rel T T)] imp2_i (forall T ([z3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) z3) z3)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) n') z1) z3)) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (succ N)) X) Z) ([p3:pf (forall T ([z4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) zero) z4) z4))] [p4:pf (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp gt n' zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred n')) z1) z2 imp @ T form (@ T (shadowed_0 T) R z2) z3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) n') z1) z3))] imp4_e (isNat (succ N)) (gt (succ N) zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred (succ N))) X) Y) (@ T form (@ T (shadowed_0 T) R Y) Z) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (succ N)) X) Z) (forall4_e num T T T ([x3:tm num] [x4:tm T] [x5:tm T] [x6:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) (pred x3)) x4) x5 imp @ T form (@ T (shadowed_0 T) R x5) x6 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) x3) x4) x6) p4 (succ N) X Y Z) (isNat_succ_i N (ncomp_rel_isNat T R N X Y p1)) (trans_gt_geq (succ N) N zero (succ_greater N) (isNat->geq_zero N (ncomp_rel_isNat T R N X Y p1))) (congr num (pred (succ N)) N ([z5:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) nr R) z5) X) Y) (predsucc N) (imp2_e (forall T ([z6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr R) zero) z6) z6)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr R) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr R) N) X) Y) (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z7:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) zero) z7) z7) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) N) X) Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr1:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z8:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr1 x3) zero) z8) z8) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr1 x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr1 x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr1 x3) x4) x5) x6)) R N X Y p1) nr) p3 p4)) p2))).
ncomp_rel_one : {X1:tp} {R:tm (X1 arrow X1 arrow form)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) R X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) one) X) Y) = [X1:tp] [R:tm (X1 arrow X1 arrow form)] [X:tm X1] [Y:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) R X) Y)] congr num one (+ zero one) ([z1:tm num] @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) z1) X) Y) (symm num (+ zero one) one (zero_plus one)) (ncomp_rel_succ X1 R zero X X Y (ncomp_rel_zero X1 R X) p1).
ncomp_rel_inv_pred : {T:tp} tm (rel T T arrow num arrow rel T T) = [T:tp] lam4 (rel T T) num T T form ([r:tm (rel T T)] [n:tm num] [x3:tm T] [y:tm T] eq num n zero and eq T x3 y or gt n zero and exists T ([z1:tm T] @ T form (@ T (shadowed_0 T) r x3) z1 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) (pred n)) z1) y)).
ncomp_rel_inv : {T:tp} {R:tm (rel T T)} {N:tm num} {X:tm T} {Y:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y) -> pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_inv_pred T) R) N) X) Y) = [T:tp] [R:tm (rel T T)] [N:tm num] [X:tm T] [Y:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y)] imp2_e (forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_inv_pred T) R) zero) z1) z1)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_inv_pred T) R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_inv_pred T) R) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_inv_pred T) R) N) X) Y) (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) N) X) Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z3) z3) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R N X Y p1) (ncomp_rel_inv_pred T)) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] eq num x5 zero and eq T x6 x7 or gt x5 zero and exists T ([z4:tm T] @ T form (@ T (shadowed_0 T) x4 x6) z4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) (pred x5)) z4) x7))) R) zero) x3) x3) ([z5:tm T] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] eq num x4 zero and eq T x5 x6 or gt x4 zero and exists T ([z6:tm T] @ T form (@ T (shadowed_0 T) x3 x5) z6 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (pred x4)) z6) x6)) R zero z5 z5 (or_i1 (== num zero zero and == T z5 z5) (gt zero zero and exists T ([z7:tm T] @ T form (@ T (shadowed_0 T) R z5) z7 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred zero)) z7) z5)) (and_i (== num zero zero) (== T z5 z5) (refl num zero) (refl T z5))))) (forall4_i num T T T ([x3:tm num] [x4:tm T] [x5:tm T] [x6:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_inv_pred T) R) (pred x3)) x4) x5 imp @ T form (@ T (shadowed_0 T) R x5) x6 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x7:tm (T arrow T arrow form)] [x8:tm num] [x9:tm T] [x10:tm T] eq num x8 zero and eq T x9 x10 or gt x8 zero and exists T ([z8:tm T] @ T form (@ T (shadowed_0 T) x7 x9) z8 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) (pred x8)) z8) x10))) R) x3) x4) x6) ([n:tm num] [z1:tm T] [z2:tm T] [z3:tm T] imp4_i (isNat n) (gt n zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_inv_pred T) R) (pred n)) z1) z2) (@ T form (@ T (shadowed_0 T) R z2) z3) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] eq num x4 zero and eq T x5 x6 or gt x4 zero and exists T ([z9:tm T] @ T form (@ T (shadowed_0 T) x3 x5) z9 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (pred x4)) z9) x6))) R) n) z1) z3) ([p2:pf (isNat n)] [p3:pf (gt n zero)] [p4:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_inv_pred T) R) (pred n)) z1) z2)] [p5:pf (@ T form (@ T (shadowed_0 T) R z2) z3)] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] eq num x4 zero and eq T x5 x6 or gt x4 zero and exists T ([z10:tm T] @ T form (@ T (shadowed_0 T) x3 x5) z10 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (pred x4)) z10) x6)) R n z1 z3 (or_i2 (gt n zero and exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) x3) z3)) (eq num n zero and eq T z1 z3) (and_i (gt n zero) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) x3) z3)) p3 (or_e (eq num (pred n) zero and eq T z1 z2) (gt (pred n) zero and exists T ([z11:tm T] @ T form (@ T (shadowed_0 T) R z1) z11 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z11) z2)) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) x3) z3)) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] eq num x4 zero and eq T x5 x6 or gt x4 zero and exists T ([z12:tm T] @ T form (@ T (shadowed_0 T) x3 x5) z12 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (pred x4)) z12) x6)) R (pred n) z1 z2 p4) ([p6:pf (eq num (pred n) zero and eq T z1 z2)] exists_i T ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) x3) z3) z3 (and_i (@ T form (@ T (shadowed_0 T) R z1) z3) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) z3) z3) (congr T z1 z2 ([z13:tm T] @ T form (@ T (shadowed_0 T) R z13) z3) (and_e2 (eq num (pred n) zero) (eq T z1 z2) p6) p5) (congr num (pred n) zero ([z14:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z14) z3) z3) (and_e1 (eq num (pred n) zero) (eq T z1 z2) p6) (ncomp_rel_zero T R z3)))) ([p6:pf (gt (pred n) zero and exists T ([z15:tm T] @ T form (@ T (shadowed_0 T) R z1) z15 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z15) z2))] exists_ei T ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) x3) z2) ([x3:tm T] @ T form (@ T (shadowed_0 T) R z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) x3) z3) (and_e2 (gt (pred n) zero) (exists T ([z16:tm T] @ T form (@ T (shadowed_0 T) R z1) z16 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z16) z2)) p6) ([z17:tm T] [p7:pf (@ T form (@ T (shadowed_0 T) R z1) z17 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z17) z2)] and_i (@ T form (@ T (shadowed_0 T) R z1) z17) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) z17) z3) (and_e1 (@ T form (@ T (shadowed_0 T) R z1) z17) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z17) z2) p7) (congr num (pred n) (succ (pred (pred n))) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z17) z3) (symm num (succ (pred (pred n))) (pred n) (succpred (pred n))) (ncomp_rel_succ T R (pred (pred n)) z17 z2 z3 (and_e2 (@ T form (@ T (shadowed_0 T) R z1) z17) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (pred n))) z17) z2) p7) p5)))))))))).
ncomp_rel_zero_inv : {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) zero) X) Y imp eq X1 X Y) = [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] imp_i (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) zero) X) Y) (eq X1 X Y) ([p1:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) zero) X) Y)] or_e (eq num zero zero and eq X1 X Y) (gt zero zero and exists X1 ([z1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z1 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred zero)) z1) Y)) (eq X1 X Y) (def4_e X1 X1 num (rel X1 X1) ([x3:tm (rel X1 X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] eq num x4 zero and eq X1 x5 x6 or gt x4 zero and exists X1 ([z2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) z2 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) x3) (pred x4)) z2) x6)) R zero X Y (ncomp_rel_inv X1 R zero X Y p1)) ([p2:pf (eq num zero zero and eq X1 X Y)] and_e2 (eq num zero zero) (eq X1 X Y) p2) ([p2:pf (gt zero zero and exists X1 ([z3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z3 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred zero)) z3) Y))] false_e (eq X1 X Y) (not_e (geq zero zero) (and_e1 (gt zero zero) (exists X1 ([z4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z4 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred zero)) z4) Y)) p2) (ord_reflexivity zero)))).
ncomp_rel_gt_zero_inv : {N:tnum} {X1:tp} {R:tm (rel X1 X1)} {X:tm X1} {Y:tm X1} pf (gt N zero) -> pf (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) N) X) Y) -> pf (exists X1 ([z1:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z1 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z1) Y)) = [N:tnum] [X1:tp] [R:tm (rel X1 X1)] [X:tm X1] [Y:tm X1] [p1:pf (gt N zero)] [p2:pf (@ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) N) X) Y)] or_e (eq num N zero and eq X1 X Y) (gt N zero and exists X1 ([z2:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z2 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z2) Y)) (exists X1 ([z3:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z3 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z3) Y)) (def4_e X1 X1 num (rel X1 X1) ([x3:tm (rel X1 X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] eq num x4 zero and eq X1 x5 x6 or gt x4 zero and exists X1 ([z4:tm X1] @ X1 form (@ X1 (shadowed_0 X1) x3 x5) z4 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) x3) (pred x4)) z4) x6)) R N X Y (ncomp_rel_inv X1 R N X Y p2)) ([p3:pf (eq num N zero and eq X1 X Y)] false_e (exists X1 ([z5:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z5 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z5) Y)) (not_e (eq num N zero) (gt->neq N zero p1) (and_e1 (eq num N zero) (eq X1 X Y) p3))) ([p3:pf (gt N zero and exists X1 ([z6:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z6 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z6) Y))] and_e2 (gt N zero) (exists X1 ([z7:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R X) z7 and @ X1 form (@ X1 (shadowed_0 X1) (@ num (rel X1 X1) (@ (rel X1 X1) (num arrow rel X1 X1) (ncomp_rel X1) R) (pred N)) z7) Y)) p3).
ncomp_rel_one_inv : {T:tp} {R:tm (rel T T)} {X:tm T} {Y:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) one) X) Y imp @ T form (@ T (shadowed_0 T) R X) Y) = [T:tp] [R:tm (rel T T)] [X:tm T] [Y:tm T] imp_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) one) X) Y) (@ T form (@ T (shadowed_0 T) R X) Y) ([p1:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) one) X) Y)] exists_e T ([x3:tm T] @ T form (@ T (shadowed_0 T) R X) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (+ zero (const 1)))) x3) Y) (@ T form (@ T (shadowed_0 T) R X) Y) (ncomp_rel_gt_zero_inv (+ zero (const 1)) T R X Y (gt_cong (const 1) (+ zero (const 1)) (const 0) (const 0) (symm num (+ zero (const 1)) (const 1) (zero_plus (const 1))) (refl num (const 0)) greater1_0) (congr num (+ zero one) one ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') X) Y) (zero_plus one) p1)) ([z1:tm T] [p2:pf (@ T form (@ T (shadowed_0 T) R X) z1 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ zero))) z1) Y)] congr T Y z1 ([z':tm T] @ T form (@ T (shadowed_0 T) R X) z') (symm T z1 Y (imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) z1) Y) (eq T z1 Y) (ncomp_rel_zero_inv T R z1 Y) (congr num zero (pred (succ zero)) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z1) Y) (symm num (pred (succ zero)) zero (predsucc zero)) (and_e2 (@ T form (@ T (shadowed_0 T) R X) z1) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ zero))) z1) Y) p2)))) (and_e1 (@ T form (@ T (shadowed_0 T) R X) z1) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ zero))) z1) Y) p2))).
ncomp_rel_compose_pred : {T:tp} {N':tm num} {X':tm T} tm (rel T T arrow num arrow rel T T) = [T:tp] [N':tm num] [X':tm T] lam4 (rel T T) num T T form ([r:tm (rel T T)] [n:tm num] [x3:tm T] [y:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) N') X') x3 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) (plus N' n)) X') y).
ncomp_rel_compose : {T:tp} {R:tm (rel T T)} {N':tm num} {X':tm T} {X:tm T} {N:tm num} {Y:tm T} pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') X) -> pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y) -> pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus N' N)) X') Y) = [T:tp] [R:tm (rel T T)] [N':tm num] [X':tm T] [X:tm T] [N:tm num] [Y:tm T] [p1:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') X)] [p2:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N) X) Y)] cut (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_compose_pred T N' X') R) N) X) Y) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus N' N)) X') Y) (imp2_e (forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_compose_pred T N' X') R) zero) z1) z1)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_compose_pred T N' X') R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_compose_pred T N' X') R) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_compose_pred T N' X') R) N) X) Y) (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) N) X) Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z3) z3) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R N X Y p2) (ncomp_rel_compose_pred T N' X')) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) N') X') x6 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) (plus N' x5)) X') x7)) R) zero) x3) x3) ([z4:tm T] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) N') X') x5 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (plus N' x4)) X') x6) R zero z4 z4 (imp_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') z4) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ N' zero)) X') z4) ([p3:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') z4)] congr num (+ N' zero) N' ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') X') z4) (plus_zero N') p3)))) (forall4_i num T T T ([x3:tm num] [x4:tm T] [x5:tm T] [x6:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_compose_pred T N' X') R) (pred x3)) x4) x5 imp @ T form (@ T (shadowed_0 T) R x5) x6 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x7:tm (T arrow T arrow form)] [x8:tm num] [x9:tm T] [x10:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) N') X') x9 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) (plus N' x8)) X') x10)) R) x3) x4) x6) ([n:tm num] [z1:tm T] [z2:tm T] [z3:tm T] imp4_i (isNat n) (gt n zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_compose_pred T N' X') R) (pred n)) z1) z2) (@ T form (@ T (shadowed_0 T) R z2) z3) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) N') X') x5 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (plus N' x4)) X') x6)) R) n) z1) z3) ([p3:pf (isNat n)] [p4:pf (gt n zero)] [p5:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_compose_pred T N' X') R) (pred n)) z1) z2)] [p6:pf (@ T form (@ T (shadowed_0 T) R z2) z3)] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) N') X') x5 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (plus N' x4)) X') x6) R n z1 z3 (imp_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') z1) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ N' n)) X') z3) ([p7:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') z1)] congr num (+ N' n) (plus (plus N' (pred n)) one) ([z5:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z5) X') z3) (trans num (+ N' n) (+ N' (succ (pred n))) (plus (plus N' (pred n)) one) (plus_cong N' N' n (succ (pred n)) (refl num N') (symm num (succ (pred n)) n (succpred n))) (symm num (plus (plus N' (pred n)) one) (plus N' (plus (pred n) one)) (assoc_add N' (pred n) one))) (ncomp_rel_succ T R (plus N' (pred n)) X' z2 z3 (imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') z1) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus N' (pred n))) X') z2) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) N') X') x5 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (plus N' x4)) X') x6) R (pred n) z1 z2 p5) p7) p6))))))) ([p3:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_compose_pred T N' X') R) N) X) Y)] imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) N') X') X) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus N' N)) X') Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) N') X') x5 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (plus N' x4)) X') x6) R N X Y p3) p1).
ncomp_rel_split_pred : {T:tp} tm (rel T T arrow num arrow rel T T) = [T:tp] lam4 (rel T T) num T T form ([r:tm (rel T T)] [n:tm num] [x3:tm T] [y:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) n) x3) y and forall num ([j:tm num] isNat j imp geq n j imp exists T ([z1:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) j) x3) z1 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) r) (minus n j)) z1) y))).
ncomp_rel_split : {I:tnum} {J:tnum} {T:tp} {R:tm (rel T T)} {X:tm T} {Y:tm T} pf (isNat I) -> pf (isNat J) -> pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus I J)) X) Y) -> pf (exists T ([z1:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z1 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) J) z1) Y)) = [I:tnum] [J:tnum] [T:tp] [R:tm (rel T T)] [X:tm T] [Y:tm T] [p1:pf (isNat I)] [p2:pf (isNat J)] [p3:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus I J)) X) Y)] cut (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_split_pred T) R) (plus I J)) X) Y) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) J) x3) Y)) (imp2_e (forall T ([z2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_split_pred T) R) zero) z2) z2)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_split_pred T) R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_split_pred T) R) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_split_pred T) R) (plus I J)) X) Y) (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) zero) z3) z3) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) R z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x3 R) (plus I J)) X) Y) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z4:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) zero) z4) z4) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x3 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x3) x4) x5) x6)) R (plus I J) X Y p3) (ncomp_rel_split_pred T)) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and forall num ([j:tm num] isNat j imp geq x5 j imp exists T ([z5:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) j) x6) z5 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) (minus x5 j)) z5) x7)))) R) zero) x3) x3) ([z6:tm T] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j:tm num] isNat j imp geq x4 j imp exists T ([z7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j) x5) z7 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j)) z7) x6))) R zero z6 z6 (and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) z6) z6) (forall num ([x3:tm num] isNat x3 imp geq zero x3 imp exists T ([x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z6) x4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus zero x3)) x4) z6))) (ncomp_rel_zero T R z6) (forall_i num ([x3:tm num] isNat x3 imp geq zero x3 imp exists T ([x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z6) x4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus zero x3)) x4) z6)) ([j:tm num] imp2_i (isNat j) (geq zero j) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z6) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus zero j)) x3) z6)) ([p4:pf (isNat j)] [p5:pf (geq zero j)] cut (eqn j zero) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z6) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus zero j)) x3) z6)) (ord_antisymmetry j zero (and_e2 (isInt j) (geq j zero) p4) p5) ([p6:pf (eq num j zero)] exists_i T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z6) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus zero j)) x3) z6) z6 (and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z6) z6) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (- zero j)) z6) z6) (congr num j zero ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z6) z6) p6 (ncomp_rel_zero T R z6)) (congr num (- zero j) zero ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z6) z6) (eq_swap_a_b+c zero zero j (trans num zero (+ zero zero) (+ zero j) (symm num (+ zero zero) zero (zero_plus zero)) (plus_cong zero zero zero j (refl num zero) (symm num j zero p6)))) (ncomp_rel_zero T R z6)))))))))) (forall4_i num T T T ([x3:tm num] [x4:tm T] [x5:tm T] [x6:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_split_pred T) R) (pred x3)) x4) x5 imp @ T form (@ T (shadowed_0 T) R x5) x6 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x7:tm (T arrow T arrow form)] [x8:tm num] [x9:tm T] [x10:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) x8) x9) x10 and forall num ([j:tm num] isNat j imp geq x8 j imp exists T ([z8:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) j) x9) z8 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x7) (minus x8 j)) z8) x10)))) R) x3) x4) x6) ([n:tm num] [z1:tm T] [z2:tm T] [z3:tm T] imp4_i (isNat n) (gt n zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_split_pred T) R) (pred n)) z1) z2) (@ T form (@ T (shadowed_0 T) R z2) z3) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j:tm num] isNat j imp geq x4 j imp exists T ([z9:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j) x5) z9 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j)) z9) x6)))) R) n) z1) z3) ([p4:pf (isNat n)] [p5:pf (gt n zero)] [p6:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_split_pred T) R) (pred n)) z1) z2)] [p7:pf (@ T form (@ T (shadowed_0 T) R z2) z3)] def4_i (T arrow T arrow form) num T T ([x3:tm (T arrow T arrow form)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j:tm num] isNat j imp geq x4 j imp exists T ([z10:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j) x5) z10 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j)) z10) x6))) R n z1 z3 (cut (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) z1) z3) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) z1) z3 and forall num ([x3:tm num] isNat x3 imp geq n x3 imp exists T ([x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z1) x4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg x3))) x4) z3))) (congr num n (succ (pred n)) ([z11:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z11) z1) z3) (symm num (succ (pred n)) n (succpred n)) (ncomp_rel_succ T R (pred n) z1 z2 z3 (and_e1 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) z1) z2) (forall num ([j:tm num] isNat j imp geq (pred n) j imp exists T ([z12:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z12 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) z12) z2))) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j:tm num] isNat j imp geq x4 j imp exists T ([z13:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j) x5) z13 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j)) z13) x6))) R (pred n) z1 z2 p6)) p7)) ([p8:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) z1) z3)] and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) z1) z3) (forall num ([x3:tm num] isNat x3 imp geq n x3 imp exists T ([x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z1) x4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg x3))) x4) z3))) p8 (forall_i num ([x3:tm num] isNat x3 imp geq n x3 imp exists T ([x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z1) x4 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg x3))) x4) z3)) ([j:tm num] imp2_i (isNat j) (geq n j) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) x3) z3)) ([p9:pf (isNat j)] [p10:pf (geq n j)] or_e (== num n j) (> n j) (exists T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) x3) z3)) (greater_or_eq n j p10) ([p11:pf (eq num n j)] exists_i T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) x3) z3) z3 (and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z3) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) z3) z3) (congr num j n ([z14:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z14) z1) z3) (symm num n j p11) p8) (congr num (+ n (neg j)) zero ([z15:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z15) z3) z3) (trans num (+ n (neg j)) (+ j (neg j)) zero (minus_cong n j j j p11 (refl num j)) (inv_add j)) (ncomp_rel_zero T R z3)))) ([p12:pf (gt n j)] exists_ei T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) x3) z2) ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) x3) z3) (imp2_e (isNat j) (geq (pred n) j) (exists T ([z16:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z16 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) z16) z2)) (forall_e num ([x3:tm num] isNat x3 imp geq (pred n) x3 imp exists T ([z17:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) z1) z17 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) x3)) z17) z2)) (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred n)) z1) z2) (forall num ([j1:tm num] isNat j1 imp geq (pred n) j1 imp exists T ([z18:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j1) z1) z18 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j1)) z18) z2))) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j2:tm num] isNat j2 imp geq x4 j2 imp exists T ([z19:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j2) x5) z19 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j2)) z19) x6))) R (pred n) z1 z2 p6)) j) p9 (greater_greater_eq_minus1 n j (and_e1 (isInt n) (geq n zero) p4) (and_e1 (isInt j) (geq j zero) p9) p12)) ([z20:tm T] [p11:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z20 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) z20) z2)] and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z20) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (+ n (neg j))) z20) z3) (and_e1 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z20) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) z20) z2) p11) (congr num (+ n (neg j)) (plus (plus (pred n) (neg j)) one) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z20) z3) (trans num (+ n (neg j)) (plus (pred n) (plus one (neg j))) (plus (plus (pred n) (neg j)) one) (trans num (+ n (neg j)) (+ (succ (pred n)) (neg j)) (plus (pred n) (plus one (neg j))) (plus_cong n (succ (pred n)) (neg j) (neg j) (symm num (succ (pred n)) n (succpred n)) (refl num (neg j))) (assoc_add (pred n) one (neg j))) (trans num (+ (pred n) (plus one (neg j))) (+ (pred n) (plus (neg j) one)) (plus (plus (pred n) (neg j)) one) (plus_cong (pred n) (pred n) (plus one (neg j)) (plus (neg j) one) (refl num (pred n)) (comm_add one (neg j))) (symm num (plus (plus (pred n) (neg j)) one) (plus (pred n) (plus (neg j) one)) (assoc_add (pred n) (neg j) one)))) (ncomp_rel_succ T R (minus (pred n) j) z20 z2 z3 (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) z1) z20) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (pred n) j)) z20) z2) p11) p7))))))))))))) ([p4:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_split_pred T) R) (plus I J)) X) Y)] exists_ei T ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) I)) x3) Y) ([x3:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) J) x3) Y) (imp2_e (isNat I) (geq (plus I J) I) (exists T ([z21:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z21 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) I)) z21) Y)) (forall_e num ([x3:tm num] isNat x3 imp geq (plus I J) x3 imp exists T ([z22:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) X) z22 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) x3)) z22) Y)) (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (plus I J)) X) Y) (forall num ([j:tm num] isNat j imp geq (plus I J) j imp exists T ([z23:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) j) X) z23 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) j)) z23) Y))) (def4_e T T num (rel T T) ([x3:tm (rel T T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) x4) x5) x6 and forall num ([j:tm num] isNat j imp geq x4 j imp exists T ([z24:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) j) x5) z24 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x3) (minus x4 j)) z24) x6))) R (plus I J) X Y p4)) I) p1 (greatereq_plus_pos J I (and_e2 (isInt J) (geq J zero) p2))) ([z25:tm T] [p5:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z25 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) I)) z25) Y)] and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z25) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) J) z25) Y) (and_e1 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z25) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) I)) z25) Y) p5) (congr num J (- (+ I J) I) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z25) Y) (symm num (- (+ I J) I) J (cancel_a+b-a I J)) (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) I) X) z25) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (minus (plus I J) I)) z25) Y) p5)))).
ord_extens : {T:tp} tm (rel T T arrow rel T T arrow form) = [T:tp] lam2 (rel T T) (rel T T) form ([r:tm (rel T T)] [f:tm (rel T T)] forall4 T T T T ([x3:tm T] [x':tm T] [y:tm T] [y':tm T] @ T form (@ T (shadowed_0 T) r x3) x' imp @ T form (@ T (shadowed_0 T) r y) y' imp @ T form (@ T (shadowed_0 T) f x') y' imp @ T form (@ T (shadowed_0 T) f x3) y)).
ord_extens_i : {T:tp} {R:tm (T arrow T arrow form)} {F:tm (T arrow T arrow form)} ({x3:tm T} {x':tm T} {y:tm T} {y':tm T} pf (@ T form (@ T (T arrow form) R x3) x') -> pf (@ T form (@ T (T arrow form) R y) y') -> pf (@ T form (@ T (T arrow form) F x') y') -> pf (@ T form (@ T (T arrow form) F x3) y)) -> pf (@ (rel T T) form (@ (rel T T) (rel T T arrow form) (ord_extens T) R) F) = [T:tp] [R:tm (T arrow T arrow form)] [F:tm (T arrow T arrow form)] [q1:{x4:tm T} {x':tm T} {y:tm T} {y':tm T} pf (@ T form (@ T (T arrow form) R x4) x') -> pf (@ T form (@ T (T arrow form) R y) y') -> pf (@ T form (@ T (T arrow form) F x') y') -> pf (@ T form (@ T (T arrow form) F x4) y)] def2_i (rel T T) (rel T T) ([x3:tm (rel T T)] [x4:tm (rel T T)] forall4 T T T T ([x5:tm T] [x':tm T] [y:tm T] [y':tm T] @ T form (@ T (shadowed_0 T) x3 x5) x' imp @ T form (@ T (shadowed_0 T) x3 y) y' imp @ T form (@ T (shadowed_0 T) x4 x') y' imp @ T form (@ T (shadowed_0 T) x4 x5) y)) R F (forall4_i T T T T ([x3:tm T] [x4:tm T] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) R x3) x4 imp @ T form (@ T (T arrow form) R x5) x6 imp @ T form (@ T (T arrow form) F x4) x6 imp @ T form (@ T (T arrow form) F x3) x5) ([x6:tm T] [x':tm T] [y:tm T] [y':tm T] imp3_i (@ T form (@ T (T arrow form) R x6) x') (@ T form (@ T (T arrow form) R y) y') (@ T form (@ T (T arrow form) F x') y') (@ T form (@ T (T arrow form) F x6) y) ([x3:pf (@ T form (@ T (T arrow form) R x6) x')] [x4:pf (@ T form (@ T (T arrow form) R y) y')] [x5:pf (@ T form (@ T (T arrow form) F x') y')] q1 x6 x' y y' x3 x4 x5))).
ord_extens_e : {X1:tp} {R:tm (rel X1 X1)} {F:tm (rel X1 X1)} {X:tm X1} {X':tm X1} {Y:tm X1} {Y':tm X1} pf (@ (rel X1 X1) form (@ (rel X1 X1) (rel X1 X1 arrow form) (ord_extens X1) R) F) -> pf (@ X1 form (@ X1 (shadowed_0 X1) R X) X') -> pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Y') -> pf (@ X1 form (@ X1 (shadowed_0 X1) F X') Y') -> pf (@ X1 form (@ X1 (shadowed_0 X1) F X) Y) = [X1:tp] [R:tm (rel X1 X1)] [F:tm (rel X1 X1)] [X:tm X1] [X':tm X1] [Y:tm X1] [Y':tm X1] [p1:pf (@ (rel X1 X1) form (@ (rel X1 X1) (rel X1 X1 arrow form) (ord_extens X1) R) F)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) R X) X')] [x4:pf (@ X1 form (@ X1 (shadowed_0 X1) R Y) Y')] [x5:pf (@ X1 form (@ X1 (shadowed_0 X1) F X') Y')] imp3_e (@ X1 form (@ X1 (shadowed_0 X1) R X) X') (@ X1 form (@ X1 (shadowed_0 X1) R Y) Y') (@ X1 form (@ X1 (shadowed_0 X1) F X') Y') (@ X1 form (@ X1 (shadowed_0 X1) F X) Y) (forall4_e X1 X1 X1 X1 ([x6:tm X1] [x7:tm X1] [x8:tm X1] [x9:tm X1] @ X1 form (@ X1 (shadowed_0 X1) R x6) x7 imp @ X1 form (@ X1 (shadowed_0 X1) R x8) x9 imp @ X1 form (@ X1 (shadowed_0 X1) F x7) x9 imp @ X1 form (@ X1 (shadowed_0 X1) F x6) x8) (def2_e (rel X1 X1) (rel X1 X1) ([x6:tm (rel X1 X1)] [x7:tm (rel X1 X1)] forall4 X1 X1 X1 X1 ([x8:tm X1] [x':tm X1] [y:tm X1] [y':tm X1] @ X1 form (@ X1 (shadowed_0 X1) x6 x8) x' imp @ X1 form (@ X1 (shadowed_0 X1) x6 y) y' imp @ X1 form (@ X1 (shadowed_0 X1) x7 x') y' imp @ X1 form (@ X1 (shadowed_0 X1) x7 x8) y)) R F p1) X X' Y Y') x3 x4 x5.
ncomp_rel_extens_pred : {T:tp} {R:tm (T arrow T arrow form)} tm (rel T T arrow num arrow rel T T) = [T:tp] [R:tm (T arrow T arrow form)] lam4 (rel T T) num T T form ([f:tm (rel T T)] [n:tm num] [x':tm T] [y':tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) f) n) x') y' and (gt n zero imp forall2 T T ([x3:tm T] [y:tm T] @ T form (@ T (T arrow form) R x3) x' imp @ T form (@ T (T arrow form) R y) y' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) f) n) x3) y))).
ncomp_rel_extens : {N:tnum} {T:tp} {R:tm (rel T T)} {F:tm (rel T T)} pf (gt N zero) -> pf (@ (rel T T) form (reflexive T) R) -> pf (@ (rel T T) form (@ (rel T T) (rel T T arrow form) (ord_extens T) R) F) -> pf (@ (rel T T) form (@ (rel T T) (rel T T arrow form) (ord_extens T) R) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N)) = [N:tnum] [T:tp] [R:tm (rel T T)] [F:tm (rel T T)] [p1:pf (gt N zero)] [p2:pf (@ (rel T T) form (reflexive T) R)] [p3:pf (@ (rel T T) form (@ (rel T T) (rel T T arrow form) (ord_extens T) R) F)] ord_extens_i T R (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) ([x3:tm T] [x':tm T] [y:tm T] [y':tm T] [p4:pf (@ T form (@ T (shadowed_0 T) R x3) x')] [p5:pf (@ T form (@ T (shadowed_0 T) R y) y')] [p6:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x') y')] cut (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_extens_pred T R) F) N) x') y') (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x3) y) (imp2_e (forall T ([z1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_extens_pred T R) F) zero) z1) z1)) (forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_extens_pred T R) F) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) F z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_extens_pred T R) F) n') z1) z3)) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (ncomp_rel_extens_pred T R) F) N) x') y') (forall_e ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([x4:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x4 F) zero) z2) z2) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x4 F) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) F z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x4 F) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) x4 F) N) x') y') (def4_e T T num (rel T T) ([x4:tm (rel T T)] [x5:tm num] [x6:tm T] [x7:tm T] forall ((T arrow T arrow form) arrow num arrow T arrow T arrow form) ([nr:tm ((T arrow T arrow form) arrow num arrow T arrow T arrow form)] forall T ([z3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x4) zero) z3) z3) imp forall4 num T T T ([n':tm num] [z1:tm T] [z2:tm T] [z3:tm T] isNat n' imp > n' zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x4) (pred n')) z1) z2 imp @ T form (@ T (T arrow form) x4 z2) z3 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x4) n') z1) z3) imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) nr x4) x5) x6) x7)) F N x' y' p6) (ncomp_rel_extens_pred T R)) (forall_i T ([x4:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x5:tm (T arrow T arrow form)] [x6:tm num] [x7:tm T] [x8:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x5) x6) x7) x8 and (gt x6 zero imp forall2 T T ([x9:tm T] [y1:tm T] @ T form (@ T (T arrow form) R x9) x7 imp @ T form (@ T (T arrow form) R y1) x8 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x5) x6) x9) y1)))) F) zero) x4) x4) ([z4:tm T] def4_i (T arrow T arrow form) num T T ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x10:tm T] [y2:tm T] @ T form (@ T (T arrow form) R x10) x6 imp @ T form (@ T (T arrow form) R y2) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x10) y2))) F zero z4 z4 (and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) zero) z4) z4) (gt zero zero imp forall2 T T ([x11:tm T] [y3:tm T] @ T form (@ T (T arrow form) R x11) z4 imp @ T form (@ T (T arrow form) R y3) z4 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) zero) x11) y3)) (ncomp_rel_zero T F z4) (imp_i (gt zero zero) (forall2 T T ([x12:tm T] [y4:tm T] @ T form (@ T (T arrow form) R x12) z4 imp @ T form (@ T (T arrow form) R y4) z4 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) zero) x12) y4)) ([p7:pf (gt zero zero)] false_e (forall2 T T ([x13:tm T] [y5:tm T] @ T form (@ T (T arrow form) R x13) z4 imp @ T form (@ T (T arrow form) R y5) z4 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) zero) x13) y5)) (not_e (geq zero zero) p7 (ord_reflexivity zero))))))) (forall4_i num T T T ([x4:tm num] [x5:tm T] [x6:tm T] [x7:tm T] isNat x4 imp gt x4 zero imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_extens_pred T R) F) (pred x4)) x5) x6 imp @ T form (@ T (shadowed_0 T) F x6) x7 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x8:tm (T arrow T arrow form)] [x9:tm num] [x10:tm T] [x11:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x8) x9) x10) x11 and (gt x9 zero imp forall2 T T ([x14:tm T] [y6:tm T] @ T form (@ T (T arrow form) R x14) x10 imp @ T form (@ T (T arrow form) R y6) x11 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x8) x9) x14) y6)))) F) x4) x5) x7) ([n:tm num] [z1':tm T] [z2':tm T] [z3':tm T] imp4_i (isNat n) (gt n zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_extens_pred T R) F) (pred n)) z1') z2') (@ T form (@ T (shadowed_0 T) F z2') z3') (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T arrow form) (num arrow T arrow T arrow form) (lam4 (T arrow T arrow form) num T T form ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x15:tm T] [y7:tm T] @ T form (@ T (T arrow form) R x15) x6 imp @ T form (@ T (T arrow form) R y7) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x15) y7)))) F) n) z1') z3') ([p7:pf (isNat n)] [p8:pf (gt n zero)] [p9:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_extens_pred T R) F) (pred n)) z1') z2')] [p10:pf (@ T form (@ T (shadowed_0 T) F z2') z3')] def4_i (T arrow T arrow form) num T T ([x4:tm (T arrow T arrow form)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x16:tm T] [y8:tm T] @ T form (@ T (T arrow form) R x16) x6 imp @ T form (@ T (T arrow form) R y8) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x16) y8))) F n z1' z3' (and_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) z1') z3') (gt n zero imp forall2 T T ([x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x4) z1' imp @ T form (@ T (shadowed_0 T) R x5) z3' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) x4) x5)) (congr num n (succ (pred n)) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) z') z1') z3') (symm num (succ (pred n)) n (succpred n)) (ncomp_rel_succ T F (pred n) z1' z2' z3' (and_e1 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) z1') z2') (gt (pred n) zero imp forall2 T T ([x17:tm T] [y9:tm T] @ T form (@ T (T arrow form) R x17) z1' imp @ T form (@ T (T arrow form) R y9) z2' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) x17) y9)) (def4_e T T num (rel T T) ([x4:tm (rel T T)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x18:tm T] [y10:tm T] @ T form (@ T (T arrow form) R x18) x6 imp @ T form (@ T (T arrow form) R y10) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x18) y10))) F (pred n) z1' z2' p9)) p10)) (imp_i (gt n zero) (forall2 T T ([x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x4) z1' imp @ T form (@ T (shadowed_0 T) R x5) z3' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) x4) x5)) ([p11:pf (gt n zero)] forall2_i T T ([x4:tm T] [x5:tm T] @ T form (@ T (shadowed_0 T) R x4) z1' imp @ T form (@ T (shadowed_0 T) R x5) z3' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) x4) x5) ([z1:tm T] [z3:tm T] imp2_i (@ T form (@ T (shadowed_0 T) R z1) z1') (@ T form (@ T (shadowed_0 T) R z3) z3') (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) z1) z3) ([p12:pf (@ T form (@ T (shadowed_0 T) R z1) z1')] [p13:pf (@ T form (@ T (shadowed_0 T) R z3) z3')] or_e (== num (pred n) zero) (> (pred n) zero) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) n) z1) z3) (greater_or_eq (pred n) zero (greater_greater_eq_minus1 n zero (and_e1 (isInt n) (geq n zero) p7) p_zero p8)) ([p14:pf (eq num (pred n) zero)] congr num n one ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) z') z1) z3) (trans num n (succ (pred n)) one (symm num (succ (pred n)) n (succpred n)) (trans num (+ (pred n) one) (+ zero one) one (eq_plus (pred n) zero one p14) (zero_plus one))) (ncomp_rel_one T F z1 z3 (ord_extens_e T R F z1 z1' z3 z3' p3 p12 p13 (congr T z1' z2' ([z':tm T] @ T form (@ T (shadowed_0 T) F z') z3') (imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) zero) z1') z2') (eq T z1' z2') (ncomp_rel_zero_inv T F z1' z2') (congr num zero (pred n) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) z') z1') z2') (symm num (pred n) zero p14) (and_e1 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) z1') z2') (gt (pred n) zero imp forall2 T T ([x19:tm T] [y11:tm T] @ T form (@ T (T arrow form) R x19) z1' imp @ T form (@ T (T arrow form) R y11) z2' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) x19) y11)) (def4_e T T num (rel T T) ([x4:tm (rel T T)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x20:tm T] [y12:tm T] @ T form (@ T (T arrow form) R x20) x6 imp @ T form (@ T (T arrow form) R y12) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x20) y12))) F (pred n) z1' z2' p9)))) p10)))) ([p14:pf (gt (pred n) zero)] congr num n (succ (pred n)) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) z') z1) z3) (symm num (succ (pred n)) n (succpred n)) (ncomp_rel_succ T F (pred n) z1 z2' z3 (imp2_e (@ T form (@ T (T arrow form) R z1) z1') (@ T form (@ T (T arrow form) R z2') z2') (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) z1) z2') (forall2_e T T ([x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x4) z1' imp @ T form (@ T (T arrow form) R x5) z2' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) x4) x5) (imp_e (gt (pred n) zero) (forall2 T T ([x21:tm T] [y13:tm T] @ T form (@ T (T arrow form) R x21) z1' imp @ T form (@ T (T arrow form) R y13) z2' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) x21) y13)) (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) z1') z2') (gt (pred n) zero imp forall2 T T ([x22:tm T] [y14:tm T] @ T form (@ T (T arrow form) R x22) z1' imp @ T form (@ T (T arrow form) R y14) z2' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) (pred n)) x22) y14)) (def4_e T T num (rel T T) ([x4:tm (rel T T)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x23:tm T] [y15:tm T] @ T form (@ T (T arrow form) R x23) x6 imp @ T form (@ T (T arrow form) R y15) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x23) y15))) F (pred n) z1' z2' p9)) p14) z1 z2') p12 (rel_refl T R z2' p2)) (ord_extens_e T R F z2' z2' z3 z3' p3 (rel_refl T R z2' p2) p13 p10)))))))))))) ([p7:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel_extens_pred T R) F) N) x') y')] imp2_e (@ T form (@ T (T arrow form) R x3) x') (@ T form (@ T (T arrow form) R y) y') (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x3) y) (forall2_e T T ([x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x4) x' imp @ T form (@ T (T arrow form) R x5) y' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x4) x5) (imp_e (gt N zero) (forall2 T T ([x24:tm T] [y16:tm T] @ T form (@ T (T arrow form) R x24) x' imp @ T form (@ T (T arrow form) R y16) y' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x24) y16)) (and_e2 (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x') y') (gt N zero imp forall2 T T ([x25:tm T] [y17:tm T] @ T form (@ T (T arrow form) R x25) x' imp @ T form (@ T (T arrow form) R y17) y' imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) F) N) x25) y17)) (def4_e T T num (rel T T) ([x4:tm (rel T T)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x6) x7 and (gt x5 zero imp forall2 T T ([x26:tm T] [y18:tm T] @ T form (@ T (T arrow form) R x26) x6 imp @ T form (@ T (T arrow form) R y18) x7 imp @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) x4) x5) x26) y18))) F N x' y' p7)) p1) x3 y) p4 p5)).
kleene_step : {T:tp} {R:tm (T arrow T arrow form)} {X:tm T} {Y:tm T} {Z:tm T} pf (@ T form (@ T (T arrow form) R X) Y) -> pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) Y) Z) -> pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Z) = [T:tp] [R:tm (T arrow T arrow form)] [X:tm T] [Y:tm T] [Z:tm T] [p1:pf (@ T form (@ T (T arrow form) R X) Y)] [p2:pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) Y) Z)] def3_i (T arrow T arrow form) T T ([x3:tm (T arrow T arrow form)] [x4:tm T] [x5:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z1:tm T] @ T form (@ T (T arrow form) S Z1) Z1) imp forall3 T T T ([X1:tm T] [Y1:tm T] [Z2:tm T] @ T form (@ T (T arrow form) x3 X1) Y1 imp @ T form (@ T (T arrow form) S Y1) Z2 imp @ T form (@ T (T arrow form) S X1) Z2) imp @ T form (@ T (T arrow form) S x4) x5)) R X Z (forall_i (rel T T) ([x3:tm (rel T T)] forall T ([Z3:tm T] @ T form (@ T (T arrow form) x3 Z3) Z3) imp forall3 T T T ([x4:tm T] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) R x4) x5 imp @ T form (@ T (T arrow form) x3 x5) x6 imp @ T form (@ T (T arrow form) x3 x4) x6) imp @ T form (@ T (T arrow form) x3 X) Z) ([s:tm (rel T T)] imp2_i (forall T ([Z4:tm T] @ T form (@ T (T arrow form) s Z4) Z4)) (forall3 T T T ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x3) x4 imp @ T form (@ T (T arrow form) s x4) x5 imp @ T form (@ T (T arrow form) s x3) x5)) (@ T form (@ T (T arrow form) s X) Z) ([p3:pf (forall T ([Z5:tm T] @ T form (@ T (T arrow form) s Z5) Z5))] [p4:pf (forall3 T T T ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x3) x4 imp @ T form (@ T (T arrow form) s x4) x5 imp @ T form (@ T (T arrow form) s x3) x5))] imp2_e (@ T form (@ T (T arrow form) R X) Y) (@ T form (@ T (T arrow form) s Y) Z) (@ T form (@ T (T arrow form) s X) Z) (forall3_e T T T ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x3) x4 imp @ T form (@ T (T arrow form) s x4) x5 imp @ T form (@ T (T arrow form) s x3) x5) p4 X Y Z) p1 (imp2_e (forall T ([Z6:tm T] @ T form (@ T (T arrow form) s Z6) Z6)) (forall3 T T T ([X2:tm T] [Y2:tm T] [Z7:tm T] @ T form (@ T (T arrow form) R X2) Y2 imp @ T form (@ T (T arrow form) s Y2) Z7 imp @ T form (@ T (T arrow form) s X2) Z7)) (@ T form (@ T (T arrow form) s Y) Z) (forall_e (T arrow T arrow form) ([x3:tm (T arrow T arrow form)] forall T ([Z8:tm T] @ T form (@ T (T arrow form) x3 Z8) Z8) imp forall3 T T T ([X3:tm T] [Y3:tm T] [Z9:tm T] @ T form (@ T (T arrow form) R X3) Y3 imp @ T form (@ T (T arrow form) x3 Y3) Z9 imp @ T form (@ T (T arrow form) x3 X3) Z9) imp @ T form (@ T (T arrow form) x3 Y) Z) (def3_e T T (T arrow T arrow form) ([x3:tm (T arrow T arrow form)] [x4:tm T] [x5:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z10:tm T] @ T form (@ T (T arrow form) S Z10) Z10) imp forall3 T T T ([X4:tm T] [Y4:tm T] [Z11:tm T] @ T form (@ T (T arrow form) x3 X4) Y4 imp @ T form (@ T (T arrow form) S Y4) Z11 imp @ T form (@ T (T arrow form) S X4) Z11) imp @ T form (@ T (T arrow form) S x4) x5)) R Y Z p2) s) p3 p4)))).
kleene_ncomp_pred1 : {T:tp} {R:tm (rel T T)} tm (rel T T) = [T:tp] [R:tm (rel T T)] lam2 T T form ([x3:tm T] [y:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) y)).
kleene_ncomp_pred2 : {T:tp} {R:tm (rel T T)} tm num -> tm form = [T:tp] [R:tm (rel T T)] [n:tm num] forall2 T T ([x3:tm T] [y:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) y imp @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x3) y).
kleene_ncomp : {T:tp} {R:tm (T arrow T arrow form)} {X:tm T} {Y:tm T} pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Y equiv exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) X) Y)) = [T:tp] [R:tm (T arrow T arrow form)] [X:tm T] [Y:tm T] equiv_i2 (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Y) (exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) X) Y)) ([p1:pf (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Y)] def2_e T T ([x3:tm T] [x4:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) x4)) X Y (imp2_e (forall T ([Z:tm T] @ T form (@ T (T arrow form) (kleene_ncomp_pred1 T R) Z) Z)) (forall3 T T T ([X1:tm T] [Y1:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X1) Y1 imp @ T form (@ T (T arrow form) (kleene_ncomp_pred1 T R) Y1) Z imp @ T form (@ T (T arrow form) (kleene_ncomp_pred1 T R) X1) Z)) (@ T form (@ T (T arrow form) (kleene_ncomp_pred1 T R) X) Y) (forall_e (T arrow T arrow form) ([x3:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) x3 Z) Z) imp forall3 T T T ([X2:tm T] [Y2:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X2) Y2 imp @ T form (@ T (T arrow form) x3 Y2) Z imp @ T form (@ T (T arrow form) x3 X2) Z) imp @ T form (@ T (T arrow form) x3 X) Y) (def3_e T T (T arrow T arrow form) ([x3:tm (T arrow T arrow form)] [x4:tm T] [x5:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) S Z) Z) imp forall3 T T T ([X3:tm T] [Y3:tm T] [Z:tm T] @ T form (@ T (T arrow form) x3 X3) Y3 imp @ T form (@ T (T arrow form) S Y3) Z imp @ T form (@ T (T arrow form) S X3) Z) imp @ T form (@ T (T arrow form) S x4) x5)) R X Y p1) (kleene_ncomp_pred1 T R)) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (lam2 T T form ([x4:tm T] [x5:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x4) x5))) x3) x3) ([x3:tm T] def2_i T T ([x4:tm T] [x5:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x4) x5)) x3 x3 (exists_i num ([x4:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x4) x3) x3) zero (ncomp_rel_zero T R x3)))) (forall3_i T T T ([x3:tm T] [x4:tm T] [x5:tm T] @ T form (@ T (T arrow form) R x3) x4 imp @ T form (@ T (shadowed_0 T) (kleene_ncomp_pred1 T R) x4) x5 imp @ T form (@ T (T arrow form) (lam2 T T form ([x6:tm T] [x7:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x6) x7))) x3) x5) ([x4:tm T] [y:tm T] [z1:tm T] imp2_i (@ T form (@ T (T arrow form) R x4) y) (@ T form (@ T (shadowed_0 T) (kleene_ncomp_pred1 T R) y) z1) (@ T form (@ T (T arrow form) (lam2 T T form ([x3:tm T] [x5:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) x5))) x4) z1) ([p2:pf (@ T form (@ T (T arrow form) R x4) y)] [p3:pf (@ T form (@ T (shadowed_0 T) (kleene_ncomp_pred1 T R) y) z1)] exists_e num ([x3:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) y) z1) (@ T form (@ T (T arrow form) (lam2 T T form ([x3:tm T] [x5:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) x5))) x4) z1) (def2_e T T ([x3:tm T] [x5:tm T] exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) x5)) y z1 p3) ([n:tm num] [p4:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) y) z1)] def2_i T T ([x3:tm T] [x5:tm T] exists num ([n1:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n1) x3) x5)) x4 z1 (exists_i num ([x3:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) x4) z1) (plus one n) (ncomp_rel_compose T R one x4 y n z1 (ncomp_rel_one T R x4 y p2) p4)))))))) ([p1:pf (exists num ([n:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) X) Y))] cut (_forall num ([n:tnum] isNat n imp kleene_ncomp_pred2 T R n)) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Y) (induction ([x3:tnum] kleene_ncomp_pred2 T R x3) (forall2_i T T ([x3:tm T] [x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) x3) x4 imp @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x3) x4) ([x5:tm T] [y:tm T] imp_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) x5) y) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x5) y) ([p2:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) x5) y)] congr T y x5 ([z':tm T] @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x5) z') (symm T x5 y (imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) zero) x5) y) (eq T x5 y) (ncomp_rel_zero_inv T R x5 y) p2)) (def3_i (T arrow T arrow form) T T ([x3:tm (T arrow T arrow form)] [x4:tm T] [x6:tm T] forall (T arrow T arrow form) ([S:tm (T arrow T arrow form)] forall T ([Z:tm T] @ T form (@ T (T arrow form) S Z) Z) imp forall3 T T T ([X4:tm T] [Y4:tm T] [Z:tm T] @ T form (@ T (T arrow form) x3 X4) Y4 imp @ T form (@ T (T arrow form) S Y4) Z imp @ T form (@ T (T arrow form) S X4) Z) imp @ T form (@ T (T arrow form) S x4) x6)) R x5 x5 (forall_i (rel T T) ([x3:tm (rel T T)] forall T ([z2:tm T] @ T form (@ T (shadowed_0 T) x3 z2) z2) imp forall3 T T T ([X5:tm T] [Y5:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X5) Y5 imp @ T form (@ T (T arrow form) x3 Y5) Z imp @ T form (@ T (T arrow form) x3 X5) Z) imp @ T form (@ T (shadowed_0 T) x3 x5) x5) ([s:tm (rel T T)] imp2_i (forall T ([z3:tm T] @ T form (@ T (shadowed_0 T) s z3) z3)) (forall3 T T T ([X6:tm T] [Y6:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X6) Y6 imp @ T form (@ T (T arrow form) s Y6) Z imp @ T form (@ T (T arrow form) s X6) Z)) (@ T form (@ T (shadowed_0 T) s x5) x5) ([p3:pf (forall T ([z4:tm T] @ T form (@ T (shadowed_0 T) s z4) z4))] [p4:pf (forall3 T T T ([X7:tm T] [Y7:tm T] [Z:tm T] @ T form (@ T (T arrow form) R X7) Y7 imp @ T form (@ T (T arrow form) s Y7) Z imp @ T form (@ T (T arrow form) s X7) Z))] forall_e T ([x3:tm T] @ T form (@ T (shadowed_0 T) s x3) x3) p3 x5))))))) ([n:tm num] [p2:pf (isNat n)] [p3:pf (kleene_ncomp_pred2 T R n)] forall2_i T T ([x3:tm T] [x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (succ n)) x3) x4 imp @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x3) x4) ([x6:tm T] [y:tm T] imp_i (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (succ n)) x6) y) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x6) y) ([p4:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (succ n)) x6) y)] exists_e T ([x3:tm T] @ T form (@ T (shadowed_0 T) R x6) x3 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ n))) x3) y) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x6) y) (ncomp_rel_gt_zero_inv (succ n) T R x6 y (greater_plus1_i n zero (and_e2 (isInt n) (geq n zero) p2)) p4) ([z5:tm T] [p5:pf (@ T form (@ T (T arrow form) R x6) z5 and @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ n))) z5) y)] kleene_step T R x6 z5 y (and_e1 (@ T form (@ T (T arrow form) R x6) z5) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ n))) z5) y) p5) (imp_e (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) z5) y) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) z5) y) (forall2_e T T ([x3:tm T] [x4:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x3) x4 imp @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x3) x4) p3 z5 y) (congr num n (pred (succ n)) ([z':tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) z') z5) y) (symm num (pred (succ n)) n (predsucc n)) (and_e2 (@ T form (@ T (T arrow form) R x6) z5) (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) (pred (succ n))) z5) y) p5)))))))) ([p2:pf (forall num ([n:tm num] isNat n imp kleene_ncomp_pred2 T R n))] exists_e num ([x3:tm num] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) x3) X) Y) (@ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) X) Y) p1 ([n:tm num] [p3:pf (@ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) X) Y)] forall2_imp_e T T ([x7:tm T] [y:tm T] @ T form (@ T (shadowed_0 T) (@ num (rel T T) (@ (rel T T) (num arrow rel T T) (ncomp_rel T) R) n) x7) y) ([x8:tm T] [y:tm T] @ T form (@ T (T arrow form) (@ (T arrow T arrow form) (T arrow T arrow form) (kleene_star T) R) x8) y) (imp_e (isNat n) (kleene_ncomp_pred2 T R n) (forall_e num ([x3:tm num] isNat x3 imp kleene_ncomp_pred2 T R x3) p2 n) (ncomp_rel_isNat T R n X Y p3)) X Y p3))).
parfunx : {T1:tp} {T2:tp} tm (rel3 (eqrel T1) (eqrel T2) (rel T1 T2)) = [T1:tp] [T2:tp] lam3 (eqrel T1) (eqrel T2) (rel T1 T2) form ([eq1:tm (eqrel T1)] [eq2:tm (eqrel T2)] [r:tm (rel T1 T2)] forall4 T1 T1 T2 T2 ([x3:tm T1] [x4:tm T1] [y1:tm T2] [y2:tm T2] @ T1 form (@ T1 (shadowed_0 T1) eq1 x3) x4 imp @ T2 form (@ T1 (shadowed_0 T2) r x3) y1 imp @ T2 form (@ T1 (shadowed_0 T2) r x4) y2 imp @ T2 form (@ T2 (shadowed_0 T2) eq2 y1) y2)).
parfunx2 : {T1:tp} {T2:tp} {T3:tp} tm (rel4 (eqrel T1) (eqrel T2) (eqrel T3) (rel3 T1 T2 T3)) = [T1:tp] [T2:tp] [T3:tp] lam4 (eqrel T1) (eqrel T2) (eqrel T3) (rel3 T1 T2 T3) form ([eq1:tm (eqrel T1)] [eq2:tm (eqrel T2)] [eq3:tm (eqrel T3)] [r:tm (rel3 T1 T2 T3)] forall6 T1 T1 T2 T2 T3 T3 ([x3:tm T1] [x4:tm T1] [y1:tm T2] [y2:tm T2] [z1:tm T3] [z2:tm T3] @ T1 form (@ T1 (shadowed_0 T1) eq1 x3) x4 imp @ T2 form (@ T2 (shadowed_0 T2) eq2 y1) y2 imp @ T3 form (@ T2 (shadowed_0 T3) (@ T1 (rel T2 T3) r x3) y1) z1 imp @ T3 form (@ T2 (shadowed_0 T3) (@ T1 (rel T2 T3) r x4) y2) z2 imp @ T3 form (@ T3 (shadowed_0 T3) eq3 z1) z2)).
parfunx_i : {T1:tp} {T2:tp} {Eq1:tm (T1 arrow T1 arrow form)} {R:tm (T1 arrow T2 arrow form)} {Eq2:tm (T2 arrow T2 arrow form)} ({x3:tm T1} {x4:tm T1} {y1:tm T2} {y2:tm T2} pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4) -> pf (@ T2 form (@ T1 (T2 arrow form) R x3) y1) -> pf (@ T2 form (@ T1 (T2 arrow form) R x4) y2) -> pf (@ T2 form (@ T2 (T2 arrow form) Eq2 y1) y2)) -> pf (@ (rel T1 T2) form (@ (eqrel T2) (shadowed_0 (rel T1 T2)) (@ (eqrel T1) (rel (eqrel T2) (rel T1 T2)) (parfunx T1 T2) Eq1) Eq2) R) = [T1:tp] [T2:tp] [Eq1:tm (T1 arrow T1 arrow form)] [R:tm (T1 arrow T2 arrow form)] [Eq2:tm (T2 arrow T2 arrow form)] [q1:{x5:tm T1} {x6:tm T1} {y1:tm T2} {y2:tm T2} pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x5) x6) -> pf (@ T2 form (@ T1 (T2 arrow form) R x5) y1) -> pf (@ T2 form (@ T1 (T2 arrow form) R x6) y2) -> pf (@ T2 form (@ T2 (T2 arrow form) Eq2 y1) y2)] def3_i (eqrel T1) (eqrel T2) (rel T1 T2) ([x3:tm (eqrel T1)] [x4:tm (eqrel T2)] [x5:tm (rel T1 T2)] forall4 T1 T1 T2 T2 ([x7:tm T1] [x8:tm T1] [y1:tm T2] [y2:tm T2] @ T1 form (@ T1 (shadowed_0 T1) x3 x7) x8 imp @ T2 form (@ T1 (shadowed_0 T2) x5 x7) y1 imp @ T2 form (@ T1 (shadowed_0 T2) x5 x8) y2 imp @ T2 form (@ T2 (shadowed_0 T2) x4 y1) y2)) Eq1 Eq2 R (forall4_imp3_i T1 T1 T2 T2 ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] @ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] @ T2 form (@ T1 (T2 arrow form) R x3) x5) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] @ T2 form (@ T1 (T2 arrow form) R x4) x6) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] @ T2 form (@ T2 (T2 arrow form) Eq2 x5) x6) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4)] [x8:pf (@ T2 form (@ T1 (T2 arrow form) R x3) x5)] [x9:pf (@ T2 form (@ T1 (T2 arrow form) R x4) x6)] q1 x3 x4 x5 x6 x7 x8 x9)).
parfunx_e : {X1:tp} {X2:tp} {Eq1:tm (eqrel X1)} {Eq2:tm (eqrel X2)} {R:tm (rel X1 X2)} {X3:tm X1} {X4:tm X1} {Y1:tm X2} {Y2:tm X2} pf (@ (rel X1 X2) form (@ (eqrel X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X1) (rel (eqrel X2) (rel X1 X2)) (parfunx X1 X2) Eq1) Eq2) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq1 X3) X4) -> pf (@ X2 form (@ X1 (shadowed_0 X2) R X3) Y1) -> pf (@ X2 form (@ X1 (shadowed_0 X2) R X4) Y2) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Eq2 Y1) Y2) = [X1:tp] [X2:tp] [Eq1:tm (eqrel X1)] [Eq2:tm (eqrel X2)] [R:tm (rel X1 X2)] [X3:tm X1] [X4:tm X1] [Y1:tm X2] [Y2:tm X2] [p1:pf (@ (rel X1 X2) form (@ (eqrel X2) (shadowed_0 (rel X1 X2)) (@ (eqrel X1) (rel (eqrel X2) (rel X1 X2)) (parfunx X1 X2) Eq1) Eq2) R)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq1 X3) X4)] [x4:pf (@ X2 form (@ X1 (shadowed_0 X2) R X3) Y1)] [x5:pf (@ X2 form (@ X1 (shadowed_0 X2) R X4) Y2)] forall4_imp3_e X1 X1 X2 X2 ([x6:tm X1] [y:tm X1] [z1:tm X2] [u:tm X2] @ X1 form (@ X1 (shadowed_0 X1) Eq1 x6) y) ([x7:tm X1] [y:tm X1] [z2:tm X2] [u:tm X2] @ X2 form (@ X1 (shadowed_0 X2) R x7) z2) ([x8:tm X1] [y:tm X1] [z3:tm X2] [u:tm X2] @ X2 form (@ X1 (shadowed_0 X2) R y) u) ([x9:tm X1] [y:tm X1] [z4:tm X2] [u:tm X2] @ X2 form (@ X2 (shadowed_0 X2) Eq2 z4) u) (def3_e (rel X1 X2) (eqrel X2) (eqrel X1) ([x6:tm (eqrel X1)] [x7:tm (eqrel X2)] [x8:tm (rel X1 X2)] forall4 X1 X1 X2 X2 ([x10:tm X1] [x11:tm X1] [y1:tm X2] [y2:tm X2] @ X1 form (@ X1 (shadowed_0 X1) x6 x10) x11 imp @ X2 form (@ X1 (shadowed_0 X2) x8 x10) y1 imp @ X2 form (@ X1 (shadowed_0 X2) x8 x11) y2 imp @ X2 form (@ X2 (shadowed_0 X2) x7 y1) y2)) Eq1 Eq2 R p1) X3 X4 Y1 Y2 x3 x4 x5.
parfunx2_i : {T1:tp} {T2:tp} {T3:tp} {Eq1:tm (T1 arrow T1 arrow form)} {Eq2:tm (T2 arrow T2 arrow form)} {R:tm (T1 arrow T2 arrow T3 arrow form)} {Eq3:tm (T3 arrow T3 arrow form)} ({x3:tm T1} {x4:tm T1} {y1:tm T2} {y2:tm T2} {z1:tm T3} {z2:tm T3} pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4) -> pf (@ T2 form (@ T2 (T2 arrow form) Eq2 y1) y2) -> pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x3) y1) z1) -> pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x4) y2) z2) -> pf (@ T3 form (@ T3 (T3 arrow form) Eq3 z1) z2)) -> pf (@ (rel3 T1 T2 T3) form (@ (eqrel T3) (shadowed_0 (rel3 T1 T2 T3)) (@ (eqrel T2) (rel (eqrel T3) (rel3 T1 T2 T3)) (@ (eqrel T1) (rel3 (eqrel T2) (eqrel T3) (rel3 T1 T2 T3)) (parfunx2 T1 T2 T3) Eq1) Eq2) Eq3) R) = [T1:tp] [T2:tp] [T3:tp] [Eq1:tm (T1 arrow T1 arrow form)] [Eq2:tm (T2 arrow T2 arrow form)] [R:tm (T1 arrow T2 arrow T3 arrow form)] [Eq3:tm (T3 arrow T3 arrow form)] [q1:{x5:tm T1} {x6:tm T1} {y1:tm T2} {y2:tm T2} {z1:tm T3} {z2:tm T3} pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x5) x6) -> pf (@ T2 form (@ T2 (T2 arrow form) Eq2 y1) y2) -> pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x5) y1) z1) -> pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x6) y2) z2) -> pf (@ T3 form (@ T3 (T3 arrow form) Eq3 z1) z2)] def4_i (eqrel T1) (eqrel T2) (eqrel T3) (rel3 T1 T2 T3) ([x3:tm (eqrel T1)] [x4:tm (eqrel T2)] [x5:tm (eqrel T3)] [x6:tm (rel3 T1 T2 T3)] forall6 T1 T1 T2 T2 T3 T3 ([x7:tm T1] [x8:tm T1] [y1:tm T2] [y2:tm T2] [z1:tm T3] [z2:tm T3] @ T1 form (@ T1 (shadowed_0 T1) x3 x7) x8 imp @ T2 form (@ T2 (shadowed_0 T2) x4 y1) y2 imp @ T3 form (@ T2 (shadowed_0 T3) (@ T1 (rel T2 T3) x6 x7) y1) z1 imp @ T3 form (@ T2 (shadowed_0 T3) (@ T1 (rel T2 T3) x6 x8) y2) z2 imp @ T3 form (@ T3 (shadowed_0 T3) x5 z1) z2)) Eq1 Eq2 Eq3 R (forall6_imp4_i T1 T1 T2 T2 T3 T3 ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] @ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] @ T2 form (@ T2 (T2 arrow form) Eq2 x5) x6) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] @ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x3) x5) x7) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] @ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x4) x6) x8) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] @ T3 form (@ T3 (T3 arrow form) Eq3 x7) x8) ([x3:tm T1] [x4:tm T1] [x5:tm T2] [x6:tm T2] [x7:tm T3] [x8:tm T3] [x9:pf (@ T1 form (@ T1 (T1 arrow form) Eq1 x3) x4)] [x10:pf (@ T2 form (@ T2 (T2 arrow form) Eq2 x5) x6)] [x11:pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x3) x5) x7)] [x12:pf (@ T3 form (@ T2 (T3 arrow form) (@ T1 (T2 arrow T3 arrow form) R x4) x6) x8)] q1 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12)).
parfunx2_e : {X1:tp} {X2:tp} {X3:tp} {Eq1:tm (eqrel X1)} {Eq2:tm (eqrel X2)} {Eq3:tm (eqrel X3)} {R:tm (rel3 X1 X2 X3)} {X4:tm X1} {X5:tm X1} {Y1:tm X2} {Y2:tm X2} {Z1:tm X3} {Z2:tm X3} pf (@ (rel3 X1 X2 X3) form (@ (eqrel X3) (shadowed_0 (rel3 X1 X2 X3)) (@ (eqrel X2) (rel (eqrel X3) (rel3 X1 X2 X3)) (@ (eqrel X1) (rel3 (eqrel X2) (eqrel X3) (rel3 X1 X2 X3)) (parfunx2 X1 X2 X3) Eq1) Eq2) Eq3) R) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Eq1 X4) X5) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Eq2 Y1) Y2) -> pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R X4) Y1) Z1) -> pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R X5) Y2) Z2) -> pf (@ X3 form (@ X3 (shadowed_0 X3) Eq3 Z1) Z2) = [X1:tp] [X2:tp] [X3:tp] [Eq1:tm (eqrel X1)] [Eq2:tm (eqrel X2)] [Eq3:tm (eqrel X3)] [R:tm (rel3 X1 X2 X3)] [X4:tm X1] [X5:tm X1] [Y1:tm X2] [Y2:tm X2] [Z1:tm X3] [Z2:tm X3] [p1:pf (@ (rel3 X1 X2 X3) form (@ (eqrel X3) (shadowed_0 (rel3 X1 X2 X3)) (@ (eqrel X2) (rel (eqrel X3) (rel3 X1 X2 X3)) (@ (eqrel X1) (rel3 (eqrel X2) (eqrel X3) (rel3 X1 X2 X3)) (parfunx2 X1 X2 X3) Eq1) Eq2) Eq3) R)] [x3:pf (@ X1 form (@ X1 (shadowed_0 X1) Eq1 X4) X5)] [x4:pf (@ X2 form (@ X2 (shadowed_0 X2) Eq2 Y1) Y2)] [x5:pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R X4) Y1) Z1)] [x6:pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R X5) Y2) Z2)] forall6_imp4_e X1 X1 X2 X2 X3 X3 ([x7:tm X1] [y:tm X1] [z1:tm X2] [u:tm X2] [v1:tm X3] [w:tm X3] @ X1 form (@ X1 (shadowed_0 X1) Eq1 x7) y) ([x8:tm X1] [y:tm X1] [z2:tm X2] [u:tm X2] [v2:tm X3] [w:tm X3] @ X2 form (@ X2 (shadowed_0 X2) Eq2 z2) u) ([x9:tm X1] [y:tm X1] [z3:tm X2] [u:tm X2] [v3:tm X3] [w:tm X3] @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R x9) z3) v3) ([x10:tm X1] [y:tm X1] [z4:tm X2] [u:tm X2] [v4:tm X3] [w:tm X3] @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) R y) u) w) ([x11:tm X1] [y:tm X1] [z5:tm X2] [u:tm X2] [v5:tm X3] [w:tm X3] @ X3 form (@ X3 (shadowed_0 X3) Eq3 v5) w) (def4_e (rel3 X1 X2 X3) (eqrel X3) (eqrel X2) (eqrel X1) ([x7:tm (eqrel X1)] [x8:tm (eqrel X2)] [x9:tm (eqrel X3)] [x10:tm (rel3 X1 X2 X3)] forall6 X1 X1 X2 X2 X3 X3 ([x12:tm X1] [x13:tm X1] [y1:tm X2] [y2:tm X2] [z1:tm X3] [z2:tm X3] @ X1 form (@ X1 (shadowed_0 X1) x7 x12) x13 imp @ X2 form (@ X2 (shadowed_0 X2) x8 y1) y2 imp @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) x10 x12) y1) z1 imp @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) x10 x13) y2) z2 imp @ X3 form (@ X3 (shadowed_0 X3) x9 z1) z2)) Eq1 Eq2 Eq3 R p1) X4 X5 Y1 Y2 Z1 Z2 x3 x4 x5 x6.
mkpair : {T1:tp} {T2:tp} tm (T1 arrow T2 arrow pair T1 T2) = [T1:tp] [T2:tp] _mkpair T1 T2.
fst : {T1:tp} {T2:tp} tm (pair T1 T2 arrow T1) = [T1:tp] [T2:tp] _fst T1 T2.
snd : {T1:tp} {T2:tp} tm (pair T1 T2 arrow T2) = [T1:tp] [T2:tp] _snd T1 T2.
eq_pair : {Ta:tp} {Tb:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel (pair Ta Tb)) = [Ta:tp] [Tb:tp] lam4 (Ta arrow Ta arrow form) (Tb arrow Tb arrow form) (pair Ta Tb) (pair Ta Tb) form ([eq_a:tm (Ta arrow Ta arrow form)] [eq_b:tm (Tb arrow Tb arrow form)] [x3:tm (pair Ta Tb)] [y:tm (pair Ta Tb)] @ Ta form (@ Ta (Ta arrow form) eq_a (@ (pair Ta Tb) Ta (fst Ta Tb) x3)) (@ (pair Ta Tb) Ta (fst Ta Tb) y) and @ Tb form (@ Tb (Tb arrow form) eq_b (@ (pair Ta Tb) Tb (snd Ta Tb) x3)) (@ (pair Ta Tb) Tb (snd Ta Tb) y)).
tuple3 : tp -> tp -> tp -> tp = [t1:tp] [t2:tp] [t3:tp] pair t1 (pair t2 t3).
mktuple3 : {T1:tp} {T2:tp} {T3:tp} tm (T1 arrow T2 arrow T3 arrow tuple3 T1 T2 T3) = [T1:tp] [T2:tp] [T3:tp] lam3 T1 T2 T3 (pair T1 (pair T2 T3)) ([x3:tm T1] [x4:tm T2] [x5:tm T3] @ (pair T2 T3) (pair T1 (pair T2 T3)) (@ T1 (pair T2 T3 arrow pair T1 (pair T2 T3)) (mkpair T1 (pair T2 T3)) x3) (@ T3 (pair T2 T3) (@ T2 (T3 arrow pair T2 T3) (mkpair T2 T3) x4) x5)).
get1of3 : {T1:tp} {T2:tp} {T3:tp} tm (tuple3 T1 T2 T3 arrow T1) = [T1:tp] [T2:tp] [T3:tp] fst T1 (pair T2 T3).
get2of3 : {T1:tp} {T2:tp} {T3:tp} tm (tuple3 T1 T2 T3 arrow T2) = [T1:tp] [T2:tp] [T3:tp] lam (pair T1 (pair T2 T3)) T2 ([a:tm (pair T1 (pair T2 T3))] @ (pair T2 T3) T2 (fst T2 T3) (@ (pair T1 (pair T2 T3)) (pair T2 T3) (snd T1 (pair T2 T3)) a)).
get3of3 : {T1:tp} {T2:tp} {T3:tp} tm (tuple3 T1 T2 T3 arrow T3) = [T1:tp] [T2:tp] [T3:tp] lam (pair T1 (pair T2 T3)) T3 ([a:tm (pair T1 (pair T2 T3))] @ (pair T2 T3) T3 (snd T2 T3) (@ (pair T1 (pair T2 T3)) (pair T2 T3) (snd T1 (pair T2 T3)) a)).
mktuple4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} tm (T1 arrow T2 arrow T3 arrow T4 arrow tuple4 T1 T2 T3 T4) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] lam4 T1 T2 T3 T4 (tuple4 T1 T2 T3 T4) ([x3:tm T1] [x4:tm T2] [x5:tm T3] [x6:tm T4] _mktuple4 T1 T2 T3 T4 x3 x4 x5 x6).
get1of4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} tm (tuple4 T1 T2 T3 T4 arrow T1) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] lam (tuple4 T1 T2 T3 T4) T1 ([x3:tm (tuple4 T1 T2 T3 T4)] _get1of4 T1 T2 T3 T4 x3).
get2of4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} tm (tuple4 T1 T2 T3 T4 arrow T2) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] lam (tuple4 T1 T2 T3 T4) T2 ([x3:tm (tuple4 T1 T2 T3 T4)] _get2of4 T1 T2 T3 T4 x3).
get3of4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} tm (tuple4 T1 T2 T3 T4 arrow T3) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] lam (tuple4 T1 T2 T3 T4) T3 ([x3:tm (tuple4 T1 T2 T3 T4)] _get3of4 T1 T2 T3 T4 x3).
get4of4 : {T1:tp} {T2:tp} {T3:tp} {T4:tp} tm (tuple4 T1 T2 T3 T4 arrow T4) = [T1:tp] [T2:tp] [T3:tp] [T4:tp] lam (tuple4 T1 T2 T3 T4) T4 ([x3:tm (tuple4 T1 T2 T3 T4)] _get4of4 T1 T2 T3 T4 x3).
eq_tuple4 : {Ta:tp} {Tb:tp} {Tc:tp} {Td:tp} tm (eqrel Ta arrow eqrel Tb arrow eqrel Tc arrow eqrel Td arrow eqrel (tuple4 Ta Tb Tc Td)) = [Ta:tp] [Tb:tp] [Tc:tp] [Td:tp] lam4 (Ta arrow Ta arrow form) (Tb arrow Tb arrow form) (Tc arrow Tc arrow form) (Td arrow Td arrow form) (tuple4 Ta Tb Tc Td arrow tuple4 Ta Tb Tc Td arrow form) ([Ha:tm (Ta arrow Ta arrow form)] [Hb:tm (Tb arrow Tb arrow form)] [Hc:tm (Tc arrow Tc arrow form)] [Hd:tm (Td arrow Td arrow form)] lam2 (tuple4 Ta Tb Tc Td) (tuple4 Ta Tb Tc Td) form ([X:tm (tuple4 Ta Tb Tc Td)] [Y:tm (tuple4 Ta Tb Tc Td)] @ Ta form (@ Ta (Ta arrow form) Ha (@ (tuple4 Ta Tb Tc Td) Ta (get1of4 Ta Tb Tc Td) X)) (@ (tuple4 Ta Tb Tc Td) Ta (get1of4 Ta Tb Tc Td) Y) and @ Tb form (@ Tb (Tb arrow form) Hb (@ (tuple4 Ta Tb Tc Td) Tb (get2of4 Ta Tb Tc Td) X)) (@ (tuple4 Ta Tb Tc Td) Tb (get2of4 Ta Tb Tc Td) Y) and @ Tc form (@ Tc (Tc arrow form) Hc (@ (tuple4 Ta Tb Tc Td) Tc (get3of4 Ta Tb Tc Td) X)) (@ (tuple4 Ta Tb Tc Td) Tc (get3of4 Ta Tb Tc Td) Y) and @ Td form (@ Td (Td arrow form) Hd (@ (tuple4 Ta Tb Tc Td) Td (get4of4 Ta Tb Tc Td) X)) (@ (tuple4 Ta Tb Tc Td) Td (get4of4 Ta Tb Tc Td) Y))).
fstpair : {T1:tp} {X:tm T1} {T2:tp} {Y:tm T2} pf (forall (T1 arrow form) ([f:tm (T1 arrow form)] @ T1 form f X imp @ T1 form f (@ (pair T1 T2) T1 (fst T1 T2) (@ T2 (pair T1 T2) (@ T1 (T2 arrow pair T1 T2) (mkpair T1 T2) X) Y)))) = [T1:tp] [X:tm T1] [T2:tp] [Y:tm T2] _fstpair T1 T2 X Y.
sndpair : {T2:tp} {Y:tm T2} {T1:tp} {X:tm T1} pf (forall (T2 arrow form) ([f:tm (T2 arrow form)] @ T2 form f Y imp @ T2 form f (@ (pair T1 T2) T2 (snd T1 T2) (@ T2 (pair T1 T2) (@ T1 (T2 arrow pair T1 T2) (mkpair T1 T2) X) Y)))) = [T2:tp] [Y:tm T2] [T1:tp] [X:tm T1] _sndpair T1 T2 X Y.
fstpair_congr : {T:tp} {X:tm T} {X1:tp} {Y:tm X1} {P:tm T -> tm form} pf (P X) -> pf (P (@ (pair T X1) T (fst T X1) (@ X1 (pair T X1) (@ T (X1 arrow pair T X1) (mkpair T X1) X) Y))) = [T:tp] [X:tm T] [X1:tp] [Y:tm X1] [P:tm T -> tm form] [p1:pf (P X)] beta_e form T ([x3:tm T] P x3) (@ (pair T X1) T (fst T X1) (@ X1 (pair T X1) (@ T (X1 arrow pair T X1) (mkpair T X1) X) Y)) ([x3:tm form] x3) (imp_e (@ T form (lam T form ([x3:tm T] P x3)) X) (@ T form (lam T form ([x3:tm T] P x3)) (@ (pair T X1) T (fst T X1) (@ X1 (pair T X1) (@ T (X1 arrow pair T X1) (mkpair T X1) X) Y))) (forall_e (T arrow form) ([x3:tm (T arrow form)] @ T form x3 X imp @ T form x3 (@ (pair T X1) T (fst T X1) (@ X1 (pair T X1) (@ T (X1 arrow pair T X1) (mkpair T X1) X) Y))) (fstpair T X X1 Y) (lam T form ([x3:tm T] P x3))) (beta_i form T ([x3:tm T] P x3) X ([x4:tm form] x4) p1)).
sndpair_congr : {T:tp} {Y:tm T} {X1:tp} {X:tm X1} {P:tm T -> tm form} pf (P Y) -> pf (P (@ (pair X1 T) T (snd X1 T) (@ T (pair X1 T) (@ X1 (T arrow pair X1 T) (mkpair X1 T) X) Y))) = [T:tp] [Y:tm T] [X1:tp] [X:tm X1] [P:tm T -> tm form] [p1:pf (P Y)] beta_e form T ([x3:tm T] P x3) (@ (pair X1 T) T (snd X1 T) (@ T (pair X1 T) (@ X1 (T arrow pair X1 T) (mkpair X1 T) X) Y)) ([x3:tm form] x3) (imp_e (@ T form (lam T form ([x3:tm T] P x3)) Y) (@ T form (lam T form ([x3:tm T] P x3)) (@ (pair X1 T) T (snd X1 T) (@ T (pair X1 T) (@ X1 (T arrow pair X1 T) (mkpair X1 T) X) Y))) (forall_e (T arrow form) ([x3:tm (T arrow form)] @ T form x3 Y imp @ T form x3 (@ (pair X1 T) T (snd X1 T) (@ T (pair X1 T) (@ X1 (T arrow pair X1 T) (mkpair X1 T) X) Y))) (sndpair T Y X1 X) (lam T form ([x3:tm T] P x3))) (beta_i form T ([x3:tm T] P x3) Y ([x4:tm form] x4) p1)).
eq_fstpair : {X1:tp} {X2:tp} {X:tm X1} {Y:tm X2} pf (== X1 (@ (pair X1 X2) X1 (fst X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) X) Y)) X) = [X1:tp] [X2:tp] [X:tm X1] [Y:tm X2] def1_e X1 ([x3:tm X1] eq X1 x3 X) (@ (pair X1 X2) X1 (fst X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) X) Y)) (imp_e (@ X1 form (lam X1 form ([x3:tm X1] eq X1 x3 X)) X) (@ X1 form (lam X1 form ([x4:tm X1] eq X1 x4 X)) (@ (pair X1 X2) X1 (fst X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) X) Y))) (forall_e (X1 arrow form) ([x3:tm (X1 arrow form)] @ X1 form x3 X imp @ X1 form x3 (@ (pair X1 X2) X1 (fst X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) X) Y))) (fstpair X1 X X2 Y) (lam X1 form ([x5:tm X1] eq X1 x5 X))) (def1_i X1 ([x3:tm X1] eq X1 x3 X) X (refl X1 X))).
eq_sndpair : {X1:tp} {X2:tp} {X:tm X2} {Y:tm X1} pf (== X1 (@ (pair X2 X1) X1 (snd X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X) Y)) Y) = [X1:tp] [X2:tp] [X:tm X2] [Y:tm X1] def1_e X1 ([x3:tm X1] eq X1 x3 Y) (@ (pair X2 X1) X1 (snd X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X) Y)) (imp_e (@ X1 form (lam X1 form ([x3:tm X1] eq X1 x3 Y)) Y) (@ X1 form (lam X1 form ([x4:tm X1] eq X1 x4 Y)) (@ (pair X2 X1) X1 (snd X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X) Y))) (forall_e (X1 arrow form) ([x3:tm (X1 arrow form)] @ X1 form x3 Y imp @ X1 form x3 (@ (pair X2 X1) X1 (snd X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X) Y))) (sndpair X1 Y X2 X) (lam X1 form ([x5:tm X1] eq X1 x5 Y))) (def1_i X1 ([x3:tm X1] eq X1 x3 Y) Y (refl X1 Y))).
eq_pair_i : {X1:tp} {Ha:tm (X1 arrow X1 arrow form)} {X2:tp} {X:tm (pair X1 X2)} {Y:tm (pair X1 X2)} {Hb:tm (X2 arrow X2 arrow form)} pf (@ X1 form (@ X1 (X1 arrow form) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y)) -> pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y)) -> pf (@ (pair X1 X2) form (@ (pair X1 X2) (shadowed_0 (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) X) Y) = [X1:tp] [Ha:tm (X1 arrow X1 arrow form)] [X2:tp] [X:tm (pair X1 X2)] [Y:tm (pair X1 X2)] [Hb:tm (X2 arrow X2 arrow form)] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y))] [p2:pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y))] def4_i (eqrel X1) (eqrel X2) (pair X1 X2) (pair X1 X2) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (pair X1 X2)] [x6:tm (pair X1 X2)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (pair X1 X2) X1 (fst X1 X2) x5)) (@ (pair X1 X2) X1 (fst X1 X2) x6) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (pair X1 X2) X2 (snd X1 X2) x5)) (@ (pair X1 X2) X2 (snd X1 X2) x6)) Ha Hb X Y (and_i (@ X1 form (@ X1 (X1 arrow form) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y)) p1 p2).
eq_pair_e1 : {X1:tp} {X2:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {X:tm (pair X1 X2)} {Y:tm (pair X1 X2)} pf (@ (pair X1 X2) form (@ (pair X1 X2) (shadowed_0 (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y)) = [X1:tp] [X2:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [X:tm (pair X1 X2)] [Y:tm (pair X1 X2)] [p1:pf (@ (pair X1 X2) form (@ (pair X1 X2) (shadowed_0 (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) X) Y)] and_e1 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y)) (def4_e (pair X1 X2) (pair X1 X2) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (pair X1 X2)] [x6:tm (pair X1 X2)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (pair X1 X2) X1 (fst X1 X2) x5)) (@ (pair X1 X2) X1 (fst X1 X2) x6) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (pair X1 X2) X2 (snd X1 X2) x5)) (@ (pair X1 X2) X2 (snd X1 X2) x6)) Ha Hb X Y p1).
eq_pair_e2 : {X1:tp} {X2:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {X:tm (pair X1 X2)} {Y:tm (pair X1 X2)} pf (@ (pair X1 X2) form (@ (pair X1 X2) (shadowed_0 (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) X) Y) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y)) = [X1:tp] [X2:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [X:tm (pair X1 X2)] [Y:tm (pair X1 X2)] [p1:pf (@ (pair X1 X2) form (@ (pair X1 X2) (shadowed_0 (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) X) Y)] and_e2 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (pair X1 X2) X1 (fst X1 X2) X)) (@ (pair X1 X2) X1 (fst X1 X2) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (pair X1 X2) X2 (snd X1 X2) X)) (@ (pair X1 X2) X2 (snd X1 X2) Y)) (def4_e (pair X1 X2) (pair X1 X2) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (pair X1 X2)] [x6:tm (pair X1 X2)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (pair X1 X2) X1 (fst X1 X2) x5)) (@ (pair X1 X2) X1 (fst X1 X2) x6) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (pair X1 X2) X2 (snd X1 X2) x5)) (@ (pair X1 X2) X2 (snd X1 X2) x6)) Ha Hb X Y p1).
eq_pair_reflexive : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} pf (@ (rel T1 T1) form (reflexive T1) Eq1) -> pf (@ (rel T2 T2) form (reflexive T2) Eq2) -> pf (@ (rel (pair T1 T2) (pair T1 T2)) form (reflexive (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [p1:pf (@ (rel T1 T1) form (reflexive T1) Eq1)] [p2:pf (@ (rel T2 T2) form (reflexive T2) Eq2)] reflexive_i (pair T1 T2) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) ([x3:tm (pair T1 T2)] eq_pair_i T1 Eq1 T2 x3 x3 Eq2 (reflexive_e T1 Eq1 (@ (pair T1 T2) T1 (fst T1 T2) x3) p1) (reflexive_e T2 Eq2 (@ (pair T1 T2) T2 (snd T1 T2) x3) p2)).
eq_pair_symmetric : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} pf (@ (rel T1 T1) form (symmetric T1) Eq1) -> pf (@ (rel T2 T2) form (symmetric T2) Eq2) -> pf (@ (rel (pair T1 T2) (pair T1 T2)) form (symmetric (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [p1:pf (@ (rel T1 T1) form (symmetric T1) Eq1)] [p2:pf (@ (rel T2 T2) form (symmetric T2) Eq2)] symmetric_i (pair T1 T2) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) ([x3:tm (pair T1 T2)] [y:tm (pair T1 T2)] [p3:pf (@ (pair T1 T2) form (@ (pair T1 T2) (shadowed_0 (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) x3) y)] eq_pair_i T1 Eq1 T2 y x3 Eq2 (symmetric_e T1 Eq1 (@ (pair T1 T2) T1 (fst T1 T2) x3) (@ (pair T1 T2) T1 (fst T1 T2) y) p1 (eq_pair_e1 T1 T2 Eq1 Eq2 x3 y p3)) (symmetric_e T2 Eq2 (@ (pair T1 T2) T2 (snd T1 T2) x3) (@ (pair T1 T2) T2 (snd T1 T2) y) p2 (eq_pair_e2 T1 T2 Eq1 Eq2 x3 y p3))).
eq_pair_transitive : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} pf (@ (rel T1 T1) form (transitive T1) Eq1) -> pf (@ (rel T2 T2) form (transitive T2) Eq2) -> pf (@ (rel (pair T1 T2) (pair T1 T2)) form (transitive (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [p1:pf (@ (rel T1 T1) form (transitive T1) Eq1)] [p2:pf (@ (rel T2 T2) form (transitive T2) Eq2)] transitive_i (pair T1 T2) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) ([x3:tm (pair T1 T2)] [y:tm (pair T1 T2)] [z1:tm (pair T1 T2)] [p3:pf (@ (pair T1 T2) form (@ (pair T1 T2) (shadowed_0 (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) x3) y)] [p4:pf (@ (pair T1 T2) form (@ (pair T1 T2) (shadowed_0 (pair T1 T2)) (@ (eqrel T2) (eqrel (pair T1 T2)) (@ (eqrel T1) (eqrel T2 arrow eqrel (pair T1 T2)) (eq_pair T1 T2) Eq1) Eq2) y) z1)] eq_pair_i T1 Eq1 T2 x3 z1 Eq2 (transitive_e T1 Eq1 (@ (pair T1 T2) T1 (fst T1 T2) x3) (@ (pair T1 T2) T1 (fst T1 T2) y) (@ (pair T1 T2) T1 (fst T1 T2) z1) p1 (eq_pair_e1 T1 T2 Eq1 Eq2 x3 y p3) (eq_pair_e1 T1 T2 Eq1 Eq2 y z1 p4)) (transitive_e T2 Eq2 (@ (pair T1 T2) T2 (snd T1 T2) x3) (@ (pair T1 T2) T2 (snd T1 T2) y) (@ (pair T1 T2) T2 (snd T1 T2) z1) p2 (eq_pair_e2 T1 T2 Eq1 Eq2 x3 y p3) (eq_pair_e2 T1 T2 Eq1 Eq2 y z1 p4))).
valideqv_eq_pair : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel (pair X1 X2)) form (valideqv (pair X1 X2)) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] valideqv_i (pair X1 X2) (@ (eqrel X2) (eqrel (pair X1 X2)) (@ (eqrel X1) (eqrel X2 arrow eqrel (pair X1 X2)) (eq_pair X1 X2) Ha) Hb) (eq_pair_reflexive X1 Ha X2 Hb (valideqv_e1 X1 Ha p1) (valideqv_e1 X2 Hb p2)) (eq_pair_symmetric X1 Ha X2 Hb (valideqv_e2 X1 Ha p1) (valideqv_e2 X2 Hb p2)) (eq_pair_transitive X1 Ha X2 Hb (valideqv_e3 X1 Ha p1) (valideqv_e3 X2 Hb p2)).
reduce_get1of3 : {X1:tp} {X2:tp} {X3:tp} {X4:tm X1} {X5:tm X2} {X6:tm X3} pf (== X1 (@ (tuple3 X1 X2 X3) X1 (get1of3 X1 X2 X3) (@ X3 (tuple3 X1 X2 X3) (@ X2 (X3 arrow tuple3 X1 X2 X3) (@ X1 (X2 arrow X3 arrow tuple3 X1 X2 X3) (mktuple3 X1 X2 X3) X4) X5) X6)) X4) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X1] [X5:tm X2] [X6:tm X3] congr (pair X1 (pair X2 X3)) (@ X3 (pair X1 (pair X2 X3)) (@ X2 (X3 arrow pair X1 (pair X2 X3)) (@ X1 (X2 arrow X3 arrow pair X1 (pair X2 X3)) (lam3 X1 X2 X3 (pair X1 (pair X2 X3)) ([x3:tm X1] [x4:tm X2] [x5:tm X3] @ (pair X2 X3) (pair X1 (pair X2 X3)) (@ X1 (pair X2 X3 arrow pair X1 (pair X2 X3)) (mkpair X1 (pair X2 X3)) x3) (@ X3 (pair X2 X3) (@ X2 (X3 arrow pair X2 X3) (mkpair X2 X3) x4) x5))) X4) X5) X6) (@ (pair X2 X3) (pair X1 (pair X2 X3)) (@ X1 (pair X2 X3 arrow pair X1 (pair X2 X3)) (mkpair X1 (pair X2 X3)) X4) (@ X3 (pair X2 X3) (@ X2 (X3 arrow pair X2 X3) (mkpair X2 X3) X5) X6)) ([i1:tm (pair X1 (pair X2 X3))] eq X1 (@ (pair X1 (pair X2 X3)) X1 (fst X1 (pair X2 X3)) i1) X4) (beta3 (pair X1 (pair X2 X3)) X3 X2 X1 ([x3:tm X1] [x4:tm X2] [x5:tm X3] @ (pair X2 X3) (pair X1 (pair X2 X3)) (@ X1 (pair X2 X3 arrow pair X1 (pair X2 X3)) (mkpair X1 (pair X2 X3)) x3) (@ X3 (pair X2 X3) (@ X2 (X3 arrow pair X2 X3) (mkpair X2 X3) x4) x5)) X4 X5 X6) (fstpair X1 X4 (pair X2 X3) (@ X3 (pair X2 X3) (@ X2 (X3 arrow pair X2 X3) (mkpair X2 X3) X5) X6)).
reduce_get2of3 : {X1:tp} {X2:tp} {X3:tp} {X4:tm X2} {X5:tm X1} {X6:tm X3} pf (== X1 (@ (tuple3 X2 X1 X3) X1 (get2of3 X2 X1 X3) (@ X3 (tuple3 X2 X1 X3) (@ X1 (X3 arrow tuple3 X2 X1 X3) (@ X2 (X1 arrow X3 arrow tuple3 X2 X1 X3) (mktuple3 X2 X1 X3) X4) X5) X6)) X5) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X2] [X5:tm X1] [X6:tm X3] congr (tuple3 X2 X1 X3) (@ X3 (tuple3 X2 X1 X3) (@ X1 (X3 arrow tuple3 X2 X1 X3) (@ X2 (X1 arrow X3 arrow tuple3 X2 X1 X3) (lam3 X2 X1 X3 (tuple3 X2 X1 X3) ([x3:tm X2] [x4:tm X1] [x5:tm X3] @ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) x3) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) x4) x5))) X4) X5) X6) (@ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) X4) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6)) ([i1:tm (tuple3 X2 X1 X3)] eq X1 (@ (tuple3 X2 X1 X3) X1 (get2of3 X2 X1 X3) i1) X5) (beta3 (tuple3 X2 X1 X3) X3 X1 X2 ([x3:tm X2] [x4:tm X1] [x5:tm X3] @ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) x3) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) x4) x5)) X4 X5 X6) (congr X1 (@ (tuple3 X2 X1 X3) X1 (lam (tuple3 X2 X1 X3) X1 ([x3:tm (tuple3 X2 X1 X3)] @ (pair X1 X3) X1 (fst X1 X3) (@ (pair X2 (pair X1 X3)) (pair X1 X3) (snd X2 (pair X1 X3)) x3))) (@ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) X4) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6))) (@ (pair X1 X3) X1 (fst X1 X3) (@ (pair X2 (pair X1 X3)) (pair X1 X3) (snd X2 (pair X1 X3)) (@ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) X4) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6)))) ([i2:tm X1] eq X1 i2 X5) (beta X1 (tuple3 X2 X1 X3) ([x3:tm (tuple3 X2 X1 X3)] @ (pair X1 X3) X1 (fst X1 X3) (@ (pair X2 (pair X1 X3)) (pair X1 X3) (snd X2 (pair X1 X3)) x3)) (@ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) X4) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6))) (congr (pair X1 X3) (@ (pair X2 (pair X1 X3)) (pair X1 X3) (snd X2 (pair X1 X3)) (@ (pair X1 X3) (pair X2 (pair X1 X3)) (@ X2 (pair X1 X3 arrow pair X2 (pair X1 X3)) (mkpair X2 (pair X1 X3)) X4) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6))) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6) ([i3:tm (pair X1 X3)] eq X1 (@ (pair X1 X3) X1 (fst X1 X3) i3) X5) (sndpair (pair X1 X3) (@ X3 (pair X1 X3) (@ X1 (X3 arrow pair X1 X3) (mkpair X1 X3) X5) X6) X2 X4) (fstpair X1 X5 X3 X6))).
reduce_get3of3 : {X1:tp} {X2:tp} {X3:tp} {X4:tm X2} {X5:tm X3} {X6:tm X1} pf (== X1 (@ (tuple3 X2 X3 X1) X1 (get3of3 X2 X3 X1) (@ X1 (tuple3 X2 X3 X1) (@ X3 (X1 arrow tuple3 X2 X3 X1) (@ X2 (X3 arrow X1 arrow tuple3 X2 X3 X1) (mktuple3 X2 X3 X1) X4) X5) X6)) X6) = [X1:tp] [X2:tp] [X3:tp] [X4:tm X2] [X5:tm X3] [X6:tm X1] congr (tuple3 X2 X3 X1) (@ X1 (tuple3 X2 X3 X1) (@ X3 (X1 arrow tuple3 X2 X3 X1) (@ X2 (X3 arrow X1 arrow tuple3 X2 X3 X1) (lam3 X2 X3 X1 (tuple3 X2 X3 X1) ([x3:tm X2] [x4:tm X3] [x5:tm X1] @ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) x3) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) x4) x5))) X4) X5) X6) (@ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) X4) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6)) ([i1:tm (tuple3 X2 X3 X1)] eq X1 (@ (tuple3 X2 X3 X1) X1 (get3of3 X2 X3 X1) i1) X6) (beta3 (tuple3 X2 X3 X1) X1 X3 X2 ([x3:tm X2] [x4:tm X3] [x5:tm X1] @ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) x3) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) x4) x5)) X4 X5 X6) (congr X1 (@ (tuple3 X2 X3 X1) X1 (lam (tuple3 X2 X3 X1) X1 ([x3:tm (tuple3 X2 X3 X1)] @ (pair X3 X1) X1 (snd X3 X1) (@ (pair X2 (pair X3 X1)) (pair X3 X1) (snd X2 (pair X3 X1)) x3))) (@ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) X4) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6))) (@ (pair X3 X1) X1 (snd X3 X1) (@ (pair X2 (pair X3 X1)) (pair X3 X1) (snd X2 (pair X3 X1)) (@ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) X4) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6)))) ([i2:tm X1] eq X1 i2 X6) (beta X1 (tuple3 X2 X3 X1) ([x3:tm (tuple3 X2 X3 X1)] @ (pair X3 X1) X1 (snd X3 X1) (@ (pair X2 (pair X3 X1)) (pair X3 X1) (snd X2 (pair X3 X1)) x3)) (@ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) X4) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6))) (congr (pair X3 X1) (@ (pair X2 (pair X3 X1)) (pair X3 X1) (snd X2 (pair X3 X1)) (@ (pair X3 X1) (pair X2 (pair X3 X1)) (@ X2 (pair X3 X1 arrow pair X2 (pair X3 X1)) (mkpair X2 (pair X3 X1)) X4) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6))) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6) ([i3:tm (pair X3 X1)] eq X1 (@ (pair X3 X1) X1 (snd X3 X1) i3) X6) (sndpair (pair X3 X1) (@ X1 (pair X3 X1) (@ X3 (X1 arrow pair X3 X1) (mkpair X3 X1) X5) X6) X2 X4) (sndpair X1 X6 X3 X5))).
congr_app : {X1:tp} {X2:tp} {X3:tm (X1 arrow X2)} {X4:tm (X1 arrow X2)} {Y1:tm X1} {Y2:tm X1} pf (eq (X1 arrow X2) X3 X4) -> pf (eq X1 Y1 Y2) -> pf (eq X2 (@ X1 X2 X3 Y1) (@ X1 X2 X4 Y2)) = [X1:tp] [X2:tp] [X3:tm (X1 arrow X2)] [X4:tm (X1 arrow X2)] [Y1:tm X1] [Y2:tm X1] [p1:pf (eq (X1 arrow X2) X3 X4)] [p2:pf (eq X1 Y1 Y2)] congr (X1 arrow X2) X3 X4 ([W:tm (X1 arrow X2)] eq X2 (@ X1 X2 W Y1) (@ X1 X2 X4 Y2)) p1 (congr X1 Y1 Y2 ([W:tm X1] eq X2 (@ X1 X2 X4 W) (@ X1 X2 X4 Y2)) p2 (refl X2 (@ X1 X2 X4 Y2))).
reduce_get1of4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {A:tm X1} {B:tm X2} {C:tm X3} {D:tm X4} pf (== X1 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) (@ X4 (tuple4 X1 X2 X3 X4) (@ X3 (X4 arrow tuple4 X1 X2 X3 X4) (@ X2 (X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (@ X1 (X2 arrow X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (mktuple4 X1 X2 X3 X4) A) B) C) D)) A) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [A:tm X1] [B:tm X2] [C:tm X3] [D:tm X4] trans X1 (@ (tuple4 X1 X2 X3 X4) X1 (lam (tuple4 X1 X2 X3 X4) X1 ([x3:tm (tuple4 X1 X2 X3 X4)] _get1of4 X1 X2 X3 X4 x3)) (@ X4 (tuple4 X1 X2 X3 X4) (@ X3 (X4 arrow tuple4 X1 X2 X3 X4) (@ X2 (X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (@ X1 (X2 arrow X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (mktuple4 X1 X2 X3 X4) A) B) C) D)) (_get1of4 X1 X2 X3 X4 (@ X4 (tuple4 X1 X2 X3 X4) (@ X3 (X4 arrow tuple4 X1 X2 X3 X4) (@ X2 (X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (@ X1 (X2 arrow X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (mktuple4 X1 X2 X3 X4) A) B) C) D)) A (beta1 X1 (tuple4 X1 X2 X3 X4) ([x3:tm (tuple4 X1 X2 X3 X4)] _get1of4 X1 X2 X3 X4 x3) (@ X4 (tuple4 X1 X2 X3 X4) (@ X3 (X4 arrow tuple4 X1 X2 X3 X4) (@ X2 (X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (@ X1 (X2 arrow X3 arrow X4 arrow tuple4 X1 X2 X3 X4) (mktuple4 X1 X2 X3 X4) A) B) C) D)) (trans X1 (@ (pair X1 X2) X1 (fst X1 X2) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (@ X4 (pair (pair X1 X2) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X2 (X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X1 (X2 arrow X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (lam4 X1 X2 X3 X4 (pair (pair X1 X2) (pair X3 X4)) ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] _mktuple4 X1 X2 X3 X4 x3 x4 x5 x6)) A) B) C) D))) (@ (pair X1 X2) X1 (fst X1 X2) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (_mktuple4 X1 X2 X3 X4 A B C D))) A (congr_app (pair X1 X2) X1 (fst X1 X2) (fst X1 X2) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (@ X4 (pair (pair X1 X2) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X2 (X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X1 (X2 arrow X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (lam4 X1 X2 X3 X4 (pair (pair X1 X2) (pair X3 X4)) ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] _mktuple4 X1 X2 X3 X4 x3 x4 x5 x6)) A) B) C) D)) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (_mktuple4 X1 X2 X3 X4 A B C D)) (refl (pair X1 X2 arrow X1) (fst X1 X2)) (congr_app (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (fst (pair X1 X2) (pair X3 X4)) (@ X4 (pair (pair X1 X2) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X2 (X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (@ X1 (X2 arrow X3 arrow X4 arrow pair (pair X1 X2) (pair X3 X4)) (lam4 X1 X2 X3 X4 (pair (pair X1 X2) (pair X3 X4)) ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] _mktuple4 X1 X2 X3 X4 x3 x4 x5 x6)) A) B) C) D) (_mktuple4 X1 X2 X3 X4 A B C D) (refl (pair (pair X1 X2) (pair X3 X4) arrow pair X1 X2) (fst (pair X1 X2) (pair X3 X4))) (beta4 (pair (pair X1 X2) (pair X3 X4)) X4 X3 X2 X1 ([x3:tm X1] [x4:tm X2] [x5:tm X3] [x6:tm X4] _mktuple4 X1 X2 X3 X4 x3 x4 x5 x6) A B C D))) (trans X1 (@ (pair X1 X2) X1 (fst X1 X2) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (@ (pair X3 X4) (pair (pair X1 X2) (pair X3 X4)) (@ (pair X1 X2) (pair X3 X4 arrow pair (pair X1 X2) (pair X3 X4)) (mkpair (pair X1 X2) (pair X3 X4)) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) A) B)) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) C D)))) (@ (pair X1 X2) X1 (fst X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) A) B)) A (congr_app (pair X1 X2) X1 (fst X1 X2) (fst X1 X2) (@ (pair (pair X1 X2) (pair X3 X4)) (pair X1 X2) (fst (pair X1 X2) (pair X3 X4)) (@ (pair X3 X4) (pair (pair X1 X2) (pair X3 X4)) (@ (pair X1 X2) (pair X3 X4 arrow pair (pair X1 X2) (pair X3 X4)) (mkpair (pair X1 X2) (pair X3 X4)) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) A) B)) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) C D))) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) A) B) (refl (pair X1 X2 arrow X1) (fst X1 X2)) (fstpair (pair X1 X2) (@ X2 (pair X1 X2) (@ X1 (X2 arrow pair X1 X2) (mkpair X1 X2) A) B) (pair X3 X4) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) C D))) (fstpair X1 A X2 B))).
reduce_get2of4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X2} {X6:tm X1} {X7:tm X3} {X8:tm X4} pf (eq X1 (@ (tuple4 X2 X1 X3 X4) X1 (get2of4 X2 X1 X3 X4) (@ X4 (tuple4 X2 X1 X3 X4) (@ X3 (X4 arrow tuple4 X2 X1 X3 X4) (@ X1 (X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (@ X2 (X1 arrow X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (mktuple4 X2 X1 X3 X4) X5) X6) X7) X8)) X6) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X2] [X6:tm X1] [X7:tm X3] [X8:tm X4] trans X1 (@ (tuple4 X2 X1 X3 X4) X1 (lam (tuple4 X2 X1 X3 X4) X1 ([x3:tm (tuple4 X2 X1 X3 X4)] _get2of4 X2 X1 X3 X4 x3)) (@ X4 (tuple4 X2 X1 X3 X4) (@ X3 (X4 arrow tuple4 X2 X1 X3 X4) (@ X1 (X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (@ X2 (X1 arrow X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (mktuple4 X2 X1 X3 X4) X5) X6) X7) X8)) (_get2of4 X2 X1 X3 X4 (@ X4 (tuple4 X2 X1 X3 X4) (@ X3 (X4 arrow tuple4 X2 X1 X3 X4) (@ X1 (X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (@ X2 (X1 arrow X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (mktuple4 X2 X1 X3 X4) X5) X6) X7) X8)) X6 (beta1 X1 (tuple4 X2 X1 X3 X4) ([x3:tm (tuple4 X2 X1 X3 X4)] _get2of4 X2 X1 X3 X4 x3) (@ X4 (tuple4 X2 X1 X3 X4) (@ X3 (X4 arrow tuple4 X2 X1 X3 X4) (@ X1 (X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (@ X2 (X1 arrow X3 arrow X4 arrow tuple4 X2 X1 X3 X4) (mktuple4 X2 X1 X3 X4) X5) X6) X7) X8)) (trans X1 (@ (pair X2 X1) X1 (snd X2 X1) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (@ X4 (pair (pair X2 X1) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X1 (X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X2 (X1 arrow X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (lam4 X2 X1 X3 X4 (pair (pair X2 X1) (pair X3 X4)) ([x3:tm X2] [x4:tm X1] [x5:tm X3] [x6:tm X4] _mktuple4 X2 X1 X3 X4 x3 x4 x5 x6)) X5) X6) X7) X8))) (@ (pair X2 X1) X1 (snd X2 X1) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (_mktuple4 X2 X1 X3 X4 X5 X6 X7 X8))) X6 (congr_app (pair X2 X1) X1 (snd X2 X1) (snd X2 X1) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (@ X4 (pair (pair X2 X1) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X1 (X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X2 (X1 arrow X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (lam4 X2 X1 X3 X4 (pair (pair X2 X1) (pair X3 X4)) ([x3:tm X2] [x4:tm X1] [x5:tm X3] [x6:tm X4] _mktuple4 X2 X1 X3 X4 x3 x4 x5 x6)) X5) X6) X7) X8)) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (_mktuple4 X2 X1 X3 X4 X5 X6 X7 X8)) (refl (pair X2 X1 arrow X1) (snd X2 X1)) (congr_app (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (fst (pair X2 X1) (pair X3 X4)) (@ X4 (pair (pair X2 X1) (pair X3 X4)) (@ X3 (X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X1 (X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (@ X2 (X1 arrow X3 arrow X4 arrow pair (pair X2 X1) (pair X3 X4)) (lam4 X2 X1 X3 X4 (pair (pair X2 X1) (pair X3 X4)) ([x3:tm X2] [x4:tm X1] [x5:tm X3] [x6:tm X4] _mktuple4 X2 X1 X3 X4 x3 x4 x5 x6)) X5) X6) X7) X8) (_mktuple4 X2 X1 X3 X4 X5 X6 X7 X8) (refl (pair (pair X2 X1) (pair X3 X4) arrow pair X2 X1) (fst (pair X2 X1) (pair X3 X4))) (beta4 (pair (pair X2 X1) (pair X3 X4)) X4 X3 X1 X2 ([x3:tm X2] [x4:tm X1] [x5:tm X3] [x6:tm X4] _mktuple4 X2 X1 X3 X4 x3 x4 x5 x6) X5 X6 X7 X8))) (trans X1 (@ (pair X2 X1) X1 (snd X2 X1) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (@ (pair X3 X4) (pair (pair X2 X1) (pair X3 X4)) (@ (pair X2 X1) (pair X3 X4 arrow pair (pair X2 X1) (pair X3 X4)) (mkpair (pair X2 X1) (pair X3 X4)) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X5) X6)) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) X7 X8)))) (@ (pair X2 X1) X1 (snd X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X5) X6)) X6 (congr_app (pair X2 X1) X1 (snd X2 X1) (snd X2 X1) (@ (pair (pair X2 X1) (pair X3 X4)) (pair X2 X1) (fst (pair X2 X1) (pair X3 X4)) (@ (pair X3 X4) (pair (pair X2 X1) (pair X3 X4)) (@ (pair X2 X1) (pair X3 X4 arrow pair (pair X2 X1) (pair X3 X4)) (mkpair (pair X2 X1) (pair X3 X4)) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X5) X6)) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) X7 X8))) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X5) X6) (refl (pair X2 X1 arrow X1) (snd X2 X1)) (fstpair (pair X2 X1) (@ X1 (pair X2 X1) (@ X2 (X1 arrow pair X2 X1) (mkpair X2 X1) X5) X6) (pair X3 X4) (_@2 X3 X4 (pair X3 X4) (_mkpair X3 X4) X7 X8))) (sndpair X1 X6 X2 X5))).
reduce_get3of4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X2} {X6:tm X3} {X7:tm X1} {X8:tm X4} pf (eq X1 (@ (tuple4 X2 X3 X1 X4) X1 (get3of4 X2 X3 X1 X4) (@ X4 (tuple4 X2 X3 X1 X4) (@ X1 (X4 arrow tuple4 X2 X3 X1 X4) (@ X3 (X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (@ X2 (X3 arrow X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (mktuple4 X2 X3 X1 X4) X5) X6) X7) X8)) X7) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X2] [X6:tm X3] [X7:tm X1] [X8:tm X4] trans X1 (@ (tuple4 X2 X3 X1 X4) X1 (lam (tuple4 X2 X3 X1 X4) X1 ([x3:tm (tuple4 X2 X3 X1 X4)] _get3of4 X2 X3 X1 X4 x3)) (@ X4 (tuple4 X2 X3 X1 X4) (@ X1 (X4 arrow tuple4 X2 X3 X1 X4) (@ X3 (X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (@ X2 (X3 arrow X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (mktuple4 X2 X3 X1 X4) X5) X6) X7) X8)) (_get3of4 X2 X3 X1 X4 (@ X4 (tuple4 X2 X3 X1 X4) (@ X1 (X4 arrow tuple4 X2 X3 X1 X4) (@ X3 (X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (@ X2 (X3 arrow X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (mktuple4 X2 X3 X1 X4) X5) X6) X7) X8)) X7 (beta1 X1 (tuple4 X2 X3 X1 X4) ([x3:tm (tuple4 X2 X3 X1 X4)] _get3of4 X2 X3 X1 X4 x3) (@ X4 (tuple4 X2 X3 X1 X4) (@ X1 (X4 arrow tuple4 X2 X3 X1 X4) (@ X3 (X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (@ X2 (X3 arrow X1 arrow X4 arrow tuple4 X2 X3 X1 X4) (mktuple4 X2 X3 X1 X4) X5) X6) X7) X8)) (trans X1 (@ (pair X1 X4) X1 (fst X1 X4) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (@ X4 (pair (pair X2 X3) (pair X1 X4)) (@ X1 (X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X3 (X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X2 (X3 arrow X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (lam4 X2 X3 X1 X4 (pair (pair X2 X3) (pair X1 X4)) ([x3:tm X2] [x4:tm X3] [x5:tm X1] [x6:tm X4] _mktuple4 X2 X3 X1 X4 x3 x4 x5 x6)) X5) X6) X7) X8))) (@ (pair X1 X4) X1 (fst X1 X4) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (_mktuple4 X2 X3 X1 X4 X5 X6 X7 X8))) X7 (congr_app (pair X1 X4) X1 (fst X1 X4) (fst X1 X4) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (@ X4 (pair (pair X2 X3) (pair X1 X4)) (@ X1 (X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X3 (X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X2 (X3 arrow X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (lam4 X2 X3 X1 X4 (pair (pair X2 X3) (pair X1 X4)) ([x3:tm X2] [x4:tm X3] [x5:tm X1] [x6:tm X4] _mktuple4 X2 X3 X1 X4 x3 x4 x5 x6)) X5) X6) X7) X8)) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (_mktuple4 X2 X3 X1 X4 X5 X6 X7 X8)) (refl (pair X1 X4 arrow X1) (fst X1 X4)) (congr_app (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (snd (pair X2 X3) (pair X1 X4)) (@ X4 (pair (pair X2 X3) (pair X1 X4)) (@ X1 (X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X3 (X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (@ X2 (X3 arrow X1 arrow X4 arrow pair (pair X2 X3) (pair X1 X4)) (lam4 X2 X3 X1 X4 (pair (pair X2 X3) (pair X1 X4)) ([x3:tm X2] [x4:tm X3] [x5:tm X1] [x6:tm X4] _mktuple4 X2 X3 X1 X4 x3 x4 x5 x6)) X5) X6) X7) X8) (_mktuple4 X2 X3 X1 X4 X5 X6 X7 X8) (refl (pair (pair X2 X3) (pair X1 X4) arrow pair X1 X4) (snd (pair X2 X3) (pair X1 X4))) (beta4 (pair (pair X2 X3) (pair X1 X4)) X4 X1 X3 X2 ([x3:tm X2] [x4:tm X3] [x5:tm X1] [x6:tm X4] _mktuple4 X2 X3 X1 X4 x3 x4 x5 x6) X5 X6 X7 X8))) (trans X1 (@ (pair X1 X4) X1 (fst X1 X4) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (@ (pair X1 X4) (pair (pair X2 X3) (pair X1 X4)) (@ (pair X2 X3) (pair X1 X4 arrow pair (pair X2 X3) (pair X1 X4)) (mkpair (pair X2 X3) (pair X1 X4)) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6)) (@ X4 (pair X1 X4) (@ X1 (X4 arrow pair X1 X4) (mkpair X1 X4) X7) X8)))) (@ (pair X1 X4) X1 (fst X1 X4) (@ X4 (pair X1 X4) (@ X1 (X4 arrow pair X1 X4) (mkpair X1 X4) X7) X8)) X7 (congr_app (pair X1 X4) X1 (fst X1 X4) (fst X1 X4) (@ (pair (pair X2 X3) (pair X1 X4)) (pair X1 X4) (snd (pair X2 X3) (pair X1 X4)) (@ (pair X1 X4) (pair (pair X2 X3) (pair X1 X4)) (@ (pair X2 X3) (pair X1 X4 arrow pair (pair X2 X3) (pair X1 X4)) (mkpair (pair X2 X3) (pair X1 X4)) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6)) (@ X4 (pair X1 X4) (@ X1 (X4 arrow pair X1 X4) (mkpair X1 X4) X7) X8))) (@ X4 (pair X1 X4) (@ X1 (X4 arrow pair X1 X4) (mkpair X1 X4) X7) X8) (refl (pair X1 X4 arrow X1) (fst X1 X4)) (sndpair (pair X1 X4) (@ X4 (pair X1 X4) (@ X1 (X4 arrow pair X1 X4) (mkpair X1 X4) X7) X8) (pair X2 X3) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6))) (fstpair X1 X7 X4 X8))).
reduce_get4of4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {X5:tm X2} {X6:tm X3} {X7:tm X4} {X8:tm X1} pf (eq X1 (@ (tuple4 X2 X3 X4 X1) X1 (get4of4 X2 X3 X4 X1) (@ X1 (tuple4 X2 X3 X4 X1) (@ X4 (X1 arrow tuple4 X2 X3 X4 X1) (@ X3 (X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (@ X2 (X3 arrow X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (mktuple4 X2 X3 X4 X1) X5) X6) X7) X8)) X8) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [X5:tm X2] [X6:tm X3] [X7:tm X4] [X8:tm X1] trans X1 (@ (tuple4 X2 X3 X4 X1) X1 (lam (tuple4 X2 X3 X4 X1) X1 ([x3:tm (tuple4 X2 X3 X4 X1)] _get4of4 X2 X3 X4 X1 x3)) (@ X1 (tuple4 X2 X3 X4 X1) (@ X4 (X1 arrow tuple4 X2 X3 X4 X1) (@ X3 (X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (@ X2 (X3 arrow X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (mktuple4 X2 X3 X4 X1) X5) X6) X7) X8)) (_get4of4 X2 X3 X4 X1 (@ X1 (tuple4 X2 X3 X4 X1) (@ X4 (X1 arrow tuple4 X2 X3 X4 X1) (@ X3 (X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (@ X2 (X3 arrow X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (mktuple4 X2 X3 X4 X1) X5) X6) X7) X8)) X8 (beta1 X1 (tuple4 X2 X3 X4 X1) ([x3:tm (tuple4 X2 X3 X4 X1)] _get4of4 X2 X3 X4 X1 x3) (@ X1 (tuple4 X2 X3 X4 X1) (@ X4 (X1 arrow tuple4 X2 X3 X4 X1) (@ X3 (X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (@ X2 (X3 arrow X4 arrow X1 arrow tuple4 X2 X3 X4 X1) (mktuple4 X2 X3 X4 X1) X5) X6) X7) X8)) (trans X1 (@ (pair X4 X1) X1 (snd X4 X1) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (@ X1 (pair (pair X2 X3) (pair X4 X1)) (@ X4 (X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X3 (X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X2 (X3 arrow X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (lam4 X2 X3 X4 X1 (pair (pair X2 X3) (pair X4 X1)) ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X1] _mktuple4 X2 X3 X4 X1 x3 x4 x5 x6)) X5) X6) X7) X8))) (@ (pair X4 X1) X1 (snd X4 X1) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (_mktuple4 X2 X3 X4 X1 X5 X6 X7 X8))) X8 (congr_app (pair X4 X1) X1 (snd X4 X1) (snd X4 X1) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (@ X1 (pair (pair X2 X3) (pair X4 X1)) (@ X4 (X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X3 (X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X2 (X3 arrow X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (lam4 X2 X3 X4 X1 (pair (pair X2 X3) (pair X4 X1)) ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X1] _mktuple4 X2 X3 X4 X1 x3 x4 x5 x6)) X5) X6) X7) X8)) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (_mktuple4 X2 X3 X4 X1 X5 X6 X7 X8)) (refl (pair X4 X1 arrow X1) (snd X4 X1)) (congr_app (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (snd (pair X2 X3) (pair X4 X1)) (@ X1 (pair (pair X2 X3) (pair X4 X1)) (@ X4 (X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X3 (X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (@ X2 (X3 arrow X4 arrow X1 arrow pair (pair X2 X3) (pair X4 X1)) (lam4 X2 X3 X4 X1 (pair (pair X2 X3) (pair X4 X1)) ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X1] _mktuple4 X2 X3 X4 X1 x3 x4 x5 x6)) X5) X6) X7) X8) (_mktuple4 X2 X3 X4 X1 X5 X6 X7 X8) (refl (pair (pair X2 X3) (pair X4 X1) arrow pair X4 X1) (snd (pair X2 X3) (pair X4 X1))) (beta4 (pair (pair X2 X3) (pair X4 X1)) X1 X4 X3 X2 ([x3:tm X2] [x4:tm X3] [x5:tm X4] [x6:tm X1] _mktuple4 X2 X3 X4 X1 x3 x4 x5 x6) X5 X6 X7 X8))) (trans X1 (@ (pair X4 X1) X1 (snd X4 X1) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (@ (pair X4 X1) (pair (pair X2 X3) (pair X4 X1)) (@ (pair X2 X3) (pair X4 X1 arrow pair (pair X2 X3) (pair X4 X1)) (mkpair (pair X2 X3) (pair X4 X1)) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6)) (@ X1 (pair X4 X1) (@ X4 (X1 arrow pair X4 X1) (mkpair X4 X1) X7) X8)))) (@ (pair X4 X1) X1 (snd X4 X1) (@ X1 (pair X4 X1) (@ X4 (X1 arrow pair X4 X1) (mkpair X4 X1) X7) X8)) X8 (congr_app (pair X4 X1) X1 (snd X4 X1) (snd X4 X1) (@ (pair (pair X2 X3) (pair X4 X1)) (pair X4 X1) (snd (pair X2 X3) (pair X4 X1)) (@ (pair X4 X1) (pair (pair X2 X3) (pair X4 X1)) (@ (pair X2 X3) (pair X4 X1 arrow pair (pair X2 X3) (pair X4 X1)) (mkpair (pair X2 X3) (pair X4 X1)) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6)) (@ X1 (pair X4 X1) (@ X4 (X1 arrow pair X4 X1) (mkpair X4 X1) X7) X8))) (@ X1 (pair X4 X1) (@ X4 (X1 arrow pair X4 X1) (mkpair X4 X1) X7) X8) (refl (pair X4 X1 arrow X1) (snd X4 X1)) (sndpair (pair X4 X1) (@ X1 (pair X4 X1) (@ X4 (X1 arrow pair X4 X1) (mkpair X4 X1) X7) X8) (pair X2 X3) (_@2 X2 X3 (pair X2 X3) (_mkpair X2 X3) X5 X6))) (sndpair X1 X8 X4 X7))).
eq_tuple4_i : {X1:tp} {Ha:tm (X1 arrow X1 arrow form)} {X2:tp} {X3:tp} {X4:tp} {X:tm (tuple4 X1 X2 X3 X4)} {Y:tm (tuple4 X1 X2 X3 X4)} {Hb:tm (X2 arrow X2 arrow form)} {Hc:tm (X3 arrow X3 arrow form)} {Hd:tm (X4 arrow X4 arrow form)} pf (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) -> pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) -> pf (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y)) -> pf (@ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) -> pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y) = [X1:tp] [Ha:tm (X1 arrow X1 arrow form)] [X2:tp] [X3:tp] [X4:tp] [X:tm (tuple4 X1 X2 X3 X4)] [Y:tm (tuple4 X1 X2 X3 X4)] [Hb:tm (X2 arrow X2 arrow form)] [Hc:tm (X3 arrow X3 arrow form)] [Hd:tm (X4 arrow X4 arrow form)] [p1:pf (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y))] [p2:pf (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y))] [p3:pf (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y))] [p4:pf (@ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y))] def6_i (eqrel X1) (eqrel X2) (eqrel X3) (eqrel X4) (tuple4 X1 X2 X3 X4) (tuple4 X1 X2 X3 X4) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] [x7:tm (tuple4 X1 X2 X3 X4)] [x8:tm (tuple4 X1 X2 X3 X4)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x8) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x8) and @ X3 form (@ X3 (X3 arrow form) x5 (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x8) and @ X4 form (@ X4 (X4 arrow form) x6 (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x8)) Ha Hb Hc Hd X Y (and4_i (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y)) (@ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) p1 p2 p3 p4).
eq_tuple4_e1 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {Hc:tm (eqrel X3)} {Hd:tm (eqrel X4)} {X:tm (tuple4 X1 X2 X3 X4)} {Y:tm (tuple4 X1 X2 X3 X4)} pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y) -> pf (@ X1 form (@ X1 (shadowed_0 X1) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [Hc:tm (eqrel X3)] [Hd:tm (eqrel X4)] [X:tm (tuple4 X1 X2 X3 X4)] [Y:tm (tuple4 X1 X2 X3 X4)] [p1:pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y)] and_e1 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y) and @ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (def6_e (tuple4 X1 X2 X3 X4) (tuple4 X1 X2 X3 X4) (eqrel X4) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] [x7:tm (tuple4 X1 X2 X3 X4)] [x8:tm (tuple4 X1 X2 X3 X4)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x8) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x8) and @ X3 form (@ X3 (X3 arrow form) x5 (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x8) and @ X4 form (@ X4 (X4 arrow form) x6 (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x8)) Ha Hb Hc Hd X Y p1).
eq_tuple4_e2 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {Hc:tm (eqrel X3)} {Hd:tm (eqrel X4)} {X:tm (tuple4 X1 X2 X3 X4)} {Y:tm (tuple4 X1 X2 X3 X4)} pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y) -> pf (@ X2 form (@ X2 (shadowed_0 X2) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [Hc:tm (eqrel X3)] [Hd:tm (eqrel X4)] [X:tm (tuple4 X1 X2 X3 X4)] [Y:tm (tuple4 X1 X2 X3 X4)] [p1:pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y)] and_e1 (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y) and @ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (def6_e (tuple4 X1 X2 X3 X4) (tuple4 X1 X2 X3 X4) (eqrel X4) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] [x7:tm (tuple4 X1 X2 X3 X4)] [x8:tm (tuple4 X1 X2 X3 X4)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x8) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x8) and @ X3 form (@ X3 (X3 arrow form) x5 (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x8) and @ X4 form (@ X4 (X4 arrow form) x6 (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x8)) Ha Hb Hc Hd X Y p1)).
eq_tuple4_e3 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {Hc:tm (eqrel X3)} {Hd:tm (eqrel X4)} {X:tm (tuple4 X1 X2 X3 X4)} {Y:tm (tuple4 X1 X2 X3 X4)} pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y) -> pf (@ X3 form (@ X3 (shadowed_0 X3) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [Hc:tm (eqrel X3)] [Hd:tm (eqrel X4)] [X:tm (tuple4 X1 X2 X3 X4)] [Y:tm (tuple4 X1 X2 X3 X4)] [p1:pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y)] and_e1 (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y)) (@ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (and_e2 (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y) and @ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (def6_e (tuple4 X1 X2 X3 X4) (tuple4 X1 X2 X3 X4) (eqrel X4) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] [x7:tm (tuple4 X1 X2 X3 X4)] [x8:tm (tuple4 X1 X2 X3 X4)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x8) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x8) and @ X3 form (@ X3 (X3 arrow form) x5 (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x8) and @ X4 form (@ X4 (X4 arrow form) x6 (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x8)) Ha Hb Hc Hd X Y p1))).
eq_tuple4_e4 : {X1:tp} {X2:tp} {X3:tp} {X4:tp} {Ha:tm (eqrel X1)} {Hb:tm (eqrel X2)} {Hc:tm (eqrel X3)} {Hd:tm (eqrel X4)} {X:tm (tuple4 X1 X2 X3 X4)} {Y:tm (tuple4 X1 X2 X3 X4)} pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y) -> pf (@ X4 form (@ X4 (shadowed_0 X4) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) = [X1:tp] [X2:tp] [X3:tp] [X4:tp] [Ha:tm (eqrel X1)] [Hb:tm (eqrel X2)] [Hc:tm (eqrel X3)] [Hd:tm (eqrel X4)] [X:tm (tuple4 X1 X2 X3 X4)] [Y:tm (tuple4 X1 X2 X3 X4)] [p1:pf (@ (tuple4 X1 X2 X3 X4) form (@ (tuple4 X1 X2 X3 X4) (shadowed_0 (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) X) Y)] and_e2 (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y)) (@ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (and_e2 (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y)) (@ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (and_e2 (@ X1 form (@ X1 (X1 arrow form) Ha (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) Y)) (@ X2 form (@ X2 (X2 arrow form) Hb (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) Y) and @ X3 form (@ X3 (X3 arrow form) Hc (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) Y) and @ X4 form (@ X4 (X4 arrow form) Hd (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) X)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) Y)) (def6_e (tuple4 X1 X2 X3 X4) (tuple4 X1 X2 X3 X4) (eqrel X4) (eqrel X3) (eqrel X2) (eqrel X1) ([x3:tm (eqrel X1)] [x4:tm (eqrel X2)] [x5:tm (eqrel X3)] [x6:tm (eqrel X4)] [x7:tm (tuple4 X1 X2 X3 X4)] [x8:tm (tuple4 X1 X2 X3 X4)] @ X1 form (@ X1 (X1 arrow form) x3 (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X1 (get1of4 X1 X2 X3 X4) x8) and @ X2 form (@ X2 (X2 arrow form) x4 (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X2 (get2of4 X1 X2 X3 X4) x8) and @ X3 form (@ X3 (X3 arrow form) x5 (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X3 (get3of4 X1 X2 X3 X4) x8) and @ X4 form (@ X4 (X4 arrow form) x6 (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x7)) (@ (tuple4 X1 X2 X3 X4) X4 (get4of4 X1 X2 X3 X4) x8)) Ha Hb Hc Hd X Y p1))).
eq_tuple4_reflexive : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} {T3:tp} {Eq3:tm (rel T3 T3)} {T4:tp} {Eq4:tm (rel T4 T4)} pf (@ (rel T1 T1) form (reflexive T1) Eq1) -> pf (@ (rel T2 T2) form (reflexive T2) Eq2) -> pf (@ (rel T3 T3) form (reflexive T3) Eq3) -> pf (@ (rel T4 T4) form (reflexive T4) Eq4) -> pf (@ (rel (tuple4 T1 T2 T3 T4) (tuple4 T1 T2 T3 T4)) form (reflexive (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [T3:tp] [Eq3:tm (rel T3 T3)] [T4:tp] [Eq4:tm (rel T4 T4)] [p1:pf (@ (rel T1 T1) form (reflexive T1) Eq1)] [p2:pf (@ (rel T2 T2) form (reflexive T2) Eq2)] [p3:pf (@ (rel T3 T3) form (reflexive T3) Eq3)] [p4:pf (@ (rel T4 T4) form (reflexive T4) Eq4)] reflexive_i (tuple4 T1 T2 T3 T4) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) ([x3:tm (tuple4 T1 T2 T3 T4)] eq_tuple4_i T1 Eq1 T2 T3 T4 x3 x3 Eq2 Eq3 Eq4 (reflexive_e T1 Eq1 (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) x3) p1) (reflexive_e T2 Eq2 (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) x3) p2) (reflexive_e T3 Eq3 (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) x3) p3) (reflexive_e T4 Eq4 (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) x3) p4)).
eq_tuple4_symmetric : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} {T3:tp} {Eq3:tm (rel T3 T3)} {T4:tp} {Eq4:tm (rel T4 T4)} pf (@ (rel T1 T1) form (symmetric T1) Eq1) -> pf (@ (rel T2 T2) form (symmetric T2) Eq2) -> pf (@ (rel T3 T3) form (symmetric T3) Eq3) -> pf (@ (rel T4 T4) form (symmetric T4) Eq4) -> pf (@ (rel (tuple4 T1 T2 T3 T4) (tuple4 T1 T2 T3 T4)) form (symmetric (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [T3:tp] [Eq3:tm (rel T3 T3)] [T4:tp] [Eq4:tm (rel T4 T4)] [p1:pf (@ (rel T1 T1) form (symmetric T1) Eq1)] [p2:pf (@ (rel T2 T2) form (symmetric T2) Eq2)] [p3:pf (@ (rel T3 T3) form (symmetric T3) Eq3)] [p4:pf (@ (rel T4 T4) form (symmetric T4) Eq4)] symmetric_i (tuple4 T1 T2 T3 T4) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) ([x3:tm (tuple4 T1 T2 T3 T4)] [y:tm (tuple4 T1 T2 T3 T4)] [p5:pf (@ (tuple4 T1 T2 T3 T4) form (@ (tuple4 T1 T2 T3 T4) (shadowed_0 (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) x3) y)] eq_tuple4_i T1 Eq1 T2 T3 T4 y x3 Eq2 Eq3 Eq4 (symmetric_e T1 Eq1 (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) y) p1 (eq_tuple4_e1 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5)) (symmetric_e T2 Eq2 (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) y) p2 (eq_tuple4_e2 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5)) (symmetric_e T3 Eq3 (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) y) p3 (eq_tuple4_e3 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5)) (symmetric_e T4 Eq4 (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) y) p4 (eq_tuple4_e4 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5))).
eq_tuple4_transitive : {T1:tp} {Eq1:tm (rel T1 T1)} {T2:tp} {Eq2:tm (rel T2 T2)} {T3:tp} {Eq3:tm (rel T3 T3)} {T4:tp} {Eq4:tm (rel T4 T4)} pf (@ (rel T1 T1) form (transitive T1) Eq1) -> pf (@ (rel T2 T2) form (transitive T2) Eq2) -> pf (@ (rel T3 T3) form (transitive T3) Eq3) -> pf (@ (rel T4 T4) form (transitive T4) Eq4) -> pf (@ (rel (tuple4 T1 T2 T3 T4) (tuple4 T1 T2 T3 T4)) form (transitive (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4)) = [T1:tp] [Eq1:tm (rel T1 T1)] [T2:tp] [Eq2:tm (rel T2 T2)] [T3:tp] [Eq3:tm (rel T3 T3)] [T4:tp] [Eq4:tm (rel T4 T4)] [p1:pf (@ (rel T1 T1) form (transitive T1) Eq1)] [p2:pf (@ (rel T2 T2) form (transitive T2) Eq2)] [p3:pf (@ (rel T3 T3) form (transitive T3) Eq3)] [p4:pf (@ (rel T4 T4) form (transitive T4) Eq4)] transitive_i (tuple4 T1 T2 T3 T4) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) ([x3:tm (tuple4 T1 T2 T3 T4)] [y:tm (tuple4 T1 T2 T3 T4)] [z1:tm (tuple4 T1 T2 T3 T4)] [p5:pf (@ (tuple4 T1 T2 T3 T4) form (@ (tuple4 T1 T2 T3 T4) (shadowed_0 (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) x3) y)] [p6:pf (@ (tuple4 T1 T2 T3 T4) form (@ (tuple4 T1 T2 T3 T4) (shadowed_0 (tuple4 T1 T2 T3 T4)) (@ (eqrel T4) (eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T3) (eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T2) (eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (@ (eqrel T1) (eqrel T2 arrow eqrel T3 arrow eqrel T4 arrow eqrel (tuple4 T1 T2 T3 T4)) (eq_tuple4 T1 T2 T3 T4) Eq1) Eq2) Eq3) Eq4) y) z1)] eq_tuple4_i T1 Eq1 T2 T3 T4 x3 z1 Eq2 Eq3 Eq4 (transitive_e T1 Eq1 (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) y) (@ (tuple4 T1 T2 T3 T4) T1 (get1of4 T1 T2 T3 T4) z1) p1 (eq_tuple4_e1 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5) (eq_tuple4_e1 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 y z1 p6)) (transitive_e T2 Eq2 (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) y) (@ (tuple4 T1 T2 T3 T4) T2 (get2of4 T1 T2 T3 T4) z1) p2 (eq_tuple4_e2 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5) (eq_tuple4_e2 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 y z1 p6)) (transitive_e T3 Eq3 (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) y) (@ (tuple4 T1 T2 T3 T4) T3 (get3of4 T1 T2 T3 T4) z1) p3 (eq_tuple4_e3 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5) (eq_tuple4_e3 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 y z1 p6)) (transitive_e T4 Eq4 (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) x3) (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) y) (@ (tuple4 T1 T2 T3 T4) T4 (get4of4 T1 T2 T3 T4) z1) p4 (eq_tuple4_e4 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 x3 y p5) (eq_tuple4_e4 T1 T2 T3 T4 Eq1 Eq2 Eq3 Eq4 y z1 p6))).
valideqv_eq_tuple4 : {X1:tp} {Ha:tm (eqrel X1)} {X2:tp} {Hb:tm (eqrel X2)} {X3:tp} {Hc:tm (eqrel X3)} {X4:tp} {Hd:tm (eqrel X4)} pf (@ (eqrel X1) form (valideqv X1) Ha) -> pf (@ (eqrel X2) form (valideqv X2) Hb) -> pf (@ (eqrel X3) form (valideqv X3) Hc) -> pf (@ (eqrel X4) form (valideqv X4) Hd) -> pf (@ (eqrel (tuple4 X1 X2 X3 X4)) form (valideqv (tuple4 X1 X2 X3 X4)) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd)) = [X1:tp] [Ha:tm (eqrel X1)] [X2:tp] [Hb:tm (eqrel X2)] [X3:tp] [Hc:tm (eqrel X3)] [X4:tp] [Hd:tm (eqrel X4)] [p1:pf (@ (eqrel X1) form (valideqv X1) Ha)] [p2:pf (@ (eqrel X2) form (valideqv X2) Hb)] [p3:pf (@ (eqrel X3) form (valideqv X3) Hc)] [p4:pf (@ (eqrel X4) form (valideqv X4) Hd)] valideqv_i (tuple4 X1 X2 X3 X4) (@ (eqrel X4) (eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X3) (eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X2) (eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (@ (eqrel X1) (eqrel X2 arrow eqrel X3 arrow eqrel X4 arrow eqrel (tuple4 X1 X2 X3 X4)) (eq_tuple4 X1 X2 X3 X4) Ha) Hb) Hc) Hd) (eq_tuple4_reflexive X1 Ha X2 Hb X3 Hc X4 Hd (valideqv_e1 X1 Ha p1) (valideqv_e1 X2 Hb p2) (valideqv_e1 X3 Hc p3) (valideqv_e1 X4 Hd p4)) (eq_tuple4_symmetric X1 Ha X2 Hb X3 Hc X4 Hd (valideqv_e2 X1 Ha p1) (valideqv_e2 X2 Hb p2) (valideqv_e2 X3 Hc p3) (valideqv_e2 X4 Hd p4)) (eq_tuple4_transitive X1 Ha X2 Hb X3 Hc X4 Hd (valideqv_e3 X1 Ha p1) (valideqv_e3 X2 Hb p2) (valideqv_e3 X3 Hc p3) (valideqv_e3 X4 Hd p4)).
parfun : {A:tp} {B:tp} tm (rel A B) -> tm form = [A:tp] [B:tp] [P:tm (rel A B)] forall3 A B B ([m:tm A] [n:tm B] [n':tm B] @ B form (@ A (shadowed_0 B) P m) n imp @ B form (@ A (shadowed_0 B) P m) n' imp eq B n n').
parfun2 : {A:tp} {B:tp} {C:tp} tm (rel3 A B C) -> tm form = [A:tp] [B:tp] [C:tp] [P:tm (rel3 A B C)] forall4 A B C C ([m1:tm A] [m2:tm B] [n:tm C] [n':tm C] @ C form (@ B (shadowed_0 C) (@ A (rel B C) P m1) m2) n imp @ C form (@ B (shadowed_0 C) (@ A (rel B C) P m1) m2) n' imp eq C n n').
parfun2_2 : {A:tp} {B:tp} {C:tp} {D:tp} tm (A arrow B arrow C arrow D arrow form) -> tm form = [A:tp] [B:tp] [C:tp] [D:tp] [P:tm (A arrow B arrow C arrow D arrow form)] forall6 A B C C D D ([m1:tm A] [m2:tm B] [n1:tm C] [n1':tm C] [n2:tm D] [n2':tm D] @ D form (@ C (D arrow form) (@ B (C arrow D arrow form) (@ A (B arrow C arrow D arrow form) P m1) m2) n1) n2 imp @ D form (@ C (D arrow form) (@ B (C arrow D arrow form) (@ A (B arrow C arrow D arrow form) P m1) m2) n1') n2' imp eq C n1 n1' and eq D n2 n2').
parfun3 : {A:tp} {B:tp} {C:tp} {D:tp} tm (A arrow B arrow C arrow D arrow form) -> tm form = [A:tp] [B:tp] [C:tp] [D:tp] [P:tm (A arrow B arrow C arrow D arrow form)] forall5 A B C D D ([m1:tm A] [m2:tm B] [m3:tm C] [n:tm D] [n':tm D] @ D form (@ C (D arrow form) (@ B (C arrow D arrow form) (@ A (B arrow C arrow D arrow form) P m1) m2) m3) n imp @ D form (@ C (D arrow form) (@ B (C arrow D arrow form) (@ A (B arrow C arrow D arrow form) P m1) m2) m3) n' imp eq D n n').
parfun_i : {X1:tp} {X2:tp} {P:tm (X1 arrow X2 arrow form)} ({m:tm X1} {n:tm X2} {n':tm X2} pf (@ X2 form (@ X1 (X2 arrow form) P m) n) -> pf (@ X2 form (@ X1 (X2 arrow form) P m) n') -> pf (eq X2 n n')) -> pf (parfun X1 X2 P) = [X1:tp] [X2:tp] [P:tm (X1 arrow X2 arrow form)] [x3:{m:tm X1} {n:tm X2} {n':tm X2} pf (@ X2 form (@ X1 (X2 arrow form) P m) n) -> pf (@ X2 form (@ X1 (X2 arrow form) P m) n') -> pf (eq X2 n n')] forall3_imp2_i X1 X2 X2 ([x4:tm X1] [x5:tm X2] [x6:tm X2] @ X2 form (@ X1 (X2 arrow form) P x4) x5) ([x4:tm X1] [x5:tm X2] [x6:tm X2] @ X2 form (@ X1 (X2 arrow form) P x4) x6) ([x4:tm X1] [x5:tm X2] [x6:tm X2] eq X2 x5 x6) ([m:tm X1] [n:tm X2] [n':tm X2] [x4:pf (@ X2 form (@ X1 (X2 arrow form) P m) n)] [x5:pf (@ X2 form (@ X1 (X2 arrow form) P m) n')] x3 m n n' x4 x5).
parfun_e : {X1:tp} {X2:tp} {F:tm (rel X1 X2)} {M:tm X1} {N:tm X2} {N':tm X2} pf (parfun X1 X2 F) -> pf (@ X2 form (@ X1 (shadowed_0 X2) F M) N) -> pf (@ X2 form (@ X1 (shadowed_0 X2) F M) N') -> pf (eq X2 N N') = [X1:tp] [X2:tp] [F:tm (rel X1 X2)] [M:tm X1] [N:tm X2] [N':tm X2] [p1:pf (parfun X1 X2 F)] [x3:pf (@ X2 form (@ X1 (shadowed_0 X2) F M) N)] [x4:pf (@ X2 form (@ X1 (shadowed_0 X2) F M) N')] imp2_e (@ X2 form (@ X1 (shadowed_0 X2) F M) N) (@ X2 form (@ X1 (shadowed_0 X2) F M) N') (eq X2 N N') (forall3_e X1 X2 X2 ([x5:tm X1] [x6:tm X2] [x7:tm X2] @ X2 form (@ X1 (shadowed_0 X2) F x5) x6 imp @ X2 form (@ X1 (shadowed_0 X2) F x5) x7 imp eq X2 x6 x7) p1 M N N') x3 x4.
parfun2_e : {X1:tp} {X2:tp} {X3:tp} {F:tm (rel3 X1 X2 X3)} {X:tm X1} {Y:tm X2} {Z1:tm X3} {Z2:tm X3} pf (parfun2 X1 X2 X3 F) -> pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F X) Y) Z1) -> pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F X) Y) Z2) -> pf (eq X3 Z1 Z2) = [X1:tp] [X2:tp] [X3:tp] [F:tm (rel3 X1 X2 X3)] [X:tm X1] [Y:tm X2] [Z1:tm X3] [Z2:tm X3] [p1:pf (parfun2 X1 X2 X3 F)] [p2:pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F X) Y) Z1)] [p3:pf (@ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F X) Y) Z2)] forall4_imp2_e X1 X2 X3 X3 ([x3:tm X1] [y:tm X2] [z1:tm X3] [u:tm X3] @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F x3) y) z1) ([x4:tm X1] [y:tm X2] [z2:tm X3] [u:tm X3] @ X3 form (@ X2 (shadowed_0 X3) (@ X1 (rel X2 X3) F x4) y) u) ([x5:tm X1] [y:tm X2] [z3:tm X3] [u:tm X3] eq X3 z3 u) p1 X Y Z1 Z2 p2 p3.
ncomp : {T:tp} tm ((T arrow T) arrow num arrow T arrow T arrow form) = [T:tp] lam4 (T arrow T) num T T form ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] _ncomp T x3 x4 x5 x6).
n_iter : {T:tp} tm ((T arrow T) arrow T arrow sequence T) = [T:tp] lam2 (T arrow T) T (num arrow T arrow form) ([F:tm (T arrow T)] [X0:tm T] lam2 num T form ([I:tm num] [Y:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) I) X0) Y)).
ncomp_zero : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) X) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F zero X X (forall_i ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) zero) Z) Z) imp forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N') Z1) (@ X1 X1 F Z2)) imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) zero) X) X) ([NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] imp2_i (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z)) (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2))) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) X) X) ([P1:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z))] [P2:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2)))] forall_e X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) x3) x3) P1 X))).
ncomp_succ : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (isNat N) -> pf (gt N zero) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (pred N)) X) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) (@ X1 X1 F Y)) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [P0:pf (isNat N)] [P1:pf (gt N zero)] [P2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (pred N)) X) Y)] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F N X (@ X1 X1 F Y) (forall_i ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) zero) Z) Z) imp forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N') Z1) (@ X1 X1 F Z2)) imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N) X) (@ X1 X1 F Y)) ([NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] imp2_i (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z)) (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2))) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N) X) (@ X1 X1 F Y)) ([Q1a:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z))] [Q1b:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2)))] imp3_e (isNat N) (gt N zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N)) X) Y) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N) X) (@ X1 X1 F Y)) (forall3_e num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) x3) x4) (@ X1 X1 F x5)) Q1b N X Y) P0 P1 (imp2_e (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form NC F zero Z Z)) (_forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form NC F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form NC F N' Z1 (_@ X1 X1 F Z2))) (_@4 (X1 arrow X1) num X1 X1 form NC F (pred N) X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N) X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F (pred N) X Y P2) NC) Q1a Q1b)))).
ncomp_succ' : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (isNat N) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (succ N)) X) (@ X1 X1 F Y)) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [P0:pf (isNat N)] [P2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y)] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F (succ N) X (@ X1 X1 F Y) (forall_i ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) zero) Z) Z) imp forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N') Z1) (@ X1 X1 F Z2)) imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) (succ N)) X) (@ X1 X1 F Y)) ([NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] imp2_i (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z)) (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2))) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (succ N)) X) (@ X1 X1 F Y)) ([Q1a:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z))] [Q1b:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2)))] imp3_e (isNat (succ N)) (gt (succ N) zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (succ N))) X) Y) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (succ N)) X) (@ X1 X1 F Y)) (forall3_e num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) x3) x4) (@ X1 X1 F x5)) Q1b (succ N) X Y) (isNat_succ_i N P0) (trans_gt_geq (succ N) N zero (succ_greater N) (isNat->geq_zero N P0)) (congr num (pred (succ N)) N ([z1:tm num] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) z1) X) Y) (predsucc N) (imp2_e (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form NC F zero Z Z)) (_forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form NC F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form NC F N' Z1 (_@ X1 X1 F Z2))) (_@4 (X1 arrow X1) num X1 X1 form NC F N X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F N X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F N X Y P2) NC) Q1a Q1b))))).
ncomp_zero_pred : {T:tp} tm ((T arrow T) arrow num arrow T arrow T arrow form) = [T:tp] lam4 (T arrow T) num T T form ([F:tm (T arrow T)] [N:tm num] [X:tm T] [Y:tm T] eq num N zero imp eq T X Y).
ncomp_zero_inv : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y imp eq X1 X Y) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] imp_i (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y) (eq X1 X Y) ([P1:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y)] cut (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form (ncomp_zero_pred X1) F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_zero_pred X1) F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_zero_pred X1) F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_zero_pred X1) F zero X Y) (eq X1 X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F zero X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F zero X Y P1) (ncomp_zero_pred X1)) ([P3:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) Z) Z) imp forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) N') Z1) (@ X1 X1 F Z2)) imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) X) Y)] cut (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) X) Y) (eq X1 X Y) (imp2_e (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) Z) Z)) (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) N') Z1) (@ X1 X1 F Z2))) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) X) Y) P3 (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] eq num x5 zero imp eq X1 x6 x7)) F) zero) x3) x3) ([Z:tm X1] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] eq num x4 zero imp eq X1 x5 x6) F zero Z Z (imp_i (eq num zero zero) (== X1 Z Z) ([Q:pf (eq num zero zero)] refl X1 Z)))) (forall3_i num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x6:tm (X1 arrow X1)] [x7:tm num] [x8:tm X1] [x9:tm X1] eq num x7 zero imp eq X1 x8 x9)) F) x3) x4) (@ X1 X1 F x5)) ([N':tm num] [Z1:tm X1] [Z2:tm X1] imp3_i (isNat N') (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) (pred N')) Z1) Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] eq num x4 zero imp eq X1 x5 x6)) F) N') Z1) (@ X1 X1 F Z2)) ([x3:pf (isNat N')] [P7:pf (gt N' zero)] [x4:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) (pred N')) Z1) Z2)] def4_i (X1 arrow X1) num X1 X1 ([x5:tm (X1 arrow X1)] [x6:tm num] [x7:tm X1] [x8:tm X1] eq num x6 zero imp eq X1 x7 x8) F N' Z1 (@ X1 X1 F Z2) (imp_i (eq num N' zero) (eq X1 Z1 (@ X1 X1 F Z2)) ([P8:pf (eq num N' zero)] false_e (eq X1 Z1 (@ X1 X1 F Z2)) (not_e (eq num N' zero) (gt->neq N' zero P7) P8))))))) ([P4:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_zero_pred X1) F) zero) X) Y)] imp_e (eq num zero zero) (eq X1 X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] eq num x4 zero imp eq X1 x5 x6) F zero X Y P4) (refl num zero)))).
ncomp_one_pred : {T:tp} tm ((T arrow T) arrow num arrow T arrow T arrow form) = [T:tp] lam4 (T arrow T) num T T form ([F:tm (T arrow T)] [N:tm num] [X:tm T] [Y:tm T] (eq num N one imp eq T (@ T T F X) Y) and (eq num N zero imp eq T X Y)).
ncomp_one_inv : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) one) X) Y imp eq X1 (@ X1 X1 F X) Y) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] imp_i (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) one) X) Y) (eq X1 (@ X1 X1 F X) Y) ([P1:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) one) X) Y)] cut (_@4 (X1 arrow X1) num X1 X1 form (ncomp_one_pred X1) F one X Y) (eq X1 (@ X1 X1 F X) Y) (imp2_e (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form (ncomp_one_pred X1) F zero Z Z)) (_forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_one_pred X1) F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_one_pred X1) F N' Z1 (_@ X1 X1 F Z2))) (_@4 (X1 arrow X1) num X1 X1 form (ncomp_one_pred X1) F one X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F one X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F one X Y P1) (ncomp_one_pred X1)) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (eq num x5 one imp eq X1 (@ X1 X1 x4 x6) x7) and (eq num x5 zero imp eq X1 x6 x7))) F) zero) x3) x3) ([Z:tm X1] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (eq num x4 one imp eq X1 (@ X1 X1 x3 x5) x6) and (eq num x4 zero imp eq X1 x5 x6)) F zero Z Z (and_i (eq num zero one imp eq X1 (@ X1 X1 F Z) Z) (eq num zero zero imp == X1 Z Z) (imp_i (eq num zero one) (eq X1 (@ X1 X1 F Z) Z) ([Q:pf (eq num zero one)] false_e (eq X1 (@ X1 X1 F Z) Z) (not_e (eqn one zero) one_neq_zero (symm num zero one Q)))) (imp_i (eq num zero zero) (== X1 Z Z) ([Q:pf (eq num zero zero)] refl X1 Z))))) (forall3_i num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_one_pred X1) F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x6:tm (X1 arrow X1)] [x7:tm num] [x8:tm X1] [x9:tm X1] (eq num x7 one imp eq X1 (@ X1 X1 x6 x8) x9) and (eq num x7 zero imp eq X1 x8 x9))) F) x3) x4) (_@ X1 X1 F x5)) ([N':tm num] [Z1:tm X1] [Z2:tm X1] imp3_i (isNat N') (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_one_pred X1) F) (pred N')) Z1) Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (eq num x4 one imp eq X1 (@ X1 X1 x3 x5) x6) and (eq num x4 zero imp eq X1 x5 x6))) F) N') Z1) (_@ X1 X1 F Z2)) ([x3:pf (isNat N')] [P6:pf (gt N' zero)] [P7:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_one_pred X1) F) (pred N')) Z1) Z2)] def4_i (X1 arrow X1) num X1 X1 ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (eq num x5 one imp eq X1 (@ X1 X1 x4 x6) x7) and (eq num x5 zero imp eq X1 x6 x7)) F N' Z1 (_@ X1 X1 F Z2) (and_i (eq num N' one imp eq X1 (@ X1 X1 F Z1) (@ X1 X1 F Z2)) (eq num N' zero imp eq X1 Z1 (_@ X1 X1 F Z2)) (cut (eq num (pred N') zero imp eq X1 Z1 Z2) (eq num N' one imp eq X1 (@ X1 X1 F Z1) (@ X1 X1 F Z2)) (and_e2 (eq num (pred N') one imp eq X1 (@ X1 X1 F Z1) Z2) (eq num (pred N') zero imp eq X1 Z1 Z2) (def4_e X1 X1 num (X1 arrow X1) ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (eq num x5 one imp eq X1 (@ X1 X1 x4 x6) x7) and (eq num x5 zero imp eq X1 x6 x7)) F (pred N') Z1 Z2 P7)) ([P9:pf (eq num (pred N') zero imp eq X1 Z1 Z2)] imp_i (eq num N' one) (eq X1 (@ X1 X1 F Z1) (@ X1 X1 F Z2)) ([P10:pf (eq num N' one)] cut (eq X1 Z1 Z2) (eq X1 (@ X1 X1 F Z1) (@ X1 X1 F Z2)) (imp_e (eq num (pred N') zero) (eq X1 Z1 Z2) P9 (trans num (+ N' (neg one)) (+ one (neg one)) zero (plus_cong N' one (neg one) (neg one) P10 (refl num (neg one))) (inv_add one))) ([P11:pf (eq X1 Z1 Z2)] congr X1 Z1 Z2 ([W:tm X1] eq X1 (@ X1 X1 F W) (@ X1 X1 F Z2)) P11 (refl X1 (@ X1 X1 F Z2)))))) (imp_i (eq num N' zero) (eq X1 Z1 (_@ X1 X1 F Z2)) ([P8:pf (eq num N' zero)] false_e (eq X1 Z1 (_@ X1 X1 F Z2)) (not_e (eq num N' zero) (gt->neq N' zero P6) P8)))))))) ([P4:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_one_pred X1) F) one) X) Y)] imp_e (eq num one one) (eq X1 (@ X1 X1 F X) Y) (and_e1 (eq num one one imp eq X1 (@ X1 X1 F X) Y) (eq num one zero imp eq X1 X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (eq num x4 one imp eq X1 (@ X1 X1 x3 x5) x6) and (eq num x4 zero imp eq X1 x5 x6)) F one X Y P4)) (refl num one))).
ncomp_gt_zero_inv_pred : {T:tp} tm ((T arrow T) arrow num arrow T arrow T arrow form) -> tm ((T arrow T) arrow num arrow T arrow T arrow form) = [T:tp] [NC:tm ((T arrow T) arrow num arrow T arrow T arrow form)] lam4 (T arrow T) num T T form ([F:tm (T arrow T)] [N:tm num] [X:tm T] [Y:tm T] (gt N zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) NC F) (pred N)) (@ T T F X)) Y) and (eq num N zero imp eq T X Y)).
ncomp_gt_zero_inv1 : {X1:tp} {F:tm (X1 arrow X1)} {N:tnum} {X:tm X1} {Y:tm X1} {NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y) -> pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z)) -> pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2))) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (plus N one)) X) Y) = [X1:tp] [F:tm (X1 arrow X1)] [N:tnum] [X:tm X1] [Y:tm X1] [NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] [P2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y)] [P5a:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z))] [P5b:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2)))] imp2_e (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form (ncomp_gt_zero_inv_pred X1 NC) F zero Z Z)) (_forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_gt_zero_inv_pred X1 NC) F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form (ncomp_gt_zero_inv_pred X1 NC) F N' Z1 (_@ X1 X1 F Z2))) (_@4 (X1 arrow X1) num X1 X1 form (ncomp_gt_zero_inv_pred X1 NC) F (plus N one) X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F (plus N one) X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F (plus N one) X Y P2) (ncomp_gt_zero_inv_pred X1 NC)) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (gt x5 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x4) (pred x5)) (@ X1 X1 x4 x6)) x7) and (eq num x5 zero imp eq X1 x6 x7))) F) zero) x3) x3) ([Z:tm X1] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6)) F zero Z Z (and_i (gt zero zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred zero)) (@ X1 X1 F Z)) Z) (eq num zero zero imp == X1 Z Z) (imp_i (gt zero zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred zero)) (@ X1 X1 F Z)) Z) ([R1:pf (gt zero zero)] false_e (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred zero)) (@ X1 X1 F Z)) Z) (not_e (eq num zero zero) (gt->neq zero zero R1) (refl num zero)))) (imp_i (eq num zero zero) (== X1 Z Z) ([R1:pf (eq num zero zero)] refl X1 Z))))) (forall3_i num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x6:tm (X1 arrow X1)] [x7:tm num] [x8:tm X1] [x9:tm X1] (gt x7 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x6) (pred x7)) (@ X1 X1 x6 x8)) x9) and (eq num x7 zero imp eq X1 x8 x9))) F) x3) x4) (_@ X1 X1 F x5)) ([N':tm num] [Z1:tm X1] [Z2:tm X1] or_e (== num N' one) (!= num N' one) (isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6))) F) N') Z1) (_@ X1 X1 F Z2)) (num_eq_excluded_middle N' one) ([Q3:pf (eq num N' one)] imp3_i (isNat N') (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred N')) Z1) Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6))) F) N') Z1) (_@ X1 X1 F Z2)) ([x3:pf (isNat N')] [Q4a:pf (gt N' zero)] [Q4b:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred N')) Z1) Z2)] cut (== num (+ N' (neg one)) zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (gt x5 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x4) (pred x5)) (@ X1 X1 x4 x6)) x7) and (eq num x5 zero imp eq X1 x6 x7))) F) N') Z1) (_@ X1 X1 F Z2)) (trans num (+ N' (neg one)) (+ one (neg one)) zero (minus_cong N' one one one Q3 (refl num one)) (inv_add one)) ([R3:pf (eq num (pred N') zero)] cut (eq X1 Z1 Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (gt x5 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x4) (pred x5)) (@ X1 X1 x4 x6)) x7) and (eq num x5 zero imp eq X1 x6 x7))) F) N') Z1) (_@ X1 X1 F Z2)) (imp_e (eq num (pred N') zero) (eq X1 Z1 Z2) (and_e2 (gt (pred N') zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2) (eq num (pred N') zero imp eq X1 Z1 Z2) (def4_e X1 X1 num (X1 arrow X1) ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (gt x5 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x4) (pred x5)) (@ X1 X1 x4 x6)) x7) and (eq num x5 zero imp eq X1 x6 x7)) F (pred N') Z1 Z2 Q4b)) R3) ([Q6:pf (eq X1 Z1 Z2)] def4_i (X1 arrow X1) num X1 X1 ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] (gt x5 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x4) (pred x5)) (@ X1 X1 x4 x6)) x7) and (eq num x5 zero imp eq X1 x6 x7)) F N' Z1 (_@ X1 X1 F Z2) (and_i (gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (eq num N' zero imp eq X1 Z1 (_@ X1 X1 F Z2)) (imp_i (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) ([x4:pf (gt N' zero)] cut (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) (@ X1 X1 F Z2)) (@ X1 X1 F Z2)) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (forall_e X1 ([x5:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) x5) x5) P5a (@ X1 X1 F Z2)) ([Q7:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) (@ X1 X1 F Z2)) (@ X1 X1 F Z2))] congr X1 Z1 Z2 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z)) (@ X1 X1 F Z2)) Q6 (congr num (pred N') zero ([Z:tm num] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) Z) (@ X1 X1 F Z2)) (@ X1 X1 F Z2)) R3 Q7)))) (imp_i (eq num N' zero) (eq X1 Z1 (_@ X1 X1 F Z2)) ([Q7:pf (eq num N' zero)] false_e (eq X1 Z1 (_@ X1 X1 F Z2)) (not_e (eqn one zero) one_neq_zero (trans num one N' zero (symm num N' one Q3) Q7))))))))) ([Q3:pf (not (eq num N' one))] imp3_i (isNat N') (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred N')) Z1) Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6))) F) N') Z1) (_@ X1 X1 F Z2)) ([Q4c:pf (isNat N')] [Q4a:pf (gt N' zero)] [Q4b:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp_gt_zero_inv_pred X1 NC) F) (pred N')) Z1) Z2)] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6)) F N' Z1 (_@ X1 X1 F Z2) (and_i (gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (eq num N' zero imp eq X1 Z1 (_@ X1 X1 F Z2)) (imp_i (gt N' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) ([Q6:pf (gt N' zero)] cut (isNat (pred N') imp gt (pred N') zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (forall3_e num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) x3) x4) (@ X1 X1 F x5)) P5b (pred N') (@ X1 X1 F Z1) Z2) ([Q7:pf (isNat (pred N') imp gt (pred N') zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2))] cut (gt (pred N') zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) (or_e (== num (pred N') zero) (> (pred N') zero) (gt (pred N') zero) (greater_or_eq (pred N') zero (lesseq_minus1_i zero N' p_zero (and_e1 (isInt N') (geq N' zero) Q4c) Q4a)) ([Q8:pf (eq num (pred N') zero)] false_e (gt (pred N') zero) (not_e (eq num N' one) Q3 (plus_eq1 N' (neg one) one (trans num (pred N') zero (plus one (neg one)) Q8 (symm num (plus one (neg one)) zero (inv_add one)))))) ([Q8:pf (gt (pred N') zero)] Q8)) ([R6:pf (gt (pred N') zero)] imp3_e (isNat (pred N')) (gt (pred N') zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) (@ X1 X1 F Z1)) (@ X1 X1 F Z2)) Q7 (and_i (isInt (pred N')) (>= (pred N') zero) (isInt_pred_i N' (and_e1 (isInt N') (geq N' zero) Q4c)) (gt->geq (pred N') zero R6)) R6 (imp_e (gt (pred N') zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2) (and_e1 (gt (pred N') zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (pred N'))) (@ X1 X1 F Z1)) Z2) (eq num (pred N') zero imp eq X1 Z1 Z2) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6)) F (pred N') Z1 Z2 Q4b)) R6))))) (imp_i (eq num N' zero) (eq X1 Z1 (_@ X1 X1 F Z2)) ([R5:pf (eq num N' zero)] false_e (eq X1 Z1 (_@ X1 X1 F Z2)) (not_e (eq num N' zero) (gt->neq N' zero Q4a) R5)))))))).
ncomp_gt_zero_inv : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (gt N zero) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) (@ X1 X1 F X)) Y) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [P1:pf (gt N zero)] [P2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y)] strictify num (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6)) F) N) (@ X1 X1 F X)) Y) N (strictify (X1 arrow X1) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6)) F) N) (@ X1 X1 F X)) Y) F (strictify X1 (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6)) F) N) (@ X1 X1 F X)) Y) X (strictify X1 (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6)) F) N) (@ X1 X1 F X)) Y) Y (def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F N (@ X1 X1 F X) Y (forall_i ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) zero) Z) Z) imp forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N') Z1) (@ X1 X1 F Z2)) imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) x3 F) N) (@ X1 X1 F X)) Y) ([NC:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] imp2_i (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z)) (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2))) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N) (@ X1 X1 F X)) Y) ([P5a:pf (forall X1 ([Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) zero) Z) Z))] [P5b:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N') Z1) (@ X1 X1 F Z2)))] cut (gt (plus N one) zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (plus N one))) (@ X1 X1 F X)) Y) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) N) (@ X1 X1 F X)) Y) (and_e1 (gt (plus N one) zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (pred (plus N one))) (@ X1 X1 F X)) Y) (eq num (plus N one) zero imp eq X1 X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] (gt x4 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC x3) (pred x4)) (@ X1 X1 x3 x5)) x6) and (eq num x4 zero imp eq X1 x5 x6)) F (plus N one) X Y (ncomp_gt_zero_inv1 X1 F N X Y NC P2 P5a P5b))) ([P7:pf (gt (succ N) zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (minus (plus N one) one)) (@ X1 X1 F X)) Y)] congr num N (plus (plus N one) (neg one)) ([Z:tm num] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) Z) (@ X1 X1 F X)) Y) (trans num N (+ N (plus one (neg one))) (plus (plus N one) (neg one)) (trans num N (+ N zero) (+ N (plus one (neg one))) (symm num (+ N zero) N (plus_zero N)) (plus_cong N N zero (plus one (neg one)) (refl num N) (symm num (plus one (neg one)) zero (inv_add one)))) (symm num (plus (plus N one) (neg one)) (plus N (plus one (neg one))) (assoc_add N one (neg one)))) (imp_e (gt (succ N) zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) NC F) (minus (plus N one) one)) (@ X1 X1 F X)) Y) P7 (trans_gt (succ N) N zero (succ_greater N) P1)))))))))).
ncomp_succ_inv : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (geq N zero) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) (@ X1 X1 F X)) Y) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [P1:pf (geq N zero)] [P2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (plus N one)) X) Y)] cut (== num N zero or > N zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) (@ X1 X1 F X)) Y) (greater_or_eq N zero P1) ([P3:pf (eq num N zero or gt N zero)] or_e (eq num N zero) (gt N zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) (@ X1 X1 F X)) Y) P3 ([P4:pf (eq num N zero)] cut (eq X1 (@ X1 X1 F X) Y) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) (@ X1 X1 F X)) Y) (imp_e (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) one) X) Y) (eq X1 (@ X1 X1 F X) Y) (ncomp_one_inv X1 F X Y) (congr num one (+ N one) ([W:tm num] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) W) X) Y) (trans num one (plus zero one) (+ N one) (trans num one (+ one zero) (plus zero one) (symm num (+ one zero) one (plus_zero one)) (comm_add one zero)) (plus_cong zero N one one (symm num N zero P4) (refl num one))) P2)) ([P5:pf (eq X1 (@ X1 X1 F X) Y)] congr X1 (@ X1 X1 F X) Y ([W:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) W) Y) P5 (congr num N zero ([W:tm num] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) W) Y) Y) P4 (ncomp_zero X1 F Y)))) ([P4:pf (gt N zero)] ncomp_gt_zero_inv N X1 F X Y P4 P2)).
ncomp_gt_zero_inv2_pred : {X1:tp} tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) = [X1:tp] lam4 (X1 arrow X1) num X1 X1 form ([f:tm (X1 arrow X1)] [n:tm num] [x3:tm X1] [y:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) f) n) x3) y and (gt n zero imp exists X1 ([y':tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) f) (pred n)) x3) y' and eq X1 y (@ X1 X1 f y')))).
ncomp_gt_zero_inv2 : {N:tnum} {T:tp} {F:tm (T arrow T)} {X:tm T} {Y:tm T} pf (gt N zero) -> pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Y) -> pf (exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred N)) X) y' and eq T Y (@ T T F y'))) = [N:tnum] [T:tp] [F:tm (T arrow T)] [X:tm T] [Y:tm T] [p1:pf (gt N zero)] [p2:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Y)] cut (_@4 (T arrow T) num T T form (ncomp_gt_zero_inv2_pred T) F N X Y) (exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred N)) X) y' and eq T Y (@ T T F y'))) (imp2_e (_forall T ([Z:tm T] _@4 (T arrow T) num T T form (ncomp_gt_zero_inv2_pred T) F zero Z Z)) (_forall3 num T T ([N':tm num] [Z1:tm T] [Z2:tm T] isNat N' imp gt N' zero imp _@4 (T arrow T) num T T form (ncomp_gt_zero_inv2_pred T) F (pred N') Z1 Z2 imp _@4 (T arrow T) num T T form (ncomp_gt_zero_inv2_pred T) F N' Z1 (_@ T T F Z2))) (_@4 (T arrow T) num T T form (ncomp_gt_zero_inv2_pred T) F N X Y) (forall_e ((T arrow T) arrow num arrow T arrow T arrow form) ([x3:tm ((T arrow T) arrow num arrow T arrow T arrow form)] _forall T ([Z:tm T] _@4 (T arrow T) num T T form x3 F zero Z Z) imp _forall3 num T T ([N':tm num] [Z1:tm T] [Z2:tm T] isNat N' imp gt N' zero imp _@4 (T arrow T) num T T form x3 F (pred N') Z1 Z2 imp _@4 (T arrow T) num T T form x3 F N' Z1 (_@ T T F Z2)) imp _@4 (T arrow T) num T T form x3 F N X Y) (def4_e T T num (T arrow T) ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] _ncomp T x3 x4 x5 x6) F N X Y p2) (ncomp_gt_zero_inv2_pred T)) (forall_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (lam4 (T arrow T) num T T form ([x4:tm (T arrow T)] [x5:tm num] [x6:tm T] [x7:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x4) x5) x6) x7 and (gt x5 zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x4) (pred x5)) x6) y' and eq T x7 (@ T T x4 y'))))) F) zero) x3) x3) ([z1:tm T] def4_i (T arrow T) num T T ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y' and eq T x6 (@ T T x3 y')))) F zero z1 z1 (and_i (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) z1) z1) (gt zero zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred zero)) z1) y' and eq T z1 (@ T T F y'))) (ncomp_zero T F z1) (imp_i (gt zero zero) (exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred zero)) z1) y' and eq T z1 (@ T T F y'))) ([p3:pf (gt zero zero)] false_e (exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred zero)) z1) y' and eq T z1 (@ T T F y'))) (not_e (geq zero zero) p3 (ord_reflexivity zero))))))) (forall3_i num T T ([x3:tm num] [x4:tm T] [x5:tm T] isNat x3 imp gt x3 zero imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp_gt_zero_inv2_pred T) F) (pred x3)) x4) x5 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (lam4 (T arrow T) num T T form ([x6:tm (T arrow T)] [x7:tm num] [x8:tm T] [x9:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x6) x7) x8) x9 and (gt x7 zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x6) (pred x7)) x8) y' and eq T x9 (@ T T x6 y'))))) F) x3) x4) (_@ T T F x5)) ([n':tm num] [x':tm T] [y':tm T] imp3_i (isNat n') (gt n' zero) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp_gt_zero_inv2_pred T) F) (pred n')) x') y') (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (lam4 (T arrow T) num T T form ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y'1:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y'1 and eq T x6 (@ T T x3 y'1))))) F) n') x') (_@ T T F y')) ([p3:pf (isNat n')] [p4:pf (gt n' zero)] [p5:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp_gt_zero_inv2_pred T) F) (pred n')) x') y')] def4_i (T arrow T) num T T ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y'2:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y'2 and eq T x6 (@ T T x3 y'2)))) F n' x' (_@ T T F y') (and_i (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) n') x') (@ T T F y')) (gt n' zero imp exists T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') x3 and eq T (_@ T T F y') (@ T T F x3))) (ncomp_succ n' T F x' y' p3 p4 (and_e1 (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') y') (gt (pred n') zero imp exists T ([y'3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred (pred n'))) x') y'3 and eq T y' (@ T T F y'3))) (def4_e T T num (T arrow T) ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y'4:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y'4 and eq T x6 (@ T T x3 y'4)))) F (pred n') x' y' p5))) (imp_i (gt n' zero) (exists T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') x3 and eq T (_@ T T F y') (@ T T F x3))) ([p6:pf (gt n' zero)] exists_i T ([x3:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') x3 and eq T (_@ T T F y') (@ T T F x3)) y' (and_i (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') y') (== T (_@ T T F y') (_@ T T F y')) (and_e1 (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred n')) x') y') (gt (pred n') zero imp exists T ([y'5:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred (pred n'))) x') y'5 and eq T y' (@ T T F y'5))) (def4_e T T num (T arrow T) ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y'6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y'6 and eq T x6 (@ T T x3 y'6)))) F (pred n') x' y' p5)) (refl T (_@ T T F y')))))))))) ([p3:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp_gt_zero_inv2_pred T) F) N) X) Y)] imp_e (gt N zero) (exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred N)) X) y' and eq T Y (@ T T F y'))) (and_e2 (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Y) (gt N zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (pred N)) X) y' and eq T Y (@ T T F y'))) (def4_e T T num (T arrow T) ([x3:tm (T arrow T)] [x4:tm num] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) x4) x5) x6 and (gt x4 zero imp exists T ([y':tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (pred x4)) x5) y' and eq T x6 (@ T T x3 y')))) F N X Y p3)) p1).
ncomp_unique_step : tp -> tm num -> tform = [T:tp] [N:tm num] forall4 (T arrow T) T T T ([F:tm (T arrow T)] [X:tm T] [Y:tm T] [Z:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Y imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Z imp eq T Y Z).
ncomp_unique_zero : {T:tp} pf (ncomp_unique_step T zero) = [T:tp] forall4_i (T arrow T) T T T ([x3:tm (T arrow T)] [x4:tm T] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) zero) x4) x5 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) zero) x4) x6 imp == T x5 x6) ([F:tm (T arrow T)] [X:tm T] [Y:tm T] [Z:tm T] imp2_i (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Y) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Z) (== T Y Z) ([P2:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Y)] [P3:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Z)] cut (eq T X Y) (== T Y Z) (imp_e (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Y) (eq T X Y) (ncomp_zero_inv T F X Y) P2) ([P4:pf (eq T X Y)] cut (eq T X Z) (== T Y Z) (imp_e (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) zero) X) Z) (eq T X Z) (ncomp_zero_inv T F X Z) P3) ([P5:pf (eq T X Z)] trans T Y X Z (symm T X Y P4) P5)))).
ncomp_unique_incr : {T:tp} {N:tnum} pf (isNat N) -> pf (ncomp_unique_step T N) -> pf (ncomp_unique_step T (succ N)) = [T:tp] [N:tnum] [Q:pf (isNat N)] [P1:pf (ncomp_unique_step T N)] forall4_i (T arrow T) T T T ([x3:tm (T arrow T)] [x4:tm T] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (succ N)) x4) x5 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) (succ N)) x4) x6 imp eq T x5 x6) ([F:tm (T arrow T)] [X:tm T] [Y:tm T] [Z:tm T] imp2_i (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (succ N)) X) Y) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (succ N)) X) Z) (eq T Y Z) ([P2:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (succ N)) X) Y)] [P3:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) (succ N)) X) Z)] cut (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Y) (eq T Y Z) (ncomp_succ_inv N T F X Y (isNat->geq_zero N Q) P2) ([P4:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Y)] cut (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Z) (eq T Y Z) (ncomp_succ_inv N T F X Z (isNat->geq_zero N Q) P3) ([P5:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Z)] imp2_e (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Y) (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) (@ T T F X)) Z) (eq T Y Z) (forall4_e (T arrow T) T T T ([x3:tm (T arrow T)] [x4:tm T] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) N) x4) x5 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x3) N) x4) x6 imp eq T x5 x6) P1 F (@ T T F X) Y Z) P4 P5)))).
ncomp_unique : {T:tp} pf (forall num ([N:tm num] isNat N imp forall4 (T arrow T) T T T ([F:tm (T arrow T)] [X:tm T] [Y:tm T] [Z:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Y imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) F) N) X) Z imp eq T Y Z))) = [T:tp] induction ([x3:tnum] ncomp_unique_step T x3) (ncomp_unique_zero T) ([n:tnum] [x3:pf (isNat n)] [x4:pf (ncomp_unique_step T n)] ncomp_unique_incr T n x3 x4).
ncomp_unique' : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} {Z:tm X1} pf (isNat N) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Z) -> pf (eq X1 Y Z) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [Z:tm X1] [p1:pf (isNat N)] [x3:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y)] [x4:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Z)] imp2_e (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Z) (eq X1 Y Z) (forall4_e (X1 arrow X1) X1 X1 X1 ([x5:tm (X1 arrow X1)] [x6:tm X1] [x7:tm X1] [x8:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x5) N) x6) x7 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x5) N) x6) x8 imp eq X1 x7 x8) (imp_e (isNat N) (forall4 (X1 arrow X1) X1 X1 X1 ([F1:tm (X1 arrow X1)] [X2:tm X1] [Y1:tm X1] [Z1:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F1) N) X2) Y1 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F1) N) X2) Z1 imp eq X1 Y1 Z1)) (forall_e num ([x5:tm num] isNat x5 imp forall4 (X1 arrow X1) X1 X1 X1 ([F2:tm (X1 arrow X1)] [X3:tm X1] [Y2:tm X1] [Z2:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F2) x5) X3) Y2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F2) x5) X3) Z2 imp eq X1 Y2 Z2)) (ncomp_unique X1) N) p1) F X Y Z) x3 x4.
ncomp_zero' : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y) -> pf (eq X1 X Y) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y)] cut (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) X imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y imp eq X1 X Y) (eq X1 X Y) (forall4_e (X1 arrow X1) X1 X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm X1] [x5:tm X1] [x6:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) zero) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) zero) x4) x6 imp eq X1 x5 x6) (imp_e (isNat zero) (forall4 (X1 arrow X1) X1 X1 X1 ([F1:tm (X1 arrow X1)] [X2:tm X1] [Y1:tm X1] [Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F1) zero) X2) Y1 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F1) zero) X2) Z imp eq X1 Y1 Z)) (forall_e num ([x3:tm num] isNat x3 imp forall4 (X1 arrow X1) X1 X1 X1 ([F2:tm (X1 arrow X1)] [X3:tm X1] [Y2:tm X1] [Z:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F2) x3) X3) Y2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F2) x3) X3) Z imp eq X1 Y2 Z)) (ncomp_unique X1) zero) n_zero) F X X Y) ([p2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) X imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y imp eq X1 X Y)] imp2_e (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) X) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) X) Y) (eq X1 X Y) p2 (ncomp_zero X1 F X) p1).
ncompnat : {X1:tp} tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) = [X1:tp] lam4 (X1 arrow X1) num X1 X1 form ([f:tm (X1 arrow X1)] [n:tm num] [x3:tm X1] [y:tm X1] isNat n and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) f) n) x3) y).
ncomp_isNat : {X1:tp} {F:tm (X1 arrow X1)} {N:tm num} {X:tm X1} {Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) -> pf (isNat N) = [X1:tp] [F:tm (X1 arrow X1)] [N:tm num] [X:tm X1] [Y:tm X1] [p1:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y)] cut (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] isNat x5 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x4) x5) x6) x7)) F) zero) x3) x3)) (isNat N) (forall_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x4:tm (X1 arrow X1)] [x5:tm num] [x6:tm X1] [x7:tm X1] isNat x5 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x4) x5) x6) x7)) F) zero) x3) x3) ([z1:tm X1] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6) F zero z1 z1 (and_i (isNat zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) zero) z1) z1) n_zero (ncomp_zero X1 F z1)))) ([p4:pf (forall X1 ([z2:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) zero) z2) z2))] cut (forall3 num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x6:tm (X1 arrow X1)] [x7:tm num] [x8:tm X1] [x9:tm X1] isNat x7 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x6) x7) x8) x9)) F) x3) x4) (@ X1 X1 F x5))) (isNat N) (forall3_i num X1 X1 ([x3:tm num] [x4:tm X1] [x5:tm X1] isNat x3 imp gt x3 zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) (pred x3)) x4) x5 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x6:tm (X1 arrow X1)] [x7:tm num] [x8:tm X1] [x9:tm X1] isNat x7 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x6) x7) x8) x9)) F) x3) x4) (@ X1 X1 F x5)) ([n':tm num] [z1:tm X1] [z2:tm X1] imp3_i (isNat n') (gt n' zero) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) (pred n')) z1) z2) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6)) F) n') z1) (@ X1 X1 F z2)) ([p5:pf (isNat n')] [p6:pf (gt n' zero)] [p7:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) (pred n')) z1) z2)] cut (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) n') z1) (@ X1 X1 F z2)) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (lam4 (X1 arrow X1) num X1 X1 form ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6)) F) n') z1) (@ X1 X1 F z2)) (ncomp_succ n' X1 F z1 z2 p5 p6 (and_e2 (isNat (pred n')) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (pred n')) z1) z2) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6) F (pred n') z1 z2 p7))) ([p8:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) n') z1) (@ X1 X1 F z2))] def4_i (X1 arrow X1) num X1 X1 ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6) F n' z1 (@ X1 X1 F z2) (and_i (isNat n') (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) n') z1) (@ X1 X1 F z2)) p5 p8))))) ([p9:pf (forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) (pred N')) Z1) Z2 imp @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) N') Z1) (@ X1 X1 F Z2)))] cut (_@4 (X1 arrow X1) num X1 X1 form (ncompnat X1) F N X Y) (isNat N) (imp2_e (_forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form (ncompnat X1) F zero Z Z)) (_forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form (ncompnat X1) F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form (ncompnat X1) F N' Z1 (_@ X1 X1 F Z2))) (_@4 (X1 arrow X1) num X1 X1 form (ncompnat X1) F N X Y) (forall_e ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form) ([x3:tm ((X1 arrow X1) arrow num arrow X1 arrow X1 arrow form)] _forall X1 ([Z:tm X1] _@4 (X1 arrow X1) num X1 X1 form x3 F zero Z Z) imp _forall3 num X1 X1 ([N':tm num] [Z1:tm X1] [Z2:tm X1] isNat N' imp gt N' zero imp _@4 (X1 arrow X1) num X1 X1 form x3 F (pred N') Z1 Z2 imp _@4 (X1 arrow X1) num X1 X1 form x3 F N' Z1 (_@ X1 X1 F Z2)) imp _@4 (X1 arrow X1) num X1 X1 form x3 F N X Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] _ncomp X1 x3 x4 x5 x6) F N X Y p1) (ncompnat X1)) p4 p9) ([p10:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncompnat X1) F) N) X) Y)] and_e1 (isNat N) (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) (def4_e X1 X1 num (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm num] [x5:tm X1] [x6:tm X1] isNat x4 and @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x4) x5) x6) F N X Y p10)))).
n_iter_zero : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) zero) X) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] def4_i (X1 arrow X1) X1 num X1 ([x3:tm (X1 arrow X1)] [x4:tm X1] [x5:tm num] [x6:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x5) x4) x6) F X zero X (ncomp_zero X1 F X).
n_iter_succ : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} pf (isNat N) -> pf (gt N zero) -> pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) (pred N)) Y) -> pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) (@ X1 X1 F Y)) = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [P0:pf (isNat N)] [P1:pf (gt N zero)] [P2:pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) (pred N)) Y)] def4_i (X1 arrow X1) X1 num X1 ([x3:tm (X1 arrow X1)] [x4:tm X1] [x5:tm num] [x6:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x5) x4) x6) F X N (@ X1 X1 F Y) (ncomp_succ N X1 F X Y P0 P1 (def4_e X1 num X1 (X1 arrow X1) ([x3:tm (X1 arrow X1)] [x4:tm X1] [x5:tm num] [x6:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x3) x5) x4) x6) F X (pred N) Y P2)).
n_iter_exists : {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} pf (forall num ([N:tm num] isNat N imp exists X1 ([Y:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) Y))) = [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] induction ([N:tnum] exists X1 ([Y:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) Y)) (exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) zero) x3) X (n_iter_zero X1 F X)) ([N:tnum] [P1:pf (isNat N)] [P2:pf (exists X1 ([Y:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) Y))] exists_e X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) x3) (exists X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) (plus N one)) x3)) P2 ([Y:tm X1] [P3:pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) Y)] exists_i X1 ([x3:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) (plus N one)) x3) (@ X1 X1 F Y) (n_iter_succ (succ N) X1 F X Y (isNat_succ_i N P1) (trans_gt_geq (succ N) N zero (succ_gt N) (and_e2 (isInt N) (geq N zero) P1)) (congr num (plus (plus N one) (neg one)) N ([W:tm num] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) W) Y) (trans num (plus (plus N one) (neg one)) (plus N (plus one (neg one))) N (symm num (plus N (plus one (neg one))) (plus (plus N one) (neg one)) (symm num (plus (plus N one) (neg one)) (plus N (plus one (neg one))) (assoc_add N one (neg one)))) (trans num (+ N (plus one (neg one))) (+ N zero) N (plus_cong N N (plus one (neg one)) zero (refl num N) (inv_add one)) (plus_zero N))) P3)))).
ncomp_exists_e : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {B:tform} pf (isNat N) -> ({Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) -> pf B) -> pf B = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [B:tform] [p1:pf (isNat N)] [p2:{Y:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) Y) -> pf B] cut (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) x3 imp B)) B (forall_imp_i X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) x3) ([x3:tm X1] B) ([x3:tm X1] [x4:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) x3)] p2 x3 x4)) ([x3:pf (forall X1 ([x3:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) x3 imp B))] exists_e X1 ([x4:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) x4) B (imp_e (isNat N) (exists X1 ([Y:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) Y)) (forall_e num ([x4:tm num] isNat x4 imp exists X1 ([Y:tm X1] @ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) x4) Y)) (n_iter_exists X1 F X) N) p1) ([y:tm X1] [p3:pf (@ X1 form (@ num (X1 arrow form) (@ X1 (sequence X1) (@ (X1 arrow X1) (X1 arrow sequence X1) (n_iter X1) F) X) N) y)] p2 y (def4_e X1 num X1 (X1 arrow X1) ([x4:tm (X1 arrow X1)] [x5:tm X1] [x6:tm num] [x7:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) x4) x6) x5) x7) F X N y p3))).
ncomp_succ_inv2 : {N:tnum} {X1:tp} {F:tm (X1 arrow X1)} {X:tm X1} {Y:tm X1} {B:tform} pf (geq N zero) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (succ N)) X) Y) -> ({w:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) w) -> pf (eq X1 (@ X1 X1 F w) Y) -> pf B) -> pf B = [N:tnum] [X1:tp] [F:tm (X1 arrow X1)] [X:tm X1] [Y:tm X1] [B:tform] [p1:pf (geq N zero)] [p2:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (succ N)) X) Y)] [p3:{w:tm X1} pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) w) -> pf (eq X1 (@ X1 X1 F w) Y) -> pf B] cut (isInt N and geq N zero) B (and_i (isInt N) (geq N zero) (isInt_succ_e N (isNat->isInt (succ N) (ncomp_isNat X1 F (succ N) X Y p2))) p1) ([p4:pf (isNat N)] ncomp_exists_e N X1 F X B p4 ([w:tm X1] [p5:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) X) w)] cut (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (succ N)) X) (@ X1 X1 F w)) B (ncomp_succ' N X1 F X w p4 p5) ([p6:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) (succ N)) X) (@ X1 X1 F w))] cut (eq X1 (@ X1 X1 F w) Y) B (ncomp_unique' (succ N) X1 F X (@ X1 X1 F w) Y (isNat_succ_i N p4) p6 p2) ([p7:pf (eq X1 (@ X1 X1 F w) Y)] p3 w p5 p7)))).
ncomp_closure_prop : {T:tp} tm num -> tm form = [T:tp] [n:tm num] forall4 (T arrow form) (T arrow T) T T ([s:tm (T arrow form)] [f:tm (T arrow T)] [z1:tm T] [fn:tm T] forall T ([x3:tm T] @ T form s x3 imp @ T form s (@ T T f x3)) imp @ T form s z1 imp @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) f) n) z1) fn imp @ T form s fn).
ncomp_closure_basis : {T:tp} pf (ncomp_closure_prop T zero) = [T:tp] forall4_imp3_i (T arrow form) (T arrow T) T T ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] forall T ([x7:tm T] @ T form x3 x7 imp @ T form x3 (@ T T x4 x7))) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form x3 x5) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x4) zero) x5) x6) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form x3 x6) ([s:tm (T arrow form)] [f:tm (T arrow T)] [z1:tm T] [f0:tm T] [x3:pf (forall T ([x8:tm T] @ T form s x8 imp @ T form s (@ T T f x8)))] [p1:pf (@ T form s z1)] [p2:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) f) zero) z1) f0)] congr T f0 z1 ([z2:tm T] @ T form s z2) (symm T z1 f0 (ncomp_zero' T f z1 f0 p2)) p1).
ncomp_closure_step : {T:tp} {n:tm num} pf (isNat n) -> pf (ncomp_closure_prop T n) -> pf (ncomp_closure_prop T (succ n)) = [T:tp] [n:tm num] [p1:pf (isNat n)] [p2:pf (ncomp_closure_prop T n)] forall4_imp3_i (T arrow form) (T arrow T) T T ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] forall T ([x7:tm T] @ T form x3 x7 imp @ T form x3 (@ T T x4 x7))) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form x3 x5) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) x4) (succ n)) x5) x6) ([x3:tm (T arrow form)] [x4:tm (T arrow T)] [x5:tm T] [x6:tm T] @ T form x3 x6) ([s:tm (T arrow form)] [f:tm (T arrow T)] [z1:tm T] [fn+1:tm T] [p3:pf (forall T ([x8:tm T] @ T form s x8 imp @ T form s (@ T T f x8)))] [p4:pf (@ T form s z1)] [p5:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) f) (succ n)) z1) fn+1)] ncomp_succ_inv2 n T f z1 fn+1 (@ T form s fn+1) (isNat->geq_zero n p1) p5 ([fn:tm T] [p6:pf (@ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) f) n) z1) fn)] [p7:pf (eq T (@ T T f fn) fn+1)] congr T fn+1 (@ T T f fn) ([z2:tm T] @ T form s z2) (symm T (@ T T f fn) fn+1 p7) (forall_imp_e T ([a:tm T] @ T form s a) ([a:tm T] @ T form s (@ T T f a)) p3 fn (forall4_imp3_e (T arrow form) (T arrow T) T T ([x9:tm (T arrow form)] [y:tm (T arrow T)] [z3:tm T] [u:tm T] forall T ([x10:tm T] @ T form x9 x10 imp @ T form x9 (@ T T y x10))) ([x11:tm (T arrow form)] [y:tm (T arrow T)] [z4:tm T] [u:tm T] @ T form x11 z4) ([x12:tm (T arrow form)] [y:tm (T arrow T)] [z5:tm T] [u:tm T] @ T form (@ T (T arrow form) (@ num (T arrow T arrow form) (@ (T arrow T) (num arrow T arrow T arrow form) (ncomp T) y) n) z5) u) ([x13:tm (T arrow form)] [y:tm (T arrow T)] [z6:tm T] [u:tm T] @ T form x13 u) p2 s f z1 fn p3 p4 p6)))).
ncomp_closure : {X1:tp} {S:tm (X1 arrow form)} {F:tm (X1 arrow X1)} {Z:tm X1} {N:tm num} {FN:tm X1} pf (forall X1 ([x3:tm X1] @ X1 form S x3 imp @ X1 form S (@ X1 X1 F x3))) -> pf (@ X1 form S Z) -> pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) Z) FN) -> pf (@ X1 form S FN) = [X1:tp] [S:tm (X1 arrow form)] [F:tm (X1 arrow X1)] [Z:tm X1] [N:tm num] [FN:tm X1] [p1:pf (forall X1 ([x4:tm X1] @ X1 form S x4 imp @ X1 form S (@ X1 X1 F x4)))] [p2:pf (@ X1 form S Z)] [p3:pf (@ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) F) N) Z) FN)] cut (_forall num ([n:tnum] isNat n imp ncomp_closure_prop X1 n)) (@ X1 form S FN) (induction ([x3:tnum] ncomp_closure_prop X1 x3) (ncomp_closure_basis X1) ([n:tnum] [x3:pf (isNat n)] [x4:pf (ncomp_closure_prop X1 n)] ncomp_closure_step X1 n x3 x4)) ([p4:pf (forall num ([n:tm num] isNat n imp ncomp_closure_prop X1 n))] forall4_imp3_e (X1 arrow form) (X1 arrow X1) X1 X1 ([x5:tm (X1 arrow form)] [y:tm (X1 arrow X1)] [z1:tm X1] [u:tm X1] forall X1 ([x6:tm X1] @ X1 form x5 x6 imp @ X1 form x5 (@ X1 X1 y x6))) ([x7:tm (X1 arrow form)] [y:tm (X1 arrow X1)] [z2:tm X1] [u:tm X1] @ X1 form x7 z2) ([x8:tm (X1 arrow form)] [y:tm (X1 arrow X1)] [z3:tm X1] [u:tm X1] @ X1 form (@ X1 (X1 arrow form) (@ num (X1 arrow X1 arrow form) (@ (X1 arrow X1) (num arrow X1 arrow X1 arrow form) (ncomp X1) y) N) z3) u) ([x9:tm (X1 arrow form)] [y:tm (X1 arrow X1)] [z4:tm X1] [u:tm X1] @ X1 form x9 u) (forall_imp_e num ([a:tm num] isNat a) ([a:tm num] ncomp_closure_prop X1 a) p4 N (ncomp_isNat X1 F N Z FN p3)) S F Z FN p1 p2 p3).
power2 : tm (num arrow num arrow form) = lam2 num num form ([a:tm num] [b:tm num] isNat a and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) a) one) b).
power' : tm num -> tm num -> tm num -> tm form = [b:tm num] [e:tm num] [v1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) (lam num num ([x3:tm num] times b x3))) e) one) v1.
power : tm (num arrow num arrow num arrow form) = lam3 num num num form ([x3:tm num] [x4:tm num] [x5:tm num] power' x3 x4 x5).
power_i : {B:tm num} {E:tm num} {V:tm num} pf (power' B E V) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E) V) = [B:tm num] [E:tm num] [V:tm num] [x3:pf (power' B E V)] def3_i num num num ([x4:tm num] [x5:tm num] [x6:tm num] power' x4 x5 x6) B E V x3.
power_e : {B:tm num} {E:tm num} {V:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E) V) -> pf (power' B E V) = [B:tm num] [E:tm num] [V:tm num] [x3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E) V)] def3_e num num num ([x4:tm num] [x5:tm num] [x6:tm num] power' x4 x5 x6) B E V x3.
power_isNat : {B:tm num} {E:tm num} {V:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E) V) -> pf (isNat E) = [B:tm num] [E:tm num] [V:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E) V)] ncomp_isNat num (lam num num ([x3:tm num] times B x3)) E one V (power_e B E V p1).
power_zero : {B:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) zero) one) = [B:tm num] power_i B zero one (ncomp_zero num (lam num num ([x3:tm num] times B x3)) one).
power_zero' : {B:tm num} {V:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) zero) V) -> pf (eq num one V) = [B:tm num] [V:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) zero) V)] ncomp_zero' num (lam num num ([x3:tm num] times B x3)) one V (power_e B zero V p1).
power_inc : {B:tm num} {M:tm num} {N:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) M) N) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) (succ M)) (times B N)) = [B:tm num] [M:tm num] [N:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) M) N)] cut (isNat M) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) (succ M)) (times B N)) (power_isNat B M N p1) ([p2:pf (isNat M)] cut3 (isNat (succ M)) (> (+ M (const 1)) (const 0)) (power' B (pred (succ M)) N) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) (succ M)) (times B N)) (isNat_succ_i M p2) (trans_geq_gt (+ M (const 1)) (const 1) (const 0) (ord_transitivity (+ M (const 1)) (+ zero (const 1)) (const 1) (greatereq_plus_cong2 M zero (const 1) (and_e2 (isInt M) (geq M zero) p2)) (pf_zero_plus_one_geq_one (const 1))) greater1_0) (congr num (pred (succ M)) M ([z1:tm num] power' B z1 N) (predsucc M) (power_e B M N p1)) ([lemma3:pf (isNat (succ M))] [lemma4:pf (gt (succ M) zero)] [lemma5:pf (power' B (pred (succ M)) N)] power_i B (succ M) (times B N) (congr num (times B N) (@ num num (lam num num ([x3:tm num] times B x3)) N) ([x3:tm num] power' B (succ M) x3) (symm num (@ num num (lam num num ([x3:tm num] times B x3)) N) (times B N) (beta num num ([x3:tm num] times B x3) N)) (ncomp_succ (succ M) num (lam num num ([x3:tm num] times B x3)) one N lemma3 lemma4 lemma5)))).
_power_prod_prop : tm num -> tm form = [e1:tm num] forall4 num num num num ([b:tm num] [e2:tm num] [v2:tm num] [v1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e1) v1 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e2) v2 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus e1 e2)) (times v1 v2)).
_power_prod_basis : pf (_power_prod_prop zero) = forall4_imp2_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) zero) x6) ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) x4) x5) ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) (plus zero x4)) (times x6 x5)) ([b:tm num] [e2:tm num] [v2:tm num] [v1:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) zero) v1)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e2) v2)] cut (eq num one v1) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus zero e2)) (times v1 v2)) (power_zero' b v1 p1) ([p3:pf (eq num one v1)] cut (eq num (times v1 v2) v2) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus zero e2)) (times v1 v2)) (congr num v1 one ([z1:tm num] eq num (times z1 v2) v2) (symm num one v1 p3) (one_times v2)) ([p6:pf (eq num (times v1 v2) v2)] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (+ zero e2)) v2) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus zero e2)) (times v1 v2)) (congr num (+ zero e2) e2 ([z2:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) z2) v2) (zero_plus e2) p2) ([p7:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus zero e2)) v2)] congr num (times v1 v2) v2 ([z3:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus zero e2)) z3) p6 p7)))).
_power_prod_step : {e1:tm num} pf (isNat e1) -> pf (_power_prod_prop e1) -> pf (_power_prod_prop (succ e1)) = [e1:tm num] [p1:pf (isNat e1)] [p2:pf (_power_prod_prop e1)] forall4_imp2_i num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) (succ e1)) x6) ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) x4) x5) ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) (plus (succ e1) x4)) (times x6 x5)) ([b:tm num] [e2:tm num] [v2:tm num] [v1:tm num] [p3:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ e1)) v1)] [p4:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e2) v2)] ncomp_succ_inv2 e1 num (lam num num ([x3:tm num] times b x3)) one v1 (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (isNat->geq_zero e1 p1) (power_e b (succ e1) v1 p3) ([u:tm num] [pa:pf (power' b e1 u)] [pb:pf (eq num (@ num num (lam num num ([x4:tm num] times b x4)) u) v1)] cut (eq num v1 (times b u)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (congr num (times b u) (@ num num (lam num num ([x3:tm num] times b x3)) u) ([x3:tm num] eq num v1 x3) (symm num (@ num num (lam num num ([x3:tm num] times b x3)) u) (times b u) (beta num num ([x3:tm num] times b x3) u)) (symm num (@ num num (lam num num ([x5:tm num] times b x5)) u) v1 pb)) ([pc1:pf (eq num v1 (times b u))] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus e1 e2)) (times u v2)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (imp2_e (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e1) u) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) e2) v2) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus e1 e2)) (times u v2)) (forall4_e num num num num ([x3:tm num] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) e1) x6 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) x4) x5 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) (plus e1 x4)) (times x6 x5)) p2 b e2 v2 u) (power_i b e1 u pa) p4) ([pd:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus e1 e2)) (times u v2))] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times b (times u v2))) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (power_inc b (plus e1 e2) (times u v2) pd) ([pe:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times b (times u v2)))] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times (times b u) v2)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (congr num (times (times b u) v2) (times b (times u v2)) ([z1:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) z1) (assoc_mult b u v2) pe) ([pg:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times (times b u) v2))] cut (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times v1 v2)) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (congr num v1 (times b u) ([z2:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times z2 v2)) pc1 pg) ([ph:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (succ (plus e1 e2))) (times v1 v2))] cut (eq num (plus e1 (plus one e2)) (succ (plus e1 e2))) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (congr num (plus one e2) (plus e2 one) ([z3:tm num] eq num (plus e1 z3) (succ (plus e1 e2))) (comm_add one e2) (symm num (plus (plus e1 e2) one) (plus e1 (plus e2 one)) (assoc_add e1 e2 one))) ([pi1:pf (eq num (plus e1 (plus one e2)) (succ (plus e1 e2)))] cut (eq num (plus (plus e1 one) e2) (succ (plus e1 e2))) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) (plus (succ e1) e2)) (times v1 v2)) (congr num (plus (plus e1 one) e2) (plus e1 (plus one e2)) ([z4:tm num] eq num z4 (succ (plus e1 e2))) (assoc_add e1 one e2) pi1) ([pj:pf (eq num (plus (succ e1) e2) (succ (plus e1 e2)))] congr num (plus (succ e1) e2) (succ (plus e1 e2)) ([z5:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power b) z5) (times v1 v2)) pj ph))))))))).
_power_prod_ugly : pf (forall num ([n:tm num] isNat n imp _power_prod_prop n)) = induction ([x3:tnum] _power_prod_prop x3) _power_prod_basis ([n:tnum] [x3:pf (isNat n)] [x4:pf (_power_prod_prop n)] _power_prod_step n x3 x4).
power_prod : {B:tm num} {E1:tm num} {V1:tm num} {E2:tm num} {V2:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E1) V1) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E2) V2) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) (plus E1 E2)) (times V1 V2)) = [B:tm num] [E1:tm num] [V1:tm num] [E2:tm num] [V2:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E1) V1)] [p2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power B) E2) V2)] forall4_imp2_e num num num num ([x3:tm num] [y:tm num] [z1:tm num] [u:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x3) E1) u) ([x4:tm num] [y:tm num] [z2:tm num] [u:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x4) y) z2) ([x5:tm num] [y:tm num] [z3:tm num] [u:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power x5) (plus E1 y)) (times u z3)) (forall_imp_e num ([a:tm num] isNat a) ([a:tm num] _power_prod_prop a) _power_prod_ugly E1 (power_isNat B E1 V1 p1)) B E2 V2 V1 p1 p2.
power->power2 : {E:tm num} {V:tm num} pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power two) E) V) -> pf (@ num form (@ num (num arrow form) power2 E) V) = [E:tm num] [V:tm num] [p1:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power two) E) V)] def2_i num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) E V (and_i (isNat E) (power' two E V) (power_isNat two E V p1) (power_e two E V p1)).
power2->power : {E:tm num} {V:tm num} pf (@ num form (@ num (num arrow form) power2 E) V) -> pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) power two) E) V) = [E:tm num] [V:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 E) V)] power_i two E V (and_e2 (isNat E) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) E) one) V) (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) E V p1)).
parfun_power2 : pf (parfun num num power2) = forall3_i num num num ([x3:tm num] [x4:tm num] [x5:tm num] @ num form (@ num (num arrow form) power2 x3) x4 imp @ num form (@ num (num arrow form) power2 x3) x5 imp eq num x4 x5) ([m:tm num] [n:tm num] [n':tm num] imp2_i (@ num form (@ num (num arrow form) power2 m) n) (@ num form (@ num (num arrow form) power2 m) n') (eq num n n') ([p1:pf (@ num form (@ num (num arrow form) power2 m) n)] [p2:pf (@ num form (@ num (num arrow form) power2 m) n')] and_l (isNat m) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n) (eq num n n') (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) m n p1) ([p1_1:pf (isNat m)] [p1_2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n)] and_l (isNat m) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n') (eq num n n') (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) m n' p2) ([p2_1:pf (isNat m)] [p2_2:pf (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n')] imp2_e (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) m) one) n') (eq num n n') (forall4_e (num arrow num) num num num ([x3:tm (num arrow num)] [x4:tm num] [x5:tm num] [x6:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) x3) m) x4) x5 imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) x3) m) x4) x6 imp eq num x5 x6) (imp_e (isNat m) (forall4 (num arrow num) num num num ([F:tm (num arrow num)] [X:tm num] [Y:tm num] [Z:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) F) m) X) Y imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) F) m) X) Z imp eq num Y Z)) (forall_e num ([x3:tm num] isNat x3 imp forall4 (num arrow num) num num num ([F:tm (num arrow num)] [X:tm num] [Y:tm num] [Z:tm num] @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) F) x3) X) Y imp @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) F) x3) X) Z imp eq num Y Z)) (ncomp_unique num) m) p1_1) double one n n') p1_2 p2_2)))).
power2_inc : {M:tm num} {N:tm num} pf (@ num form (@ num (num arrow form) power2 M) N) -> pf (@ num form (@ num (num arrow form) power2 (succ M)) (times two N)) = [M:tm num] [N:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 M) N)] power->power2 (succ M) (times two N) (power_inc two M N (power2->power M N p1)).
power2_eval_parts : {N:word32} {M:word32} {N+1:word32} {M*2:word32} pf (@ num form (@ num (num arrow form) power2 (succ (const N))) (times two (const M))) -> rep_plus N 1 N+1 -> rep_times 2 M M*2 -> pf (@ num form (@ num (num arrow form) power2 (const N+1)) (const M*2)) = [N:word32] [M:word32] [N+1:word32] [M*2:word32] [p1:pf (@ num form (@ num (num arrow form) power2 (succ (const N))) (times two (const M)))] [p2:rep_plus N 1 N+1] [p3:rep_times 2 M M*2] cut2 (== num (+ (shadowed_2 N) (shadowed_2 1)) (shadowed_2 N+1)) (== num (* (shadowed_2 2) (shadowed_2 M)) (shadowed_2 M*2)) (@ num form (@ num (num arrow form) power2 (shadowed_2 N+1)) (shadowed_2 M*2)) (eval_plus N 1 N+1 p2) (eval_times 2 M M*2 p3) ([q1:pf (== num (+ (shadowed_2 N) (shadowed_2 1)) (shadowed_2 N+1))] [q2:pf (== num (* (shadowed_2 2) (shadowed_2 M)) (shadowed_2 M*2))] congr2 num num (shadowed_2 N+1) (+ (shadowed_2 N) (shadowed_2 1)) (shadowed_2 M*2) (* (shadowed_2 2) (shadowed_2 M)) ([z1:tm num] [z2:tm num] @ num form (@ num (num arrow form) power2 z1) z2) (symm num (+ (shadowed_2 N) (shadowed_2 1)) (shadowed_2 N+1) q1) (symm num (* (shadowed_2 2) (shadowed_2 M)) (shadowed_2 M*2) q2) p1).
power2_eval_next : {N:word32} {M:word32} {N+1:word32} {M*2:word32} pf (@ num form (@ num (num arrow form) power2 (const N)) (const M)) -> rep_plus N 1 N+1 -> rep_times 2 M M*2 -> pf (@ num form (@ num (num arrow form) power2 (const N+1)) (const M*2)) = [N:word32] [M:word32] [N+1:word32] [M*2:word32] [p1:pf (@ num form (@ num (num arrow form) power2 (const N)) (const M))] [p2:rep_plus N 1 N+1] [p3:rep_times 2 M M*2] power2_eval_parts N M N+1 M*2 (power2_inc (const N) (const M) p1) p2 p3.
power2_0 : pf (@ num form (@ num (num arrow form) power2 zero) one) = power->power2 zero one (power_zero two).
power2_1 : pf (@ num form (@ num (num arrow form) power2 (const 1)) (const 2)) = power2_eval_next 0 1 1 2 power2_0 pfSucc0 pfMultSucc0.
power2_2 : pf (@ num form (@ num (num arrow form) power2 (const 2)) (const 4)) = power2_eval_next 1 2 2 4 power2_1 pfSucc1 pfMultSucc1.
power2_3 : pf (@ num form (@ num (num arrow form) power2 (const 3)) (const 8)) = power2_eval_next 2 4 3 8 power2_2 pfSucc2 pfMultSucc2.
power2_4 : pf (@ num form (@ num (num arrow form) power2 (const 4)) (const 16)) = power2_eval_next 3 8 4 16 power2_3 pfSucc3 pfMultSucc3.
power2_5 : pf (@ num form (@ num (num arrow form) power2 (const 5)) (const 32)) = power2_eval_next 4 16 5 32 power2_4 pfSucc4 pfMultSucc4.
power2_6 : pf (@ num form (@ num (num arrow form) power2 (const 6)) (const 64)) = power2_eval_next 5 32 6 64 power2_5 pfSucc5 pfMultSucc5.
power2_7 : pf (@ num form (@ num (num arrow form) power2 (const 7)) (const 128)) = power2_eval_next 6 64 7 128 power2_6 pfSucc6 pfMultSucc6.
power2_8 : pf (@ num form (@ num (num arrow form) power2 (const 8)) (const 256)) = power2_eval_next 7 128 8 256 power2_7 pfSucc7 pfMultSucc7.
power2_9 : pf (@ num form (@ num (num arrow form) power2 (const 9)) (const 512)) = power2_eval_next 8 256 9 512 power2_8 pfSucc8 pfMultSucc8.
power2_10 : pf (@ num form (@ num (num arrow form) power2 (const 10)) (const 1024)) = power2_eval_next 9 512 10 1024 power2_9 pfSucc9 pfMultSucc9.
power2_11 : pf (@ num form (@ num (num arrow form) power2 (const 11)) (const 2048)) = power2_eval_next 10 1024 11 2048 power2_10 pfSucc10 pfMultSucc10.
power2_12 : pf (@ num form (@ num (num arrow form) power2 (const 12)) (const 4096)) = power2_eval_next 11 2048 12 4096 power2_11 pfSucc11 pfMultSucc11.
power2_13 : pf (@ num form (@ num (num arrow form) power2 (const 13)) (const 8192)) = power2_eval_next 12 4096 13 8192 power2_12 pfSucc12 pfMultSucc12.
power2_14 : pf (@ num form (@ num (num arrow form) power2 (const 14)) (const 16384)) = power2_eval_next 13 8192 14 16384 power2_13 pfSucc13 pfMultSucc13.
power2_15 : pf (@ num form (@ num (num arrow form) power2 (const 15)) (const 32768)) = power2_eval_next 14 16384 15 32768 power2_14 pfSucc14 pfMultSucc14.
power2_16 : pf (@ num form (@ num (num arrow form) power2 (const 16)) (const 65536)) = power2_eval_next 15 32768 16 65536 power2_15 pfSucc15 pfMultSucc15.
power2_17 : pf (@ num form (@ num (num arrow form) power2 (const 17)) (const 131072)) = power2_eval_next 16 65536 17 131072 power2_16 pfSucc16 pfMultSucc16.
power2_18 : pf (@ num form (@ num (num arrow form) power2 (const 18)) (const 262144)) = power2_eval_next 17 131072 18 262144 power2_17 pfSucc17 pfMultSucc17.
power2_19 : pf (@ num form (@ num (num arrow form) power2 (const 19)) (const 524288)) = power2_eval_next 18 262144 19 524288 power2_18 pfSucc18 pfMultSucc18.
power2_20 : pf (@ num form (@ num (num arrow form) power2 (const 20)) (const 1048576)) = power2_eval_next 19 524288 20 1048576 power2_19 pfSucc19 pfMultSucc19.
power2_21 : pf (@ num form (@ num (num arrow form) power2 (const 21)) (const 2097152)) = power2_eval_next 20 1048576 21 2097152 power2_20 pfSucc20 pfMultSucc20.
power2_22 : pf (@ num form (@ num (num arrow form) power2 (const 22)) (const 4194304)) = power2_eval_next 21 2097152 22 4194304 power2_21 pfSucc21 pfMultSucc21.
power2_23 : pf (@ num form (@ num (num arrow form) power2 (const 23)) (const 8388608)) = power2_eval_next 22 4194304 23 8388608 power2_22 pfSucc22 pfMultSucc22.
power2_24 : pf (@ num form (@ num (num arrow form) power2 (const 24)) (const 16777216)) = power2_eval_next 23 8388608 24 16777216 power2_23 pfSucc23 pfMultSucc23.
power2_25 : pf (@ num form (@ num (num arrow form) power2 (const 25)) (const 33554432)) = power2_eval_next 24 16777216 25 33554432 power2_24 pfSucc24 pfMultSucc24.
power2_26 : pf (@ num form (@ num (num arrow form) power2 (const 26)) (const 67108864)) = power2_eval_next 25 33554432 26 67108864 power2_25 pfSucc25 pfMultSucc25.
power2_27 : pf (@ num form (@ num (num arrow form) power2 (const 27)) (const 134217728)) = power2_eval_next 26 67108864 27 134217728 power2_26 pfSucc26 pfMultSucc26.
power2_28 : pf (@ num form (@ num (num arrow form) power2 (const 28)) (const 268435456)) = power2_eval_next 27 134217728 28 268435456 power2_27 pfSucc27 pfMultSucc27.
power2_29 : pf (@ num form (@ num (num arrow form) power2 (const 29)) (const 536870912)) = power2_eval_next 28 268435456 29 536870912 power2_28 pfSucc28 pfMultSucc28.
power2_30 : pf (@ num form (@ num (num arrow form) power2 (const 30)) (const 1073741824)) = power2_eval_next 29 536870912 30 1073741824 power2_29 pfSucc29 pfMultSucc29.
power2_prod' : {V1:tm num} {F1:tm num} {V2:tm num} {F2:tm num} pf (@ num form (@ num (num arrow form) power2 V1) F1) -> pf (@ num form (@ num (num arrow form) power2 V2) F2) -> pf (@ num form (@ num (num arrow form) power2 (plus V1 V2)) (times F1 F2)) = [V1:tm num] [F1:tm num] [V2:tm num] [F2:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 V1) F1)] [p2:pf (@ num form (@ num (num arrow form) power2 V2) F2)] power->power2 (plus V1 V2) (times F1 F2) (power_prod two V1 F1 V2 F2 (power2->power V1 F1 p1) (power2->power V2 F2 p2)).
16+16 : rep_plus 16 16 32 = 16+16.
power2_32_is : pf (@ num form (@ num (num arrow form) power2 (const 32)) pow2_32) = cut (@ num form (@ num (num arrow form) power2 (plus (const 16) (const 16))) (times (const 65536) (const 65536))) (@ num form (@ num (num arrow form) power2 (shadowed_2 32)) pow2_32) (power2_prod' (const 16) (const 65536) (const 16) (const 65536) power2_16 power2_16) ([p1:pf (@ num form (@ num (num arrow form) power2 (plus (const 16) (const 16))) (times (const 65536) (const 65536)))] congr2 num num (shadowed_2 32) (+ (shadowed_2 16) (shadowed_2 16)) pow2_32 (* (shadowed_2 65536) (shadowed_2 65536)) ([y:tm num] [z1:tm num] @ num form (@ num (num arrow form) power2 y) z1) (symm num (+ (shadowed_2 16) (shadowed_2 16)) (shadowed_2 32) (eval_plus 16 16 32 16+16)) pow2_32_eq_65536*65536 p1).
power2_exists_hyp : tm num -> tm form = [n:tm num] exists num ([x3:tm num] @ num form (@ num (num arrow form) power2 n) x3).
power2_exists_base : pf (power2_exists_hyp zero) = exists_i num ([x3:tm num] @ num form (@ num (num arrow form) power2 zero) x3) one power2_0.
power2_exists_step : {n:tnum} pf (isNat n) -> pf (power2_exists_hyp n) -> pf (power2_exists_hyp (succ n)) = [n:tnum] [p1:pf (isNat n)] [p2:pf (power2_exists_hyp n)] cut (isNat n) (exists num ([x3:tm num] @ num form (@ num (num arrow form) power2 (succ n)) x3)) p1 ([x3:pf (isNat n)] exists_e num ([x4:tm num] @ num form (@ num (num arrow form) power2 n) x4) (exists num ([x4:tm num] @ num form (@ num (num arrow form) power2 (succ n)) x4)) p2 ([x4:tm num] [p3:pf (@ num form (@ num (num arrow form) power2 n) x4)] exists_i num ([x5:tm num] @ num form (@ num (num arrow form) power2 (succ n)) x5) (times two x4) (power2_inc n x4 p3))).
power2_exists : {I:tnum} pf (isNat I) -> pf (exists num ([x3:tm num] @ num form (@ num (num arrow form) power2 I) x3)) = [I:tnum] [p1:pf (isNat I)] forall_imp_e num ([a:tm num] isNat a) ([a:tm num] power2_exists_hyp a) (induction ([x3:tnum] power2_exists_hyp x3) power2_exists_base ([n:tnum] [x3:pf (isNat n)] [x4:pf (power2_exists_hyp n)] power2_exists_step n x3 x4)) I p1.
power2_gt_hyp : tm num -> tform = [i1:tm num] forall num ([n:tm num] @ num form (@ num (num arrow form) power2 i1) n imp isNat n and neq num n zero).
power2_gt_base : pf (power2_gt_hyp zero) = forall_i num ([x3:tm num] @ num form (@ num (num arrow form) power2 zero) x3 imp isNat x3 and neq num x3 zero) ([n:tm num] imp_i (@ num form (@ num (num arrow form) power2 zero) n) (isNat n and neq num n zero) ([p3:pf (@ num form (@ num (num arrow form) power2 zero) n)] cut (eq num n one) (isNat n and neq num n zero) (parfun_e num num power2 zero n one parfun_power2 p3 power2_0) ([p4:pf (eq num n one)] congr num n one ([z1:tm num] isNat z1 and neq num z1 zero) p4 (and_i (isNat one) (!= num (const 1) (const 0)) n_one (gt->neq (const 1) (const 0) greater1_0))))).
n_two : pf (isNat two) = congr num (shadowed_2 2) (+ (shadowed_2 1) (shadowed_2 1)) ([x3:tm num] isNat x3) (symm num (+ (shadowed_2 1) (shadowed_2 1)) (shadowed_2 2) (eval_plus 1 1 2 1+1)) (isNat_succ_i one n_one).
2>0 : rep_div 0 2 0 = 0/2.
two!=0 : pf (neq num two zero) = gt->neq (shadowed_2 2) (shadowed_2 0) (eval_gt 0 2 2>0).
power2_gt_step : {i1:tnum} pf (isNat i1) -> pf (power2_gt_hyp i1) -> pf (power2_gt_hyp (succ i1)) = [i2:tnum] [p1:pf (isNat i2)] [p2:pf (power2_gt_hyp i2)] forall_i num ([x3:tm num] @ num form (@ num (num arrow form) power2 (succ i2)) x3 imp isNat x3 and neq num x3 zero) ([n:tm num] imp_i (@ num form (@ num (num arrow form) power2 (succ i2)) n) (isNat n and neq num n zero) ([p4:pf (@ num form (@ num (num arrow form) power2 (succ i2)) n)] exists_e num ([x3:tm num] @ num form (@ num (num arrow form) power2 i2) x3) (isNat n and neq num n zero) (power2_exists i2 p1) ([n1:tm num] [p5:pf (@ num form (@ num (num arrow form) power2 i2) n1)] cut (@ num form (@ num (num arrow form) power2 (succ i2)) (times two n1)) (isNat n and neq num n zero) (power2_inc i2 n1 p5) ([p6:pf (@ num form (@ num (num arrow form) power2 (succ i2)) (times two n1))] cut (eq num n (times two n1)) (isNat n and neq num n zero) (parfun_e num num power2 (succ i2) n (times two n1) parfun_power2 p4 p6) ([p7:pf (eq num n (times two n1))] and_l (isNat n1) (neq num n1 zero) (isNat n and neq num n zero) (forall_imp_e num ([a:tm num] @ num form (@ num (num arrow form) power2 i2) a) ([a:tm num] isNat a and neq num a zero) p2 n1 p5) ([p8:pf (isNat n1)] [p9:pf (neq num n1 zero)] cut (isNat n) (isNat n and neq num n zero) (congr num n (times two n1) ([x3:tm num] isNat x3) p7 (nat_prod two n1 n_two p8)) ([p10:pf (isNat n)] cut (neq num n zero) (isNat n and neq num n zero) (congr num n (times two n1) ([z1:tm num] neq num z1 zero) p7 (neq_mult_closure two n1 two!=0 p9)) ([p11:pf (neq num n zero)] and_i (isNat n) (neq num n zero) p10 p11)))))))).
power2_gt_zero : {I:tm num} {N:tm num} pf (@ num form (@ num (num arrow form) power2 I) N) -> pf (isNat N and neq num N zero) = [I:tm num] [N:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 I) N)] cut (_forall num ([n:tnum] isNat n imp power2_gt_hyp n)) (isNat N and neq num N zero) (induction ([x3:tnum] power2_gt_hyp x3) power2_gt_base ([n:tnum] [x3:pf (isNat n)] [x4:pf (power2_gt_hyp n)] power2_gt_step n x3 x4)) ([p2:pf (forall num ([i1:tm num] isNat i1 imp power2_gt_hyp i1))] forall_imp_e num ([a:tm num] @ num form (@ num (num arrow form) power2 I) a) ([a:tm num] isNat a and neq num a zero) (forall_imp_e num ([a:tm num] isNat a) ([a:tm num] power2_gt_hyp a) p2 I (and_e1 (isNat I) (@ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) I) one) N) (def2_e num num ([x3:tm num] [x4:tm num] isNat x3 and @ num form (@ num (num arrow form) (@ num (num arrow num arrow form) (@ (num arrow num) (num arrow num arrow num arrow form) (ncomp num) double) x3) one) x4) I N p1))) N p1).
power2_gt_zero' : {I:tm num} {N:tm num} pf (@ num form (@ num (num arrow form) power2 I) N) -> pf (gt N zero) = [I:tm num] [N:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 I) N)] and_l (isNat N) (neq num N zero) (> N zero) (power2_gt_zero I N p1) ([p2:pf (isNat N)] [p3:pf (neq num N zero)] neq->geq->gt N zero p3 (isNat->geq_zero N p2)).
power2_isnat : {A:tm num} {B:tm num} pf (@ num form (@ num (num arrow form) power2 A) B) -> pf (isNat B) = [A:tm num] [B:tm num] [p2:pf (@ num form (@ num (num arrow form) power2 A) B)] and_e1 (isNat B) (neq num B zero) (power2_gt_zero A B p2).
power2_digshift : {I:tm num} {A:tm num} pf (@ num form (@ num (num arrow form) power2 I) A) -> pf (@ num form (@ num (num arrow form) power2 (plus I eight)) (A dig 0)) = [I:tm num] [A:tm num] [p1:pf (@ num form (@ num (num arrow form) power2 I) A)] cut (@ num form (@ num (num arrow form) power2 (plus I (const 8))) (times A (const 256))) (@ num form (@ num (num arrow form) power2 (plus I eight)) (A dig 0)) (power2_prod' I A (const 8) (const 256) p1 power2_8) ([p21:pf (@ num form (@ num (num arrow form) power2 (plus I eight)) (times A (const bignum_base)))] congr num (A dig 0) (* A (shadowed_2 bignum_base)) ([z1:tm num] @ num form (@ num (num arrow form) power2 (plus I eight)) z1) (dig0lem A) p21).
